{"task": "Fibonacci_n-step_number_sequences", "blocks": [{"lang": "Ada", "loc": 11, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Bonacci <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Sequence <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Generate<span class=\"br0\">(</span>Start: Sequence; Length: Positive\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Sequence;<br/>\u00a0<br/>   Start_Fibonacci:  <span class=\"kw3\">constant</span> Sequence\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Start_Tribonacci: <span class=\"kw3\">constant</span> Sequence\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   Start_Tetranacci: <span class=\"kw3\">constant</span> Sequence\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>   Start_Lucas:      <span class=\"kw3\">constant</span> Sequence\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Bonacci;</pre>"}, {"lang": "ACL2", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>sum <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> n-bonacci <span class=\"br0\">(</span>prevs limit<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp limit<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>next <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>rest prevs<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>sum prevs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first next<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>n-bonacci next <span class=\"br0\">(</span><span class=\"nu0\">1</span>- limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL 68", "loc": 31, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns an array of the first required count elements of an a n-step fibonacci sequence #</span><br/><span class=\"coMULTI\"># the initial values are taken from the init array                                        #</span><br/><span class=\"kw4\">PROC</span> n step fibonacci sequence <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> init<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> required count <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> required count <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>         <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> initial values <span class=\"sy1\">=</span> init<span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> step             <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> initial values<span class=\"sy1\">;</span><br/>         <span class=\"coMULTI\"># install the initial values                                                     #</span><br/>         <span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> step <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> initial values<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         <span class=\"coMULTI\"># calculate the rest of the sequence                                             #</span><br/>         <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> step <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> required count <span class=\"kw2\">DO</span><br/>             result<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>             <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> n <span class=\"sy1\">-</span> step <span class=\"kw2\">TO</span> n <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> result<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"kw2\">OD</span><br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># required count #</span><br/>\u00a0<br/><span class=\"coMULTI\"># prints the elements of a sequence                                                       #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> sequence <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> legend<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> sequence <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> legend<span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> e <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> sequence <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> sequence <span class=\"kw2\">DO</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sequence<span class=\"br0\">[</span> e <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print sequence #</span><br/>\u00a0<br/><span class=\"coMULTI\"># print some sequences                                                                    #</span><br/><span class=\"kw22\">print</span> sequence<span class=\"br0\">(</span> <span class=\"st0\">\"fibonacci   \"</span><span class=\"sy1\">,</span> n step fibonacci sequence<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">,</span>       10 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> sequence<span class=\"br0\">(</span> <span class=\"st0\">\"tribonacci  \"</span><span class=\"sy1\">,</span> n step fibonacci sequence<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">,</span>    10 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> sequence<span class=\"br0\">(</span> <span class=\"st0\">\"tetrabonacci\"</span><span class=\"sy1\">,</span> n step fibonacci sequence<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 10 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> sequence<span class=\"br0\">(</span> <span class=\"st0\">\"lucus       \"</span><span class=\"sy1\">,</span> n step fibonacci sequence<span class=\"br0\">(</span> <span class=\"br0\">(</span> 2<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">,</span>       10 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">for i<span class=\"sy0\">,</span> seq in <span class=\"br0\">[</span><span class=\"st0\">\"nacci\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"lucas\"</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">{</span><br/>        Out <span class=\"sy0\">.=</span> seq <span class=\"st0\">\"(\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"): \"</span><br/>        for key<span class=\"sy0\">,</span> val in NStepSequence<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>            Out <span class=\"sy0\">.=</span> val <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">15</span>\u00a0? <span class=\"st0\">\"`n\"</span>\u00a0: <span class=\"st0\">\"`, \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Out<br/>\u00a0<br/>NStepSequence<span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> v2<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>v1<span class=\"sy0\">,</span> v2<span class=\"br0\">]</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>        a<span class=\"br0\">[</span>j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>\u00a0? j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\u00a0: n<br/>            a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 50, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Fibonacci Sequence:<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:nfib 1 1<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Tribonacci Sequence:<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:nfib 1 1 2<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Tetranacci Sequence:<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:nfib 1 1 2 4<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Lucas Numbers:<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:nfib 2 1<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\u00a0<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">nfib</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a count+=1<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> seq=<span class=\"sy0\">!</span><span class=\"re2\">seq</span><span class=\"sy0\">!</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"seq=<span class=\"sy0\">%</span><span class=\"re3\">seq</span><span class=\"sy0\">%</span> <span class=\"co3\">^|</span> \"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n=-<span class=\"sy0\">%</span><span class=\"re3\">count</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a n+=1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> F<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span> <br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a n+=1 <br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,10<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a termstart=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>-<span class=\"sy0\">%</span><span class=\"re3\">count</span><span class=\"sy0\">%%</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a termend=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>-1<br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">termstart</span><span class=\"sy0\">!</span><span class=\"re2\">,1,</span><span class=\"sy0\">!</span><span class=\"re2\">termend</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a F<span class=\"sy0\">%%</span><span class=\"re3\">i</span>+=<span class=\"sy0\">!</span><span class=\"re2\">F</span><span class=\"sy0\">%%</span><span class=\"re3\">j</span><span class=\"sy0\">!</span><br/>  <span class=\"sy0\">)</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> seq=<span class=\"sy0\">!</span><span class=\"re2\">seq</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">F</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">seq</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      @% = 5\u00a0: REM Column width<br/>\u00a0<br/>      PRINT \"Fibonacci:\"<br/>      DIM f2%(1)\u00a0: f2%() = 1,1<br/>      FOR i% = 1 TO 12\u00a0: PRINT f2%(0);\u00a0: PROCfibn(f2%())\u00a0: NEXT\u00a0: PRINT \" ...\"<br/>\u00a0<br/>      PRINT \"Tribonacci:\"<br/>      DIM f3%(2)\u00a0: f3%() = 1,1,2<br/>      FOR i% = 1 TO 12\u00a0: PRINT f3%(0);\u00a0: PROCfibn(f3%())\u00a0: NEXT\u00a0: PRINT \" ...\"<br/>\u00a0<br/>      PRINT \"Tetranacci:\"<br/>      DIM f4%(3)\u00a0: f4%() = 1,1,2,4<br/>      FOR i% = 1 TO 12\u00a0: PRINT f4%(0);\u00a0: PROCfibn(f4%())\u00a0: NEXT\u00a0: PRINT \" ...\"<br/>\u00a0<br/>      PRINT \"Lucas:\"<br/>      DIM fl%(1)\u00a0: fl%() = 2,1<br/>      FOR i% = 1 TO 12\u00a0: PRINT fl%(0);\u00a0: PROCfibn(fl%())\u00a0: NEXT\u00a0: PRINT \" ...\"<br/>      END<br/>\u00a0<br/>      DEF PROCfibn(f%())<br/>      LOCAL i%, s%<br/>      s% = SUM(f%())<br/>      FOR i% = 1 TO DIM(f%(),1)<br/>        f%(i%-1) = f%(i%)<br/>      NEXT<br/>      f%(i%-1) = s%<br/>      ENDPROC</pre>"}, {"lang": "Befunge", "loc": 8, "block": "<pre class=\"text highlighted_source\">110p&gt;&gt;55+109\"iccanaceD\"22099v<br/>v9013\"Tetranacci\"9014\"Lucas\"&lt;<br/>&gt;\"iccanobirT\"2109\"iccanobiF\"v<br/>&gt;&gt;:#,_0p20p0&gt;:01-\\2&gt;#v0&gt;#g&lt;&gt;&gt;<br/> ^<a class=\"__cf_email__\" data-cfemail=\"c09f80\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#:,+55$_^ JH v`1:v#\\p03&lt;<br/> _$.1+:77+`^vg03:_0g+&gt;\\:1+#^<br/> 50p-\\30v v\\&lt;&gt;\\30g1-\\^$$_:1-<br/> 05g04\\g&lt; &gt;`#^_:40p30g0&gt;^!:g</pre>"}, {"lang": "Bracmat", "loc": 41, "block": "<pre class=\"text highlighted_source\">( ( nacci<br/>  =   Init Cnt N made tail<br/>    .   ( plus<br/>        =   n<br/>          .  \u00a0!arg:#%?n\u00a0?arg&amp;!n+plus$!arg<br/>            | 0<br/>        )<br/>      &amp;\u00a0!arg:(?Init.?Cnt)<br/>      &amp;\u00a0!Init:? [?N<br/>      &amp;\u00a0!Init:?made<br/>      &amp;\u00a0!Cnt+-1*!N:?times<br/>      &amp; -1+-1*!N:?M<br/>      &amp;   whl<br/>        ' (\u00a0!times+-1:~&lt;0:?times<br/>          &amp;\u00a0!made:? [!M\u00a0?tail<br/>          &amp;\u00a0!made plus$!tail:?made<br/>          )<br/>      &amp;\u00a0!made<br/>  )<br/>&amp; ( pad<br/>  =   len w<br/>    .   @(!arg:? [?len)<br/>      &amp; @(\"          \":? [!len\u00a0?w)<br/>      &amp;\u00a0!w\u00a0!arg<br/>  )<br/>&amp;     (fibonacci.1 1)<br/>      (tribonacci.1 1 2)<br/>      (tetranacci.1 1 2 4)<br/>      (pentanacci.1 1 2 4 8)<br/>      (hexanacci.1 1 2 4 8 16)<br/>      (heptanacci.1 1 2 4 8 16 32)<br/>      (octonacci.1 1 2 4 8 16 32 64)<br/>      (nonanacci.1 1 2 4 8 16 32 64 128)<br/>      (decanacci.1 1 2 4 8 16 32 64 128 256)<br/>      (lucas.2 1)<br/> \u00a0:\u00a0?L<br/>&amp;   whl<br/>  ' (\u00a0!L:(?name.?Init)\u00a0?L<br/>    &amp; out$(str$(pad$!name \": \") nacci$(!Init.12))<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 43, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/*<br/>The function anynacci determines the n-arity of the sequence from the number of seed elements. 0 ended arrays are used since C does not have a way of determining the length of dynamic and function-passed integer arrays.*/</span><br/>\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><br/>anynacci <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>seedArray<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> howMany<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>howMany <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> initialCardinality<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> seedArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  initialCardinality <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> initialCardinality<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> seedArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> initialCardinality<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> howMany<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> initialCardinality<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> result<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> fibo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> tribo<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> tetra<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> luca<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>fibonacci <span class=\"sy0\">=</span> anynacci <span class=\"br0\">(</span>fibo<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>tribonacci <span class=\"sy0\">=</span> anynacci <span class=\"br0\">(</span>tribo<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>tetranacci <span class=\"sy0\">=</span> anynacci <span class=\"br0\">(</span>tetra<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>      <span class=\"sy0\">*</span>lucas <span class=\"sy0\">=</span> anynacci<span class=\"br0\">(</span>luca<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Fibonacci<span class=\"es1\">\\t</span>Tribonacci<span class=\"es1\">\\t</span>Tetranacci<span class=\"es1\">\\t</span>Lucas<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>%d\"</span><span class=\"sy0\">,</span> fibonacci<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> tribonacci<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            tetranacci<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> lucas<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 50, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;memory&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> nacci <span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> start , <span class=\"kw4\">int</span> arity <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> result <span class=\"br0\">(</span> start <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> sumstart <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span><span class=\"co1\">//summing starts at vector's begin + sumstart as</span><br/>                     <span class=\"co1\">//soon as the vector is longer than arity</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> result.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">15</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//we print out the first 15 numbers</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> result.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> arity <span class=\"br0\">)</span> <br/>\t result.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span> result.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , <br/>\t\t  result.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> result.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>\t result.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span> <span class=\"br0\">(</span> result.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span><br/>\t  sumstart , result.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> sumstart <span class=\"sy2\">+</span> arity  , <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t sumstart<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">move</span> <span class=\"br0\">(</span> result <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> naccinames <span class=\"br0\">{</span><span class=\"st0\">\"fibo\"</span> , <span class=\"st0\">\"tribo\"</span> , <br/>      <span class=\"st0\">\"tetra\"</span> , <span class=\"st0\">\"penta\"</span> , <span class=\"st0\">\"hexa\"</span> , <span class=\"st0\">\"hepta\"</span> , <span class=\"st0\">\"octo\"</span> , <span class=\"st0\">\"nona\"</span> , <span class=\"st0\">\"deca\"</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> fibo <span class=\"br0\">{</span> <span class=\"nu0\">1</span> , <span class=\"nu0\">1</span> <span class=\"br0\">}</span> , lucas <span class=\"br0\">{</span> <span class=\"nu0\">2</span> , <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">11</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> numberrow <span class=\"sy1\">=</span> nacci <span class=\"br0\">(</span> fibo , i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <br/>\t naccinames<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"st0\">\"nacci\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">copy</span> <span class=\"br0\">(</span> numberrow.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numberrow.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t    std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> , <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"...<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>      numberrow <span class=\"sy1\">=</span> nacci <span class=\"br0\">(</span> lucas , i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Lucas-\"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy4\">;</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span>               <span class=\"co1\">//for formatting purposes</span><br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"   \u00a0: \"</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"  \u00a0: \"</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">copy</span> <span class=\"br0\">(</span> numberrow.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numberrow.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t    std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> , <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"...<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 84, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Fibonacci<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            PrintNumberSequence<span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci\"</span>, GetNnacciNumbers<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PrintNumberSequence<span class=\"br0\">(</span><span class=\"st0\">\"Lucas\"</span>, GetLucasNumbers<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PrintNumberSequence<span class=\"br0\">(</span><span class=\"st0\">\"Tribonacci\"</span>, GetNnacciNumbers<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PrintNumberSequence<span class=\"br0\">(</span><span class=\"st0\">\"Tetranacci\"</span>, GetNnacciNumbers<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> GetLucasNumbers<span class=\"br0\">(</span><span class=\"kw4\">int</span> length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> seedSequence <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> GetFibLikeSequence<span class=\"br0\">(</span>seedSequence, length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> GetNnacciNumbers<span class=\"br0\">(</span><span class=\"kw4\">int</span> seedLength, <span class=\"kw4\">int</span> length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> GetFibLikeSequence<span class=\"br0\">(</span>GetNacciSeed<span class=\"br0\">(</span>seedLength<span class=\"br0\">)</span>, length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> GetNacciSeed<span class=\"br0\">(</span><span class=\"kw4\">int</span> seedLength<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> seedSquence <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> seedLength <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                seedSquence<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">ulong</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> seedSquence<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> GetFibLikeSequence<span class=\"br0\">(</span>IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> seedSequence, <span class=\"kw4\">int</span> length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> sequence <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> seedSequence<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy0\">&lt;=</span> count<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                sequence <span class=\"sy0\">=</span> seedSequence<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>length<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                sequence <span class=\"sy0\">=</span> seedSequence<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">ulong</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> count<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        num <span class=\"sy0\">+=</span> sequence<span class=\"br0\">[</span>sequence<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>                    sequence<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> sequence<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PrintNumberSequence<span class=\"br0\">(</span><span class=\"kw4\">string</span> Title, IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> numbersequence<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            StringBuilder output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span>Title<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> item <span class=\"kw1\">in</span> numbersequence<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">AppendFormat</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}, \"</span>, item<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>output<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> nacci <span class=\"br0\">[</span>init<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>s <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">lazy-cat</span> init <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">map</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> init<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>show <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>name init<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"first 20\"</span> name <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">20</span> <span class=\"br0\">(</span>nacci init<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>show <span class=\"st0\">\"Fibonacci\"</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>show <span class=\"st0\">\"Tribonacci\"</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>show <span class=\"st0\">\"Tetranacci\"</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>show <span class=\"st0\">\"Lucas\"</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> gen-fib <span class=\"br0\">(</span>lst m<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the first m members of a generalized Fibonacci sequence using lst as initial values<br/>   and the length of lst as step.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>fib-<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"kw1\">l</span> sum <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i fib-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span> fib-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>c <span class=\"br0\">(</span>+ <span class=\"kw1\">l</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ c <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> c m<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> fib-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> initial-values <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the initial values of the Fibonacci n-step sequence\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>              collect <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Lucas series: ~a~%\"</span> <span class=\"br0\">(</span>gen-fib '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">2</span> to <span class=\"nu0\">4</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Fibonacci ~a-step sequence: ~a~%\"</span> i <span class=\"br0\">(</span>gen-fib <span class=\"br0\">(</span>initial-values i<span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 29, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> memo<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> addNum<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setHead<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> head<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        memo <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span><br/>        addNum <span class=\"sy0\">=</span> head.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> fibber<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> memo.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            memo <span class=\"sy0\">~=</span> iota<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> addNum<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fibber.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    setHead<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">10</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fibber.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    setHead<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">10</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fibber.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> prefixes <span class=\"sy0\">=</span> <span class=\"st0\">\"fibo tribo tetra penta hexa hepta octo nona deca\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> name<span class=\"sy0\">;</span> prefixes.<span class=\"me1\">split</span>.<span class=\"me1\">enumerate</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setHead<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">~</span> iota<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> a<span class=\"br0\">}</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"n=%2d,\u00a0%5snacci -&gt;\u00a0%(%d\u00a0%) ...\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span><br/>                 <span class=\"nu0\">15</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fibber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; generate a recursive lambda() for a x-nacci</span><br/><span class=\"co1\">;; equip it with memo\u00efzation</span><br/><span class=\"co1\">;; bind it to its name</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>nacci name seed<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> len <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>define<span class=\"sy0\">-</span>global name <br/>\t\t\t`<span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n ,len<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>,name i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>remember name seed<span class=\"br0\">)</span><br/>\t\tname<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> nacci<span class=\"sy0\">-</span>family `<span class=\"br0\">(</span><br/>\t<span class=\"br0\">(</span>Fibonacci #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>Tribonacci #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>Tetranacci #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>Decanacci #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>Random<span class=\"sy0\">-</span>\ud83d\ude1c<span class=\"sy0\">-</span>nacci ,<span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span>take <span class=\"nu0\">6</span> <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>iota <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>Lucas #<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task naccis<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>nacci naccis<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>define<span class=\"sy0\">-</span>values <span class=\"br0\">(</span>name seed<span class=\"br0\">)</span> nacci<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>nacci name seed<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>printf <span class=\"st0\">\"%s[%d]  \u2192\u00a0%d\"</span> name <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> seed<span class=\"br0\">)</span> <span class=\"br0\">(</span>take name <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def anynacci(start_sequence, count) do<br/>    n = length(start_sequence)<br/>    anynacci(Enum.reverse(start_sequence), count-n, n)<br/>  end<br/>\u00a0<br/>  def anynacci(seq, 0, _), do: Enum.reverse(seq)<br/>  def anynacci(seq, count, n) do<br/>    next = Enum.sum(Enum.take(seq, n))<br/>    anynacci([next|seq], count-1, n)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.anynacci([1,1], 15)<br/>\u00a0<br/>naccis = [ lucus:      [2,1],<br/>           fibonacci:  [1,1],<br/>           tribonacci: [1,1,2],<br/>           tetranacci: [1,1,2,4],<br/>           pentanacci: [1,1,2,4,8],<br/>           hexanacci:  [1,1,2,4,8,16],<br/>           heptanacci: [1,1,2,4,8,16,32],<br/>           octonacci:  [1,1,2,4,8,16,32,64],<br/>           nonanacci:  [1,1,2,4,8,16,32,64,128],<br/>           decanacci:  [1,1,2,4,8,16,32,64,128,256] ]<br/>Enum.each(naccis, fn {name, list} -&gt;<br/> \u00a0:io.format(\"~11s: \", [name])<br/>  IO.inspect RC.anynacci(list, 15)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-module( fibonacci_nstep ).<br/>\u00a0<br/>-export( [nacci/2, task/0] ).<br/>\u00a0<br/>nacci( N, Ns ) when N =&lt; erlang:length(Ns) -&gt;<br/>\t{Sequence, _Not_sequence} = lists:split( N, Ns ),<br/>\tSequence;<br/>nacci( N, Ns ) -&gt;<br/>\tNth = erlang:length( Ns ),<br/>\t{_Nth, Sequence_reversed} = lists:foldl( fun nacci_foldl/2, {Nth, lists:reverse(Ns)}, lists:seq(Nth+1, N) ),<br/>\tlists:reverse( Sequence_reversed ).<br/>\u00a0<br/>task() -&gt;<br/>\tNames_and_funs = [{X, fun (N) -&gt; nacci( N, Y ) end} || {X, Y} &lt;- [{fibonacci, [1, 1]}, {tribonacci, [1, 1, 2]}, {tetranacci, [1, 1, 2, 4]}, {lukas, [2, 1]}]],<br/>\t[io:fwrite( \"~p: ~p~n\", [X, Y(10)] ) || {X, Y} &lt;- Names_and_funs].<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>nacci_foldl( _N, {Nth, Ns} ) -&gt;<br/>\t{Sum_ns, _Not_sum_ns} = lists:split( Nth, Ns ),<br/>\t{Nth, [lists:sum(Sum_ns) | Ns]}.<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FIBON<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>DIM F[20]<br/>\u00a0<br/>PROCEDURE FIB(TIPO$,F$)<br/> FOR I%=0 TO 20 DO<br/>   F[I%]=0<br/> END FOR<br/> B=0<br/> LOOP<br/>  Q=INSTR(F$,\",\")<br/>  B=B+1<br/>  IF Q=0 THEN<br/>      F[B]=VAL(F$)<br/>      EXIT<br/>    ELSE<br/>      F[B]=VAL(MID$(F$,1,Q-1))<br/>      F$=MID$(F$,Q+1)<br/>  END IF<br/> END LOOP<br/>\u00a0<br/> PRINT(TIPO$;\" =&gt;\";)<br/> FOR I=B TO 14+B DO<br/>    IF I&lt;&gt;B THEN PRINT(\",\";) END IF<br/>    PRINT(F[I-B+1];)<br/>    FOR J=(I-B)+1 TO I DO<br/>        F[I+1]=F[I+1]+F[J]<br/>    END FOR<br/> END FOR<br/> PRINT<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   PRINT(CHR$(12);)\u00a0! CLS<br/>   FIB(\"Fibonacci\",\"1,1\")<br/>   FIB(\"Tribonacci\",\"1,1,2\")<br/>   FIB(\"Tetranacci\",\"1,1,2,4\")<br/>   FIB(\"Lucas\",\"2,1\")<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 24, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> fibinit <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">singleton</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>n, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fiblike init <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">append</span><br/>        <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">ofList</span> init<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">function</span>   | least\u00a0:: rest <span class=\"sy0\">-&gt;</span><br/>                            <span class=\"kw1\">let</span> this <span class=\"sy0\">=</span> least <span class=\"sy0\">+</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> rest<br/>                            Some<span class=\"br0\">(</span>this, rest @ <span class=\"br0\">[</span>this<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        | _ <span class=\"sy0\">-&gt;</span> None<span class=\"br0\">)</span> init<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> lucas <span class=\"sy0\">=</span> fiblike <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> nacci n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> n fibinit <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span> <span class=\"sy0\">|&gt;</span> fiblike<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> start s <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> <span class=\"nu0\">15</span> s <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>    <span class=\"kw1\">let</span> prefix <span class=\"sy0\">=</span> <span class=\"st0\">\"fibo tribo tetra penta hexa hepta octo nona deca\"</span>.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>p, n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"n=%2i,\u00a0%5snacci -&gt;\u00a0%A\"</span> n p <span class=\"br0\">(</span>start <span class=\"br0\">(</span>nacci n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">init</span> prefix.<span class=\"me1\">Length</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>prefix.<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"      lucas      -&gt;\u00a0%A\"</span> <span class=\"br0\">(</span>start <span class=\"br0\">(</span>fiblike <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USING: formatting fry kernel make math namespaces qw sequences\u00a0;<br/>\u00a0<br/>: n-bonacci ( n initial -- seq ) [<br/>        [ [ , ] each ] [ length - ] [ length ] tri<br/>        '[ building get _ tail* sum , ] times<br/>    ] { } make\u00a0;<br/>\u00a0<br/>qw{ fibonacci tribonacci tetranacci lucas }<br/>{ { 1 1 } { 1 1 2 } { 1 1 2 4 } { 2 1 } }<br/>[ 10 swap n-bonacci \"%-10s\u00a0%[%3d,\u00a0%]\\n\" printf ] 2each</pre>"}, {"lang": "Forth", "loc": 25, "block": "<pre class=\"text highlighted_source\">: length @\u00a0;                          \\ length of an array is stored at its address<br/>: a{ here cell allot\u00a0;<br/>: } , here over - cell / over\u00a0!\u00a0;  <br/>\u00a0<br/>defer nacci<br/>\u00a0<br/>: step ( a- i n -- a- i m )<br/>    &gt;r 1- 2dup nacci r&gt; +\u00a0;<br/>\u00a0<br/>: steps ( a- i n -- m ) <br/>    0 tuck do step loop nip nip\u00a0;<br/>\u00a0<br/>:noname ( a- i -- n ) <br/>    over length over &gt;                \\ if i is within the array<br/>    if cells + @                      \\ fetch i...if not,<br/>    else over length 1- steps         \\ get length of array for calling step and recurse<br/>    then\u00a0; is nacci<br/>\u00a0<br/>: show-nacci 11 1 do dup i nacci . loop cr drop\u00a0;<br/>\u00a0<br/>.\" fibonacci: \" a{ 1 , 1 } show-nacci<br/>.\" tribonacci: \" a{ 1 , 1 , 2 } show-nacci<br/>.\" tetranacci: \" a{ 1 , 1 , 2 , 4 } show-nacci<br/>.\" lucas: \" a{ 2 , 1 } show-nacci<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 66, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! save this program as file f.f08</span><br/><span class=\"co1\">! gnu-linux command to  build and test</span><br/><span class=\"co1\">! $ a=./f &amp;&amp; gfortran -Wall -std=f2008 $a.f08 -o $a &amp;&amp; echo -e 2\\\\n5\\\\n\\\\n | $a</span><br/>\u00a0<br/><span class=\"co1\">! -*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">! Compilation started at Fri Apr  4 23:20:27</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">! a=./f &amp;&amp; gfortran -Wall -std=f2008 $a.f08 -o $a &amp;&amp; echo -e 2\\\\n8\\\\ny\\\\n | $a</span><br/><span class=\"co1\">! Enter the number of terms to sum: Show the the first how many terms of the sequence?   Accept this initial sequence (y/n)?</span><br/><span class=\"co1\">!            1           1</span><br/><span class=\"co1\">!            1           1           2           3           5           8          13          21</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">! Compilation finished at Fri Apr  4 23:20:27</span><br/>\u00a0<br/><span class=\"kw1\">program</span> f<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, terms<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">sequence</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">character</span> <span class=\"sy0\">::</span> <span class=\"me2\">answer</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span><span class=\"st0\">'Enter the number of terms to sum: '</span><br/>  read<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> n<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span><span class=\"nu0\">29</span> &lt; n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span><span class=\"st0\">'Unreasonable!  Exit.'</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span><span class=\"st0\">'Show the the first how many terms of the sequence?  '</span><br/>  read<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> terms<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>terms &lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span><span class=\"st0\">'Lazy programmer has not implemented backward sequences.'</span><br/>  n <span class=\"sy0\">=</span> <span class=\"kw4\">min</span><span class=\"br0\">(</span>n, terms<span class=\"br0\">)</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">sequence</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>terms<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">sequence</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>     <span class=\"kw3\">sequence</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'Accept this initial sequence (y/n)?'</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw3\">sequence</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>  read<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> answer<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>answer <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"st0\">'n'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Fine.  Enter the initial terms.'</span><br/>     <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, n<br/>        write<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">'(i2,a2)'</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">'no'</span><span class=\"br0\">)</span> i, <span class=\"st0\">': '</span><br/>        read<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw3\">sequence</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">call</span> nacci<span class=\"br0\">(</span>n, <span class=\"kw3\">sequence</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw3\">sequence</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>terms<span class=\"br0\">)</span><br/>  <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span><span class=\"kw3\">sequence</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> nacci<span class=\"br0\">(</span>n, s<span class=\"br0\">)</span><br/>      <span class=\"co1\">! nacci =:  (] , +/@{.)^:(<a class=\"__cf_email__\" data-cfemail=\"dcf19c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#@]`(-#)`])</span><br/>      <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>      <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>      <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, terms<br/>      terms <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"co1\">!      do i = n+1, terms</span><br/> <span class=\"co1\">!        s(i) = sum(s(i-n:i-1))</span><br/>  <span class=\"co1\">!    end do</span><br/>      i <span class=\"sy0\">=</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> terms<span class=\"br0\">)</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">-</span>n<span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, terms<br/>         s<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> s<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> nacci<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> f<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 51, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Deduces the step, n, from the length of the dynamic array passed in</span><br/><span class=\"co1\">' and fills it out to 'size' elements</span><br/><span class=\"kw1\">Sub</span> fibN <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> lb <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> length <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = ub - lb + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">2</span> OrElse length &gt;= size <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  ub = lb + size - <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> a<span class=\"br0\">(</span>lb <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = lb + length <span class=\"kw1\">to</span> ub<br/>    sum = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Length<br/>      sum += a<span class=\"br0\">(</span>i - j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> j<br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = sum<br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printSeries<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, name_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"co1\">'' name is a keyword</span><br/>  <span class=\"kw1\">Print</span> name_; <span class=\"st0\">\" =&gt;\"</span>;<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">13</span> <span class=\"co1\">'' say</span><br/><span class=\"kw1\">Redim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>\u00a0: a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>fibN<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, size<span class=\"br0\">)</span><br/>printSeries<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"fibonacci \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> = <span class=\"nu0\">2</span><br/>fibN<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, size<span class=\"br0\">)</span><br/>printSeries<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"tribonacci\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> = <span class=\"nu0\">4</span><br/>fibN<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, size<span class=\"br0\">)</span><br/>printSeries<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"tetranacci\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">erase</span> a<br/><span class=\"kw1\">Redim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">2</span>\u00a0: a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>fibN<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, size<span class=\"br0\">)</span><br/>printSeries<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"lucas     \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 31, "block": "<pre class=\"text highlighted_source\">import util.TextTable<br/>native scala.collection.mutable.Queue<br/>\u00a0<br/>def fibLike( init ) =<br/>  q = Queue()<br/>\u00a0<br/>  for i &lt;- init do q.enqueue( i )<br/>\u00a0<br/>  def fib =<br/>    q.enqueue( sum(q) )<br/>    q.dequeue() # fib()<br/>\u00a0<br/>  0 # fib()<br/>\u00a0<br/>def fibN( n ) = fibLike( [1] + [2^i | i &lt;- 0:n-1] )<br/>\u00a0<br/>val lucas = fibLike( [2, 1] )<br/>\u00a0<br/>t = TextTable()<br/>t.header( 'k', 'Fibonacci', 'Tribonacci', 'Tetranacci', 'Lucas' )<br/>t.line()<br/>\u00a0<br/>for i &lt;- 1..5<br/>  t.rightAlignment( i )<br/>\u00a0<br/>seqs = (fibN(2), fibN(3), fibN(4), lucas)<br/>\u00a0<br/>for k &lt;- 1..10<br/>  t.row( ([k] + [seqs(i)(k) | i &lt;- 0:4]).toIndexedSeq() )<br/>\u00a0<br/>print( t )</pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> g<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> c chan&lt;<span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> sum <span class=\"kw4\">int</span><br/>\tb <span class=\"sy2\">:=</span> append<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">),</span> <span class=\"nu2\">i</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span> <span class=\"co1\">// make a copy</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> t <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>\t\tc &lt;<span class=\"sy3\">-</span> t<br/>\t\tsum <span class=\"sy2\">+=</span> t<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> t <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>\t\t\tc &lt;<span class=\"sy3\">-</span> sum<br/>\t\t\tb<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> sum <span class=\"sy2\">=</span> sum<span class=\"sy1\">,</span> sum<span class=\"sy3\">+</span>sum<span class=\"sy3\">-</span>t<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\t\tseq <span class=\"kw4\">string</span><br/>\t\t<span class=\"nu2\">i</span>   <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\t<span class=\"sy1\">}{</span><br/>\t\t<span class=\"sy1\">{</span><span class=\"st0\">\"Fibonacci\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}},</span><br/>\t\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tribonacci\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}},</span><br/>\t\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tetranacci\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">}},</span><br/>\t\t<span class=\"sy1\">{</span><span class=\"st0\">\"Lucas\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}},</span><br/>\t<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%10s:\"</span><span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>seq<span class=\"sy1\">)</span><br/>\t\tc <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"co1\">// Note/warning: these goroutines are leaked.</span><br/>\t\t<span class=\"kw1\">go</span> g<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"sy3\">&lt;-</span>c<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 14, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fib <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> seed, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> k<span class=\"sy0\">=</span><span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> seed\u00a0: <span class=\"st0\">\"The seed list must be non-null and non-empty\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> seed.<span class=\"me1\">every</span> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> <span class=\"br0\">}</span>\u00a0: <span class=\"st0\">\"Every member of the seed must be a number\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> seed.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"st0\">\"The seed must contain at least two elements\"</span><br/>    <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> seed<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"me1\">k</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>n..<span class=\"me1\">k</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span> res, kk <span class=\"sy0\">-&gt;</span><br/>            res <span class=\"sy0\">&lt;&lt;</span> res<span class=\"br0\">[</span><span class=\"sy0\">-</span>n..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>tails<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>zipWithM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/>fiblike <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>fiblike st <span class=\"sy0\">=</span> xs <span class=\"kw1\">where</span><br/>  xs <span class=\"sy0\">=</span> st <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>tails xs<span class=\"br0\">)</span><br/>  n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> st<br/>\u00a0<br/>nstep <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>nstep n <span class=\"sy0\">=</span> fiblike <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">$</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">$</span> fiblike <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">$</span> fiblike <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  zipWithM<span class=\"sy0\">_</span> <span class=\"br0\">(</span>\\n name <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"br0\">(</span>name <span class=\"sy0\">++</span> <span class=\"st0\">\"nacci -&gt; \"</span><span class=\"br0\">)</span><br/>                           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">15</span> <span class=\"sy0\">$</span> nstep n<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> <span class=\"st0\">\"fibo tribo tetra penta hexa hepta octo nona deca\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"F2:<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">|</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fnsGen<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"F3:<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">|</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fnsGen<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"F4:<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">|</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fnsGen<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"Lucas:<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">|</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fnsGen<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"F?:<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">|</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fnsGen<span class=\"sy0\">!</span>A<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fnsGen<span class=\"br0\">(</span>cache<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>cache<br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>cache <span class=\"kw1\">then</span> <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"kw4\">put</span><span class=\"br0\">(</span>cache<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>cache<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+:=</span> cache<span class=\"br0\">[</span>i<span class=\"sy0\">-</span>n <span class=\"kw1\">to</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">suspend</span> cache<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   nacci     =:  <span class=\"sy0\">(</span>] , +/@{.<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"2f026f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#@]`<span class=\"sy0\">(</span>-#<span class=\"sy0\">)</span>`]<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> Fibonacci<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> lucas<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> numRequested<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci value must be at least 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> fibonacci<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"sy0\">:</span> lucas<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>, numRequested<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> fibonacci<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> numRequested<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci value must be at least 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> fibonacci<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"sy0\">:</span> fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>, numRequested<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> fibonacci<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> startingValues, <span class=\"kw4\">int</span> numRequested<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> output <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>numRequested<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> startingValues.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>startingValues, <span class=\"nu0\">0</span>, output, <span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numRequested<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        output<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> output<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"nacci(\"</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">+</span> <span class=\"st0\">\"):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> value <span class=\"sy0\">:</span> fibonacci<span class=\"br0\">(</span>n, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"lucas(\"</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">+</span> <span class=\"st0\">\"):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> value <span class=\"sy0\">:</span> lucas<span class=\"br0\">(</span>n, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>arity<span class=\"sy0\">,</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> nacci<span class=\"br0\">(</span>nacci<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> arity<span class=\"sy0\">,</span> arity<span class=\"br0\">)</span><span class=\"sy0\">,</span> arity<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> lucas<span class=\"br0\">(</span>arity<span class=\"sy0\">,</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> nacci<span class=\"br0\">(</span>nacci<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> arity<span class=\"sy0\">,</span> arity<span class=\"br0\">)</span><span class=\"sy0\">,</span> arity<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> nacci<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> arity<span class=\"sy0\">,</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    while <span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> a.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> arity<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sum <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        a.<span class=\"me1\">push</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> arity <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> arity <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> arity<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"fib(\"</span> <span class=\"sy0\">+</span> arity <span class=\"sy0\">+</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">+</span> fib<span class=\"br0\">(</span>arity<span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> arity <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> arity <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> arity<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"lucas(\"</span> <span class=\"sy0\">+</span> arity <span class=\"sy0\">+</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">+</span> lucas<span class=\"br0\">(</span>arity<span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Input: the initial array<br/>def nacci(arity; len):<br/>  arity as $arity | len as $len<br/>  | reduce range(length; $len) as $i<br/>      (.;<br/>       ([0, (length - $arity)] | max ) as $lower<br/>       | . + [ .[ ($lower)\u00a0: length] | add] )\u00a0;<br/>\u00a0<br/>def fib(arity; len):<br/>  arity as $arity | len as $len<br/>  | [1,1] | nacci($arity; $arity) | nacci($arity; $len)\u00a0;<br/>\u00a0<br/>def lucas(arity; len):<br/>  arity as $arity | len as $len<br/>  | [2,1] | nacci($arity; $arity) | nacci($arity; $len)\u00a0;</pre>"}, {"lang": "Julia", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>type NFib{T&lt;:Integer}<br/>    n::T<br/>    klim::T<br/>    seeder::Function<br/>end<br/>\u00a0<br/>type FState<br/>    a::Array{BigInt,1}<br/>    adex::Integer<br/>    k::Integer<br/>end<br/>\u00a0<br/>function Base.start{T&lt;:Integer}(nf::NFib{T})<br/>    a = nf.seeder(nf.n)<br/>    adex = 1<br/>    k = 1<br/>    return FState(a, adex, k)<br/>end<br/>\u00a0<br/>function Base.done{T&lt;:Integer}(nf::NFib{T}, fs::FState)<br/>    fs.k &gt; nf.klim<br/>end<br/>\u00a0<br/>function Base.next{T&lt;:Integer}(nf::NFib{T}, fs::FState)<br/>    f = sum(fs.a)<br/>    fs.a[fs.adex] = f<br/>    fs.adex = rem1(fs.adex+1, nf.n)<br/>    fs.k += 1<br/>    return (f, fs)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun fibN<span class=\"br0\">(</span>initial<span class=\"sy0\">:</span> IntArray, numTerms<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> initial.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> numTerms <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fibs <span class=\"sy0\">=</span> initial.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span>numTerms<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numTerms <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fibs<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n until numTerms<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i - n until i<span class=\"br0\">)</span> sum +<span class=\"sy0\">=</span> fibs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        fibs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fibs<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"fibonacci\"</span>,  <span class=\"st0\">\"tribonacci\"</span>, <span class=\"st0\">\"tetranacci\"</span>, <span class=\"st0\">\"pentanacci\"</span>, <span class=\"st0\">\"hexanacci\"</span>,<br/>                        <span class=\"st0\">\"heptanacci\"</span>, <span class=\"st0\">\"octonacci\"</span>,  <span class=\"st0\">\"nonanacci\"</span>,  <span class=\"st0\">\"decanacci\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> initial <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">32</span>, <span class=\"nu0\">64</span>, <span class=\"nu0\">128</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" n  name        values\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> values <span class=\"sy0\">=</span> fibN<span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"%2d \u00a0%-10s \u00a0%s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"lucas\"</span>, values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        values <span class=\"sy0\">=</span> fibN<span class=\"br0\">(</span>initial.<span class=\"me1\">sliceArray</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until i + <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"%2d \u00a0%-10s \u00a0%s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i + <span class=\"nu0\">2</span>, names<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 20, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> nStepFibs <span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> limit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> iMax<span class=\"sy0\">,</span> sum <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>seq <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"sy0\">#</span>seq <span class=\"sy0\">&lt;</span> limit <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> iMax <span class=\"kw1\">do</span> sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> seq<span class=\"br0\">[</span><span class=\"sy0\">#</span>seq <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> seq<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> fibSeqs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>name <span class=\"sy0\">=</span> <span class=\"st0\">\"Fibonacci\"</span><span class=\"sy0\">,</span>  values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span>      <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name <span class=\"sy0\">=</span> <span class=\"st0\">\"Tribonacci\"</span><span class=\"sy0\">,</span> values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span>   <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name <span class=\"sy0\">=</span> <span class=\"st0\">\"Tetranacci\"</span><span class=\"sy0\">,</span> values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name <span class=\"sy0\">=</span> <span class=\"st0\">\"Lucas\"</span><span class=\"sy0\">,</span>      values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span>      <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> sequence <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>fibSeqs<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>sequence<span class=\"sy0\">.</span>name <span class=\"sy0\">..</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>nStepFibs<span class=\"br0\">(</span>sequence<span class=\"sy0\">.</span>values<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 16, "block": "<pre class=\"text highlighted_source\">numSequence\u00a0:= proc(initValues\u00a0:: Array)<br/>\tlocal n, i, values;<br/>\tn\u00a0:= numelems(initValues);<br/>\tvalues\u00a0:= copy(initValues);<br/>\tfor i from (n+1) to 15 do<br/>\t\tvalues(i)\u00a0:= add(values[i-n..i-1]);<br/>\tend do;<br/>\treturn values;<br/>end proc:<br/>\u00a0<br/>initValues\u00a0:= Array([1]):<br/>for i from 2 to 10 do<br/>\tinitValues(i)\u00a0:= add(initValues):<br/>\tprintf (\"nacci(%d):\u00a0%a\\n\", i, convert(numSequence(initValues), list));<br/>end do:<br/>printf (\"lucas:\u00a0%a\\n\", convert(numSequence(Array([2, 1])), list));</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f2=Function[{l,k},<br/>  Module[{<a class=\"__cf_email__\" data-cfemail=\"9ef0a3d2fbf0f9eaf6def2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,m}, <br/>  m=SparseArray[{{i_,j_}/;i==1||i==j+1-&gt;1},{n,n}];<br/>  NestList[m.#&amp;,l,k]]];<br/>Table[Last/@f2[{1,1}~Join~Table[0,{n-2}],15+n][[-18;;]],{n,2,10}]//TableForm<br/>Table[Last/@f2[{1,2}~Join~Table[0,{n-2}],15+n][[-18;;]],{n,2,10}]//TableForm<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 28, "block": "<pre class=\"text highlighted_source\">import sequtils, strutils<br/>\u00a0<br/>proc fiblike(start: seq[int]): auto =<br/>  var memo = start<br/>  proc fibber(n: int): int =<br/>    if n &lt; memo.len:<br/>      return memo[n]<br/>    else:<br/>      var ans = 0<br/>      for i in n-start.len .. &lt;n:<br/>        ans += fibber(i)<br/>      memo.add ans<br/>      return ans<br/>  return fibber<br/>\u00a0<br/>let fibo = fiblike(@[1,1])<br/>echo toSeq(0..9).map(fibo)<br/>let lucas = fiblike(@[2,1])<br/>echo toSeq(0..9).map(lucas)<br/>\u00a0<br/>for n, name in items({2: \"fibo\", 3: \"tribo\", 4: \"tetra\", 5: \"penta\", 6: \"hexa\",<br/>                      7: \"hepta\", 8: \"octo\", 9: \"nona\", 10: \"deca\"}):<br/>  var se = @[1]<br/>  for i in 0..n-2:<br/>    se.add(1 shl i)<br/>  let fibber = fiblike(se)<br/>  echo \"n = \", align($n,2), \", \", align(name, 5), \"nacci -&gt;<br/>    \", toSeq(0..14).mapIt(string, $fibber(it)).join(\" \"), \" ...\"</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw2\">gen</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>k<span class=\"sy0\">-&gt;</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>v<br/>genV<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">-&gt;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>v<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"kw2\">gen</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 70, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> FibbonacciN <span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TintArray <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  <span class=\"kw1\">Name</span><span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">..</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'Fibonacci:  '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Tribonacci: '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Tetranacci: '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Pentanacci: '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Hexanacci:  '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Heptanacci: '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Octonacci:  '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Nonanacci:  '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Decanacci:  '</span><span class=\"sy1\">,</span><br/>                                  <span class=\"st0\">'Lucas:      '</span><br/>                                 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  sequence<span class=\"sy1\">:</span> TintArray<span class=\"sy1\">;</span><br/>  j<span class=\"sy1\">,</span> k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CreateFibbo<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> TintArray<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    setlength<span class=\"br0\">(</span>CreateFibbo<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    CreateFibbo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    CreateFibbo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> i &lt; n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      CreateFibbo<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateFibbo<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Fibbonacci<span class=\"br0\">(</span><span class=\"kw1\">var</span> start<span class=\"sy1\">:</span> TintArray<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span><br/>    No_of_examples <span class=\"sy3\">=</span> <span class=\"nu0\">11</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    n<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    setlength<span class=\"br0\">(</span>start<span class=\"sy1\">,</span> No_of_examples<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>start<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      start<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        start<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> start<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">+</span> start<span class=\"br0\">[</span>i<span class=\"sy3\">-</span>j<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    sequence <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateFibbo<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Fibbonacci<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">Name</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>sequence<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>sequence<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  sequence<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  sequence<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  Fibbonacci<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">Name</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>sequence<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 24, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"co2\">qw/max sum/</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fib <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$xs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">//</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@xs</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$xs</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"re0\">@xs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$len</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><br/>            <span class=\"re0\">@xs</span><span class=\"sy0\">,</span><br/>            sum<span class=\"br0\">(</span><span class=\"re0\">@xs</span><span class=\"br0\">[</span>max<span class=\"br0\">(</span><span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">..</span><span class=\"re0\">$len</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@xs</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> fib<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> fib<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fibo <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">constant</span> <span class=\"re0\">@starters</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>    nacci <span class=\"re0\">@starters</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> nacci <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@starter</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    EVAL <span class=\"st0\">\"|@starter, { join '+', '*' xx @starter } ... *\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> fibo<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">20</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> nacci<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 18, "block": "<pre class=\"text highlighted_source\">function nacci_noo(integer n, s, l)<br/>    if n&lt;2 then return n+n*l end if<br/>    if n=2 then return 1 end if<br/>    atom res = nacci_noo(n-1,s,l)<br/>    for i=2 to min(s,n-1) do<br/>        res += nacci_noo(n-i,s,l)<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>constant names = split(\"lucas fibo tribo tetra penta hexa hepta octo nona deca\")<br/>sequence f = repeat(0,10)<br/>for i=1 to 4 do<br/>    for j=1 to 10 do<br/>        f[j] = nacci_noo(j,i+(i=1),i=1)<br/>    end for<br/>    printf(1,\"%snacci:\u00a0%s\\n\",{names[i],sprint(f)})<br/>end for</pre>"}, {"lang": "PHP", "loc": 82, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co4\">/**<br/> * @author Elad Yosifon<br/> */</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @param int $x<br/> * @param array $series<br/> * @param int $n<br/> * @return array<br/> */</span><br/><span class=\"kw2\">function</span> fib_n_step<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$series</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$series</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"co1\">// exit point</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$series</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"co1\">// 4 or less</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tfib<span class=\"br0\">(</span><span class=\"re0\">$series</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> fib_n_step<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$series</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"co1\">// 5 or more</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$series</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$series</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tfib<span class=\"br0\">(</span><span class=\"re0\">$series</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> fib_n_step<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$series</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$series</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @param array $series<br/> * @param int $n<br/> * @param int $i<br/> */</span><br/><span class=\"kw2\">function</span> fib<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$series</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$end</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$series</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$series</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/*===================  OUTPUT ============================*/</span><br/>\u00a0<br/><a href=\"http://www.php.net/header\"><span class=\"kw3\">header</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Content-Type: text/plain'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$steps</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><br/>\t<span class=\"st_h\">'LUCAS'</span> <span class=\"sy0\">=&gt;</span> \t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'FIBONACCI'</span> <span class=\"sy0\">=&gt;</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'TRIBONACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'TETRANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'PENTANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'HEXANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'HEPTANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'OCTONACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'NONANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'DECANACCI'</span> <span class=\"sy0\">=&gt;</span>\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> \t<a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$steps</span> <span class=\"kw1\">as</span> <span class=\"re0\">$name</span><span class=\"sy0\">=&gt;</span><span class=\"re0\">$pair</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$ser</span> <span class=\"sy0\">=</span> fib_n_step<span class=\"br0\">(</span><span class=\"re0\">$pair</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"re0\">$pair</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$ser</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">echo</span> <span class=\"re0\">$name</span><span class=\"sy0\">.</span><span class=\"st0\">\" =&gt; \"</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"re0\">$ser</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de nacci (Init Cnt)<br/>   (let N (length Init)<br/>      (make<br/>         (made Init)<br/>         (do (- Cnt N)<br/>            (link (apply + (tail N (made)))) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 28, "block": "<pre class=\"text highlighted_source\">(subscriptrange, fixedoverflow, size):<br/>n_step_Fibonacci: procedure options (main);<br/>   declare line character (100) varying;<br/>   declare (i, j, k) fixed binary;<br/>\u00a0<br/>   put ('n-step Fibonacci series: Please type the initial values on one line:');<br/>   get edit (line) (L);<br/>   line = trim(line);<br/>   k = tally(line, ' ') - tally(line, '  ') + 1; /* count values */<br/>\u00a0<br/>   begin;<br/>      declare (n(k), s) fixed decimal (15);<br/>      get string (line || ' ') list ( n );<br/>\u00a0<br/>      if n(1) = 2 then put ('We have a Lucan series');<br/>      else put ('We have a ' || trim(k) || '-step Fibonacci series.');<br/>\u00a0<br/>      put skip edit ( (trim(n(i)) do i = 1 to k) ) (a, x(1));<br/>      do j = k+1 to 20; /* In toto, generate 20 values in the series. */<br/>         s = sum(n); /* the next value in the series */<br/>         put edit (trim(s)) (x(1), a);<br/>         do i = lbound(n,1)+1 to k; /* Discard the oldest value */<br/>            n(i-1) = n(i);<br/>         end;<br/>         n(k) = s; /* and insert the new value */<br/>      end;<br/>   end;<br/>end n_step_Fibonacci;</pre>"}, {"lang": "Powershell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">#Create generator of extended fibonaci</span><br/><span class=\"kw3\">Function</span> Get<span class=\"sy0\">-</span>ExtendedFibonaciGenerator<span class=\"br0\">(</span><span class=\"re0\">$InitialValues</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$Values</span> <span class=\"sy0\">=</span> <span class=\"re0\">$InitialValues</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">#exhaust initial values first before calculating next values by summation</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$InitialValues</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$NextValue</span> <span class=\"sy0\">=</span> <span class=\"re0\">$InitialValues</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$Script</span>:InitialValues <span class=\"sy0\">=</span> <span class=\"re0\">$InitialValues</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"sy0\">-</span>Skip <span class=\"nu0\">1</span><br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$NextValue</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$NextValue</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Values</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-ExpandProperty</span> Sum<br/>        <span class=\"re0\">$Script</span>:Values <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$Values</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> <span class=\"sy0\">-</span>Skip <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$NextValue</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"re0\">$NextValue</span><br/>    <span class=\"br0\">}</span>.GetNewClosure<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 58, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i FibonacciLike<span class=\"br0\">(</span>k,n<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,p.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span>,d.s<span class=\"sy0\">=</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Protected</span> i,r<br/><span class=\"kw1\">if</span> k<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>:<span class=\"kw1\">endif</span><br/><span class=\"kw1\">if</span> p.s<br/>n<span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>p.s,d.s<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">if</span> k<span class=\"sy0\">=</span>i:<span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>p.s,i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,d.s<span class=\"br0\">)</span><span class=\"br0\">)</span>:<span class=\"kw1\">endif</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">else</span><br/><span class=\"kw1\">if</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span>:<span class=\"kw1\">endif</span><br/><span class=\"kw1\">if</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span>:<span class=\"kw1\">endif</span><br/><span class=\"kw1\">endif</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>r<span class=\"sy0\">+</span>FibonacciLike<span class=\"br0\">(</span>k<span class=\"sy0\">-</span>i,n,p.s,d.s<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">ProcedureReturn</span> r<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; The fact that PureBasic supports default values for procedure parameters </span><br/><span class=\"co1\">; is very useful in a case such as this. </span><br/><span class=\"co1\">; Since:</span><br/><span class=\"co1\">; k=4</span><br/><span class=\"co1\">; Debug FibonacciLike(k)              \u00a0;good old Fibonacci</span><br/>\u00a0<br/><span class=\"co1\">; Debug FibonacciLike(k,3)            \u00a0;here we specified n=3 [Tribonacci]</span><br/><span class=\"co1\">; Debug FibonacciLike(k,3,\"1.1.2\")    \u00a0;using the default delimiter \".\"</span><br/><span class=\"co1\">; Debug FibonacciLike(k,3,\"1,1,2\",\",\")\u00a0;using a different delimiter \",\"</span><br/><span class=\"co1\">; the last three all produce the same result.</span><br/>\u00a0<br/><span class=\"co1\">; as do the following two for the Lucas series:</span><br/><span class=\"co1\">; Debug FibonacciLike(k,2,\"2.1\")    \u00a0;using the default delimiter \".\"</span><br/><span class=\"co1\">; Debug FibonacciLike(k,2,\"2,1\",\",\")\u00a0;using a different delimiter \",\"</span><br/>\u00a0<br/>m<span class=\"sy0\">=</span><span class=\"nu0\">10</span><br/>t.s<span class=\"sy0\">=</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span><span class=\"st0\">\"n\"</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> m<br/>  t.s<span class=\"sy0\">+</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">next</span><br/><span class=\"kw1\">Debug</span> t.s<br/><span class=\"kw1\">for</span> n<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>  t.s<span class=\"sy0\">=</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> m<br/>    t.s<span class=\"sy0\">+</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>FibonacciLike<span class=\"br0\">(</span>k,n<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">Debug</span> t.s<br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"\"</span><br/>p.s<span class=\"sy0\">=</span><span class=\"st0\">\"2.1\"</span><br/>t.s<span class=\"sy0\">=</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span>p.s,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> m<br/>  t.s<span class=\"sy0\">+</span><span class=\"kw2\">lset</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>FibonacciLike<span class=\"br0\">(</span>k,n,p.s<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">next</span><br/><span class=\"kw1\">Debug</span> t.s<br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 33, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> fiblike<span class=\"br0\">(</span>start<span class=\"br0\">)</span>:<br/>\taddnum <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span><br/>\tmemo <span class=\"sy0\">=</span> start<span class=\"br0\">[</span>:<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">def</span> fibber<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">try</span>:<br/>\t\t\t<span class=\"kw1\">return</span> memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">except</span> <span class=\"kw2\">IndexError</span>:<br/>\t\t\tans <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>fibber<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n-addnum<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tmemo.<span class=\"me1\">append</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> ans<br/>\t<span class=\"kw1\">return</span> fibber<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> fibo <span class=\"sy0\">=</span> fiblike<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>fibo<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> lucas <span class=\"sy0\">=</span> fiblike<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>lucas<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">47</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> name <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'fibo tribo tetra penta hexa hepta octo nona deca'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:<br/>\tfibber <span class=\"sy0\">=</span> fiblike<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"nu0\">2</span>**i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'n=%2i,\u00a0%5snacci -&gt;\u00a0%s ...'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>fibber<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>n<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span>  fibonacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">21</span> <span class=\"nu0\">34</span> <span class=\"nu0\">55</span> <span class=\"nu0\">89</span> <span class=\"nu0\">144</span> <span class=\"nu0\">233</span> <span class=\"nu0\">377</span> <span class=\"nu0\">610</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> tribonacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span> <span class=\"nu0\">13</span> <span class=\"nu0\">24</span> <span class=\"nu0\">44</span> <span class=\"nu0\">81</span> <span class=\"nu0\">149</span> <span class=\"nu0\">274</span> <span class=\"nu0\">504</span> <span class=\"nu0\">927</span> <span class=\"nu0\">1705</span> <span class=\"nu0\">3136</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> tetranacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">15</span> <span class=\"nu0\">29</span> <span class=\"nu0\">56</span> <span class=\"nu0\">108</span> <span class=\"nu0\">208</span> <span class=\"nu0\">401</span> <span class=\"nu0\">773</span> <span class=\"nu0\">1490</span> <span class=\"nu0\">2872</span> <span class=\"nu0\">5536</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> pentanacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">31</span> <span class=\"nu0\">61</span> <span class=\"nu0\">120</span> <span class=\"nu0\">236</span> <span class=\"nu0\">464</span> <span class=\"nu0\">912</span> <span class=\"nu0\">1793</span> <span class=\"nu0\">3525</span> <span class=\"nu0\">6930</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span>  hexanacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">63</span> <span class=\"nu0\">125</span> <span class=\"nu0\">248</span> <span class=\"nu0\">492</span> <span class=\"nu0\">976</span> <span class=\"nu0\">1936</span> <span class=\"nu0\">3840</span> <span class=\"nu0\">7617</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> heptanacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">127</span> <span class=\"nu0\">253</span> <span class=\"nu0\">504</span> <span class=\"nu0\">1004</span> <span class=\"nu0\">2000</span> <span class=\"nu0\">3984</span> <span class=\"nu0\">7936</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  octonacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">255</span> <span class=\"nu0\">509</span> <span class=\"nu0\">1016</span> <span class=\"nu0\">2028</span> <span class=\"nu0\">4048</span> <span class=\"nu0\">8080</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span>  nonanacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span> <span class=\"nu0\">511</span> <span class=\"nu0\">1021</span> <span class=\"nu0\">2040</span> <span class=\"nu0\">4076</span> <span class=\"nu0\">8144</span> ...<br/><span class=\"me1\">n</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span>  decanacci -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span> <span class=\"nu0\">512</span> <span class=\"nu0\">1023</span> <span class=\"nu0\">2045</span> <span class=\"nu0\">4088</span> <span class=\"nu0\">8172</span> ...<br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>;; fib-list\u00a0: [Listof Nat] x Nat -&gt; [Listof Nat]<br/>;; Given a non-empty list of natural numbers, the length of the list<br/>;; becomes the size of the step; return the first n numbers of the<br/>;; sequence; assume n &gt;= (length lon)<br/>(define (fib-list lon n)<br/>  (define len (length lon))<br/>  (reverse (for/fold ([lon (reverse lon)]) ([_ (in-range (- n len))])<br/>             (cons (apply + (take lon len)) lon))))<br/>\u00a0<br/>;; Show the series ...<br/>(define (show-fibs name l)<br/>  (printf \"~a: \" name)<br/>  (for ([n (in-list (fib-list l 20))]) (printf \"~a, \" n))<br/>  (printf \"...\\n\"))<br/>\u00a0<br/>;; ... with initial 2-powers lists<br/>(for ([n (in-range 2 11)])<br/>  (show-fibs (format \"~anacci\" (case n [(2) 'fibo] [(3) 'tribo] [(4) 'tetra]<br/>                                     [(5) 'penta] [(6) 'hexa] [(7) 'hepta]<br/>                                     [(8) 'octo] [(9) 'nona] [(10) 'deca]))<br/>             (cons 1 (build-list (sub1 n) (curry expt 2)))))<br/>;; and with an initial (2 1)<br/>(show-fibs \"lucas\" '(2 1))</pre>"}, {"lang": "REXX", "loc": 35, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  calculates and displays a   N-step   Fibonacci   sequence(s). */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> FibName values               <span class=\"coMULTI\">/*allows a Fibonacci name, starter vals*/</span><br/><span class=\"kw1\">if</span> FibName<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">call</span> nStepFib  FibName,values;    <span class=\"kw1\">signal</span> done;    <span class=\"kw3\">end</span><br/>                                       <span class=\"coMULTI\">/* [\u2193]  no args specified, show a bunch*/</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'Lucas'</span>       ,   <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'fibonacci'</span>   ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'tribonacci'</span>  ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'tetranacci'</span>  ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'pentanacci'</span>  ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'hexanacci'</span>   ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'heptanacci'</span>  ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'octonacci'</span>   ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'nonanacci'</span>   ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'decanacci'</span>   ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'undecanacci'</span> ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span> <span class=\"nu0\">512</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'dodecanacci'</span> ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span> <span class=\"nu0\">512</span> <span class=\"nu0\">1024</span><br/><span class=\"kw1\">call</span>  nStepFib  <span class=\"st0\">'13th-order'</span>  ,   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span> <span class=\"nu0\">32</span> <span class=\"nu0\">64</span> <span class=\"nu0\">128</span> <span class=\"nu0\">256</span> <span class=\"nu0\">512</span> <span class=\"nu0\">1024</span> <span class=\"nu0\">2048</span><br/>done:  <span class=\"kw1\">exit</span>                            <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>nStepFib:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> Fname,vals,m;    <span class=\"kw1\">if</span> m==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> m=<span class=\"nu0\">30</span>;      L=<br/>N=<span class=\"kw6\">words</span><span class=\"br0\">(</span>vals<span class=\"br0\">)</span><br/>                             <span class=\"kw1\">do</span> pop=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N        <span class=\"coMULTI\">/*use  N  initial values. */</span><br/>                             @<span class=\"sy0\">.</span>pop=<span class=\"kw6\">word</span><span class=\"br0\">(</span>vals,pop<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*populate initial numbers*/</span><br/>                             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*pop*/</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> m                               <span class=\"coMULTI\">/*calculate M Fib numbers.*/</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span>N  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  @<span class=\"sy0\">.</span>j=<span class=\"nu0\">0</span>                     <span class=\"coMULTI\">/*initialize the sum to 0.*/</span><br/>                                 <span class=\"kw1\">do</span> k=j-N  <span class=\"kw2\">for</span> N    <span class=\"coMULTI\">/*sum the last  N numbers.*/</span><br/>                                 @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"0a60374a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"472d6c07\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k        <span class=\"coMULTI\">/*add the  [N-j]th number.*/</span><br/>                                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                     <span class=\"kw3\">end</span><br/>        L=L  @<span class=\"sy0\">.</span>j                                    <span class=\"coMULTI\">/*append Fib number\u2500\u2500\u25balist*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>Fname,<span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"st0\">'[sum'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>N,<span class=\"nu0\">3</span><span class=\"br0\">)</span>    <span class=\"st0\">\"terms]:\"</span>     <span class=\"kw6\">strip</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>    <span class=\"st0\">'\u00b7\u00b7\u00b7'</span><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 63, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Fibonacci n-step number sequences<br/>\u00a0<br/>f = list(12)<br/>\u00a0<br/>see \"Fibonacci:\" + nl<br/>f2  = [1,1]<br/>for nr2 = 1 to 10 <br/>    see \"\" + f2[1] + \" \"<br/>    fibn(f2)<br/>next<br/>showarray(f2)<br/>see \" ...\" + nl + nl<br/>\u00a0<br/>see \"Tribonacci:\" + nl<br/>f3 = [1,1,2]<br/>for nr3 = 1 to 9<br/>    see \"\" + f3[1] + \" \"<br/>    fibn(f3)<br/>next<br/>showarray(f3)<br/>see \" ...\" + nl + nl<br/>\u00a0<br/>see \"Tetranacci:\" + nl<br/>f4 = [1,1,2,4]<br/>for nr4 = 1 to 8<br/>    see \"\" + f4[1] + \" \"<br/>    fibn(f4)<br/>next<br/>showarray(f4)<br/>see \" ...\" + nl + nl<br/>\u00a0<br/>see \"Lucas:\" + nl<br/>f5 = [2,1]<br/>for nr5 = 1 to 10<br/>    see \"\" + f5[1] + \" \"<br/>    fibn(f5)<br/>next<br/>showarray(f5)<br/>see \" ...\" + nl + nl<br/>\u00a0<br/>func fibn(fs)<br/>     s = sum(fs)<br/>     for i = 2 to len(fs)<br/>         fs[i-1] = fs[i]<br/>     next<br/>     fs[i-1] = s<br/>     return fs<br/>\u00a0<br/>func sum(arr)<br/>     sm = 0<br/>     for sn = 1 to len(arr)<br/>         sm = sm + arr[sn]<br/>     next<br/>     return sm <br/>\u00a0<br/>func showarray(fn)<br/>     svect = \"\"<br/>     for p = 1 to len(fn)<br/>         svect = svect + fn[p] + \" \"<br/>     next<br/>     see svect<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 27, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> anynacci<span class=\"br0\">(</span>start_sequence, count<span class=\"br0\">)</span><br/>  n = start_sequence.<span class=\"me1\">length</span>    <span class=\"co1\"># Get the n-step for the type of fibonacci sequence</span><br/>  result = start_sequence.<span class=\"me1\">dup</span>  <span class=\"co1\"># Create a new result array with the values copied from the array that was passed by reference</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span>..<span class=\"me1\">count</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span>         <span class=\"co1\"># Loop for the remaining results up to count</span><br/>    result <span class=\"sy0\">&lt;&lt;</span> result.<span class=\"me1\">last</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span>    <span class=\"co1\"># Get the last n element from result and append its total to Array</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  result                       <span class=\"co1\"># Return result</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>naccis = <span class=\"br0\">{</span> lucus:      <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>           fibonacci:  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>           tribonacci: <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>,<br/>           tetranacci: <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>,<br/>           pentanacci: <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span>,<br/>           hexanacci:  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">16</span><span class=\"br0\">]</span>,<br/>           heptanacci: <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">32</span><span class=\"br0\">]</span>,<br/>           octonacci:  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">32</span>,<span class=\"nu0\">64</span><span class=\"br0\">]</span>,<br/>           nonanacci:  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">32</span>,<span class=\"nu0\">64</span>,<span class=\"nu0\">128</span><span class=\"br0\">]</span>,<br/>           decanacci:  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">32</span>,<span class=\"nu0\">64</span>,<span class=\"nu0\">128</span>,<span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_nacci<span class=\"br0\">(</span>naccis, count=<span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> naccis.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name, seq<span class=\"sy0\">|</span> <span class=\"st0\">\"%12s\u00a0:\u00a0%p\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>name, anynacci<span class=\"br0\">(</span>seq, count<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>print_nacci<span class=\"br0\">(</span>naccis<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">a = fib(\"1,1\")<br/>a = fib(\"1,1,2\")<br/>a = fib(\"1,1,2,4\")<br/>a = fib(\"1,1,2,4,8\")<br/>a = fib(\"1,1,2,4,8,16\")<br/>\u00a0<br/>function fib(f$)<br/>dim f(20)<br/>while word$(f$,b+1,\",\") &lt;&gt; \"\"<br/> b\t= b + 1<br/> f(b)\t= val(word$(f$,b,\",\"))<br/>wend<br/>PRINT \"Fibonacci:\";b;\"=&gt;\";<br/>for i = b to 13 + b<br/>  print f(i-b+1);\",\";<br/>  for j = (i - b) + 1 to i<br/>    f(i+1) = f(i+1) + f(j)<br/>  next j<br/>next i<br/>print<br/>end function</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>struct GenFibonacci {<br/>    buf:    Vec&lt;u64&gt;,<br/>    sum:    u64,<br/>    idx:    usize,<br/>}<br/>\u00a0<br/>impl Iterator for GenFibonacci {<br/>    type Item = u64;<br/>    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {<br/>        let result = Some(self.sum);<br/>        self.sum -= self.buf[self.idx];<br/>        self.buf[self.idx] += self.sum;<br/>        self.sum += self.buf[self.idx];<br/>        self.idx = (self.idx + 1)\u00a0% self.buf.len();<br/>        result<br/>    }<br/>}<br/>\u00a0<br/>fn print(buf: Vec&lt;u64&gt;, len: usize) {<br/>    let mut sum = 0;<br/>    for &amp;elt in buf.iter() { sum += elt; print!(\"\\t{}\", elt); }<br/>    let iter = GenFibonacci { buf: buf, sum: sum, idx: 0 };<br/>    for x in iter.take(len) {<br/>        print!(\"\\t{}\", x);<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    print!(\"Fib2:\");<br/>    print(vec![1,1], 10 - 2);<br/>\u00a0<br/>    print!(\"\\nFib3:\");<br/>    print(vec![1,1,2], 10 - 3);<br/>\u00a0<br/>    print!(\"\\nFib4:\");<br/>    print(vec![1,1,2,4], 10 - 4);<br/>\u00a0<br/>    print!(\"\\nLucas:\");<br/>    print(vec![2,1], 10 - 2);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><span class=\"co1\">//we rely on implicit conversion from Int to BigInt.</span><br/><span class=\"co1\">//BigInt is preferable since the numbers get very big, very fast.</span><br/><span class=\"co1\">//(though for a small example of the first few numbers it's not needed)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fibStream<span class=\"br0\">(</span>init<span class=\"sy0\">:</span> BigInt<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> inner<span class=\"br0\">(</span>prev<span class=\"sy0\">:</span> Vector<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> prev.<span class=\"me1\">head</span> <span class=\"sy0\">#::</span> inner<span class=\"br0\">(</span>prev.<span class=\"me1\">tail</span> <span class=\"sy0\">:</span>+ prev.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/>  inner<span class=\"br0\">(</span>init.<span class=\"me1\">toVector</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 28, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; uses n-step sequence formula to</span><br/><span class=\"co1\">;; continue lst until of length num</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>fib lst num<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>fold <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>take result n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> num <span class=\"br0\">(</span><span class=\"kw1\">length</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; display examples</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"n = \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>fib <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>tabulate <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Lucas: \"</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>fib '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array integer: bonacci (in array integer: start, in integer: arity, in integer: length) is func<br/>  result<br/>    var array integer: bonacciSequence is 0 times 0;<br/>  local<br/>    var integer: sum is 0;<br/>    var integer: index is 0;<br/>  begin<br/>    bonacciSequence\u00a0:= start[.. length];<br/>    while length(bonacciSequence) &lt; length do<br/>      sum\u00a0:= 0;<br/>      for index range max(1, length(bonacciSequence) - arity + 1) to length(bonacciSequence) do<br/>        sum +:= bonacciSequence[index];<br/>      end for;<br/>      bonacciSequence &amp;:= [] (sum);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: print (in string: name, in array integer: sequence) is func<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    write((name &lt;&amp; \":\") rpad 12);<br/>    for index range 1 to pred(length(sequence)) do<br/>      write(sequence[index] &lt;&amp; \", \");<br/>    end for;<br/>    writeln(sequence[length(sequence)]);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    print(\"Fibonacci\",  bonacci([] (1, 1), 2, 10));<br/>    print(\"Tribonacci\", bonacci([] (1, 1), 3, 10));<br/>    print(\"Tetranacci\", bonacci([] (1, 1), 4, 10));<br/>    print(\"Lucas\",      bonacci([] (2, 1), 2, 10));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">func fib<span class=\"br0\">(</span>n, xs=<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        var len = xs.<span class=\"me1\">len</span><br/>        len <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">20</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">break</span><br/>        xs.<span class=\"me1\">append</span><span class=\"br0\">(</span>xs.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>len <span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> xs<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>say fib<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> fibber <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    coroutine fib<span class=\"br0\">[</span><span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">fibs</span><span class=\"br0\">]</span>=<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$args</span> <span class=\"st0\">\",\"</span><span class=\"br0\">]</span> apply <span class=\"br0\">{</span>fn <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">foreach</span> f <span class=\"re0\">$fn</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>yield <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>\t    <span class=\"kw1\">set</span> n <span class=\"re0\">$f</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>yield <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> fn <span class=\"br0\">[</span>linsert <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$fn</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> end <span class=\"br0\">[</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span>+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$fn</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span><span class=\"br0\">}</span> <span class=\"re0\">$args</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> print10 cr <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> out <span class=\"br0\">[</span><span class=\"re0\">$cr</span> true<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> \\<span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> out ...<span class=\"br0\">]</span> <span class=\"st0\">\", \"</span><span class=\"br0\">]</span>\\<span class=\"br0\">]</span><br/>    <span class=\"re0\">$cr</span> false<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"FIBONACCI\"</span><br/>print10 <span class=\"br0\">[</span>fibber <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"TRIBONACCI\"</span><br/>print10 <span class=\"br0\">[</span>fibber <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"TETRANACCI\"</span><br/>print10 <span class=\"br0\">[</span>fibber <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"LUCAS\"</span><br/>print10 <span class=\"br0\">[</span>fibber <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "VBA", "loc": 62, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> temp$, T() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i&amp;<br/>    <span class=\"co1\">'Fibonacci:<br/></span>    T = Fibonacci_Step(1, 15, 1)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(T)<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; T(i)<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Fibonacci: \"</span> &amp; Mid(temp, 3)<br/>    temp = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">'Tribonacci:<br/></span>    T = Fibonacci_Step(1, 15, 2)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(T)<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; T(i)<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Tribonacci: \"</span> &amp; Mid(temp, 3)<br/>    temp = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">'Tetranacci:<br/></span>    T = Fibonacci_Step(1, 15, 3)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(T)<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; T(i)<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Tetranacci: \"</span> &amp; Mid(temp, 3)<br/>    temp = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">'Lucas:<br/></span>    T = Fibonacci_Step(1, 15, 1, 2)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(T)<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; T(i)<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Lucas: \"</span> &amp; Mid(temp, 3)<br/>    temp = <span class=\"st0\">\"\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Fibonacci_Step(First <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Count <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, S <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, <span class=\"kw4\">Optional</span> Second <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>()<br/><span class=\"kw4\">Dim</span> T() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, R() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Su <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw3\">If</span> Second &lt;&gt; 0 <span class=\"kw3\">Then</span> S = 1<br/>    <span class=\"kw4\">ReDim</span> T(1 - S <span class=\"kw3\">To</span> Count)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> 0<br/>        T(i) = 0<br/>    <span class=\"kw3\">Next</span> i<br/>    T(1) = IIf(Second &lt;&gt; 0, Second, 1)<br/>    T(2) = 1<br/>    <span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Count<br/>        Su = 0<br/>        C = S + 1<br/>        <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> C &gt;= 0<br/>            Su = Su + T(i - C)<br/>            C = C - 1<br/>        <span class=\"kw3\">Loop</span><br/>        T(i) = Su<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw4\">ReDim</span> R(1 <span class=\"kw3\">To</span> Count)<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Count<br/>        R(i) = T(i)<br/>    <span class=\"kw3\">Next</span><br/>    Fibonacci_Step = R<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 33, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'function arguments:<br/></span><span class=\"co1\">'init - initial series of the sequence(e.g. \"1,1\")<br/></span><span class=\"co1\">'rep - how many times the sequence repeats - init<br/></span><span class=\"kw2\">Function</span> generate_seq(init,rep)<br/>\ttoken = Split(init,<span class=\"st0\">\",\"</span>)<br/>\tstep_count = <span class=\"kw4\">UBound</span>(token)<br/>\trep = rep - (<span class=\"kw4\">UBound</span>(token) + 1)<br/>\tout = init<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> rep<br/>\t\tsum = 0<br/>\t\tn = step_count<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> n &gt;= 0<br/>\t\t\tsum = sum + token(<span class=\"kw4\">UBound</span>(token)-n)<br/>\t\t\tn = n - 1<br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\t<span class=\"co1\">'add the next number to the sequence<br/></span>\t\t<span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> token(<span class=\"kw4\">UBound</span>(token) + 1)<br/>\t\ttoken(<span class=\"kw4\">UBound</span>(token)) = sum<br/>\t\tout = out &amp; <span class=\"st0\">\",\"</span> &amp; sum<br/>\t<span class=\"kw3\">Next</span><br/>\tgenerate_seq = out<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"fibonacci: \"</span> &amp; generate_seq(<span class=\"st0\">\"1,1\"</span>,15)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"tribonacci: \"</span> &amp; generate_seq(<span class=\"st0\">\"1,1,2\"</span>,15)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"tetranacci: \"</span> &amp; generate_seq(<span class=\"st0\">\"1,1,2,4\"</span>,15)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"lucas: \"</span> &amp; generate_seq(<span class=\"st0\">\"2,1\"</span>,15)<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc Nacci(N, F0);              \\Generate Fibonacci N-step sequence<br/>int N,                          \\step size<br/>    F0;                         \\array of first N values<br/>int I, J;<br/>def M = 10;                     \\number of members in the sequence<br/>int F(M);                       \\Fibonacci sequence<br/>[for I:= 0 to M-1 do            \\for all the members of the sequence...<br/>    [if I &lt; N then F(I):= F0(I) \\initialize sequence<br/>    else [F(I):= 0;             \\sum previous members to get member I<br/>         for J:= 1 to N do F(I):= F(I) + F(I-J);<br/>         ];<br/>    IntOut(0, F(I)); ChOut(0, ^ );<br/>    ];<br/>CrLf(0);<br/>];<br/>\u00a0<br/>[Text(0, \" Fibonacci: \");  Nacci(2, [1, 1]);<br/> Text(0, \"Tribonacci: \");  Nacci(3, [1, 1, 2]);<br/> Text(0, \"Tetranacci: \");  Nacci(4, [1, 1, 2, 4]);<br/> Text(0, \"     Lucas: \");  Nacci(2, [2, 1]);<br/>]</pre>"}, {"lang": "Yabasic", "loc": 21, "block": "<pre class=\"text highlighted_source\">sub nStepFibs$(seq$, limit)<br/>    local iMax, sum, numb$(1), lim, i<br/>\u00a0<br/>    lim = token(seq$, numb$(), \",\")<br/>    redim numb$(limit)<br/>    seq$ = \"\"<br/>    iMax = lim - 1<br/>    while(lim &lt; limit)<br/>        sum = 0<br/>        for i = 0 to iMax\u00a0: sum = sum + val(numb$(lim - i))\u00a0: next<br/>        lim = lim + 1<br/>        numb$(lim) = str$(sum)<br/>    wend<br/>    for i = 0 to lim\u00a0: seq$ = seq$ + \" \" + numb$(i)\u00a0: next <br/>    return seq$<br/>end sub<br/>\u00a0<br/>print \"Fibonacci:\", nStepFibs$(\"1,1\", 10)<br/>print \"Tribonacci:\", nStepFibs$(\"1,1,2\", 10)<br/>print \"Tetranacci:\", nStepFibs$(\"1,1,2,4\", 10)<br/>print \"Lucas:\", nStepFibs$(\"2,1\", 10)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn fibN(ns){ fcn(ns){ ns.append(ns.sum()).pop(0) }.fp(vm.arglist.copy()); }</pre>"}]}