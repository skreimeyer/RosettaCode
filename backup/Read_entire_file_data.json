{"task": "Read_entire_file", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"somefile.txt\" f:slurp &gt;s<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 23, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Directories</span>,<br/>     Ada.<span class=\"me1\">Direct_IO</span>,<br/>     Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Whole_File <span class=\"kw1\">is</span><br/>\u00a0<br/>   File_Name\u00a0: String \u00a0:= <span class=\"st0\">\"whole_file.adb\"</span>;<br/>   File_Size\u00a0: Natural\u00a0:= Natural <span class=\"br0\">(</span>Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Size</span> <span class=\"br0\">(</span>File_Name<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> File_String    <span class=\"kw1\">is</span> String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">File_Size</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> File_String_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Direct_IO</span> <span class=\"br0\">(</span>File_String<span class=\"br0\">)</span>;<br/>\u00a0<br/>   File    \u00a0: File_String_IO.<span class=\"me1\">File_Type</span>;<br/>   Contents\u00a0: File_String;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   File_String_IO.<span class=\"me1\">Open</span>  <span class=\"br0\">(</span>File, Mode =&gt; File_String_IO.<span class=\"me1\">In_File</span>,<br/>                               Name =&gt; File_Name<span class=\"br0\">)</span>;<br/>   File_String_IO.<span class=\"me1\">Read</span>  <span class=\"br0\">(</span>File, Item =&gt; Contents<span class=\"br0\">)</span>;<br/>   File_String_IO.<span class=\"me1\">Close</span> <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Contents<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Whole_File;</pre>"}, {"lang": "AutoHotkey", "loc": 2, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">fileread</span></a><span class=\"sy0\">,</span> varname<span class=\"sy0\">,</span> C:\\filename<span class=\"sy0\">.</span>txt <span class=\"co1\">; adding \"MsgBox\u00a0%varname%\" (no quotes) to the next line will display the file contents.</span></pre>"}, {"lang": "AutoIt", "loc": 5, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"re0\">$fileOpen</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileOpen.htm\"><span class=\"kw3\">FileOpen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"file.txt\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$fileRead</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$fileOpen</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileClose.htm\"><span class=\"kw3\">FileClose</span></a><span class=\"br0\">(</span><span class=\"re0\">$fileOpen</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 7, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> BOOK <span class=\"sy1\">=</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">\u00a2 pages of lines of characters \u00a2</span><br/>BOOK book<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw6\">FILE</span> book file<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> <span class=\"kw27\">errno</span> <span class=\"sy1\">=</span> <span class=\"kw22\">open</span><span class=\"br0\">(</span>book file<span class=\"sy1\">,</span> <span class=\"st0\">\"book.txt\"</span><span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>get<span class=\"br0\">(</span>book file<span class=\"sy1\">,</span> book<span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 9, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> pathToTextFile <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">path to</span> <span class=\"kw1\">desktop</span> <span class=\"kw1\">folder</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"testfile.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- short way: open, read and close in one step</span><br/><span class=\"kw3\">set</span> fileContent <span class=\"kw3\">to</span> read <span class=\"kw1\">file</span> pathToTextFile<br/>\u00a0<br/><span class=\"co1\">-- long way: open a file reference, read content and close access</span><br/><span class=\"kw3\">set</span> fileRef <span class=\"kw3\">to</span> <span class=\"kw1\">open</span> for access pathToTextFile<br/><span class=\"kw3\">set</span> fileContent <span class=\"kw3\">to</span> read fileRef<br/><span class=\"kw1\">close</span> access fileRef</pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>   <span class=\"co1\">## empty record separate, </span><br/>   <span class=\"kw3\">RS</span>=<span class=\"st0\">\"\"</span>;<br/>   <span class=\"co1\">## read line (i.e. whole file) into $0\t</span><br/>   <span class=\"kw5\">getline</span>; \t<br/>   <span class=\"co1\">## print line number and content of line </span><br/>   <span class=\"kw5\">print</span> <span class=\"st0\">\"=== line \"</span><span class=\"kw3\">NR</span>,<span class=\"st0\">\":\"</span>,<span class=\"re0\">$0</span>; <br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><br/>   <span class=\"co1\">## no further line is read printed </span><br/>   <span class=\"kw5\">print</span> <span class=\"st0\">\"=== line \"</span><span class=\"kw3\">NR</span>,<span class=\"st0\">\":\"</span>,<span class=\"re0\">$0</span>; <br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\">content$ <span class=\"sy0\">=</span> LOAD$<span class=\"br0\">(</span>filename$<span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> f <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> <span class=\"st0\">\"file.txt\"</span> <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckbinary.shtml\"><span class=\"kw3\">BINARY</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"nu0\">1</span><br/>f <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckspace%24.shtml\"><span class=\"kw3\">SPACE$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcklof.shtml\"><span class=\"kw3\">LOF</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckget.shtml\"><span class=\"kw3\">GET</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> f<br/><a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a> <span class=\"nu0\">1</span></pre>"}, {"lang": "BBC BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">      file% = OPENIN(\"input.txt\")<br/>      strvar$ = \"\"<br/>      WHILE NOT EOF#file%<br/>        strvar$ += CHR$(BGET#file%)<br/>      ENDWHILE<br/>      CLOSE #file%</pre>"}, {"lang": "Bracmat", "loc": 4, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy2\">&gt;</span><span class=\"co1\">     Keep cell 0 at 0 as a sentinel value</span><br/><span class=\"sy3\">,</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">,</span><span class=\"sy1\">]</span><span class=\"co1\"> Read into successive cells until EOF</span><br/><span class=\"sy2\">&lt;</span><span class=\"sy1\">[</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">  Go all the way back to the beginning</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy3\">.</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"co1\"> Print successive cells while nonzero</span></pre>"}, {"lang": "Brainf***", "loc": 4, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy2\">&gt;</span><span class=\"co1\">     Keep cell 0 at 0 as a sentinel value</span><br/><span class=\"sy3\">,</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">,</span><span class=\"sy1\">]</span><span class=\"co1\"> Read into successive cells until EOF</span><br/><span class=\"sy2\">&lt;</span><span class=\"sy1\">[</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">  Go all the way back to the beginning</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy3\">.</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"co1\"> Print successive cells while nonzero</span></pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">include\u00a0:file<br/>\u00a0<br/>file.read file_name</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buffer<span class=\"sy0\">;</span><br/>  FILE <span class=\"sy0\">*</span>fh <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"readentirefile.c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> fh <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fseek.html\"><span class=\"kw3\">fseek</span></a><span class=\"br0\">(</span>fh<span class=\"sy0\">,</span> <span class=\"nu0\">0L</span><span class=\"sy0\">,</span> SEEK_END<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ftell.html\"><span class=\"kw3\">ftell</span></a><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rewind.html\"><span class=\"kw3\">rewind</span></a><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    buffer <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> buffer <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\">// we can now close the file</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span> fh <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// do something, e.g.</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fh <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> infile<span class=\"br0\">(</span><span class=\"st0\">\"sample.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// construct string from iterator range</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">string</span> fileData<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>infile<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"File has \"</span> <span class=\"sy1\">&lt;&lt;</span> fileData.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"chars<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// don't need to manually close the ifstream; it will release the file when it goes out of scope</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <br/>   <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"file not found!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> fileContents <span class=\"sy0\">=</span> File<span class=\"sy0\">.</span><span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span><span class=\"st0\">\"c:<span class=\"es0\">\\\\</span>autoexec.bat\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>slurp <span class=\"st0\">\"myfile.txt\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>slurp <span class=\"st0\">\"my-utf8-file.txt\"</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 1, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:file\"><span class=\"kw1\">file</span></a><span class=\"sy0\">(</span>READ /etc/passwd string<span class=\"sy0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> file-string <span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>stream path<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>data <span class=\"br0\">(</span>make-string <span class=\"br0\">(</span>file-<span class=\"kw1\">length</span> stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>read-sequence data stream<span class=\"br0\">)</span><br/>      data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">file</span><span class=\"sy0\">:</span> read<span class=\"sy0\">,</span> readText<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// To read a whole file into a dynamic array of unsigned bytes:</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>read<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// To read a whole file into a validated UTF-8 string:</span><br/>    <span class=\"kw4\">string</span> txt <span class=\"sy0\">=</span> readText<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 22, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> ReadAll<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Classes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  lList<span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    lList<span class=\"sy1\">.</span><span class=\"me1\">LoadFromFile</span><span class=\"br0\">(</span><span class=\"st0\">'c:\\input.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">// Write everything at once</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lList<span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">// Write one line at a time</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> lList<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lList<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">local\u00a0:filecontents\u00a0!decode!utf-8\u00a0!read \"file.txt\"</pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">&lt;</span>file<span class=\"sy0\">:</span>foo.<span class=\"me1\">txt</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">getText</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elixir", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule FileReader do<br/>  # Read in the file<br/>  def read(path) do<br/>    case File.read(path) do<br/>      {:ok, body} -&gt;<br/>        IO.inspect body<br/>      {:error,reason} -&gt;<br/>       \u00a0:file.format_error(reason)<br/>      end<br/>    end<br/>\u00a0<br/>  # Open the file path, then read in the file<br/>  def bit_read(path) do<br/>    case File.open(path) do<br/>      {:ok, file} -&gt;<br/>        #\u00a0:all can be replaced with\u00a0:line, or with a positive integer to specify the number of characters to read.<br/>\tIO.read(file,:all)<br/>\t  |&gt; IO.inspect<br/>      {:error,reason} -&gt;<br/>\t:file.format_error(reason)<br/>    end<br/>  end<br/>end<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> my-variable <span class=\"br0\">(</span>with-temp-buffer<br/>                    <span class=\"br0\">(</span>insert-file-contents <span class=\"st0\">\"foo.txt\"</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>buffer-string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span><span class=\"st0\">\"myfile.txt\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 18, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> load_file<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> filename<span class=\"br0\">)</span><br/>  <span class=\"kw2\">integer</span> fn<span class=\"sy2\">,</span>c<br/>  <span class=\"kw2\">sequence</span> data<br/>    fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>filename<span class=\"sy2\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span> <span class=\"co1\">-- \"r\" for text files, \"rb\" for binary files</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fn <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span> <span class=\"kw1\">if</span> <span class=\"co1\">-- failed to open the file</span><br/>\u00a0<br/>    data <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">-- init to empty sequence</span><br/>    c <span class=\"sy1\">=</span> <span class=\"kw2\">getc</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span> <span class=\"co1\">-- prime the char buffer</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>c\u00a0!<span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"co1\">-- while not EOF</span><br/>      data <span class=\"sy1\">&amp;=</span> c <span class=\"co1\">-- append each character</span><br/>      c <span class=\"sy1\">=</span> <span class=\"kw2\">getc</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span> <span class=\"co1\">-- next char</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    <span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> data<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// read entire file into variable using default system encoding or with specified encoding</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/><span class=\"kw1\">let</span> data <span class=\"sy0\">=</span> File.<span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> utf8 <span class=\"sy0\">=</span> File.<span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>filename, System.<span class=\"me1\">Text</span>.<span class=\"me1\">Encoding</span>.<span class=\"me1\">UTF8</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USING: io.encodings.ascii io.encodings.binary io.files\u00a0;<br/>\u00a0<br/>! to read entire file as binary<br/>\"foo.txt\" binary file-contents<br/>\u00a0<br/>! to read entire file as lines of text<br/>\"foo.txt\" ascii file-lines</pre>"}, {"lang": "Fantom", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class ReadString<br/>{<br/>  public static Void main (Str[] args)<br/>  {<br/>    Str contents\u00a0:= File(args[0].toUri).readAllStr<br/>    echo (\"contents: $contents\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">s\" foo.txt\" slurp-file   ( str len )</pre>"}, {"lang": "Fortran", "loc": 14, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> read_file<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>\u00a0<br/>    open<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span>, <span class=\"kw1\">file</span><span class=\"sy0\">=</span><span class=\"st0\">\"read_file.f90\"</span>, <span class=\"kw1\">action</span><span class=\"sy0\">=</span><span class=\"st0\">\"read\"</span>, <span class=\"sy0\">&amp;</span><br/>         <span class=\"kw1\">form</span><span class=\"sy0\">=</span><span class=\"st0\">\"unformatted\"</span>, <span class=\"kw1\">access</span><span class=\"sy0\">=</span><span class=\"st0\">\"stream\"</span><span class=\"br0\">)</span><br/>    inquire<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span>, <span class=\"kw4\">size</span><span class=\"sy0\">=</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><span class=\"br0\">)</span><br/>    read<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> s<br/>    close<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>    print <span class=\"st0\">\"(A)\"</span>, s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 10, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"input.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> Encoding <span class=\"st0\">\"ascii\"</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Dim</span> fileLen <span class=\"kw1\">As</span> <span class=\"kw1\">LongInt</span> = <span class=\"kw1\">Lof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">'' get file length in bytes</span><br/><span class=\"kw1\">Dim</span> buffer <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Space</span><span class=\"br0\">(</span>fileLen<span class=\"br0\">)</span> <span class=\"co1\">'' allocate a string of size 'fileLen' bytes</span><br/><span class=\"kw1\">Get</span> <span class=\"co2\">#1, 1, buffer '' read all data from start of file into the buffer</span><br/><span class=\"kw1\">Print</span> buffer  <span class=\"co1\">'' print to console</span><br/>buffer = <span class=\"st0\">\"\"</span>  <span class=\"co1\">'' release memory used by setting buffer to empty</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = read[\"file:yourfile.txt\"]<br/>b = read[\"file:yourfile.txt\", \"UTF-8\"]<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn ReadTextFile<br/>dim as CFURLRef      fileRef<br/>dim as Handle        h<br/>dim as CFStringRef   cfStr\u00a0: cfStr = NULL<br/>dim as long          fileLen<br/>\u00a0<br/>if ( files$( _CFURLRefOpen, \"TEXT\", \"Select text file...\", @fileRef ) )<br/>   open \"i\", 2, fileRef<br/>   fileLen = lof( 2, 1 )<br/>   h = fn NewHandleClear( fileLen )<br/>      if ( h )<br/>         read file 2, [h], fileLen<br/>         close #2<br/>         cfStr = fn CFStringCreateWithBytes( _kCFAllocatorDefault, #[h], fn GetHandleSize(h), _kCFStringEncodingMacRoman, _false )<br/>         fn DisposeH( h )<br/>      end if<br/>else<br/>// User canceled<br/>end if<br/>\u00a0<br/>fn HIViewSetText( sConsoleHITextView, cfStr )<br/>CFRelease( cfStr )<br/>end fn<br/>\u00a0<br/>fn ReadTextFile<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 3, "block": "<pre class=\"text highlighted_source\">InputTextFile(\"input.txt\");<br/>s\u00a0:= ReadAll(f);;  # two semicolons to hide the result, which may be long<br/>CloseStream(f);</pre>"}, {"lang": "Gambas", "loc": 6, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sFile <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>sFile <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"file.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 4, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">import</span> <span class=\"st0\">\"io/ioutil\"</span><br/>\u00a0<br/>data<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadFile<span class=\"sy1\">(</span>filename<span class=\"sy1\">)</span><br/>sv <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>data<span class=\"sy1\">)</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fileContent <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"c:<span class=\"es0\">\\\\</span>file.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span></pre>"}, {"lang": "GUISS", "loc": 1, "block": "<pre class=\"text highlighted_source\">Start,Programs,Accessories,Notepad,Menu:File,Open,Doubleclick:Icon:Notes.TXT,Button:OK</pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">do</span> text <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> filepath<br/>   <span class=\"co1\">-- do stuff with text</span></pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">every</span> <span class=\"br0\">(</span>fs <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">|</span><span class=\"kw4\">reads</span><span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Inform 7", "loc": 7, "block": "<pre class=\"text highlighted_source\">Home is a room.<br/>\u00a0<br/>The File of Testing is called \"test\".<br/>\u00a0<br/>When play begins:<br/>\tsay \"[text of the File of Testing]\";<br/>\tend the story.</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'files'</span>         <span class=\"co1\">NB. not needed for J7 &amp; later</span><br/>   var=: freads <span class=\"st_h\">'foo.txt'</span></pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.FileReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ReadFile <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> fileContents <span class=\"sy0\">=</span> readEntireFile<span class=\"br0\">(</span><span class=\"st0\">\"./foo.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> readEntireFile<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a> in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder contents <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> buffer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> read <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            contents.<span class=\"me1\">append</span><span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span>, read<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            read <span class=\"sy0\">=</span> in.<span class=\"me1\">read</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>read <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        in.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> contents.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> fso<span class=\"sy0\">=</span><span class=\"kw1\">new</span> ActiveXObject<span class=\"br0\">(</span><span class=\"st0\">\"Scripting.FileSystemObject\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> f<span class=\"sy0\">=</span>fso.<span class=\"me1\">OpenTextFile</span><span class=\"br0\">(</span><span class=\"st0\">\"c:<span class=\"es0\">\\\\</span>myfile.txt\"</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> s<span class=\"sy0\">=</span>f.<span class=\"me1\">ReadAll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>f.<span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">try</span><span class=\"br0\">{</span>alert<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"kw1\">catch</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">{</span>WScript.<span class=\"me1\">Echo</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">jq -R -s . input.txt</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">readstring(\"/devel/myfile.txt\") # read file into a string<br/>read(\"/devel/myfile.txt\", filesize(\"/devel/myfile.txt\")) # read file into an array of bytes</pre>"}, {"lang": "Kotlin", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>File<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readText</span><span class=\"br0\">(</span>charset <span class=\"sy0\">=</span> Charsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\">'foo.txt slurp</pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\">'foo.txt slurp</pre>"}, {"lang": "Lasso", "loc": 2, "block": "<pre class=\"text highlighted_source\">local(f) = file('foo.txt')<br/>#f-&gt;readString</pre>"}, {"lang": "LFE", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">set</span> `#<span class=\"br0\">(</span>ok <span class=\"sy0\">,</span>data<span class=\"br0\">)</span> <span class=\"br0\">(</span>file<span class=\"sy0\">:</span><span class=\"me1\">read_file</span> <span class=\"st0\">\"myfile.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 7, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">filedialog</span> <span class=\"st0\">\"Open a Text File\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"*.txt\"</span><span class=\"sy0\">,</span>file$<br/><span class=\"kw1\">if</span> file$<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">open</span> file$ <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>    entire$ <span class=\"sy0\">=</span> <span class=\"kw1\">input</span>$<span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">lof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">print</span> entire$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "Lingo", "loc": 13, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Reads whole file, returns string<br/>-- @param {string} tFile<br/>-- @return {string|false}<br/>----------------------------------------<br/>on readFile (tFile)<br/>  fp = xtra(\"fileIO\").new()<br/>  fp.openFile(tFile, 1)<br/>  if fp.status() then return false<br/>  res = fp.readFile()<br/>  fp.closeFile()<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">put URL \"file:///usr/share/dict/words\" into tVar<br/>put the number of lines of tVar</pre>"}, {"lang": "Lua", "loc": 23, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"co1\">--If the file opens with no problems, io.open will return a</span><br/><span class=\"co1\">--handle to the file with methods attached.</span><br/><span class=\"co1\">--If the file does not exist, io.open will return nil and</span><br/><span class=\"co1\">--an error message.</span><br/><span class=\"co1\">--assert will return the handle to the file if present, or</span><br/><span class=\"co1\">--it will throw an error with the message returned second</span><br/><span class=\"co1\">--by io.open.</span><br/><span class=\"kw1\">local</span> file <span class=\"sy0\">=</span> <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">io.open</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">--Without wrapping io.open in an assert, local file would be nil,</span><br/><span class=\"co1\">--which would cause an 'attempt to index a nil value' error when</span><br/><span class=\"co1\">--calling file:read.</span><br/>\u00a0<br/><span class=\"co1\">--file:read takes the number of bytes to read, or a string for</span><br/><span class=\"co1\">--special cases, such as \"*a\" to read the entire file.</span><br/><span class=\"kw1\">local</span> contents <span class=\"sy0\">=</span> file<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"st0\">'*a'</span><br/>\u00a0<br/><span class=\"co1\">--If the file handle was local to the expression</span><br/><span class=\"co1\">--(ie. \"assert(io.open(filename)):read'a'\"),</span><br/><span class=\"co1\">--the file would remain open until its handle was</span><br/><span class=\"co1\">--garbage collected.</span><br/>file<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module checkit {<br/>      \\\\ prepare a file<br/>      \\\\ Save.Doc and Append.Doc  to file, Load.Doc and Merge.Doc from file<br/>      document a$<br/>      a$={First Line<br/>            Second line<br/>            Third Line<br/>            \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Greek Letters<br/>            }<br/>      Save.Doc a$, \"checkthis.txt\", 2  ' 2 for UTF-8<br/>\u00a0<br/>      Buffer1=Buffer(\"checkthis.txt\")<br/>      Print Len(Buffer1)=Filelen(\"checkthis.txt\")<br/>      b$=String$(Eval$(Buffer1, 0) as UTF8Dec)<br/>      Report b$<br/>      openfile$=FILE$(\"text file\",\"txt\")<br/>      Merge.doc a$, openfile$<br/>      Edit.Doc a$<br/>}<br/>checkit<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 3, "block": "<pre class=\"text highlighted_source\">define(`foo',include(`file.txt'))<br/>defn(`foo')<br/>defn(`foo')</pre>"}, {"lang": "Make", "loc": 1, "block": "<pre class=\"make highlighted_source\">contents <span class=\"sy0\">:=</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re1\">shell</span> cat foo<span class=\"sy0\">.</span>txt<span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s1\u00a0:= readbytes( \"file1.txt\", infinity, TEXT ):<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Import[\"filename\",\"String\"]</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\">  fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span><span class=\"co2\">'filename'</span>,<span class=\"co2\">'r'</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">[</span>str,count<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fread.html\"><span class=\"kw2\">fread</span></a><span class=\"br0\">(</span>fid, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inf.html\"><span class=\"kw2\">inf</span></a><span class=\"br0\">]</span>, <span class=\"co2\">'uint8=&gt;char'</span><span class=\"br0\">)</span>;  <span class=\"co1\">% s will be a character array, count has the number of bytes</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; </pre>"}, {"lang": "Mercury", "loc": 27, "block": "<pre class=\"text highlighted_source\">:- module read_entire_file.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>   io.open_input(\"file.txt\", OpenResult,\u00a0!IO),<br/>   (<br/>      OpenResult = ok(File),<br/>      io.read_file_as_string(File, ReadResult,\u00a0!IO),<br/>      (<br/>           ReadResult = ok(FileContents),<br/>           io.write_string(FileContents,\u00a0!IO)<br/>     \u00a0;<br/>           ReadResult = error(_, IO_Error),<br/>           io.stderr_stream(Stderr,\u00a0!IO),<br/>           io.write_string(Stderr, io.error_message(IO_Error) ++ \"\\n\",\u00a0!IO)<br/>      )        <br/>  \u00a0;<br/>      OpenResult = error(IO_Error),<br/>      io.stderr_stream(Stderr,\u00a0!IO),<br/>      io.write_string(Stderr, io.error_message(IO_Error) ++ \"\\n\",\u00a0!IO)<br/>   ).</pre>"}, {"lang": "NetRexx", "loc": 44, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">parse</span> arg inFileName .<br/>\u00a0<br/><span class=\"kw1\">if</span> inFileName = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> inFileName = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> inFileName = <span class=\"st0\">'./data/dwarfs.json'</span><br/>fileContents = slurp<span class=\"br0\">(</span>inFileName<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> fileContents<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- Slurp a file and return contents as a Rexx string</span><br/>method slurp<span class=\"br0\">(</span>inFileName<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  slurped = Rexx null<br/>  slurpStr = StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  ioBuffer = byte<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><br/>  inBytes = int <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    inFile = File<span class=\"br0\">(</span>inFileName<span class=\"br0\">)</span><br/>    inFileIS = BufferedInputStream<span class=\"br0\">(</span>FileInputStream<span class=\"br0\">(</span>inFile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> ioLoop until inBytes = -<span class=\"nu0\">1</span><br/>      slurpStr.<span class=\"me0\">append</span><span class=\"br0\">(</span>String<span class=\"br0\">(</span>ioBuffer, <span class=\"nu0\">0</span>, inBytes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      inBytes = inFileIS.<span class=\"me0\">read</span><span class=\"br0\">(</span>ioBuffer<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> ioLoop<br/>\u00a0<br/>  <span class=\"kw3\">catch</span> exFNF = FileNotFoundException<br/>    exFNF.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">catch</span> exIO = IOException<br/>    exIO.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">finally</span><br/>    <span class=\"kw1\">do</span><br/>      inFileIS.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">catch</span> ex = IOException<br/>      ex.<span class=\"me0\">printStackTrace</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  slurped = Rexx<span class=\"br0\">(</span>slurpStr.<span class=\"kw6\">toString</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> slurped<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#read-file\"><span class=\"kw1\">read-file</span></a> <span class=\"st0\">\"filename\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Microsoft Small Basic", "loc": 1, "block": "<pre class=\"text highlighted_source\">  v=File.ReadContents(filename) </pre>"}, {"lang": "Nim", "loc": 1, "block": "<pre class=\"text highlighted_source\">readFile(filename)</pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>string <span class=\"sy0\">:=</span> FileReader<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadFile</span><span class=\"br0\">(</span><span class=\"st0\">\"in.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 34, "block": "<pre class=\"objc highlighted_source\">\u00a0<br/>    <span class=\"coMULTI\">/*** 0. PREPARATION    */</span><br/>    <span class=\"co2\">// We need a text file to read; let's redirect a C string to a new file</span><br/>    <span class=\"co2\">// using the shell by way of the stdlib system() function.</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/system.html\"><span class=\"kw3\">system</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"echo <span class=\"es0\">\\\"</span>Hello, World!<span class=\"es0\">\\\"</span> &gt; ~/HelloRosetta\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\">/*** 1. THE TASK      */</span><br/>    <span class=\"co2\">// Instantiate an NSString which describes the filesystem location of</span><br/>    <span class=\"co2\">// the file we will be reading.</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>filePath <span class=\"sy0\">=</span> <span class=\"br0\">[</span>NSHomeDirectory<span class=\"br0\">(</span><span class=\"br0\">)</span> stringByAppendingPathComponent<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"HelloRosetta\"</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// The selector we're going to use to complete this task,</span><br/>    <span class=\"co2\">// stringWithContentsOfFile:encoding:error, has an optional `error'</span><br/>    <span class=\"co2\">// parameter which can be used to return information about any</span><br/>    <span class=\"co2\">// errors it might run into. It's optional, but we'll create an NSError</span><br/>    <span class=\"co2\">// anyways to demonstrate best practice.</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSError_Class/\"><span class=\"kw5\">NSError</span></a> <span class=\"sy0\">*</span>anError;<br/>\u00a0<br/>    <span class=\"co2\">// And finally, the task: read and store the contents of a file as an</span><br/>    <span class=\"co2\">// NSString.</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>aString <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithContentsOfFile<span class=\"sy0\">:</span>filePath<br/>                                                  encoding<span class=\"sy0\">:</span>NSUTF8StringEncoding<br/>                                                     error<span class=\"sy0\">:&amp;</span>anError<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// If the file read was unsuccessful, display the error description.</span><br/>    <span class=\"co2\">// Otherwise, display the NSString.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>aString<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span>anError localizedDescription<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, aString<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> load_file f <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> f <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALin_channel_length\"><span class=\"kw3\">in_channel_length</span></a> ic <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create n <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALreally_input\"><span class=\"kw3\">really_input</span></a> ic s <span class=\"nu0\">0</span> n<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 3, "block": "<pre class=\"oorexx highlighted_source\">file = <span class=\"st0\">'c:\\test.txt'</span><br/>myStream = <span class=\"sy0\">.</span><span class=\"kw6\">stream</span>~new<span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>myString = myStream~<span class=\"kw6\">charIn</span><span class=\"br0\">(</span>,myStream~<span class=\"kw6\">chars</span><span class=\"br0\">)</span></pre>"}, {"lang": "OxygenBasic", "loc": 1, "block": "<pre>\nstring s\n\n'AS FUNCTION\n\ns=GetFile \"t.txt\"\n\n'AS PROCEDURE\n\nGetfile \"t.txt\",s\n\n</pre>"}, {"lang": "Oz", "loc": 6, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  FileHandle = <span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>file init<span class=\"br0\">(</span>name:<span class=\"st0\">\"test.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  FileContents = <span class=\"br0\">{</span>FileHandle read<span class=\"br0\">(</span>size:all list:$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>FileHandle close<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo FileContents<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw2\">str</span> <span class=\"sy0\">=</span> <span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> readstr<span class=\"br0\">(</span><span class=\"st0\">\"file.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Panda", "loc": 1, "block": "<pre class=\"text highlighted_source\">file:readme.txt .text</pre>"}, {"lang": "Pascal", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> File<span class=\"sy0\">::</span><span class=\"me2\">Slurper</span> <span class=\"st_h\">'read_text'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$text</span> <span class=\"sy0\">=</span> read_text<span class=\"br0\">(</span><span class=\"re0\">$filename</span><span class=\"sy0\">,</span> <span class=\"re0\">$data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> File<span class=\"sy0\">::</span><span class=\"me2\">Slurper</span> <span class=\"st_h\">'read_text'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$text</span> <span class=\"sy0\">=</span> read_text<span class=\"br0\">(</span><span class=\"re0\">$filename</span><span class=\"sy0\">,</span> <span class=\"re0\">$data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$string</span> <span class=\"sy0\">=</span> slurp <span class=\"st_h\">'sample.txt'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 4, "block": "<pre class=\"text highlighted_source\">constant fn = open(command_line()[2],\"rb\")<br/>?get_text(fn)<br/>close(fn)<br/>{} = wait_key()</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/file_get_contents\"><span class=\"kw3\">file_get_contents</span></a><span class=\"br0\">(</span><span class=\"re0\">$filename</span><span class=\"br0\">)</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(in \"file\" (till NIL T))</pre>"}, {"lang": "Pike", "loc": 1, "block": "<pre class=\"pike highlighted_source\">string content<span class=\"sy0\">=</span>Stdio.<span class=\"me1\">File</span><span class=\"br0\">(</span><span class=\"st0\">\"foo.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>&gt;read<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>get file (in) edit ((substr(s, i, 1) do i = 1 to 32767)) (a);<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw1\">Get-Content</span> foo.txt</pre>"}, {"lang": "PureBasic", "loc": 10, "block": "<pre class=\"purebasic highlighted_source\">Number.b <span class=\"sy0\">=</span> <span class=\"kw2\">ReadByte</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Length.i <span class=\"sy0\">=</span> <span class=\"kw2\">ReadData</span><span class=\"br0\">(</span>#File, <span class=\"sy0\">*</span>MemoryBuffer, LengthToRead<span class=\"br0\">)</span><br/>Number.c <span class=\"sy0\">=</span> <span class=\"kw2\">ReadCharacter</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Number.d <span class=\"sy0\">=</span> <span class=\"kw2\">ReadDouble</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Number.f <span class=\"sy0\">=</span> <span class=\"kw2\">ReadFloat</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Number.i <span class=\"sy0\">=</span> ReadInteger<span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Number.l <span class=\"sy0\">=</span> <span class=\"kw2\">ReadLong</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Number.q <span class=\"sy0\">=</span> <span class=\"kw2\">ReadQuad</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span><br/>Text$    <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span>#File <span class=\"br0\">[</span>, Flags<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>Number.w <span class=\"sy0\">=</span> <span class=\"kw2\">ReadWord</span><span class=\"br0\">(</span>#File<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">open</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 4, "block": "<pre class=\"q highlighted_source\">q<span class=\"br0\">)</span>file:<span class=\"kw1\">read0</span><span class=\"re2\">`:file.txt</span><br/><span class=\"st0\">\"First line of file\"</span><br/><span class=\"st0\">\"Second line of file\"</span><br/><span class=\"st0\">\"\"</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">fname &lt;- \"notes.txt\"<br/>contents &lt;- readChar(fname, file.info(fname)$size)</pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(file-&gt;string \"foo.txt\")</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">'myfile.txt' read as $content_as_string</pre>"}, {"lang": "REALbasic", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Function readFile(theFile As FolderItem, txtEncode As TextEncoding = Nil) As String<br/>  Dim fileContents As String<br/>  Dim tis As TextInputStream<br/>  tis = tis.Open(theFile)<br/>  fileContents = tis.ReadAll(txtEncode)<br/>  tis.Close<br/>  Return fileContents<br/>\u00a0<br/>Exception err As NilObjectException<br/>  MsgBox(\"File Not Found.\")<br/>End Function<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 2, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">read</span> <span class=\"sy0\">%</span>my-file  <span class=\"co1\">; read as text</span><br/><span class=\"kw3\">read</span><span class=\"sy0\">/</span>binary <span class=\"sy0\">%</span>my-file       <span class=\"co1\">; preserve contents exactly</span></pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">with files'<br/>here \"input.txt\" slurp</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reads an entire file line-by-line  and  stores it as a continuous string.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> iFID <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> iFID==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> iFID= <span class=\"st0\">'a_file'</span>                 <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>$=                                               <span class=\"coMULTI\">/*a string of file's contents (so far).*/</span><br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>           <span class=\"coMULTI\">/*read the file's lines until finished.*/</span><br/>             $=$ <span class=\"sy0\">||</span> <span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*append a (file's) line to the string,*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                     <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Read the file<br/>cStr = read(\"myfile.txt\")<br/># print the file content<br/>See cStr <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Read entire text file.</span><br/>str = <span class=\"kw4\">IO</span>.<span class=\"me1\">read</span> <span class=\"st0\">\"foobar.txt\"</span><br/>\u00a0<br/><span class=\"co1\"># It can also read a subprocess.</span><br/>str = <span class=\"kw4\">IO</span>.<span class=\"me1\">read</span> <span class=\"st0\">\"| grep ftp /etc/services\"</span></pre>"}, {"lang": "Run BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">open DefaultDir$ + \"/public/test.txt\" for binary as #f<br/>fileLen = LOF(#f)<br/>a$ = input$(#f, fileLen)<br/>print a$<br/>close #f</pre>"}, {"lang": "Rust", "loc": 15, "block": "<pre class=\"text highlighted_source\">use std::fs::File;<br/>use std::io::Read;<br/>\u00a0<br/>fn main() {<br/>    let mut file = File::open(\"somefile.txt\").unwrap();<br/>\u00a0<br/>    let mut contents: Vec&lt;u8&gt; = Vec::new();<br/>    // Returns amount of bytes read and append the result to the buffer<br/>    let result = file.read_to_end(&amp;mut contents).unwrap();<br/>    println!(\"Read {} bytes\", result);<br/>\u00a0<br/>    // To print the contents of the file<br/>    let filestr = String::from_utf8(contents).unwrap();<br/>    println!(\"{}\", filestr);<br/>}</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TextFileSlurper <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fileLines <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span><span class=\"st0\">\"my_file.txt\"</span>, <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> java.<span class=\"me1\">io</span>.<span class=\"me1\">FileNotFoundException</span> <span class=\"sy0\">=&gt;</span> e.<span class=\"me1\">getLocalizedMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">with-input-from-file</span> <span class=\"st0\">\"foo.txt\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>char <span class=\"br0\">(</span><span class=\"kw1\">read-char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> char<span class=\"br0\">)</span><br/>           result<br/>           <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read-char</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> char result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 9, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"getf.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: fileContent is \"\";<br/>  begin<br/>    fileContent\u00a0:= getf(\"text.txt\");<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var file = <span class=\"kw4\">File</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw2\">__FILE__</span><span class=\"br0\">)</span>;<br/>var content = file.<span class=\"me1\">open_r</span>.<span class=\"me1\">slurp</span>;<br/><span class=\"kw3\">print</span> content;</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span><span class=\"re0\">StandardFileStream</span> oldFileNamed: <span class=\"st0\">'foo.txt'</span><span class=\"br0\">)</span> contents</pre>"}, {"lang": "SNOBOL4", "loc": 6, "block": "<pre class=\"text highlighted_source\">      input(.inbin,21,\"filename.txt [-r524288]\")    \u00a0:f(end)<br/>rdlp  buf = inbin                                   \u00a0:s(rdlp)<br/>*<br/>*  now process the 'buf' containing the file<br/>*<br/>end</pre>"}, {"lang": "Sparkling", "loc": 1, "block": "<pre class=\"text highlighted_source\">let contents = readfile(\"foo.txt\");</pre>"}, {"lang": "SPL", "loc": 1, "block": "<pre class=\"text highlighted_source\">text = #.readtext(\"filename.txt\")</pre>"}, {"lang": "Stata", "loc": 8, "block": "<pre class=\"text highlighted_source\">mata<br/>f = fopen(\"somedata.txt\", \"r\")<br/>fseek(f, 0, 1)<br/>n = ftell(f)<br/>fseek(f, 0, -1)<br/>s = fread(f, n)<br/>fclose(f)<br/>end</pre>"}, {"lang": "Swift", "loc": 6, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let path = \"~/input.txt\".stringByExpandingTildeInPath<br/>if let string = String(contentsOfFile: path, encoding: NSUTF8StringEncoding) {<br/>  println(string) // print contents of file<br/>}</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> data <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$f</span></pre>"}, {"lang": "TUSCRIPT", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>ERROR/STOP OPEN (\"rosetta.txt\",READ,-std-)<br/>var=FILE (\"rosetta.txt\")<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 4, "block": "<pre class=\"text highlighted_source\">@(next \"foo.txt\")<br/>@(freeform)<br/>@LINE<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"text highlighted_source\">f=`cat foo.txt`    # f will contain the entire contents of the file<br/>printf '%s\\n' \"$f\"</pre>"}, {"lang": "Ursa", "loc": 4, "block": "<pre class=\"text highlighted_source\">decl string contents<br/>decl file f<br/>f.open \"filename.txt\"<br/>set contents (f.readall)</pre>"}, {"lang": "Vala", "loc": 4, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">string</span> file_contents<span class=\"sy0\">;</span><br/>FileUtils.<span class=\"me1\">get_contents</span><span class=\"br0\">(</span><span class=\"st0\">\"foo.txt\"</span>, <span class=\"kw1\">out</span> file_contents<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 3, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">dim</span> s<br/>s = <span class=\"kw2\">createobject</span>(<span class=\"st0\">\"scripting.filesystemobject\"</span>).opentextfile(<span class=\"st0\">\"slurp.vbs\"</span>,1).readall<br/>wscript.echo s</pre>"}, {"lang": "Vedit macro language", "loc": 1, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"example.txt\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 16, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">Public</span> <span class=\"kw1\">Class</span> Form1<br/>\u00a0<br/>  <span class=\"co1\">' Read all of the lines of a file.</span><br/>  <span class=\"co1\">' Function assumes that the file exists.</span><br/>  <span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> ReadLines<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> FileName <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> oReader <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> StreamReader<span class=\"br0\">(</span>FileName<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> sLine <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> oReader<span class=\"sy0\">.</span><span class=\"me1\">ReadToEnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    oReader<span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=CLOSE+site:msdn.microsoft.com\"><span class=\"kw7\">Close</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span></pre>"}, {"lang": "Wart", "loc": 4, "block": "<pre class=\"text highlighted_source\">with infile \"x\"<br/>  with outstring<br/>    whilet line (read_line)<br/>      prn line</pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>string 0;               \\use zero-terminated string convention<br/>int  I;<br/>char Str;<br/>[Str:= GetHp;           \\starting address of block of local \"heap\" memory<br/>I:= 0;                  \\ [does the exact same thing as Reserve(0)]<br/>loop    [Str(I):= ChIn(1);<br/>        if Str(I) = $1A\\EOF\\ then [Str(I):= 0;  quit];<br/>        I:= I+1;<br/>        ];<br/>SetHp(Str+I+1);         \\set heap pointer beyond Str (not really needed here)<br/>Text(0, Str);           \\show file as a string<br/>]</pre>"}, {"lang": "Xtend", "loc": 12, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">com.rosetta.example</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.PrintStream</span><br/>\u00a0<br/><span class=\"kw1\">class</span> ReadFile <span class=\"br0\">{</span><br/>    def <span class=\"kw1\">static</span> main<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ... <span class=\"me1\">args</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        val content <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>Files.<span class=\"me1\">readAllBytes</span><span class=\"br0\">(</span>Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"file.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre class=\"text highlighted_source\">lines = rdfile(\"foo.txt\");</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">data\u00a0:= File(\"foo.txt\",\"r\").read()</pre>"}]}