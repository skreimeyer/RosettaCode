{"task": "Delegates", "blocks": [{"lang": "Ada", "loc": 48, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Delegation <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Things <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- We need a common root for our stuff</span><br/>      <span class=\"kw3\">type</span> Object <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>      <span class=\"kw3\">type</span> Object_Ptr <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">all</span> Object'Class;<br/>\u00a0<br/>      <span class=\"co1\">-- Objects that have operation thing</span><br/>      <span class=\"kw3\">type</span> Substantial <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Object <span class=\"kw3\">with</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>      <span class=\"kw3\">function</span> Thing <span class=\"br0\">(</span>X\u00a0: Substantial<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/>      <span class=\"co1\">-- Delegator objects</span><br/>      <span class=\"kw3\">type</span> Delegator <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Object <span class=\"kw3\">with</span> <span class=\"kw3\">record</span><br/>         Delegate\u00a0: Object_Ptr;<br/>      <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>      <span class=\"kw3\">function</span> Operation <span class=\"br0\">(</span>X\u00a0: Delegator<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/>      No_Thing \u00a0: <span class=\"kw3\">aliased</span> Object;      <span class=\"co1\">-- Does not have thing</span><br/>      Has_Thing\u00a0: <span class=\"kw3\">aliased</span> Substantial; <span class=\"co1\">-- Has one</span><br/>   <span class=\"kw1\">end</span> Things;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Things <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> Thing <span class=\"br0\">(</span>X\u00a0: Substantial<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span>;<br/>      <span class=\"kw1\">end</span> Thing;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Operation <span class=\"br0\">(</span>X\u00a0: Delegator<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> X.<span class=\"me1\">Delegate</span> /= <span class=\"kw3\">null</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> X.<span class=\"me1\">Delegate</span>.<span class=\"kw3\">all</span> <span class=\"kw3\">in</span> Substantial'Class <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Thing <span class=\"br0\">(</span>Substantial'Class <span class=\"br0\">(</span>X.<span class=\"me1\">Delegate</span>.<span class=\"kw3\">all</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Operation;<br/>   <span class=\"kw1\">end</span> Things;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> Things;<br/>\u00a0<br/>   A\u00a0: Delegator; <span class=\"co1\">-- Without a delegate</span><br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>A.<span class=\"me1\">Operation</span><span class=\"br0\">)</span>;<br/>   A.<span class=\"me1\">Delegate</span>\u00a0:= No_Thing'<span class=\"kw3\">Access</span>; <span class=\"co1\">-- Set no thing</span><br/>   Put_Line <span class=\"br0\">(</span>A.<span class=\"me1\">Operation</span><span class=\"br0\">)</span>;<br/>   A.<span class=\"me1\">Delegate</span>\u00a0:= Has_Thing'<span class=\"kw3\">Access</span>; <span class=\"co1\">-- Set a thing</span><br/>   Put_Line <span class=\"br0\">(</span>A.<span class=\"me1\">Operation</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Delegation;</pre>"}, {"lang": "Aime", "loc": 42, "block": "<pre class=\"text highlighted_source\">text<br/>thing(void)<br/>{<br/>    return \"delegate implementation\";<br/>}<br/>\u00a0<br/>text<br/>operation(record delegator)<br/>{<br/>    text s;<br/>\u00a0<br/>    if (r_key(delegator, \"delegate\")) {<br/>        if (r_key(delegator[\"delegate\"], \"thing\")) {<br/>            s = call(r_query(delegator[\"delegate\"], \"thing\"));<br/>        } else {<br/>            s = \"default implementation\";<br/>        }<br/>    } else {<br/>        s = \"default implementation\";<br/>    }<br/>\u00a0<br/>    return s;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    record delegate, delegator;<br/>\u00a0<br/>    o_text(operation(delegator));<br/>    o_byte('\\n');<br/>\u00a0<br/>    r_link(delegator, \"delegate\", delegate);<br/>    o_text(operation(delegator));<br/>    o_byte('\\n');<br/>\u00a0<br/>    r_put(delegate, \"thing\", thing);<br/>    o_text(operation(delegator));<br/>    o_byte('\\n');<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "Aikido", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Delegator {<br/>    public generic delegate = none<br/>\u00a0<br/>    public function operation {<br/>        if (typeof(delegate) == \"none\") {<br/>            return \"default implementation\"<br/>        }<br/>        return delegate()<br/>    }<br/>}<br/>\u00a0<br/>function thing {<br/>    return \"delegate implementation\"<br/>}<br/>\u00a0<br/>// default, no delegate<br/>var d = new Delegator()<br/>println (d.operation())<br/>\u00a0<br/>// delegate<br/>var d1 = new Delegator()<br/>d1.delegate = thing<br/>println (d1.operation())<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 76, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># An Algol 68 approximation of delegates                                #</span><br/>\u00a0<br/><span class=\"coMULTI\"># The delegate mode - the delegate is a STRUCT with a single field      #</span><br/><span class=\"coMULTI\"># that is a REF PROC STRING. If this is NIL, it doesn't implement       #</span><br/><span class=\"coMULTI\"># thing                                                                 #</span><br/><span class=\"kw4\">MODE</span> DELEGATE  <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">STRING</span> thing <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># A delegator mode that will invoke the delegate's thing method         #</span><br/><span class=\"coMULTI\"># - if there is a delegate and the delegate has a thing method          #</span><br/><span class=\"kw4\">MODE</span> DELEGATOR <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DELEGATE delegate<br/>                       <span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DELEGATE <span class=\"br0\">)</span><span class=\"kw3\">STRING</span> thing<br/>                       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># constructs a new DELEGATE with the specified PROC as its thing        #</span><br/><span class=\"coMULTI\"># Algol 68 HEAP is like \"new\" in e.g. Java, but it can't take           #</span><br/><span class=\"coMULTI\"># parameters, so this PROC does the equivalent                          #</span><br/><span class=\"kw4\">PROC</span> new delegate <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">STRING</span> thing <span class=\"br0\">)</span><span class=\"kw4\">REF</span> DELEGATE<span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw4\">REF</span> DELEGATE result <span class=\"sy1\">=</span> <span class=\"kw4\">HEAP</span> DELEGATE<span class=\"sy1\">;</span><br/>        thing <span class=\"kw6\">OF</span> result <span class=\"sy1\">:=</span> thing<span class=\"sy1\">;</span><br/>\u00a0<br/>        result<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># new delegate #</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># constructs a new DELEGATOR with the specified DELEGATE                #</span><br/><span class=\"kw4\">PROC</span> new delegator <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DELEGATE delegate <span class=\"br0\">)</span><span class=\"kw4\">REF</span> DELEGATOR<span class=\"sy1\">:</span><br/>    <span class=\"kw4\">HEAP</span> DELEGATOR <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> delegate<br/>                      <span class=\"sy1\">,</span> <span class=\"coMULTI\"># anonymous PROC to invoke the delegate's thing #</span><br/>                        <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DELEGATE delegate <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>                            <span class=\"kw2\">IF</span> delegate <span class=\"kw7\">IS</span> <span class=\"kw4\">REF</span> DELEGATE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><br/>                            <span class=\"kw2\">THEN</span><br/>                                <span class=\"coMULTI\"># we have no delegate #</span><br/>                                <span class=\"st0\">\"default implementation\"</span><br/>\u00a0<br/>                            <span class=\"kw2\">ELIF</span> thing <span class=\"kw6\">OF</span> delegate <span class=\"kw7\">IS</span> <span class=\"kw4\">REF</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><br/>                            <span class=\"kw2\">THEN</span><br/>                                <span class=\"coMULTI\"># the delegate doesn't have an implementation #</span><br/>                                <span class=\"st0\">\"default implementation\"</span><br/>\u00a0<br/>                            <span class=\"kw2\">ELSE</span><br/>                                <span class=\"coMULTI\"># the delegate can thing #</span><br/>                                thing <span class=\"kw6\">OF</span> delegate<br/>\u00a0<br/>                            <span class=\"kw2\">FI</span><br/>                      <span class=\"br0\">)</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># invokes the delegate's thing via the delagator                        #</span><br/><span class=\"coMULTI\"># Because the PROCs of a STRUCT don't have an equivalent of e.g. Java's #</span><br/><span class=\"coMULTI\"># \"this\", we have to explicitly pass the delegate as a parameter        #</span><br/><span class=\"kw4\">PROC</span> invoke thing <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DELEGATOR delegator <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"coMULTI\"># the following is Algol 68 for what would be written in Java as    #</span><br/>    <span class=\"coMULTI\">#                           \"delegator.thing( delegator.delegate )\" #</span><br/>    <span class=\"br0\">(</span> thing <span class=\"kw6\">OF</span> delegator <span class=\"br0\">)</span><span class=\"br0\">(</span> delegate <span class=\"kw6\">OF</span> delegator <span class=\"br0\">)</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"No delegate          \u00a0: \"</span><br/>           <span class=\"sy1\">,</span> invoke thing<span class=\"br0\">(</span> new delegator<span class=\"br0\">(</span> <span class=\"kw7\">NIL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\"Delegate with no thing: \"</span><br/>           <span class=\"sy1\">,</span> invoke thing<span class=\"br0\">(</span> new delegator<span class=\"br0\">(</span> new delegate<span class=\"br0\">(</span> <span class=\"kw7\">NIL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\"Delegate with a thing\u00a0: \"</span><br/>           <span class=\"sy1\">,</span> invoke thing<span class=\"br0\">(</span> new delegator<span class=\"br0\">(</span> new delegate<span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">STRING</span> <span class=\"sy1\">:=</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"st0\">\"delegate implementation\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 86, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>Responder<span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDelegate <span class=\"br0\">{</span><br/>    Responder operation<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>Delegate<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Delegate class constructor */</span><br/>Delegate NewDelegate<span class=\"br0\">(</span> Responder rspndr <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Delegate dl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sDelegate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    dl<span class=\"sy0\">-&gt;</span>operation <span class=\"sy0\">=</span> rspndr<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> dl<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Thing method of Delegate */</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>DelegateThing<span class=\"br0\">(</span>Delegate dl<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> p1<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span>  <span class=\"br0\">(</span>dl<span class=\"sy0\">-&gt;</span>operation<span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>dl<span class=\"sy0\">-&gt;</span>operation<span class=\"br0\">)</span><span class=\"br0\">(</span>p1<span class=\"br0\">)</span> <span class=\"sy0\">:</span> NULL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDelegator <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span>     param<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span>    <span class=\"sy0\">*</span>phrase<span class=\"sy0\">;</span><br/>    Delegate delegate<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>Delegator<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> defaultResponse<span class=\"br0\">(</span> <span class=\"kw4\">int</span> p1<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> sDelegate defaultDel <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"sy0\">&amp;</span>defaultResponse <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Delegator class constructor */</span><br/>Delegator NewDelegator<span class=\"br0\">(</span> <span class=\"kw4\">int</span> p<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>phrase<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Delegator d  <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sDelegator<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    d<span class=\"sy0\">-&gt;</span>param <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>    d<span class=\"sy0\">-&gt;</span>phrase <span class=\"sy0\">=</span> phrase<span class=\"sy0\">;</span><br/>    d<span class=\"sy0\">-&gt;</span>delegate <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>defaultDel<span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* default delegate */</span><br/>    <span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Operation method of Delegator */</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>Delegator_Operation<span class=\"br0\">(</span> Delegator theDelegator<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> p1<span class=\"sy0\">,</span> Delegate delroy<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>rtn<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>delroy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rtn <span class=\"sy0\">=</span> DelegateThing<span class=\"br0\">(</span>delroy<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>rtn<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t\t<span class=\"coMULTI\">/* delegate didn't handle 'thing' */</span><br/>            rtn <span class=\"sy0\">=</span> DelegateThing<span class=\"br0\">(</span>theDelegator<span class=\"sy0\">-&gt;</span>delegate<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> \t\t<span class=\"coMULTI\">/* no delegate */</span><br/>        rtn <span class=\"sy0\">=</span> DelegateThing<span class=\"br0\">(</span>theDelegator<span class=\"sy0\">-&gt;</span>delegate<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> theDelegator<span class=\"sy0\">-&gt;</span>phrase <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> rtn<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>thing1<span class=\"br0\">(</span> <span class=\"kw4\">int</span> p1<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"We're in thing1 with value\u00a0%d<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Delegate del1 <span class=\"sy0\">=</span> NewDelegate<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>thing1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Delegate del2 <span class=\"sy0\">=</span> NewDelegate<span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Delegator theDelegator <span class=\"sy0\">=</span> NewDelegator<span class=\"br0\">(</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A stellar vista, Baby.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Delegator returns\u00a0%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <br/>            Delegator_Operation<span class=\"br0\">(</span> theDelegator<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Delegator returns\u00a0%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <br/>            Delegator_Operation<span class=\"br0\">(</span> theDelegator<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> del1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Delegator returns\u00a0%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            Delegator_Operation<span class=\"br0\">(</span> theDelegator<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> del2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">interface</span> IOperable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> Operate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Inoperable<br/><span class=\"br0\">{</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Operable <span class=\"sy0\">:</span> IOperable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Operate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Delegate implementation.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Delegator <span class=\"sy0\">:</span> IOperable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">object</span> <span class=\"kw4\">Delegate</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Operate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> operable <span class=\"sy0\">=</span> <span class=\"kw4\">Delegate</span> <span class=\"kw1\">as</span> IOperable<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> operable <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span> <span class=\"sy0\">?</span> operable<span class=\"sy0\">.</span><span class=\"me1\">Operate</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Default implementation.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> delegator <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> @<span class=\"kw4\">delegate</span> <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"kw1\">null</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Inoperable<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Operable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            delegator<span class=\"sy0\">.</span><span class=\"kw4\">Delegate</span> <span class=\"sy0\">=</span> @<span class=\"kw4\">delegate</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>delegator<span class=\"sy0\">.</span><span class=\"me1\">Operate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 81, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;tr1/memory&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;tr1/functional&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">::</span><span class=\"me2\">tr1</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">tr1</span><span class=\"sy4\">::</span><span class=\"me2\">function</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// interface for all delegates</span><br/><span class=\"kw2\">class</span> IDelegate<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">virtual</span> ~IDelegate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//interface for delegates supporting thing </span><br/><span class=\"kw2\">class</span> IThing<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">virtual</span> ~IThing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> Thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Does not handle Thing</span><br/><span class=\"kw2\">class</span> DelegateA <span class=\"sy4\">:</span> <span class=\"kw2\">virtual</span> <span class=\"kw2\">public</span> IDelegate<br/><span class=\"br0\">{</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Handles Thing</span><br/><span class=\"kw2\">class</span> DelegateB <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> IThing, <span class=\"kw2\">public</span> IDelegate<br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> Thing<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Delegator<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> Operation<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>Delegate<span class=\"br0\">)</span> <span class=\"co1\">//have delegate</span><br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IThing <span class=\"sy2\">*</span> pThing <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span>IThing<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>Delegate.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"co1\">//delegate provides IThing interface</span><br/>            <span class=\"kw1\">return</span> pThing<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>Thing<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    shared_ptr<span class=\"sy1\">&lt;</span>IDelegate<span class=\"sy1\">&gt;</span> Delegate<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    shared_ptr<span class=\"sy1\">&lt;</span>DelegateA<span class=\"sy1\">&gt;</span> delegateA<span class=\"br0\">(</span><span class=\"kw3\">new</span> DelegateA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    shared_ptr<span class=\"sy1\">&lt;</span>DelegateB<span class=\"sy1\">&gt;</span> delegateB<span class=\"br0\">(</span><span class=\"kw3\">new</span> DelegateB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    Delegator delegator<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// No delegate</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> delegator.<span class=\"me1\">Operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Delegate doesn't handle \"Thing\"</span><br/>    delegator.<span class=\"me1\">Delegate</span> <span class=\"sy1\">=</span> delegateA<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> delegator.<span class=\"me1\">Operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Delegate handles \"Thing\"</span><br/>    delegator.<span class=\"me1\">Delegate</span> <span class=\"sy1\">=</span> delegateB<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> delegator.<span class=\"me1\">Operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Prints:<br/>\u00a0<br/>  default implementation<br/>  default implementation<br/>  delegate implementation<br/> */</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>defprotocol Thing<br/>  <span class=\"br0\">(</span>thing <span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defprotocol Operation<br/>  <span class=\"br0\">(</span>operation <span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Delegator <span class=\"br0\">[</span>delegate<span class=\"br0\">]</span><br/>  Operation<br/>  <span class=\"br0\">(</span>operation <span class=\"br0\">[</span>_<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">try</span> <span class=\"br0\">(</span>thing delegate<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">catch</span> IllegalArgumentException e <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Delegate <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  Thing<br/>  <span class=\"br0\">(</span>thing <span class=\"br0\">[</span>_<span class=\"br0\">]</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 26, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"kw3\">class</span> Delegator<br/>  operation<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>delegate <span class=\"kw2\">and</span> <span class=\"kw3\">typeof</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>delegate.<span class=\"me1\">thing</span><span class=\"br0\">)</span> <span class=\"kw2\">is</span> <span class=\"st0\">\"function\"</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">@</span>delegate.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"st0\">\"default implementation\"</span><br/>\u00a0<br/><span class=\"kw3\">class</span> Delegate<br/>  thing<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"st0\">\"Delegate Implementation\"</span><br/>\u00a0<br/>testDelegator = <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Delegator with no delegate.</span><br/>  a = <span class=\"kw3\">new</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Delegator with delegate not implementing \"thing\"</span><br/>  a.<span class=\"me1\">delegate</span> = <span class=\"st0\">\"A delegate may be any object\"</span><br/>  console.<span class=\"me1\">log</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Delegator with delegate that does implement \"thing\"</span><br/>  a.<span class=\"me1\">delegate</span> = <span class=\"kw3\">new</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>testDelegator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defgeneric thing <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Thing the object.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod thing <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass delegator <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>delegate<br/>    <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">delegate</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">reader</span> delegator-delegate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod thing <span class=\"br0\">(</span><span class=\"br0\">(</span>delegator delegator<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"If delegator has a delegate, invoke thing on the delegate,<br/>otherwise return <span class=\"es0\">\\\"</span>no delegate<span class=\"es0\">\\\"</span>.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>slot-<span class=\"kw1\">boundp</span> delegator 'delegate<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>thing <span class=\"br0\">(</span>delegator-delegate delegator<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"no delegate\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass delegate <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod thing <span class=\"br0\">(</span><span class=\"br0\">(</span>delegate delegate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>d1 <span class=\"br0\">(</span>make-instance 'delegator<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>d2 <span class=\"br0\">(</span>make-instance 'delegator <span class=\"sy0\">:</span><span class=\"me1\">delegate</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>d3 <span class=\"br0\">(</span>make-instance 'delegator <span class=\"sy0\">:</span><span class=\"me1\">delegate</span> <span class=\"br0\">(</span>make-instance 'delegate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"st0\">\"no delegate\"</span> <span class=\"br0\">(</span>thing d1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"st0\">\"default implementation\"</span> <span class=\"br0\">(</span>thing d2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"st0\">\"delegate implementation\"</span> <span class=\"br0\">(</span>thing d3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">class</span> Delegator <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"br0\">)</span> hasDelegate<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> operation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hasDelegate <span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"Default implementation\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> hasDelegate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span> setDg<span class=\"br0\">(</span><span class=\"kw4\">string</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"br0\">)</span> dg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hasDelegate <span class=\"sy0\">=</span> dg<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> dr <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Delegator<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"br0\">)</span> thing <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Delegate implementation\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>dr.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>dr.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>dr.<span class=\"me1\">setDg</span><span class=\"br0\">(</span>thing<span class=\"br0\">)</span>.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 29, "block": "<pre class=\"text highlighted_source\">class Delegator {<br/>  var delegate;<br/>\u00a0<br/>  String operation() {<br/>    if (delegate == null)<br/>      return \"default implementation\";<br/>    else<br/>      return delegate.thing();<br/>  }<br/>}<br/>\u00a0<br/>class Delegate {<br/>  String thing() =&gt; \"delegate implementation\";<br/>}<br/>\u00a0<br/>main() {<br/>  // Without a delegate:<br/>  Delegator a = new Delegator();<br/>  Expect.equals(\"default implementation\",a.operation());<br/>\u00a0<br/>  // any object doesn't work unless we can check for existing methods<br/>  // a.delegate=new Object();<br/>  // Expect.equals(\"default implementation\",a.operation());<br/>\u00a0<br/>  // With a delegate:<br/>  Delegate d = new Delegate();<br/>  a.delegate = d;<br/>  Expect.equals(\"delegate implementation\",a.operation());<br/>}</pre>"}, {"lang": "Delphi", "loc": 50, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">unit</span> Printer<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  <span class=\"co1\">// the \"delegate\"</span><br/>  TRealPrinter <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">procedure</span> Print<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// the \"delegator\"</span><br/>  TPrinter <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FPrinter<span class=\"sy1\">:</span> TRealPrinter<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Print<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TRealPrinter }</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TRealPrinter<span class=\"sy1\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Something...'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TPrinter }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TPrinter<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"sy1\">;</span><br/>  FPrinter<span class=\"sy1\">:</span><span class=\"sy3\">=</span> TRealPrinter<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TPrinter<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FPrinter<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">inherited</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TPrinter<span class=\"sy1\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FPrinter<span class=\"sy1\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 34, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeDelegator <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/** construct without an explicit delegate */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        return makeDelegator<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** construct with a delegate */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> run<span class=\"br0\">(</span>delegateO<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># suffix because \"delegate\" is a reserved keyword</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> delegator <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> operation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                return <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>delegateO.__respondsTo<span class=\"br0\">(</span><span class=\"st0\">\"thing\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                           delegateO.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>                           <span class=\"st0\">\"default implementation\"</span><br/>                       <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        return delegator<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> delegator <span class=\"sy0\">:=</span> makeDelegator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> delegator.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \"default implementation\"</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> delegator <span class=\"sy0\">:=</span> makeDelegator<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> doesNotImplement <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> delegator.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \"default implementation\"</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> delegator <span class=\"sy0\">:=</span> makeDelegator<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> doesImplement <span class=\"br0\">{</span><br/><span class=\"sy0\">&gt;</span>     <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"st0\">\"delegate implementation\"</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> delegator.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \"default implementation\"</span></pre>"}, {"lang": "Elena", "loc": 54, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>\u00a0<br/>class IOperable<br/>{<br/>    operate<br/>    [<br/>        NotSupportedException new; raise.<br/>    ]<br/>}<br/>\u00a0<br/>class Operable\u00a0:: IOperable<br/>{<br/>    operate<br/>        = \"delegate implementation\".<br/>}<br/>\u00a0<br/>class Delegator<br/>{<br/>    object theDelegate.<br/>\u00a0<br/>    constructor new<br/>    [<br/>        theDelegate\u00a0:= nil.<br/>    ]<br/>\u00a0<br/>    set Delegate:obj<br/>    [<br/>        if ($nil == obj)<br/>            [ theDelegate\u00a0:= $nil. ];<br/>            [ theDelegate\u00a0:= obj. ].<br/>    ]<br/>\u00a0<br/>    operate(Object operable)<br/>        = \"default implementation\".        <br/>\u00a0<br/>    operate(IOperable operable)<br/>        = operable operate.<br/>\u00a0<br/>    operate<br/>        &lt;= operate(theDelegate).<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var delegator\u00a0:= Delegator new.<br/>\u00a0<br/>    (nil, Object new, Operable new) forEach(:o)<br/>    [<br/>       delegator Delegate\u00a0:= o.<br/>\u00a0<br/>       console printLine(delegator operate).<br/>    ].<br/>].</pre>"}, {"lang": "F#", "loc": 26, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> defaultOperation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"default implementation\"</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> del <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><br/>\u00a0<br/>  <span class=\"co1\">// write-only property \"Delegate\"</span><br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Delegate</span> <span class=\"kw1\">with</span> set<span class=\"br0\">(</span>d:<span class=\"kw4\">obj</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> del <span class=\"sy0\">&lt;-</span> d<br/>\u00a0<br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> del <span class=\"sy0\">=</span> <span class=\"kw1\">null</span> <span class=\"kw1\">then</span><br/>      defaultOperation<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">match</span> del.<span class=\"me1\">GetType</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">GetMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"thing\"</span>, <span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>      | <span class=\"kw1\">null</span> <span class=\"sy0\">-&gt;</span> defaultOperation<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      | thing <span class=\"sy0\">-&gt;</span> thing.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span>del, <span class=\"br0\">[</span>||<span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0:?<span class=\"sy0\">&gt;</span> <span class=\"kw4\">string</span> <br/>\u00a0<br/><span class=\"kw1\">type</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"delegate implementation\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">assert</span> <span class=\"br0\">(</span>d.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>d.<span class=\"me1\">Delegate</span> <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"A delegate may be any object\"</span><br/><span class=\"kw1\">assert</span> <span class=\"br0\">(</span>d.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>d.<span class=\"me1\">Delegate</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">new</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">assert</span> <span class=\"br0\">(</span>d.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Forth", "loc": 35, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>\u00a0<br/>:class delegate<br/> \u00a0:m thing .\" delegate implementation\"\u00a0;m<br/>;class<br/>\u00a0<br/>delegate slave<br/>\u00a0<br/>:class delegator<br/>  ivar del  \\ object container<br/> \u00a0:m\u00a0!: ( n -- ) del\u00a0!\u00a0;m<br/> \u00a0:m init: 0 del\u00a0!\u00a0;m<br/> \u00a0:m default .\" default implementation\"\u00a0;m<br/> \u00a0:m operation <br/>     del @ 0= if self default exit then<br/>     del @ has-meth thing<br/>     if del @ thing<br/>     else self default<br/>     then\u00a0;m<br/>;class<br/>\u00a0<br/>delegator master <br/>\u00a0<br/>\\ First, without a delegate<br/>master operation \\ =&gt; default implementation<br/>\u00a0<br/>\\ then with a delegate that does not implement \"thing\"<br/>object o  <br/>o master\u00a0!:<br/>master operation \\ =&gt; default implementation<br/>\u00a0<br/>\\ and last with a delegate that implements \"thing\"<br/>slave master\u00a0!:<br/>master operation \\ =&gt; delegate implementation<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Delegator <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    delegate <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span> <span class=\"co1\">// the delegate may be any type</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// interface that represents anything that supports thing()</span><br/><span class=\"kw1\">type</span> Thingable <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    thing<span class=\"sy1\">()</span> <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self Delegator<span class=\"sy1\">)</span> operation<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> v<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> self<span class=\"sy3\">.</span>delegate<span class=\"sy3\">.</span><span class=\"sy1\">(</span>Thingable<span class=\"sy1\">);</span> ok <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy3\">.</span>thing<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Delegate <span class=\"kw4\">int</span> <span class=\"co1\">// any dummy type</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>Delegate<span class=\"sy1\">)</span> thing<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Without a delegate:</span><br/>    a <span class=\"sy2\">:=</span> Delegator<span class=\"sy1\">{}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>a<span class=\"sy3\">.</span><span class=\"me1\">operation</span><span class=\"sy1\">())</span> <span class=\"co1\">// prints \"default implementation\"</span><br/>\u00a0<br/>    <span class=\"co1\">// With a delegate that does not implement \"thing\"</span><br/>    a<span class=\"sy3\">.</span><span class=\"me1\">delegate</span> <span class=\"sy2\">=</span> <span class=\"st0\">\"A delegate may be any object\"</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>a<span class=\"sy3\">.</span><span class=\"me1\">operation</span><span class=\"sy1\">())</span> <span class=\"co1\">// prints \"default implementation\"</span><br/>\u00a0<br/>    <span class=\"co1\">// With a delegate:</span><br/>    <span class=\"kw1\">var</span> d Delegate<br/>    a<span class=\"sy3\">.</span>delegate <span class=\"sy2\">=</span> d<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>operation<span class=\"sy1\">())</span> <span class=\"co1\">// prints \"delegate implementation\"</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Io", "loc": 22, "block": "<pre class=\"io highlighted_source\">Delegator\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <span class=\"kw2\">do</span><span class=\"br0\">(</span><br/>    delegate\u00a0::= <span class=\"kw3\">nil</span><br/>    operation\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>delegate <span class=\"sy0\">!</span>= <span class=\"kw3\">nil</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>delegate <span class=\"kw2\">hasSlot</span><span class=\"br0\">(</span><span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            delegate thing,<br/>            <span class=\"st0\">\"default implementation\"</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>Delegate\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <span class=\"kw2\">do</span><span class=\"br0\">(</span><br/>    thing\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>a\u00a0:= <span class=\"kw2\">clone</span> Delegator<br/>a operation println<br/>\u00a0<br/>a setDelegate<span class=\"br0\">(</span><span class=\"st0\">\"A delegate may be any object\"</span><span class=\"br0\">)</span><br/>a operation println<br/>\u00a0<br/>a setDelegate<span class=\"br0\">(</span>Delegate <span class=\"kw2\">clone</span><span class=\"br0\">)</span><br/>a operation println</pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\">coclass <span class=\"st_h\">'delegator'</span><br/>  operation=:<span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'thing__delegate\u00a0::thing y'</span><br/>  thing=: <span class=\"st_h\">'default implementation'</span>\"<span class=\"nu0\">_</span><br/>  setDelegate=:<span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'delegate=:y'</span>  <span class=\"co1\">NB. result is the reference to our new delegate</span><br/>  delegate=:&lt;<span class=\"st_h\">'delegator'</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'delegatee1'</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'delegatee2'</span><br/>  thing=: <span class=\"st_h\">'delegate implementation'</span>\"<span class=\"nu0\">_</span><br/>\u00a0<br/><span class=\"co1\">NB. set context in case this script was used interactively, instead of being loaded</span><br/>cocurrent <span class=\"st_h\">'base'</span></pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">interface</span> Thingable <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> thing<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Delegator <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> Thingable delegate<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> operation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>delegate <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> delegate.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adelegate+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Delegate</span></a> <span class=\"kw1\">implements</span> Thingable <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Example usage</span><br/><span class=\"co1\">// Memory management ignored for simplification</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> DelegateExample <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Without a delegate:</span><br/>        Delegator a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// With a delegate:</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adelegate+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Delegate</span></a> d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adelegate+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Delegate</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Same as the above, but with an anonymous class:</span><br/>        a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Thingable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"anonymous delegate implementation\"</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"anonymous delegate implementation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 25, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">delegate</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">delegate</span>.<span class=\"me1\">thing</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'function'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">delegate</span>.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'default implementation'</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">thing</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'Delegate Implementation'</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> testDelegator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span>a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"st0\">'A delegate may be any object'</span> <span class=\"sy0\">;</span> <br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span>a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span>a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">module Delegates<br/>\u00a0<br/>export Delegator, Delegate<br/>\u00a0<br/>struct Delegator{T}<br/>    delegate::T<br/>end<br/>\u00a0<br/>struct Delegate end<br/>\u00a0<br/>operation(x::Delegator) = thing(x.delegate)<br/>thing(::Any) = \"default implementation\"<br/>thing(::Delegate) = \"delegate implementation\"<br/>\u00a0<br/>end  # module Delegates</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/>interface Thingable <span class=\"br0\">{</span><br/>    fun thing<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String<span class=\"sy0\">?</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Delegate<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> responds<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Thingable <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>responds<span class=\"br0\">)</span> <span class=\"st0\">\"delegate implementation\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Delegator<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Delegate<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Thingable by d <span class=\"br0\">{</span><br/>    fun operation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?:</span> <span class=\"st0\">\"default implementation\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// delegate doesn't respond to 'thing'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> Delegate<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dd <span class=\"sy0\">=</span> Delegator<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>dd.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// delegate responds to 'thing'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d2 <span class=\"sy0\">=</span> Delegate<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dd2 <span class=\"sy0\">=</span> Delegator<span class=\"br0\">(</span>d2<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>dd2.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 76, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"co1\">% define a category for holding the interface</span><br/><span class=\"co1\">% and implementation for delegator objects</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">category</span>(delegator).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(delegate<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(set_delegate<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">private</span>(delegate_<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">dynamic</span>(delegate_<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/>    delegate(<span class=\"re0\">Delegate</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">::</span>delegate_(<span class=\"re0\">Delegate</span>).<br/>\u00a0<br/>    set_delegate(<span class=\"re0\">Delegate</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">::</span><span class=\"kw4\">retractall</span>(delegate_(<span class=\"re0\">Delegate</span>)),<br/>        <span class=\"sy1\">::</span><span class=\"kw4\">assertz</span>(delegate_(<span class=\"re0\">Delegate</span>)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_category</span>.<br/>\u00a0<br/><span class=\"co1\">% define a simpler delegator object, with a</span><br/><span class=\"co1\">% method, operation/1, for testing delegation</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(a_delegator,<br/>    <span class=\"kw3\">imports</span>(delegator)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(operation<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/>    operation(<span class=\"re0\">String</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"sy1\">::</span>delegate(<span class=\"re0\">Delegate</span>), <span class=\"re0\">Delegate</span><span class=\"sy1\">::</span><span class=\"kw4\">current_predicate</span>(thing<span class=\"sy1\">/</span><span class=\"nu0\">1</span>) <span class=\"sy1\">-&gt;</span><br/>            <span class=\"co1\">% a delegate is defined that understands the method thing/1</span><br/>            <span class=\"re0\">Delegate</span><span class=\"sy1\">::</span>thing(<span class=\"re0\">String</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"co1\">% otherwise just use the default implementation</span><br/>            <span class=\"re0\">String</span> <span class=\"sy1\">=</span> <span class=\"st0\">'default implementation'</span><br/>        ).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/><span class=\"co1\">% define an interface for delegate objects </span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">protocol</span>(delegate).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(thing<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_protocol</span>.<br/>\u00a0<br/><span class=\"co1\">% define a simple delegate</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(a_delegate,<br/>    <span class=\"kw3\">implements</span>(delegate)).<br/>\u00a0<br/>    thing(<span class=\"st0\">'delegate implementation'</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/><span class=\"co1\">% define a simple object that doesn't implement the \"delegate\" interface</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(an_object).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/><span class=\"co1\">% test the delegation solution when this file is compiled and loaded</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>((<br/>    <span class=\"co1\">% without a delegate:</span><br/>    a_delegator<span class=\"sy1\">::</span>operation(<span class=\"re0\">String1</span>),<br/>    <span class=\"re0\">String1</span> <span class=\"sy1\">==</span> <span class=\"st0\">'default implementation'</span>,<br/>    <span class=\"co1\">% with a delegate that does not implement thing/1:</span><br/>    a_delegator<span class=\"sy1\">::</span>set_delegate(an_object),<br/>    a_delegator<span class=\"sy1\">::</span>operation(<span class=\"re0\">String2</span>),<br/>    <span class=\"re0\">String2</span> <span class=\"sy1\">==</span> <span class=\"st0\">'default implementation'</span>,<br/>    <span class=\"co1\">% with a delegate that implements thing/1:</span><br/>    a_delegator<span class=\"sy1\">::</span>set_delegate(a_delegate),<br/>    a_delegator<span class=\"sy1\">::</span>operation(<span class=\"re0\">String3</span>),<br/>    <span class=\"re0\">String3</span> <span class=\"sy1\">==</span> <span class=\"st0\">'delegate implementation'</span><br/>)).</pre>"}, {"lang": "M2000 Interpreter", "loc": 67, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Event Alfa {<br/>            Read X, &amp;Z<br/>      }<br/>      Event Beta {<br/>            Read A$<br/>            Function {<br/>                  Print \"Default:\"; A$<br/>            }<br/>      }<br/>\u00a0<br/>      Class ObjectA {<br/>      Private:<br/>            Aname$=\"No Name Yet\"<br/>            mX=10, mY=20<br/>      Public:<br/>            Remove {<br/>                  Print \"Delete:\";.Aname$<br/>            }<br/>            Module MethodA (&amp;eventA){<br/>                  oldy=.mY<br/>                  Call Event EventA .mX, &amp;oldy<br/>                  If oldy=.mY then Print \"Nothing Happen\"<br/>            }<br/>            Module MethodB (&amp;eventB) {<br/>                  Call Event eventB .Aname$<br/>            }<br/>            Module SetName (.Aname$) {}<br/>      Class:<br/>            Module ObjectA  { <br/>                  if match(\"S\") then Read .Aname$<br/>            }<br/>      }<br/>      A=ObjectA(\"Master\")<br/>      A.MethodA &amp;Alfa   'Nothing Happen<br/>      A.MethodB Beta  'Default:Master<br/>      Group CountOne {<br/>            counter=0<br/>            Function ToDelegateA (a, &amp;b){<br/>                  b+=a<br/>                  .counter++<br/>            }<br/>      }<br/>      \\\\ Now add a function to ALfa, twice<br/>      Event Alfa New CountOne.ToDelegateA(),  CountOne.ToDelegateA()<br/>      For i=1 to  5\u00a0: A.MethodA &amp;Alfa\u00a0:Next i<br/>      Print CountOne.counter=10  ' true<br/>      Function DelegateB  (a$){<br/>             Print \"Delegate:\";a$     <br/>      }<br/>      Event Beta New DelegateB()<br/>      A.MethodB &amp;Beta  'Default:Master &amp; Delegate:Master<br/>      Event Beta Drop  DelegateB()<br/>      A.MethodB &amp;Beta  'Default:Master<br/>      Event Alfa Hold<br/>      For i=1 to  5\u00a0: A.MethodA &amp;Alfa\u00a0:Next i<br/>      Print CountOne.counter=10<br/>      Event Alfa Release<br/>      For i=1 to  5\u00a0: A.MethodA &amp;Alfa\u00a0:Next i<br/>      Print CountOne.counter=20<br/>      Event Alfa Clear<br/>      A.MethodA &amp;Alfa   'Nothing Happen<br/>      Clear A<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 6, "block": "<pre class=\"text highlighted_source\">delegator[del_]@operate\u00a0:= <br/>  If[StringQ[<a class=\"__cf_email__\" data-cfemail=\"6e0a0b022e011e0b1c0f1a0b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], <a class=\"__cf_email__\" data-cfemail=\"6602030a2609160314071203\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, \"default implementation\"];<br/>del1 = Null;<br/><a class=\"__cf_email__\" data-cfemail=\"9ffbfaf3addffdfef1fef1fe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = \"phone\";<br/><a class=\"__cf_email__\" data-cfemail=\"7511101946351a051007140110\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = \"delegate implementation\";<br/>Print[delegator[#]@operate] &amp; /@ {del1, del2, del3};</pre>"}, {"lang": "NGS", "loc": 40, "block": "<pre class=\"text highlighted_source\">{<br/>\ttype Delegator<br/>\u00a0<br/>\tF init(d:Delegator) d.delegate = null<br/>\u00a0<br/>\tF default_impl(d:Delegator) 'default implementation'<br/>\u00a0<br/>\tF operation(d:Delegator) default_impl(d)<br/>\u00a0<br/>\tF operation(d:Delegator) {<br/>\t\tguard defined thing<br/>\t\tguard thing is Fun<br/>\t\ttry {<br/>\t\t\td.delegate.thing()<br/>\t\t}<br/>\t\tcatch(e:ImplNotFound) {<br/>\t\t\t# Might be unrelated exception, so check and optionally rethrow<br/>\t\t\te.callable\u00a0!== thing throws e<br/>\t\t\tdefault_impl(d)<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tF operation(d:Delegator) {<br/>\t\tguard d.delegate is Null<br/>\t\tdefault_impl(d)<br/>\t}<br/>\u00a0<br/>\u00a0<br/>\ta = Delegator()<br/>\techo(a.operation())<br/>\u00a0<br/>\t# There is no method thing(s:Str)<br/>\ta.delegate = \"abc\"<br/>\techo(a.operation())<br/>\u00a0<br/>\t# ... now there is method thing(s:Str)<br/>\tF thing(s:Str) 'delegate implementation'<br/>\techo(a.operation())<br/>\u00a0<br/>}</pre>"}, {"lang": "Objective-C", "loc": 76, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Delegator <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">id</span> delegate;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>delegate;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>setDelegate<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>obj;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>operation;<br/>\u00a0<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Delegator<br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>delegate <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> delegate;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>setDelegate<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>obj <span class=\"br0\">{</span><br/>\u00a0<br/>    delegate <span class=\"sy0\">=</span> obj; <span class=\"co2\">// Weak reference</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>operation <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>delegate respondsToSelector<span class=\"sy0\">:</span><span class=\"kw1\">@selector</span><span class=\"br0\">(</span>thing<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>delegate thing<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"co3\">@</span><span class=\"st0\">\"default implementation\"</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"co2\">// Any object may implement these</span><br/><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">(</span>DelegatorDelegating<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>thing;<br/>\u00a0<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Delegate <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/>\u00a0<br/><span class=\"co2\">// Don't need to declare -thing because any NSObject has this method</span><br/>\u00a0<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Delegate<br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>thing <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"co3\">@</span><span class=\"st0\">\"delegate implementation\"</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"co2\">// Example usage</span><br/><span class=\"co2\">// Memory management ignored for simplification</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co2\">// Without a delegate:</span><br/>    Delegator <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Delegator alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>a operation<span class=\"br0\">]</span> isEqualToString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"default implementation\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// With a delegate that does not implement thing:</span><br/>    <span class=\"br0\">[</span>a setDelegate<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"A delegate may be any object\"</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>a operation<span class=\"br0\">]</span> isEqualToString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co2\">// With a delegate that implements \"thing\":</span><br/>    Delegate <span class=\"sy0\">*</span>d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Delegate alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>a setDelegate<span class=\"sy0\">:</span>d<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>a operation<span class=\"br0\">]</span> isEqualToString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 11, "block": "<pre class=\"text highlighted_source\">Object Class new: Delegate1<br/>\u00a0<br/>Object Class new: Delegate2<br/>Delegate2 method: thing  \"Delegate implementation\" println\u00a0;<br/>\u00a0<br/>Object Class new: Delegator(delegate)<br/>Delegator method: initialize \u00a0:= delegate\u00a0;<br/>\u00a0<br/>Delegator method: operation<br/>   @delegate respondTo(#thing) ifTrue: [ @delegate thing return ]<br/>   \"Default implementation\" println\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 42, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>delegator = <span class=\"sy0\">.</span>delegator~new   <span class=\"co1\">-- no delegate</span><br/><span class=\"kw1\">say</span> delegator~operation<br/><span class=\"co1\">-- an invalid delegate type</span><br/>delegator~delegate = <span class=\"st0\">\"Some string\"</span><br/><span class=\"kw1\">say</span> delegator~operation<br/><span class=\"co1\">-- a good delegate</span><br/>delegator~delegate = <span class=\"sy0\">.</span>thing~new<br/><span class=\"kw1\">say</span> delegator~operation<br/><span class=\"co1\">-- a directory object with a thing entry defined</span><br/>d = <span class=\"sy0\">.</span><span class=\"kw6\">directory</span>~new<br/>d~thing = <span class=\"st0\">\"delegate implementation\"</span><br/>delegator~delegate = d<br/><span class=\"kw1\">say</span> delegator~operation<br/>\u00a0<br/><span class=\"co1\">-- a class we can use as a delegate</span><br/>::class thing<br/>::method thing<br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><br/>\u00a0<br/>::class delegator<br/>::method init<br/>  <span class=\"kw1\">expose</span> delegate<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> delegate = <span class=\"sy0\">.</span>nil<br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> delegate<br/>\u00a0<br/>::method operation<br/>  <span class=\"kw1\">expose</span> delegate<br/>  <span class=\"kw1\">if</span> delegate == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><br/>\u00a0<br/>  <span class=\"co1\">-- Note:  We could use delegate~hasMethod(\"THING\") to check</span><br/>  <span class=\"co1\">-- for a THING method, but this will fail of the object relies</span><br/>  <span class=\"co1\">-- on an UNKNOWN method to handle the method.  By trapping</span><br/>  <span class=\"co1\">-- NOMETHOD conditions, we can allow those calls to go</span><br/>  <span class=\"co1\">-- through</span><br/>  <span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> nomethod<br/>  <span class=\"kw1\">return</span> delegate~thing<br/>\u00a0<br/>nomethod:<br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"default implementation\"</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class DelegateA 'not implmenting thing()<br/>'==============<br/>'<br/>string message<br/>\u00a0<br/>end class<br/>\u00a0<br/>class DelegateB 'implementing thing()<br/>'==============<br/>'<br/>string message<br/>\u00a0<br/>method thing() as string<br/>return message<br/>end method<br/>'<br/>end class<br/>\u00a0<br/>\u00a0<br/>Class Delegator<br/>'==============<br/>'<br/>has DelegateA dgA<br/>has DelegateB dgB<br/>'<br/>method operation() as DelegateB<br/>dgB.message=\"Delegate Implementation\"<br/>return @dgB<br/>end method<br/>\u00a0<br/>method thing() as string<br/>return \"not using Delegate\"<br/>end method<br/>'<br/>end class<br/>\u00a0<br/>'====<br/>'TEST<br/>'====<br/>\u00a0<br/>Delegator dgr<br/>let dg=dgr.operation<br/>print dgr.thing 'result \"not using Delegate\"<br/>print dg.thing  'result \"Delegate Implementation\"<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 43, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">class</span> <span class=\"re2\">Delegator</span> <span class=\"kw1\">from</span> BaseObject<br/>     <span class=\"kw1\">attr</span><br/>\tdelegate:<span class=\"kw1\">unit</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">set</span><span class=\"br0\">(</span>DG<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span>Object<span class=\"sy0\">.</span>is DG<span class=\"br0\">}</span> = <span class=\"kw1\">true</span> <span class=\"co1\">%% assert: DG must be an object</span><br/>\tdelegate <span class=\"sy0\">:=</span> DG<br/>     <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">operation</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy0\">@</span>delegate <span class=\"sy0\">==</span> <span class=\"kw1\">unit</span> <span class=\"kw1\">then</span><br/>\t   <span class=\"br0\">{</span><span class=\"kw1\">self</span> default<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t   <span class=\"kw1\">try</span><br/>\t      <span class=\"br0\">{</span><span class=\"sy0\">@</span>delegate thing<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t   <span class=\"kw1\">catch</span> error<span class=\"br0\">(</span>object<span class=\"br0\">(</span>lookup <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t      <span class=\"co1\">%% the delegate did not understand the message</span><br/>\t      <span class=\"br0\">{</span><span class=\"kw1\">self</span> default<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t   <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">default</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>\t<span class=\"st0\">\"default implementation\"</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> <span class=\"re2\">Delegate</span> <span class=\"kw1\">from</span> BaseObject<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">thing</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>\t<span class=\"st0\">\"delegate Implementation\"</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  A = <span class=\"br0\">{</span>New Delegator noop<span class=\"br0\">}</span>  <br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>A operation<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>A set<span class=\"br0\">(</span><span class=\"br0\">{</span>New BaseObject noop<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>A operation<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>A set<span class=\"br0\">(</span><span class=\"br0\">{</span>New Delegate noop<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span>  <br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>A operation<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Delegator<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> operation <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">can</span><span class=\"br0\">(</span><span class=\"st_h\">'thing'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">thing</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"st_h\">'default implementation'</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Delegate<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> thing <span class=\"br0\">{</span><br/>   <span class=\"st_h\">'delegate implementation'</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"co1\"># No delegate</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> Delegator<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'default implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># With a delegate that does not implement \"thing\"</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'A delegate may be any object'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'default implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># With delegate that implements \"thing\"</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">=</span> Delegate<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'delegate implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Delegator<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> operation <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">can</span><span class=\"br0\">(</span><span class=\"st_h\">'thing'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">thing</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"st_h\">'default implementation'</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Delegate<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> thing <span class=\"br0\">{</span><br/>   <span class=\"st_h\">'delegate implementation'</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"co1\"># No delegate</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> Delegator<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'default implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># With a delegate that does not implement \"thing\"</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'A delegate may be any object'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'default implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># With delegate that implements \"thing\"</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>delegate<span class=\"br0\">}</span> <span class=\"sy0\">=</span> Delegate<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">operation</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'delegate implementation'</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Non<span class=\"sy0\">-</span>Delegate  <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Delegate <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">method</span> thing <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"delegate implementation\"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Delegator <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">delegate</span> <span class=\"kw1\">is</span> rw<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">method</span> operation <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">delegate</span><span class=\"sy0\">.^</span>can<span class=\"br0\">(</span> <span class=\"st_h\">'thing'</span> <span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">delegate</span><span class=\"sy0\">.</span><span class=\"me1\">thing</span><br/>\t\t<span class=\"sy0\">!!</span> <span class=\"st0\">\"default implementation\"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Delegator <span class=\"re0\">$d</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"empty: \"</span><span class=\"sy0\">~</span><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">operation</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> Non<span class=\"sy0\">-</span>Delegate<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Non-Delegate: \"</span><span class=\"sy0\">~</span><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">operation</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> Delegate<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Delegate: \"</span><span class=\"sy0\">~</span><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">operation</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 44, "block": "<pre class=\"text highlighted_source\">enum OTHER, OPERATION<br/>\u00a0<br/>function operation(object o)<br/>    integer rid = o[OPERATION]<br/>    if rid!=NULL then<br/>        return call_func(rid,{})<br/>    end if<br/>    return \"no implementation\"<br/>end function<br/>\u00a0<br/>function xthing()<br/>    return \"default implementation\"<br/>end function<br/>\u00a0<br/>function newX()<br/>    return {1,routine_id(\"xthing\"),2}<br/>end function<br/>\u00a0<br/>function newY()<br/>    object res = newX()<br/>    res[OTHER] = \"something else\"<br/>    -- remove delegate:<br/>    res[OPERATION] = NULL<br/>    return res<br/>end function<br/>\u00a0<br/>function zthing()<br/>    return \"delegate implementation\"<br/>end function<br/>\u00a0<br/>function newZ()<br/>    object res = newX()<br/>    -- replace delegate:<br/>    res[OPERATION] = routine_id(\"zthing\")<br/>    return res<br/>end function<br/>\u00a0<br/>object x = newX(),<br/>       y = newY(),<br/>       z = newZ()<br/>\u00a0<br/>?operation(x)<br/>?operation(y)<br/>?operation(z)</pre>"}, {"lang": "PHP", "loc": 25, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> Delegator <span class=\"br0\">{</span><br/>  <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw4\">NULL</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">function</span> operation<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/method_exists\"><span class=\"kw3\">method_exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">delegate</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">delegate</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'default implementation'</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Delegate <span class=\"br0\">{</span><br/>  <span class=\"kw2\">function</span> thing<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'Delegate Implementation'</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"{<span class=\"es4\">$a-&gt;operation</span>()}<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'A delegate may be any object'</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"{<span class=\"es4\">$a-&gt;operation</span>()}<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"{<span class=\"es4\">$a-&gt;operation</span>()}<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 30, "block": "<pre class=\"text highlighted_source\">(class +Delegator)<br/># delegate<br/>\u00a0<br/>(dm operation&gt; ()<br/>   (if (: delegate)<br/>      (thing&gt; @)<br/>      \"default implementation\" ) )<br/>\u00a0<br/>\u00a0<br/>(class +Delegate)<br/># thing<br/>\u00a0<br/>(dm T (Msg)<br/>   (=: thing Msg) )<br/>\u00a0<br/>(dm thing&gt; ()<br/>   (: thing) )<br/>\u00a0<br/>\u00a0<br/>(let A (new '(+Delegator))<br/>   # Without a delegate<br/>   (println (operation&gt; A))<br/>\u00a0<br/>   # With delegate that does not implement 'thing&gt;'<br/>   (put A 'delegate (new '(+Delegate)))<br/>   (println (operation&gt; A))<br/>\u00a0<br/>   # With delegate that implements 'thing&gt;'<br/>   (put A 'delegate (new '(+Delegate) \"delegate implementation\"))<br/>   (println (operation&gt; A)) )</pre>"}, {"lang": "Pop11", "loc": 32, "block": "<pre class=\"text highlighted_source\">uses objectclass;<br/>define\u00a0:class Delegator;<br/>    slot delegate = false;<br/>enddefine;<br/>\u00a0<br/>define\u00a0:class Delegate;<br/>enddefine;<br/>\u00a0<br/>define\u00a0:method thing(x\u00a0: Delegate);<br/>   'delegate implementation'<br/>enddefine;<br/>\u00a0<br/>define\u00a0:method operation(x\u00a0: Delegator);<br/>if delegate(x) and fail_safe(delegate(x), thing) then<br/>  \u00a0;;; Return value is on the stack<br/>else<br/>   'default implementation'<br/>endif;<br/>enddefine;<br/>\u00a0<br/>;;; Default, without a delegate<br/>lvars a = newDelegator();<br/>operation(a) =&gt;<br/>\u00a0<br/>;;; a delegating to itself (works because Delegator does not<br/>;;; implement thing)<br/>a -&gt; delegate(a);<br/>operation(a) =&gt;<br/>\u00a0<br/>;;; delegating to a freshly created Delegate<br/>newDelegate() -&gt; delegate(a);<br/>operation(a) =&gt;</pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Delegator:<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>   <span class=\"kw1\">def</span> operation<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>       <span class=\"kw1\">if</span> <span class=\"kw2\">hasattr</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">delegate</span><span class=\"sy0\">,</span> <span class=\"st0\">'thing'</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"kw2\">callable</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">delegate</span>.<span class=\"me1\">thing</span><span class=\"br0\">)</span>:<br/>          <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">delegate</span>.<span class=\"me1\">thing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">return</span> <span class=\"st0\">'default implementation'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Delegate:<br/>   <span class=\"kw1\">def</span> thing<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'delegate implementation'</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>\u00a0<br/>   <span class=\"co1\"># No delegate</span><br/>   a <span class=\"sy0\">=</span> Delegator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'default implementation'</span><br/>\u00a0<br/>   <span class=\"co1\"># With a delegate that does not implement \"thing\"</span><br/>   a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <span class=\"st0\">'A delegate may be any object'</span><br/>   <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'default implementation'</span><br/>\u00a0<br/>   <span class=\"co1\"># With delegate that implements \"thing\"</span><br/>   a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">assert</span> a.<span class=\"me1\">operation</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'delegate implementation'</span></pre>"}, {"lang": "Racket", "loc": 35, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Delegates. Tim Brown 2014-10-16<br/>\u00a0<br/>(define delegator%<br/>  (class object%<br/>    (init-field [delegate #f])<br/>    (define/public (operation)<br/>      (cond [(and (object? delegate) (object-method-arity-includes? delegate 'thing 0))<br/>             (send delegate thing)]<br/>            [else \"default implementation\"]))<br/>    (super-new)))<br/>\u00a0<br/>(define non-thinging-delegate% (class object% (super-new)))<br/>\u00a0<br/>(define thinging-delegate%<br/>  (class object%<br/>    (define/public (thing) \"delegate implementation\")<br/>    (super-new)))<br/>\u00a0<br/>(module+ test<br/>  (require tests/eli-tester)<br/>  (define delegator-1 (new delegator%))<br/>  (define delegator-2 (new delegator%))<br/>  (define non-thinging-delegate (new non-thinging-delegate%))<br/>  (define thinging-delegate     (new thinging-delegate%))<br/>\u00a0<br/>  (test<br/>   (send delegator-1 operation) =&gt; \"default implementation\"<br/>   (send delegator-2 operation) =&gt; \"default implementation\"<br/>   (set-field! delegate delegator-1 non-thinging-delegate) =&gt; (void)<br/>   (set-field! delegate delegator-2 thinging-delegate)     =&gt; (void)<br/>   (send delegator-1 operation) =&gt; \"default implementation\"<br/>   (send delegator-2 operation) =&gt; \"delegate implementation\"<br/>   (send (new delegator% [delegate thinging-delegate]) operation) =&gt; \"delegate implementation\"))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 31, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw4\">Delegator</span><br/>   attr_accessor <span class=\"re3\">:delegate</span><br/>   <span class=\"kw1\">def</span> operation<br/>      <span class=\"kw1\">if</span> <span class=\"re1\">@delegate</span>.<span class=\"me1\">respond_to</span>?<span class=\"br0\">(</span><span class=\"re3\">:thing</span><span class=\"br0\">)</span><br/>         <span class=\"re1\">@delegate</span>.<span class=\"me1\">thing</span><br/>      <span class=\"kw1\">else</span><br/>         <span class=\"st0\">'default implementation'</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Delegate<br/>   <span class=\"kw1\">def</span> thing<br/>      <span class=\"st0\">'delegate implementation'</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">__FILE__</span> == <span class=\"re0\">$PROGRAM_NAME</span><br/>\u00a0<br/>   <span class=\"co1\"># No delegate</span><br/>   a = <span class=\"kw4\">Delegator</span>.<span class=\"me1\">new</span><br/>   <span class=\"kw3\">puts</span> a.<span class=\"me1\">operation</span> <span class=\"co1\"># prints \"default implementation\"</span><br/>\u00a0<br/>   <span class=\"co1\"># With a delegate that does not implement \"thing\"</span><br/>   a.<span class=\"me1\">delegate</span> = <span class=\"st0\">'A delegate may be any object'</span><br/>   <span class=\"kw3\">puts</span> a.<span class=\"me1\">operation</span> <span class=\"co1\"># prints \"default implementation\"</span><br/>\u00a0<br/>   <span class=\"co1\"># With delegate that implements \"thing\"</span><br/>   a.<span class=\"me1\">delegate</span> = Delegate.<span class=\"me1\">new</span><br/>   <span class=\"kw3\">puts</span> a.<span class=\"me1\">operation</span> <span class=\"co1\"># prints \"delegate implementation\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">trait</span></a> Thingable <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> thing<span class=\"sy0\">:</span> String<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Delegator <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> delegate<span class=\"sy0\">:</span> Thingable <span class=\"sy0\">=</span> <span class=\"sy0\">_</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> operation<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>delegate <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"default implementation\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> delegate.<span class=\"me1\">thing</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Delegate <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Thingable <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> thing <span class=\"sy0\">=</span> <span class=\"st0\">\"delegate implementation\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Example usage</span><br/><span class=\"co1\">// Memory management ignored for simplification</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> DelegateExample <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Delegator<br/>  assert<span class=\"br0\">(</span>a.<span class=\"me1\">operation</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// With a delegate:</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Delegate<br/>  a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> d<br/>  assert<span class=\"br0\">(</span>a.<span class=\"me1\">operation</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"delegate implementation\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// Same as the above, but with an anonymous class:</span><br/>  a.<span class=\"me1\">delegate</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Thingable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> thing <span class=\"sy0\">=</span> <span class=\"st0\">\"anonymous delegate implementation\"</span><br/>  <span class=\"br0\">}</span><br/>  assert<span class=\"br0\">(</span>a.<span class=\"me1\">operation</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"anonymous delegate implementation\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> NonDelegate <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Delegate <span class=\"br0\">{</span><br/>    method thing <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"st0\">\"delegate implementation\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw4\">Delegator</span> <span class=\"br0\">(</span>delegate = null<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method operation <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>delegate.<span class=\"me1\">respond_to</span><span class=\"br0\">(</span><span class=\"re3\">:thing</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> delegate.<span class=\"me1\">thing</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">return</span> <span class=\"st0\">\"default implementation\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var d = <span class=\"kw4\">Delegator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"empty: #{d.operation}\"</span><br/>d.<span class=\"me1\">delegate</span> = NonDelegate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"NonDelegate: #{d.operation}\"</span><br/>d.<span class=\"me1\">delegate</span> = Delegate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"Delegate: #{d.operation}\"</span></pre>"}, {"lang": "Swift", "loc": 33, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>protocol Thingable { // prior to Swift 1.2, needs to be declared @objc<br/>  func thing() -&gt; String<br/>}<br/>\u00a0<br/>class Delegator {<br/>  weak var delegate: AnyObject?<br/>  func operation() -&gt; String {<br/>    if let f = self.delegate?.thing {<br/>      return f()<br/>    } else {<br/>      return \"default implementation\"<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>class Delegate {<br/>  dynamic func thing() -&gt; String { return \"delegate implementation\" }<br/>}<br/>\u00a0<br/>// Without a delegate:<br/>let a = Delegator()<br/>println(a.operation())    // prints \"default implementation\"<br/>\u00a0<br/>// With a delegate that does not implement thing:<br/>a.delegate = \"A delegate may be any object\"<br/>println(a.operation())    // prints \"default implementation\"<br/>\u00a0<br/>// With a delegate that implements \"thing\":<br/>let d = Delegate()<br/>a.delegate = d<br/>println(a.operation())    // prints \"delegate implementation\"</pre>"}, {"lang": "Tcl", "loc": 53, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create Delegate <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> thing <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"delegate impl.\"</span><br/>    <span class=\"br0\">}</span><br/>    export thing<br/><span class=\"br0\">}</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create Delegator <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> delegate<br/>    constructor args <span class=\"br0\">{</span><br/>        my delegate <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> delegate args <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists delegate<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$delegate</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> delegate <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"wrong # args: should be <span class=\"es0\">\\\"</span>[self] delegate\u00a0?target?<span class=\"es0\">\\\"</span>\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> operation <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        try <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"re0\">$delegate</span> thing<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> on <span class=\"kw1\">error</span> e <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> result <span class=\"st0\">\"default implementation\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># to instantiate a named object, use: class create objname; objname aMethod</span><br/><span class=\"co1\"># to have the class name the object:  set obj [class new]; $obj aMethod</span><br/>\u00a0<br/>Delegator create a<br/><span class=\"kw1\">set</span> b <span class=\"br0\">[</span>Delegator new <span class=\"st0\">\"not a delegate object\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> c <span class=\"br0\">[</span>Delegator new <span class=\"br0\">[</span>Delegate new<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>assert <span class=\"br0\">{</span><span class=\"br0\">[</span>a operation<span class=\"br0\">]</span> eq <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">}</span>   <span class=\"sy0\">;</span><span class=\"co1\"># a \"named\" object, hence \"a ...\"</span><br/>assert <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$b</span> operation<span class=\"br0\">]</span> eq <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">}</span>  <span class=\"sy0\">;</span><span class=\"co1\"># an \"anonymous\" object, hence \"$b ...\"</span><br/>assert <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$c</span> operation<span class=\"br0\">]</span> ne <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># now, set a delegate for object a</span><br/>a delegate <span class=\"br0\">[</span><span class=\"re0\">$c</span> delegate<span class=\"br0\">]</span><br/>assert <span class=\"br0\">{</span><span class=\"br0\">[</span>a operation<span class=\"br0\">]</span> ne <span class=\"st0\">\"default implementation\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"all assertions passed\"</span></pre>"}, {"lang": "Vorpal", "loc": 24, "block": "<pre class=\"text highlighted_source\">a = new()<br/>a.f = method(){<br/>        .x.print()<br/>}<br/>\u00a0<br/>c = new()<br/>c.g = method(){<br/>        (.x + 1).print()<br/>}<br/>\u00a0<br/># array of delegates<br/>b = new()<br/>b.delegate = new()<br/>b.delegate[0] = a<br/>b.delegate[1] = c<br/>b.x = 3<br/>b.f()<br/>b.g()<br/>\u00a0<br/># single delegate<br/>d = new()<br/>d.delegate = a<br/>d.x = 7<br/>d.f()</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">class Thingable{ var thing; }<br/>\u00a0<br/>class Delegator{<br/>   var delegate;<br/>   fcn operation{<br/>      if (delegate) delegate.thing;<br/>      else \"default implementation\"<br/>   }<br/>}<br/>\u00a0<br/>class Delegate(Thingable){ thing = \"delegate implementation\" }</pre>"}]}