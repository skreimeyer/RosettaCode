{"task": "Levenshtein_distance", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Main <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Levenshtein_Distance <span class=\"br0\">(</span>S, T\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      D\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">S</span>'Length, <span class=\"nu0\">0</span> .. <span class=\"me1\">T</span>'Length<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> D'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         D <span class=\"br0\">(</span>I, <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0:= I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> D'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         D <span class=\"br0\">(</span><span class=\"nu0\">0</span>, I<span class=\"br0\">)</span>\u00a0:= I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> T'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> S'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> S <span class=\"br0\">(</span>I<span class=\"br0\">)</span> = T <span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               D <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>\u00a0:= D <span class=\"br0\">(</span>I - <span class=\"nu0\">1</span>, J - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">else</span><br/>               D <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>\u00a0:=<br/>                  Natural'Min<br/>                    <span class=\"br0\">(</span>Natural'Min <span class=\"br0\">(</span>D <span class=\"br0\">(</span>I - <span class=\"nu0\">1</span>, J<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, D <span class=\"br0\">(</span>I, J - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>                     D <span class=\"br0\">(</span>I - <span class=\"nu0\">1</span>, J - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> D <span class=\"br0\">(</span>S'Length, T'Length<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Levenshtein_Distance;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">\"kitten -&gt; sitting:\"</span> &amp;<br/>      Integer'Image <span class=\"br0\">(</span>Levenshtein_Distance <span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">\"rosettacode -&gt; raisethysword:\"</span> &amp;<br/>      Integer'Image <span class=\"br0\">(</span>Levenshtein_Distance <span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span>, <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Main;</pre>"}, {"lang": "Aime", "loc": 49, "block": "<pre class=\"text highlighted_source\">integer<br/>dist(data s, integer i, data t, integer j, list d)<br/>{<br/>    integer x;<br/>\u00a0<br/>    x = d[i * (~t + 1) + j];<br/>    if (x == -1) {<br/>        if (i == ~s) {<br/>            x = ~t - j;<br/>        } elif (j == ~t) {<br/>            x = ~s - i;<br/>        } elif (s[i] == t[j]) {<br/>            x = dist(s, i + 1, t, j + 1, d);<br/>        } else {<br/>            x = dist(s, i + 1, t, j + 1, d);<br/>            x = min(x, dist(s, i, t, j + 1, d));<br/>            x = min(x, dist(s, i + 1, t, j, d));<br/>\u00a0<br/>            x += 1;<br/>        }<br/>\u00a0<br/>        d[i * (~t + 1) + j] = x;<br/>    }<br/>\u00a0<br/>    x;<br/>}<br/>\u00a0<br/>integer<br/>levenshtein(data s, data t)<br/>{<br/>    list d;<br/>\u00a0<br/>    d.pn_integer(0, (~s + 1) * (~t + 1), -1);<br/>\u00a0<br/>    dist(s, 0, t, 0, d);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    text s1, s2;<br/>\u00a0<br/>    s1 = \"rosettacode\";<br/>    s2 = \"raisethysword\";<br/>\u00a0<br/>    o_form(\"distance between `~' and `~' is ~\\n\", s1, s2, levenshtein(s1, s2));<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AppleScript", "loc": 55, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> dist <span class=\"kw3\">to</span> findLevenshteinDistance for <span class=\"st0\">\"sunday\"</span> <span class=\"kw1\">against</span> <span class=\"st0\">\"saturday\"</span><br/><span class=\"kw3\">to</span> findLevenshteinDistance for s1 <span class=\"kw1\">against</span> s2<br/>    <span class=\"kw3\">script</span> o<br/>        <span class=\"kw3\">property</span> l\u00a0: s1<br/>        <span class=\"kw3\">property</span> m\u00a0: s2<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">if</span> s1 <span class=\"sy0\">=</span> s2 <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">set</span> ll <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> s1<br/>    <span class=\"kw3\">set</span> lm <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> s2<br/>    <span class=\"kw3\">if</span> ll <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> lm<br/>    <span class=\"kw3\">if</span> lm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> ll<br/>\u00a0<br/>    <span class=\"kw3\">set</span> v0 <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"br0\">(</span>lm <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> v0 <span class=\"kw3\">to</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> v0 <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">copy</span> v0 <span class=\"kw3\">to</span> v1<br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> ll<br/>        <span class=\"co1\">-- calculate v1 (current row distances) from the previous row v0</span><br/>\u00a0<br/>        <span class=\"co1\">-- first element of v1 is A[i+1][0]</span><br/>        <span class=\"co1\">--   edit distance is delete (i+1) chars from s to match empty t</span><br/>        <span class=\"kw3\">set</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> v1 <span class=\"kw3\">to</span> i<br/>        <span class=\"co1\">--  use formula to fill in the rest of the row</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lm<br/>            <span class=\"kw3\">if</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> o<span class=\"co2\">'</span>s l <span class=\"sy0\">=</span> <span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> o<span class=\"co2\">'</span>s m <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> cost <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> cost <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">set</span> <span class=\"kw1\">item</span> <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> v1 <span class=\"kw3\">to</span> min3 for <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> v1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">against</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> v0<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">by</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> v0<span class=\"br0\">)</span> <span class=\"sy0\">+</span> cost<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">copy</span> v1 <span class=\"kw3\">to</span> v0<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> <span class=\"kw1\">item</span> <span class=\"br0\">(</span>lm <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> v1<br/><span class=\"kw3\">end</span> findLevenshteinDistance<br/>\u00a0<br/><span class=\"kw3\">to</span> min3 for anInt <span class=\"kw1\">against</span> anOther <span class=\"kw1\">by</span> theThird<br/>    <span class=\"kw3\">if</span> anInt <span class=\"sy0\">&lt;</span> anOther <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> theThird <span class=\"sy0\">&lt;</span> anInt <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">return</span> theThird<br/>        <span class=\"kw3\">else</span><br/>            <span class=\"kw3\">return</span> anInt<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">if</span> theThird <span class=\"sy0\">&lt;</span> anOther <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">return</span> theThird<br/>        <span class=\"kw3\">else</span><br/>            <span class=\"kw3\">return</span> anOther<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min3</pre>"}, {"lang": "Arc", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def levenshtein <span class=\"br0\">(</span>str1 str2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>withs l1  len<span class=\"sy0\">.</span>str1<br/>         l2  len<span class=\"sy0\">.</span>str2<br/>         row range0<span class=\"sy0\">:</span><span class=\"me1\">inc</span><span class=\"sy0\">.</span>l1<br/>\u00a0<br/>    <span class=\"br0\">(</span>times j l2<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> next <span class=\"kw1\">list</span><span class=\"sy0\">.</span>j<br/>        <span class=\"br0\">(</span>times i l1<br/>          <span class=\"br0\">(</span>push<br/>            <span class=\"br0\">(</span>inc<span class=\"sy0\">:</span><span class=\"kw1\">min</span><br/>              <span class=\"kw1\">car</span><span class=\"sy0\">.</span>next<br/>              <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>is str1<span class=\"sy0\">.</span>i str2<span class=\"sy0\">.</span>j<span class=\"br0\">)</span> dec id<span class=\"br0\">)</span> <span class=\"kw1\">car</span><span class=\"sy0\">.</span>row<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">car</span><span class=\"sy0\">:</span><span class=\"me1\">zap</span> <span class=\"kw1\">cdr</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            next<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">=</span> row nrev<span class=\"sy0\">.</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    row<span class=\"sy0\">.</span>l1<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\">levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span> s <span class=\"sy0\">=</span><br/>\t\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> t <span class=\"sy0\">=</span><br/>\t\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">strLen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> levenshtein<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\ta <span class=\"sy0\">:=</span> Levenshtein<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tb <span class=\"sy0\">:=</span> Levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>            <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tc <span class=\"sy0\">:=</span> Levenshtein<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> t           <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span><br/>\t\ta <span class=\"sy0\">:=</span> b<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> c<span class=\"br0\">)</span><br/>\t\ta <span class=\"sy0\">:=</span> c<br/>\t<span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>s1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"kitten\"</span><br/>s2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"sitting\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"distance between \"</span> s1 <span class=\"st0\">\" and \"</span> s2 <span class=\"st0\">\": \"</span> levenshtein<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 46, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    a = <span class=\"st0\">\"kitten\"</span>;<br/>    b = <span class=\"st0\">\"sitting\"</span>;<br/>    d = levenshteinDistance<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>;<br/>    p = d <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"s\"</span>;<br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -&gt;\u00a0%s after\u00a0%d edit%s<span class=\"es0\">\\n</span>\"</span>, a, b, d, p<span class=\"br0\">)</span>;<br/>    exit;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> levenshteinDistance<span class=\"br0\">(</span>s1, s2,<br/>    s1First, s2First, s1Rest, s2Rest,<br/>    distA, distB, distC, minDist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\"># If either string is empty,</span><br/>    <span class=\"co1\"># then distance is insertion of the other's characters.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Rest of process uses first characters </span><br/>    <span class=\"co1\"># and remainder of each string.</span><br/>    s1First = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s1, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    s2First = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s2, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    s1Rest = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s1, <span class=\"nu0\">2</span>, <span class=\"kw4\">length</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    s2Rest = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s2, <span class=\"nu0\">2</span>, <span class=\"kw4\">length</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># If leading characters are the same, </span><br/>    <span class=\"co1\"># then distance is that between the rest of the strings.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1First <span class=\"sy2\">==</span> s2First<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span> levenshteinDistance<span class=\"br0\">(</span>s1Rest, s2Rest<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Find the distances between sub strings.</span><br/>    distA = levenshteinDistance<span class=\"br0\">(</span>s1Rest, s2<span class=\"br0\">)</span>;<br/>    distB = levenshteinDistance<span class=\"br0\">(</span>s1, s2Rest<span class=\"br0\">)</span>;<br/>    distC = levenshteinDistance<span class=\"br0\">(</span>s1Rest, s2Rest<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Return the minimum distance between substrings.    </span><br/>    minDist = distA;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distB <span class=\"sy2\">&lt;</span> minDist<span class=\"br0\">)</span> minDist = distB;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distC <span class=\"sy2\">&lt;</span> minDist<span class=\"br0\">)</span> minDist = distC;<br/>    <span class=\"kw6\">return</span> minDist <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>; <span class=\"co1\"># Include change for the first character.</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 28, "block": "<pre class=\"text highlighted_source\">      PRINT \"'kitten' -&gt; 'sitting' has distance \"\u00a0;<br/>      PRINT\u00a0; FNlevenshtein(\"kitten\", \"sitting\")<br/>      PRINT \"'rosettacode' -&gt; 'raisethysword' has distance \"\u00a0;<br/>      PRINT\u00a0; FNlevenshtein(\"rosettacode\", \"raisethysword\")<br/>      END<br/>\u00a0<br/>      DEF FNlevenshtein(s$, t$)<br/>      LOCAL i%, j%, m%, d%()<br/>      DIM d%(LENs$, LENt$)<br/>      FOR i% = 0 TO DIM(d%(),1)<br/>        d%(i%,0) = i%<br/>      NEXT<br/>      FOR j% = 0 TO DIM(d%(),2)<br/>        d%(0,j%) = j%<br/>      NEXT<br/>      FOR j% = 1 TO DIM(d%(),2)<br/>        FOR i% = 1 TO DIM(d%(),1)<br/>          IF MID$(s$,i%,1) = MID$(t$,j%,1) THEN<br/>            d%(i%,j%) = d%(i%-1,j%-1)<br/>          ELSE<br/>            m% = d%(i%-1,j%-1)<br/>            IF d%(i%,j%-1) &lt; m% m% = d%(i%,j%-1)<br/>            IF d%(i%-1,j%) &lt; m% m% = d%(i%-1,j%)<br/>            d%(i%,j%) = m% + 1<br/>          ENDIF<br/>        NEXT<br/>      NEXT j%<br/>      = d%(i%-1,j%-1)</pre>"}, {"lang": "Bracmat", "loc": 25, "block": "<pre class=\"text highlighted_source\">(levenshtein=<br/>  lev cache<br/>.   ( lev<br/>    =   s s0 s1 t t0 t1 L a b c val key<br/>      .     (cache..find)$(str$!arg:?key):(?.?val)<br/>          &amp;\u00a0!val<br/>        |  \u00a0!arg:(?s,?t)<br/>          &amp; (\u00a0!s:&amp;@(!t:? [?L)<br/>            |\u00a0!t:&amp;@(!s:? [?L)<br/>            )<br/>          &amp; (cache..insert)$(!key.!L)<br/>          &amp;\u00a0!L<br/>        |  \u00a0!arg:(@(?:%?s0\u00a0?s1),@(?:%?t0\u00a0?t1))<br/>          &amp;\u00a0!s0:!t0<br/>          &amp; lev$(!s1,!t1)<br/>        |   lev$(!s1,!t1):?a<br/>          &amp; lev$(!s,!t1):?b<br/>          &amp; lev$(!s1,!t):?c<br/>          &amp; (!b:&lt;!a:?a|)<br/>          &amp; (!c:&lt;!a:?a|)<br/>          &amp; (cache..insert)$(!key.1+!a)<br/>          &amp; 1+!a<br/>    )<br/>  &amp; new$hash:?cache<br/>  &amp; lev$!arg);</pre>"}, {"lang": "C", "loc": 45, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* s, t: two strings; ls, lt: their respective length */</span><br/><span class=\"kw4\">int</span> levenshtein<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> ls<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> lt<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* if either string is empty, difference is inserting all chars <br/>         * from the other<br/>         */</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ls<span class=\"br0\">)</span> <span class=\"kw1\">return</span> lt<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>lt<span class=\"br0\">)</span> <span class=\"kw1\">return</span> ls<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* if last letters are the same, the difference is whatever is<br/>         * required to edit the rest of the strings<br/>         */</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>ls<span class=\"br0\">]</span> <span class=\"sy0\">==</span> t<span class=\"br0\">[</span>ls<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> ls <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> lt <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* else try:<br/>         *      changing last letter of s to that of t; or<br/>         *      remove last letter of s; or<br/>         *      remove last letter of t,<br/>         * any of which is 1 edit plus editing the rest of the strings<br/>         */</span><br/>        a <span class=\"sy0\">=</span> levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> ls <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> lt <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> ls<span class=\"sy0\">,</span>     t<span class=\"sy0\">,</span> lt <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        c <span class=\"sy0\">=</span> levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> ls <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> lt    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span> a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> c<span class=\"br0\">)</span> a <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"distance between `%s' and `%s':\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span><br/>                levenshtein<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 59, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>using namespace std<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Compute Levenshtein Distance</span><br/><span class=\"co1\">// Martin Ettl, 2012-10-05</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> uiLevenshteinDistance<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy0\">::</span><span class=\"me2\">string</span> <span class=\"sy0\">&amp;</span>s1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> std<span class=\"sy0\">::</span><span class=\"me2\">string</span> <span class=\"sy0\">&amp;</span>s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> m<span class=\"br0\">(</span>s1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">(</span>s2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span> m<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">size_t</span> <span class=\"sy0\">*</span>costs <span class=\"sy0\">=</span> new <span class=\"kw4\">size_t</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span> <span class=\"br0\">)</span> costs<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy0\">::</span><span class=\"me2\">string</span><span class=\"sy0\">::</span><span class=\"me2\">const_iterator</span> it1 <span class=\"sy0\">=</span> s1.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> it1 <span class=\"sy0\">!=</span> s1.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>it1<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>i <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    costs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> corner <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy0\">::</span><span class=\"me2\">string</span><span class=\"sy0\">::</span><span class=\"me2\">const_iterator</span> it2 <span class=\"sy0\">=</span> s2.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> it2 <span class=\"sy0\">!=</span> s2.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>it2<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>j <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">size_t</span> upper <span class=\"sy0\">=</span> costs<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>it1 <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>it2 <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>\t\t  costs<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> corner<span class=\"sy0\">;</span><br/>\t  <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span><br/>\t  <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">size_t</span> t<span class=\"br0\">(</span>upper<span class=\"sy0\">&lt;</span>corner<span class=\"sy0\">?</span>upper<span class=\"sy0\">:</span>corner<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        costs<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>t<span class=\"sy0\">?</span>costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">:</span>t<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t  <span class=\"br0\">}</span><br/>\u00a0<br/>      corner <span class=\"sy0\">=</span> upper<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">size_t</span> result <span class=\"sy0\">=</span> costs<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  delete <span class=\"br0\">[</span><span class=\"br0\">]</span> costs<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstring s0 <span class=\"sy0\">=</span> <span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">;</span><br/>        string s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"sy0\">;</span><br/>\tcout <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"distance between \"</span> <span class=\"sy0\">&lt;&lt;</span> s0 <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">&lt;&lt;</span> s1 <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span> <br/>\t     <span class=\"sy0\">&lt;&lt;</span> uiLevenshteinDistance<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span>s1<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">endl</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 50, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> LevenshteinDistance<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> LevenshteinDistance<span class=\"br0\">(</span><span class=\"kw4\">string</span> s, <span class=\"kw4\">string</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> t<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                d<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                d<span class=\"br0\">[</span><span class=\"nu0\">0</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> t<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">//no operation</span><br/>                    <span class=\"kw1\">else</span><br/>                        d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span><br/>                            d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>,    <span class=\"co1\">//a deletion</span><br/>                            d<span class=\"br0\">[</span>i, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,   <span class=\"co1\">//an insertion</span><br/>                            d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">//a substitution</span><br/>                            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>n, m<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} -&gt; {1} = {2}\"</span>,<br/>                    args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, LevenshteinDistance<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage:-<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>LevenshteinDistance &lt;string1&gt; &lt;string2&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 30, "block": "<pre class=\"coffeescript highlighted_source\">levenshtein = <span class=\"br0\">(</span>str1<span class=\"sy0\">,</span> str2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># more of less ported simple algorithm from JS</span><br/>  m = str1.<span class=\"me1\">length</span><br/>  n = str2.<span class=\"me1\">length</span><br/>  d = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> n  <span class=\"kw1\">unless</span> m<br/>  <span class=\"kw1\">return</span> m  <span class=\"kw1\">unless</span> n<br/>\u00a0<br/>  d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"me1\">m</span><span class=\"br0\">]</span><br/>  d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = j <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span>  <br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">m</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">if</span> str1<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw2\">is</span> str2<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = d<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">else</span><br/>        d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Math.<span class=\"me1\">min</span><span class=\"br0\">(</span><br/>          d<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>          d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>          d<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  d<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"stop\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tops\"</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"yo\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"yo\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> levenshtein <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>la  <span class=\"br0\">(</span><span class=\"kw1\">length</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>lb  <span class=\"br0\">(</span><span class=\"kw1\">length</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>rec <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ la<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ lb<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">defun</span> leven <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> x<span class=\"br0\">)</span> y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> y<span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">aref</span> rec x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rec x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rec x y<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>char<span class=\"sy0\">=</span> <span class=\"br0\">(</span>char a <span class=\"br0\">(</span>- la x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>char b <span class=\"br0\">(</span>- lb y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"br0\">(</span>leven <span class=\"br0\">(</span><span class=\"nu0\">1</span>- x<span class=\"br0\">)</span> y<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>leven x <span class=\"br0\">(</span><span class=\"nu0\">1</span>- y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>leven <span class=\"br0\">(</span><span class=\"nu0\">1</span>- x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>leven la lb<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>levenshtein <span class=\"st0\">\"rosettacode\"</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn levenshtein <span class=\"br0\">[</span>str1 str2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len1 <span class=\"br0\">(</span>count str1<span class=\"br0\">)</span><br/>        len2 <span class=\"br0\">(</span>count str2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>zero? len1<span class=\"br0\">)</span> len2<br/>          <span class=\"br0\">(</span>zero? len2<span class=\"br0\">)</span> len1<br/>          <span class=\"sy0\">:</span><span class=\"me1\">else</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>cost <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>first str1<span class=\"br0\">)</span> <span class=\"br0\">(</span>first str2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>levenshtein <span class=\"br0\">(</span>rest str1<span class=\"br0\">)</span> str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>levenshtein str1 <span class=\"br0\">(</span>rest str2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>+ cost<br/>                    <span class=\"br0\">(</span>levenshtein <span class=\"br0\">(</span>rest str1<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest str2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>levenshtein <span class=\"st0\">\"rosettacode\"</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 4, "block": "<pre class=\"text highlighted_source\">require \"levenshtein\"<br/>puts Levenshtein.distance(\"kitten\", \"sitting\")<br/>puts Levenshtein.distance(\"rosettacode\", \"raisethysword\")<br/>\u00a0</pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    levenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 23, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> LevenshteinDistance<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> t <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">,</span> j <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">var</span> d<span class=\"sy1\">:</span><span class=\"sy3\">=</span>new <span class=\"kw4\">Integer</span><span class=\"br0\">[</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">=</span>t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">// no operation</span><br/>         <span class=\"kw1\">else</span> d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>MinInt<span class=\"br0\">(</span>MinInt<span class=\"br0\">(</span><br/>               d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">,</span>    <span class=\"co1\">// a deletion</span><br/>               d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"co1\">// an insertion</span><br/>               d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span><span class=\"nu0\">1</span>    <span class=\"co1\">// a substitution</span><br/>               <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span>d<span class=\"br0\">[</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>LevenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">'kitten'</span><span class=\"sy1\">,</span> <span class=\"st0\">'sitting'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "EchoLisp", "loc": 30, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; Recursive version adapted from Clojure</span><br/><span class=\"co1\">;; Added necessary memoization</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>levenshtein str1 str2 <span class=\"br0\">(</span>cost <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rest1 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rest2 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>key <span class=\"kw1\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> key <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> str1 <span class=\"st0\">\"|\"</span> str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'mem key<span class=\"br0\">)</span> <span class=\"co1\">;; memoized\u00a0?</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">get</span> 'mem key<span class=\"br0\">)</span><br/><span class=\"co1\">;; else memoize</span><br/><span class=\"br0\">(</span><span class=\"kw1\">putprop</span> 'mem <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>len1 <span class=\"br0\">(</span>string-<span class=\"kw1\">length</span> str1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>len2 <span class=\"br0\">(</span>string-<span class=\"kw1\">length</span> str2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>zero? len1<span class=\"br0\">)</span> len2<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span>zero? len2<span class=\"br0\">)</span> len1<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>else<br/>          <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> cost <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>string-first str1<span class=\"br0\">)</span> <span class=\"br0\">(</span>string-first str2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> rest1 <span class=\"br0\">(</span>string-rest str1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> rest2 <span class=\"br0\">(</span>string-rest str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>levenshtein rest1 str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>levenshtein str1 rest2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>+ cost<br/>                    <span class=\"br0\">(</span>levenshtein rest1 rest2 <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; \ud83d\ude1b 127 calls with memoization</span><br/><span class=\"co1\">;; \ud83d\ude30 29737 calls without memoization</span><br/><span class=\"br0\">(</span>levenshtein <span class=\"st0\">\"kitten\"</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"br0\">(</span>levenshtein <span class=\"st0\">\"rosettacode\"</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">8</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 5, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>levenshtein s1 s2 = last &lt;| foldl transform [0 .. length s1] s2  <br/>            where transform (n::ns')@ns c = scanl calc (n+1) &lt;| zip3 s1 ns ns'<br/>                        where calc z (c', x, y) = minimum [y+1, z+1, x + toInt (c' &lt;&gt; c)]</pre>"}, {"lang": "Elixir", "loc": 28, "block": "<pre class=\"text highlighted_source\">defmodule Levenshtein do<br/>  def distance(a, b) do<br/>    ta = String.downcase(a) |&gt; to_char_list |&gt; List.to_tuple<br/>    tb = String.downcase(b) |&gt; to_char_list |&gt; List.to_tuple<br/>    m = tuple_size(ta)<br/>    n = tuple_size(tb)<br/>    costs = Enum.reduce(0..m,\u00a0%{},   fn i,acc -&gt; Map.put(acc, {i,0}, i) end)<br/>    costs = Enum.reduce(0..n, costs, fn j,acc -&gt; Map.put(acc, {0,j}, j) end)<br/>    Enum.reduce(0..n-1, costs, fn j, acc -&gt;<br/>      Enum.reduce(0..m-1, acc, fn i, map -&gt;<br/>        d = if elem(ta, i) == elem(tb, j) do<br/>              map[ {i,j} ]<br/>            else<br/>              Enum.min([ map[ {i  , j+1} ] + 1,         # deletion<br/>                         map[ {i+1, j  } ] + 1,         # insertion<br/>                         map[ {i  , j  } ] + 1 ])       # substitution<br/>            end<br/>        Map.put(map, {i+1, j+1}, d)<br/>      end)<br/>    end)<br/>    |&gt; Map.get({m,n})<br/>  end<br/>end<br/>\u00a0<br/>words = ~w(kitten sitting saturday sunday rosettacode raisethysword)<br/>Enum.each(Enum.chunk(words, 2), fn [a,b] -&gt;<br/>  IO.puts \"distance(#{a}, #{b}) = #{Levenshtein.distance(a,b)}\"<br/>end)</pre>"}, {"lang": "Erlang", "loc": 37, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>levenshtein<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">distance_cached</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">L</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">distance</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|S<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_SH</span>|ST<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">_TH</span>|TT<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">min</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">TT</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">ST</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">ST</span><span class=\"sy1\">,</span><span class=\"re5\">TT</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|S<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_SH</span>|ST<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">_TH</span>|TT<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">is_key</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">L1</span><span class=\"sy1\">,</span><span class=\"re5\">C1</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">TT</span><span class=\"sy1\">,</span><span class=\"re5\">Cache</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">L2</span><span class=\"sy1\">,</span><span class=\"re5\">C2</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">ST</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">C1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">L3</span><span class=\"sy1\">,</span><span class=\"re5\">C3</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">ld</span><span class=\"br0\">(</span><span class=\"re5\">ST</span><span class=\"sy1\">,</span><span class=\"re5\">TT</span><span class=\"sy1\">,</span><span class=\"re5\">C2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy3\">+</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">min</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">L1</span><span class=\"sy1\">,</span><span class=\"re5\">L2</span><span class=\"sy1\">,</span><span class=\"re5\">L3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">C3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM LEVENSHTEIN<br/>\u00a0<br/>!$DYNAMIC<br/>  DIM D%[0,0]<br/>\u00a0<br/>PROCEDURE LEVENSHTEIN(S$,T$-&gt;RES%)<br/>      LOCAL I%,J%,M%<br/>      FOR I%=0 TO LEN(S$) DO<br/>        D%[I%,0]=I%<br/>      END FOR<br/>      FOR J%=0 TO LEN(T$) DO<br/>        D%[0,J%]=J%<br/>      END FOR<br/>      FOR J%=1 TO LEN(T$) DO<br/>        FOR I%=1 TO LEN(S$) DO<br/>          IF MID$(S$,I%,1)=MID$(T$,J%,1) THEN<br/>            D%[I%,J%]=D%[I%-1,J%-1]<br/>          ELSE<br/>            M%=D%[I%-1,J%-1]<br/>            IF D%[I%,J%-1]&lt;M% THEN M%=D%[I%,J%-1] END IF<br/>            IF D%[I%-1,J%]&lt;M% THEN M%=D%[I%-1,J%] END IF<br/>            D%[I%,J%]=M%+1<br/>          END IF<br/>        END FOR<br/>      END FOR<br/>      RES%=D%[I%-1,J%-1]<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   S$=\"kitten\"  T$=\"sitting\"<br/>   PRINT(\"'\";S$;\"' -&gt; '\";T$;\"' has distance \";)<br/>  \u00a0!$DIM D%[LEN(S$),LEN(T$)]<br/>   LEVENSHTEIN(S$,T$-&gt;RES%)<br/>   PRINT(RES%)<br/>  \u00a0!$ERASE D%<br/>\u00a0<br/>   S$=\"rosettacode\" T$=\"raisethysword\"<br/>   PRINT(\"'\";S$;\"' -&gt; '\";T$;\"' has distance \";)<br/>  \u00a0!$DIM D%[LEN(S$),LEN(T$)]<br/>   LEVENSHTEIN(S$,T$-&gt;RES%)<br/>   PRINT(RES%)<br/>  \u00a0!$ERASE D%<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 47, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> min<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> m<br/>    m <span class=\"sy1\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt; m <span class=\"kw1\">then</span><br/>            m <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> levenshtein<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s1<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> s2<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> m<br/>    <span class=\"kw2\">sequence</span> d<br/>    n <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>    m <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>  <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> m<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elsif</span> m <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    d <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span> m<span class=\"br0\">)</span><span class=\"sy2\">,</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>        d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> j<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>            d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> min<span class=\"br0\">(</span><span class=\"br0\">{</span><br/>                d<span class=\"br0\">[</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span><br/>                d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span><br/>                d<span class=\"br0\">[</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>s1<span class=\"br0\">[</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0!<span class=\"sy1\">=</span> s2<span class=\"br0\">[</span>j<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 34, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> getInput <span class=\"br0\">(</span>name\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    Console.<span class=\"me1\">Write</span> <span class=\"br0\">(</span><span class=\"st0\">\"String {0}: \"</span>, name<span class=\"br0\">)</span><br/>    Console.<span class=\"me1\">ReadLine</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> levDist <span class=\"br0\">(</span>strOne\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>strTwo\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> strOne <span class=\"sy0\">=</span> strOne.<span class=\"me1\">ToCharArray</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> strTwo <span class=\"sy0\">=</span> strTwo.<span class=\"me1\">ToCharArray</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>distArray\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">zeroCreate</span> <span class=\"br0\">(</span>strOne.<span class=\"me1\">Length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>strTwo.<span class=\"me1\">Length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> strOne.<span class=\"me1\">Length</span> <span class=\"kw1\">do</span> distArray.<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> i<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> strTwo.<span class=\"me1\">Length</span> <span class=\"kw1\">do</span> distArray.<span class=\"br0\">[</span><span class=\"nu0\">0</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> j<br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> strTwo.<span class=\"me1\">Length</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> strOne.<span class=\"me1\">Length</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> strOne.<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> strTwo.<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> distArray.<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> distArray.<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">else</span><br/>                distArray.<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"kw3\">min</span> <span class=\"br0\">(</span><br/>                    <span class=\"br0\">[</span>distArray.<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>                    distArray.<span class=\"br0\">[</span>i, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>                    distArray.<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">)</span><br/>    distArray.<span class=\"br0\">[</span>strOne.<span class=\"me1\">Length</span>, strTwo.<span class=\"me1\">Length</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> stringOne <span class=\"sy0\">=</span> getInput <span class=\"st0\">\"One\"</span><br/><span class=\"kw1\">let</span> stringTwo <span class=\"sy0\">=</span> getInput <span class=\"st0\">\"Two\"</span><br/>printf <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>levDist stringOne stringTwo<span class=\"br0\">)</span><br/>\u00a0<br/>Console.<span class=\"me1\">ReadKey</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: lcs prettyprint\u00a0;<br/>\"kitten\" \"sitting\" levenshtein .</pre>"}, {"lang": "Forth", "loc": 23, "block": "<pre class=\"text highlighted_source\">: levenshtein                          ( a1 n1 a2 n2 -- n3)<br/>  dup                                  \\ if either string is empty, difference<br/>  if                                   \\ is inserting all chars from the other<br/>    2&gt;r dup<br/>    if<br/>      2dup 1- chars + <a class=\"__cf_email__\" data-cfemail=\"325172\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <a class=\"__cf_email__\" data-cfemail=\"497b3b09\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1- chars + <a class=\"__cf_email__\" data-cfemail=\"5d3e1d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =<br/>      if<br/>        1- 2r&gt; 1- recurse exit<br/>      else                             \\ else try:<br/>        2dup 1- <a class=\"__cf_email__\" data-cfemail=\"291b5b69\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1- recurse -rot    \\   changing first letter of s to t;<br/>        2dup    <a class=\"__cf_email__\" data-cfemail=\"85b7f7c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1- recurse -rot    \\   remove first letter of s;<br/>        1- 2r&gt; recurse min min 1+      \\   remove first letter of t,<br/>      then                             \\ any of which is 1 edit plus <br/>    else                               \\ editing the rest of the strings<br/>      2drop 2r&gt; nip<br/>    then<br/>  else<br/>    2drop nip<br/>  then<br/>;<br/>\u00a0<br/>s\" kitten\"      s\" sitting\"       levenshtein . cr<br/>s\" rosettacode\" s\" raisethysword\" levenshtein . cr</pre>"}, {"lang": "FreeBASIC", "loc": 49, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Uses the \"iterative with two matrix rows\" algorithm </span><br/><span class=\"co1\">' referred to in the Wikipedia article.</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> min<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>   <span class=\"kw1\">Return</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>x &lt; y, x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> levenshtein<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, t <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"co1\">' degenerate cases</span><br/>    <span class=\"kw1\">If</span> s = t <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> t = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' create two integer arrays of distances</span><br/>    <span class=\"kw1\">Dim</span> v0<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <span class=\"co1\">'' previous</span><br/>    <span class=\"kw1\">Dim</span> v1<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <span class=\"co1\">'' current</span><br/>\u00a0<br/>    <span class=\"co1\">' initialize v0</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>      v0<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = i<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> cost <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      <span class=\"co1\">' calculate v1 from v0</span><br/>      v1<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = i + <span class=\"nu0\">1</span><br/>\u00a0<br/>      <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>        cost = <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = t<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        v1<span class=\"br0\">(</span>j + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = min<span class=\"br0\">(</span>v1<span class=\"br0\">(</span>j<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, min<span class=\"br0\">(</span>v0<span class=\"br0\">(</span>j + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, v0<span class=\"br0\">(</span>j<span class=\"br0\">)</span> + cost<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span> j<br/>\u00a0<br/>      <span class=\"co1\">' copy v1 to v0 for next iteration</span><br/>      <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>        v0<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = v1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span>  j<br/>    <span class=\"kw1\">Next</span> i <br/>\u00a0<br/>    <span class=\"kw1\">Return</span> v1<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"'kitten' to 'sitting'            =&gt; \"</span>; levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"'rosettacode' to 'raisethysword' =&gt; \"</span>; levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span>, <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"'sleep' to 'fleeting'            =&gt; \"</span>; levenshtein<span class=\"br0\">(</span><span class=\"st0\">\"sleep\"</span>, <span class=\"st0\">\"fleeting\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">println[editDistance[\"kitten\",\"sitting\"]]</pre>"}, {"lang": "FutureBasic", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn LevenshteinDistance( aStr as Str255, bStr as Str255 ) as long<br/>dim as long m, n, i, j, min, k, l<br/>dim as long distance( 255, 255 )<br/>\u00a0<br/>m = len(aStr) <br/>n = len(bStr)<br/>\u00a0<br/>for i = 0 to m<br/>   distance( i, 0 ) = i<br/>next<br/>\u00a0<br/>for j = 0 to n<br/>   distance( 0, j ) = j<br/>next<br/>\u00a0<br/>for j = 1 to n<br/>   for i = 1 to m<br/>      if mid$( aStr, i, 1 ) == mid$( bStr, j, 1 )<br/>         distance( i, j ) = distance( i-1, j-1 )<br/>      else<br/>         min = distance( i-1, j   ) + 1<br/>         k   = distance( i, j - 1 ) + 1<br/>         l   = distance( i-1, j-1 ) + 1<br/>         if k &lt; min then min = k<br/>         if l &lt; min then min = l<br/>         distance( i, j ) = min<br/>     end if<br/>   next<br/>next<br/>end fn = distance( m, n )<br/>\u00a0<br/>dim as long i<br/>dim as Str255 testStr( 5, 2 )<br/>\u00a0<br/>testStr( 0, 0 ) = \"kitten\"     \u00a0: testStr( 0, 1 ) = \"sitting\"<br/>testStr( 1, 0 ) = \"rosettacode\"\u00a0: testStr( 1, 1 ) = \"raisethysword\"<br/>testStr( 2, 0 ) = \"Saturday\"   \u00a0: testStr( 2, 1 ) = \"Sunday\"<br/>testStr( 3, 0 ) = \"FutureBasic\"\u00a0: testStr( 3, 1 ) = \"FutureBasic\"<br/>testStr( 4, 0 ) = \"here's a bunch of words\"<br/>testStr( 4, 1 ) = \"to wring out this code\"<br/>\u00a0<br/>for i = 0 to 4<br/>   print \"1st string = \"; testStr( i, 0 )<br/>   print \"2nd string = \"; testStr( i, 1 )<br/>   print \"Levenshtein distance =\"; fn LevenshteinDistance( testStr( i, 0 ), testStr( i, 1 ) )<br/>   print<br/>next<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 38, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>ld<span class=\"sy1\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ld<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> t <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    d <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> j<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> t<span class=\"sy1\">[</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                min <span class=\"sy2\">:=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span><br/>                <span class=\"kw1\">if</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> &lt; min <span class=\"sy1\">{</span><br/>                    min <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> &lt; min <span class=\"sy1\">{</span><br/>                    min <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>                <span class=\"sy1\">}</span><br/>                d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> min <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> d<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)][</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">)]</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 19, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> distance<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> str1, <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> str2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dist <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">[</span>str1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>str2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">str1</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> dist<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> it <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">str2</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> dist<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">=</span> it <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">str1</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">str2</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> j <span class=\"sy0\">-&gt;</span><br/>            dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>dist<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, dist<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>str1<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> str2<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20min\"><span class=\"kw5\">min</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> dist<span class=\"br0\">[</span>str1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>str2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"st0\">'kitten'</span>, <span class=\"st0\">'sitting'</span><span class=\"br0\">]</span>: <span class=\"nu0\">3</span>,<br/>  <span class=\"br0\">[</span><span class=\"st0\">'rosettacode'</span>, <span class=\"st0\">'raisethysword'</span><span class=\"br0\">]</span>: <span class=\"nu0\">8</span>,<br/>  <span class=\"br0\">[</span><span class=\"st0\">'edocattesor'</span>, <span class=\"st0\">'drowsyhtesiar'</span><span class=\"br0\">]</span>: <span class=\"nu0\">8</span> <span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> key, dist <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Checking distance(${key[0]}, ${key[1]}) == $dist\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> distance<span class=\"br0\">(</span>key<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, key<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> dist<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">levenshtein <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>levenshtein s1 s2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> transform <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s1<span class=\"br0\">]</span> s2<br/>  <span class=\"kw1\">where</span><br/>    transform ns<span class=\"sy0\">@</span><span class=\"br0\">(</span>n:ns1<span class=\"br0\">)</span> c <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl\"><span class=\"kw3\">scanl</span></a> calc <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip3\"><span class=\"kw3\">zip3</span></a> s1 ns ns1<br/>      <span class=\"kw1\">where</span><br/>        calc z <span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minimum\"><span class=\"kw3\">minimum</span></a> <span class=\"br0\">[</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> z <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> <span class=\"br0\">(</span>c1 <span class=\"sy0\">/=</span> c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>levenshtein <span class=\"st0\">\"kitten\"</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 21, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> process<span class=\"br0\">(</span><span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> process<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">?</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">fail</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span><span class=\"sy0\">,</span>s1<span class=\"sy0\">,</span><span class=\"st0\">\"' -&gt; '\"</span><span class=\"sy0\">,</span>s2<span class=\"sy0\">,</span><span class=\"st0\">\"' = \"</span><span class=\"sy0\">,</span> levenshtein<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">*</span>t<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">*</span>s<br/>\u00a0<br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>d <span class=\"sy0\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> max<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span> <span class=\"kw1\">do</span> d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<br/>    <span class=\"kw1\">every</span> d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">,</span> s_i <span class=\"sy0\">:=</span> s<span class=\"br0\">[</span>iM1 <span class=\"sy0\">:=</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> m<span class=\"br0\">]</span> <span class=\"sy0\">:=</span><br/>             min<span class=\"br0\">(</span>d<span class=\"br0\">[</span>iM1<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>jM1<span class=\"sy0\">:=</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 d<span class=\"br0\">[</span>iM1<span class=\"sy0\">,</span>jM1<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"kw1\">if</span> s_i <span class=\"sy0\">==</span> t<span class=\"br0\">[</span>jM1<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 6, "block": "<pre class=\"text highlighted_source\">Io 20110905<br/>Io&gt; Range\u00a0; \"kitten\" levenshtein(\"sitting\")<br/>==&gt; 3<br/>Io&gt; \"rosettacode\" levenshtein(\"raisethysword\")<br/>==&gt; 8<br/>Io&gt; </pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">levenshtein=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  D=. <span class=\"kw2\">x</span> +/&amp;i.&amp;&gt;:&amp;# <span class=\"kw2\">y</span><br/>  <span class=\"re0\">for_i.</span><span class=\"nu0\">1</span>+i.#<span class=\"kw2\">x</span> <span class=\"kw1\">do.</span><br/>    <span class=\"re0\">for_j.</span><span class=\"nu0\">1</span>+i.#<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>      <span class=\"kw1\">if.</span> <span class=\"sy0\">((</span>&lt;:i<span class=\"sy0\">)</span>{<span class=\"kw2\">x</span><span class=\"sy0\">)</span>=<span class=\"sy0\">(</span>&lt;:j<span class=\"sy0\">)</span>{<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>        D=.<span class=\"sy0\">(</span>D {~&lt;&lt;:i,j<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>&lt;i,j<span class=\"sy0\">)</span>} D<br/>      <span class=\"kw1\">else.</span><br/>        min=. <span class=\"nu0\">1</span>+&lt;./D{~<span class=\"sy0\">(</span>i,j<span class=\"sy0\">)</span> &lt;@:-\"<span class=\"nu0\">1</span>#:<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/>        D=. min <span class=\"sy0\">(</span>&lt;i,j<span class=\"sy0\">)</span>} D<br/>      <span class=\"kw1\">end.</span><br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  {:{:D<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 28, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Levenshtein <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> distance<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        a <span class=\"sy0\">=</span> a.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> b.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// i == 0</span><br/>        <span class=\"kw4\">int</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> costs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span> <span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> costs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> a.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// j == 0; nw = lev(i - 1, j)</span><br/>            costs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> nw <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> b.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> cj <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, costs<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, a.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> b.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> nw <span class=\"sy0\">:</span> nw <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                nw <span class=\"sy0\">=</span> costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cj<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> costs<span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span>, <span class=\"st0\">\"saturday\"</span>, <span class=\"st0\">\"sunday\"</span>, <span class=\"st0\">\"rosettacode\"</span>, <span class=\"st0\">\"raisethysword\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> data.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"distance(\"</span> <span class=\"sy0\">+</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> data<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\") = \"</span> <span class=\"sy0\">+</span> distance<span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, data<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 31, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> levenshtein<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> t <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> u<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> m <span class=\"sy0\">=</span> a.<span class=\"me1\">length</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> b.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      u<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> b<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> t<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> u<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> t <span class=\"sy0\">=</span> u<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">return</span> u<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// tests</span><br/><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'yo'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">'yo'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'yo'</span><span class=\"sy0\">,</span> <span class=\"st0\">'yo'</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'tier'</span><span class=\"sy0\">,</span> <span class=\"st0\">'tor'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'saturday'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sunday'</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'mist'</span><span class=\"sy0\">,</span> <span class=\"st0\">'dist'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'tier'</span><span class=\"sy0\">,</span> <span class=\"st0\">'tor'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'kitten'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sitting'</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'stop'</span><span class=\"sy0\">,</span> <span class=\"st0\">'tops'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'rosettacode'</span><span class=\"sy0\">,</span> <span class=\"st0\">'raisethysword'</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">'mississippi'</span><span class=\"sy0\">,</span> <span class=\"st0\">'swiss miss'</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> levenshtein<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">!==</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'levenstein(\"'</span> <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> <span class=\"st0\">'\",\"'</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"st0\">'\") was '</span> <span class=\"sy0\">+</span> d <span class=\"sy0\">+</span> <span class=\"st0\">' should be '</span> <span class=\"sy0\">+</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>  9ms overhead (invoking jq and compiling the program)\n 17ms for kitten/sitting\n 67ms for rosettacode/raisethysword\n 71ms for edocattesor/drowsyhtesiar\n</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function levendist(s::AbstractString, t::AbstractString)<br/>    ls, lt = length(s), length(t)<br/>    ls == 0 &amp;&amp; return lt<br/>    lt == 0 &amp;&amp; return ls<br/>\u00a0<br/>    s\u2081, t\u2081 = s[2:end], t[2:end]<br/>    ld\u2081 = levendist(s\u2081, t\u2081)<br/>    if s[1] == t[1]<br/>        return ld\u2081<br/>    else<br/>        return 1 + min(ld\u2081, levendist(s, t\u2081), levendist(s\u2081, t))<br/>    end<br/>end<br/>\u00a0<br/>@show levendist(\"kitten\", \"sitting\") # 3<br/>@show levendist(\"rosettacode\", \"raisethysword\") # 8</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"co1\">// Uses the \"iterative with two matrix rows\" algorithm referred to in the Wikipedia article.</span><br/>\u00a0<br/>fun levenshtein<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, t<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <span class=\"co1\">// degenerate cases</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> t<span class=\"br0\">)</span>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> t.<span class=\"me1\">length</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>t <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s.<span class=\"me1\">length</span><br/>\u00a0<br/>    <span class=\"co1\">// create two integer arrays of distances and initialize the first one</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v0 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>t.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span>  <span class=\"co1\">// previous</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v1 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>t.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>         <span class=\"co1\">// current</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cost<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until s.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// calculate v1 from v0</span><br/>        v1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until t.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            cost <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span><br/>            v1<span class=\"br0\">[</span>j + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>v1<span class=\"br0\">[</span>j<span class=\"br0\">]</span> + <span class=\"nu0\">1</span>, Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>v0<span class=\"br0\">[</span>j + <span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span>, v0<span class=\"br0\">[</span>j<span class=\"br0\">]</span> + cost<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// copy v1 to v0 for next iteration</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> .. <span class=\"me1\">t</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> v0<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v1<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> v1<span class=\"br0\">[</span>t.<span class=\"me1\">length</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'kitten' to 'sitting'            =&gt; ${levenshtein(\"</span>kitten<span class=\"st0\">\", \"</span>sitting<span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'rosettacode' to 'raisethysword' =&gt; ${levenshtein(\"</span>rosettacode<span class=\"st0\">\", \"</span>raisethysword<span class=\"st0\">\")}\"</span><span class=\"br0\">)</span> <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'sleep' to 'fleeting'            =&gt; ${levenshtein(\"</span>sleep<span class=\"st0\">\", \"</span>fleeting<span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 15, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> levenshtein-simple<br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>'<span class=\"br0\">(</span><span class=\"br0\">)</span> str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>str '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">cons</span> a str1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> b str2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>levenshtein-simple str1 str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> _ str1-tail<span class=\"br0\">)</span> str1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> _ str2-tail<span class=\"br0\">)</span> str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"kw1\">min</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>           <span class=\"br0\">(</span>levenshtein-simple str1 str2-tail<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>levenshtein-simple str1-tail str2<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>levenshtein-simple str1-tail str2-tail<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 46, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'Levenshtein Distance translated by Brandon Parker</span><br/><span class=\"co1\">'08/19/10</span><br/><span class=\"co1\">'from http://www.merriampark.com/ld.htm#VB</span><br/><span class=\"co1\">'No credit was given to the Visual Basic Author on the site\u00a0:-(</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> LevenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"co1\">'Get the minum of three values</span><br/><span class=\"kw1\">Function</span> Minimum<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>    Minimum <span class=\"sy0\">=</span> <span class=\"kw2\">Min</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw2\">Min</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Compute the Levenshtein Distance</span><br/><span class=\"kw1\">Function</span> LevenshteinDistance<span class=\"br0\">(</span>string1$<span class=\"sy0\">,</span> string2$<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>string1$<span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>string2$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        LevenshteinDistance <span class=\"sy0\">=</span> m<br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        LevenshteinDistance <span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Dim</span> d<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>        d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m<br/>        d<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        si$ <span class=\"sy0\">=</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>string1$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<br/>            tj$ <span class=\"sy0\">=</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>string2$<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> si$ <span class=\"sy0\">=</span> tj$ <span class=\"kw1\">Then</span><br/>                cost <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">Else</span><br/>                cost <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> ii<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Minimum<span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> ii<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> ii <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>d<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> ii <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> cost<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span> ii<br/>    <span class=\"kw1\">Next</span> i<br/>    LevenshteinDistance <span class=\"sy0\">=</span> d<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> </pre>"}, {"lang": "Limbo", "loc": 48, "block": "<pre class=\"text highlighted_source\">implement Levenshtein;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>\tprint: import sys;<br/>include \"draw.m\";<br/>\u00a0<br/>\u00a0<br/>Levenshtein: module {<br/>\tinit: fn(nil: ref Draw-&gt;Context, args: list of string);<br/>\t# Export distance so that this module can be used as either a<br/>\t# standalone program or as a library:<br/>\tdistance: fn(s, t: string): int;<br/>};<br/>\u00a0<br/>init(nil: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\tif(!(len args\u00a0% 2)) {<br/>\t\tsys-&gt;fprint(sys-&gt;fildes(2), \"Provide an even number of arguments!\\n\");<br/>\t\traise \"fail:usage\";<br/>\t}<br/>\targs = tl args;<br/>\u00a0<br/>\twhile(args\u00a0!= nil) {<br/>\t\t(s, t)\u00a0:= (hd args, hd tl args);<br/>\t\targs = tl tl args;<br/>\t\tprint(\"%s &lt;-&gt;\u00a0%s =&gt;\u00a0%d\\n\", s, t, distance(s, t));<br/>\t}<br/>}<br/>\u00a0<br/>distance(s, t: string): int<br/>{<br/>\tif(s == \"\")<br/>\t\treturn len t;<br/>\tif(t == \"\")<br/>\t\treturn len s;<br/>\tif(s[0] == t[0])<br/>\t\treturn distance(s[1:], t[1:]);<br/>\ta\u00a0:= distance(s[1:], t);<br/>\tb\u00a0:= distance(s, t[1:]);<br/>\tc\u00a0:= distance(s[1:], t[1:]);<br/>\tif(a &gt; b)<br/>\t\ta = b;<br/>\tif(a &gt; c)<br/>\t\ta = c;<br/>\treturn a + 1;<br/>}<br/>\u00a0</pre>"}, {"lang": "LiveCode", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//Code By Neurox66<br/>function Levenshtein pString1 pString2 <br/>   put 0 into tPosChar1<br/>   repeat for each char tChar1 in pString1 <br/>      add 1 to tPosChar1<br/>      put tPosChar1 into tDistance[tPosChar1][0]  <br/>      put 0 into tPosChar2<br/>      repeat for each char tChar2 in pString2 <br/>         add 1 to tPosChar2<br/>         put tPosChar2 into tDistance[0][tPosChar2]  <br/>         put 1 into tCost<br/>         if tChar1 = tChar2 then <br/>            put 0 into tCost <br/>         end if<br/>         put min((tDistance[tPosChar1-1][tPosChar2] + 1),(tDistance[tPosChar1][tPosChar2-1] + 1),(tDistance[tPosChar1-1][tPosChar2-1] + tCost)) into tDistance[tPosChar1][tPosChar2] <br/>      end repeat  <br/>   end repeat  <br/>   return tDistance[tPosChar1][tPosChar2]  <br/>end Levenshtein<br/>\u00a0<br/>\u00a0<br/>put Levenshtein(\"kitten\",\"sitting\") <br/>put Levenshtein(\"rosettacode\",\"raisethysword\")<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 20, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> leven<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> s <span class=\"sy0\">==</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> t<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> t <span class=\"sy0\">==</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> s<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> s1 <span class=\"sy0\">=</span> s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t1 <span class=\"sy0\">=</span> t<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> t<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> leven<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> t1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.min</span><span class=\"br0\">(</span><br/>        leven<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> t1<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        leven<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>  t1<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        leven<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> t <span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>leven<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>leven<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; with(StringTools):<br/>&gt; Levenshtein(\"kitten\",\"sitting\");<br/>                                   3<br/>\u00a0<br/>&gt; Levenshtein(\"rosettacode\",\"raisethysword\");<br/>                                   8<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">EditDistance[\"kitten\",\"sitting\"]<br/>-&gt;3<br/>EditDistance[\"rosettacode\",\"raisethysword\"]<br/>-&gt;8</pre>"}, {"lang": "MATLAB", "loc": 32, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> score = levenshtein<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span><br/><span class=\"co1\">% score = levenshtein(s1, s2)</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% Calculates the area under the ROC for a given set</span><br/><span class=\"co1\">% of posterior predictions and labels. Currently limited to two classes.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% s1: string</span><br/><span class=\"co1\">% s2: string</span><br/><span class=\"co1\">% score: levenshtein distance</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% Author: Ben Hamner (<a class=\"__cf_email__\" data-cfemail=\"2f4d4a416f4d4a41474e42414a5d014c4042\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</span><br/><span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> &lt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>score = levenshtein<span class=\"br0\">(</span>s2, s1<span class=\"br0\">)</span>;<br/><span class=\"kw1\">elseif</span> isempty<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>score = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>;<br/><span class=\"kw1\">else</span><br/>previous_row = <span class=\"nu0\">0</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>=<span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>current_row = <span class=\"nu0\">0</span>*previous_row;<br/>current_row<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>;<br/><span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>=<span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>insertions = previous_row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>deletions = current_row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>substitutions = previous_row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span> + <span class=\"br0\">(</span>s1<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span> ~= s2<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>current_row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>insertions, deletions, substitutions<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span><br/>previous_row = current_row;<br/><span class=\"kw1\">end</span><br/>score = current_row<span class=\"br0\">(</span><span class=\"kw1\">end</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 53, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>n = <span class=\"nu0\">0</span><br/>w = <span class=\"st0\">''</span><br/>n = n + <span class=\"nu0\">1</span>; w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = n; w<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"kitten sitting\"</span><br/>n = n + <span class=\"nu0\">1</span>; w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = n; w<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"rosettacode raisethysword\"</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> n = <span class=\"nu0\">1</span> to w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">say</span> w<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"-&gt;\"</span> w<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">\":\"</span> levenshteinDistance<span class=\"br0\">(</span>w<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, w<span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> n<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method levenshteinDistance<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  s = s.<span class=\"kw6\">lower</span><br/>  t = t.<span class=\"kw6\">lower</span><br/>\u00a0<br/>  m = s.<span class=\"me0\">length</span><br/>  n = t.<span class=\"me0\">length</span><br/>\u00a0<br/>  <span class=\"co1\">-- for all i and j, d[i,j] will hold the Levenshtein distance between</span><br/>  <span class=\"co1\">-- the first i characters of s and the first j characters of t;</span><br/>  <span class=\"co1\">-- note that d has (m+1)x(n+1) values</span><br/>  d = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"co1\">-- source prefixes can be transformed into empty string by</span><br/>  <span class=\"co1\">-- dropping all characters (Note, ooRexx arrays are 1-based)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">2</span> to m + <span class=\"nu0\">1</span><br/>    d<span class=\"br0\">[</span>i, <span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">end</span> i<br/>\u00a0<br/>  <span class=\"co1\">-- target prefixes can be reached from empty source prefix</span><br/>  <span class=\"co1\">-- by inserting every characters</span><br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> to n + <span class=\"nu0\">1</span><br/>    d<span class=\"br0\">[</span><span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">end</span> j<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> to n + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> i = <span class=\"nu0\">2</span> to m + <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> s.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> == t.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>j - <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j - <span class=\"nu0\">1</span><span class=\"br0\">]</span>   <span class=\"co1\">-- no operation required</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>        d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> =                 -<br/>          <span class=\"br0\">(</span>d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"kw6\">min</span><span class=\"br0\">(</span>  - <span class=\"co1\">-- a deletion</span><br/>          <span class=\"br0\">(</span>d<span class=\"br0\">[</span>i, j - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">min</span><span class=\"br0\">(</span> - <span class=\"co1\">-- an insertion</span><br/>          <span class=\"br0\">(</span>d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">-- a substitution</span><br/>        <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> i<br/>  <span class=\"kw3\">end</span> j<br/>\u00a0<br/>  <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>m + <span class=\"nu0\">1</span>, n + <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">import sequtils<br/>\u00a0<br/>proc levenshteinDistance(s1, s2): int =<br/>  var (s1, s2) = (s1, s2)<br/>\u00a0<br/>  if s1.len &gt; s2.len:<br/>    swap s1, s2<br/>\u00a0<br/>  var distances = toSeq(0..s1.len)<br/>\u00a0<br/>  for i2, c2 in s2:<br/>    var newDistances = @[i2+1]<br/>    for i1, c1 in s1:<br/>      if c1 == c2:<br/>        newDistances.add(distances[i1])<br/>      else:<br/>        newDistances.add(1 + min(distances[i1], distances[i1+1],<br/>                                 newDistances[newDistances.high]))<br/>\u00a0<br/>    distances = newDistances<br/>  result = distances[distances.high]<br/>\u00a0<br/>echo levenshteinDistance(\"kitten\",\"sitting\")<br/>echo levenshteinDistance(\"rosettacode\",\"raisethysword\")</pre>"}, {"lang": "Objeck", "loc": 34, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Levenshtein <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>args<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">:=</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> t <span class=\"sy0\">:=</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> d <span class=\"sy0\">:=</span> Distance<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"{$s} -&gt; {$t} = {$d}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> Distance<span class=\"br0\">(</span>s <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span>t <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    d <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span>s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> t<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> j<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> t<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>          d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">-&gt;</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">-&gt;</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 35, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>levenshteinDistance<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>levenshteinDistanceToString<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"kw4\">string</span>;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>levenshteinDistance<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>levenshteinDistanceToString<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"kw4\">string</span> <span class=\"br0\">{</span><br/>    NSUInteger sl <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self length<span class=\"br0\">]</span>;<br/>    NSUInteger tl <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">string</span> length<span class=\"br0\">]</span>;<br/>    NSUInteger <span class=\"sy0\">*</span>d <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>d<span class=\"br0\">)</span>, <span class=\"br0\">(</span>sl<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>tl<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">#define d(i, j) d[((j) * sl) + (i)]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt;<span class=\"sy0\">=</span> sl; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d<span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; j &lt;<span class=\"sy0\">=</span> tl; j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d<span class=\"br0\">(</span><span class=\"nu0\">0</span>, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> j;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; j &lt;<span class=\"sy0\">=</span> tl; j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i &lt;<span class=\"sy0\">=</span> sl; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>self characterAtIndex<span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"kw4\">string</span> characterAtIndex<span class=\"sy0\">:</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                d<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> d<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                d<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> MIN<span class=\"br0\">(</span>d<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"br0\">)</span>, MIN<span class=\"br0\">(</span>d<span class=\"br0\">(</span>i, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, d<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    NSUInteger r <span class=\"sy0\">=</span> d<span class=\"br0\">(</span>sl, tl<span class=\"br0\">)</span>;<br/><span class=\"co1\">#undef d</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">return</span> r;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> minimum a b c <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> a <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> b c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> levenshtein_distance s t <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s<br/>  <span class=\"kw1\">and</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length t <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* for all i and j, d.(i).(j) will hold the Levenshtein distance between<br/>     the first i characters of s and the first j characters of t *)</span><br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix <span class=\"br0\">(</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>    d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> i  <span class=\"co1\">(* the distance of any first string to an empty second string *)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    d<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> j  <span class=\"co1\">(* the distance of any second string to an empty first string *)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">(* no operation required *)</span><br/>      <span class=\"kw1\">else</span><br/>        d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> minimum<br/>                       <span class=\"br0\">(</span>d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\">(* a deletion *)</span><br/>                       <span class=\"br0\">(</span>d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\">(* an insertion *)</span><br/>                       <span class=\"br0\">(</span>d<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">(* a substitution *)</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  d<span class=\"sy0\">.</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> test s t <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%s -&gt;\u00a0%s =\u00a0%d\\n\"</span> s t <span class=\"br0\">(</span>levenshtein_distance s t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  test <span class=\"st0\">\"kitten\"</span> <span class=\"st0\">\"sitting\"</span><span class=\"sy0\">;</span><br/>  test <span class=\"st0\">\"rosettacode\"</span> <span class=\"st0\">\"raisethysword\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 48, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"kitten -&gt; sitting:\"</span> levenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"rosettacode -&gt; raisethysword:\"</span> levenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span>, <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>::routine levenshteinDistance<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> s, t<br/>  s = s~<span class=\"kw6\">lower</span><br/>  t = t~<span class=\"kw6\">lower</span><br/>\u00a0<br/>  m = s~<span class=\"kw6\">length</span><br/>  n = t~<span class=\"kw6\">length</span><br/>\u00a0<br/>  <span class=\"co1\">-- for all i and j, d[i,j] will hold the Levenshtein distance between</span><br/>  <span class=\"co1\">-- the first i characters of s and the first j characters of t;</span><br/>  <span class=\"co1\">-- note that d has (m+1)x(n+1) values</span><br/>  d = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>m + <span class=\"nu0\">1</span>, n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- clear all elements in d</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> d~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> d~dimension<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"co1\">-- source prefixes can be transformed into empty string by</span><br/>  <span class=\"co1\">-- dropping all characters (Note, ooRexx arrays are 1-based)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> m + <span class=\"nu0\">1</span><br/>      d<span class=\"br0\">[</span>i, <span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"co1\">-- target prefixes can be reached from empty source prefix</span><br/>  <span class=\"co1\">-- by inserting every characters</span><br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> n + <span class=\"nu0\">1</span><br/>      d<span class=\"br0\">[</span><span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> n + <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">loop</span> i = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> m + <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">if</span> s~subchar<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> == t~subchar<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>              d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j - <span class=\"nu0\">1</span><span class=\"br0\">]</span>   <span class=\"co1\">-- no operation required</span><br/>          <span class=\"kw3\">else</span> d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = <span class=\"kw6\">min</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> + <span class=\"nu0\">1</span>,    - <span class=\"co1\">-- a deletion</span><br/>                             d<span class=\"br0\">[</span>i, j-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span>,      - <span class=\"co1\">-- an insertion</span><br/>                             d<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span>, j - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">-- a substitution</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>m + <span class=\"nu0\">1</span>, n + <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 25, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Levenshtein distance between two words</span><br/><span class=\"co1\">\\\\ 6/21/16 aev</span><br/>levensDist<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>n1<span class=\"sy0\">=</span>#s1<span class=\"sy0\">,</span>n2<span class=\"sy0\">=</span>#s2<span class=\"sy0\">,</span>v1<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">,</span>v2<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">,</span>c<span class=\"sy0\">,</span><br/>   n11<span class=\"sy0\">=</span>n1<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n21<span class=\"sy0\">=</span>n2<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n21<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span>z<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u0<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n21<span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span>u0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>s1<span class=\"sy0\">==</span>s2<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>n1<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>n2<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>n1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>n11<span class=\"sy0\">,</span> u<span class=\"sy0\">=</span>u0<span class=\"sy0\">;</span> u<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>n21<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>v1<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>v2<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"sy0\">=</span>t<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"sy0\">=</span><span class=\"kw1\">vecmin</span><span class=\"br0\">(</span><span class=\"br0\">[</span>t<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span>u<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend j</span><br/>  t<span class=\"sy0\">=</span>u<span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i </span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Levenshtein distance = \"</span><span class=\"sy0\">,</span>t<span class=\"br0\">[</span>n21<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" for strings: \"</span><span class=\"sy0\">,</span>s1<span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">return</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>n21<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span> <span class=\"co1\">\\\\ Testing:</span><br/>levensDist<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>levensDist<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>levensDist<span class=\"br0\">(</span><span class=\"st0\">\"Saturday\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Sunday\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>levensDist<span class=\"br0\">(</span><span class=\"st0\">\"oX\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"X\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>levensDist<span class=\"br0\">(</span><span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"oX\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 38, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> LevenshteinDistanceDemo<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LevenshteinDistance<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> t<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    d<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> m<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    m <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    setlength<span class=\"br0\">(</span>d<span class=\"sy1\">,</span> m<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>      d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">then</span>  <br/>          d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span><br/>          d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> min<span class=\"br0\">(</span>d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> min<span class=\"br0\">(</span>d<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> d<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    LevenshteinDistance <span class=\"sy1\">:</span><span class=\"sy3\">=</span> d<span class=\"br0\">[</span>m<span class=\"sy1\">,</span>n<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  s1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'kitten'</span><span class=\"sy1\">;</span><br/>  s2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'sitting'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The Levenshtein distance between \"'</span><span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> <span class=\"st0\">'\" and \"'</span><span class=\"sy1\">,</span> s2<span class=\"sy1\">,</span> <span class=\"st0\">'\" is: '</span><span class=\"sy1\">,</span> LevenshteinDistance<span class=\"br0\">(</span>s1<span class=\"sy1\">,</span> s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  s1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'rosettacode'</span><span class=\"sy1\">;</span><br/>  s2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'raisethysword'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The Levenshtein distance between \"'</span><span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> <span class=\"st0\">'\" and \"'</span><span class=\"sy1\">,</span> s2<span class=\"sy1\">,</span> <span class=\"st0\">'\" is: '</span><span class=\"sy1\">,</span> LevenshteinDistance<span class=\"br0\">(</span>s1<span class=\"sy1\">,</span> s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 25, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>min<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%cache</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> leven <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$s</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$t</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$s</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$t</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span>    <span class=\"co1\"># try commenting out this line</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">?</span> leven<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> min<span class=\"br0\">(</span><br/>                    leven<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    leven<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span>  <span class=\"re0\">$t1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    leven<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> leven<span class=\"br0\">(</span><span class=\"st_h\">'rosettacode'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'raisethysword'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> levenshtein_distance <span class=\"br0\">(</span> Str <span class=\"re0\">$s</span><span class=\"sy0\">,</span> Str <span class=\"re0\">$t</span> <span class=\"sy0\">--&gt;</span> Int <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@s</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*,</span> <span class=\"sy0\">|</span><span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*,</span> <span class=\"sy0\">|</span><span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@d</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">;</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@s</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@d</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@t</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">@s</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span> <span class=\"kw1\">X</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">@t</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>            <span class=\"sy0\">??</span>   <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>    <span class=\"co1\"># No operation required when eq</span><br/>            <span class=\"sy0\">!!</span> <span class=\"br0\">(</span> <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span>  <span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"co1\"># Deletion</span><br/>                 <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span>  <span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"co1\"># Insertion</span><br/>                 <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"co1\"># Substitution</span><br/>               <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>kitten sitting<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>saturday sunday<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>rosettacode raisethysword<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">@a</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"levenshtein_distance('$s', '$t') == \"</span><span class=\"sy0\">,</span> levenshtein_distance<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 35, "block": "<pre class=\"text highlighted_source\">function levenshtein(sequence s1, sequence s2)<br/>integer n = length(s1)+1,<br/>        m = length(s2)+1<br/>sequence d<br/>\u00a0<br/>    if n=1  then<br/>        return m-1<br/>    elsif m=1 then<br/>        return n-1<br/>    end if<br/>\u00a0<br/>    d = repeat(repeat(0, m), n)<br/>    for i=1 to n do<br/>        d[i][1] = i-1<br/>    end for<br/>\u00a0<br/>    for j=1 to m do<br/>        d[1][j] = j-1<br/>    end for<br/>\u00a0<br/>    for i=2 to n do<br/>        for j=2 to m do<br/>            d[i][j] = min({<br/>                           d[i-1][j]+1,<br/>                           d[i][j-1]+1,<br/>                           d[i-1][j-1]+(s1[i-1]!=s2[j-1])<br/>                          })<br/>        end for<br/>    end for<br/>\u00a0<br/>    return d[n][m]<br/>end function<br/>\u00a0<br/>?levenshtein(\"kitten\", \"sitting\")<br/>?levenshtein(\"rosettacode\", \"raisethysword\")</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/levenshtein\"><span class=\"kw3\">levenshtein</span></a><span class=\"br0\">(</span><span class=\"st_h\">'kitten'</span><span class=\"sy0\">,</span><span class=\"st_h\">'sitting'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/levenshtein\"><span class=\"kw3\">levenshtein</span></a><span class=\"br0\">(</span><span class=\"st_h\">'rosettacode'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'raisethysword'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de levenshtein (A B)<br/>   (let D<br/>      (cons<br/>         (range 0 (length A))<br/>         (mapcar<br/>            '((I) (cons I (copy A)))<br/>            (range 1 (length B)) ) )<br/>      (for (J . Y) B<br/>         (for (I . X) A<br/>            (set<br/>               (nth D (inc J) (inc I))<br/>               (if (= X Y)<br/>                  (get D J I)<br/>                  (inc<br/>                     (min<br/>                        (get D J (inc I))<br/>                        (get D (inc J) I)<br/>                        (get D J I) ) ) ) ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 56, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref attributes or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> lsht<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'kitten'</span>      <span class=\"sy0\">,</span><span class=\"st0\">'sitting'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'rosettacode'</span> <span class=\"sy0\">,</span><span class=\"st0\">'raisethysword'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'Sunday'</span>      <span class=\"sy0\">,</span><span class=\"st0\">'Saturday'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'Vladimir_Levenshtein[1965]'</span><span class=\"sy0\">,</span><br/>           <span class=\"st0\">'Vladimir_Levenshtein[1965]'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'this_algorithm_is_similar_to'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'Damerau-Levenshtein_distance'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"sy0\">,</span><span class=\"st0\">'abc'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> test<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'          1st string  = &gt;'</span>!!s!!<span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'          2nd string  = &gt;'</span>!!t!!<span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'Levenshtein distance  ='</span><span class=\"sy0\">,</span>LevenshteinDistance<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> LevenshteinDistance<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>sl<span class=\"sy0\">,</span>tl<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ld      <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* for all i and j, d[i,j] will hold the Levenshtein distance between<br/> *  the first i characters of s and the first j characters of t;<br/> *  note that d has (m+1)*(n+1) values                               */</span><br/> sl<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> tl<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Begin</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> d<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>sl<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>tl<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span>  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   d<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sl<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* source prefixes can be transformed into         */</span><br/>     d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>i<span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* empty string by dropping all characters         */</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> tl<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* target prefixes can be reached from             */</span><br/>     d<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>j<span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* empty source prefix by inserting every character*/</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> tl<span class=\"sy0\">;</span><br/>     jj<span class=\"sy0\">=</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sl<span class=\"sy0\">;</span><br/>       ii<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>         d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>d<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>                  <span class=\"coMULTI\">/* no operation required  */</span><br/>       <span class=\"kw1\">Else</span><br/>         d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>d<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span>             <span class=\"coMULTI\">/* a deletion             */</span><br/>                      d<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">,</span>             <span class=\"coMULTI\">/* an insertion           */</span><br/>                      d<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* a substitution         */</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   ld<span class=\"sy0\">=</span>d<span class=\"br0\">(</span>sl<span class=\"sy0\">,</span>tl<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>ld<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 61, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>LevenshteinDistance<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateNotNullOrEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>Alias<span class=\"br0\">(</span><span class=\"st0\">\"s\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$ReferenceObject</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateNotNullOrEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>Alias<span class=\"br0\">(</span><span class=\"st0\">\"t\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$DifferenceObject</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ReferenceObject</span>.Length<br/>    <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$DifferenceObject</span>.Length<br/>\u00a0<br/>    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> <span class=\"st0\">'System.Object[,]'</span> <span class=\"kw5\">-ArgumentList</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$outputObject</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        ReferenceObject  <span class=\"sy0\">=</span> <span class=\"re0\">$ReferenceObject</span><br/>        DifferenceObject <span class=\"sy0\">=</span> <span class=\"re0\">$DifferenceObject</span><br/>        Distance         <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span> <br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$ReferenceObject</span><span class=\"br0\">[</span><span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$DifferenceObject</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Min<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Min<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$outputObject</span>.Distance <span class=\"sy0\">=</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"re0\">$outputObject</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 61, "block": "<pre class=\"prolog highlighted_source\">levenshtein<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tM1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> M<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> N1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init<span class=\"br0\">(</span>M1<span class=\"br0\">)</span><span class=\"sy4\">,</span> Lev<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> LN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init_n<span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> Lev<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Lev<span class=\"sy4\">,</span> Lev0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> M<span class=\"sy4\">,</span> Lev0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% compute_levenshtein distance</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> LN1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>work_on_T<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span> LN1<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlast<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> LevLast<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlast<span class=\"br0\">(</span>LevLast<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>work_on_T<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> TJ<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> M<span class=\"sy4\">,</span> LM<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>work_on_S<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> TJ<span class=\"br0\">)</span><span class=\"sy4\">,</span> LM<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>work_on_S<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% same char</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tI1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> J1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> J<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>J1<span class=\"sy4\">,</span> Lev<span class=\"sy4\">,</span> LevJ1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>I1<span class=\"sy4\">,</span> LevJ1<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>J<span class=\"sy4\">,</span> Lev<span class=\"sy4\">,</span> LevJ<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> LevJ<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>work_on_S<span class=\"br0\">(</span>Lev<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> _C1<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> _C2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tI1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> J1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> J <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% compute the value for deletion</span><br/>\tnth0<span class=\"br0\">(</span>J<span class=\"sy4\">,</span> Lev<span class=\"sy4\">,</span> LevJ<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>I1<span class=\"sy4\">,</span> LevJ<span class=\"sy4\">,</span> VD0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tVD <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VD0 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% compute the value for insertion</span><br/>\tnth0<span class=\"br0\">(</span>J1<span class=\"sy4\">,</span> Lev<span class=\"sy4\">,</span> LevJ1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> LevJ1<span class=\"sy4\">,</span> VI0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tVI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VI0 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% compute the value for substitution</span><br/>\tnth0<span class=\"br0\">(</span>I1<span class=\"sy4\">,</span> LevJ1<span class=\"sy4\">,</span> VS0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tVS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VS0 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% set the minimum value to cell(I,J)</span><br/>\tsort<span class=\"br0\">(</span><span class=\"br0\">[</span>VD<span class=\"sy4\">,</span> VI<span class=\"sy4\">,</span> VS<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> LevJ<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>init<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init_n<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnth0<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 29, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> LevenshteinDistance<span class=\"br0\">(</span>A_string$, B_String$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> m, n, i, j, min, k, l<br/>  m <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>A_string$<span class=\"br0\">)</span><br/>  n <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>B_String$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> D<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m: D<span class=\"br0\">(</span>i,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>i: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n: D<span class=\"br0\">(</span><span class=\"nu0\">0</span>,j<span class=\"br0\">)</span><span class=\"sy0\">=</span>j: <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<br/>      <span class=\"kw1\">If</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>A_string$,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>B_String$,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        D<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> D<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"co1\">; no operation required</span><br/>      <span class=\"kw1\">Else</span><br/>        min <span class=\"sy0\">=</span> D<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>   <span class=\"co1\">; a deletion</span><br/>        k   <span class=\"sy0\">=</span> D<span class=\"br0\">(</span>i, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>   <span class=\"co1\">; an insertion</span><br/>        l   <span class=\"sy0\">=</span> D<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"co1\">; a substitution</span><br/>        <span class=\"kw1\">If</span> k <span class=\"sy0\">&lt;</span> min: min<span class=\"sy0\">=</span>k: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">If</span> l <span class=\"sy0\">&lt;</span> min: min<span class=\"sy0\">=</span>l: <span class=\"kw1\">EndIf</span><br/>        D<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> min<br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> D<span class=\"br0\">(</span>m,n<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;- Testing</span><br/>n <span class=\"sy0\">=</span> LevenshteinDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Info\"</span>,<span class=\"st0\">\"Levenshtein Distance= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> minimumEditDistance<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>:<br/>        s1<span class=\"sy0\">,</span>s2 <span class=\"sy0\">=</span> s2<span class=\"sy0\">,</span>s1<br/>    distances <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> index2<span class=\"sy0\">,</span>char2 <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>:<br/>        newDistances <span class=\"sy0\">=</span> <span class=\"br0\">[</span>index2+<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> index1<span class=\"sy0\">,</span>char1 <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> char1 <span class=\"sy0\">==</span> char2:<br/>                newDistances.<span class=\"me1\">append</span><span class=\"br0\">(</span>distances<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span>:<br/>                newDistances.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> + <span class=\"kw2\">min</span><span class=\"br0\">(</span><span class=\"br0\">(</span>distances<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                             distances<span class=\"br0\">[</span>index1+<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                             newDistances<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        distances <span class=\"sy0\">=</span> newDistances<br/>    <span class=\"kw1\">return</span> distances<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>minimumEditDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>minimumEditDistance<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 20, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (levenshtein a b)<br/>  (define (ls0 a-index b-index)<br/>    (cond [(or (= a-index -1) (= b-index -1)) (abs (- a-index b-index))]<br/>          [else <br/>           (define a-char (string-ref a a-index))<br/>           (define b-char (string-ref b b-index))<br/>           (if (equal? a-char b-char)<br/>               (ls (sub1 a-index) (sub1 b-index))<br/>               (min (add1 (ls (sub1 a-index) b-index))<br/>                    (add1 (ls a-index (sub1 b-index)))<br/>                    (add1 (ls (sub1 a-index) (sub1 b-index)))))]))<br/>  (define memo (make-hash))<br/>  (define (ls a-i b-i)<br/>    (hash-ref! memo (cons a-i b-i) (\u03bb() (ls0 a-i b-i))))<br/>  (ls (sub1 (string-length a)) (sub1 (string-length b))))<br/>\u00a0<br/>(levenshtein \"kitten\" \"sitting\")<br/>(levenshtein \"rosettacode\" \"raisethysword\")</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the  Levenshtein distance  between two text strings.*/</span><br/><span class=\"kw1\">call</span> Levenshtein  <span class=\"st0\">'kitten'</span>                      , <span class=\"st0\">\"sitting\"</span><br/><span class=\"kw1\">call</span> Levenshtein  <span class=\"st0\">'rosettacode'</span>                 , <span class=\"st0\">\"raisethysword\"</span><br/><span class=\"kw1\">call</span> Levenshtein  <span class=\"st0\">'Sunday'</span>                      , <span class=\"st0\">\"Saturday\"</span><br/><span class=\"kw1\">call</span> Levenshtein  <span class=\"st0\">'Vladimir_Levenshtein[1965]'</span>  , <span class=\"st0\">\"Vladimir_Levenshtein[1965]\"</span><br/><span class=\"kw1\">call</span> Levenshtein  <span class=\"st0\">'this_algorithm_is_similar_to'</span>, <span class=\"st0\">\"Damerau-Levenshtein_distance\"</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Levenshtein: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> s,t;     sL=<span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>;      tL=<span class=\"kw6\">length</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'          1st string  = '</span>    s<br/><span class=\"kw1\">say</span> <span class=\"st0\">'          2nd string  = '</span>      t<br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;                                         <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tL; @<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>i=i; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span><br/>                                              <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> sL; @<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0=i; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span><br/>  <span class=\"kw1\">do</span>     j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tL; j_=j-<span class=\"nu0\">1</span>; q=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>t,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> sL; k_=k-<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> q==<span class=\"kw6\">substr</span><span class=\"br0\">(</span>s,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"02683f42\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k_<span class=\"sy0\">.</span>j_<br/>                           <span class=\"kw3\">else</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>   +   <span class=\"kw6\">min</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>k_<span class=\"sy0\">.</span>j,  @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j_,  @<span class=\"sy0\">.</span>k_<span class=\"sy0\">.</span>j_<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Levenshtein distance  = '</span>  @<span class=\"sy0\">.</span>sL<span class=\"sy0\">.</span>tL;                 <span class=\"kw1\">say</span><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Levenshtein distance<br/>\u00a0<br/>load \"stdlib.ring\"<br/>see \"\" + \"distance(kitten, sitting) = \" + levenshteindistance(\"kitten\", \"sitting\") + nl<br/>see \"\" + \"distance(saturday, sunday) = \" + levenshteindistance(\"saturday\", \"sunday\") + nl<br/>see \"\" + \"distance(rosettacode, raisethysword) = \" + levenshteindistance(\"rosettacode\", \"raisethysword\") + nl<br/>\u00a0<br/>func levenshteindistance(s1, s2)<br/>        n = len(s1)<br/>        m = len(s2)<br/>        if n = 0 <br/>            levenshteindistance = m<br/>            return<br/>        ok<br/>        if m = 0 <br/>            levenshteindistance = n<br/>            return<br/>        ok<br/>        d = newlist(n, m)<br/>        for i = 1 to n<br/>             d[i][1] = i<br/>        next i<br/>        for i = 1 to m<br/>             d[1][i] = i<br/>        next<br/>        for i = 2 to n<br/>             si = substr(s1, i, 1)<br/>             for j = 2 to m<br/>                  tj = substr(s2, j, 1)<br/>                  if si = tj<br/>                     cost = 0 <br/>                  else<br/>                     cost = 1<br/>                  ok<br/>                  d[i][ j] = min((d[i - 1][ j]), min((d[i][j - 1] + 1), (d[i - 1][j - 1] + cost)))<br/>             next <br/>        next<br/>        levenshteindistance = d[n][m]<br/>        return levenshteindistance<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> Levenshtein<br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">distance</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a, b = a.<span class=\"me1\">downcase</span>, b.<span class=\"me1\">downcase</span><br/>    costs = <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">b</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"co1\"># i == 0</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">a</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      costs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, nw = i, i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>  <span class=\"co1\"># j == 0; nw is lev(i-1, j)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">b</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, nw = <span class=\"br0\">[</span>costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, costs<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, a<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == b<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0? nw\u00a0: nw <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">min</span>, costs<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    costs<span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">test</span><br/>    <span class=\"sy0\">%</span>w<span class=\"br0\">{</span>kitten sitting saturday sunday rosettacode raisethysword<span class=\"br0\">}</span>.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a, b<span class=\"sy0\">|</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"distance(#{a}, #{b}) = #{distance(a, b)}\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>Levenshtein.<span class=\"me1\">test</span></pre>"}, {"lang": "Run BASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">print levenshteinDistance(\"kitten\", \"sitting\")<br/>print levenshteinDistance(\"rosettacode\", \"raisethysword\")<br/>end<br/>function levenshteinDistance(s1$, s2$)<br/>    n = len(s1$)<br/>    m = len(s2$)<br/>    if n = 0 then<br/>        levenshteinDistance = m<br/>        goto [ex]<br/>    end if<br/>    if m = 0 then<br/>        levenshteinDistance = n<br/>        goto [ex]<br/>    end if<br/>    dim d(n, m)<br/>    for i = 0 to n<br/>        d(i, 0) = i<br/>    next i<br/>    for i = 0 to m<br/>        d(0, i) = i<br/>    next i<br/>    for i = 1 to n<br/>        si$ = mid$(s1$, i, 1)<br/>        for j = 1 to m<br/>            tj$ = mid$(s2$, j, 1)<br/>            if si$ = tj$ then cost = 0 else cost = 1<br/>            d(i, j) = min((d(i - 1, j) + 1),min((d(i, j - 1) + 1),(d(i - 1, j - 1) + cost)))<br/>        next j<br/>    next i<br/>    levenshteinDistance = d(n, m)<br/>[ex]<br/>end function</pre>"}, {"lang": "Rust", "loc": 32, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"{}\", levenshtein_distance(\"kitten\", \"sitting\"));<br/>    println!(\"{}\", levenshtein_distance(\"saturday\", \"sunday\"));<br/>    println!(\"{}\", levenshtein_distance(\"rosettacode\", \"raisethysword\"));<br/>}<br/>\u00a0<br/>fn levenshtein_distance(word1: &amp;str, word2: &amp;str) -&gt; usize {<br/>    let w1 = word1.chars().collect::&lt;Vec&lt;_&gt;&gt;();<br/>    let w2 = word2.chars().collect::&lt;Vec&lt;_&gt;&gt;();<br/>\u00a0<br/>    let word1_length = w1.len() + 1;<br/>    let word2_length = w2.len() + 1;<br/>\u00a0<br/>    let mut matrix = vec![vec![0]];<br/>\u00a0<br/>    for i in 1..word1_length { matrix[0].push(i); }<br/>    for j in 1..word2_length { matrix.push(vec![j]); }<br/>\u00a0<br/>    for j in 1..word2_length {<br/>        for i in 1..word1_length {<br/>            let x: usize = if w1[i-1] == w2[j-1] {<br/>                matrix[j-1][i-1]<br/>            } else {<br/>                1 + std::cmp::min(<br/>                        std::cmp::min(matrix[j][i-1], matrix[j-1][i])<br/>                        , matrix[j-1][i-1])<br/>            };<br/>            matrix[j].push(x);<br/>        }<br/>    }<br/>    matrix[word2_length-1][word1_length-1]<br/>}</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Levenshtein0 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> distance<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, s2<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dist <span class=\"sy0\">=</span> Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>s2.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span>, s1.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>j, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> j <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>inline<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> minimum<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> i.<span class=\"me1\">min</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span>j <span class=\"sy0\">&lt;</span>- dist.<span class=\"me1\">indices</span>.<span class=\"me1\">tail</span><br/>         i <span class=\"sy0\">&lt;</span>- dist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">indices</span>.<span class=\"me1\">tail</span><span class=\"br0\">}</span> dist<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s2<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s1<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> dist<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> minimum<span class=\"br0\">(</span>dist<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, dist<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, dist<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    dist<span class=\"br0\">(</span>s2.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">(</span>s1.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printDistance<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, s2<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"%s -&gt;\u00a0%s\u00a0:\u00a0%d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>s1, s2, distance<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  printDistance<span class=\"br0\">(</span><span class=\"st0\">\"kitten\"</span>, <span class=\"st0\">\"sitting\"</span><span class=\"br0\">)</span><br/>  printDistance<span class=\"br0\">(</span><span class=\"st0\">\"rosettacode\"</span>, <span class=\"st0\">\"raisethysword\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>levenshtein <span class=\"kw1\">s</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span>levenshtein <span class=\"kw1\">s</span> sl <span class=\"kw1\">t</span> tl<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> sl<span class=\"br0\">)</span> tl<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> tl<span class=\"br0\">)</span> sl<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span>levenshtein <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> sl <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">t</span> tl<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span>levenshtein <span class=\"kw1\">s</span> sl <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> tl <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span>levenshtein <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> sl <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> tl <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">char=?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">%</span>levenshtein <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">string-length</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span>\t\t<br/>\t\t<span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">string-length</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: levenshteinDistance (in string: s, in string: t) is func<br/>  result<br/>    var integer: distance is 0;<br/>  local<br/>    var array array integer: d is 0 times 0 times 0;<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>  begin<br/>    d\u00a0:= [0 .. length(s)] times [0 .. length(t)] times 0;<br/>    for key i range s do<br/>      d[i][0]\u00a0:= i;<br/>    end for;<br/>    for key j range t do<br/>      d[0][j]\u00a0:= j;<br/>      for key i range s do<br/>        if s[i] = t[j] then<br/>          d[i][j]\u00a0:= d[pred(i)][pred(j)];<br/>        else<br/>          d[i][j]\u00a0:= min(min(succ(d[pred(i)][j]), succ(d[i][pred(j)])), succ(d[pred(i)][pred(j)]));<br/>        end if;<br/>      end for;<br/>    end for;<br/>    distance\u00a0:= d[length(s)][length(t)];<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"kitten -&gt; sitting: \" &lt;&amp; levenshteinDistance(\"kitten\", \"sitting\"));<br/>    writeln(\"rosettacode -&gt; raisethysword: \" &lt;&amp; levenshteinDistance(\"rosettacode\", \"raisethysword\"));<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:= LenenshteinDistance(args[1], args[2]);<br/>\u00a0<br/>LenenshteinDistance(s(1), t(1))\u00a0:=<br/>\t0 when equalList(s,t) else<br/>\tsize(t) when size(s) = 0 else<br/>\tsize(s) when size(t) = 0 else<br/>\tLenenshteinDistanceIterative(s, t, 0 ... size(t), duplicate(0, size(t) + 1), 1);<br/>\u00a0<br/>LenenshteinDistanceIterative(s(1), t(1), v0(1), v1(1), n)\u00a0:=<br/>\tv0[size(t) + 1] when n &gt; size(s) else<br/>\tLenenshteinDistanceIterative(s, t, iterate(s[n], t, v0, setElementAt(v1, 1, n + 0), 1), v0, n + 1);<br/>\u00a0<br/>iterate(s, t(1), v0(1), v1(1), n)\u00a0:=<br/>\tv1 when n &gt; size(t) else<br/>\titerate(s, t, v0,<br/>\t\tsetElementAt(v1, n + 1,<br/>\t\t\tmin(min(v1[n] + 1, v0[n + 1] + 1), v0[n] + (0 when s = t[n] else 1))),<br/>\t\tn + 1);<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func lev<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>\u00a0<br/>    s <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> t.<span class=\"me1\">len</span><br/>    t <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> s.<span class=\"me1\">len</span><br/>\u00a0<br/>    var s1 = s.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    var t1 = t.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0? __FUNC__<span class=\"br0\">(</span>s1, t1<span class=\"br0\">)</span><br/>                \u00a0: <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw4\">Math</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span><br/>                        __FUNC__<span class=\"br0\">(</span>s1, t1<span class=\"br0\">)</span>,<br/>                        __FUNC__<span class=\"br0\">(</span>s,  t1<span class=\"br0\">)</span>,<br/>                        __FUNC__<span class=\"br0\">(</span>s1, t <span class=\"br0\">)</span><br/>                     <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 37, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    INTEGER PROCEDURE LEVENSHTEINDISTANCE(S1, S2); TEXT S1, S2;<br/>    BEGIN<br/>        INTEGER N, M;<br/>        N\u00a0:= S1.LENGTH;<br/>        M\u00a0:= S2.LENGTH;<br/>        IF N = 0 THEN LEVENSHTEINDISTANCE\u00a0:= M ELSE<br/>        IF M = 0 THEN LEVENSHTEINDISTANCE\u00a0:= N ELSE<br/>        BEGIN<br/>            INTEGER ARRAY D(0:N, 0:M);<br/>            INTEGER I, J;<br/>            FOR I\u00a0:= 0 STEP 1 UNTIL N DO D(I, 0)\u00a0:= I;<br/>            FOR I\u00a0:= 0 STEP 1 UNTIL M DO D(0, I)\u00a0:= I;<br/>            S1.SETPOS(1);<br/>            FOR I\u00a0:= 1 STEP 1 UNTIL N DO<br/>            BEGIN<br/>                CHARACTER SI, TJ;<br/>                SI\u00a0:= S1.GETCHAR;<br/>                S2.SETPOS(1);<br/>                FOR J\u00a0:= 1 STEP 1 UNTIL M DO<br/>                BEGIN<br/>                    INTEGER COST;<br/>                    TJ\u00a0:= S2.GETCHAR;<br/>                    COST\u00a0:= IF SI = TJ THEN 0 ELSE 1;<br/>                    D(I, J)\u00a0:= MIN(D(I - 1, J) + 1, MIN(D(I, J - 1) + 1, D(I - 1, J - 1) + COST));<br/>                END;<br/>            END;<br/>            LEVENSHTEINDISTANCE\u00a0:= D(N, M);<br/>        END;<br/>    END LEVENSHTEINDISTANCE;<br/>\u00a0<br/>    OUTINT(LEVENSHTEINDISTANCE(\"kitten\", \"sitting\"), 0); OUTIMAGE;<br/>    OUTINT(LEVENSHTEINDISTANCE(\"rosettacode\", \"raisethysword\"), 0); OUTIMAGE;<br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"st0\">'kitten'</span> levenshteinTo: <span class=\"st0\">'sitting'</span> s:<span class=\"re5\">1</span> k:<span class=\"re5\">1</span> c:<span class=\"re5\">1</span> i:<span class=\"re5\">1</span> d:<span class=\"re5\">1</span> -&gt; <span class=\"nu0\">3</span><br/><span class=\"st0\">'rosettacode'</span> levenshteinTo: <span class=\"st0\">'raisethysword'</span> s:<span class=\"re5\">1</span> k:<span class=\"re5\">1</span> c:<span class=\"re5\">1</span> i:<span class=\"re5\">1</span> d:<span class=\"re5\">1</span> -&gt; <span class=\"nu0\">8</span></pre>"}, {"lang": "Swift", "loc": 15, "block": "<pre class=\"text highlighted_source\">func levDis(w1: String, w2: String) -&gt; Int {<br/>\u00a0<br/>  let (t, s) = (w1.characters, w2.characters)<br/>\u00a0<br/>  let empty = Repeat(count: s.count, repeatedValue: 0)<br/>  var mat = [[Int](0...s.count)] + (1...t.count).map{[$0] + empty}<br/>\u00a0<br/>  for (i, tLett) in t.enumerate() {<br/>    for (j, sLett) in s.enumerate() {<br/>      mat[i + 1][j + 1] = tLett == sLett\u00a0?<br/>        mat[i][j]\u00a0: min(mat[i][j], mat[i][j + 1], mat[i + 1][j]).successor()<br/>    }<br/>  }<br/>  return mat.last!.last!<br/>}</pre>"}, {"lang": "Tcl", "loc": 29, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> levenshteinDistance <span class=\"br0\">{</span>s t<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Edge cases</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> m <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Fastest way to initialize</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$m</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> d <span class=\"nu0\">0</span><br/>\t<span class=\"kw2\">lappend</span> p <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Loop, computing the distance table (well, a moving section)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> tj <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$t</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> d <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> j<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$m</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$d</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span>+<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$s</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> ne <span class=\"re0\">$tj</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><span class=\"br0\">]</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"co1\"># Faster than min($a,$b,$c)</span><br/>\t    <span class=\"kw2\">lset</span> d <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$b</span> <span class=\"sy0\">?</span> <span class=\"re0\">$c</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$a</span> <span class=\"sy0\">?</span> <span class=\"re0\">$c</span>\u00a0: <span class=\"re0\">$a</span>\u00a0: <span class=\"re0\">$c</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$b</span> <span class=\"sy0\">?</span> <span class=\"re0\">$c</span>\u00a0: <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># Swap</span><br/>\t<span class=\"kw1\">set</span> nd <span class=\"re0\">$p</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> p <span class=\"re0\">$d</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> d <span class=\"re0\">$nd</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># The score is at the end of the last-computed row</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> end<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TSE SAL", "loc": 35, "block": "<pre class=\"text highlighted_source\">// library: math: get: damerau: levenshtein &lt;description&gt;&lt;/description&gt; &lt;version&gt;1.0.0.0.23&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmadle.s) [kn, ri, th, 08-09-2011 23:04:55]<br/>INTEGER PROC FNMathGetDamerauLevenshteinDistanceI( STRING s1, STRING s2 )<br/> INTEGER L1 = Length( s1 )<br/> INTEGER L2 = Length( s2 )<br/> INTEGER substitutionCostI = 0<br/> STRING h1[255] = \"\"<br/> STRING h2[255] = \"\"<br/> IF ( ( L1 == 0 ) OR ( L2 == 0 ) )<br/>  // Trivial case: one string is 0-length<br/>  RETURN( Max( L1, L2 ) )<br/> ELSE<br/>  // The cost of substituting the last character<br/>  IF   ( ( s1[ L1 ] ) == ( s2[ L2 ] ) )<br/>   substitutionCostI = 0<br/>  ELSE<br/>   substitutionCostI = 1<br/>  ENDIF<br/>  // h1 and h2 are s1 and s2 with the last character chopped off<br/>  h1 = SubStr( s1, 1,  L1 - 1 )<br/>  h2 = SubStr( s2, 1,  L2 - 1 )<br/>  IF ( ( L1 &gt; 1 ) AND  ( L2 &gt; 1 ) AND  ( s1[ L1 - 0 ] == s2[ L2 - 1 ] ) AND ( s1[ L1 - 1 ] == s2[ L2 - 0 ] ) )<br/>   RETURN( Min( Min( FNMathGetDamerauLevenshteinDistanceI( h1, s2 ) + 1, FNMathGetDamerauLevenshteinDistanceI( s1, h2 ) + 1 ), Min( FNMathGetDamerauLevenshteinDistanceI( h1 , h2 ) + substitutionCostI, FNMathGetDamerauLevenshteinDistanceI( SubStr( s1, 1,  L1 - 2 ), SubStr( s2, 1, L2 - 2 ) ) + 1 ) ) )<br/>  ENDIF<br/>  RETURN( Min( Min( FNMathGetDamerauLevenshteinDistanceI( h1, s2 ) + 1, FNMathGetDamerauLevenshteinDistanceI( s1, h2 ) + 1 ), FNMathGetDamerauLevenshteinDistanceI( h1 ,  h2 ) + substitutionCostI ) )<br/> ENDIF<br/>END<br/>\u00a0<br/>PROC Main()<br/>STRING s1[255] = \"arcain\"<br/>STRING s2[255] = \"arcane\"<br/>Warn( \"Minimum amount of steps to convert \", s1, \" to \", s2, \" = \", FNMathGetDamerauLevenshteinDistanceI( s1, s2 ) ) // gives e.g. 2<br/>s1 = \"algorithm\"<br/>s2 = \"altruistic\"<br/>Warn( \"Minimum amount of steps to convert \", s1, \" to \", s2, \" = \", FNMathGetDamerauLevenshteinDistanceI( s1, s2 ) ) // gives e.g. 6<br/>END</pre>"}, {"lang": "TUSCRIPT", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>distance=DISTANCE (\"kitten\", \"sitting\")<br/>PRINT distance<br/>\u00a0</pre>"}, {"lang": "Vala", "loc": 27, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw4\">class</span> LevenshteinDistance <span class=\"sy0\">:</span> Object <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> compute <span class=\"br0\">(</span><span class=\"kw3\">owned</span> <span class=\"kw4\">string</span> s, <span class=\"kw3\">owned</span> <span class=\"kw4\">string</span> t, <span class=\"kw4\">bool</span> case_sensitive <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> t.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>case_sensitive <span class=\"sy0\">==</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s <span class=\"sy0\">=</span> s.<span class=\"me1\">down</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t <span class=\"sy0\">=</span> t.<span class=\"me1\">down</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> d<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> d<span class=\"br0\">[</span><span class=\"nu0\">0</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> cost <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                d<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">min</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span>.<span class=\"me1\">min</span> <span class=\"br0\">(</span>d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, d<span class=\"br0\">[</span>i, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, d<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> cost<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> d<span class=\"br0\">[</span>n, m<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 20, "block": "<pre class=\"vbnet highlighted_source\"> <span class=\"kw1\">Function</span> LevenshteinDistance<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> String1 <span class=\"kw1\">As</span> <span class=\"kw2\">String</span>, <span class=\"kw1\">ByVal</span> String2 <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Dim</span> Matrix<span class=\"br0\">(</span>String1<span class=\"sy0\">.</span><span class=\"me1\">Length</span>, String2<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Dim</span> Key <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">For</span> Key <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> String1<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>            Matrix<span class=\"br0\">(</span>Key, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Key<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">For</span> Key <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> String2<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>            Matrix<span class=\"br0\">(</span><span class=\"nu0\">0</span>, Key<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Key<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">For</span> Key1 <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> String2<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>            <span class=\"kw1\">For</span> Key2 <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> String1<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>                <span class=\"kw1\">If</span> String1<span class=\"br0\">(</span>Key2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> String2<span class=\"br0\">(</span>Key1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    Matrix<span class=\"br0\">(</span>Key2, Key1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>Key2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, Key1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Else</span><br/>                    Matrix<span class=\"br0\">(</span>Key2, Key1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>Matrix<span class=\"br0\">(</span>Key2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, Key1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>Matrix<span class=\"br0\">(</span>Key2, Key1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, Matrix<span class=\"br0\">(</span>Key2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, Key1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Return</span> Matrix<span class=\"br0\">(</span>String1<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, String2<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">fcn levenshtein(s1,s2){<br/>   sz2,costs:=s2.len() + 1, List.createLong(sz2,0);  // --&gt;zero filled List<br/>   foreach i in (s1.len() + 1){<br/>      lastValue:=i;<br/>      foreach j in (sz2){<br/>         if (i==0) costs[j]=j;<br/>\t else if (j&gt;0){<br/>\t    newValue:=costs[j-1];<br/>\t    if (s1[i-1]!=s2[j-1])<br/>\t       newValue=newValue.min(lastValue, costs[j]) + 1;<br/>\t    costs[j-1]=lastValue;<br/>\t    lastValue =newValue;<br/>\t }<br/>      }<br/>      if (i&gt;0) costs[-1]=lastValue;<br/>   }<br/>   costs[-1]<br/>}</pre>"}]}