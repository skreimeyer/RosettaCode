{"task": "Greatest_common_divisor", "blocks": [{"lang": "360 Assembly", "loc": 32, "block": "<pre class=\"text highlighted_source\">*        Greatest common divisor   04/05/2016<br/>GCD      CSECT<br/>         USING  GCD,R15            use calling register<br/>         L      R6,A               u=a<br/>         L      R7,B               v=b<br/>LOOPW    LTR    R7,R7              while v&lt;&gt;0 <br/>         BZ     ELOOPW               leave while<br/>         LR     R8,R6                t=u<br/>         LR     R6,R7                u=v<br/>         LR     R4,R8                t<br/>         SRDA   R4,32                shift to next reg<br/>         DR     R4,R7                t/v<br/>         LR     R7,R4                v=mod(t,v)<br/>         B      LOOPW              end while<br/>ELOOPW   LPR    R9,R6              c=abs(u)<br/>         L      R1,A               a\t<br/>         XDECO  R1,XDEC            edit a<br/>         MVC    PG+4(5),XDEC+7     move a to buffer<br/>         L      R1,B               b<br/>         XDECO  R1,XDEC            edit b<br/>         MVC    PG+10(5),XDEC+7    move b to buffer<br/>         XDECO  R9,XDEC            edit c<br/>         MVC    PG+17(5),XDEC+7    move c to buffer<br/>         XPRNT  PG,80              print buffer<br/>         XR     R15,R15            return code =0<br/>         BR     R14                return to caller<br/>A        DC     F'1071'            a<br/>B        DC     F'1029'            b<br/>PG       DC     CL80'gcd(00000,00000)=00000'  buffer<br/>XDEC     DS     CL12               temp for edit<br/>         YREGS<br/>         END    GCD</pre>"}, {"lang": "8th", "loc": 15, "block": "<pre class=\"text highlighted_source\">: gcd \\ a b -- gcd<br/>\tdup 0 n:= if drop\u00a0;; then<br/>\ttuck \\ b a b<br/>\tn:mod \\ b a-mod-b<br/>\trecurse\u00a0; <br/>\u00a0<br/>: demo \\ a b --<br/>\t2dup \"GCD of \" . . \" and \" . . \" = \" . gcd .\u00a0;<br/>\u00a0<br/>100    5 demo cr<br/>  5  100 demo cr<br/>  7   23 demo cr<br/>\u00a0<br/>bye<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>include-book <span class=\"st0\">\"arithmetic-3/floor-mod/floor-mod\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">system</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> gcd$ <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">guard</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>natp x<span class=\"br0\">)</span> <span class=\"br0\">(</span>natp y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>natp x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> y <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span>zp y<span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span>gcd$ y <span class=\"br0\">(</span>mod x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 20, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"co1\">//Euclidean algorithm</span><br/><span class=\"kw2\">function</span> gcd<span class=\"br0\">(</span>a:<span class=\"kw3\">int</span>,b:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">int</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> tmp:<span class=\"kw3\">int</span>;<br/>\t<span class=\"co1\">//Swap the numbers so a &gt;= b</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ttmp = a;<br/>\t\ta = b;<br/>\t\tb = tmp;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\">//Find the gcd</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>b <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ttmp = a <span class=\"sy0\">%</span> b;<br/>\t\ta = b;<br/>\t\tb = tmp;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> a;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Gcd_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Gcd <span class=\"br0\">(</span>A, B\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      M\u00a0: Integer\u00a0:= A;<br/>      N\u00a0: Integer\u00a0:= B;<br/>      T\u00a0: Integer;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> N /= <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         T\u00a0:= M;<br/>         M\u00a0:= N;<br/>         N\u00a0:= T <span class=\"kw2\">mod</span> N;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> M;<br/>   <span class=\"kw1\">end</span> Gcd;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"GCD of 100, 5 is\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"GCD of 5, 100 is\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"GCD of 7, 23 is\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Gcd_Test;</pre>"}, {"lang": "Aime", "loc": 4, "block": "<pre class=\"text highlighted_source\">o_integer(gcd(33, 77));<br/>o_byte('\\n');<br/>o_integer(gcd(49865, 69811));<br/>o_byte('\\n');</pre>"}, {"lang": "ALGOL 68", "loc": 17, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> gcd <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw2\">IF</span> a <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>    b<br/>  <span class=\"kw2\">ELIF</span> b <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>    a<br/>  <span class=\"kw2\">ELIF</span> a <span class=\"sy1\">&gt;</span> b  <span class=\"kw2\">THEN</span><br/>    gcd<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> a <span class=\"kw12\">MOD</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw2\">ELSE</span><br/>    gcd<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw12\">MOD</span> a<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span>     <br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> a <span class=\"sy1\">=</span> 33<span class=\"sy1\">,</span> b <span class=\"sy1\">=</span> 77<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$x<span class=\"st0\">\"The gcd of\"</span>g<span class=\"st0\">\" and \"</span>g<span class=\"st0\">\" is \"</span>gl$<span class=\"sy1\">,</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span>gcd<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> c <span class=\"sy1\">=</span> 49865<span class=\"sy1\">,</span> d <span class=\"sy1\">=</span> 69811<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$x<span class=\"st0\">\"The gcd of\"</span>g<span class=\"st0\">\" and \"</span>g<span class=\"st0\">\" is \"</span>gl$<span class=\"sy1\">,</span>c<span class=\"sy1\">,</span>d<span class=\"sy1\">,</span>gcd<span class=\"br0\">(</span>c<span class=\"sy1\">,</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 22, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% iterative Greatest Common Divisor routine                              \u00a0%<br/>    integer procedure gcd ( integer value m, n )\u00a0;<br/>    begin<br/>        integer a, b, newA;<br/>        a\u00a0:= abs( m );<br/>        b\u00a0:= abs( n );<br/>        if a = 0 then begin<br/>            b<br/>            end<br/>        else begin<br/>            while b not = 0 do begin<br/>                newA\u00a0:= b;<br/>                b   \u00a0:= a rem b;<br/>                a   \u00a0:= newA;<br/>            end;<br/>            a<br/>        end<br/>    end gcd\u00a0;<br/>\u00a0<br/>    write( gcd( -21, 35 ) );<br/>end.</pre>"}, {"lang": "Alore", "loc": 6, "block": "<pre class=\"text highlighted_source\">def gcd(a as Int, b as Int) as Int<br/>   while b\u00a0!= 0<br/>      a,b = b, a mod b<br/>   end<br/>   return Abs(a)<br/>end</pre>"}, {"lang": "AntLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">gcd[33; 77]</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre>       33 49865 \u2228 77 69811 \n11 9973\n</pre>"}, {"lang": "AppleScript", "loc": 13, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- gcd\u00a0:: Int -&gt; Int -&gt; Int</span><br/><span class=\"kw3\">on</span> gcd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> b \u2260 <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        gcd<span class=\"br0\">(</span>b, a <span class=\"kw2\">mod</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">if</span> a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>            <span class=\"sy0\">-</span>a<br/>        <span class=\"kw3\">else</span><br/>            a<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> gcd<br/>\u00a0</pre>"}, {"lang": "Applesoft BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">0 A = ABS(INT(A))<br/>1 B = ABS(INT(B))<br/>2 GCD = A * NOT NOT B<br/>3 FOR B = B + A * NOT B TO 0 STEP 0<br/>4     A = GCD<br/>5     GCD = B<br/>6     B = A - INT (A / GCD) * GCD<br/>7 NEXT B</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>&lt; a , b &gt;\n\n( r , @a )\n\n[ @r\u00a0!= 0 ,\n\n        ( r , @a\u00a0% @b )\n\n        { @r\u00a0!= 0 ,\n\n                ( a , @b )\n                ( b , @r )\n\n        }\n]\n\n( return , @b )</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">GCD<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Abs</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>\u00a0: Gcd<span class=\"br0\">(</span>b<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 16, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/>_GCD<span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>_GCD<span class=\"br0\">(</span><span class=\"nu0\">1071</span><span class=\"sy0\">,</span> <span class=\"nu0\">1029</span><span class=\"br0\">)</span><br/>_GCD<span class=\"br0\">(</span><span class=\"nu0\">3528</span><span class=\"sy0\">,</span> <span class=\"nu0\">3780</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _GCD<span class=\"br0\">(</span><span class=\"re0\">$ia</span><span class=\"sy0\">,</span> <span class=\"re0\">$ib</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"GCD of \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$ia</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$ib</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = \"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$imod</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/>\t\t<span class=\"re0\">$imod</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Mod.htm\"><span class=\"kw3\">Mod</span></a><span class=\"br0\">(</span><span class=\"re0\">$ia</span><span class=\"sy0\">,</span> <span class=\"re0\">$ib</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$imod</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"re0\">$ret</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$ib</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$ia</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ib</span><br/>\t\t<span class=\"re0\">$ib</span> <span class=\"sy0\">=</span> <span class=\"re0\">$imod</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;_GCD</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw6\">function</span> gcd<span class=\"br0\">(</span>p,q<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span><span class=\"br0\">(</span>q<span class=\"sy5\">?</span>gcd<span class=\"br0\">(</span>q,<span class=\"br0\">(</span>p<span class=\"sy3\">%</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">:</span>p<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> gcd<span class=\"br0\">(</span><span class=\"re0\">$1</span>,<span class=\"re0\">$2</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">12</span> <span class=\"nu0\">16</span><br/><span class=\"nu0\">4</span><br/><span class=\"nu0\">22</span> <span class=\"nu0\">33</span><br/><span class=\"nu0\">11</span><br/><span class=\"nu0\">45</span> <span class=\"nu0\">67</span><br/><span class=\"nu0\">1</span></pre>"}, {"lang": "Axe", "loc": 8, "block": "<pre class=\"text highlighted_source\">Lbl GCD<br/>r\u2081\u2192A<br/>r\u2082\u2192B<br/>!If B<br/> A<br/> Return<br/>End<br/>GCD(B,A^B)</pre>"}, {"lang": "Batch File", "loc": 22, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">:: gcd.cmd</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>:<span class=\"re0\">gcd</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">2</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">instructions</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">1</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">instructions</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> final=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">done</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a res = <span class=\"sy0\">%</span><span class=\"re3\">1</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">gcd</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">done</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> gcd=<span class=\"sy0\">%</span><span class=\"re3\">final</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">instructions</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Syntax:<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \tGCD {a} {b}<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.</pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> gcd<span class=\"br0\">(</span>a%<span class=\"sy0\">,</span> b%<span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span> a <span class=\"sy0\">&gt;</span> b <span class=\"kw1\">THEN</span><br/>      factor <span class=\"sy0\">=</span> a<br/>   <span class=\"kw1\">ELSE</span><br/>      factor <span class=\"sy0\">=</span> b<br/>   <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>   <span class=\"kw1\">FOR</span> l <span class=\"sy0\">=</span> factor <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw1\">STEP</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">IF</span> a <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> b <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>         gcd <span class=\"sy0\">=</span> l<br/>      <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>   <span class=\"kw1\">NEXT</span> l<br/>   gcd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      DEF FN_GCD_Iterative_Euclid(A%, B%)<br/>      LOCAL C%<br/>      WHILE B%<br/>        C% = A%<br/>        A% = B%<br/>        B% = C% MOD B%<br/>      ENDWHILE<br/>      = ABS(A%)</pre>"}, {"lang": "Bc", "loc": 17, "block": "<pre class=\"text highlighted_source\">define even(a)<br/>{<br/>  if ( a\u00a0% 2 == 0 ) {<br/>    return(1);<br/>  } else {<br/>    return(0);<br/>  }<br/>}<br/>\u00a0<br/>define abs(a)<br/>{ <br/>  if (a&lt;0) {<br/>    return(-a);<br/>  } else {<br/>    return(a);<br/>  }<br/>}</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">#v&amp;&lt;     @.$&lt;<br/>:&lt;\\g05%p05:_^#</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">(gcd=a b.!arg:(?a.?b)&amp;!b*den$(!a*!b^-1)^-1);</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span><br/>gcd_iter<span class=\"br0\">(</span><span class=\"kw4\">int</span> u<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>u <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> u <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>u<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>v<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>u <span class=\"sy0\">%=</span> v<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>v <span class=\"sy0\">%=</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>u <span class=\"sy0\">+</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;boost/math/common_factor.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The least common multiple of 12 and 18 is \"</span> <span class=\"sy1\">&lt;&lt;</span> <br/>      boost<span class=\"sy4\">::</span><span class=\"me2\">math</span><span class=\"sy4\">::</span><span class=\"me2\">lcm</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> , <span class=\"nu0\">18</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ,<span class=\"es1\">\\n</span>\"</span><br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"and the greatest common divisor \"</span> <span class=\"sy1\">&lt;&lt;</span> boost<span class=\"sy4\">::</span><span class=\"me2\">math</span><span class=\"sy4\">::</span><span class=\"me2\">gcd</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> , <span class=\"nu0\">18</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">100</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">50</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">36</span>, <span class=\"nu0\">17</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">36</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">36</span>, <span class=\"nu0\">18</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">36</span>, <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">36</span>, <span class=\"nu0\">19</span>, gcd<span class=\"br0\">(</span><span class=\"nu0\">36</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of {0} and {1} is {2}\"</span>, <span class=\"nu0\">36</span>, x, gcd<span class=\"br0\">(</span><span class=\"nu0\">36</span>, x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">/// &lt;summary&gt;</span><br/><span class=\"co1\">/// Greatest Common Denominator using Euclidian Algorithm</span><br/><span class=\"co1\">/// &lt;/summary&gt;</span><br/><span class=\"kw1\">static</span> <span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn gcd <br/>  <span class=\"st0\">\"(gcd a b) computes the greatest common divisor of a and b.\"</span><br/>  <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? b<span class=\"br0\">)</span><br/>    a<br/>    <span class=\"br0\">(</span>recur b <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 28, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> GCD<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> A        <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZEROES</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> B        <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZEROES</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> TEMP     <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZEROES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       Begin<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Enter first number, max 10 digits.\"</span><br/>           <span class=\"kw2\">ACCEPT</span> A<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Enter second number, max 10 digits.\"</span><br/>           <span class=\"kw2\">ACCEPT</span> B<br/>           <span class=\"kw1\">IF</span> A &lt; B<br/>             <span class=\"kw2\">MOVE</span> B <span class=\"kw2\">TO</span> TEMP<br/>             <span class=\"kw2\">MOVE</span> A <span class=\"kw2\">TO</span> B<br/>             <span class=\"kw2\">MOVE</span> TEMP <span class=\"kw2\">TO</span> B<br/>           END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> B <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>             <span class=\"kw2\">MOVE</span> A <span class=\"kw2\">TO</span> TEMP<br/>             <span class=\"kw2\">MOVE</span> B <span class=\"kw2\">TO</span> A<br/>             <span class=\"kw2\">DIVIDE</span> TEMP <span class=\"kw3\">BY</span> B <span class=\"kw2\">GIVING</span> TEMP <span class=\"kw2\">REMAINDER</span> B<br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"The gcd is \"</span> A<br/>           <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Cobra", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Rosetta<br/>\tdef gcd(u as number, v as number) as number<br/>\t\tu, v = u.abs, v.abs<br/>\t\twhile v &gt; 0<br/>\t\t\tu, v = v, u\u00a0% v<br/>\t\treturn u<br/>\u00a0<br/>\tdef main<br/>\t\tprint \"gcd of [12] and [8] is [.gcd(12, 8)]\"<br/>\t\tprint \"gcd of [12] and [-8] is [.gcd(12, -8)]\"<br/>\t\tprint \"gcd of [96] and [27] is [.gcd(27, 96)]\"<br/>\t\tprint \"gcd of [51] and [34] is [.gcd(34, 51)]\"<br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 4, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>gcd = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">if</span> y == <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> x <span class=\"kw1\">else</span> gcd y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>gcd <span class=\"nu0\">2345</span> <span class=\"nu0\">5432</span><span class=\"br0\">)</span><br/><span class=\"nu0\">7</span></pre>"}, {"lang": "Component Pascal", "loc": 30, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Operations;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Args<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>\tr<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">LOOP</span><br/>\t\tr <span class=\"sy0\">:=</span> a <span class=\"kw1\">MOD</span> b;<br/>\t\t<span class=\"kw1\">IF</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> b <span class=\"kw1\">END</span>;<br/>\t\ta <span class=\"sy0\">:=</span> b;b <span class=\"sy0\">:=</span> r<br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Gcd;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoGcd<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>done<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tp<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> p.<span class=\"me1\">argc</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"gcd(\"</span><span class=\"sy0\">+</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\")=\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span>\t\t<br/><span class=\"kw1\">END</span> DoGcd;<br/>\u00a0<br/><span class=\"kw1\">END</span> Operations.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">long</span> myGCD<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">long</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">long</span> y<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> myGCD<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gcd<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span> <span class=\"co1\">// From Phobos.</span><br/>    myGCD<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">[dSa%Lard0&lt;G]dsGx+</pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">231</span><span class=\"sy1\">,</span> <span class=\"nu0\">210</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">231</span><span class=\"sy1\">,</span> <span class=\"nu0\">210</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> gcd<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> u <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> v <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> r <span class=\"sy0\">:=</span> u <span class=\"sy0\">%%</span> v<br/>        u <span class=\"sy0\">:=</span> v<br/>        v <span class=\"sy0\">:=</span> r<br/>    <span class=\"br0\">}</span><br/>    return u.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 29, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Implementation</span><br/>\u00a0<br/>\tgcd <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> x<br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> gcd <span class=\"br0\">(</span>y, x \\\\ y<span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tprint <span class=\"br0\">(</span>gcd <span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 34, "block": "<pre class=\"text highlighted_source\">import system'math.<br/>import extensions.<br/>\u00a0<br/>gcd = (:a:b)<br/>[<br/>    var $a\u00a0:= a.<br/>    var $b\u00a0:= b.<br/>    while($b\u00a0!= 0)<br/>    [<br/>        var tmp\u00a0:= $a.<br/>        $a\u00a0:= $b.<br/>        $b\u00a0:= tmp mod($b).<br/>    ].<br/>\u00a0<br/>    ^ $a.<br/>].<br/>\u00a0<br/>printGCD = (:a:b)<br/>[<br/>    console printLineFormatted(\"GCD of {0} and {1} is {2}\", a, b, gcd(a,b)).<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    printGCD(1,1).<br/>    printGCD(1,10).<br/>    printGCD(10,100).<br/>    printGCD(5,50).<br/>    printGCD(8,24).<br/>    printGCD(36,17).<br/>    printGCD(36,18).<br/>    printGCD(36,19).<br/>    printGCD(36,33).<br/>].</pre>"}, {"lang": "Elixir", "loc": 7, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def gcd(a,0), do: abs(a)<br/>  def gcd(a,b), do: gcd(b, rem(a,b))<br/>end<br/>\u00a0<br/>IO.puts RC.gcd(1071, 1029)<br/>IO.puts RC.gcd(3528, 3780)</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> gcd <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd a <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd <span class=\"br0\">(</span>- a b<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>t a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 9, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>gcd<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">36</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">A</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM EUCLIDE<br/>! calculate G.C.D. between two integer numbers<br/>! using Euclidean algorithm<br/>\u00a0<br/>!VAR J%,K%,MCD%,A%,B%<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);\"Input two numbers\u00a0: \";) \u00a0!CHR$(147) in C-64 version<br/>  INPUT(J%,K%)<br/>  A%=J% B%=K%<br/>  WHILE A%&lt;&gt;B% DO<br/>    IF A%&gt;B%<br/>       THEN<br/>         A%=A%-B%<br/>       ELSE<br/>         B%=B%-A%<br/>    END IF<br/>  END WHILE<br/>  MCD%=A%<br/>  PRINT(\"G.C.D. between\";J%;\"and\";K%;\"is\";MCD%)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;ggt(123456795,1234567851)<br/> 33<br/>&gt;function myggt (n:index, m:index) ...<br/>$  if n&lt;m then {n,m}={m,n}; endif;<br/>$  repeat<br/>$    k=mod(n,m);<br/>$    if k==0 then return m; endif;<br/>$    if k==1 then return 1; endif;<br/>$    {n,m}={m,k};<br/>$  end;<br/>$  endfunction<br/>&gt;myggt(123456795,1234567851)<br/> 33<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 13, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> gcd_iter<span class=\"br0\">(</span><span class=\"kw2\">integer</span> u<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> t<br/>    <span class=\"kw1\">while</span> v <span class=\"kw1\">do</span><br/>        t <span class=\"sy1\">=</span> u<br/>        u <span class=\"sy1\">=</span> v<br/>        v <span class=\"sy1\">=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>t<span class=\"sy2\">,</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">if</span> u &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">-</span>u<br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> u<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Excel", "loc": 1, "block": "<pre class=\"text highlighted_source\">=GCD(A1:E1)</pre>"}, {"lang": "Ezhil", "loc": 62, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0b87\u0b9f\u0bc8\u0baf\u0bbf\u0bb2\u0bbe\u0ba9 \u0bae\u0bc0\u0b9a\u0bcd\u0b9a\u0bbf\u0bb1\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bae\u0b9f\u0b99\u0bcd\u0b95\u0bc1 (LCM), \u0bae\u0bc0\u0baa\u0bcd\u0baa\u0bc6\u0bb0\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf (GCD) \u0b8e\u0ba9\u0bcd\u0ba9 \u0b8e\u0ba9\u0bcd\u0bb1\u0bc1 \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bb5(\u0b8e\u0ba3\u0bcd1, \u0b8e\u0ba3\u0bcd2)<br/>\u00a0<br/>\t@(\u0b8e\u0ba3\u0bcd1 == \u0b8e\u0ba3\u0bcd2) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>  ## \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc1\u0bae\u0bcd \u0b9a\u0bae\u0bae\u0bcd \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bbe\u0bb2\u0bcd, \u0b85\u0ba8\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd\u0ba3\u0bc7\u0ba4\u0bbe\u0ba9\u0bcd \u0b85\u0ba4\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bb5<br/>\u00a0<br/>\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b8e\u0ba3\u0bcd1<br/>\u00a0<br/>\t@(\u0b8e\u0ba3\u0bcd1 &gt; \u0b8e\u0ba3\u0bcd2) \u0b87\u0bb2\u0bcd\u0bb2\u0bc8\u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>\t\t\u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd2<br/>\t\t\u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd1<br/>\u00a0<br/>\t\u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>\u00a0<br/>\t\t\u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd1<br/>\t\t\u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd2<br/>\u00a0<br/>\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd = \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1\u00a0% \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t@(\u0bae\u0bc0\u0ba4\u0bae\u0bcd == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>  ## \u0baa\u0bc6\u0bb0\u0bbf\u0baf \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0bb2\u0bcd \u0b9a\u0bbf\u0bb1\u0bbf\u0baf \u0b8e\u0ba3\u0bcd \u0bae\u0bc0\u0ba4\u0bae\u0bbf\u0ba9\u0bcd\u0bb1\u0bbf \u0bb5\u0b95\u0bc1\u0baa\u0b9f\u0bc1\u0bb5\u0ba4\u0bbe\u0bb2\u0bcd, \u0b9a\u0bbf\u0bb1\u0bbf\u0baf \u0b8e\u0ba3\u0bcd\u0ba4\u0bbe\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bcd\u0baa\u0bc6\u0bb0\u0bc1 \u0baa\u0bca\u0ba4\u0bc1\u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf\u0baf\u0bbe\u0b95 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t\u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>\u00a0<br/>\t\t\u0ba4\u0bca\u0b9f\u0b95\u0bcd\u0b95\u0bae\u0bcd = \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 - 1<br/>\u00a0<br/>\t\t\u0ba8\u0bbf\u0bb1\u0bc8\u0bb5\u0bc1 = 1<br/>\u00a0<br/>\t\t@(\u0b8e\u0ba3\u0bcd = \u0ba4\u0bca\u0b9f\u0b95\u0bcd\u0b95\u0bae\u0bcd, \u0b8e\u0ba3\u0bcd &gt;= \u0ba8\u0bbf\u0bb1\u0bc8\u0bb5\u0bc1, \u0b8e\u0ba3\u0bcd = \u0b8e\u0ba3\u0bcd - 1) \u0b86\u0b95<br/>\u00a0<br/>\t\t\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd1 = \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1\u00a0% \u0b8e\u0ba3\u0bcd<br/>\u00a0<br/>\t\t\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd2 = \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1\u00a0% \u0b8e\u0ba3\u0bcd<br/>\u00a0<br/>   ## \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc8\u0baf\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba4\u0bae\u0bbf\u0ba9\u0bcd\u0bb1\u0bbf \u0bb5\u0b95\u0bc1\u0b95\u0bcd\u0b95\u0b95\u0bcd\u0b95\u0bc2\u0b9f\u0bbf\u0baf \u0baa\u0bc6\u0bb0\u0bbf\u0baf \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0b95\u0bcd \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0b95\u0bbf\u0bb1\u0bcb\u0bae\u0bcd<br/>\u00a0<br/>\t\t\t@((\u0bae\u0bc0\u0ba4\u0bae\u0bcd1 == 0) &amp;&amp; (\u0bae\u0bc0\u0ba4\u0bae\u0bcd2 == 0)) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>\t\t\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b8e\u0ba3\u0bcd<br/>\u00a0<br/>\t\t\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0b85 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b93\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd \"))<br/>\u0b86 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b87\u0ba9\u0bcd\u0ba9\u0bcb\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd \"))<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba4\u0ba8\u0bcd\u0ba4 \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bb5 (\u0bae\u0bc0\u0baa\u0bcd\u0baa\u0bc6\u0bb0\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf, GCD) = \", \u0bae\u0bc0\u0baa\u0bca\u0bb5(\u0b85, \u0b86)<br/>\u00a0</pre>"}, {"lang": "Free Pascal", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">module</span> gcd.<span class=\"me1\">GCD</span> where<br/>\u00a0<br/><span class=\"kw1\">pure</span> native parseInt java.<span class=\"me1\">lang</span>.<span class=\"me1\">Integer</span>.<span class=\"me1\">parseInt</span>\u00a0:: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a> <span class=\"sy0\">-&gt;</span> Int<br/>\u00a0<br/>gcd<span class=\"st0\">' a 0 = a<br/>gcd'</span> a b <span class=\"sy0\">=</span> gcd<span class=\"st0\">' b (a `mod` b)<br/>\u00a0<br/>main args = do<br/>    (a:b:_) = args<br/>    println $ gcd'</span> <span class=\"br0\">(</span>parseInt a<span class=\"br0\">)</span> <span class=\"br0\">(</span>parseInt b<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Frege", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">module</span> gcd.<span class=\"me1\">GCD</span> where<br/>\u00a0<br/><span class=\"kw1\">pure</span> native parseInt java.<span class=\"me1\">lang</span>.<span class=\"me1\">Integer</span>.<span class=\"me1\">parseInt</span>\u00a0:: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a> <span class=\"sy0\">-&gt;</span> Int<br/>\u00a0<br/>gcd<span class=\"st0\">' a 0 = a<br/>gcd'</span> a b <span class=\"sy0\">=</span> gcd<span class=\"st0\">' b (a `mod` b)<br/>\u00a0<br/>main args = do<br/>    (a:b:_) = args<br/>    println $ gcd'</span> <span class=\"br0\">(</span>parseInt a<span class=\"br0\">)</span> <span class=\"br0\">(</span>parseInt b<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">then</span> <span class=\"kw3\">abs</span> a<br/>  <span class=\"kw1\">else</span> gcd b <span class=\"br0\">(</span>a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span>gcd <span class=\"nu0\">400</span> <span class=\"nu0\">600</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">int</span> <span class=\"sy0\">=</span> <span class=\"nu0\">200</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">: gcd ( a b -- c )<br/>    [ abs ] [<br/>        [ nip ] [ mod ] 2bi gcd<br/>    ] if-zero\u00a0;</pre>"}, {"lang": "FALSE", "loc": 1, "block": "<pre class=\"text highlighted_source\">10 15$ [0=~][<a class=\"__cf_email__\" data-cfemail=\"624622\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"efcbaf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"bd99fd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/*-$]#%. { gcd(10,15)=5 }</pre>"}, {"lang": "Fantom", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static Int gcd (Int a, Int b)<br/>  {<br/>    a = a.abs<br/>    b = b.abs<br/>    while (b &gt; 0)<br/>    {<br/>      t\u00a0:= a<br/>      a = b<br/>      b = t\u00a0% b<br/>    }<br/>    return a<br/>  }<br/>\u00a0<br/>  public static Void main()<br/>  {<br/>    echo (\"GCD of 51, 34 is: \" + gcd(51, 34))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: gcd ( a b -- n )<br/>  begin dup while tuck mod repeat drop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 10, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">recursive</span> <span class=\"kw1\">function</span> gcd_rec<span class=\"br0\">(</span>u, v<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>gcd<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">gcd</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">u</span>, v<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>u, v<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        gcd <span class=\"sy0\">=</span> gcd_rec<span class=\"br0\">(</span>v, <span class=\"kw4\">mod</span><span class=\"br0\">(</span>u, v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        gcd <span class=\"sy0\">=</span> v<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> gcd_rec</pre>"}, {"lang": "FreeBASIC", "loc": 30, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> gcd<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> t<br/>\u00a0<br/>    <span class=\"kw1\">While</span> y<br/>        t = y<br/>        y = x <span class=\"kw1\">Mod</span> y<br/>        x = t<br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> x<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> a = <span class=\"nu0\">111111111111111</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> b = <span class=\"nu0\">11111</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"GCD(\"</span>;a;<span class=\"st0\">\", \"</span>;b;<span class=\"st0\">\") = \"</span>; gcd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"GCD(\"</span>;a;<span class=\"st0\">\", 111) = \"</span>; gcd<span class=\"br0\">(</span>a, <span class=\"nu0\">111</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[gcd[12345,98765]]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 8, "block": "<pre class=\"text highlighted_source\">def<br/>  gcd( 0, 0 ) = error( 'integers.gcd: gcd( 0, 0 ) is undefined' )<br/>  gcd( a, b ) =<br/>    def<br/>      _gcd( a, 0 ) = a<br/>      _gcd( a, b ) = _gcd( b, a%b )<br/>\u00a0<br/>    _gcd( abs(a), abs(b) )</pre>"}, {"lang": "FutureBasic", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>local fn gcd( a as long, b as long )<br/>dim as long result<br/>\u00a0<br/>if ( b\u00a0!= 0 )<br/>   result = fn gcd( b, a mod b)<br/>else<br/>   result = abs(a)<br/>end if<br/>end fn = result<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>GcdInt(35, 42);<br/># 7<br/>\u00a0<br/># Euclidean algorithm<br/>GcdInteger\u00a0:= function(a, b)<br/>    local c;<br/>    a\u00a0:= AbsInt(a);<br/>    b\u00a0:= AbsInt(b);<br/>    while b &gt; 0 do<br/>        c\u00a0:= a;<br/>        a\u00a0:= b;<br/>        b\u00a0:= RemInt(c, b);<br/>    od;<br/>    return a;<br/>end;<br/>\u00a0<br/>GcdInteger(35, 42);<br/># 7</pre>"}, {"lang": "Genyris", "loc": 6, "block": "<pre class=\"text highlighted_source\">def gcd (u v)<br/>    u = (abs u)<br/>    v = (abs v)<br/>    cond<br/>       (equal? v 0) u<br/>       else (gcd v (% u v))</pre>"}, {"lang": "GFA Basic", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' Greatest Common Divisor<br/>'<br/>a%=24<br/>b%=112<br/>PRINT \"GCD of \";a%;\" and \";b%;\" is \";@gcd(a%,b%)<br/>'<br/>' Function computes gcd<br/>'<br/>FUNCTION gcd(a%,b%)<br/>  LOCAL t%<br/>  '<br/>  WHILE b%&lt;&gt;0<br/>    t%=a%<br/>    a%=b%<br/>    b%=t% MOD b%<br/>  WEND<br/>  '<br/>  RETURN ABS(a%)<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "GML", "loc": 12, "block": "<pre class=\"gml highlighted_source\">\u00a0<br/> <span class=\"kw1\">var</span> n<span class=\"sy0\">,</span>m<span class=\"sy0\">,</span>r<span class=\"sy0\">;</span><br/> n <span class=\"sy0\">=</span> <span class=\"kw3\">max</span><span class=\"br0\">(</span>argument0<span class=\"sy0\">,</span>argument1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> m <span class=\"sy0\">=</span> <span class=\"kw3\">min</span><span class=\"br0\">(</span>argument0<span class=\"sy0\">,</span>argument1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/> <span class=\"br0\">{</span><br/>  r <span class=\"sy0\">=</span> n <span class=\"kw1\">mod</span> m<span class=\"sy0\">;</span><br/>  n <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>  m <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "gnuplot", "loc": 1, "block": "<pre class=\"gnuplot highlighted_source\">gcd <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">b =</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\u00a0? a <span class=\"sy0\">:</span> gcd <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 43, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> gcd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> bgcd <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> res <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><br/>\u00a0<br/>    bgcd <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> res <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> a <span class=\"sy3\">==</span> b<span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> res <span class=\"sy3\">*</span> a<br/>\t<span class=\"kw1\">case</span> a <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; b <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> b<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>res<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">case</span> a <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> res<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">case</span> b <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> res<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">case</span> a &gt; b<span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy3\">-</span>b<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> res<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy3\">-</span>a<span class=\"sy1\">,</span> res<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> bgcd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">type</span> pair <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\ta <span class=\"kw4\">int</span><br/>\tb <span class=\"kw4\">int</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> testdata <span class=\"sy1\">[]</span>pair <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>pair<span class=\"sy1\">{</span><br/>\tpair<span class=\"sy1\">{</span><span class=\"nu0\">33</span><span class=\"sy1\">,</span> <span class=\"nu0\">77</span><span class=\"sy1\">},</span><br/>\tpair<span class=\"sy1\">{</span><span class=\"nu0\">49865</span><span class=\"sy1\">,</span> <span class=\"nu0\">69811</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testdata <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"gcd(%d,\u00a0%d) =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> v<span class=\"sy3\">.</span><span class=\"me1\">a</span><span class=\"sy1\">,</span> v<span class=\"sy3\">.</span><span class=\"me1\">b</span><span class=\"sy1\">,</span> gcd<span class=\"sy1\">(</span>v<span class=\"sy3\">.</span><span class=\"me1\">a</span><span class=\"sy1\">,</span> v<span class=\"sy3\">.</span><span class=\"me1\">b</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gcdR<br/>gcdR <span class=\"sy0\">=</span> <span class=\"br0\">{</span> m, n <span class=\"sy0\">-&gt;</span> m <span class=\"sy0\">=</span> m.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> m\u00a0: m<span class=\"sy0\">%</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n\u00a0: gcdR<span class=\"br0\">(</span>n, m<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:gcd\"><span class=\"kw3\">gcd</span></a> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:gcd\"><span class=\"kw3\">gcd</span></a> x y <span class=\"sy0\">=</span> gcd<span class=\"sy0\">_</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    gcd<span class=\"sy0\">_</span> a <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> a<br/>    gcd<span class=\"sy0\">_</span> a b <span class=\"sy0\">=</span> gcd<span class=\"sy0\">_</span> b <span class=\"br0\">(</span>a `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` b<span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 14, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">FUNCTION</span> gcd<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>     gcd <span class=\"sy1\">=</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>   <span class=\"kw1\">ELSE</span><br/>     aa <span class=\"sy1\">=</span> a<br/>     gcd <span class=\"sy1\">=</span> b<br/>     <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> 1E100<br/>       r <span class=\"sy1\">=</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>aa<span class=\"sy1\">,</span> gcd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span> r <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span><br/>       aa <span class=\"sy1\">=</span> gcd<br/>       gcd <span class=\"sy1\">=</span> r<br/>     <span class=\"kw1\">ENDDO</span><br/>   <span class=\"kw1\">ENDIF</span><br/> <span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> numbers   <span class=\"co1\"># gcd is part of the Icon Programming Library</span><br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> arg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"Usage: gcd n m\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\"><span class=\"kw2\">x</span>+.<span class=\"kw2\">y</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">long</span> a, <span class=\"kw4\">long</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw4\">long</span> factor<span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> loop<span class=\"sy0\">=</span> factor<span class=\"sy0\">;</span>loop <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>loop<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">%</span> loop <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">%</span> loop <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <span class=\"kw1\">return</span> loop<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  a <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  b <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> temp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>    a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>    b <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">%=</span> b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    b <span class=\"sy0\">%=</span> a<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEFINE gcd == [0 &gt;] [dup rollup rem] while pop.</pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">def recursive_gcd(a; b):<br/>  if b == 0 then a <br/>  else recursive_gcd(b; a\u00a0% b)<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre>julia&gt; gcd(4,12)\n4\njulia&gt; gcd(6,12)\n6\njulia&gt; gcd(7,12)\n1</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">gcd:{:[~x;y;_f[y;x!y]]}</pre>"}, {"lang": "Klong", "loc": 1, "block": "<pre class=\"text highlighted_source\">gcd::{:[~x;y:|~y;x:|x&gt;y;.f(y;x!y);.f(x;y!x)]}</pre>"}, {"lang": "Kotlin", "loc": 1, "block": "<pre class=\"text highlighted_source\">fun gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a\u00a0% b)</pre>"}, {"lang": "LabVIEW", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">defun</span> gcd<br/>  <span class=\"st0\">\"Get the greatest common divisor.\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">0</span><span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd b <span class=\"br0\">(</span><span class=\"kw1\">rem</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "LFE", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">defun</span> gcd<br/>  <span class=\"st0\">\"Get the greatest common divisor.\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">0</span><span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd b <span class=\"br0\">(</span><span class=\"kw1\">rem</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 13, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'iterative Euclid algorithm</span><br/><span class=\"kw1\">print</span> GCD<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GCD<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> b<br/>        c <span class=\"sy0\">=</span> a<br/>        a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> c <span class=\"kw1\">mod</span> b<br/>    <span class=\"kw1\">wend</span><br/>    GCD <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> <br/>\u00a0</pre>"}, {"lang": "Limbo", "loc": 7, "block": "<pre class=\"text highlighted_source\">gcd(x: int, y: int): int<br/>{<br/>\tif(y == 0)<br/>\t\treturn x;<br/>\treturn gcd(y, x\u00a0% y);<br/>}<br/>\u00a0</pre>"}, {"lang": "LiveCode", "loc": 8, "block": "<pre class=\"text highlighted_source\">function gcd x,y<br/>   repeat until y = 0<br/>      put x mod y into z<br/>      put y into x<br/>      put z into y<br/>   end repeat<br/>   return x<br/>end gcd</pre>"}, {"lang": "Logo", "loc": 4, "block": "<pre class=\"text highlighted_source\">to gcd\u00a0:a\u00a0:b<br/>  if\u00a0:b = 0 [output\u00a0:a]<br/>  output gcd\u00a0:b  modulo\u00a0:a\u00a0:b<br/>end</pre>"}, {"lang": "Lua", "loc": 15, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> b <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">return</span> gcd<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw3\">math.abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> demo<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of \"</span> <span class=\"sy0\">..</span> a <span class=\"sy0\">..</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">..</span> b <span class=\"sy0\">..</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">..</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>demo<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>demo<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>demo<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span></pre>"}, {"lang": "Lucid", "loc": 6, "block": "<pre class=\"text highlighted_source\">gcd(n,m) where<br/>   z = [% n, m\u00a0%] fby if x &gt; y then [% x - y, y\u00a0%] else [% x, y - x%] fi;<br/>   x = hd(z);<br/>   y = hd(tl(z));<br/>   gcd(n, m) = (x asa x*y eq 0) fby eod;<br/>end</pre>"}, {"lang": "Luck", "loc": 6, "block": "<pre class=\"text highlighted_source\">function gcd(a: int, b: int): int = (<br/>   if a==0 then b<br/>   else if b==0 then a<br/>   else if a&gt;b then gcd(b, a\u00a0% b)<br/>   else gcd(a, b\u00a0% a)<br/>)</pre>"}, {"lang": "M2000 Interpreter", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>gcd=lambda (u as long, v as long) -&gt; {<br/>           =if(v=0&amp;-&gt;abs(u), lambda(v, u mod v))<br/>}<br/>gcd_Iterative= lambda (m as long, n as long) -&gt; {<br/>   while m  {<br/>       let old_m = m<br/>       m = n mod m<br/>       n = old_m<br/>   }<br/>   =abs(n)<br/>}<br/>Module CheckGCD (f){<br/>      Print f(49865, 69811)=9973<br/>      Def ExpType$(x)=Type$(x)<br/>      Print ExpType$(f(49865, 69811))=\"Long\"<br/>}<br/>CheckGCD gcd<br/>CheckGCD gcd_Iterative<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">igcd( a, b )</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">GCD[a, b]</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>gcdValue<span class=\"br0\">]</span> = greatestcommondivisor<span class=\"br0\">(</span>integer1, integer2<span class=\"br0\">)</span><br/>   gcdValue = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/gcd.html\"><span class=\"kw2\">gcd</span></a><span class=\"br0\">(</span>integer1, integer2<span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">/* There is a function gcd(a, b) in Maxima, but one can rewrite it */<br/>gcd2(a, b)\u00a0:= block([a: abs(a), b: abs(b)], while b # 0 do [a, b]: [b, mod(a, b)], a)$<br/>\u00a0<br/>/* both will return 2^97 * 3^48 */<br/>gcd(100!, 6^100), factor;<br/>gcd2(100!, 6^100), factor;</pre>"}, {"lang": "MAXScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">fn gcdIter a b =<br/>(<br/>    while b &gt; 0 do<br/>    (<br/>        c = mod a b<br/>        a = b<br/>        b = c<br/>    )<br/>    abs a<br/>)</pre>"}, {"lang": "Mercury", "loc": 11, "block": "<pre class=\"text highlighted_source\">:- module gcd.<br/>\u00a0<br/>:- interface.<br/>:- import_module integer.<br/>\u00a0<br/>:- func gcd(integer, integer) = integer.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- pragma memo(gcd/2).<br/>gcd(A, B) = (if B = integer(0) then A else gcd(B, A mod B)).</pre>"}, {"lang": "MINIL", "loc": 14, "block": "<pre class=\"text highlighted_source\">// Greatest common divisor<br/>00 0E  GCD:   ENT  R0<br/>01 1E         ENT  R1<br/>02 21  Again: R2 = R1<br/>03 10  Loop:  R1 = R0<br/>04 02         R0 = R2<br/>05 2D  Minus: DEC  R2<br/>06 8A         JZ   Stop<br/>07 1D         DEC  R1<br/>08 C5         JNZ  Minus<br/>09 83         JZ   Loop<br/>0A 1D  Stop:  DEC  R1<br/>0B C2         JNZ  Again<br/>0C 80         JZ   GCD   // Display GCD in R0</pre>"}, {"lang": "MIPS Assembly", "loc": 14, "block": "<pre class=\"text highlighted_source\">gcd:<br/>  # a0 and a1 are the two integer parameters<br/>  # return value is in v0<br/>  move $t0, $a0<br/>  move $t1, $a1<br/>loop:<br/>  beq $t1, $0, done<br/>  div $t0, $t1<br/>  move $t0, $t1<br/>  mfhi $t1<br/>  j loop<br/>done:<br/>  move $v0, $t0<br/>  jr $ra</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre>\u0418\u041fA\t\u0418\u041fB\t/\t\u041f9\t\u041a\u0418\u041f9\t\u0418\u041fA\t\u0418\u041fB\t\u041fA\t\u0418\u041f9\t*\n-\t\u041fB\tx=0\t00\t\u0418\u041fA\t\u0421/\u041f\n</pre>"}, {"lang": "ML", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> gcd <span class=\"br0\">(</span>a, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> b<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> where <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span><br/>               <span class=\"sy0\">=</span> gcd <span class=\"br0\">(</span>a, b rem a<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> gcd <span class=\"br0\">(</span>b, a rem b<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 26, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> ggTkgV;<br/>\u00a0<br/><span class=\"kw1\">FROM</span>    InOut           <span class=\"kw1\">IMPORT</span>  ReadCard<span class=\"sy0\">,</span> WriteCard<span class=\"sy0\">,</span> WriteLn<span class=\"sy0\">,</span> WriteString<span class=\"sy0\">,</span> WriteBf;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>   x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> u<span class=\"sy0\">,</span> v        <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"x = \"</span><span class=\"br0\">)</span>;         WriteBf;        ReadCard <span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"y = \"</span><span class=\"br0\">)</span>;         WriteBf;        ReadCard <span class=\"br0\">(</span>y<span class=\"br0\">)</span>;<br/>  u <span class=\"sy0\">:=</span> x;<br/>  v <span class=\"sy0\">:=</span> y;<br/>  <span class=\"kw1\">WHILE</span>  x <span class=\"sy0\">#</span> y  <span class=\"kw1\">DO</span><br/>    <span class=\"coMULTI\">(*  ggT (x, y) = ggT (x0, y0), x * v + y * u = 2 * x0 * y0          *)</span><br/>    <span class=\"kw1\">IF</span>  x &gt; y  <span class=\"kw1\">THEN</span><br/>      x <span class=\"sy0\">:=</span> x <span class=\"sy0\">-</span> y;<br/>      u <span class=\"sy0\">:=</span> u <span class=\"sy0\">+</span> v<br/>    <span class=\"kw1\">ELSE</span><br/>      y <span class=\"sy0\">:=</span> y <span class=\"sy0\">-</span> x;<br/>      v <span class=\"sy0\">:=</span> v <span class=\"sy0\">+</span> u<br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"ggT =\"</span><span class=\"br0\">)</span>;        WriteCard <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>;               WriteLn;<br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"kgV =\"</span><span class=\"br0\">)</span>;        WriteCard <span class=\"br0\">(</span><span class=\"br0\">(</span>u<span class=\"sy0\">+</span>v<span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>;     WriteLn;<br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"u =\"</span><span class=\"br0\">)</span>;          WriteCard <span class=\"br0\">(</span>u<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>;               WriteLn;<br/>  WriteString <span class=\"br0\">(</span><span class=\"st0\">\"v =\"</span><span class=\"br0\">)</span>;          WriteCard <span class=\"br0\">(</span>v <span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>;              WriteLn<br/><span class=\"kw1\">END</span> ggTkgV.</pre>"}, {"lang": "Modula-3", "loc": 22, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> GCD <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GCD<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">RETURN</span> b;<br/>    <span class=\"kw1\">ELSIF</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">RETURN</span> a;<br/>    <span class=\"kw1\">ELSIF</span> a &gt; b <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">RETURN</span> GCD<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a <span class=\"kw1\">MOD</span> b<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>      <span class=\"kw1\">RETURN</span> GCD<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b <span class=\"kw1\">MOD</span> a<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> GCD;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of 100, 5 is \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>GCD<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of 5, 100 is \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>GCD<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of 7, 23 is \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>GCD<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> GCD.</pre>"}, {"lang": "MUMPS", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>GCD(A,B)<br/> QUIT:((A/1)'=(A\\1))!((B/1)'=(B\\1)) 0<br/> SET:A&lt;0 A=-A<br/> SET:B&lt;0 B=-B<br/> IF B'=0<br/> FOR  SET T=A#B,A=B,B=T QUIT:B=0\u00a0;ARGUEMENTLESS FOR NEEDS TWO SPACES<br/> QUIT A</pre>"}, {"lang": "MySQL", "loc": 26, "block": "<pre class=\"mysql highlighted_source\">\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DROP\"><span class=\"kw1\">DROP</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=EXISTS\"><span class=\"kw1\">EXISTS</span></a> gcd<span class=\"sy2\">;</span><br/>DELIMITER <span class=\"sy1\">|</span><br/>\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> gcd<span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">x</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a><span class=\"sy2\">,</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">y</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a><span class=\"br0\">)</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=RETURNS\"><span class=\"kw1\">RETURNS</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @dividend<span class=\"sy1\">=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/comparison-operators.html\"><span class=\"kw19\">GREATEST</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">ABS</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">x</span></a><span class=\"br0\">)</span><span class=\"sy2\">,</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">ABS</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">y</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @divisor<span class=\"sy1\">=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/comparison-operators.html\"><span class=\"kw19\">LEAST</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">ABS</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">x</span></a><span class=\"br0\">)</span><span class=\"sy2\">,</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">ABS</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">y</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> @divisor<span class=\"sy1\">=</span><span class=\"nu0\">0</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>    RETURN @dividend<span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @gcd<span class=\"sy1\">=</span><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=NULL\"><span class=\"kw3\">NULL</span></a><span class=\"sy2\">;</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> gcd <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> @gcd <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a><br/>    <span class=\"br0\">(</span><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> @tmp<span class=\"sy1\">:=</span>@dividend<span class=\"sy2\">,</span><br/>            @dividend<span class=\"sy1\">:=</span>@divisor <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=AS\"><span class=\"kw1\">AS</span></a> gcd<span class=\"sy2\">,</span><br/>            @divisor<span class=\"sy1\">:=</span>@tmp <span class=\"sy1\">%</span> @divisor <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=AS\"><span class=\"kw1\">AS</span></a> remainder<br/>       <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> mysql.help_relation <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> @divisor<span class=\"sy1\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=AS\"><span class=\"kw1\">AS</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/analysing-spatial-information.html\"><span class=\"kw27\">x</span></a><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> remainder<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy2\">;</span><br/>  RETURN @gcd<span class=\"sy2\">;</span><br/><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a><span class=\"sy2\">;</span><span class=\"sy1\">|</span><br/>\u00a0<br/>DELIMITER <span class=\"sy2\">;</span><br/>\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> gcd<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"sy2\">,</span> <span class=\"nu0\">9876</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 94, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">2000</span><br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Euclid's algorithm - iterative implementation</span><br/>method gcdEucidI<span class=\"br0\">(</span>a_, b_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">loop</span> while b_ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    c_ = a_ <span class=\"sy0\">//</span> b_<br/>    a_ = b_<br/>    b_ = c_<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> a_<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Euclid's algorithm - recursive implementation</span><br/>method gcdEucidR<span class=\"br0\">(</span>a_, b_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">if</span> b_ <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> a_ = gcdEucidR<span class=\"br0\">(</span>b_, a_ <span class=\"sy0\">//</span> b_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> a_<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"co1\">-- pairs of numbers, each number in the pair separated by a colon, each pair separated by a comma</span><br/>  <span class=\"kw1\">parse</span> arg tests<br/>  <span class=\"kw1\">if</span> tests = <span class=\"st0\">''</span> <span class=\"kw3\">then</span><br/>    tests = <span class=\"st0\">'0:0, 6:4, 7:21, 12:36, 33:77, 41:47, 99:51, 100:5, 7:23, 1989:867, 12345:9876, 40902:24140, 49865:69811, 137438691328:2305843008139952128'</span><br/>\u00a0<br/>  <span class=\"co1\">-- most of what follows is for formatting</span><br/>  xiterate = <span class=\"nu0\">0</span><br/>  xrecurse = <span class=\"nu0\">0</span><br/>  ll_ = <span class=\"nu0\">0</span><br/>  lr_ = <span class=\"nu0\">0</span><br/>  lgi = <span class=\"nu0\">0</span><br/>  lgr = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">1</span> until tests = <span class=\"st0\">''</span><br/>    xiterate<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = i_<br/>    xrecurse<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = i_<br/>    <span class=\"kw1\">parse</span> tests pair <span class=\"st0\">','</span> tests<br/>    <span class=\"kw1\">parse</span> pair l_ <span class=\"st0\">':'</span> r_ .<br/>\u00a0<br/>    <span class=\"co1\">-- get the GCDs</span><br/>    gcdi = gcdEucidI<span class=\"br0\">(</span>l_, r_<span class=\"br0\">)</span><br/>    gcdr = gcdEucidR<span class=\"br0\">(</span>l_, r_<span class=\"br0\">)</span><br/>\u00a0<br/>    xiterate<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> = l_ r_ gcdi<br/>    xrecurse<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> = l_ r_ gcdr<br/>    ll_ = ll_.<span class=\"kw6\">max</span><span class=\"br0\">(</span>l_.<span class=\"kw6\">strip</span>.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    lr_ = lr_.<span class=\"kw6\">max</span><span class=\"br0\">(</span>r_.<span class=\"kw6\">strip</span>.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    lgi = lgi.<span class=\"kw6\">max</span><span class=\"br0\">(</span>gcdi.<span class=\"kw6\">strip</span>.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    lgr = lgr.<span class=\"kw6\">max</span><span class=\"br0\">(</span>gcdr.<span class=\"kw6\">strip</span>.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> i_<br/>  <span class=\"co1\">-- save formatter sizes in stems</span><br/>  xiterate<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> = ll_ lr_ lgi<br/>  xrecurse<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> = ll_ lr_ lgr<br/>\u00a0<br/>  <span class=\"co1\">-- present results</span><br/>  showResults<span class=\"br0\">(</span>xiterate, <span class=\"st0\">'Euclid'</span><span class=\"st0\">'s algorithm - iterative'</span><span class=\"br0\">)</span><br/>  showResults<span class=\"br0\">(</span>xrecurse, <span class=\"st0\">'Euclid'</span><span class=\"st0\">'s algorithm - recursive'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">if</span> verifyResults<span class=\"br0\">(</span>xiterate, xrecurse<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Success: Results of iterative and recursive methods match'</span><br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Error:   Results of iterative and recursive methods do not match'</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method showResults<span class=\"br0\">(</span>stem, title<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">say</span> title<br/>  <span class=\"kw1\">parse</span> stem<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> ll lr lg<br/>  <span class=\"kw1\">loop</span> v_ = <span class=\"nu0\">1</span> to stem<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">parse</span> stem<span class=\"br0\">[</span>v_<span class=\"br0\">]</span> lv rv gcd .<br/>    <span class=\"kw1\">say</span> lv.<span class=\"kw6\">right</span><span class=\"br0\">(</span>ll<span class=\"br0\">)</span><span class=\"st0\">','</span> rv.<span class=\"kw6\">right</span><span class=\"br0\">(</span>lr<span class=\"br0\">)</span> <span class=\"st0\">':'</span> gcd.<span class=\"kw6\">right</span><span class=\"br0\">(</span>lg<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> v_<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method verifyResults<span class=\"br0\">(</span>stem1, stem2<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">if</span> stem1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">\\</span>= stem2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> BadArgumentException<br/>  T = <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  F = <span class=\"sy0\">\\</span>T<br/>  verified = T<br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">1</span> to stem1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> stem1<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> <span class=\"sy0\">\\</span>= stem2<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      verified = F<br/>      <span class=\"kw1\">leave</span> i_<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> i_<br/>  <span class=\"kw1\">return</span> verified<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 2, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#gcd\"><span class=\"kw1\">gcd</span></a> <span class=\"nu0\">12</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span>  <br/>  \u2192 <span class=\"nu0\">12</span></pre>"}, {"lang": "Nial", "loc": 3, "block": "<pre class=\"text highlighted_source\">|loaddefs 'niallib/gcd.ndf'<br/>|gcd 6 4<br/>=2</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">proc gcd_recursive(u, v: int64): int64 =<br/>    if u\u00a0%% v\u00a0!= 0:<br/>        result = gcd_recursive(v, u\u00a0%% v)<br/>    else:<br/>        result = v</pre>"}, {"lang": "Oberon-2", "loc": 24, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> GCD;<br/><span class=\"coMULTI\">(* Greatest Common Divisor *)</span><br/><span class=\"kw1\">IMPORT</span> <br/>  Out;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    r<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">LOOP</span><br/>      r <span class=\"sy0\">:=</span> a <span class=\"kw1\">MOD</span> b;<br/>      <span class=\"kw1\">IF</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> b <span class=\"kw1\">END</span>;<br/>      a <span class=\"sy0\">:=</span> b;b <span class=\"sy0\">:=</span> r<br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> Gcd;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of    12 and     8\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of   100 and     5\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of     7 and    23\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of    24 and  -112\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of 40902 and 24140\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Gcd<span class=\"br0\">(</span><span class=\"nu0\">40902</span><span class=\"sy0\">,</span><span class=\"nu0\">24140</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> GCD.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 25, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> GDC <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"GCD of \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" and \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" is \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>GDC<span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GDC<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      t <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t <span class=\"sy0\">:=</span> b<span class=\"sy0\">;</span>  b <span class=\"sy0\">:=</span> a<span class=\"sy0\">;</span>  a <span class=\"sy0\">:=</span> t<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t <span class=\"sy0\">:=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span>  a <span class=\"sy0\">:=</span> b<span class=\"sy0\">;</span>  b <span class=\"sy0\">:=</span> t<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span>      a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> b<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> a<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span> b <span class=\"kw1\">then</span> gcd b <span class=\"br0\">(</span>a <span class=\"kw1\">mod</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span>               gcd a <span class=\"br0\">(</span>b <span class=\"kw1\">mod</span> a<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\">r <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/gcd.html\"><span class=\"kw6\">gcd</span></a><span class=\"br0\">(</span>a<span class=\"sy5\">,</span> b<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">128 96 gcd</pre>"}, {"lang": "Order", "loc": 6, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8gcd ORDER_PP_FN( \\<br/>8fn(8U, 8V,                            \\<br/>    8if(8isnt_0(8V), 8gcd(8V, 8remainder(8U, 8V)), 8U)))</span><br/><span class=\"co1\">// No support for negative numbers</span></pre>"}, {"lang": "Oz", "loc": 18, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">UnsafeGCD</span> A B<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> B <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span><br/>        A<br/>     <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span>UnsafeGCD B A <span class=\"kw1\">mod</span> B<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">GCD</span> A B<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> A <span class=\"sy0\">==</span> 0 <span class=\"kw1\">andthen</span> B <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">raise</span> undefined<span class=\"br0\">(</span>gcd 0 0<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span>UnsafeGCD <span class=\"br0\">{</span>Abs A<span class=\"br0\">}</span> <span class=\"br0\">{</span>Abs B<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>GCD 456 <span class=\"sy0\">~</span>632<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">gcd</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal / Delphi / Free Pascal", "loc": 7, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> gcd_recursive<span class=\"br0\">(</span>u<span class=\"sy1\">,</span> v<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> u <span class=\"kw1\">mod</span> v &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        gcd_recursive <span class=\"sy1\">:</span><span class=\"sy3\">=</span> gcd_recursive<span class=\"br0\">(</span>v<span class=\"sy1\">,</span> u <span class=\"kw1\">mod</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        gcd_recursive <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> gcd_iter<span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$u</span> <span class=\"sy0\">%</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> gcd <span class=\"br0\">(</span>Int <span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> Int <span class=\"re0\">$b</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw1\">fail</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw3\">abs</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">function gcd(object u, atom v=0)<br/>atom t<br/>    if sequence(u) then<br/>        v = u[1]                        -- (for the typecheck)<br/>        t = floor(abs(v))<br/>        for i=2 to length(u) do<br/>            v = u[i]                    -- (for the typecheck)<br/>            t = gcd(t,v)<br/>        end for<br/>        return t<br/>    end if<br/>    u = floor(abs(u))<br/>    v = floor(abs(v))<br/>    while v do<br/>        t = u<br/>        u = v<br/>        v = remainder(t, v)<br/>    end while<br/>    return u<br/>end function</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de gcd (A B)<br/>   (until (=0 B)<br/>      (let M (% A B)<br/>         (setq A B B M) ) )<br/>   (abs A) )</pre>"}, {"lang": "PHP", "loc": 14, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> gcdIter<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$m</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>GCD: procedure (a, b) returns (fixed binary (31)) recursive;<br/>   declare (a, b) fixed binary (31);<br/>\u00a0<br/>   if b = 0 then return (a);<br/>\u00a0<br/>   return (GCD (b, mod(a, b)) );<br/>\u00a0<br/>end GCD;<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre class=\"text highlighted_source\">gcd_n(15, 12, 2) =&gt;</pre>"}, {"lang": "PostScript", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/gcd {<br/>{   <br/>    {0 gt} {dup rup mod} {pop exit} ifte<br/>} loop<br/>}.<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>GCD <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$y</span> <span class=\"br0\">}</span><br/>  <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw4\">-gt</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><br/>    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span><br/>    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><br/>    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">return</span> <span class=\"re0\">$b</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 4, "block": "<pre class=\"prolog highlighted_source\">gcd<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>gcd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>gcd<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy1\">:-</span> X <span class=\"sy6\">&gt;</span> Y<span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> Y<span class=\"sy4\">,</span> gcd<span class=\"br0\">(</span>Y<span class=\"sy4\">,</span> Z<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>gcd<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy1\">:-</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> X<span class=\"sy4\">,</span> gcd<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Z<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 9, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> GCD<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> r<br/>  <span class=\"kw1\">While</span> y <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/>    r <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> y<br/>    x <span class=\"sy0\">=</span> y<br/>    y <span class=\"sy0\">=</span> r<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> y<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Purity", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data Iterate = f =&gt; FoldNat &lt;const id, g =&gt; $g . $f&gt;<br/>\u00a0<br/>data Sub = Iterate Pred<br/>data IsZero = &lt;const True, const False&gt; . UnNat<br/>\u00a0<br/>data Eq = FoldNat <br/>          &lt;<br/>              const IsZero, <br/>              eq =&gt; n =&gt; IfThenElse (IsZero $n) <br/>                         False <br/>                         ($eq (Pred $n))<br/>          &gt;<br/>\u00a0<br/>data step = gcd =&gt; n =&gt; m =&gt; <br/>                    IfThenElse (Eq $m $n) <br/>                        (Pair $m $n) <br/>                        (IfThenElse (Compare Leq $n $m) <br/>                            ($gcd (Sub $m $n) $m) <br/>                            ($gcd (Sub $n $m) $n))<br/>\u00a0<br/>data gcd = Iterate (gcd =&gt; uncurry (step (curry $gcd)))<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> gcd</pre>"}, {"lang": "Qi", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define gcd<br/>  A 0 -&gt; A<br/>  A B -&gt; (gcd B (MOD A B)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">\"%gcd%\" &lt;- function(u, v) {<br/>  ifelse(u\u00a0%% v\u00a0!= 0, v\u00a0%gcd% (u%%v), v)<br/>}</pre>"}, {"lang": "Racket", "loc": 3, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(gcd 14 63)</pre>"}, {"lang": "Rascal", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>public int gcd_iterative(int a, b){<br/>\tif(a == 0) return b;<br/>\twhile(b\u00a0!= 0){<br/>\t\tif(a &gt; b) a -= b;<br/>\t\telse b -= a;}<br/>\treturn a;<br/>}<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 7, "block": "<pre class=\"text highlighted_source\">define gcd use $u, $v<br/>   $v 0 &gt; if<br/>      $u $v\u00a0%   $v  gcd<br/>   else<br/>      $u abs<br/>\u00a0<br/>24140 40902 gcd</pre>"}, {"lang": "REBOL", "loc": 14, "block": "<pre class=\"rebol highlighted_source\">gcd: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">{</span>Returns the greatest common divisor of m <span class=\"kw3\">and</span> n.<span class=\"br0\">}</span><br/>    m <span class=\"br0\">[</span><span class=\"kw1\">integer!</span><span class=\"br0\">]</span><br/>    n <span class=\"br0\">[</span><span class=\"kw1\">integer!</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">/</span>local k<br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    <span class=\"co1\">; Euclid's algorithm</span><br/>    <span class=\"kw2\">while</span> <span class=\"br0\">[</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>        k: m<br/>        m: n<br/>        n: k <span class=\"sy0\">//</span> m<br/>    <span class=\"br0\">]</span><br/>    m<br/><span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">: gcd ( ab-n ) [ tuck mod dup ] while drop\u00a0;</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the  GCD (Greatest Common Divisor)  of any number of integers.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">2000</span>                              <span class=\"coMULTI\">/*handle up to 2k decimal dig integers.*/</span><br/><span class=\"kw1\">call</span> gcd <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>           \u00a0;    <span class=\"kw1\">call</span> gcd <span class=\"nu0\">55</span> <span class=\"nu0\">0</span>    \u00a0;       <span class=\"kw1\">call</span> gcd <span class=\"nu0\">0</span>    <span class=\"nu0\">66</span><br/><span class=\"kw1\">call</span> gcd <span class=\"nu0\">7</span>,<span class=\"nu0\">21</span>          \u00a0;    <span class=\"kw1\">call</span> gcd <span class=\"nu0\">41</span>,<span class=\"nu0\">47</span>   \u00a0;       <span class=\"kw1\">call</span> gcd <span class=\"nu0\">99</span> , <span class=\"nu0\">51</span><br/><span class=\"kw1\">call</span> gcd <span class=\"nu0\">24</span>, -<span class=\"nu0\">8</span>        \u00a0;    <span class=\"kw1\">call</span> gcd -<span class=\"nu0\">36</span>, <span class=\"nu0\">9</span>  \u00a0;       <span class=\"kw1\">call</span> gcd -<span class=\"nu0\">54</span>, -<span class=\"nu0\">6</span><br/><span class=\"kw1\">call</span> gcd <span class=\"nu0\">14</span> <span class=\"nu0\">0</span> <span class=\"nu0\">7</span>        \u00a0;    <span class=\"kw1\">call</span> gcd <span class=\"nu0\">14</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span>  \u00a0;       <span class=\"kw1\">call</span> gcd <span class=\"nu0\">0</span>  <span class=\"nu0\">14</span> <span class=\"nu0\">7</span><br/><span class=\"kw1\">call</span> gcd <span class=\"nu0\">15</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">30</span> <span class=\"nu0\">55</span>\u00a0;    <span class=\"kw1\">call</span> gcd <span class=\"nu0\">137438691328</span>  <span class=\"nu0\">2305843008139952128</span> <span class=\"coMULTI\">/*\u25c4\u2500\u25002 perfect#s*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>gcd: <span class=\"kw1\">procedure</span>;  $=;              <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  $=$ <span class=\"kw1\">arg</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*arg list.*/</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $ x z <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> x=z;   x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/* 0 case? */</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;   y=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$,j<span class=\"br0\">)</span><span class=\"br0\">)</span>;       <span class=\"kw1\">if</span> y=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*is zero? */</span><br/>              <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> _==<span class=\"nu0\">0</span>;  _=x<span class=\"sy0\">//</span>y;  x=y;  y=_;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 the heavy lifting.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'GCD (Greatest Common Divisor) of '</span>   <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">space</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>,<span class=\"st0\">\",\"</span>,<span class=\"st0\">' '</span><span class=\"br0\">)</span>   <span class=\"st0\">\"  is  \"</span>   x<br/>     <span class=\"kw1\">return</span> x</pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see gcd (24, 32)<br/>func gcd gcd, b<br/>     while b<br/>           c   = gcd<br/>           gcd = b<br/>           b   = c\u00a0% b<br/>     end<br/>     return gcd<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"nu0\">40902</span>.<span class=\"me1\">gcd</span><span class=\"br0\">(</span><span class=\"nu0\">24140</span><span class=\"br0\">)</span>  <span class=\"co1\"># =&gt; 34</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">print abs(gcd(-220,160))<br/>function gcd(gcd,b)<br/>    while b<br/>        c   = gcd<br/>        gcd = b<br/>        b   = c mod b<br/>    wend<br/>end function </pre>"}, {"lang": "Rust", "loc": 2, "block": "<pre class=\"text highlighted_source\">extern crate num;<br/>use num::integer::gcd;</pre>"}, {"lang": "Sather", "loc": 52, "block": "<pre class=\"text highlighted_source\">class MATH is<br/>\u00a0<br/>  gcd_iter(u, v:INT):INT is<br/>    loop while!( v.bool );<br/>      t\u00a0::= u; u\u00a0:= v; v\u00a0:= t\u00a0% v;<br/>    end;<br/>    return u.abs;<br/>  end;<br/>\u00a0<br/>  gcd(u, v:INT):INT is<br/>    if v.bool then return gcd(v, u%v); end;<br/>    return u.abs;<br/>  end;<br/>\u00a0<br/>\u00a0<br/>  private swap(inout a, inout b:INT) is<br/>    t\u00a0::= a;<br/>    a\u00a0:= b;<br/>    b\u00a0:= t;<br/>  end;<br/>\u00a0<br/>  gcd_bin(u, v:INT):INT is<br/>    t:INT;<br/>\u00a0<br/>    u\u00a0:= u.abs; v\u00a0:= v.abs;<br/>    if u &lt; v then swap(inout u, inout v); end;<br/>    if v = 0 then return u; end;<br/>    k\u00a0::= 1;<br/>    loop while!( u.is_even and v.is_even );<br/>      u\u00a0:= u / 2; v\u00a0:= v / 2;<br/>      k\u00a0:= k * 2;<br/>    end;<br/>    if u.is_even then<br/>      t\u00a0:= -v;<br/>    else<br/>      t\u00a0:= u;<br/>    end;<br/>    loop while!( t.bool );<br/>      loop while!( t.is_even );<br/>        t\u00a0:= t / 2;<br/>      end;<br/>      if t &gt; 0 then <br/>        u\u00a0:= t;<br/>      else<br/>        v\u00a0:= -t;<br/>      end;<br/>      t\u00a0:= u - v;<br/>    end;<br/>    return u * k;<br/>  end;<br/>\u00a0<br/>end;</pre>"}, {"lang": "Sass/SCSS", "loc": 10, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span>function gcd<span class=\"br0\">(</span>$a<span class=\"sy0\">,</span>$b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw1\">while</span> $b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><br/>\t\t$c<span class=\"sy0\">:</span> $a <span class=\"sy0\">%</span> $b<span class=\"sy0\">;</span><br/>\t\t$a<span class=\"sy0\">:</span> $b<span class=\"sy0\">;</span><br/>\t\t$b<span class=\"sy0\">:</span> $c<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw1\">return</span> $a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a.<span class=\"me1\">abs</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> gcd<span class=\"br0\">(</span>b, a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 4, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"kw1\">gcd</span> a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> b <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      a<br/>      <span class=\"br0\">(</span><span class=\"kw1\">gcd</span> b <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sed", "loc": 310, "block": "<pre class=\"text highlighted_source\">#! /bin/sed -nf<br/>\u00a0<br/># gcd.sed Copyright (c) 2010        by Pawe\u0142 Zuzelski &lt;<a class=\"__cf_email__\" data-cfemail=\"17677660727b6d57677b733a7b7e79626f39786570\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;<br/># dc.sed  Copyright (c) 1995 - 1997 by Greg Ubben &lt;<a class=\"__cf_email__\" data-cfemail=\"6b0c181e2b1904061e071e18450508180845060207\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;<br/>\u00a0<br/># usage:<br/>#<br/>#     echo N M | ./gcd.sed<br/>#<br/># Computes the greatest common divisor of N and M integers using euclidean<br/># algorithm.<br/>\u00a0<br/>s/^/|P|K0|I10|O10|?~/<br/>\u00a0<br/>s/$/ [lalb%sclbsalcsblb0&lt;F]sF sasblFxlap/<br/>\u00a0<br/>:next<br/>s/|?./|?/<br/>s/|?#[\t -}]*/|?/<br/>/|?!*[lLsS;:&lt;&gt;=]\\{0,1\\}$/N<br/>/|?!*[-+*/%^&lt;&gt;=]/b binop<br/>/^|.*|?[dpPfQXZvxkiosStT;:]/b binop<br/>/|?[_0-9A-F.]/b number<br/>/|?\\[/b string<br/>/|?l/b load<br/>/|?L/b Load<br/>/|?[sS]/b save<br/>/|?c/ s/[^|]*//<br/>/|?d/ s/[^~]*~/&amp;&amp;/<br/>/|?f/ s//&amp;[pSbz0&lt;aLb]dSaxsaLa/<br/>/|?x/ s/\\([^~]*~\\)\\(.*|?x\\)~*/\\2\\1/<br/>/|?[KIO]/ s/.*|\\([KIO]\\)\\([^|]*\\).*|?\\1/\\2~&amp;/<br/>/|?T/ s/\\.*0*~/~/<br/>#  a slow, non-stackable array implementation in dc, just for completeness<br/>#  A fast, stackable, associative array implementation could be done in sed<br/>#  (format: {key}value{key}value...), but would be longer, like load &amp; save.<br/>/|?;/ s/|?;\\([^{}]\\)/|?~[s}s{L{s}q]S}[S}l\\1L}1-d0&gt;}s\\1L\\1l{xS\\1]dS{xL}/<br/>/|?:/ s/|?:\\([^{}]\\)/|?~[s}L{s}L{s}L}s\\1q]S}S}S{[L}1-d0&gt;}S}l\\1s\\1L\\1l{xS\\1]dS{x/<br/>/|?[ ~\tcdfxKIOT]/b next<br/>/|?\\n/b next<br/>/|?[pP]/b print<br/>/|?k/ s/^\\([0-9]\\{1,3\\}\\)\\([.~].*|K\\)[^|]*/\\2\\1/<br/>/|?i/ s/^\\(-\\{0,1\\}[0-9]*\\.\\{0,1\\}[0-9]\\{1,\\}\\)\\(~.*|I\\)[^|]*/\\2\\1/<br/>/|?o/ s/^\\(-\\{0,1\\}[1-9][0-9]*\\.\\{0,1\\}[0-9]*\\)\\(~.*|O\\)[^|]*/\\2\\1/<br/>/|?[kio]/b pop<br/>/|?t/b trunc<br/>/|??/b input<br/>/|?Q/b break<br/>/|?q/b quit<br/>h<br/>/|?[XZz]/b count<br/>/|?v/b sqrt<br/>s/.*|?\\([^Y]\\).*/\\1 is unimplemented/<br/>s/\\n/\\\\n/g<br/>l<br/>g<br/>b next<br/>\u00a0<br/>:print<br/>/^-\\{0,1\\}[0-9]*\\.\\{0,1\\}[0-9]\\{1,\\}~.*|?p/!b Print<br/>/|O10|/b Print<br/>\u00a0<br/>#  Print a number in a non-decimal output base.  Uses registers a,b,c,d.<br/>#  Handles fractional output bases (O&lt;-1 or O&gt;=1), unlike other dc's.<br/>#  Converts the fraction correctly on negative output bases, unlike<br/>#  UNIX dc.  Also scales the fraction more accurately than UNIX dc.<br/>#<br/>s,|?p,&amp;KSa0kd[[-]Psa0la-]Sad0&gt;a[0P]sad0=a[A*2+]saOtd0&gt;a1-ZSd[[[[ ]P]sclb1\\<br/>!=cSbLdlbtZ[[[-]P0lb-sb]sclb0&gt;c1+]sclb0!&lt;c[0P1+dld&gt;c]scdld&gt;cscSdLbP]q]Sb\\<br/>[t[1P1-d0&lt;c]scd0&lt;c]ScO_1&gt;bO1!&lt;cO[16]&lt;bOX0&lt;b[[q]sc[dSbdA&gt;c[A]sbdA=c[B]sbd\\<br/>B=c[C]sbdC=c[D]sbdD=c[E]sbdE=c[F]sb]xscLbP]~Sd[dtdZOZ+k1O/Tdsb[.5]*[.1]O\\<br/>X^*dZkdXK-1+ktsc0kdSb-[Lbdlb*lc+tdSbO*-lb0!=aldx]dsaxLbsb]sad1!&gt;a[[.]POX\\<br/>+sb1[SbO*dtdldx-LbO*dZlb!&lt;a]dsax]sadXd0&lt;asbsasaLasbLbscLcsdLdsdLdLak[]pP,<br/>b next<br/>\u00a0<br/>:Print<br/>/|?p/s/[^~]*/&amp;\\<br/>~&amp;/<br/>s/\\(.*|P\\)\\([^|]*\\)/\\<br/>\\2\\1/<br/>s/\\([^~]*\\)\\n\\([^~]*\\)\\(.*|P\\)/\\1\\3\\2/<br/>h<br/>s/~.*//<br/>/./{ s/.//; p; }<br/>#  Just s/.//p would work if we knew we were running under the -n option.<br/>#  Using l vs p would kind of do \\ continuations, but would break strings.<br/>g<br/>\u00a0<br/>:pop<br/>s/[^~]*~//<br/>b next<br/>\u00a0<br/>:load<br/>s/\\(.*|?.\\)\\(.\\)/\\20~\\1/<br/>s/^\\(.\\)0\\(.*|r\\1\\([^~|]*\\)~\\)/\\1\\3\\2/<br/>s/.//<br/>b next<br/>\u00a0<br/>:Load<br/>s/\\(.*|?.\\)\\(.\\)/\\2\\1/<br/>s/^\\(.\\)\\(.*|r\\1\\)\\([^~|]*~\\)/|\\3\\2/<br/>/^|/!i\\<br/>register empty<br/>s/.//<br/>b next<br/>\u00a0<br/>:save<br/>s/\\(.*|?.\\)\\(.\\)/\\2\\1/<br/>/^\\(.\\).*|r\\1/\u00a0!s/\\(.\\).*|/&amp;r\\1|/<br/>/|?S/ s/\\(.\\).*|r\\1/&amp;~/<br/>s/\\(.\\)\\([^~]*~\\)\\(.*|r\\1\\)[^~|]*~\\{0,1\\}/\\3\\2/<br/>b next<br/>\u00a0<br/>:quit<br/>t quit<br/>s/|?[^~]*~[^~]*~/|?q/<br/>t next<br/>#  Really should be using the -n option to avoid printing a final newline.<br/>s/.*|P\\([^|]*\\).*/\\1/<br/>q<br/>\u00a0<br/>:break<br/>s/[0-9]*/&amp;;987654321009;/<br/>:break1<br/>s/^\\([^;]*\\)\\([1-9]\\)\\(0*\\)\\([^1]*\\2\\(.\\)[^;]*\\3\\(9*\\).*|?.\\)[^~]*~/\\1\\5\\6\\4/<br/>t break1<br/>b pop<br/>\u00a0<br/>:input<br/>N<br/>s/|??\\(.*\\)\\(\\n.*\\)/|?\\2~\\1/<br/>b next<br/>\u00a0<br/>:count<br/>/|?Z/ s/~.*//<br/>/^-\\{0,1\\}[0-9]*\\.\\{0,1\\}[0-9]\\{1,\\}$/ s/[-.0]*\\([^.]*\\)\\.*/\\1/<br/>/|?X/ s/-*[0-9A-F]*\\.*\\([0-9A-F]*\\).*/\\1/<br/>s/|.*//<br/>/~/ s/[^~]//g<br/>\u00a0<br/>s/./a/g<br/>:count1<br/>\ts/a\\{10\\}/b/g<br/>\ts/b*a*/&amp;a9876543210;/<br/>\ts/a.\\{9\\}\\(.\\).*;/\\1/<br/>\ty/b/a/<br/>/a/b count1<br/>G<br/>/|?z/ s/\\n/&amp;~/<br/>s/\\n[^~]*//<br/>b next<br/>\u00a0<br/>:trunc<br/>#  for efficiency, doesn't pad with 0s, so 10k 2 5/ returns just .40<br/>#  The X* here and in a couple other places works around a SunOS 4.x sed bug.<br/>s/\\([^.~]*\\.*\\)\\(.*|K\\([^|]*\\)\\)/\\3;9876543210009909:\\1,\\2/<br/>:trunc1<br/>\ts/^\\([^;]*\\)\\([1-9]\\)\\(0*\\)\\([^1]*\\2\\(.\\)[^:]*X*\\3\\(9*\\)[^,]*\\),\\([0-9]\\)/\\1\\5\\6\\4\\7,/<br/>t trunc1<br/>s/[^:]*:\\([^,]*\\)[^~]*/\\1/<br/>b normal<br/>\u00a0<br/>:number<br/>s/\\(.*|?\\)\\(_\\{0,1\\}[0-9A-F]*\\.\\{0,1\\}[0-9A-F]*\\)/\\2~\\1~/<br/>s/^_/-/<br/>/^[^A-F~]*~.*|I10|/b normal<br/>/^[-0.]*~/b normal<br/>s:\\([^.~]*\\)\\.*\\([^~]*\\):[Ilb^lbk/,\\1\\2~0A1B2C3D4E5F1=11223344556677889900;.\\2:<br/>:digit<br/>    s/^\\([^,]*\\),\\(-*\\)\\([0-F]\\)\\([^;]*\\(.\\)\\3[^1;]*\\(1*\\)\\)/I*+\\1\\2\\6\\5~,\\2\\4/<br/>t digit<br/>s:...\\([^/]*.\\)\\([^,]*\\)[^.]*\\(.*|?.\\):\\2\\3KSb[99]k\\1]SaSaXSbLalb0&lt;aLakLbktLbk:<br/>b next<br/>\u00a0<br/>:string<br/>/|?[^]]*$/N<br/>s/\\(|?[^]]*\\)\\[\\([^]]*\\)]/\\1|{\\2|}/<br/>/|?\\[/b string<br/>s/\\(.*|?\\)|{\\(.*\\)|}/\\2~\\1[/<br/>s/|{/[/g<br/>s/|}/]/g<br/>b next<br/>\u00a0<br/>:binop<br/>/^[^~|]*~[^|]/\u00a0!i\\<br/>stack empty<br/>//!b next<br/>/^-\\{0,1\\}[0-9]*\\.\\{0,1\\}[0-9]\\{1,\\}~/\u00a0!s/[^~]*\\(.*|?!*[^!=&lt;&gt;]\\)/0\\1/<br/>/^[^~]*~-\\{0,1\\}[0-9]*\\.\\{0,1\\}[0-9]\\{1,\\}~/\u00a0!s/~[^~]*\\(.*|?!*[^!=&lt;&gt;]\\)/~0\\1/<br/>h<br/>/|?\\*/b mul<br/>/|?\\//b div<br/>/|?%/b rem<br/>/|?^/b exp<br/>\u00a0<br/>/|?[+-]/ s/^\\(-*\\)\\([^~]*~\\)\\(-*\\)\\([^~]*~\\).*|?\\(-\\{0,1\\}\\).*/\\2\\4s\\3o\\1\\3\\5/<br/>s/\\([^.~]*\\)\\([^~]*~[^.~]*\\)\\(.*\\)/&lt;\\1,\\2,\\3|=-~.0,123456789&lt;&gt;&lt;/<br/>/^&lt;\\([^,]*,[^~]*\\)\\.*0*~\\1\\.*0*~/ s/&lt;/=/<br/>:cmp1<br/>\ts/^\\(&lt;[^,]*\\)\\([0-9]\\),\\([^,]*\\)\\([0-9]\\),/\\1,\\2\\3,\\4/<br/>t cmp1<br/>/^&lt;\\([^~]*\\)\\([^~]\\)[^~]*~\\1\\(.\\).*|=.*\\3.*\\2/ s/&lt;/&gt;/<br/>/|?/{<br/>\ts/^\\([&lt;&gt;]\\)\\(-[^~]*~-.*\\1\\)\\(.\\)/\\3\\2/<br/>\ts/^\\(.\\)\\(.*|?!*\\)\\1/\\2!\\1/<br/>\ts/|?![^!]\\(.\\)/&amp;l\\1x/<br/>\ts/[^~]*~[^~]*~\\(.*|?\\)!*.\\(.*\\)|=.*/\\1\\2/<br/>\tb next<br/>}<br/>s/\\(-*\\)\\1|=.*/;9876543210;9876543210/<br/>/o-/ s/;9876543210/;0123456789/<br/>s/^&gt;\\([^~]*~\\)\\([^~]*~\\)s\\(-*\\)\\(-*o\\3\\(-*\\)\\)/&gt;\\2\\1s\\5\\4/<br/>\u00a0<br/>s/,\\([0-9]*\\)\\.*\\([^,]*\\),\\([0-9]*\\)\\.*\\([0-9]*\\)/\\1,\\2\\3.,\\4;0/<br/>:right1<br/>\ts/,\\([0-9]\\)\\([^,]*\\),;*\\([0-9]\\)\\([0-9]*\\);*0*/\\1,\\2\\3,\\4;0/<br/>t right1<br/>s/.\\([^,]*\\),~\\(.*\\);0~s\\(-*\\)o-*/\\1~\\30\\2~/<br/>\u00a0<br/>:addsub1<br/>\ts/\\(.\\{0,1\\}\\)\\(~[^,]*\\)\\([0-9]\\)\\(\\.*\\),\\([^;]*\\)\\(;\\([^;]*\\(\\3[^;]*\\)\\).*X*\\1\\(.*\\)\\)/\\2,\\4\\5\\9\\8\\7\\6/<br/>\ts/,\\([^~]*~\\).\\{10\\}\\(.\\)[^;]\\{0,9\\}\\([^;]\\{0,1\\}\\)[^;]*/,\\2\\1\\3/<br/>#\t  could be done in one s/// if we could have &gt;9 back-refs...<br/>/^~.*~;/!b addsub1<br/>\u00a0<br/>:endbin<br/>s/.\\([^,]*\\),\\([0-9.]*\\).*/\\1\\2/<br/>G<br/>s/\\n[^~]*~[^~]*//<br/>\u00a0<br/>:normal<br/>s/^\\(-*\\)0*\\([0-9.]*[0-9]\\)[^~]*/\\1\\2/<br/>s/^[^1-9~]*~/0~/<br/>b next<br/>\u00a0<br/>:mul<br/>s/\\(-*\\)\\([0-9]*\\)\\.*\\([0-9]*\\)~\\(-*\\)\\([0-9]*\\)\\.*\\([0-9]*\\).*|K\\([^|]*\\).*/\\1\\4\\2\\5.!\\3\\6,|\\2&lt;\\3~\\5&gt;\\6:\\7;9876543210009909/<br/>\u00a0<br/>:mul1<br/>    s/![0-9]\\([^&lt;]*\\)&lt;\\([0-9]\\{0,1\\}\\)\\([^&gt;]*\\)&gt;\\([0-9]\\{0,1\\}\\)/0!\\1\\2&lt;\\3\\4&gt;/<br/>    /![0-9]/ s/\\(:[^;]*\\)\\([1-9]\\)\\(0*\\)\\([^0]*\\2\\(.\\).*X*\\3\\(9*\\)\\)/\\1\\5\\6\\4/<br/>/&lt;~[^&gt;]*&gt;:0*;/!t mul1<br/>\u00a0<br/>s/\\(-*\\)\\1\\([^&gt;]*\\).*/;\\2^&gt;:9876543210aaaaaaaaa/<br/>\u00a0<br/>:mul2<br/>    s/\\([0-9]~*\\)^/^\\1/<br/>    s/&lt;\\([0-9]*\\)\\(.*[~^]\\)\\([0-9]*\\)&gt;/\\1&lt;\\2&gt;\\3/<br/>\u00a0<br/>   \u00a0:mul3<br/>\ts/&gt;\\([0-9]\\)\\(.*\\1.\\{9\\}\\(a*\\)\\)/\\1&gt;\\2;9\\38\\37\\36\\35\\34\\33\\32\\31\\30/<br/>\ts/\\(;[^&lt;]*\\)\\([0-9]\\)&lt;\\([^;]*\\).*\\2[0-9]*\\(.*\\)/\\4\\1&lt;\\2\\3/<br/>\ts/a[0-9]/a/g<br/>\ts/a\\{10\\}/b/g<br/>\ts/b\\{10\\}/c/g<br/>    /|0*[1-9][^&gt;]*&gt;0*[1-9]/b mul3<br/>\u00a0<br/>    s/;/a9876543210;/<br/>    s/a.\\{9\\}\\(.\\)[^;]*\\([^,]*\\)[0-9]\\([.!]*\\),/\\2,\\1\\3/<br/>    y/cb/ba/<br/>/|&lt;^/!b mul2<br/>b endbin<br/>\u00a0<br/>:div<br/>#  CDDET<br/>/^[-.0]*[1-9]/\u00a0!i\\<br/>divide by 0<br/>//!b pop<br/>s/\\(-*\\)\\([0-9]*\\)\\.*\\([^~]*~-*\\)\\([0-9]*\\)\\.*\\([^~]*\\)/\\2.\\3\\1;0\\4.\\5;0/<br/>:div1<br/>\ts/^\\.0\\([^.]*\\)\\.;*\\([0-9]\\)\\([0-9]*\\);*0*/.\\1\\2.\\3;0/<br/>\ts/^\\([^.]*\\)\\([0-9]\\)\\.\\([^;]*;\\)0*\\([0-9]*\\)\\([0-9]\\)\\./\\1.\\2\\30\\4.\\5/<br/>t div1<br/>s/~\\(-*\\)\\1\\(-*\\);0*\\([^;]*[0-9]\\)[^~]*/~123456789743222111~\\2\\3/<br/>s/\\(.\\(.\\)[^~]*\\)[^9]*\\2.\\{8\\}\\(.\\)[^~]*/\\3~\\1/<br/>s,|?.,&amp;SaSadSaKdlaZ+LaX-1+[sb1]Sbd1&gt;bkLatsbLa[dSa2lbla*-*dLa!=a]dSaxsakLasbLb*t,<br/>b next<br/>\u00a0<br/>:rem<br/>s,|?%,&amp;Sadla/LaKSa[999]k*Lak-,<br/>b next<br/>\u00a0<br/>:exp<br/>#  This decimal method is just a little faster than the binary method done<br/>#  totally in dc:  1LaKLb [kdSb*LbK]Sb [[.5]*d0ktdSa&lt;bkd*KLad1&lt;a]Sa d1&lt;a kk*<br/>/^[^~]*\\./i\\<br/>fraction in exponent ignored<br/>s,[^-0-9].*,;9d**dd*8*d*d7dd**d*6d**d5d*d*4*d3d*2lbd**1lb*0,<br/>:exp1<br/>\ts/\\([0-9]\\);\\(.*\\1\\([d*]*\\)[^l]*\\([^*]*\\)\\(\\**\\)\\)/;dd*d**d*\\4\\3\\5\\2/<br/>t exp1<br/>G<br/>s,-*.\\{9\\}\\([^9]*\\)[^0]*0.\\(.*|?.\\),\\2~saSaKdsaLb0kLbkK*+k1\\1LaktsbkLax,<br/>s,|?.,&amp;SadSbdXSaZla-SbKLaLadSb[0Lb-d1lb-*d+K+0kkSb[1Lb/]q]Sa0&gt;a[dk]sadK&lt;a[Lb],<br/>b next<br/>\u00a0<br/>:sqrt<br/>#  first square root using sed:  8k2v at 1:30am Dec 17, 1996<br/>/^-/i\\<br/>square root of negative number<br/>/^[-0]/b next<br/>s/~.*//<br/>/^\\./ s/0\\([0-9]\\)/\\1/g<br/>/^\\./\u00a0!s/[0-9][0-9]/7/g<br/>G<br/>s/\\n/~/<br/>s,|?.,&amp;K1+k KSbSb[dk]SadXdK&lt;asadlb/lb+[.5]*[sbdlb/lb+[.5]*dlb&gt;a]dsaxsasaLbsaLatLbk K1-kt,<br/>b next<br/>\u00a0<br/>#  END OF GSU dc.sed</pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">const func integer: gcd (in var integer: a, in var integer: b) is func<br/>  result<br/>    var integer: gcd is 0;<br/>  local<br/>    var integer: help is 0;<br/>  begin<br/>    while a &lt;&gt; 0 do<br/>      help\u00a0:= b rem a;<br/>      b\u00a0:= a;<br/>      a\u00a0:= help;<br/>    end while;<br/>    gcd\u00a0:= b;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 4, "block": "<pre class=\"text highlighted_source\">gcd(a, b)\u00a0:=<br/>\t\ta when b = 0<br/>\telse<br/>\t\tgcd(b, a mod b);</pre>"}, {"lang": "SETL", "loc": 9, "block": "<pre class=\"text highlighted_source\">a\u00a0:= 33; b\u00a0:= 77;<br/>print(\" the gcd of\",a,\" and \",b,\" is \",gcd(a,b));<br/>\u00a0<br/>c\u00a0:= 49865; d\u00a0:= 69811;<br/>print(\" the gcd of\",c,\" and \",d,\" is \",gcd(c,d));<br/>\u00a0<br/>proc gcd (u, v);<br/>  return if v = 0 then abs u else gcd (v, u mod v) end;<br/>end;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var arr = <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">1</span>_000, <span class=\"nu0\">10</span>_000, <span class=\"nu0\">20</span><span class=\"br0\">]</span>;<br/>say <span class=\"kw4\">Math</span>.<span class=\"me1\">gcd</span><span class=\"br0\">(</span>arr...<span class=\"br0\">)</span>;</pre>"}, {"lang": "Simula", "loc": 23, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    INTEGER PROCEDURE GCD(a, b); INTEGER a, b;<br/>    BEGIN<br/>        IF a = 0 THEN a\u00a0:= b<br/>        ELSE<br/>            WHILE 0 &lt; b DO BEGIN INTEGER i;<br/>                i\u00a0:= MOD(a, b); a\u00a0:= b; b\u00a0:= i;<br/>            END;<br/>        GCD\u00a0:= a<br/>    END;<br/>\u00a0<br/>    INTEGER a, b;<br/>   \u00a0!outint(SYSOUT.IMAGE.MAIN.LENGTH, 0);!OUTIMAGE;!OUTIMAGE;<br/>   \u00a0!SYSOUT.IMAGE\u00a0:- BLANKS(132); \u00a0! this may or may not work;<br/>    FOR b\u00a0:= 1 STEP 5 UNTIL 37 DO BEGIN<br/>        FOR a\u00a0:= 0 STEP 2 UNTIL 21 DO BEGIN<br/>            OUTTEXT(\"  (\"); OUTINT(a, 0);<br/>            OUTCHAR(','); OUTINT(b, 2);<br/>            OUTCHAR(')'); OUTINT(GCD(a, b), 3);<br/>        END;<br/>        OUTIMAGE<br/>    END<br/>END</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">40902 gcd: 24140</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span><span class=\"re5\">40902</span> gcd: <span class=\"re5\">24140</span><span class=\"br0\">)</span> displayNl</pre>"}, {"lang": "SNOBOL4", "loc": 12, "block": "<pre class=\"text highlighted_source\">\tdefine('gcd(i,j)')\t:(gcd_end)<br/>gcd\t?eq(i,0)\t:s(freturn)<br/>\t?eq(j,0)\t:s(freturn)<br/>\u00a0<br/>loop\tgcd = remdr(i,j)<br/>\tgcd =\u00a0?eq(gcd,0) j\t:s(return)<br/>\ti = j<br/>\tj = gcd\t\t\t:(loop)<br/>gcd_end<br/>\u00a0<br/>\toutput = gcd(1071,1029)<br/>end</pre>"}, {"lang": "Sparkling", "loc": 33, "block": "<pre class=\"text highlighted_source\">function factors(n) {<br/>\tvar f = {};<br/>\u00a0<br/>\tfor var i = 2; n &gt; 1; i++ {<br/>\t\twhile n\u00a0% i == 0 {<br/>\t\t\tn /= i;<br/>\t\t\tf[i] = f[i]\u00a0!= nil\u00a0? f[i] + 1\u00a0: 1;<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\treturn f;<br/>}<br/>\u00a0<br/>function GCD(n, k) {<br/>\tlet f1 = factors(n);<br/>\tlet f2 = factors(k);<br/>\u00a0<br/>\tlet fs = map(f1, function(factor, multiplicity) {<br/>\t\tlet m = f2[factor];<br/>\t\treturn m == nil\u00a0? 0\u00a0: min(m, multiplicity);<br/>\t});<br/>\u00a0<br/>\tlet rfs = {};<br/>\tforeach(fs, function(k, v) {<br/>\t\trfs[sizeof rfs] = pow(k, v);<br/>\t});<br/>\u00a0<br/>\treturn reduce(rfs, 1, function(x, y) { return x * y; });<br/>}<br/>\u00a0<br/>function LCM(n, k) {<br/>\treturn n * k / GCD(n, k);<br/>}</pre>"}, {"lang": "SQL", "loc": 35, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">DROP</span> <span class=\"kw1\">TABLE</span> tbl;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> tbl<br/><span class=\"br0\">(</span><br/>        u       <span class=\"kw1\">NUMBER</span><span class=\"sy0\">,</span><br/>        v       <span class=\"kw1\">NUMBER</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> tbl <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> tbl <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> tbl <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> tbl <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> tbl <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/>commit;<br/>\u00a0<br/><span class=\"kw1\">WITH</span><br/>        <span class=\"kw1\">FUNCTION</span> gcd <span class=\"br0\">(</span> ui <span class=\"kw1\">IN</span> <span class=\"kw1\">NUMBER</span><span class=\"sy0\">,</span> vi <span class=\"kw1\">IN</span> <span class=\"kw1\">NUMBER</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"kw1\">NUMBER</span><br/>        <span class=\"kw1\">IS</span><br/>                u <span class=\"kw1\">NUMBER</span>\u00a0:<span class=\"sy0\">=</span> ui;<br/>                v <span class=\"kw1\">NUMBER</span>\u00a0:<span class=\"sy0\">=</span> vi;<br/>                t <span class=\"kw1\">NUMBER</span>;<br/>        <span class=\"kw1\">BEGIN</span><br/>                while v <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>                loop<br/>                        t\u00a0:<span class=\"sy0\">=</span> u;<br/>                        u\u00a0:<span class=\"sy0\">=</span> v;<br/>                        v:<span class=\"sy0\">=</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> v <span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">END</span> loop;<br/>                <span class=\"kw1\">RETURN</span> abs<span class=\"br0\">(</span>u<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span> gcd;<br/>        <span class=\"kw1\">SELECT</span> u<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> gcd <span class=\"br0\">(</span> u<span class=\"sy0\">,</span> v <span class=\"br0\">)</span><br/>        <span class=\"kw1\">FROM</span> tbl<br/><span class=\"sy0\">/</span><br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 9, "block": "<pre class=\"text highlighted_source\">function gcd(a_,b_) {<br/>\ta = abs(a_)<br/>\tb = abs(b_)<br/>\twhile (b&gt;0) {<br/>\t\ta = mod(a,b)<br/>\t\tswap(a,b)<br/>\t}<br/>\treturn(a)<br/>}</pre>"}, {"lang": "Swift", "loc": 36, "block": "<pre class=\"text highlighted_source\">// Iterative<br/>\u00a0<br/>func gcd(var a: Int, var b: Int) -&gt; Int {<br/>\u00a0<br/>    a = abs(a); b = abs(b)<br/>\u00a0<br/>    if (b &gt; a) { swap(&amp;a, &amp;b) }<br/>\u00a0<br/>    while (b &gt; 0) { (a, b) = (b, a\u00a0% b) }<br/>\u00a0<br/>    return a<br/>}<br/>\u00a0<br/>// Recursive<br/>\u00a0<br/>func gcdr (var a: Int, var b: Int) -&gt; Int {<br/>\u00a0<br/>    a = abs(a); b = abs(b)<br/>\u00a0<br/>    if (b &gt; a) { swap(&amp;a, &amp;b) }<br/>\u00a0<br/>    return gcd_rec(a,b)<br/>}<br/>\u00a0<br/>\u00a0<br/>private func gcd_rec(a: Int, b: Int) -&gt; Int {<br/>\u00a0<br/>    return b == 0\u00a0? a\u00a0: gcd_rec(b, a\u00a0% b)<br/>}<br/>\u00a0<br/>\u00a0<br/>for (a,b) in [(1,1), (100, -10), (10, -100), (-36, -17), (27, 18), (30, -42)] {<br/>\u00a0<br/>    println(\"Iterative: GCD of \\(a) and \\(b) is \\(gcd(a, b))\")<br/>    println(\"Recursive: GCD of \\(a) and \\(b) is \\(gcdr(a, b))\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> gcd_iter <span class=\"br0\">{</span>p q<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"sy0\">%</span> <span class=\"re0\">$p</span> <span class=\"re0\">$q</span><span class=\"br0\">]</span><span class=\"br0\">]</span> p q<br/>    <span class=\"br0\">}</span><br/>    abs <span class=\"re0\">$p</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC, TI-89 BASIC", "loc": 1, "block": "<pre>gcd(A,B)\n</pre>"}, {"lang": "TSE SAL", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>// library: math: get: greatest: common: divisor &lt;description&gt;greatest common divisor whole numbers. Euclid's algorithm. Recursive version&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.3&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmacdi.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, su, 20-01-2013 14:22:41]<br/>INTEGER PROC FNMathGetGreatestCommonDivisorI( INTEGER x1I, INTEGER x2I )<br/> //<br/> IF ( x2I == 0 )<br/>  //<br/>  RETURN( x1I )<br/>  //<br/> ENDIF<br/> //<br/> RETURN( FNMathGetGreatestCommonDivisorI( x2I, x1I MOD x2I ) )<br/> //<br/>END<br/>\u00a0<br/>PROC Main()<br/> STRING s1[255] = \"353\"<br/> STRING s2[255] = \"46\"<br/> REPEAT<br/>  IF ( NOT ( Ask( \" = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/>  IF ( NOT ( Ask( \" = \", s2, _EDIT_HISTORY_ ) ) AND ( Length( s2 ) &gt; 0 ) ) RETURN() ENDIF<br/>  Warn( FNMathGetGreatestCommonDivisorI( Val( s1 ), Val( s2 ) ) ) // gives e.g. 1<br/> UNTIL FALSE<br/>END<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"bash highlighted_source\">$ txr <span class=\"re5\">-p</span> <span class=\"st_h\">'(gcd (expt 2 123) (expt 6 49))'</span><br/><span class=\"nu0\">562949953421312</span></pre>"}, {"lang": "TypeScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  a <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  b <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    let temp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>    a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>    b <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">%=</span> b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    b <span class=\"sy0\">%=</span> a<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 14, "block": "<pre class=\"text highlighted_source\">Print \"GCD of 18\u00a0: 12 = \"; FUNC(_GCD_Iterative_Euclid(18,12))<br/>Print \"GCD of 1071\u00a0: 1029 = \"; FUNC(_GCD_Iterative_Euclid(1071,1029))<br/>Print \"GCD of 3528\u00a0: 3780 = \"; FUNC(_GCD_Iterative_Euclid(3528,3780))<br/>\u00a0<br/>End<br/>\u00a0<br/>_GCD_Iterative_Euclid Param(2)<br/>  Local (1)<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"650725\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"bcdffc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"82e3c2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"1f7e5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"88eac8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"89ebc9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"c6a586\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"8be9cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>Return (Abs(<a class=\"__cf_email__\" data-cfemail=\"97f6d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))</pre>"}, {"lang": "UNIX Shell", "loc": 14, "block": "<pre class=\"bash highlighted_source\">gcd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co0\"># Calculate $1\u00a0% $2 until $2 becomes zero.</span><br/>\t<span class=\"kw1\">until</span> <span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-eq</span> <span class=\"st0\">\"$2\"</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"co0\"># Parallel assignment: set -- 1 2</span><br/>\t\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"$2\"</span> <span class=\"st0\">\"<span class=\"es5\">`expr \"$1\"\u00a0% \"$2\"`</span>\"</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"co0\"># Echo absolute value of $1.</span><br/>\t<span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es5\">`expr 0 - \"$1\"`</span>\"</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>gcd <span class=\"re5\">-47376</span> <span class=\"nu0\">87843</span><br/><span class=\"co0\"># =&gt; 987</span></pre>"}, {"lang": "Ursa", "loc": 2, "block": "<pre class=\"text highlighted_source\">import \"math\"<br/>out (gcd 40902 24140) endl console</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>gcd = ~&amp;B?\\~&amp;Y ~&amp;alh^?\\~&amp;arh2faltPrXPRNfabt2RCQ @a ~&amp;ar^?\\~&amp;al ^|R/~&amp; ^/~&amp;r remainder</pre>"}, {"lang": "V", "loc": 1, "block": "<pre>[gcd\n   [0 &gt;] [dup rollup\u00a0%]\n   while\n   pop\n].\n</pre>"}, {"lang": "VBA", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function GCD(a As Long, b As Long) As Long<br/>While a &lt;&gt; b<br/>  If a &gt; b Then a = a - b Else b = b - a<br/>Wend<br/>GCD = a<br/>End Function<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 17, "block": "<pre class=\"text highlighted_source\">Function GCD(a,b)<br/>\tDo<br/>\t\tIf a Mod b &gt; 0 Then<br/>\t\t\tc = a Mod b<br/>\t\t\ta = b<br/>\t\t\tb = c<br/>\t\tElse<br/>\t\t\tGCD = b<br/>\t\t\tExit Do<br/>\t\tEnd If<br/>\tLoop<br/>End Function<br/>\u00a0<br/>WScript.Echo \"The GCD of 48 and 18 is \" &amp; GCD(48,18) &amp; \".\"<br/>WScript.Echo \"The GCD of 1280 and 240 is \" &amp; GCD(1280,240) &amp; \".\"<br/>WScript.Echo \"The GCD of 1280 and 240 is \" &amp; GCD(3475689,23566319) &amp; \".\"<br/>WScript.Echo \"The GCD of 1280 and 240 is \" &amp; GCD(123456789,234736437) &amp; \".\"</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@gcd a b</pre>"}, {"lang": "x86 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">.text<br/>.global pgcd<br/>\u00a0<br/>pgcd:<br/>        push   \u00a0%ebp<br/>        mov    \u00a0%esp,\u00a0%ebp<br/>\u00a0<br/>        mov     8(%ebp),\u00a0%eax<br/>        mov     12(%ebp),\u00a0%ecx<br/>        push   \u00a0%edx<br/>\u00a0<br/>.loop:<br/>        cmp     $0,\u00a0%ecx<br/>        je      .end<br/>        xor    \u00a0%edx,\u00a0%edx<br/>        div    \u00a0%ecx<br/>        mov    \u00a0%ecx,\u00a0%eax<br/>        mov    \u00a0%edx,\u00a0%ecx<br/>        jmp     .loop<br/>\u00a0<br/>.end:<br/>        pop    \u00a0%edx<br/>        leave<br/>        ret</pre>"}, {"lang": "XLISP", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> greatest-common-divisor <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> y <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\tx<br/>\t\t<span class=\"br0\">(</span>greatest-common-divisor y <span class=\"br0\">(</span>mod x y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 12, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func GCD(U, V); \\Return the greatest common divisor of U and V<br/>int  U, V;<br/>int  T;<br/>[while V do     \\Euclid's method<br/>    [T:= U;  U:= V;  V:= rem(T/V)];<br/>return abs(U);<br/>];<br/>\u00a0<br/>\\Display the GCD of two integers entered on command line<br/>IntOut(0, GCD(IntIn(8), IntIn(8)))</pre>"}, {"lang": "Yabasic", "loc": 14, "block": "<pre class=\"text highlighted_source\">sub gcd(u, v)<br/>    local t<br/>\u00a0<br/>    u = int(abs(u))<br/>    v = int(abs(v))<br/>    while(v)<br/>        t = u<br/>        u = v<br/>        v = mod(t, v)<br/>    wend<br/>    return u<br/>end sub<br/>\u00a0<br/>print \"Greatest common divisor: \", gcd(12345, 9876)</pre>"}, {"lang": "Z80 Assembly", "loc": 22, "block": "<pre class=\"z80 highlighted_source\"><span class=\"co1\">; Inputs: a, b</span><br/><span class=\"co1\">; Outputs: a = gcd(a, b)</span><br/><span class=\"co1\">; Destroys: c</span><br/><span class=\"co1\">; Assumes: a and b are positive one-byte integers</span><br/>gcd:<br/>    <span class=\"kw1\">cp</span> <span class=\"kw2\">b</span><br/>    <span class=\"kw1\">ret</span> z                   <span class=\"co1\">; while a\u00a0!= b</span><br/>\u00a0<br/>    <span class=\"kw1\">jr</span> <span class=\"kw2\">c</span>, else              <span class=\"co1\">; if a &gt; b</span><br/>\u00a0<br/>    <span class=\"kw1\">sub</span> <span class=\"kw2\">b</span>                   <span class=\"co1\">; a = a - b</span><br/>\u00a0<br/>    <span class=\"kw1\">jr</span> gcd<br/>\u00a0<br/>else:<br/>    <span class=\"kw1\">ld</span> <span class=\"kw2\">c</span>, <span class=\"kw2\">a</span>                 <span class=\"co1\">; Save a</span><br/>    <span class=\"kw1\">ld</span> <span class=\"kw2\">a</span>, <span class=\"kw2\">b</span>                 <span class=\"co1\">; Swap b into a so we can do the subtraction</span><br/>    <span class=\"kw1\">sub</span> <span class=\"kw2\">c</span>                   <span class=\"co1\">; b = b - a</span><br/>    <span class=\"kw1\">ld</span> <span class=\"kw2\">b</span>, <span class=\"kw2\">a</span>                 <span class=\"co1\">; Put a and b back where they belong</span><br/>    <span class=\"kw1\">ld</span> <span class=\"kw2\">a</span>, <span class=\"kw2\">c</span><br/>\u00a0<br/>    <span class=\"kw1\">jr</span> gcd</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">(123456789).gcd(987654321) //--&gt;9</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 10, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">20</span> READ a,b<br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"GCD of \"</span>;a;<span class=\"st0\">\" and \"</span>;b;<span class=\"st0\">\" = \"</span>;<br/><span class=\"nu0\">40</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">70</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">60</span> STOP <br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> b=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">ABS</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> c=a: <span class=\"kw1\">LET</span> a=b: <span class=\"kw1\">LET</span> b=FN m<span class=\"br0\">(</span>c,b<span class=\"br0\">)</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">70</span><br/><span class=\"nu0\">90</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b<br/><span class=\"nu0\">100</span> DATA <span class=\"nu0\">12</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">33</span>,<span class=\"nu0\">45</span>,<span class=\"nu0\">67</span></pre>"}]}