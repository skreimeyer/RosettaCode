{"task": "Pragmatic_directives", "blocks": [{"lang": "Ada", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"co2\">PRAGMAT portcheck PRAGMAT</span><br/><span class=\"co2\">PR portcheck PR</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"co2\">PR heap=256M PR</span> <span class=\"coMULTI\"># algol68g pragma #</span><br/>  <span class=\"sy1\">~</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw3\">REAL</span> s <span class=\"sy1\">=</span> <span class=\"kw24\">sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"co2\">PRAGMAT portcheck PRAGMAT</span><br/><span class=\"co2\">PR portcheck PR</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"co2\">PR heap=256M PR</span> <span class=\"coMULTI\"># algol68g pragma #</span><br/>  <span class=\"sy1\">~</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw3\">REAL</span> s <span class=\"sy1\">=</span> <span class=\"kw24\">sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">10 TRON: REM activate system trace pragma<br/>20 TROFF: REM deactivate system trace pragma</pre>"}, {"lang": "C", "loc": 41, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/*Almost every C program has the below line, <br/>the #include preprocessor directive is used to <br/>instruct the compiler which files to load before compiling the program.<br/>\u00a0<br/>All preprocessor commands begin with #<br/>*/</span><br/><span class=\"co2\">#include&lt;stdio.h&gt; </span><br/>\u00a0<br/><span class=\"coMULTI\">/*The #define preprocessor directive is often used to create abbreviations for code segments*/</span><br/><span class=\"co2\">#define Hi printf(\"Hi There.\");</span><br/>\u00a0<br/><span class=\"coMULTI\">/*It can be used, or misused, for rather innovative uses*/</span><br/>\u00a0<br/><span class=\"co2\">#define start int main(){</span><br/><span class=\"co2\">#define end return 0;}</span><br/>\u00a0<br/>start<br/>\u00a0<br/>Hi<br/>\u00a0<br/><span class=\"coMULTI\">/*And here's the nice part, want your compiler to talk to you\u00a0? <br/>Just use the #warning pragma if you are using a C99 compliant compiler<br/>like GCC*/</span><br/><span class=\"co2\">#warning \"Don't you have anything better to do\u00a0?\"</span><br/>\u00a0<br/><span class=\"co2\">#ifdef __unix__</span><br/><span class=\"co2\">#warning \"What are you doing still working on Unix\u00a0?\"</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>This is an Unix system.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#elif _WIN32</span><br/><span class=\"co2\">#warning \"You couldn't afford a 64 bit\u00a0?\"</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>This is a 32 bit Windows system.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#elif _WIN64</span><br/><span class=\"co2\">#warning \"You couldn't afford an Apple\u00a0?\"</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>This is a 64 bit Windows system.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/>end<br/>\u00a0<br/><span class=\"coMULTI\">/*Enlightened\u00a0?*/</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre>? *features*\n(:EASYGUI\u00a0:ASDF2\u00a0:ASDF\u00a0:HEMLOCK\u00a0:APPLE-OBJC-2.0\u00a0:APPLE-OBJC\u00a0:PRIMARY-CLASSES\u00a0:COMMON-LISP\u00a0:OPENMCL\u00a0:CCL\u00a0:CCL-1.2\u00a0:CCL-1.3\u00a0:CCL-1.4\u00a0:CCL-1.5\u00a0:CCL-1.6\u00a0:CCL-1.7\u00a0:CCL-1.8\u00a0:CLOZURE\u00a0:CLOZURE-COMMON-LISP\u00a0:ANSI-CL\u00a0:UNIX\u00a0:OPENMCL-UNICODE-STRINGS\u00a0:OPENMCL-NATIVE-THREADS\u00a0:OPENMCL-PARTIAL-MOP\u00a0:MCL-COMMON-MOP-SUBSET\u00a0:OPENMCL-MOP-2\u00a0:OPENMCL-PRIVATE-HASH-TABLES\u00a0:X86-64\u00a0:X86_64\u00a0:X86-TARGET\u00a0:X86-HOST\u00a0:X8664-TARGET\u00a0:X8664-HOST\u00a0:DARWIN-HOST\u00a0:DARWIN-TARGET\u00a0:DARWINX86-TARGET\u00a0:DARWINX8664-TARGET\u00a0:DARWINX8664-HOST\u00a0:64-BIT-TARGET\u00a0:64-BIT-HOST\u00a0:DARWIN\u00a0:LITTLE-ENDIAN-TARGET\u00a0:LITTLE-ENDIAN-HOST)\n</pre>"}, {"lang": "D", "loc": 1, "block": "<pre>-compile( [compressed, {inline,[pi/0]}] ).\n</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>-compile( [compressed, {inline,[pi/0]}] ).\n</pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// +build &lt;expression&gt;</span></pre>"}, {"lang": "Icon and Unicon", "loc": 2, "block": "<pre class=\"icon highlighted_source\"><span class=\"sy1\">&amp;</span><span class=\"kw3\">trace</span> <span class=\"co1\"># controls execution tracing</span><br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">error</span> <span class=\"co1\"># controls error handling</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre>9!:1 random seed (incomplete specification of state -- see 9!:45)\n9!:3 default display for non-nouns\n9!:7 box drawing characters\n9!:9 error messages\n9!:11 print precision\n9!:17 centering (or not) when box contents are smaller than boxes \n9!:19 comparison tolerance\n9!:21 memory limit\n9!:25 security level\n9!:27 text of immediate execution phrase\n9!:29 enable immediate execution phrase\n9!:33 execution time limit\n9!:35 disable (or re-enable) assertions\n9!:37 output control\n9!:39 locales' hash table size\n9!:41 retain (or not) whitespace and comments in explicit definitions\n9!:43 which random number generator to use?\n9!:45 what is the current state of that rng?\n9!:49 enable reserved words for argument names \n</pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"UNUSED_VARIABLE\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"To be suppressed\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica ", "loc": 1, "block": "<pre class=\"netrexx highlighted_source\">options wordlist;</pre>"}, {"lang": "NetRexx", "loc": 1, "block": "<pre class=\"netrexx highlighted_source\">options wordlist;</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span>  <span class=\"co1\"># use warnings pragma module</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span>    <span class=\"co1\"># use strict pragma module</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>TYPING<span class=\"sy0\">;</span><br/>augment <span class=\"kw2\">class</span> Int <span class=\"br0\">{</span><br/>    <span class=\"kw2\">method</span> times <span class=\"br0\">(</span><span class=\"re0\">&amp;what</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> what<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> self <span class=\"br0\">}</span>  <span class=\"co1\"># pretend like we're Ruby</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"pli highlighted_source\">    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>t<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    i<span class=\"sy0\">=</span><span class=\"nu0\">101</span><span class=\"sy0\">;</span><br/>    t<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"pli highlighted_source\">    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>t<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    i<span class=\"sy0\">=</span><span class=\"nu0\">101</span><span class=\"sy0\">;</span><br/>    t<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"pli highlighted_source\">    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>t<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    i<span class=\"sy0\">=</span><span class=\"nu0\">101</span><span class=\"sy0\">;</span><br/>    t<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\">#Requires -Version &lt;N&gt;[.&lt;n&gt;] </span><br/><span class=\"co1\">#Requires \u2013PSSnapin &lt;PSSnapin-Name&gt; [-Version &lt;N&gt;[.&lt;n&gt;]]</span><br/><span class=\"co1\">#Requires -Modules { &lt;Module-Name&gt; | &lt;Hashtable&gt; } </span><br/><span class=\"co1\">#Requires \u2013ShellId &lt;ShellId&gt;</span><br/><span class=\"co1\">#Requires -RunAsAdministrator</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\">Python <span class=\"nu0\">3.2</span> <span class=\"br0\">(</span>r32:<span class=\"nu0\">88445</span><span class=\"sy0\">,</span> Feb <span class=\"nu0\">20</span> <span class=\"nu0\">2011</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span>:<span class=\"nu0\">30</span>:<span class=\"nu0\">00</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>MSC v.1500 <span class=\"nu0\">64</span> bit <span class=\"br0\">(</span>AMD64<span class=\"br0\">)</span><span class=\"br0\">]</span> on win32<br/>Type <span class=\"st0\">\"copyright\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"credits\"</span> <span class=\"kw1\">or</span> <span class=\"st0\">\"license()\"</span> <span class=\"kw1\">for</span> more information.<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">__future__</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">__future__</span>.<span class=\"me1\">all_feature_names</span><br/><span class=\"br0\">[</span><span class=\"st0\">'nested_scopes'</span><span class=\"sy0\">,</span> <span class=\"st0\">'generators'</span><span class=\"sy0\">,</span> <span class=\"st0\">'division'</span><span class=\"sy0\">,</span> <span class=\"st0\">'absolute_import'</span><span class=\"sy0\">,</span> <span class=\"st0\">'with_statement'</span><span class=\"sy0\">,</span> <span class=\"st0\">'print_function'</span><span class=\"sy0\">,</span> <span class=\"st0\">'unicode_literals'</span><span class=\"sy0\">,</span> <span class=\"st0\">'barry_as_FLUFL'</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre>The REXX language has several pragmatic statements:\n   <big>\u2219</big> \u00a0 NUMERIC DIGITS \u00a0 {nnn}\n   <big>\u2219</big> \u00a0 NUMERIC FORM \u00a0 \u00a0 {ENGINEERING \u2502 SCIENTIFIC}\n   <big>\u2219</big> \u00a0 NUMERIC FUZZ \u00a0 \u00a0 {nnn}\n   <big>\u2219</big> \u00a0 OPTIONS  \u00a0 \u00a0 \u00a0 \u00a0 {xxx yyy zzz}\n   <big>\u2219</big> \u00a0 TRACE    \u00a0 \u00a0 \u00a0 \u00a0 {options}\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 LOSTDIGITS\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 NOVALUE\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 SYNTAX\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 ERROR\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 FAILURE\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 HALT\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 NOTREADY\n</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>The REXX language has several pragmatic statements:\n   <big>\u2219</big> \u00a0 NUMERIC DIGITS \u00a0 {nnn}\n   <big>\u2219</big> \u00a0 NUMERIC FORM \u00a0 \u00a0 {ENGINEERING \u2502 SCIENTIFIC}\n   <big>\u2219</big> \u00a0 NUMERIC FUZZ \u00a0 \u00a0 {nnn}\n   <big>\u2219</big> \u00a0 OPTIONS  \u00a0 \u00a0 \u00a0 \u00a0 {xxx yyy zzz}\n   <big>\u2219</big> \u00a0 TRACE    \u00a0 \u00a0 \u00a0 \u00a0 {options}\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 LOSTDIGITS\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 NOVALUE\n   <big>\u2219</big> \u00a0 SIGNAL   \u00a0 \u00a0 \u00a0 \u00a0 {ON \u2502 OFF} \u00a0 SYNTAX\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 ERROR\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 FAILURE\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 HALT\n   <big>\u2219</big> \u00a0 SIGNAL \u2502 CALL  \u00a0 {ON \u2502 OFF} \u00a0 NOTREADY\n</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><span class=\"sy0\">@</span>inline<br/><span class=\"sy0\">@</span>tailrec</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"text highlighted_source\">set -vx    # Activate both script line output and command line arguments pragma<br/>set +vx    # Deactivate both pragmatic directives</pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"text highlighted_source\">set -vx    # Activate both script line output and command line arguments pragma<br/>set +vx    # Deactivate both pragmatic directives</pre>"}]}