{"task": "Semordnilap", "blocks": [{"lang": "8th", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[] var, results<br/>\u00a0<br/>: processline \\ m s --<br/>  clone nip<br/>  tuck s:rev<br/>  m:exists? if <br/>    results @ rot a:push drop<br/>  else<br/>    swap true m:!<br/>  then\u00a0;<br/>\u00a0<br/>{} \"unixdict.txt\" app:asset &gt;s<br/>' processline s:eachline <br/>\u00a0<br/>results @ dup a:len . \" pairs\" . cr<br/>a:shuffle<br/>( a:shift dup .  \" is the reverse of \" . s:rev . cr ) 5 times bye<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">package</span> String_Vectors <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> String_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span><br/>     <span class=\"br0\">(</span>Index_Type =&gt; Positive, Element_Type =&gt; String<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> String_Vec.<span class=\"me1\">Vector</span> <span class=\"kw3\">with</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Read<span class=\"br0\">(</span>Filename: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Vec;<br/>     <span class=\"co1\">-- uses Ada.Text_IO to read words from the given file into a Vec</span><br/>     <span class=\"co1\">-- requirement: each word is written in a single line</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_In<span class=\"br0\">(</span>List: Vec;<br/>                  Word: String;<br/>                  Start: Positive; Stop: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/>     <span class=\"co1\">-- checks if Word is in List(Start .. Stop);</span><br/>     <span class=\"co1\">-- requirement: the words in List are sorted alphabetically</span><br/><span class=\"kw1\">end</span> String_Vectors;</pre>"}, {"lang": "Aime", "loc": 21, "block": "<pre class=\"text highlighted_source\">integer p;<br/>record r;<br/>file f;<br/>text s, t;<br/>\u00a0<br/>f.affix(\"unixdict.txt\");<br/>\u00a0<br/>p = 0;<br/>\u00a0<br/>while (f.line(s)\u00a0!= -1) {<br/>    if (r_o_integer(z, r, t = b_reverse(s))) {<br/>        p += 1;<br/>        if (p &lt;= 5) {<br/>            o_(s, \" \", t, \"\\n\");<br/>        }<br/>    }<br/>\u00a0<br/>    r[s] = 0;<br/>}<br/>\u00a0<br/>o_form(\"Semordnilap pairs: ~\\n\", p);</pre>"}, {"lang": "ALGOL 68", "loc": 62, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># find the semordnilaps in a list of words                           #</span><br/><span class=\"coMULTI\"># use the associative array in the Associate array/iteration task    #</span><br/><span class=\"co2\">PR read \"aArray.a68\" PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns text with the characters reversed                          #</span><br/><span class=\"kw4\">OP</span> REVERSE <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">STRING</span> reversed  <span class=\"sy1\">:=</span> text<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span>    start pos <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> text<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> end pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> reversed <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> reversed<br/>         <span class=\"kw2\">DO</span><br/>             reversed<span class=\"br0\">[</span> end pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> text<span class=\"br0\">[</span> start pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>             start pos <span class=\"sy1\">+:=</span> 1<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         reversed<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># REVERSE #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># read the list of words and store the words in an associative array #</span><br/><span class=\"coMULTI\"># check for semordnilaps                                             #</span><br/><span class=\"kw2\">IF</span>  <span class=\"kw6\">FILE</span> input file<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> file name <span class=\"sy1\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">open</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> file name<span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span> <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0<br/><span class=\"kw2\">THEN</span><br/>    <span class=\"coMULTI\"># failed to open the file #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Unable to open \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> file name <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">ELSE</span><br/>    <span class=\"coMULTI\"># file opened OK #</span><br/>    <span class=\"kw3\">BOOL</span> at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># set the EOF handler for the file #</span><br/>    <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>                                     <span class=\"kw2\">BEGIN</span><br/>                                         <span class=\"coMULTI\"># note that we reached EOF on the #</span><br/>                                         <span class=\"coMULTI\"># latest read #</span><br/>                                         at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                                         <span class=\"coMULTI\"># return TRUE so processing can continue #</span><br/>                                         <span class=\"kw7\">TRUE</span><br/>                                     <span class=\"kw2\">END</span><br/>                       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> AARRAY words <span class=\"sy1\">:=</span> INIT <span class=\"kw4\">LOC</span> AARRAY<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>    semordnilap count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> at eof<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>        get<span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> word<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">STRING</span> reversed word <span class=\"sy1\">=</span> REVERSE word<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> words <span class=\"sy1\">//</span> reversed word <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># the reversed word isn't in the array                   #</span><br/>            words <span class=\"sy1\">//</span> word <span class=\"sy1\">:=</span> reversed word<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># we already have this reversed - we have a semordnilap  #</span><br/>            semordnilap count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> semordnilap count <span class=\"sy1\">&lt;=</span> 5<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> reversed word<span class=\"sy1\">,</span> <span class=\"st0\">\" &amp; \"</span><span class=\"sy1\">,</span> word<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">close</span><span class=\"br0\">(</span> input file <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> semordnilap count<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" semordnilaps found\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/><span class=\"kw2\">FI</span></pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\">S <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> M <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> dict<span class=\"sy0\">,</span> unixdict<span class=\"sy0\">.</span>txt<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> dict<span class=\"sy0\">,</span> `n<span class=\"sy0\">,</span> `r`n<br/><span class=\"br0\">{</span><br/>\tr <span class=\"sy0\">:=</span> Reverse<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\tM<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>r <span class=\"st0\">\" / \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tS<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>\tOut <span class=\"sy0\">.=</span> <span class=\"st0\">\"`t\"</span> M<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"st0\">\"`n\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"5 Examples:`n\"</span> Out <span class=\"st0\">\"`nTotal Pairs:`n`t\"</span> M<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>Reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> s<br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> r<br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 22, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SEMORDNILAP.AWK unixdict.txt</span><br/><span class=\"br0\">{</span> arr<span class=\"br0\">[</span><span class=\"re0\">$0</span><span class=\"br0\">]</span><span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>word <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      rword = <span class=\"st0\">\"\"</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"kw4\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span>; j<span class=\"sy2\">&gt;</span><span class=\"nu0\">0</span>; j<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rword = rword <span class=\"kw4\">substr</span><span class=\"br0\">(</span>word,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>word <span class=\"sy2\">==</span> rword<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">continue</span> <span class=\"br0\">}</span> <span class=\"co1\"># palindrome</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rword <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>word <span class=\"kw1\">in</span> shown <span class=\"sy1\">||</span> rword <span class=\"kw1\">in</span> shown<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">continue</span> <span class=\"br0\">}</span><br/>        shown<span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>        shown<span class=\"br0\">[</span>rword<span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy3\">++</span> <span class=\"sy2\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,word,rword<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d words<span class=\"es0\">\\n</span>\"</span>,n<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 50, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      Sort% = FN_sortinit(0,0)<br/>\u00a0<br/>      DIM dict$(26000*2)<br/>\u00a0<br/>      REM Load the dictionary, eliminating palindromes:<br/>      dict% = OPENIN(\"C:\\unixdict.txt\")<br/>      IF dict%=0 ERROR 100, \"No dictionary file\"<br/>      index% = 0<br/>      REPEAT<br/>        A$ = GET$#dict%<br/>        B$ = FNreverse(A$)<br/>        IF A$&lt;&gt;B$ THEN<br/>          dict$(index%) = A$<br/>          dict$(index%+1) = B$<br/>          index% += 2<br/>        ENDIF<br/>      UNTIL EOF#dict%<br/>      CLOSE #dict%<br/>      Total% = index%<br/>\u00a0<br/>      REM Sort the dictionary:<br/>      C% = Total%<br/>      CALL Sort%, dict$(0)<br/>\u00a0<br/>      REM Find semordnilaps:<br/>      pairs% = 0<br/>      examples% = 0<br/>      FOR index% = 0 TO Total%-2<br/>        IF dict$(index%)=dict$(index%+1) THEN<br/>          IF examples%&lt;5 IF LEN(dict$(index%))&gt;4 THEN<br/>            PRINT dict$(index%) \" \" FNreverse(dict$(index%))<br/>            examples% += 1<br/>          ENDIF<br/>          pairs% += 1<br/>        ENDIF<br/>      NEXT<br/>\u00a0<br/>      PRINT \"Total number of unique pairs = \"; pairs%/2<br/>      END<br/>\u00a0<br/>      DEF FNreverse(A$)<br/>      LOCAL I%, L%, P%<br/>      IF A$=\"\" THEN =\"\"<br/>      L% = LENA$ - 1<br/>      P% =\u00a0!^A$<br/>      FOR I% = 0 TO L% DIV 2<br/>        SWAP P%?I%, L%?(P%-I%)<br/>      NEXT<br/>      = A$</pre>"}, {"lang": "Bracmat", "loc": 24, "block": "<pre class=\"text highlighted_source\">( get'(\"unixdict.txt\",STR):?dict<br/>&amp; new$hash:?H<br/>&amp; 0:?p<br/>&amp; ( @(\u00a0!dict<br/>    \u00a0:  \u00a0?<br/>         ( [!p\u00a0?w \\n [?p\u00a0?<br/>         &amp; (H..insert)$(!w.rev$!w)<br/>         &amp; ~<br/>         )<br/>     )<br/>  |   0:?N<br/>    &amp;   (H..forall)<br/>      $ (<br/>        =<br/>          .    \u00a0!arg:(?a.?b)<br/>              &amp;\u00a0!a:&lt;!b<br/>              &amp; (H..find)$!b<br/>              &amp;\u00a0!N+1:?N:&lt;6<br/>              &amp; out$(!a\u00a0!b)<br/>            |<br/>        )<br/>    &amp; out$(semordnilap\u00a0!N dnuoF)<br/>  )<br/>);</pre>"}, {"lang": "C", "loc": 66, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;alloca.h&gt; /* stdlib.h might not have obliged. */</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> reverse<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> tmp<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">--</span>j<span class=\"br0\">)</span><br/>        tmp <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Wrap strcmp() for qsort(). */</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> strsort<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>s1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> s1<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> ct <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> sem <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>words<span class=\"sy0\">,</span> <span class=\"sy0\">**</span>drows<span class=\"sy0\">,</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    FILE <span class=\"sy0\">*</span>dict <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Determine word count. */</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgetc.html\"><span class=\"kw3\">fgetc</span></a><span class=\"br0\">(</span>dict<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> EOF<span class=\"br0\">)</span><br/>        ct <span class=\"sy0\">+=</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rewind.html\"><span class=\"kw3\">rewind</span></a><span class=\"br0\">(</span>dict<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Using alloca() is generally discouraged, but we're not doing<br/>     * anything too fancy and the memory gains are significant. */</span><br/>    words <span class=\"sy0\">=</span> alloca<span class=\"br0\">(</span>ct <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> words<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    drows <span class=\"sy0\">=</span> alloca<span class=\"br0\">(</span>ct <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> drows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>dict<span class=\"sy0\">,</span> <span class=\"st0\">\"%s%n\"</span><span class=\"sy0\">,</span> tmp<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>len<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> EOF<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* Use just enough memory to store the next word. */</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> alloca<span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* Store it again, then reverse it. */</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> alloca<span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        reverse<span class=\"br0\">(</span>drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>dict<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>drows<span class=\"sy0\">,</span> ct<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> drows<span class=\"sy0\">,</span> strsort<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Walk both sorted lists, checking only the words which could<br/>     * possibly be a semordnilap pair for the current reversed word. */</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ct<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> words<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;</span> ct <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"coMULTI\">/* We found a semordnilap. */</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> words<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            reverse<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* Unless it was a palindrome. */</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> sem<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\t</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> drows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Semordnilap pairs:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> sem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Semordnilap<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> results <span class=\"sy0\">=</span> FindSemordnilaps<span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>results<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> random <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"5 random results:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s <span class=\"kw1\">in</span> results<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>_ <span class=\"sy0\">=&gt;</span> random<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> Reversed<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> FindSemordnilaps<span class=\"br0\">(</span><span class=\"kw4\">string</span> url<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> found <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> line <span class=\"kw1\">in</span> GetLines<span class=\"br0\">(</span>url<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> reversed <span class=\"sy0\">=</span> Reversed<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//Not taking advantage of the fact the input file is sorted</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>reversed<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found<span class=\"sy0\">.</span><span class=\"kw1\">Remove</span><span class=\"br0\">(</span>reversed<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> reversed<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span> found<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> GetLines<span class=\"br0\">(</span><span class=\"kw4\">string</span> url<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        WebRequest request <span class=\"sy0\">=</span> WebRequest<span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> reader <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamReader<span class=\"br0\">(</span>request<span class=\"sy0\">.</span><span class=\"me1\">GetResponse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">GetResponseStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>reader<span class=\"sy0\">.</span><span class=\"me1\">EndOfStream</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> reader<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Reversed<span class=\"br0\">(</span><span class=\"kw4\">string</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> input<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"co1\">// couldn't open input file</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> words<span class=\"sy4\">;</span> <span class=\"co1\">// previous words</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> word<span class=\"sy4\">;</span> <span class=\"co1\">// current word</span><br/>    <span class=\"kw4\">size_t</span> count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"co1\">// pair count</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>input <span class=\"sy1\">&gt;&gt;</span> word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">string</span> drow<span class=\"br0\">(</span>word.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, word.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// reverse</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>words.<span class=\"me1\">find</span><span class=\"br0\">(</span>drow<span class=\"br0\">)</span> <span class=\"sy1\">==</span> words.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// pair not found</span><br/>            words.<span class=\"me1\">insert</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// pair found</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> word <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> drow <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"sy2\">++</span>count<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Semordnilap pairs: \"</span> <span class=\"sy1\">&lt;&lt;</span> count <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 24, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>semordnilaps<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string \u00a0:<span class=\"me1\">as</span> <span class=\"kw1\">str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io\u00a0:<span class=\"me1\">as</span> io <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> dict<span class=\"sy0\">-</span>file<br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> dict <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> dict<span class=\"sy0\">-</span>file io<span class=\"sy0\">/</span>reader <span class=\"kw1\">line-seq</span> <span class=\"kw1\">set</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> semordnilap? <span class=\"br0\">[</span>word<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rev <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span><span class=\"kw1\">reverse</span> word<span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> word rev<span class=\"br0\">)</span> <span class=\"br0\">(</span>dict rev<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> semordnilaps<br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> dict<br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> semordnilap?<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span><span class=\"kw1\">reverse</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x y<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>compare x y<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>printf <span class=\"st0\">\"There are\u00a0%d semordnilaps in\u00a0%s.  Here are 5:<span class=\"es0\">\\n</span>\"</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">count</span> semordnilaps<span class=\"br0\">)</span> <br/>  dict<span class=\"sy0\">-</span>file<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dorun</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> semordnilaps shuffle <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> println<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> semordnilaps <span class=\"br0\">(</span>word-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>word-map <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> '<span class=\"kw1\">equal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for word in word-<span class=\"kw1\">list</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash word word-map<span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for word in word-<span class=\"kw1\">list</span><br/>       for rword <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> word<span class=\"br0\">)</span><br/>       <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&lt;</span> word rword<span class=\"br0\">)</span> <span class=\"br0\">(</span>gethash rword word-map<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       collect <span class=\"br0\">(</span><span class=\"kw1\">cons</span> word rword<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>words<br/>         <span class=\"br0\">(</span>semordnilaps<br/>          <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line s <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>               until <span class=\"br0\">(</span><span class=\"kw1\">null</span> line<span class=\"br0\">)</span><br/>               collect <span class=\"br0\">(</span>string-right-trim #<span class=\"br0\">(</span>#\\space #\\<span class=\"kw1\">return</span> #\\newline<span class=\"br0\">)</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"Found pairs: ~D\"</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to <span class=\"nu0\">5</span><br/>       for word in words<br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> seenWords<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> pairCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> word<span class=\"sy0\">;</span> <span class=\"st0\">\"unixdict.txt\"</span>.<span class=\"me1\">readText</span>.<span class=\"me1\">toLower</span>.<span class=\"me1\">splitter</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//const drow = word.dup.reverse();</span><br/>        <span class=\"kw4\">auto</span> drow <span class=\"sy0\">=</span> word.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        drow.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>drow <span class=\"kw2\">in</span> seenWords<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pairCount<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                writeln<span class=\"br0\">(</span>word<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> drow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>            seenWords<span class=\"br0\">[</span>word<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Semordnilap pairs: \"</span><span class=\"sy0\">,</span> pairCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 33, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'struct<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'sql<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'words<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'dico.fr.no<span class=\"sy0\">-</span>accent<span class=\"br0\">)</span> <span class=\"co1\">;; load dictionary</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>delimiter <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; check reverse r of w is a word</span><br/><span class=\"co1\">;; take only one pair\u00a0: r &lt; w</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>semordnilap? w<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">define</span> r <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>word? r<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&lt;</span>? r w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; to get longest first</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>sort a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/><span class=\"co1\">;; select unique words into the list 'mots'</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> mots <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"br0\">(</span>words<span class=\"sy0\">-</span>select #:any null <span class=\"nu0\">999999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> semordnilap <br/>\t    <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort string<span class=\"sy0\">-</span>sort <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>w mots<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    #:when <span class=\"br0\">(</span>semordnilap? w<span class=\"br0\">)</span><br/>\t    w <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>writeln 'pairs '\u2192 <span class=\"br0\">(</span><span class=\"kw1\">length</span> semordnilap<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>writeln 'longest '\u2192 <span class=\"br0\">(</span>take semordnilap <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"br0\">{</span>out<span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/>    pairs       \u2192     <span class=\"nu0\">345</span>    <br/>    longest     \u2192     <span class=\"br0\">(</span>rengager tresser strasse reveler retrace<span class=\"br0\">)</span>    <br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 81, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tSEMORDNILAP<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">--Semordnilaps in 'solution'.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount, i, middle, upper, lower<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\treverse<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tread_wordlist<br/>\t\t\t<span class=\"kw2\">create</span> solution.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> word_array.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tword_array <span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">mirror</span><br/>\t\t\t\treverse <span class=\"sy0\">:=</span> word_array <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tlower <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tupper <span class=\"sy0\">:=</span> word_array.<span class=\"me1\">count</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\tlower <span class=\"sy0\">&gt;=</span> upper<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tmiddle <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>upper <span class=\"sy0\">-</span> lower<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> lower<br/>\t\t\t\t\t<span class=\"kw2\">if</span> reverse.<span class=\"me1\">same_string</span> <span class=\"br0\">(</span>word_array <span class=\"br0\">[</span>middle<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t\tupper <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t\t\tlower <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t\tsolution.<span class=\"me1\">force</span> <span class=\"br0\">(</span>word_array <span class=\"br0\">[</span>i<span class=\"br0\">]</span>, count<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">elseif</span> reverse.<span class=\"me1\">is_less</span> <span class=\"br0\">(</span>word_array <span class=\"br0\">[</span>middle<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tupper <span class=\"sy0\">:=</span> middle <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\t\tlower <span class=\"sy0\">:=</span> middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">if</span> lower <span class=\"sy0\">&lt;</span> word_array.<span class=\"me1\">count</span> <span class=\"kw2\">and</span> <span class=\"kw2\">then</span> reverse.<span class=\"me1\">same_string</span> <span class=\"br0\">(</span>word_array <span class=\"br0\">[</span>lower<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tupper <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t\tlower <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tsolution.<span class=\"me1\">force</span> <span class=\"br0\">(</span>word_array <span class=\"br0\">[</span>i<span class=\"br0\">]</span>, count<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsolution<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\toriginal_list<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tread_wordlist<br/>\t\t\t<span class=\"co1\">-- Preprocessed word_array for finding Semordnilaps.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tl_file<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+plain_text_file&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">PLAIN_TEXT_FILE</span></a><br/>\t\t\twordlist<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> l_file.<span class=\"me1\">make_open_read_write</span> <span class=\"br0\">(</span>original_list<span class=\"br0\">)</span><br/>\t\t\tl_file.<span class=\"me1\">read_stream</span> <span class=\"br0\">(</span>l_file.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\twordlist <span class=\"sy0\">:=</span> l_file.<span class=\"me1\">last_string</span>.<span class=\"me1\">split</span> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">%N</span>'</span><span class=\"br0\">)</span><br/>\t\t\tl_file.<span class=\"me1\">close</span><br/>\t\t\t<span class=\"kw2\">create</span> word_array.<span class=\"me1\">make_empty</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> wordlist.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> i<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tword_array.<span class=\"me1\">force</span> <span class=\"br0\">(</span>wordlist.<span class=\"me1\">at</span> <span class=\"br0\">(</span>i.<span class=\"me1\">item</span><span class=\"br0\">)</span>, i.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tword_array<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 7, "block": "<pre class=\"text highlighted_source\">words = File.stream!(\"unixdict.txt\")<br/>        |&gt; Enum.map(&amp;String.strip/1)<br/>        |&gt; Enum.group_by(&amp;min(&amp;1, String.reverse &amp;1))<br/>        |&gt; Map.values<br/>        |&gt; Enum.filter(&amp;(length &amp;1) == 2)<br/>IO.puts \"Semordnilap pair: #{length(words)}\"<br/>IO.inspect Enum.take(words,5)</pre>"}, {"lang": "Erlang", "loc": 35, "block": "<pre class=\"erlang highlighted_source\">#<span class=\"sy3\">!/</span>usr<span class=\"sy3\">/</span>bin<span class=\"sy3\">/</span>env escript<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">DictFile</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re3\">read_lines</span><span class=\"br0\">(</span><span class=\"re5\">DictFile</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Semordnilaps</span> <span class=\"sy3\">=</span> <br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">W</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">W</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">R</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>      <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">W</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">W</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">W</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <br/>        <span class=\"re3\">semordnilaps</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"There are ~b semordnilaps in ~s~n\"</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Semordnilaps</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">DictFile</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">W</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s/~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>            <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sublist</span><span class=\"br0\">(</span><span class=\"re3\">shuffle</span><span class=\"br0\">(</span><span class=\"re5\">Semordnilaps</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">read_lines</span><span class=\"br0\">(</span><span class=\"re5\">Filename</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_list</span><span class=\"br0\">(</span><span class=\"re5\">Filename</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span> ok<span class=\"sy1\">,</span> <span class=\"re5\">File</span> <span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">open</span><span class=\"br0\">(</span><span class=\"re5\">Filename</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>read<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">read_lines</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">read_lines</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_pid</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_line</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Data</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">chop</span><span class=\"br0\">(</span><span class=\"re5\">Data</span><span class=\"br0\">)</span> | <span class=\"re3\">read_lines</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    eof        <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_semordnilap</span><span class=\"br0\">(</span><span class=\"re5\">Word</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re5\">Rev</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Word</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">is_element</span><span class=\"br0\">(</span><span class=\"re5\">Word</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">is_element</span><span class=\"br0\">(</span><span class=\"re5\">Rev</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">semordnilaps</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">W</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_semordnilap</span><span class=\"br0\">(</span><span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shuffle</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy3\">||</span><span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">List</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">chop</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">_</span>|T<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 17, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> seen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span>.<span class=\"me1\">Dictionary</span><span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>,<span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> lines <span class=\"sy0\">=</span> System.<span class=\"me1\">IO</span>.<span class=\"me1\">File</span>.<span class=\"me1\">ReadLines</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sems <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> lines <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> drow <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">rev</span><span class=\"br0\">(</span>word.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">fst</span><span class=\"br0\">(</span>seen.<span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>drow<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>drow, word<span class=\"br0\">)</span><br/>        seen.<span class=\"br0\">[</span>drow<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">true</span><br/>        seen.<span class=\"br0\">[</span>word<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">true</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span> sems<br/>printfn <span class=\"st0\">\"%d\"</span> s.<span class=\"me1\">Length</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">4</span> <span class=\"kw1\">do</span> printfn <span class=\"st0\">\"%A\"</span> s.<span class=\"br0\">[</span>i<span class=\"br0\">]</span></pre>"}, {"lang": "Forth", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>wordlist constant dict<br/>\u00a0<br/>: load-dict ( c-addr u -- )<br/>    r/o open-file throw &gt;r<br/>    begin<br/>\tpad 1024 <a class=\"__cf_email__\" data-cfemail=\"681a28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> read-line throw while<br/>\t    pad swap ['] create execute-parsing<br/>    repeat<br/>    drop r&gt; close-file throw\u00a0;<br/>\u00a0<br/>: xreverse {: c-addr u -- c-addr2 u\u00a0:}<br/>    u allocate throw u + c-addr swap over u + &gt;r begin ( from to r:end)<br/>\tover <a class=\"__cf_email__\" data-cfemail=\"1d6f5d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> u&lt; while<br/>\t    over <a class=\"__cf_email__\" data-cfemail=\"beccfe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over - x-size dup &gt;r - 2dup <a class=\"__cf_email__\" data-cfemail=\"b6c4f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> cmove<br/>\t    swap r&gt; + swap repeat<br/>    r&gt; drop nip u\u00a0;<br/>\u00a0<br/>: .example ( c-addr u u1 -- )<br/>    5 &lt; if<br/>\tcr 2dup type space 2dup xreverse 2dup type drop free throw then<br/>    2drop\u00a0;<br/>\u00a0<br/>: nt-semicheck ( u1 nt -- u2 f )<br/>    dup &gt;r name&gt;string xreverse 2dup dict find-name-in dup if ( u1 c-addr u nt2) <br/>\t<a class=\"__cf_email__\" data-cfemail=\"473507\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; if ( u1 c-addr u ) \\ count pairs only once and not palindromes<br/>\t    2dup 4 pick .example<br/>\t    rot 1+ -rot then<br/>    else<br/>\tdrop then<br/>    drop free throw r&gt; drop true\u00a0;<br/>\u00a0<br/>get-current dict set-current s\" unixdict.txt\" load-dict set-current<br/>\u00a0<br/>0 ' nt-semicheck dict traverse-wordlist cr .<br/>cr bye<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 119, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Sun May 19 21:50:08</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./F &amp;&amp; make $a &amp;&amp; $a &lt; unixdict.txt</span><br/><span class=\"co1\">!f95 -Wall -ffree-form F.F -o F</span><br/><span class=\"co1\">! 5 of          158 semordnilaps            </span><br/><span class=\"co1\">!yaw                     </span><br/><span class=\"co1\">!room                    </span><br/><span class=\"co1\">!xi                      </span><br/><span class=\"co1\">!tim                     </span><br/><span class=\"co1\">!nova                    </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Sun May 19 21:50:08</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!                       unixdict.txt information</span><br/><span class=\"co1\">! wc -l unixdict.txt                                         #--&gt; 25104                    25 thousand entries</span><br/><span class=\"co1\">! gawk 'length(a)&lt;length($0){a=$0}END{print a}' unixdict.txt #--&gt; electroencephalography   longest word has 22 characters</span><br/><span class=\"co1\">! gawk '/[A-Z]/{++a}END{print a}' unixdict.txt               #--&gt; &lt;empty&gt;                  the dictionary is lower case</span><br/><span class=\"co1\">! sort unixdict.txt | cmp - unixdict.txt                     #--&gt; - unixdict.txt differ: byte 45, line 12</span><br/><span class=\"co1\">!                                                                                          the dictionary is unsorted</span><br/><span class=\"co1\">!     mmmmm the dictionary is sorted, according to subroutine bs.  There's something about the ampersands within unixdict.txt I misunderstand.</span><br/>\u00a0<br/><span class=\"kw1\">program</span> Semordnilap<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, ios, words, swords<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">24</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">32768</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dictionary</span>, backword<br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">harvest</span><br/>  <span class=\"co1\">! read the dictionary</span><br/>  open<span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"kw1\">file</span><span class=\"sy0\">=</span><span class=\"st0\">'unixdict.txt'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> words <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">32768</span><br/>    read<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"st0\">'(a)'</span>, <span class=\"kw1\">iostat</span> <span class=\"sy0\">=</span> ios<span class=\"br0\">)</span> dictionary<span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">enddo</span><br/>  close<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">iachar</span><span class=\"br0\">(</span>dictionary<span class=\"br0\">(</span>words<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> words <span class=\"sy0\">=</span> words<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"co1\">! sort the dictionary</span><br/>  <span class=\"kw1\">call</span> bs<span class=\"br0\">(</span>dictionary, words<span class=\"br0\">)</span><br/>  <span class=\"co1\">!do i = 1, words</span><br/>  <span class=\"co1\">!  write(6,*) dictionary(i)(1:len_trim(dictionary(i)))\u00a0! with which we determine the dictionary was ordered</span><br/>  <span class=\"co1\">!enddo</span><br/>  swords <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, words<br/>    <span class=\"kw1\">call</span> reverse<span class=\"br0\">(</span>dictionary<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, backword<span class=\"br0\">(</span>swords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>binary_search<span class=\"br0\">(</span>dictionary, words, backword<span class=\"br0\">(</span>swords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>      <span class=\"co1\">!     the reversed word is in the dictionary</span><br/>      <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> binary_search<span class=\"br0\">(</span>backword, swords, dictionary<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>  <span class=\"co1\">! and it's new</span><br/>      <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>dictionary<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> backword<span class=\"br0\">(</span>swords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>             <span class=\"co1\">! and it's not a palindrome</span><br/>      swords <span class=\"sy0\">=</span> swords <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">call</span> bs<span class=\"br0\">(</span>backword, swords<span class=\"br0\">)</span><br/>    <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">enddo</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>harvest<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> reverse<span class=\"br0\">(</span><span class=\"st0\">'spalindromes'</span>, backword<span class=\"br0\">(</span>swords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'5 of '</span>, swords, backword<span class=\"br0\">(</span>swords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(5(a/))'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>backword<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>harvest<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>swords<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> reverse<span class=\"br0\">(</span>inp, outp<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">inp</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">outp</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span>, L<br/>    L <span class=\"sy0\">=</span> <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>inp<span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, L<br/>      outp<span class=\"br0\">(</span>L<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>k<span class=\"sy0\">:</span>L<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> inp<span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span><br/>    <span class=\"kw1\">enddo</span><br/>    <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> L<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span>outp<span class=\"br0\">)</span><br/>      outp<span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>    <span class=\"kw1\">enddo</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> reverse<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> bs<span class=\"br0\">(</span>a, n<span class=\"br0\">)</span> <span class=\"co1\">! ok, despite having claimed that bubble sort should be unceremoniously buried, I'll use it anyway because I expect the dictionary is nearly ordered.  It's also not a terrible sort for less than 5 items.</span><br/>    <span class=\"co1\">! Please note, I tested bs using unixdict.txt randomized with sort --random .</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, k<br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">done</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">t</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      done <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>      <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, i<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          done <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>          <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">max</span><span class=\"br0\">(</span><span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            t <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span><br/>            a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span><br/>            a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">(</span>k<span class=\"sy0\">:</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">enddo</span><br/>        <span class=\"kw1\">endif</span><br/>      <span class=\"kw1\">enddo</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>done<span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">enddo</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> bs<br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> binary_search<span class=\"br0\">(</span>source, n, <span class=\"kw3\">target</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">source</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">target</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,m,z<br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    z <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> z<span class=\"br0\">)</span><br/>      m <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>z <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">target</span> <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> source<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        z <span class=\"sy0\">=</span> m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> a<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>        a <span class=\"sy0\">=</span> m<br/>      <span class=\"kw1\">endif</span><br/>    <span class=\"kw1\">enddo</span><br/>    binary_search <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">target</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> source<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span><span class=\"kw3\">target</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> source<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> binary_search<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Semordnilap<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 80, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 20-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> reverse<span class=\"br0\">(</span>norm <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> rev<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>norm<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>\u00a0<br/>    rev = norm<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l<br/>        rev<span class=\"br0\">[</span>l-i<span class=\"br0\">]</span> = norm<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> rev<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, count, amount, ff = <span class=\"kw1\">FreeFile</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> in_str, rev, big = <span class=\"st0\">\" \"</span>  <span class=\"co1\">' big needs to start with a space</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> norm<span class=\"br0\">(</span><span class=\"nu0\">27000</span><span class=\"br0\">)</span>, result<span class=\"br0\">(</span><span class=\"nu0\">270</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Start reading unixdict.txt\"</span>;<br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#ff</span><br/>\u00a0<br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span>ff<span class=\"br0\">)</span>                  <span class=\"co1\">' read to end of file</span><br/>\u00a0<br/>    <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#ff, in_str         ' get line = word</span><br/>    in_str = <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>in_str<span class=\"br0\">)</span>          <span class=\"co1\">' we don't want spaces</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>in_str<span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span>        <span class=\"co1\">' if length &gt; 1 then reverse</span><br/>        rev = reverse<span class=\"br0\">(</span>in_str<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> in_str &lt;&gt; rev <span class=\"kw1\">Then</span>      <span class=\"co1\">' if in_str is not a palingdrome</span><br/>            count = count + <span class=\"nu0\">1</span>      <span class=\"co1\">' increase counter</span><br/>            norm<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = in_str   <span class=\"co1\">' store in the array</span><br/>            big = big + rev + <span class=\"st0\">\" \"</span>  <span class=\"co1\">' create big string with reversed words</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#ff</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" ... Done\"</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Start looking for semordnilap\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> amount <span class=\"co1\">' check to avoid the double</span><br/>        <span class=\"kw1\">If</span> result<span class=\"br0\">(</span>j, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = norm<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span>, <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">Next</span><br/>    j = <span class=\"kw1\">InStr</span><span class=\"br0\">(</span>big, <span class=\"st0\">\" \"</span> + norm<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> j &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span>                          <span class=\"co1\">' found one</span><br/>        amount = amount + <span class=\"nu0\">1</span>                 <span class=\"co1\">' increase counter</span><br/>        result<span class=\"br0\">(</span>amount,<span class=\"nu0\">1</span><span class=\"br0\">)</span> = norm<span class=\"br0\">(</span>i<span class=\"br0\">)</span>          <span class=\"co1\">' store normal word</span><br/>        result<span class=\"br0\">(</span>amount,<span class=\"nu0\">2</span><span class=\"br0\">)</span> = reverse<span class=\"br0\">(</span>norm<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' store reverse word</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Found\"</span>; amount; <span class=\"st0\">\" unique semordnilap pairs\"</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Display 5 semordnilap pairs\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/>count = <span class=\"nu0\">0</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> amount<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &gt;= <span class=\"nu0\">5</span> <span class=\"kw1\">Then</span><br/>        count = count + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Print</span> result<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, result<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> count &gt;= <span class=\"nu0\">5</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>    EndIf<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer </span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 58, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// read file into memory as one big block</span><br/>    data<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span><span class=\"me1\">ReadFile</span><span class=\"sy1\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// copy the block, split it up into words</span><br/>    words <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>data<span class=\"sy1\">),</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// optional, free the first block for garbage collection</span><br/>    data <span class=\"sy2\">=</span> <span class=\"kw2\">nil</span><br/>    <span class=\"co1\">// put words in a map, also determine length of longest word</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">)</span><br/>    longest <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> w <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> words <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)</span> &gt; longest <span class=\"sy1\">{</span><br/>            longest <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// allocate a buffer for reversing words</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> longest<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// iterate over word list</span><br/>    sem <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">var</span> five <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> w <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> words <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// first, delete from map.  this prevents a palindrome from matching</span><br/>        <span class=\"co1\">// itself, and also prevents it's reversal from matching later.</span><br/>        delete<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> w<span class=\"sy1\">)</span><br/>        <span class=\"co1\">// use buffer to reverse word</span><br/>        last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> w<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        rs <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)])</span><br/>        <span class=\"co1\">// see if reversed word is in map, accumulate results</span><br/>        <span class=\"kw1\">if</span> m<span class=\"sy1\">[</span>rs<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            sem<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>five<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">5</span> <span class=\"sy1\">{</span><br/>                five <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>five<span class=\"sy1\">,</span> w<span class=\"sy3\">+</span><span class=\"st0\">\"/\"</span><span class=\"sy3\">+</span>rs<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// print results</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>sem<span class=\"sy1\">,</span> <span class=\"st0\">\"pairs\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"examples:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> five <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> semordnilapWords<span class=\"br0\">(</span>source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> words <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> semordnilaps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    source.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachLine\"><span class=\"kw7\">eachLine</span></a> <span class=\"br0\">{</span> word <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>words.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20contains\"><span class=\"kw6\">contains</span></a><span class=\"br0\">(</span>word.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> semordnilaps <span class=\"sy0\">&lt;&lt;</span> word<br/>        words <span class=\"sy0\">&lt;&lt;</span> word<br/>    <span class=\"br0\">}</span><br/>    semordnilaps<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Set <span class=\"kw1\">as</span> S<br/>\u00a0<br/>semordnilaps<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> Foldable t<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> t <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>semordnilaps <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f x <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> w<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> S<span class=\"sy0\">.</span>member <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> x<span class=\"br0\">)</span> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> x\u00a0: w<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>S<span class=\"sy0\">.</span>insert x s<span class=\"sy0\">,</span> w<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> f <span class=\"br0\">(</span>S<span class=\"sy0\">.</span>empty<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  s <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> <span class=\"st0\">\"unixdict.txt\"</span><br/>  <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> semordnilaps <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> s<span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> l<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">5</span> l</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    words <span class=\"sy0\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    found <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> word <span class=\"sy0\">:=</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>words<span class=\"sy0\">,</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span><span class=\"kw4\">reverse</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span>word<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>words<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Found \"</span><span class=\"sy0\">,</span>found<span class=\"sy0\">,</span><span class=\"st0\">\" semordnilap words\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   isSemordnilap=: |.&amp;.&gt; <span class=\"sy0\">(</span>~: *. e.<span class=\"sy0\">)</span> ]<br/>   unixdict=: &lt;;.<span class=\"nu0\">_2</span> freads <span class=\"st_h\">'unixdict.txt'</span><br/>   #semordnilaps=: ~. /:~\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>,. |.&amp;.&gt;<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>#~ isSemordnilap<span class=\"sy0\">)</span> unixdict<br/><span class=\"nu0\">158</span></pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.nio.file.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Semordnilap <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> lst = Files.<span class=\"me1\">readAllLines</span><span class=\"br0\">(</span>Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> seen = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> count = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> w\u00a0: lst<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            w = w.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> r = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>w<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>seen.<span class=\"me1\">contains</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count++ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10s\u00a0%-10s<span class=\"es0\">\\n</span>\"</span>, w, r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> seen.<span class=\"me1\">add</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Semordnilap pairs found: \"</span> + count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 40, "block": "<pre class=\"javascript highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env node<br/><span class=\"kw1\">var</span>  fs <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> sys <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'sys'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> dictFile <span class=\"sy0\">=</span> process.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> dict <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>fs.<span class=\"me1\">readFileSync</span><span class=\"br0\">(</span>dictFile<span class=\"br0\">)</span><br/>  .<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>  .<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    dict<span class=\"br0\">[</span>word<span class=\"br0\">]</span> <span class=\"sy0\">=</span> word.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isSemordnilap<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> dict<span class=\"br0\">[</span>dict<span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> semordnilaps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> key <span class=\"kw1\">in</span> dict<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSemordnilap<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> rev <span class=\"sy0\">=</span> dict<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>key <span class=\"sy0\">&lt;</span> rev<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      semordnilaps.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>key<span class=\"sy0\">,</span>rev<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> semordnilaps.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>sys.<span class=\"me1\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span> <span class=\"sy0\">+</span> count <span class=\"sy0\">+</span> <span class=\"st0\">\" semordnilaps in \"</span> <span class=\"sy0\">+</span><br/>         dictFile <span class=\"sy0\">+</span> <span class=\"st0\">\".  Here are 5:\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> indices<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>count<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>i<span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    indices<span class=\"br0\">[</span>i<span class=\"sy0\">%</span>5<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>indices.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  sys.<span class=\"me1\">puts</span><span class=\"br0\">(</span>semordnilaps<span class=\"br0\">[</span>indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Produce a stream<br/>def report:<br/>  split(\"\\n\") as $list<br/>  # construct the dictionary:<br/>  | (reduce $list[] as $entry ({}; . + {($entry): 1})) as $dict<br/>  # construct the list of semordnilaps:<br/>  | $list[]<br/>  | select( (explode|reverse|implode) as $rev<br/>            | (. &lt; $rev and $dict[$rev]) );<br/>\u00a0<br/>[report] | (.[0:5][],  \"length = \\(length)\")</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">raw = readdlm(\"unixdict.txt\",String)[:]<br/>inter = intersect(raw,map(reverse,raw)) #find the matching strings/revstrings<br/>res = String[b == 1 &amp;&amp; a\u00a0!= reverse(a) &amp;&amp; a &lt; reverse(a)\u00a0? a\u00a0: reverse(a) for a in inter, b in 1:2] #create pairs<br/>res = res[res[:,1] .!= res[:,2],:] #get rid of duplicates, palindromes</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pairs <span class=\"sy0\">=</span> words.<span class=\"me1\">map</span> <span class=\"br0\">{</span> Pair<span class=\"br0\">(</span>it, it.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            .<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">&lt;</span> it.<span class=\"me1\">second</span> <span class=\"sy0\">&amp;&amp;</span> it.<span class=\"me1\">second</span> in words <span class=\"br0\">}</span> <span class=\"co1\">// avoid dupes+palindromes, find matches</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Found ${pairs.size} semordnilap pairs\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>pairs.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 29, "block": "<pre class=\"text highlighted_source\">local(<br/>\twords\t\t= string(include_url('http://www.puzzlers.org/pub/wordlists/unixdict.txt')) -&gt; split('\\n'),<br/>\tsemordnilaps\t= array,<br/>\tfound_size,<br/>\texample,<br/>\thaveexamples\t= false,<br/>\texamples\t= array<br/>)<br/>\u00a0<br/>#words -&gt; removeall('')<br/>\u00a0<br/>with word in #words do {<br/>\tlocal(reversed = string(#word) -&gt; reverse&amp;)<br/>\tif(not(#word == #reversed) and not(#semordnilaps &gt;&gt; #word) and not(#semordnilaps &gt;&gt; #reversed) and #words &gt;&gt; #reversed) =&gt; {<br/>\t\t#semordnilaps -&gt; insert(#word = #reversed)<br/>\t}<br/>}<br/>\u00a0<br/>#found_size = #semordnilaps -&gt; size<br/>\u00a0<br/>while(not(#haveexamples)) =&gt; {<br/>\t#example = #semordnilaps -&gt; get(integer_random(#found_size, 1))<br/>\tnot(#examples &gt;&gt; #example -&gt; name)\u00a0? #examples -&gt; insert(#example)<br/>\t#examples -&gt; size &gt;= 5\u00a0? #haveexamples = true<br/>}<br/>'Total found: '<br/>#found_size<br/>'&lt;br /&gt;'<br/>#examples</pre>"}, {"lang": "Liberty BASIC", "loc": 46, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Loading dictionary.\"</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span><span class=\"kw2\">eof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a$<br/>   dict$<span class=\"sy0\">=</span>dict$<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>a$<br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Dictionary loaded.\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Seaching for semordnilaps.\"</span><br/>\u00a0<br/>semo$<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span>   <span class=\"co1\">'string to hold words with semordnilaps</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>    i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    w$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>dict$<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>    p$<span class=\"sy0\">=</span>reverseString$<span class=\"br0\">(</span>w$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> w$<span class=\"sy0\">&lt;&gt;</span>p$ <span class=\"kw1\">then</span><br/>    p$<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>p$<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>semo$<span class=\"sy0\">,</span>p$<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>dict$<span class=\"sy0\">,</span>p$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          pairs<span class=\"sy0\">=</span>pairs<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          <span class=\"kw1\">print</span> w$<span class=\"sy0\">+</span><span class=\"st0\">\" /\"</span><span class=\"sy0\">+</span>p$<br/>          semo$<span class=\"sy0\">=</span>semo$<span class=\"sy0\">+</span>w$<span class=\"sy0\">+</span>p$<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">scan</span><br/><span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> w$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Total number of unique semordnilap pairs is \"</span>;pairs<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPalindrome<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    string$ <span class=\"sy0\">=</span> <span class=\"kw2\">Lower$</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    reverseString$ <span class=\"sy0\">=</span> reverseString$<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> string$ <span class=\"sy0\">=</span> reverseString$ <span class=\"kw1\">Then</span> isPalindrome <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> reverseString$<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> Step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        reverseString$ <span class=\"sy0\">=</span> reverseString$ <span class=\"sy0\">+</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 34, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env lua<br/><span class=\"co1\">-- allow dictionary file and sample size to be specified on command line</span><br/><span class=\"kw1\">local</span> dictfile <span class=\"sy0\">=</span> arg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"unixdict.txt\"</span><br/><span class=\"kw1\">local</span> sample_size <span class=\"sy0\">=</span> arg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">-- read dictionary</span><br/><span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">io.open</span><span class=\"br0\">(</span>dictfile<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> dict <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> f<span class=\"sy0\">:</span>lines<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  dict<span class=\"br0\">[</span>line<span class=\"br0\">]</span> <span class=\"sy0\">=</span> line<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>f<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- find the semordnilaps</span><br/><span class=\"kw1\">local</span> semordnilaps <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> fwd<span class=\"sy0\">,</span> rev <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>dict<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> dict<span class=\"br0\">[</span>rev<span class=\"br0\">]</span> <span class=\"kw2\">and</span> fwd <span class=\"sy0\">&lt;</span> rev <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>semordnilaps<span class=\"sy0\">,</span> <span class=\"br0\">{</span>fwd<span class=\"sy0\">,</span>rev<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- print the report</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span> <span class=\"sy0\">..</span> <span class=\"sy0\">#</span>semordnilaps <span class=\"sy0\">..</span> <span class=\"st0\">\" semordnilaps in \"</span> <span class=\"sy0\">..</span> dictfile <span class=\"sy0\">..</span> <span class=\"st0\">\".  Here are \"</span> <span class=\"sy0\">..</span> sample_size <span class=\"sy0\">..</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> sample_size <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">local</span> j<br/>  <span class=\"kw1\">repeat</span> <br/>    j <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>semordnilaps<span class=\"br0\">)</span><br/>  <span class=\"kw1\">until</span> semordnilaps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>  <span class=\"kw1\">local</span> f<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>semordnilaps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  semordnilaps<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>f <span class=\"sy0\">..</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy0\">..</span> r<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">data = Import[\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\", \"List\"];<br/>result = DeleteDuplicates[ Select[data, MemberQ[data, StringReverse[#]]<br/>  &amp;&amp; # =!= StringReverse[#] &amp;], (# ===StringReverse[#2]) &amp;];<br/>Print[Length[result], Take[result, 5]]</pre>"}, {"lang": "NetRexx", "loc": 30, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 07.09.2012 Walter Pachl<br/>**********************************************************************/</span><br/>fid = <span class=\"st0\">'unixdict.txt'</span>                   <span class=\"coMULTI\">/* the test dictionary        */</span><br/>ifi = File<span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>ifr = BufferedReader<span class=\"br0\">(</span>FileReader<span class=\"br0\">(</span>ifi<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>have = <span class=\"st0\">''</span>                              <span class=\"coMULTI\">/* words encountered          */</span><br/>pi = <span class=\"nu0\">0</span>                                 <span class=\"coMULTI\">/* number of palindromes      */</span><br/><span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> j_ forever                  <span class=\"coMULTI\">/* as long there is input     */</span><br/>  line = ifr.<span class=\"me0\">readLine</span>                  <span class=\"coMULTI\">/* read a line (String)       */</span><br/>  <span class=\"kw1\">if</span> line = null <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> j_         <span class=\"coMULTI\">/* NULL indicates EOF         */</span><br/>  w = Rexx<span class=\"br0\">(</span>line<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/* each line contains 1 word  */</span><br/>  <span class=\"kw1\">If</span> w <span class=\"sy0\">&gt;</span> <span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                    <span class=\"coMULTI\">/* not a blank line           */</span><br/>    r = w.<span class=\"kw6\">reverse</span>                      <span class=\"coMULTI\">/* reverse it                 */</span><br/>    <span class=\"kw1\">If</span> have<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>            <span class=\"coMULTI\">/* was already encountered    */</span><br/>      pi = pi + <span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* increment number of pal's  */</span><br/>      <span class=\"kw1\">If</span> pi <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">5</span> <span class=\"kw3\">Then</span>                  <span class=\"coMULTI\">/* the first 5 are listed     */</span><br/>        <span class=\"kw1\">Say</span> have<span class=\"br0\">[</span>r<span class=\"br0\">]</span> w<br/>      <span class=\"kw3\">End</span><br/>    have<span class=\"br0\">[</span>w<span class=\"br0\">]</span> = w                        <span class=\"coMULTI\">/* remember the word          */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">end</span> j_<br/>ifr.<span class=\"me0\">close</span><br/>\u00a0<br/><span class=\"kw1\">Say</span> pi <span class=\"st0\">'words in'</span> fid <span class=\"st0\">'have a palindrome'</span> <span class=\"coMULTI\">/* total number found      */</span><br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\">import strutils, sequtils, sets, algorithm<br/>\u00a0<br/>proc reverse(s): string =<br/>  result = newString(s.len)<br/>  for i,c in s:<br/>    result[s.high - i] = c<br/>\u00a0<br/>let<br/>  words = readFile(\"unixdict.txt\").strip.splitLines<br/>  wordset = words.toSet<br/>  revs = words.map(reverse)<br/>var pairs = zip(words, revs).filterIt(it[0] &lt; it[1] and it[1] in wordset)<br/>\u00a0<br/>echo \"Total number of semordnilaps: \", pairs.len<br/>pairs.sort(proc (x,y): auto = cmp(x[0].len,y[0].len))<br/>echo pairs[pairs.high-4..pairs.high]</pre>"}, {"lang": "OCaml", "loc": 34, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">module</span> StrSet <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">.</span>Make<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> str_rev s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> Bytes<span class=\"sy0\">.</span>create len <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    Bytes<span class=\"sy0\">.</span>set r i s<span class=\"sy0\">.</span><span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  Bytes<span class=\"sy0\">.</span>to_string r<br/>\u00a0<br/><span class=\"kw1\">let</span> input_line_opt ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> Some <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span> None<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux set acc <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> input_line_opt ic <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> Some word <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> rev <span class=\"sy0\">=</span> str_rev word <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">if</span> StrSet<span class=\"sy0\">.</span>mem rev set<br/>        <span class=\"kw1\">then</span> aux set <span class=\"br0\">(</span><span class=\"br0\">(</span>word, rev<span class=\"br0\">)</span> <span class=\"sy0\">::</span> acc<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>StrSet<span class=\"sy0\">.</span>add word set<span class=\"br0\">)</span> acc<br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span><br/>        <span class=\"br0\">(</span>acc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> pairs <span class=\"sy0\">=</span> aux StrSet<span class=\"sy0\">.</span>empty <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length pairs <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Semordnilap pairs:\u00a0%d\\n\"</span> len<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>word, rev<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth pairs <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> len<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%s\u00a0%s\\n\"</span> word rev<br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Octave", "loc": 5, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/strsplit.html\"><span class=\"kw6\">strsplit</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/fileread.html\"><span class=\"kw6\">fileread</span></a><span class=\"br0\">(</span><span class=\"co4\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"co4\">\"\\n\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/intersect.html\"><span class=\"kw6\">intersect</span></a><span class=\"br0\">(</span>a<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/cellfun.html\"><span class=\"kw6\">cellfun</span></a><span class=\"br0\">(</span><span class=\"co7\">@fliplr</span><span class=\"sy5\">,</span> a<span class=\"sy5\">,</span> <span class=\"co4\">\"UniformOutput\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>a <span class=\"sy3\">=</span> a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/arrayfun.html\"><span class=\"kw6\">arrayfun</span></a><span class=\"br0\">(</span><span class=\"co7\">@</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <a href=\"http://octave.sourceforge.net/octave/function/ismember.html\"><span class=\"kw6\">ismember</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/fliplr.html\"><span class=\"kw6\">fliplr</span></a><span class=\"br0\">(</span>a<span class=\"br0\">{</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><a href=\"http://octave.sourceforge.net/octave/function/arrayfun.html\"><span class=\"kw6\">arrayfun</span></a><span class=\"br0\">(</span><span class=\"co7\">@</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%s\u00a0%s\\n\"</span><span class=\"sy5\">,</span> a<span class=\"br0\">{</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">}</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/fliplr.html\"><span class=\"kw6\">fliplr</span></a><span class=\"br0\">(</span>a<span class=\"br0\">{</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: semordnilap<br/>| w wr wrds |<br/>   ListBuffer new -&gt;wrds<br/>   ListBuffer new<br/>   File new(\"unixdict.txt\") forEach: w [ <br/>      wrds include(w reverse dup -&gt;wr) ifTrue: [ [wr, w] over add ]<br/>      w wr &lt; ifTrue: [ wrds add(w) ]<br/>      ]\u00a0;</pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"re0\">$r</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">and</span> <span class=\"re0\">$c</span><span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_ $r<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">or</span> <span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$c<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$words</span> <span class=\"sy0\">=</span> set slurp<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@sems</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">$words</span><span class=\"sy0\">.</span><span class=\"me1\">flat</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$word</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$drow</span> <span class=\"sy0\">=</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">;</span><br/>    take <span class=\"re0\">$drow</span> <span class=\"kw1\">if</span> <span class=\"re0\">$drow</span> \u2208 <span class=\"re0\">$words</span> <span class=\"kw1\">and</span> <span class=\"re0\">$drow</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$word</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$_</span> <span class=\"sy0\">~</span> <span class=\"st_h\">' '</span> <span class=\"sy0\">~</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span> <span class=\"kw1\">for</span> <span class=\"re0\">@sems</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">sequence words={}, semilordnaps={}<br/>object word<br/>constant fn = open(\"demo\\\\unixdict.txt\",\"r\")<br/>\u00a0<br/>while 1 do<br/>    word = trim(gets(fn))<br/>    if atom(word) then exit end if<br/>    if find(reverse(word),words) then<br/>        semilordnaps = append(semilordnaps,word)<br/>    end if<br/>    words = append(words,word)<br/>end while<br/>\u00a0<br/>close(fn)<br/>\u00a0<br/>?length(semilordnaps)<br/>for i=1 to 5 do<br/>    word = semilordnaps[i]<br/>    printf(1,\"%s -\u00a0%s\\n\",{word,reverse(word)})<br/>end for</pre>"}, {"lang": "PHP", "loc": 15, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co1\">// Read dictionary into array</span><br/><span class=\"re0\">$dictionary</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_fill_keys\"><span class=\"kw3\">array_fill_keys</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/file\"><span class=\"kw3\">file</span></a><span class=\"br0\">(</span><br/>    <span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"sy0\">,</span><br/>    FILE_IGNORE_NEW_LINES <span class=\"sy0\">|</span> FILE_SKIP_EMPTY_LINES<br/><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array_keys\"><span class=\"kw3\">array_keys</span></a><span class=\"br0\">(</span><span class=\"re0\">$dictionary</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$reversed_word</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strrev\"><span class=\"kw3\">strrev</span></a><span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$dictionary</span><span class=\"br0\">[</span><span class=\"re0\">$reversed_word</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$word</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$reversed_word</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$words</span><span class=\"br0\">[</span><span class=\"re0\">$word</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$reversed_word</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$words</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// array_rand() returns keys, not values</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array_rand\"><span class=\"kw3\">array_rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$words</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$word</span> <span class=\"es4\">$words</span>[<span class=\"es4\">$word</span>]<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(let Semordnilap<br/>   (mapcon<br/>      '((Lst)<br/>         (when (member (reverse (car Lst)) (cdr Lst))<br/>            (cons (pack (car Lst))) ) )<br/>      (make (in \"unixdict.txt\" (while (line) (link @)))) )<br/>   (println (length Semordnilap) (head 5 Semordnilap)) )</pre>"}, {"lang": "PL/I", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>find: procedure options (main); /* 20/1/2013 */<br/>   declare word character (20) varying controlled;<br/>   declare dict(*) character (20) varying controlled;<br/>   declare 1 pair controlled,<br/>              2 a character (20) varying, 2 b character (20) varying;<br/>   declare (i, j) fixed binary;<br/>   declare in file;<br/>\u00a0<br/>   open file(in) title ('/UNIXDICT.TXT,type(LF),recsize(100)');<br/>   on endfile (in) go to completed_read;<br/>   do forever;<br/>      allocate word;<br/>      get file (in) edit (word) (L);<br/>   end;<br/>\u00a0<br/>completed_read:<br/>   free word; /* because at the final allocation, no word was stored. */<br/>   allocate dict(allocation(word));<br/>   do i = 1 to hbound(dict,1);<br/>      dict(i) = word; free word;<br/>   end;<br/>\u00a0<br/>   /* Search dictionary for pairs: */<br/>   do i = 1 to hbound(dict,1)-1;<br/>      do j = i+1 to hbound(dict,1);<br/>         if length(dict(i)) = length(dict(j)) then<br/>            do;<br/>               if dict(i) = reverse(dict(j)) then<br/>                  do;<br/>                     allocate pair; pair.a = dict(i); pair.b = dict(j);<br/>                  end;<br/>            end;<br/>      end;<br/>   end;<br/>\u00a0<br/>   put skip list ('There are ' || trim(allocation(pair)) || ' pairs.');<br/>\u00a0<br/>   do while (allocation(pair) &gt; 0);<br/>      put skip edit (pair) (a, col(20), a); free pair;<br/>   end;<br/>end find;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 37, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Reverse<span class=\"sy0\">-</span>String <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$String</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span>::Reverse<span class=\"br0\">(</span><span class=\"re0\">$output</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$output</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$url</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><br/><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".\\unixdict.txt\"</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">New-Object</span> System.Net.WebClient<span class=\"br0\">)</span>.DownloadFile<span class=\"br0\">(</span><span class=\"re0\">$url</span><span class=\"sy0\">,</span> <span class=\"re0\">$out</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Content</span> <span class=\"kw5\">-Path</span> <span class=\"re0\">$out</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">hashtable</span><span class=\"br0\">]</span><span class=\"re0\">$unixDict</span>    <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">[</span><span class=\"re3\">hashtable</span><span class=\"br0\">]</span><span class=\"re0\">$semordnilap</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span> <span class=\"kw3\">in</span> <span class=\"re0\">$file</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$unixDict</span>.Add<span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$reverseLine</span> <span class=\"sy0\">=</span> Reverse<span class=\"sy0\">-</span>String <span class=\"re0\">$line</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$reverseLine</span> <span class=\"kw4\">-notmatch</span> <span class=\"re0\">$line</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$unixDict</span>.ContainsKey<span class=\"br0\">(</span><span class=\"re0\">$reverseLine</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$semordnilap</span>.Add<span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"sy0\">,</span><span class=\"re0\">$reverseLine</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$semordnilap</span><br/>\u00a0<br/><span class=\"st0\">\"<span class=\"es0\">`n</span>Semordnilap count: {0}\"</span> <span class=\"kw4\">-f</span> <span class=\"br0\">(</span><span class=\"re0\">$semordnilap</span>.GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span><span class=\"br0\">)</span>.Count<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>\twordset <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>f.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> revlist <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>word<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> wordset<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pairs   <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">(</span>wrd<span class=\"sy0\">,</span> rev<span class=\"br0\">)</span> <span class=\"kw1\">for</span> wrd<span class=\"sy0\">,</span> rev <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>wordset<span class=\"sy0\">,</span> revlist<span class=\"br0\">)</span> <br/>                  <span class=\"kw1\">if</span> wrd <span class=\"sy0\">&lt;</span> rev <span class=\"kw1\">and</span> rev <span class=\"kw1\">in</span> wordset<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><br/><span class=\"nu0\">158</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> p: <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>-<span class=\"nu0\">5</span>:<span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'damon'</span><span class=\"sy0\">,</span> <span class=\"st0\">'nomad'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'lager'</span><span class=\"sy0\">,</span> <span class=\"st0\">'regal'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'leper'</span><span class=\"sy0\">,</span> <span class=\"st0\">'repel'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'lever'</span><span class=\"sy0\">,</span> <span class=\"st0\">'revel'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'kramer'</span><span class=\"sy0\">,</span> <span class=\"st0\">'remark'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define seen (make-hash))<br/>(define semordnilaps '())<br/>(call-with-input-file \"/usr/share/dict/words\"<br/>  (\u03bb(i) (for ([l (in-lines i)])<br/>          (define r (list-&gt;string (reverse (string-&gt;list l))))<br/>          (unless (equal? r l)<br/>            (hash-set! seen l #t)<br/>            (when (hash-ref seen r #f)<br/>              (set! semordnilaps (cons (list r l) semordnilaps)))))))<br/>(printf \"Total semordnilaps found: ~s\\n\" (length semordnilaps))<br/>(printf \"The five longest ones:\\n\")<br/>(for ([s (take (sort semordnilaps &gt; #:key (compose1 string-length car)) 5)])<br/>  (apply printf \"  ~s ~s\\n\" s))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 19, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 07.09.2012 Walter Pachl<br/>**********************************************************************/</span><br/>fid=<span class=\"st0\">'unixdict.txt'</span>                     <span class=\"coMULTI\">/* the test dictionary        */</span><br/>have<span class=\"sy0\">.</span>=<span class=\"st0\">''</span>                               <span class=\"coMULTI\">/* words encountered          */</span><br/>pi=<span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/* number of palindromes      */</span><br/><span class=\"kw1\">Do</span> li=<span class=\"nu0\">1</span> <span class=\"kw2\">By</span> <span class=\"nu0\">1</span> <span class=\"kw2\">While</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>        <span class=\"coMULTI\">/* as long there is input     */</span><br/>  w=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/* read a word                */</span><br/>  <span class=\"kw1\">If</span> w<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                      <span class=\"coMULTI\">/* not a blank line           */</span><br/>    r=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/* reverse it                 */</span><br/>    <span class=\"kw1\">If</span> have<span class=\"sy0\">.</span>r<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>               <span class=\"coMULTI\">/* was already encountered    */</span><br/>      pi=pi+<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* increment number of pal's  */</span><br/>      <span class=\"kw1\">If</span> pi<span class=\"sy0\">&lt;</span>=<span class=\"nu0\">5</span> <span class=\"kw3\">Then</span>                    <span class=\"coMULTI\">/* the first 5 ale listed     */</span><br/>        <span class=\"kw1\">Say</span> have<span class=\"sy0\">.</span>r w<br/>      <span class=\"kw3\">End</span><br/>    have<span class=\"sy0\">.</span>w=w                           <span class=\"coMULTI\">/* remember the word          */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> pi <span class=\"st0\">'words in'</span> fid <span class=\"st0\">'have a palindrome'</span> <span class=\"coMULTI\">/* total number found      */</span></pre>"}, {"lang": "Ring", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Semordnilap<br/>\u00a0<br/>load \"stdlib.ring\"<br/>nr = 0<br/>num = 0<br/>aList = file2list(\"C:\\Ring\\CalmoSoft\\unixdict.txt\")<br/>for n = 1 to len(aList)<br/>     bool = semordnilap(aList[n])<br/>     if (bool &gt; 0 and nr &gt; n)<br/>        num = num + 1 <br/>        if num\u00a0% 31 = 0<br/>           see aList[n] + \" \" + aList[nr] + nl <br/>        ok<br/>     ok<br/>next<br/>see \"Total number of unique pairs = \" + num + nl<br/>\u00a0<br/>func semordnilap(aString)<br/>       bString = \"\"<br/>       for i=len(aString) to 1 step -1<br/>            bString = bString + aString[i]<br/>       next<br/>       nr = find(aList,bString)<br/>       return nr<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">dict = <span class=\"kw4\">File</span>.<span class=\"kw3\">readlines</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:strip<span class=\"br0\">)</span><br/>i = <span class=\"nu0\">0</span><br/>res = dict.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:reverse<span class=\"br0\">)</span>.<span class=\"me1\">sort</span>.<span class=\"kw3\">select</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>z<span class=\"sy0\">|</span> <br/>  i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span>  <span class=\"kw1\">while</span> z <span class=\"sy0\">&gt;</span> dict<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">and</span> i <span class=\"sy0\">&lt;</span> dict.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  z == dict<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">and</span> z <span class=\"sy0\">&lt;</span> z.<span class=\"me1\">reverse</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"There are #{res.length} semordnilaps, of which the following are 5:\"</span><br/>res.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>z<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{z}   #{z.reverse}\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> wordsAll <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromURL</span><span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">)</span>.<span class=\"me1\">to</span><span class=\"br0\">[</span>IndexedSeq<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Given a sequence of lower-case words return a sub-sequence <br/> * of matches containing the word and its reverse if the two<br/> * words are different.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> semordnilap<span class=\"br0\">(</span> words<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span><span class=\"br0\">(</span>String,String<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"br0\">(</span> words.<br/>    <span class=\"me1\">zipWithIndex</span>.                        <span class=\"co1\">// index will be needed to eliminate duplicate</span><br/>    filter <span class=\"br0\">{</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>w,i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j <span class=\"sy0\">=</span> words.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>w.<span class=\"me1\">reverse</span><span class=\"br0\">)</span> <span class=\"co1\">// eg. (able,62) and (elba,7519) </span><br/>        i <span class=\"sy0\">&lt;</span> j <span class=\"sy0\">&amp;&amp;</span> w <span class=\"sy0\">!=</span> w.<span class=\"me1\">reverse</span>          <span class=\"co1\">// save the matches which are not palindromes</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">)</span>.<br/>  <span class=\"me1\">map</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>w,i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>w,w.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>          <span class=\"co1\">// drop the index</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ss <span class=\"sy0\">=</span> semordnilap<span class=\"br0\">(</span>wordsAll<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>println<span class=\"br0\">(</span> ss.<span class=\"me1\">size</span> + <span class=\"st0\">\" matches, including: <span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span> ss.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"gethttp.s7i\";<br/>\u00a0<br/>const func string: reverse (in string: word) is func<br/>  result<br/>    var string: drow is \"\";<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for index range length(word) downto 1 do<br/>      drow &amp;:= word[index];<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array string: wordList is 0 times \"\";<br/>    var set of string: words is (set of string).value;<br/>    var string: word is \"\";<br/>    var string: drow is \"\";<br/>    var integer: count is 0;<br/>  begin<br/>    wordList\u00a0:= split(lower(getHttp(\"www.puzzlers.org/pub/wordlists/unixdict.txt\")), \"\\n\");<br/>    for word range wordList do<br/>      drow\u00a0:= reverse(word);<br/>      if drow not in words then<br/>        incl(words, word);<br/>      else<br/>        if count &lt; 5 then<br/>          writeln(word &lt;&amp; \" \" &lt;&amp; drow);<br/>        end if;<br/>        incr(count);<br/>      end if;<br/>    end for;<br/>    writeln;<br/>    writeln(\"Semordnilap pairs: \" &lt;&amp; count);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var c = <span class=\"nu0\">0</span><br/>var seen = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>ARGF.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    line.<span class=\"kw3\">chomp!</span><br/>    var r = line.<span class=\"me1\">reverse</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>seen<span class=\"br0\">{</span>r<span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>c<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"#{line} #{r}\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">||</span> <span class=\"br0\">(</span>seen<span class=\"br0\">{</span>line<span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say c</pre>"}, {"lang": "Stata", "loc": 18, "block": "<pre class=\"text highlighted_source\">set seed 17760704<br/>import delimited http://www.puzzlers.org/pub/wordlists/unixdict.txt, clear<br/>save temp, replace<br/>replace v1=strreverse(v1)<br/>merge 1:1 v1 using temp, nogen keep(3)<br/>drop if v1&gt;=strreverse(v1)<br/>count<br/>  158<br/>sample 5, count<br/>gen v2=strreverse(v1)<br/>list, noheader noobs<br/>  +-------------+<br/>  | evil   live |<br/>  |  pat    tap |<br/>  |   at     ta |<br/>  |  nit    tin |<br/>  |   ku     uk |<br/>  +-------------+</pre>"}, {"lang": "SuperCollider", "loc": 12, "block": "<pre class=\"text highlighted_source\">(<br/>var text, words, sdrow, semordnilap, selection;<br/>File.use(\"unixdict.txt\".resolveRelative, \"r\", { |f| x = text = f.readAllString });<br/>words = text.split(Char.nl).collect { |each| each.asSymbol };<br/>sdrow = text.reverse.split(Char.nl).collect { |each| each.asSymbol };<br/>semordnilap = sect(words, sdrow); // converted to symbols so intersection is possible<br/>semordnilap = semordnilap.collect { |each| each.asString };<br/>\"There are\u00a0% in unixdict.txt\\n\".postf(semordnilap.size);<br/>\"For example those, with more than 3 characters:\".postln;<br/>selection = semordnilap.select { |each| each.size &gt;= 4 }.scramble.keep(4);<br/>selection.do { |each| \"%\u00a0%\\n\".postf(each, each.reverse); };<br/>)</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require <span class=\"kw2\">http</span><br/>\u00a0<br/><span class=\"co1\"># Fetch the words</span><br/><span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">geturl</span> <span class=\"kw2\">http</span>://www.puzzlers.org/pub/wordlists/unixdict.txt<span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> wordlist <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">data</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> \\n<span class=\"br0\">]</span><br/><span class=\"kw2\">http</span>::<span class=\"me1\">cleanup</span> <span class=\"re0\">$t</span><br/>\u00a0<br/><span class=\"co1\"># Build hash table for speed</span><br/><span class=\"kw1\">foreach</span> word <span class=\"re0\">$wordlist</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> reversed<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$word</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"dummy\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Find where a reversal exists</span><br/><span class=\"kw1\">foreach</span> word <span class=\"re0\">$wordlist</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists reversed<span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$word</span> ne <span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$word</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Remove to prevent pairs from being printed twice</span><br/>\tunset reversed<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$word</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\"># Add to collection of pairs</span><br/>\t<span class=\"kw1\">set</span> pairs<span class=\"br0\">(</span><span class=\"re0\">$word</span>/<span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$word</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"dummy\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> pairlist <span class=\"br0\">[</span>array names pairs<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># NB: pairs are in *arbitrary* order</span><br/>\u00a0<br/><span class=\"co1\"># Report what we've found</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Found [llength $pairlist] reversed pairs\"</span><br/><span class=\"kw1\">foreach</span> pair <span class=\"re0\">$pairlist</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Example: $pair\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT,{}<br/>requestdata = REQUEST (\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>DICT semordnilap CREATE 99999<br/>COMPILE<br/>LOOP r=requestdata<br/>rstrings=STRINGS(r,\"\u00a0? \")<br/>rreverse=REVERSE(rstrings)<br/>revstring=EXCHANGE (rreverse,\":'':':'::\")<br/>group=APPEND (r,revstring)<br/>sort=ALPHA_SORT (group)<br/>DICT semordnilap APPEND/QUIET/COUNT sort,num,cnt,\"\",\"\"<br/>ENDLOOP<br/>DICT semordnilap UNLOAD wordgroups,num,howmany<br/>get_palins=FILTER_INDEX (howmany,-,\" 1 \")<br/>size=SIZE(get_palins)<br/>PRINT \"unixdict.txt contains \", size, \" palindromes\"<br/>PRINT \" \"<br/>palindromes=SELECT (wordgroups,#get_palins)<br/>LOOP n=1,5<br/>take5=SELECT (palindromes,#n)<br/>PRINT n,\". \",take5<br/>ENDLOOP<br/>ENDCOMPILE<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 38, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/><span class=\"kw4\">Set</span> objInFile = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp;_<br/>\t\t<span class=\"st0\">\"\\unixdict.txt\"</span>,1)<br/>\u00a0<br/><span class=\"kw4\">Set</span> objUnixDict = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/><span class=\"kw4\">Set</span> objSemordnilap = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\u00a0<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> objInFile.AtEndOfStream<br/>\t<span class=\"kw4\">line</span> = objInFile.ReadLine<br/>\t<span class=\"kw3\">If</span> Len(<span class=\"kw4\">line</span>) &gt; 1 <span class=\"kw3\">Then</span><br/>\t\tobjUnixDict.Add <span class=\"kw4\">line</span>,<span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\treverse_line = StrReverse(<span class=\"kw4\">line</span>)<br/>\t<span class=\"kw3\">If</span> reverse_line &lt;&gt; <span class=\"kw4\">line</span> <span class=\"kw3\">And</span> objUnixDict.Exists(reverse_line) <span class=\"kw3\">Then</span><br/>\t\tobjSemordnilap.Add <span class=\"kw4\">line</span>, reverse_line<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Loop</span>\t<br/>\u00a0<br/><span class=\"co1\">'Display the first 5 keys.<br/></span>k = 0<br/><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> Key <span class=\"kw3\">In</span> objSemordnilap.Keys<br/>\tWScript.StdOut.Write Key &amp; <span class=\"st0\">\" - \"</span> &amp; objSemordnilap.Item(Key)<br/>\tWScript.StdOut.WriteLine<br/>\tk = k + 1<br/>\t<span class=\"kw3\">If</span> k = 5 <span class=\"kw3\">Then</span><br/>\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"Total Count:  \"</span> &amp; objSemordnilap.Count<br/>WScript.StdOut.WriteLine<br/>\u00a0<br/>objInFile.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objFSO = <span class=\"kw5\">Nothing</span><br/><span class=\"kw4\">Set</span> objUnixDict = <span class=\"kw5\">Nothing</span><br/><span class=\"kw4\">Set</span> objSemordnilap = <span class=\"kw5\">Nothing</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 60, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>string 0;               \\use zero-terminated strings<br/>def LF=$0A, CR=$0D, EOF=$1A;<br/>\u00a0<br/>proc RevStr(S);         \\Reverse order of characters in a string<br/>char S;<br/>int  I, J, T;<br/>[J:= 0;<br/>while S(J) do J:= J+1;<br/>J:= J-1;<br/>I:= 0;<br/>while I&lt;J do<br/>        [T:= S(I);  S(I):= S(J);  S(J):= T;     \\swap<br/>        I:= I+1;  J:= J-1;<br/>        ];<br/>];<br/>\u00a0<br/>func StrEqual(S1, S2);  \\Compare strings, return 'true' if equal<br/>char S1, S2;<br/>int  I;<br/>[for I:= 0 to 80-1 do<br/>        [if S1(I) # S2(I) then return false;<br/>         if S1(I) = 0 then return true;<br/>        ];<br/>];<br/>\u00a0<br/>int  C, I, J, SJ, Count;<br/>char Dict, Word(80);<br/>[\\Read file on command line redirected as input, i.e: &lt;unixdict.txt<br/>Dict:= GetHp;           \\starting address of block of local \"heap\" memory<br/>I:= 0;                  \\ [GetHp does exact same thing as Reserve(0)]<br/>repeat  repeat C:= ChIn(1) until C#LF;  \\get chars sans line feeds<br/>        if C = CR then C:= 0;           \\replace carriage return with terminator<br/>        Dict(I):= C;  I:= I+1;<br/>until   C = EOF;<br/>SetHp(Dict+I);          \\set heap pointer beyond Dict<br/>I:= 0;  Count:= 0;<br/>loop    [J:= 0;         \\get word at I<br/>        repeat  C:= Dict(I+J);  Word(J):= C;  J:= J+1;<br/>        until   C=0;<br/>        RevStr(Word);<br/>        J:= J+I;        \\set J to following word in Dict<br/>        if Dict(J) = EOF then quit;<br/>        SJ:= J;         \\save index to following word<br/>        loop    [if StrEqual(Word, Dict+J) then<br/>                    [Count:= Count+1;<br/>                    if Count &lt;= 5 then<br/>                        [RevStr(Word);  \\show some examples<br/>                        Text(0, Word); ChOut(0, ^ ); Text(0, Dict+J); CrLf(0);<br/>                        ];<br/>                    quit;<br/>                    ];<br/>                repeat J:= J+1 until Dict(J) = 0;<br/>                J:= J+1;<br/>                if Dict(J) = EOF then quit;<br/>                ];<br/>        I:= SJ;         \\next word<br/>        ];<br/>IntOut(0, Count);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">var [const] words=  // create hashed unixdict of striped words (word:True, ...)<br/>   File(\"dict.txt\").howza(11).pump(Dictionary().howza(8).add.fp1(True));<br/>ss:=words.pump(List, // push stripped unixdict words through some functions<br/>   fcn(w){ words.holds(w.reverse()) }, Void.Filter,   // filter palindromes<br/>   // create (\"word\",\"drow\") if \"word\"&lt;\"drow\" (ie remove duplicates)<br/>   fcn(w){ r:=w.reverse(); if(w&lt;r) T(w,r) else Void.Skip });<br/>\u00a0<br/>ss.len().println(); //--&gt; 158<br/>ss.shuffle()[0,5].println();</pre>"}]}