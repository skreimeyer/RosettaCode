{"task": "CSV_data_manipulation", "blocks": [{"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> CSV <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Row<span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Line<span class=\"br0\">(</span>S: String; Separator: Character\u00a0:= ','<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Row;<br/>   <span class=\"kw3\">function</span> Next<span class=\"br0\">(</span>R: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Row<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean; <br/>     <span class=\"co1\">-- if there is still an item in R, Next advances to it and returns True</span><br/>   <span class=\"kw3\">function</span> Item<span class=\"br0\">(</span>R: Row<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>     <span class=\"co1\">-- after calling R.Next i times, this returns the i'th item (if any)</span><br/>\u00a0<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Row<span class=\"br0\">(</span>Length: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">record</span><br/>      Str: String<span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Length</span><span class=\"br0\">)</span>;<br/>      Fst: Positive;<br/>      Lst: Natural;<br/>      Nxt: Positive;<br/>      Sep: Character;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> CSV;</pre>"}, {"lang": "Aime", "loc": 73, "block": "<pre class=\"text highlighted_source\">void<br/>read_csv(list t, text path)<br/>{<br/>    file f;<br/>    list l;<br/>\u00a0<br/>    f_affix(f, path);<br/>    while (f_news(f, l, 0, 0, \",\") ^ -1) {<br/>        l_append(t, l);<br/>    }<br/>}<br/>\u00a0<br/>list<br/>sum_columns(list t)<br/>{<br/>    list c, l;<br/>    integer i;<br/>\u00a0<br/>    l_append(c, \"SUM\");<br/>    for (i, l in t) {<br/>        if (i) {<br/>            integer j, sum;<br/>            text s;<br/>\u00a0<br/>            sum = 0;<br/>            for (j, s in l) {<br/>                sum += atoi(s);<br/>            }<br/>\u00a0<br/>            l_append(c, sum);<br/>        }<br/>    }<br/>\u00a0<br/>    return c;<br/>}<br/>\u00a0<br/>void<br/>add_column(list t, list c)<br/>{<br/>    integer i;<br/>    list l;<br/>\u00a0<br/>    for (i, l in t) {<br/>        l_append(l, c[i]);<br/>    }<br/>}<br/>\u00a0<br/>void<br/>write_csv(list t, text path)<br/>{<br/>    integer i;<br/>    file f;<br/>    list l;<br/>\u00a0<br/>    f_create(f, path, 00644);<br/>    for (i, l in t) {<br/>        f_(f, l[0]);<br/>        l_ocall(l, f_, 2, 1, -1, f, \",\");<br/>        f_newline(f);<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list t;<br/>\u00a0<br/>    read_csv(t, \"tmp/CSV_data_manipulation.csv\");<br/>    add_column(t, sum_columns(t));<br/>    write_csv(t, \"tmp/CSV_data_manipulated.csv\");<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 88, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># count occurrances of a char in string #</span><br/><span class=\"kw4\">PROC</span> char count <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> c<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> str<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> str <span class=\"kw2\">DO</span><br/>\t <span class=\"kw2\">IF</span> c <span class=\"sy1\">=</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> count <span class=\"sy1\">+:=</span> 1<br/>\t <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      count<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"coMULTI\"># split string on separator #</span><br/><span class=\"kw4\">PROC</span> char split <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> str<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span> sep<span class=\"br0\">)</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> strlen <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> str<span class=\"sy1\">,</span> cnt <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> len<span class=\"sy1\">,</span> p<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> start <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>      <span class=\"br0\">[</span>char count <span class=\"br0\">(</span>sep<span class=\"sy1\">,</span> str<span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span> <span class=\"kw3\">STRING</span> list<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">WHILE</span> start <span class=\"sy1\">&lt;=</span> strlen <span class=\"kw19\">ANDF</span> <span class=\"kw26\">char in string</span> <span class=\"br0\">(</span>sep<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> str<span class=\"br0\">[</span>start<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">DO</span> <br/>\t p <span class=\"sy1\">+:=</span> start <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>\t list<span class=\"br0\">[</span>cnt <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span>start<span class=\"sy1\">:</span>p<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t start <span class=\"sy1\">:=</span> p <span class=\"sy1\">+</span> 1<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> cnt <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> list<span class=\"br0\">[</span>cnt <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> str<br/>      <span class=\"kw2\">ELIF</span> start <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> str <span class=\"sy1\">+</span> 1 <span class=\"kw2\">THEN</span> list<span class=\"br0\">[</span>cnt <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span>start<span class=\"sy1\">:</span><span class=\"br0\">]</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      list<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> join <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> words<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> sep<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> words <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span> <br/>      <span class=\"kw3\">STRING</span> str <span class=\"sy1\">:=</span> words <span class=\"br0\">[</span>1<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> words <span class=\"kw2\">DO</span><br/>\t str <span class=\"sy1\">+:=</span> sep <span class=\"sy1\">+</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      str<br/>   <span class=\"kw2\">ELSE</span><br/>      <span class=\"st0\">\"\"</span><br/>   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># read a line from file #</span><br/><span class=\"kw4\">PROC</span> readline <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">STRING</span> line<span class=\"sy1\">;</span><br/>      get <span class=\"br0\">(</span>f<span class=\"sy1\">,</span> line<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">new line</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      line<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Add one item to tuple #</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> tuple<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> item<span class=\"br0\">)</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span> <br/>      <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> tuple<span class=\"sy1\">+</span>1<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> new<span class=\"sy1\">;</span><br/>      new<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> tuple<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> tuple<span class=\"sy1\">;</span><br/>      new<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> new<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> item<span class=\"sy1\">;</span><br/>      tuple <span class=\"sy1\">:=</span> new<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># convert signed number TO INT #</span><br/><span class=\"kw4\">OP</span> TOINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> str<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> n <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> sign <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> str <span class=\"kw2\">WHILE</span> sign <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">DO</span><br/>\t <span class=\"kw2\">IF</span> is digit <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> n <span class=\"sy1\">:=</span> n <span class=\"sy1\">*</span> 10 <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><br/>\t <span class=\"kw2\">ELIF</span> i <span class=\"sy1\">=</span> 1 <span class=\"kw16\">AND</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"-\"</span> <span class=\"kw2\">THEN</span> sign <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>1<br/>\t <span class=\"kw2\">ELIF</span> i <span class=\"sy1\">/=</span> 1 <span class=\"kw16\">OR</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">/=</span> <span class=\"st0\">\"+\"</span> <span class=\"kw2\">THEN</span> sign <span class=\"sy1\">:=</span> 0<br/>\t <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      n <span class=\"sy1\">*</span> sign<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> STR <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> i<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"kw22\">whole</span> <span class=\"br0\">(</span>i<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># The main program #</span><br/><span class=\"kw6\">FILE</span> foo<span class=\"sy1\">;</span><br/><span class=\"kw22\">open</span> <span class=\"br0\">(</span>foo<span class=\"sy1\">,</span> <span class=\"st0\">\"CSV_data_manipulation.data\"</span><span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> header <span class=\"sy1\">:=</span> char split <span class=\"br0\">(</span>readline <span class=\"br0\">(</span>foo<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>header <span class=\"sy1\">+:=</span> <span class=\"st0\">\"SUM\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>join <span class=\"br0\">(</span>header<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> end of file <span class=\"br0\">(</span>foo<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>   <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> fields <span class=\"sy1\">:=</span> char split <span class=\"br0\">(</span>readline <span class=\"br0\">(</span>foo<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> fields <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">+:=</span> TOINT fields<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   fields <span class=\"sy1\">+:=</span> STR sum<span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>join <span class=\"br0\">(</span>fields<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">close</span> <span class=\"br0\">(</span>foo<span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 7, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Read<span class=\"sy0\">,</span> Data<span class=\"sy0\">.</span>csv<br/><span class=\"br0\">{</span><br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopReadLine\"><span class=\"kw2\">A_LoopReadLine</span></a><span class=\"sy0\">,</span> CSV<br/>        Output <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&amp;&amp;</span> i!<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">**</span><span class=\"nu0\">2</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">5</span>\u00a0? <span class=\"st0\">\"`n\"</span>\u00a0: <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Output%</span><span class=\"sy0\">,</span> NewData<span class=\"sy0\">.</span>csv</pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <span class=\"kw3\">FS</span> = <span class=\"kw3\">OFS</span> = <span class=\"st0\">\",\"</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">NR</span><span class=\"sy2\">==</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span> <br/>    <span class=\"kw5\">print</span> <span class=\"re0\">$0</span>, <span class=\"st0\">\"SUM\"</span><br/>    next <br/><span class=\"br0\">}</span> <br/><span class=\"br0\">{</span><br/>    sum = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">NF</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<br/>        sum <span class=\"sy3\">+</span>= <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span> <span class=\"re0\">$0</span>, sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 278, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co2\">#define TITLE \"CSV data manipulation\"</span><br/><span class=\"co2\">#define URL \"http://rosettacode.org/wiki/CSV_data_manipulation\"</span><br/>\u00a0<br/><span class=\"co2\">#define _GNU_SOURCE</span><br/><span class=\"co2\">#define bool int</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt; /* malloc...*/</span><br/><span class=\"co2\">#include &lt;string.h&gt; /* strtok...*/</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;errno.h&gt;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * How to read a CSV file\u00a0?<br/> */</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> delim<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> rows<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> cols<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">**</span> table<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> CSV<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/** <br/> * Utility function to trim whitespaces from left &amp; right of a string<br/> */</span><br/><span class=\"kw4\">int</span> trim<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">**</span> str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> trimmed<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> len<span class=\"sy0\">;</span><br/>\u00a0<br/>\tlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tn <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* from right */</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span> <br/>\t\ttrimmed <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tn<span class=\"sy0\">--;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* from left */</span><br/>\tn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> len<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span> <br/>\t\t<span class=\"sy0\">*</span>str <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\ttrimmed <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tn<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> trimmed<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/** <br/> * De-allocate csv structure <br/> */</span><br/><span class=\"kw4\">int</span> csv_destroy<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>csv <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>delim <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>delim<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Allocate memory for a CSV structure <br/> */</span><br/>CSV <span class=\"sy0\">*</span> csv_create<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> cols<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tCSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">;</span><br/>\u00a0<br/>\tcsv <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>CSV<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>rows <span class=\"sy0\">=</span> rows<span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>cols <span class=\"sy0\">=</span> cols<span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>delim <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcsv<span class=\"sy0\">-&gt;</span>table <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cols <span class=\"sy0\">*</span> rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">goto</span> error<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cols <span class=\"sy0\">*</span> rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> csv<span class=\"sy0\">;</span><br/>\u00a0<br/>error<span class=\"sy0\">:</span><br/>\tcsv_destroy<span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Get value in CSV table at COL, ROW<br/> */</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> csv_get<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> col<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> idx<span class=\"sy0\">;</span><br/>\tidx <span class=\"sy0\">=</span> col <span class=\"sy0\">+</span> <span class=\"br0\">(</span>row <span class=\"sy0\">*</span> csv<span class=\"sy0\">-&gt;</span>cols<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> csv<span class=\"sy0\">-&gt;</span>table<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Set value in CSV table at COL, ROW<br/> */</span><br/><span class=\"kw4\">int</span> csv_set<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> col<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> idx<span class=\"sy0\">;</span><br/>\tidx <span class=\"sy0\">=</span> col <span class=\"sy0\">+</span> <span class=\"br0\">(</span>row <span class=\"sy0\">*</span> csv<span class=\"sy0\">-&gt;</span>cols<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>table<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> csv_display<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> content<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>rows <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[Empty table]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>[Table cols=%d rows=%d]<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">,</span> csv<span class=\"sy0\">-&gt;</span>rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>row<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> row<span class=\"sy0\">&lt;</span>csv<span class=\"sy0\">-&gt;</span>rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcontent <span class=\"sy0\">=</span> csv_get<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\t</span>|\"</span><span class=\"sy0\">,</span> content<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Resize CSV table<br/> */</span><br/><span class=\"kw4\">int</span> csv_resize<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> old_csv<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> new_cols<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> new_rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> cur_col<span class=\"sy0\">,</span> <br/>\t\t\t\t cur_row<span class=\"sy0\">,</span> <br/>\t\t\t\t max_cols<span class=\"sy0\">,</span><br/>\t\t\t\t max_rows<span class=\"sy0\">;</span><br/>\tCSV <span class=\"sy0\">*</span> new_csv<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> content<span class=\"sy0\">;</span><br/>\tbool in_old<span class=\"sy0\">,</span> in_new<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Build a new (fake) csv */</span><br/>\tnew_csv <span class=\"sy0\">=</span> csv_create<span class=\"br0\">(</span>new_cols<span class=\"sy0\">,</span> new_rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>new_csv <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">goto</span> error<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\tnew_csv<span class=\"sy0\">-&gt;</span>rows <span class=\"sy0\">=</span> new_rows<span class=\"sy0\">;</span><br/>\tnew_csv<span class=\"sy0\">-&gt;</span>cols <span class=\"sy0\">=</span> new_cols<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\tmax_cols <span class=\"sy0\">=</span> <span class=\"br0\">(</span>new_cols <span class=\"sy0\">&gt;</span> old_csv<span class=\"sy0\">-&gt;</span>cols<span class=\"br0\">)</span><span class=\"sy0\">?</span> new_cols <span class=\"sy0\">:</span> old_csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">;</span><br/>\tmax_rows <span class=\"sy0\">=</span> <span class=\"br0\">(</span>new_rows <span class=\"sy0\">&gt;</span> old_csv<span class=\"sy0\">-&gt;</span>rows<span class=\"br0\">)</span><span class=\"sy0\">?</span> new_rows <span class=\"sy0\">:</span> old_csv<span class=\"sy0\">-&gt;</span>rows<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>cur_col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> cur_col<span class=\"sy0\">&lt;</span>max_cols<span class=\"sy0\">;</span> cur_col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>cur_row<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> cur_row<span class=\"sy0\">&lt;</span>max_rows<span class=\"sy0\">;</span> cur_row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tin_old <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cur_col <span class=\"sy0\">&lt;</span> old_csv<span class=\"sy0\">-&gt;</span>cols<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>cur_row <span class=\"sy0\">&lt;</span> old_csv<span class=\"sy0\">-&gt;</span>rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tin_new <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cur_col <span class=\"sy0\">&lt;</span> new_csv<span class=\"sy0\">-&gt;</span>cols<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>cur_row <span class=\"sy0\">&lt;</span> new_csv<span class=\"sy0\">-&gt;</span>rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>in_old <span class=\"sy0\">&amp;&amp;</span> in_new<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"coMULTI\">/* re-link data */</span><br/>\t\t\t\tcontent <span class=\"sy0\">=</span> csv_get<span class=\"br0\">(</span>old_csv<span class=\"sy0\">,</span> cur_col<span class=\"sy0\">,</span> cur_row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tcsv_set<span class=\"br0\">(</span>new_csv<span class=\"sy0\">,</span> cur_col<span class=\"sy0\">,</span> cur_row<span class=\"sy0\">,</span> content<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>in_old<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"coMULTI\">/* destroy data */</span><br/>\t\t\t\tcontent <span class=\"sy0\">=</span> csv_get<span class=\"br0\">(</span>old_csv<span class=\"sy0\">,</span> cur_col<span class=\"sy0\">,</span> cur_row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>content<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"coMULTI\">/* skip */</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"coMULTI\">/* on rows */</span>\t\t<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>old_csv<span class=\"sy0\">-&gt;</span>table<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\told_csv<span class=\"sy0\">-&gt;</span>rows <span class=\"sy0\">=</span> new_rows<span class=\"sy0\">;</span><br/>\told_csv<span class=\"sy0\">-&gt;</span>cols <span class=\"sy0\">=</span> new_cols<span class=\"sy0\">;</span><br/>\told_csv<span class=\"sy0\">-&gt;</span>table <span class=\"sy0\">=</span> new_csv<span class=\"sy0\">-&gt;</span>table<span class=\"sy0\">;</span><br/>\tnew_csv<span class=\"sy0\">-&gt;</span>table <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\tcsv_destroy<span class=\"br0\">(</span>new_csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>error<span class=\"sy0\">:</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Unable to resize CSV table: error\u00a0%d -\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> errno<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Open CSV file and load its content into provided CSV structure<br/> **/</span><br/><span class=\"kw4\">int</span> csv_open<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> filename<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span> fp<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> m_rows<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> m_cols<span class=\"sy0\">,</span> cols<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> line<span class=\"br0\">[</span><span class=\"nu0\">2048</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> lineptr<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> token<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\tfp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fp <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">goto</span> error<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\tm_rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tm_cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>line<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">,</span> fp<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> \t\tm_rows <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> \t\tcols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> \t\tlineptr <span class=\"sy0\">=</span> line<span class=\"sy0\">;</span><br/> \t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>token <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>lineptr<span class=\"sy0\">,</span> csv<span class=\"sy0\">-&gt;</span>delim<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> \t\t\tlineptr <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/> \t\t\ttrim<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>token<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            cols <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        \t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cols <span class=\"sy0\">&gt;</span> m_cols<span class=\"br0\">)</span> <span class=\"br0\">{</span> m_cols <span class=\"sy0\">=</span> cols<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            csv_resize<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> m_cols<span class=\"sy0\">,</span> m_rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> cols<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> m_rows<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> strdup<span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>rows <span class=\"sy0\">=</span> m_rows<span class=\"sy0\">;</span><br/>\tcsv<span class=\"sy0\">-&gt;</span>cols <span class=\"sy0\">=</span> m_cols<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>error<span class=\"sy0\">:</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open\u00a0%s for reading.\"</span><span class=\"sy0\">,</span> filename<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Open CSV file and save CSV structure content into it<br/> **/</span><br/><span class=\"kw4\">int</span> csv_save<span class=\"br0\">(</span>CSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> filename<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span> fp<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span> content<span class=\"sy0\">;</span><br/>\u00a0<br/>\tfp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>row<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> row<span class=\"sy0\">&lt;</span>csv<span class=\"sy0\">-&gt;</span>rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcontent <span class=\"sy0\">=</span> csv_get<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span> <span class=\"st0\">\"%s%s\"</span><span class=\"sy0\">,</span> content<span class=\"sy0\">,</span> <br/>            \t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>col <span class=\"sy0\">==</span> csv<span class=\"sy0\">-&gt;</span>cols<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> csv<span class=\"sy0\">-&gt;</span>delim<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/** <br/> * Test<br/> */</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span> argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tCSV <span class=\"sy0\">*</span> csv<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>TITLE<span class=\"sy0\">,</span> URL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcsv <span class=\"sy0\">=</span> csv_create<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_open<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"st0\">\"fixtures/csv-data-manipulation.csv\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_display<span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcsv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Column0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"200\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"300\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_set<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"400\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_display<span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcsv_save<span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"st0\">\"tmp/csv-data-manipulation.result.csv\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcsv_destroy<span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 129, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;cctype&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> CSV<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    CSV<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> m_nCols<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, m_nRows<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> open<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> filename, <span class=\"kw4\">char</span> delim <span class=\"sy1\">=</span> <span class=\"st0\">','</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> file<span class=\"br0\">(</span> filename <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        clear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> file.<span class=\"me1\">is_open</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            open<span class=\"br0\">(</span> file, delim <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> open<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">istream</span><span class=\"sy3\">&amp;</span> istream, <span class=\"kw4\">char</span> delim <span class=\"sy1\">=</span> <span class=\"st0\">','</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">string</span>         line<span class=\"sy4\">;</span><br/>\u00a0<br/>        clear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span> istream, line <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nCol <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span>    lineStream<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">string</span>           cell<span class=\"sy4\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span> lineStream, cell, delim <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                m_oData<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> nCol, m_nRows <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> trim<span class=\"br0\">(</span> cell <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                nCol<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            m_nCols <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span> m_nCols, nCol <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            m_nRows<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> save<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> pFile, <span class=\"kw4\">char</span> delim <span class=\"sy1\">=</span> <span class=\"st0\">','</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">ofstream</span> ofile<span class=\"br0\">(</span> pFile <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> ofile.<span class=\"me1\">is_open</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            save<span class=\"br0\">(</span> ofile <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> save<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> ostream, <span class=\"kw4\">char</span> delim <span class=\"sy1\">=</span> <span class=\"st0\">','</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nRow <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> nRow <span class=\"sy1\">&lt;</span> m_nRows<span class=\"sy4\">;</span> nRow<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nCol <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> nCol <span class=\"sy1\">&lt;</span> m_nCols<span class=\"sy4\">;</span> nCol<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                ostream <span class=\"sy1\">&lt;&lt;</span> trim<span class=\"br0\">(</span> m_oData<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> nCol, nRow <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>nCol<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> m_nCols <span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    ostream <span class=\"sy1\">&lt;&lt;</span> delim<span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                <span class=\"br0\">{</span><br/>                    ostream <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        m_oData.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        m_nRows <span class=\"sy1\">=</span> m_nCols <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nCol, <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nRow <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        m_nCols <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span> m_nCols, nCol<span class=\"sy2\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        m_nRows <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span> m_nRows, nRow<span class=\"sy2\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> m_oData<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span>nCol, nRow<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">inline</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> GetRows<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> m_nRows<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">inline</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> GetCols<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> m_nCols<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"co1\">// trim string for empty spaces in begining and at the end</span><br/>    <span class=\"kw2\">inline</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>trim<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>s<span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>\u00a0<br/>        s.<span class=\"me1\">erase</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">find_if</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">not1</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ptr_fun</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">isspace</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        s.<span class=\"me1\">erase</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">find_if</span><span class=\"br0\">(</span>s.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">not1</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ptr_fun</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">isspace</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> s<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span>, <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span>, std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> m_oData<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span>    m_nCols<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span>    m_nRows<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    CSV oCSV<span class=\"sy4\">;</span><br/>\u00a0<br/>    oCSV.<span class=\"me1\">open</span><span class=\"br0\">(</span> <span class=\"st0\">\"test_in.csv\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    oCSV<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"Column0\"</span><span class=\"sy4\">;</span><br/>    oCSV<span class=\"br0\">(</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"100\"</span><span class=\"sy4\">;</span><br/>    oCSV<span class=\"br0\">(</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"200\"</span><span class=\"sy4\">;</span><br/>    oCSV<span class=\"br0\">(</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"300\"</span><span class=\"sy4\">;</span><br/>    oCSV<span class=\"br0\">(</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"400\"</span><span class=\"sy4\">;</span><br/>    oCSV.<span class=\"me1\">save</span><span class=\"br0\">(</span> <span class=\"st0\">\"test_out.csv\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 108, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> CSV<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> CSV<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> Dictionary<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span>, <span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> _data<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _rows<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _cols<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Rows <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _rows<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Cols <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _cols<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> CSV<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Clear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            _cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            _data <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span>, <span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Open<span class=\"br0\">(</span>StreamReader stream, <span class=\"kw4\">char</span> delim <span class=\"sy0\">=</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> line<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Clear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> stream<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> values <span class=\"sy0\">=</span> line<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span>delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> values<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">this</span><span class=\"br0\">[</span>col,row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>                        col<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                    row<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            stream<span class=\"sy0\">.</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Save<span class=\"br0\">(</span>StreamWriter stream, <span class=\"kw4\">char</span> delim <span class=\"sy0\">=</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> row <span class=\"sy0\">&lt;</span> _rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;</span> _cols<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    stream<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">[</span>col, row<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy0\">&lt;</span> _cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        stream<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                stream<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            stream<span class=\"sy0\">.</span><span class=\"me1\">Flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            stream<span class=\"sy0\">.</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> <span class=\"kw1\">this</span><span class=\"br0\">[</span><span class=\"kw4\">int</span> col, <span class=\"kw4\">int</span> row<span class=\"br0\">]</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">try</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> _data<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>col, row<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">catch</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">set</span><br/>            <span class=\"br0\">{</span><br/>                _data<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>col, row<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                _rows <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span>_rows, row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                _cols <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span>_cols, col <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            CSV csv <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CSV<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            csv<span class=\"sy0\">.</span><span class=\"me1\">Open</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamReader<span class=\"br0\">(</span><span class=\"st_h\">@\"test_in.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv<span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Column0\"</span><span class=\"sy0\">;</span><br/>            csv<span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"100\"</span><span class=\"sy0\">;</span><br/>            csv<span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"200\"</span><span class=\"sy0\">;</span><br/>            csv<span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"300\"</span><span class=\"sy0\">;</span><br/>            csv<span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"400\"</span><span class=\"sy0\">;</span><br/>            csv<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamWriter<span class=\"br0\">(</span><span class=\"st_h\">@\"test_out.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>data<span class=\"sy0\">.</span>csv\u00a0:<span class=\"me1\">as</span> csv<span class=\"br0\">]</span><br/>         '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io\u00a0:<span class=\"me1\">as</span> io<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> add<span class=\"sy0\">-</span>sum<span class=\"sy0\">-</span>column <span class=\"br0\">[</span>coll<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>titles <span class=\"br0\">(</span><span class=\"kw1\">first</span> coll<span class=\"br0\">)</span><br/>        values <span class=\"br0\">(</span><span class=\"kw1\">rest</span> coll<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> titles <span class=\"st0\">\"SUM\"</span><span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> read<span class=\"sy0\">-</span>string <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> values<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>in<span class=\"sy0\">-</span>file <span class=\"br0\">(</span>io<span class=\"sy0\">/</span>reader <span class=\"st0\">\"test_in.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doall</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>out<span class=\"sy0\">-</span>data <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>sum<span class=\"sy0\">-</span>column <span class=\"br0\">(</span>csv<span class=\"sy0\">/</span>read<span class=\"sy0\">-</span>csv in<span class=\"sy0\">-</span>file<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>out<span class=\"sy0\">-</span>file <span class=\"br0\">(</span>io<span class=\"sy0\">/</span>writer <span class=\"st0\">\"test_out.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>csv<span class=\"sy0\">/</span>write<span class=\"sy0\">-</span>csv out<span class=\"sy0\">-</span>file out<span class=\"sy0\">-</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 41, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> csvfile-to-nested-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>filename delim-char<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"Reads the csv to a nested list, where each sublist represents a line.\"</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>input filename<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop <span class=\"sy0\">:</span><span class=\"me1\">for</span> line <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>read-line input <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">while</span> line<br/>          <span class=\"sy0\">:</span><span class=\"me1\">collect</span> <span class=\"br0\">(</span>read-from-string<br/>                    <span class=\"br0\">(</span>substitute #\\SPACE delim-char<br/>                                <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"(~a)~%\"</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sublist-sum-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>nested-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return a list with the sum of each list of numbers in a nested list.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>every #'<span class=\"kw1\">numberp</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>reduce #'+ <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          nested-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> append-each-sublist <span class=\"br0\">(</span>nested-list1 nested-list2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Horizontally append the sublists in two nested lists. Used to add columns.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">append</span> nested-list1 nested-list2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> nested-list-to-csv <span class=\"br0\">(</span>nested-<span class=\"kw1\">list</span> delim-string<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Converts the nested list back into a csv-formatted string.\"</span><br/>  <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"br0\">(</span>concatenate 'string <span class=\"st0\">\"~{~{~2,'0d\"</span> delim-string <span class=\"st0\">\"~}~%~}\"</span><span class=\"br0\">)</span><br/>          nested-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>csvfile-path #p<span class=\"st0\">\"projekte/common-lisp/example_comma_csv.txt\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>result-path #p<span class=\"st0\">\"results.txt\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>data-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>csvfile-to-nested-<span class=\"kw1\">list</span> csvfile-path #\\<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>list-of-sums <span class=\"br0\">(</span>sublist-sum-<span class=\"kw1\">list</span> data-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>result-header <span class=\"st0\">\"C1,C2,C3,C4,C5,SUM\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> data-<span class=\"kw1\">list</span>    <span class=\"co1\">; add list of sums as additional column</span><br/>          <span class=\"br0\">(</span>rest    <span class=\"co1\">; remove old header</span><br/>           <span class=\"br0\">(</span>append-each-sublist data-<span class=\"kw1\">list</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">list</span> list-of-sums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; write to output-file</span><br/>    <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>output result-path <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span> <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"me1\">supersede</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format output <span class=\"st0\">\"~a~%~a\"</span><br/>              result-header <span class=\"br0\">(</span>nested-list-to-csv data-<span class=\"kw1\">list</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>main<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">csv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>           std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> rows <span class=\"sy0\">=</span> <span class=\"st0\">\"csv_data_in.csv\"</span>.<span class=\"me1\">File</span>.<span class=\"me1\">byLine</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> fout <span class=\"sy0\">=</span> <span class=\"st0\">\"csv_data_out.csv\"</span>.<span class=\"me1\">File</span><span class=\"br0\">(</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fout.<span class=\"me1\">writeln</span><span class=\"br0\">(</span>rows.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fout.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"%(%(%d,%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> rows.<span class=\"me1\">dropOne</span><br/>                .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> r.<span class=\"me1\">csvReader</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span>.<span class=\"me1\">front</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 23, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; CSV -&gt; LISTS</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>row line<span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split line <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table csv<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span>  csv<span class=\"sy0\">-&gt;</span>row <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split csv <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; LISTS -&gt; CSV</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>row<span class=\"sy0\">-&gt;</span>csv row<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join row <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>table<span class=\"sy0\">-&gt;</span>csv header rows<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>row<span class=\"sy0\">-&gt;</span>csv header<span class=\"br0\">)</span> <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>row rows<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>row<span class=\"sy0\">-&gt;</span>csv row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task file<span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">let*</span><br/> \t<span class=\"br0\">(</span><span class=\"br0\">(</span>table <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table file<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>header <span class=\"br0\">(</span>first table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>rows <span class=\"br0\">(</span>rest table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"br0\">(</span>table<span class=\"sy0\">-&gt;</span>csv<br/> \t\t<span class=\"br0\">(</span><span class=\"kw1\">append</span> header <span class=\"st0\">\"SUM\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; add last column</span><br/> \t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>row rows<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> row <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 21, "block": "<pre class=\"text highlighted_source\">// Assumes a CSV file exists and has been sprayed to a Thor cluster<br/>MyFileLayout\u00a0:= RECORD<br/>STRING Field1;<br/>STRING Field2;<br/>STRING Field3;<br/>STRING Field4;<br/>STRING Field5;<br/>END;\t\t\t\t\t\t\t<br/>\u00a0<br/>MyDataset\u00a0:= DATASET ('~Rosetta::myCSVFile', MyFileLayout,CSV(SEPARATOR(',')));<br/>\u00a0<br/>MyFileLayout Appended(MyFileLayout pInput):= TRANSFORM <br/>  SELF.Field1\u00a0:= pInput.Field1 +'x';<br/>  SELF.Field2\u00a0:= pInput.Field2 +'y';<br/>  SELF.Field3\u00a0:= pInput.Field3 +'z';<br/>  SELF.Field4\u00a0:= pInput.Field4 +'a';<br/>  SELF.Field5\u00a0:= pInput.Field5 +'b';<br/>END\u00a0; <br/>\u00a0<br/>MyNewDataset\u00a0:= PROJECT(MyDataset,Appended(LEFT)); <br/>OUTPUT(myNewDataset,,'~Rosetta::myNewCSVFile',CSV,OVERWRITE);</pre>"}, {"lang": "Elixir", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule Csv do<br/>  defstruct header: \"\", data: \"\", separator: \",\"<br/>\u00a0<br/>  def from_file(path) do<br/>    [header | data] = path<br/>    |&gt; File.stream!<br/>    |&gt; Enum.to_list<br/>    |&gt; Enum.map(&amp;String.trim/1)<br/>\u00a0<br/>   \u00a0%Csv{ header: header, data: data }<br/>  end<br/>\u00a0<br/>  def sums_of_rows(csv) do<br/>    Enum.map(csv.data, fn (row) -&gt; sum_of_row(row, csv.separator) end)<br/>  end<br/>\u00a0<br/>  def sum_of_row(row, separator) do<br/>    row<br/>    |&gt; String.split(separator)<br/>    |&gt; Enum.map(&amp;String.to_integer/1)<br/>    |&gt; Enum.sum<br/>    |&gt; to_string<br/>  end<br/>\u00a0<br/>  def append_column(csv, column_header, column_data) do<br/>    header = append_to_row(csv.header, column_header, csv.separator)<br/>\u00a0<br/>    data = [csv.data, column_data]<br/>    |&gt; List.zip<br/>    |&gt; Enum.map(fn ({ row, value }) -&gt;<br/>      append_to_row(row, value, csv.separator)<br/>    end)<br/>\u00a0<br/>   \u00a0%Csv{ header: header, data: data }<br/>  end<br/>\u00a0<br/>  def append_to_row(row, value, separator) do<br/>    row &lt;&gt; separator &lt;&gt; value<br/>  end<br/>\u00a0<br/>  def to_file(csv, path) do<br/>    body = Enum.join([csv.header | csv.data], \"\\n\")<br/>\u00a0<br/>    File.write(path, body)<br/>  end<br/>end<br/>\u00a0<br/>csv = Csv.from_file(\"in.csv\")<br/>csv<br/>|&gt; Csv.append_column(\"SUM\", Csv.sums_of_rows(csv))<br/>|&gt; Csv.to_file(\"out.csv\")<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 38, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> csv_data <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>change<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> from_binary<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> from_file<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> into_file<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">change</span><span class=\"br0\">(</span> <span class=\"re5\">CSV</span><span class=\"sy1\">,</span> <span class=\"re5\">Changes</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> change_foldl<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">CSV</span><span class=\"sy1\">,</span> <span class=\"re5\">Changes</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">from_binary</span><span class=\"br0\">(</span> <span class=\"re5\">Binary</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Lines</span> <span class=\"sy3\">=</span> <span class=\"kw4\">binary</span>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Binary</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>global<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"kw4\">binary</span>:<span class=\"re3\">split</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\",\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>global<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Lines</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">from_file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Binary</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">from_binary</span><span class=\"br0\">(</span> <span class=\"re5\">Binary</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">into_file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">CSV</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Binaries</span> <span class=\"sy3\">=</span> <span class=\"re3\">join_binaries</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">join_binaries</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\",\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">CSV</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">write_file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Binaries</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re5\">CSV</span> <span class=\"sy3\">=</span> <span class=\"re3\">from_file</span><span class=\"br0\">(</span> <span class=\"st0\">\"CSV_file.in\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">New_CSV</span> <span class=\"sy3\">=</span> <span class=\"re3\">change</span><span class=\"br0\">(</span> <span class=\"re5\">CSV</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"23\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"44\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">into_file</span><span class=\"br0\">(</span> <span class=\"st0\">\"CSV_file.out\"</span><span class=\"sy1\">,</span> <span class=\"re5\">New_CSV</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">change_foldl</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Row_number</span><span class=\"sy1\">,</span> <span class=\"re5\">Column_number</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Row_befores</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Row_columns</span> | <span class=\"re5\">Row_afters</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Row_number</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Column_befores</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Old</span> | <span class=\"re5\">Column_afters</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Column_number</span><span class=\"sy1\">,</span> <span class=\"re5\">Row_columns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Row_befores</span> <span class=\"sy3\">++</span> <span class=\"br0\">[</span><span class=\"re5\">Column_befores</span> <span class=\"sy3\">++</span> <span class=\"br0\">[</span><span class=\"re5\">New</span> | <span class=\"re5\">Column_afters</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re5\">Row_afters</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">join_binaries</span><span class=\"br0\">(</span> <span class=\"re5\">Binaries</span><span class=\"sy1\">,</span> <span class=\"re5\">Binary</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">[</span><span class=\"re5\">_Last</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Binary</span><span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Binaries</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Rest</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 92, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">--- Read CSV file and add columns headed with 'SUM'</span><br/><span class=\"co1\">--- with trace</span><br/><span class=\"co1\">-- trace(0)</span><br/>\u00a0<br/><span class=\"kw1\">include</span> get.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>text.e<br/>\u00a0<br/><span class=\"kw1\">function</span> split<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> c<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> removables <span class=\"sy1\">=</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span><span class=\"es0\">\\n</span><span class=\"es0\">\\r</span><span class=\"es0\">\\x</span>05<span class=\"es0\">\\u</span>0234<span class=\"es0\">\\\"</span> \"</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    <span class=\"kw2\">integer</span> first<span class=\"sy2\">,</span> delim<br/>    out <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    first <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> first &lt;<span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        delim <span class=\"sy1\">=</span> <span class=\"kw2\">find_from</span><span class=\"br0\">(</span>c<span class=\"sy2\">,</span>s<span class=\"sy2\">,</span>first<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> delim <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            delim <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        out <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>out<span class=\"sy2\">,</span>trim<span class=\"br0\">(</span>s<span class=\"br0\">[</span>first..delim<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>removables<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        first <span class=\"sy1\">=</span> delim <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> out<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span>                            <br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> fn    <span class=\"co1\">-- the file number</span><br/>    <span class=\"kw2\">integer</span> fn2   <span class=\"co1\">-- the output file number</span><br/>    <span class=\"kw2\">integer</span> e     <span class=\"co1\">-- the number of lines read</span><br/>    <span class=\"kw2\">object</span> line   <span class=\"co1\">-- the next line from the file</span><br/>    <span class=\"kw2\">sequence</span> data <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">-- parsed csv data row</span><br/>    <span class=\"kw2\">sequence</span> headerNames <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">-- array saving column names</span><br/>    <span class=\"kw2\">atom</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0.0</span>     <span class=\"co1\">-- sum for each row</span><br/>    <span class=\"kw2\">sequence</span> var  <span class=\"co1\">-- holds numerical data read</span><br/>\u00a0<br/>    <span class=\"co1\">-- First we try to open the file called \"data.csv\".</span><br/>    fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"data.csv\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fn <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"Can't open data.csv<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>\t<span class=\"co1\">-- abort(); </span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span> <br/>\u00a0<br/>    <span class=\"co1\">-- Then we create an output file for processed data. </span><br/>    fn2 <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"newdata.csv\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fn2 <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"Can't create newdata.csv<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"co1\">-- By successfully opening the file we have established that </span><br/>    <span class=\"co1\">-- the file exists, and open() gives us a file number (or \"handle\")</span><br/>    <span class=\"co1\">-- that we can use to perform operations on the file.</span><br/>\u00a0<br/>    e <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <br/>        line <span class=\"sy1\">=</span> <span class=\"kw2\">gets</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        data <span class=\"sy1\">=</span> split<span class=\"br0\">(</span>line<span class=\"sy2\">,</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"co1\">-- Save the header labels and</span><br/>\t    <span class=\"co1\">-- write them to output file.</span><br/>            headerNames <span class=\"sy1\">=</span> data<br/>\t    <span class=\"kw1\">for</span> i<span class=\"sy1\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>headerNames<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t        <span class=\"kw2\">printf</span><span class=\"br0\">(</span>fn2<span class=\"sy2\">,</span> <span class=\"st0\">\"%s,\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>headerNames<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t    <span class=\"kw2\">printf</span><span class=\"br0\">(</span>fn2<span class=\"sy2\">,</span> <span class=\"st0\">\"SUM<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"co1\">-- Run a sum for the numerical data.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e &gt;<span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    <span class=\"kw1\">for</span> i<span class=\"sy1\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">do</span>     <br/>\t        <span class=\"kw2\">printf</span><span class=\"br0\">(</span>fn2<span class=\"sy2\">,</span> <span class=\"st0\">\"%s,\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tvar <span class=\"sy1\">=</span> value<span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> var<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t    <span class=\"co1\">-- data read is numerical</span><br/>\t\t    <span class=\"co1\">-- add to sum</span><br/>\t\t    sum <span class=\"sy1\">=</span> sum <span class=\"sy1\">+</span> var<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>            <span class=\"kw2\">printf</span><span class=\"br0\">(</span>fn2<span class=\"sy2\">,</span> <span class=\"st0\">\"%g<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>sum<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0.0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        e <span class=\"sy1\">=</span> e <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    <span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>    <span class=\"kw2\">close</span><span class=\"br0\">(</span>fn2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>CustomEquality<span class=\"sy0\">;</span>CustomComparison<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"co1\">//Read Write CSV files: Nigel Galloway, August 8th., 2018</span><br/><span class=\"kw1\">type</span> sparseArray<span class=\"sy0\">&lt;</span><span class=\"st0\">'N,'</span>G,<span class=\"st0\">'Y&gt; when '</span>N:comparison <span class=\"kw1\">and</span> <span class=\"st0\">'G:comparison={row:'</span>N<span class=\"sy0\">;</span>col:<span class=\"st0\">'G;value:'</span>Y<span class=\"br0\">}</span><br/>                                                                <span class=\"kw1\">override</span> g.<span class=\"me1\">Equals</span> n <span class=\"sy0\">=</span><span class=\"kw1\">match</span> n with|\u00a0:? sparseArray<span class=\"sy0\">&lt;</span><span class=\"st0\">'N,'</span>G,<span class=\"st0\">'Y&gt; as n-&gt;n.row=g.row&amp;&amp;n.col=g.col|_-&gt;false<br/>                                                                override g.GetHashCode() = hash g.row<br/>                                                                interface System.IComparable with<br/>                                                                  member n.CompareTo g =<br/>                                                                    match g with<br/>                                                                    |\u00a0:? sparseArray&lt;'</span>N,<span class=\"st0\">'G,'</span>Y<span class=\"sy0\">&gt;</span> <span class=\"kw1\">as</span> g  <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> z<span class=\"sy0\">=</span>compare n.<span class=\"me1\">row</span> g.<span class=\"me1\">row</span><br/>                                                                                                        <span class=\"kw1\">if</span> z<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> compare n.<span class=\"me1\">col</span> g.<span class=\"me1\">col</span> <span class=\"kw1\">else</span> z <br/>                                                                    | _<span class=\"sy0\">-&gt;</span> <span class=\"kw5\">invalidArg</span> <span class=\"st0\">\"n\"</span> <span class=\"st0\">\"expecting type sparseArray&lt;'N,'G,'Y&gt;\"</span><br/><span class=\"kw1\">let</span> readCSV sep file<span class=\"sy0\">=</span><span class=\"kw4\">seq</span><span class=\"br0\">{</span><span class=\"kw1\">use</span> reader<span class=\"sy0\">=</span><span class=\"kw1\">new</span> System.<span class=\"me1\">IO</span>.<span class=\"me1\">StreamReader</span><span class=\"br0\">(</span>System.<span class=\"me1\">IO</span>.<span class=\"me1\">File</span>.<span class=\"me1\">OpenRead</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> reader.<span class=\"me1\">EndOfStream</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>reader.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">Split</span><span class=\"br0\">[</span>|sep|<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">mapi</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g<span class=\"sy0\">-&gt;</span>g<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">mapi</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"st0\">' g-&gt;{row=n;col=n'</span><span class=\"sy0\">;</span>value<span class=\"sy0\">=</span>g<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">concat</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>n.<span class=\"me1\">value</span>.<span class=\"me1\">Length</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> writeCSV <span class=\"br0\">(</span>sep:<span class=\"kw4\">char</span><span class=\"br0\">)</span> file <span class=\"br0\">(</span>data:<span class=\"kw4\">seq</span><span class=\"sy0\">&lt;</span>sparseArray<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span>,<span class=\"kw4\">string</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><br/>  <span class=\"kw1\">use</span> outp<span class=\"sy0\">=</span> System.<span class=\"me1\">IO</span>.<span class=\"me1\">File</span>.<span class=\"me1\">CreateText</span> file<br/>  data<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sort</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>n.<span class=\"me1\">row</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_,data<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><br/>    data <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>n..<span class=\"me1\">g</span>.<span class=\"me1\">col</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> _<span class=\"sy0\">-&gt;</span>outp.<span class=\"me1\">Write</span> sep<span class=\"br0\">)</span><span class=\"sy0\">;</span>outp.<span class=\"me1\">Write</span> g.<span class=\"me1\">value</span><span class=\"sy0\">;</span> g.<span class=\"me1\">col</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"sy0\">|&gt;</span><span class=\"kw3\">ignore</span><br/>    outp.<span class=\"me1\">WriteLine</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USING: csv io.encodings.utf8 kernel math.parser sequences\u00a0;<br/>IN: rosetta-code.csv-manipulation<br/>\u00a0<br/>: append-sum ( seq -- seq' )<br/>    dup [ string&gt;number ] map-sum number&gt;string suffix\u00a0;<br/>\u00a0<br/>: csv-sums ( seq -- seq' )<br/>    [ 0 = [ \"SUM\" suffix ] [ append-sum ] if ] map-index\u00a0;<br/>\u00a0<br/>\"example.csv\" utf8 [ file&gt;csv csv-sums ] [ csv&gt;file ] 2bi</pre>"}, {"lang": "Forth", "loc": 49, "block": "<pre class=\"text highlighted_source\">\\ csvsum.fs     Add a new column named SUM that contain sums from rows of CommaSeparatedValues<br/>\\ USAGE:<br/>\\       gforth-fast csvsum.fs -e \"stdout stdin csvsum bye\" &lt;input.csv &gt;output.csv<br/>\u00a0<br/>        CHAR ,  CONSTANT SEPARATOR<br/>        3       CONSTANT DECIMALS<br/>        1E1 DECIMALS S&gt;D D&gt;F F** FCONSTANT FSCALE<br/>\u00a0<br/>: colsum        ( ca u -- F: -- sum\u00a0;return SUM from CSV-string )<br/>        0E0 OVER SWAP BOUNDS<br/>       \u00a0?DO     ( a )<br/>                I <a class=\"__cf_email__\" data-cfemail=\"f4b7b4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> SEPARATOR =<br/>                IF      ( a )<br/>                        I TUCK OVER - &gt;FLOAT  IF F+ THEN<br/>                        1+<br/>                THEN<br/>        LOOP    DROP<br/>;<br/>: f&gt;string      ( -- ca u F: x -- )<br/>        FSCALE F*<br/>        F&gt;D TUCK DABS &lt;# DECIMALS 0 DO # LOOP [CHAR] . HOLD #S ROT SIGN #&gt;<br/>;<br/>: rowC!+        ( offs char -- u+1 \u00a0;store CHAR at here+OFFS,increment offset )<br/>        OVER HERE + C! 1+<br/>;<br/>: row$!+        ( offs ca u -- offs+u\u00a0;store STRING at here+OFFS,update offset )<br/>        ROT 2DUP + &gt;R HERE + SWAP MOVE R&gt;<br/>;<br/>\\ If run program with '-m 4G'option, we have practically 4G to store a row<br/>: csvsum        ( fo fi -- \u00a0;write into FILEID-OUTPUT processed input from FILEID-INPUT )<br/>        2DUP<br/>        HERE UNUSED ROT READ-LINE THROW<br/>        IF      ( fo fi fo u )<br/>                HERE SWAP               ( fo fi fo ca u )<br/>                SEPARATOR rowC!+<br/>                s\\\" SUM\" row$!+         ( fo fi fo ca u' )<br/>                ROT WRITE-LINE THROW<br/>                BEGIN   ( fo fi )<br/>                        2DUP HERE UNUSED ROT READ-LINE THROW<br/>                WHILE   ( fo fi fo u )<br/>                        HERE SWAP                       ( fo fi fo ca u )<br/>                        SEPARATOR rowC!+<br/>                        HERE OVER colsum f&gt;string       ( fo fi fo ca u ca' u' )<br/>                        row$!+                          ( fo fi fo ca u'+u )<br/>                        ROT WRITE-LINE THROW<br/>                REPEAT<br/>        THEN<br/>        2DROP 2DROP<br/>;</pre>"}, {"lang": "Fortran", "loc": 107, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> rowsum<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">line</span>, <span class=\"kw1\">name</span>, a<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">v</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, nrow, ncol, i<br/>\u00a0<br/>    <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span><span class=\"nu0\">1</span>, length<span class=\"sy0\">=</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    open<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span>, <span class=\"kw1\">file</span><span class=\"sy0\">=</span><span class=\"kw1\">name</span>, <span class=\"kw1\">action</span><span class=\"sy0\">=</span><span class=\"st0\">\"read\"</span>, <span class=\"kw1\">form</span><span class=\"sy0\">=</span><span class=\"st0\">\"formatted\"</span>, <span class=\"kw1\">access</span><span class=\"sy0\">=</span><span class=\"st0\">\"stream\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span><span class=\"nu0\">2</span>, length<span class=\"sy0\">=</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    open<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span><span class=\"nu0\">11</span>, <span class=\"kw1\">file</span><span class=\"sy0\">=</span><span class=\"kw1\">name</span>, <span class=\"kw1\">action</span><span class=\"sy0\">=</span><span class=\"st0\">\"write\"</span>, <span class=\"kw1\">form</span><span class=\"sy0\">=</span><span class=\"st0\">\"formatted\"</span>, <span class=\"kw1\">access</span><span class=\"sy0\">=</span><span class=\"st0\">\"stream\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>\u00a0<br/>    nrow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    ncol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>readline<span class=\"br0\">(</span><span class=\"nu0\">10</span>, line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        nrow <span class=\"sy0\">=</span> nrow <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>        <span class=\"kw1\">call</span> split<span class=\"br0\">(</span>line, a<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nrow <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            ncol <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            write<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"st0\">\"(A)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> line<br/>            write<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"st0\">\"(A)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\",Sum\"</span><br/>            <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>v<span class=\"br0\">(</span>ncol <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            write<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>, <span class=\"st0\">\"('(',G0,'(G0,:,''',A,'''))')\"</span><span class=\"br0\">)</span> ncol <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\",\"</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> ncol<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                print <span class=\"st0\">\"(A,' ',G0)\"</span>, <span class=\"st0\">\"Invalid number of values on row\"</span>, nrow<br/>                <span class=\"kw1\">stop</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, ncol<br/>                read<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>            v<span class=\"br0\">(</span>ncol <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>v<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>ncol<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            write<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"kw1\">fmt</span><span class=\"br0\">)</span> v<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    close<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    close<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/><span class=\"co1\">contains</span><br/>    <span class=\"kw1\">function</span> readline<span class=\"br0\">(</span><span class=\"kw1\">unit</span>, line<span class=\"br0\">)</span><br/>        <span class=\"kw3\">use</span> iso_fortran_env<br/>        <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">readline</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"kw1\">unit</span>, ios, n<br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">line</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">buffer</span><br/>\u00a0<br/>        line <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        readline <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>        <span class=\"kw1\">do</span><br/>            read<span class=\"br0\">(</span><span class=\"kw1\">unit</span>, <span class=\"st0\">\"(A)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span>, <span class=\"kw4\">size</span><span class=\"sy0\">=</span>n, <span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>ios<span class=\"br0\">)</span> buffer<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios <span class=\"sy0\">==</span> iostat_end<span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>            readline <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>            line <span class=\"sy0\">=</span> line <span class=\"sy0\">//</span> buffer<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios <span class=\"sy0\">==</span> iostat_eor<span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> split<span class=\"br0\">(</span>line, array, separator<span class=\"br0\">)</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> line<br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">character</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">separator</span><br/>        <span class=\"kw3\">character</span> <span class=\"sy0\">::</span> <span class=\"me2\">sep</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, m, p, i, k<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">present</span><span class=\"br0\">(</span>separator<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            sep <span class=\"sy0\">=</span> separator<br/>        <span class=\"kw1\">else</span><br/>            sep <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> sep<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                p <span class=\"sy0\">=</span> p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                m <span class=\"sy0\">=</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span>m, i <span class=\"sy0\">-</span> k<span class=\"br0\">)</span><br/>                k <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        m <span class=\"sy0\">=</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span>m, n <span class=\"sy0\">-</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">allocated</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> sep<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                array<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> line<span class=\"br0\">(</span>k<span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                p <span class=\"sy0\">=</span> p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                k <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        array<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> line<span class=\"br0\">(</span>k<span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"manip.csv\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1 ' existing CSV file</span><br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"manip2.csv\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Output</span> <span class=\"kw1\">As</span> <span class=\"co2\">#2 ' new CSV file for writing changed data</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> header <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, header </span><br/>header += <span class=\"st0\">\",SUM\"</span><br/><span class=\"kw1\">Print</span> <span class=\"co2\">#2, header</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> c1, c2, c3, c4, c5, sum<br/>\u00a0<br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Input</span> <span class=\"co2\">#1, c1, c2, c3, c4, c5</span><br/>  sum = c1 + c2 + c3 + c4 + c5<br/>  <span class=\"kw1\">Write</span> <span class=\"co2\">#2, c1, c2, c3, c4, c5, sum</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\">#2</span></pre>"}, {"lang": "FunL", "loc": 45, "block": "<pre class=\"text highlighted_source\">import io.{lines, PrintWriter}<br/>\u00a0<br/>data Table( header, rows )<br/>\u00a0<br/>def read( file ) =<br/>  l = lines( file )<br/>\u00a0<br/>  def next = vector( l.next().split(',') )<br/>\u00a0<br/>  if l.isEmpty() then<br/>    return Table( vector(), [] )<br/>\u00a0<br/>  header = next()<br/>  rows = seq()<br/>\u00a0<br/>  while l.hasNext()<br/>    rows += next()<br/>\u00a0<br/>  Table( header, rows.toList() )<br/>\u00a0<br/>def write( table, out ) =<br/>  w = if out is String then PrintWriter( out ) else out<br/>\u00a0<br/>  w.println( table.header.mkString(',') )<br/>\u00a0<br/>  for r &lt;- table.rows<br/>    w.println( r.mkString(',') )<br/>\u00a0<br/>  if out is String<br/>    w.close()<br/>\u00a0<br/>def updateRow( header, row, updates ) =<br/>  r = dict( (header(i), row(i)) | i &lt;- 0:header.length() )<br/>  updates( r )<br/>  vector( r(f) | f &lt;- header )<br/>\u00a0<br/>def update( table, updates ) =\t\t<br/>  Table( table.header, (updateRow(table.header, r, updates) | r &lt;- table.rows).toList() )<br/>\u00a0<br/>def addColumn( table, column, updates ) =<br/>  Table( table.header + [column], (updateRow(table.header + [column], r + [null], updates) | r &lt;- table.rows).toList() )<br/>\u00a0<br/>t = addColumn( read('test.csv'), 'SUM', r -&gt; r('SUM') = sum(int(v) | (_, v) &lt;- r if v\u00a0!= null) )<br/>write( t, 'test_out.csv' )<br/>write( t, System.out )</pre>"}, {"lang": "Gambas", "loc": 32, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sData <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><span class=\"st0\">\"data.csv\"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sLine, sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOutput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> bLine1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sLine <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sData, gb.<span class=\"me1\">NewLine</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/not\"><span class=\"kw5\">Not</span></a> bLine1 <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>    sLine <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\",SUM\"</span><br/>    sOutput.<span class=\"me1\">Add</span><span class=\"br0\">(</span>sLine<span class=\"br0\">)</span><br/>    bLine1 <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><br/>    <a href=\"http://gambasdoc.org/help/lang/continue\"><span class=\"kw1\">Continue</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sLine<span class=\"br0\">)</span><br/>    siCount <span class=\"sy0\">+=</span> <a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  sOutput.<span class=\"me1\">Add</span><span class=\"br0\">(</span>sLine <span class=\"sy0\">&amp;</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  siCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/>sData <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sOutput<br/>  sData <span class=\"sy0\">&amp;=</span> sTemp <span class=\"sy0\">&amp;</span> gb.<span class=\"me1\">NewLine</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sTemp;<br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Save</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"CSVData.csv\"</span>, sData<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 58, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"encoding/csv\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\trows <span class=\"sy2\">:=</span> readSample<span class=\"sy1\">()</span><br/>\tappendSum<span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span><br/>\twriteChanges<span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> readSample<span class=\"sy1\">()</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span><span class=\"st0\">\"sample.csv\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\trows<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> csv<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><span class=\"sy3\">.</span>ReadAll<span class=\"sy1\">()</span><br/>\tf<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> rows<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> appendSum<span class=\"sy1\">(</span>rows <span class=\"sy1\">[][]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\trows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"st0\">\"SUM\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\trows<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> sum<span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sum<span class=\"sy1\">(</span>row <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tsum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> row <span class=\"sy1\">{</span><br/>\t\tx<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"NA\"</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tsum <span class=\"sy2\">+=</span> x<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>sum<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> writeChanges<span class=\"sy1\">(</span>rows <span class=\"sy1\">[][]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"output.csv\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\terr <span class=\"sy2\">=</span> csv<span class=\"sy3\">.</span>NewWriter<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><span class=\"sy3\">.</span>WriteAll<span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span><br/>\tf<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> csv <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> loadCsv <span class=\"sy0\">=</span> <span class=\"br0\">{</span> source <span class=\"sy0\">-&gt;</span> source.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20splitEachLine\"><span class=\"kw7\">splitEachLine</span></a><span class=\"br0\">(</span>/,/<span class=\"br0\">)</span> <span class=\"br0\">{</span> csv <span class=\"sy0\">&lt;&lt;</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> saveCsv <span class=\"sy0\">=</span> <span class=\"br0\">{</span> target <span class=\"sy0\">-&gt;</span> target.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20withWriter\"><span class=\"kw7\">withWriter</span></a> <span class=\"br0\">{</span> writer <span class=\"sy0\">-&gt;</span> csv.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> writer.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>loadCsv <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">'csv.txt'</span><span class=\"br0\">)</span><br/>csv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Column0'</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> csv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"br0\">}</span><br/>saveCsv <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">'csv_out.txt'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>isJust<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>when<span class=\"br0\">)</span><br/>\u00a0<br/>delimiters <span class=\"sy0\">=</span> <span class=\"st0\">\",;:\"</span><br/>\u00a0<br/>fields <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>fields xs <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>item<span class=\"sy0\">,</span> rest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` delimiters<span class=\"br0\">)</span> xs<br/>                <span class=\"br0\">(</span><span class=\"sy0\">_,</span>    next<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:notElem\"><span class=\"kw3\">notElem</span></a>` delimiters<span class=\"br0\">)</span> rest<br/>    <span class=\"kw1\">in</span> item\u00a0: fields next<br/>\u00a0<br/>unfields Nothing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>unfields <span class=\"br0\">(</span>Just a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> every fieldNumber <span class=\"sy0\">$</span> elems a<br/>    <span class=\"kw1\">where</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">_,</span> fieldNumber<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds a<br/>        every <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        every n xs <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> n xs<br/>            <span class=\"kw1\">in</span> intercalate <span class=\"st0\">\",\"</span> y\u00a0: every n z<br/>\u00a0<br/>fieldArray <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Nothing<br/>fieldArray xs <span class=\"sy0\">=</span> Just <span class=\"sy0\">$</span> listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> xs<br/>\u00a0<br/>fieldsFromFile <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>fieldArray <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> fields <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a><br/>\u00a0<br/>fieldsToFile f <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:writeFile\"><span class=\"kw3\">writeFile</span></a> f <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">.</span> unfields<br/>\u00a0<br/>someChanges <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a>  <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"changed\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"altered\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"modified\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    a <span class=\"sy0\">&lt;-</span> fieldsFromFile <span class=\"st0\">\"example.txt\"</span><br/>    when <span class=\"br0\">(</span>isJust a<span class=\"br0\">)</span> <span class=\"sy0\">$</span> fieldsToFile <span class=\"st0\">\"output.txt\"</span> <span class=\"sy0\">$</span> someChanges a<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">import</span> Utils   <span class=\"co1\"># To get CSV procedures</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    f <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">input</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>f<span class=\"br0\">)</span>   <span class=\"co1\"># header line(?)</span><br/>    <span class=\"kw1\">every</span> csv <span class=\"sy0\">:=</span> parseCSV<span class=\"br0\">(</span><span class=\"sy0\">!</span>f<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        csv<span class=\"br0\">[</span>i<span class=\"sy0\">+:=</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*:=</span> <span class=\"nu0\">100</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>encodeCSV<span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   data=: <span class=\"sy0\">(</span><span class=\"st_h\">','</span>&amp;splitstring<span class=\"sy0\">)</span>;.<span class=\"nu0\">2</span> freads <span class=\"st_h\">'rc_csv.csv'</span>       <span class=\"co1\">NB. read and parse data</span><br/>   data=: <span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'\"spam\"'</span><span class=\"sy0\">)</span> <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span>} data                       <span class=\"co1\">NB. amend cell in 3rd row, 4th column (0-indexing)</span><br/>   <span class=\"st_h\">'rc_outcsv.csv'</span> fwrites~\u00a0;&lt;@<span class=\"sy0\">(</span><span class=\"st_h\">','</span>&amp;joinstring\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> data   <span class=\"co1\">NB. format and write out amended data</span></pre>"}, {"lang": "Java", "loc": 104, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Point</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CSV <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> HashMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a>, String<span class=\"sy0\">&gt;</span> _map <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a>, String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _cols<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _rows<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> open<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> file<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilenotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileNotFoundException</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        open<span class=\"br0\">(</span>file, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> open<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> file, <span class=\"kw4\">char</span> delimiter<span class=\"br0\">)</span><br/>            <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilenotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileNotFoundException</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        Scanner scanner <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        scanner.<span class=\"me1\">useDelimiter</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>delimiter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        clear<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>scanner.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> values <span class=\"sy0\">=</span> scanner.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>delimiter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> value<span class=\"sy0\">:</span> values <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                _map.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>col, _rows<span class=\"br0\">)</span>, value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                _cols <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>_cols, <span class=\"sy0\">++</span>col<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            _rows<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        scanner.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> save<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> file<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        save<span class=\"br0\">(</span>file, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> save<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> file, <span class=\"kw4\">char</span> delimiter<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilewriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileWriter</span></a> fw <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilewriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileWriter</span></a><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedWriter</span></a> bw <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedWriter</span></a><span class=\"br0\">(</span>fw<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> row <span class=\"sy0\">&lt;</span> _rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;</span> _cols<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> key <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>col, row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>_map.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    bw.<span class=\"me1\">write</span><span class=\"br0\">(</span>_map.<span class=\"me1\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>col <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> _cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    bw.<span class=\"me1\">write</span><span class=\"br0\">(</span>delimiter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            bw.<span class=\"me1\">newLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        bw.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        bw.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> get<span class=\"br0\">(</span><span class=\"kw4\">int</span> col, <span class=\"kw4\">int</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> val <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> key <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>col, row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>_map.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            val <span class=\"sy0\">=</span> _map.<span class=\"me1\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> put<span class=\"br0\">(</span><span class=\"kw4\">int</span> col, <span class=\"kw4\">int</span> row, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        _map.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>col, row<span class=\"br0\">)</span>, value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        _cols <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>_cols, col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        _rows <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>_rows, row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        _map.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        _cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        _rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> rows<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> _rows<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> cols<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> _cols<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            CSV csv <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> CSV<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            csv.<span class=\"me1\">open</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"test_in.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"st0\">\"Column0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"st0\">\"100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>, <span class=\"st0\">\"200\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"300\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">\"400\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            csv.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"test_out.csv\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 76, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// splitRegex\u00a0:: Regex -&gt; String -&gt; [String]</span><br/>    <span class=\"kw1\">function</span> splitRegex<span class=\"br0\">(</span>rgx<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span>rgx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// lines\u00a0:: String -&gt; [String]</span><br/>    <span class=\"kw1\">function</span> lines<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"co2\">/[\\r\\n]/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">function</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// macOS JavaScript for Automation version of readFile.</span><br/>    <span class=\"co1\">// Other JS contexts will need a different definition of this function,</span><br/>    <span class=\"co1\">// and some may have no access to the local file system at all.</span><br/>\u00a0<br/>    <span class=\"co1\">// readFile\u00a0:: FilePath -&gt; maybe String</span><br/>    <span class=\"kw1\">function</span> readFile<span class=\"br0\">(</span>strPath<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> error <span class=\"sy0\">=</span> $<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            str <span class=\"sy0\">=</span> ObjC.<span class=\"me1\">unwrap</span><span class=\"br0\">(</span><br/>                $.<span class=\"me1\">NSString</span>.<span class=\"me1\">stringWithContentsOfFileEncodingError</span><span class=\"br0\">(</span><br/>                    $<span class=\"br0\">(</span>strPath<span class=\"br0\">)</span><br/>                    .<span class=\"me1\">stringByStandardizingPath</span><span class=\"sy0\">,</span><br/>                    $.<span class=\"me1\">NSUTF8StringEncoding</span><span class=\"sy0\">,</span><br/>                    error<br/>                <span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> error.<span class=\"me1\">code</span> <span class=\"sy0\">?</span> error.<span class=\"me1\">localizedDescription</span> <span class=\"sy0\">:</span> str<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// macOS JavaScript for Automation version of writeFile.</span><br/>    <span class=\"co1\">// Other JS contexts will need a different definition of this function,</span><br/>    <span class=\"co1\">// and some may have no access to the local file system at all.</span><br/>\u00a0<br/>    <span class=\"co1\">// writeFile\u00a0:: FilePath -&gt; String -&gt; IO ()</span><br/>    <span class=\"kw1\">function</span> writeFile<span class=\"br0\">(</span>strPath<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        $.<span class=\"me1\">NSString</span>.<span class=\"me1\">alloc</span>.<span class=\"me1\">initWithUTF8String</span><span class=\"br0\">(</span>strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">writeToFileAtomicallyEncodingError</span><span class=\"br0\">(</span><br/>                $<span class=\"br0\">(</span>strPath<span class=\"br0\">)</span><br/>                .<span class=\"me1\">stringByStandardizingPath</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>                $.<span class=\"me1\">NSUTF8StringEncoding</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// EXAMPLE - appending a SUM column</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> delimCSV <span class=\"sy0\">=</span> <span class=\"co2\">/,\\s*/g</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> strSummed <span class=\"sy0\">=</span> unlines<span class=\"br0\">(</span><br/>        lines<span class=\"br0\">(</span>readFile<span class=\"br0\">(</span><span class=\"st0\">'~/csvSample.txt'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> xs <span class=\"sy0\">=</span> x <span class=\"sy0\">?</span> splitRegex<span class=\"br0\">(</span>delimCSV<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">concat</span><span class=\"br0\">(</span><br/>                <span class=\"co1\">// 'SUM' appended to first line, others summed.</span><br/>                i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><br/>                    <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> parseInt<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>                <span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">'SUM'</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>        writeFile<span class=\"br0\">(</span><span class=\"st0\">'~/csvSampleSummed.txt'</span><span class=\"sy0\">,</span> strSummed<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        strSummed<br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Omit empty lines<br/>def read_csv:<br/>  split(\"\\n\")<br/>  | map(if length&gt;0 then split(\",\") else empty end)\u00a0;<br/>\u00a0<br/># add_column(label) adds a summation column (with the given label) to<br/># the matrix representation of the CSV table, and assumes that all the<br/># entries in the body of the CSV file are, or can be converted to,<br/># numbers:<br/>def add_column(label):<br/>  [.[0] + [label],<br/>   (reduce .[1:][] as $line<br/>     ([]; ($line|map(tonumber)) as $line | . + [$line + [$line|add]]))[] ]\u00a0;<br/>\u00a0<br/>read_csv | add_column(\"SUM\") | map(@csv)[]</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ifn = \"csv_data_manipulation_in.dat\"<br/>ofn = \"csv_data_manipulation_out.dat\"<br/>\u00a0<br/>ifile = open(ifn, \"r\")<br/>(a, h) = readcsv(ifile, Int, header=true)<br/>close(ifile)<br/>\u00a0<br/>a = hcat(a, sum(a, 2))<br/>h = hcat(h, \"SUM\")<br/>a = vcat(h, a)<br/>\u00a0<br/>ofile = open(ofn, \"w\")<br/>writecsv(ofile, a)<br/>close(ofile)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"example.csv\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"st0\">\",SUM\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until lines.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span> + lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> lines.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    File<span class=\"br0\">(</span><span class=\"st0\">\"example2.csv\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeText</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span>  <span class=\"co1\">// write to new file</span><br/>    println<span class=\"br0\">(</span>text<span class=\"br0\">)</span>  <span class=\"co1\">// print to console</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 99, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Simplified CSV parser (without escape character support etc.).<br/>-- First line is interrepted as header with column names.<br/>-- @param {string} csvStr<br/>-- @param {string} [sep=\",\"] - single char as string<br/>-- @param {string} [eol=RETURN]<br/>-- @return {propList}<br/>----------------------------------------<br/>on parseSimpleCSVString (csvStr, sep, eol)<br/>  if voidP(sep) then sep=\",\"<br/>  if voidP(eol) then eol = RETURN<br/>  lines = explode(eol, csvStr)<br/>  if lines.getLast()=\"\" then lines.deleteAt(lines.count)<br/>  res = [:]<br/>  res[#header] = explode(sep, lines[1])<br/>  res[#data] = []<br/>  cnt = lines.count<br/>  repeat with i = 2 to cnt<br/>    res[#data].append(explodeBySingleChar(sep, lines[i]))<br/>  end repeat<br/>  return res<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Simplified CSV creater (without escape character support etc.).<br/>-- @param {propList} csvData<br/>-- @param {string} [sep=\",\"]<br/>-- @param {string} [eol=RETURN]<br/>-- @return {string}<br/>----------------------------------------<br/>on createSimpleCSVString (csvData, sep, eol)<br/>  if voidP(sep) then sep=\",\"<br/>  if voidP(eol) then eol = RETURN<br/>  res = \"\"<br/>  put implode(sep, csvData[#header])&amp;eol after res<br/>  cnt = csvData[#data].count<br/>  repeat with i = 1 to cnt<br/>    put implode(sep, csvData[#data][i])&amp;eol after res<br/>  end repeat<br/>  return res<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Explodes string into list<br/>-- @param {string} delim<br/>-- @param {string} str<br/>-- @return {list}<br/>----------------------------------------<br/>on explode (delim, str)<br/>  if delim.length=1 then return explodeBySingleChar(delim, str)<br/>  l = []<br/>  if voidP(str) then return l<br/>  dl = delim.length<br/>  repeat while true<br/>    pos = offset(delim, str)<br/>    if pos=0 then exit repeat<br/>    l.add(str.char[1..pos-1])<br/>    delete char 1 to pos+dl-1 of str<br/>  end repeat<br/>  if pos=0 then pos = 1-dl<br/>  l.add(str.char[pos+dl..str.length])<br/>  return l<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Explode string into list based on single char delimiter<br/>-- (uses Lingo's build-in 'item' support, therefor faster)<br/>-- @param {string} delim<br/>-- @param {string} str<br/>-- @return {list}<br/>----------------------------------------<br/>on explodeBySingleChar (delim, str)<br/>  l = []<br/>  if voidP(str) then return l<br/>  od = _player.itemDelimiter<br/>  _player.itemDelimiter = delim<br/>  cnt = str.item.count<br/>  repeat with i = 1 to cnt<br/>    l.add(str.item[i])<br/>  end repeat<br/>  _player.itemDelimiter = od<br/>  return l<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Implodes list into string<br/>-- @param {string} delim<br/>-- @param {list} l<br/>-- @return {string}<br/>----------------------------------------<br/>on implode (delim, l)<br/>  str = \"\"<br/>  cnt = l.count<br/>  repeat with i = 1 to cnt<br/>    put l[i]&amp;delim after str<br/>  end repeat<br/>  delete char (str.length-delim.length+1) to str.length of str<br/>  return str<br/>end</pre>"}, {"lang": "Lua", "loc": 32, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> csv<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> <span class=\"kw3\">io.lines</span><span class=\"br0\">(</span><span class=\"st0\">'file.csv'</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>csv<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>line <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> line<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>j<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">','</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span><span class=\"sy0\">#</span>csv<span class=\"br0\">]</span><span class=\"sy0\">,</span> line<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            i<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span><span class=\"sy0\">#</span>csv<span class=\"br0\">]</span><span class=\"sy0\">,</span> line<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'SUM'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">,#</span>csv <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>csv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        sum<span class=\"sy0\">=</span>sum <span class=\"sy0\">+</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> sum<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> newFileData <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>csv <span class=\"kw1\">do</span><br/>    newFileData<span class=\"sy0\">=</span>newFileData <span class=\"sy0\">..</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>csv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> file<span class=\"sy0\">=</span><span class=\"kw3\">io.open</span><span class=\"br0\">(</span><span class=\"st0\">'file.csv'</span><span class=\"sy0\">,</span> <span class=\"st0\">'w'</span><span class=\"br0\">)</span><br/>file<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span>newFileData<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 49, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Function Sum {<br/>            Long c=0<br/>            while not empty {<br/>                  c+=number<br/>            }<br/>            =c<br/>      }<br/>      Document CSV$ = {C1,C2,C3,C4,C5<br/>            1,5,9,13,17<br/>            2,6,10,14,18<br/>            3,7,11,15,19<br/>            4,8,12,16,20<br/>      }<br/>      \\\\ export encoded to UTF-16LE<br/>      Save.Doc CSV$, \"data1.csv\", 0<br/>      \\\\ Open Wide read UTF-16LE<br/>      \\\\ use standard colum sep. as \",\"<br/>      \\\\ use standard decimal point char<br/>      \\\\ use standard (non json style string)<br/>      \\\\ True = use bare strings (without \"\")<br/>      Input With \"\",,,true<br/>      Write With\"\",,,true<br/>      \\\\ for excel csv use Input With chr$(9),,true, true<br/>      Open \"data1.csv\" for Wide Input as #M<br/>      Open \"data2.csv\" for Wide Output as #M1<br/>      Input #M, h1$, h2$, h3$, h4$, h5$<br/>      Write #M1, h1$, h2$, h3$, h4$, h5$<br/>      Print h1$, h2$, h3$, h4$, h5$<br/>\u00a0<br/>      While not Eof(#M) {<br/>            Input #M, A1, A2, A3, A4, A5<br/>            Write #M1, A1, A2, A3, A4, A5, Sum(A1, A2, A3, A4, A5)<br/>            Print A1, A2, A3, A4, A5<br/>      }<br/>      close #M1<br/>      Close #M<br/>      Open \"data2.csv\" for Wide Input as #M<br/>      Input #M, h1$, h2$, h3$, h4$, h5$<br/>      Print h1$, h2$, h3$, h4$, h5$<br/>      While not Eof(#M) {<br/>            Input #M, A1, A2, A3, A4, A5, Sum<br/>            Print A1, A2, A3, A4, A5, Sum<br/>      }<br/>      Close #M<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 9, "block": "<pre class=\"text highlighted_source\">iCSV=Import[\"test.csv\"]<br/>-&gt;{{\"C1\",\"C2\",\"C3\",\"C4\",\"C5\"},{1,5,9,13,17},{2,6,10,14,18},{3,7,11,15,19},{4,8,12,16,20}}<br/>iCSV[[1, 1]] = Column0;<br/>iCSV[[2, 2]] = 100;<br/>iCSV[[3, 3]] = 200;<br/>iCSV[[4, 4]] = 300;<br/>iCSV[[5, 5]] = 400;<br/>iCSV[[2, 3]] = 60;<br/>Export[\"test.csv\",iCSV];</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">M\u00a0:= ImportMatrix(\"data.csv\",source=csv);<br/>M(..,6)\u00a0:= &lt; \"Total\", seq( add(M[i,j], j=1..5), i=2..5 ) &gt;;<br/>ExportMatrix(\"data_out.csv\",M,target=csv);<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 13, "block": "<pre class=\"matlab highlighted_source\">filename=<span class=\"co2\">'data.csv'</span>;<br/>fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span>;<br/>header = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; <br/>X = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dlmread.html\"><span class=\"kw2\">dlmread</span></a><span class=\"br0\">(</span>filename,<span class=\"co2\">','</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span><span class=\"co2\">'data.out.csv'</span>,<span class=\"co2\">'w+'</span><span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'%s,sum\\n'</span>,header<span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> k=<span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>X,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,\"<span class=\"co1\">%i,\",X(k,:));</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,\"<span class=\"co1\">%i\\n\",sum(X(k,:)));</span><br/><span class=\"kw1\">end</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;</pre>"}, {"lang": "NetRexx", "loc": 123, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols<br/>\u00a0<br/><span class=\"kw1\">import</span> org.<span class=\"me0\">apache</span>.<span class=\"me0\">commons</span>.<span class=\"me0\">csv</span>.<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RCsv <span class=\"kw2\">public</span> <span class=\"kw2\">final</span><br/>\u00a0<br/><span class=\"kw1\">properties</span> <span class=\"kw2\">private</span> <span class=\"kw2\">constant</span><br/>  NL           = String System.<span class=\"me0\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">\"line.separator\"</span><span class=\"br0\">)</span><br/>  COL_NAME_SUM = String <span class=\"st0\">'SUM, \"integers\"'</span><br/>  CSV_IFILE    = <span class=\"st0\">'data/csvtest_in.csv'</span><br/>  CSV_OFILE    = <span class=\"st0\">'data/csvtest_sumRexx.csv'</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  Arg  = Rexx<span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>  iCvs = Reader null<br/>  oCvs = Writer null<br/>  <span class=\"kw1\">parse</span> arg ifile ofile .<br/>  <span class=\"kw1\">if</span> ifile = <span class=\"st0\">''</span>, ifile = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> ifile = CSV_IFILE<br/>  <span class=\"kw1\">if</span> ofile = <span class=\"st0\">''</span>, ofile = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> ofile = CSV_OFILE<br/>  <span class=\"kw1\">say</span> textFileContentsToString<span class=\"br0\">(</span>ifile<span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span><br/>    iCvs = BufferedReader<span class=\"br0\">(</span>FileReader<span class=\"br0\">(</span>ifile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    oCvs = BufferedWriter<span class=\"br0\">(</span>FileWriter<span class=\"br0\">(</span>ofile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    processCsv<span class=\"br0\">(</span>iCvs, oCvs<span class=\"br0\">)</span>;<br/>  <span class=\"kw3\">catch</span> ex = IOException<br/>    ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw3\">finally</span><br/>    <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> iCvs <span class=\"sy0\">\\</span>= null <span class=\"kw3\">then</span> iCvs.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> oCvs <span class=\"sy0\">\\</span>= null <span class=\"kw3\">then</span> oCvs.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">catch</span> ex = IOException<br/>      ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">say</span> textFileContentsToString<span class=\"br0\">(</span>ofile<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method processCsv<span class=\"br0\">(</span>iCvs = Reader, oCvs = Writer<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">signals</span> IOException<br/>  printer = CSVPrinter null<br/>  <span class=\"kw1\">do</span><br/>    printer = CSVPrinter<span class=\"br0\">(</span>oCvs, CSVFormat.<span class=\"me0\">DEFAULT</span>.<span class=\"me0\">withRecordSeparator</span><span class=\"br0\">(</span>NL<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    oCvsHeaders = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>    oCvsRecord = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>    records = CSVFormat.<span class=\"me0\">DEFAULT</span>.<span class=\"me0\">withHeader</span><span class=\"br0\">(</span>String<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw1\">parse</span><span class=\"br0\">(</span>iCvs<span class=\"br0\">)</span><br/>    irHeader = records.<span class=\"me0\">getHeaderMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    oCvsHeaders = ArrayList<span class=\"br0\">(</span>Arrays.<span class=\"me0\">asList</span><span class=\"br0\">(</span><span class=\"br0\">(</span>irHeader.<span class=\"me0\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">toArray</span><span class=\"br0\">(</span>String<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    oCvsHeaders.<span class=\"me0\">add</span><span class=\"br0\">(</span>COL_NAME_SUM<span class=\"br0\">)</span><br/>    printer.<span class=\"me0\">printRecord</span><span class=\"br0\">(</span>oCvsHeaders<span class=\"br0\">)</span><br/>    recordIterator = records.<span class=\"me0\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    record = CSVRecord<br/>    <span class=\"kw1\">loop</span> while recordIterator.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      record = CSVRecord recordIterator.<span class=\"me0\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      oCvsRecord = record2list<span class=\"br0\">(</span>record, oCvsHeaders<span class=\"br0\">)</span><br/>      printer.<span class=\"me0\">printRecord</span><span class=\"br0\">(</span>oCvsRecord<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">finally</span><br/>    <span class=\"kw1\">if</span> printer <span class=\"sy0\">\\</span>= null <span class=\"kw3\">then</span> printer.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method record2list<span class=\"br0\">(</span>record = CSVRecord, oCvsHeaders = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>  cvsRecord = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>  rMap = record.<span class=\"me0\">toMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  recNo = record.<span class=\"me0\">getRecordNumber</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  rMap = alterRecord<span class=\"br0\">(</span>rMap, recNo<span class=\"br0\">)</span><br/>  sum = summation<span class=\"br0\">(</span>record.<span class=\"me0\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  rMap.<span class=\"me0\">put</span><span class=\"br0\">(</span>COL_NAME_SUM, sum<span class=\"br0\">)</span><br/>  cvsRecord = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> ci = <span class=\"nu0\">0</span> to oCvsHeaders.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    key = oCvsHeaders.<span class=\"me0\">get</span><span class=\"br0\">(</span>ci<span class=\"br0\">)</span><br/>    cvsRecord.<span class=\"me0\">add</span><span class=\"br0\">(</span>rMap.<span class=\"me0\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> ci<br/>  <span class=\"kw1\">return</span> cvsRecord<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method alterRecord<span class=\"br0\">(</span>rMap = Map, recNo = long<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> Map<br/>    rv = int<br/>    rg = Random<span class=\"br0\">(</span>recNo<span class=\"br0\">)</span><br/>    rv = rg.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><br/>    ks = rMap.<span class=\"me0\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">toArray</span><span class=\"br0\">(</span>String<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    ix = rg.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>ks.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    yv = long <span class=\"nu0\">0</span><br/>    ky = ks<span class=\"br0\">[</span>ix<span class=\"br0\">]</span>;<br/>    xv = String rMap.<span class=\"me0\">get</span><span class=\"br0\">(</span>ky<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> xv <span class=\"sy0\">\\</span>= null <span class=\"sy0\">&amp;</span> xv.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      yv = Long.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>xv<span class=\"br0\">)</span>.<span class=\"me0\">longValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + rv<br/>      rMap.<span class=\"me0\">put</span><span class=\"br0\">(</span>ks<span class=\"br0\">[</span>ix<span class=\"br0\">]</span>, String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>yv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">return</span> rMap<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method summation<span class=\"br0\">(</span>iColumn = Iterator<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> while iColumn.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    nv = Rexx<span class=\"br0\">(</span>String iColumn.<span class=\"me0\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> nv = null, nv.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>, <span class=\"sy0\">\\</span>nv.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> nv = <span class=\"nu0\">0</span><br/>    sum = sum + nv<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> sum<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method textFileContentsToString<span class=\"br0\">(</span>filename<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>    lineOut = <span class=\"st0\">''</span><br/>    fs = Scanner null<br/>    <span class=\"kw1\">do</span><br/>      fs = Scanner<span class=\"br0\">(</span>File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      lineOut = lineout <span class=\"sy0\">||</span> filename <span class=\"sy0\">||</span> NL<br/>      <span class=\"kw1\">loop</span> while fs.<span class=\"me0\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        line = fs.<span class=\"me0\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        lineOut = lineout <span class=\"sy0\">||</span> line <span class=\"sy0\">||</span> NL<br/>        <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">catch</span> ex = FileNotFoundException<br/>      ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">finally</span><br/>      <span class=\"kw1\">if</span> fs <span class=\"sy0\">\\</span>= null <span class=\"kw3\">then</span> fs.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">return</span> lineOut<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 25, "block": "<pre class=\"text highlighted_source\">import strutils, streams<br/>\u00a0<br/>let<br/>  csv = newFileStream(\"data.csv\", fmRead)<br/>  outf = newFileStream(\"data-out.csv\", fmWrite)<br/>\u00a0<br/>var lineNumber = 1<br/>\u00a0<br/>while true:<br/>  if atEnd(csv):<br/>    break<br/>  var line = readLine(csv)<br/>\u00a0<br/>  if lineNumber == 1:<br/>    line.add(\",SUM\")<br/>  else:<br/>    var tmp = 0<br/>    for n in split(line, \",\"):<br/>      tmp += parseInt(n)<br/>    line.add(\",\")<br/>    line.add($tmp)<br/>\u00a0<br/>  outf.writeLn($line)<br/>\u00a0<br/>  inc lineNumber</pre>"}, {"lang": "PARI/GP", "loc": 20, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ CSV data manipulation</span><br/><span class=\"co1\">\\\\ 10/24/16 aev</span><br/><span class=\"co1\">\\\\ processCsv(fn): Where fn is an input path and file name (but no actual extension).</span><br/>processCsv<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span>my<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> ifn<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>fn<span class=\"sy0\">,</span><span class=\"st0\">\".csv\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ofn<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>fn<span class=\"sy0\">,</span><span class=\"st0\">\"r.csv\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> cn<span class=\"sy0\">=</span><span class=\"st0\">\",SUM\"</span><span class=\"sy0\">,</span>nf<span class=\"sy0\">,</span>nc<span class=\"sy0\">,</span>Vr<span class=\"sy0\">,</span>svr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>fn<span class=\"sy0\">==</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>F<span class=\"sy0\">=</span>readstr<span class=\"br0\">(</span>ifn<span class=\"br0\">)</span><span class=\"sy0\">;</span> nf<span class=\"sy0\">=</span>#F<span class=\"sy0\">;</span><br/>F<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>F<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>cn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> nf<span class=\"sy0\">,</span><br/>  Vr<span class=\"sy0\">=</span>stok<span class=\"br0\">(</span>F<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>nc<span class=\"sy0\">=</span>#Vr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  svr<span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>nc<span class=\"sy0\">,</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>Vr<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  F<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>F<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>svr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> nf<span class=\"sy0\">,</span> <span class=\"kw1\">write</span><span class=\"br0\">(</span>ofn<span class=\"sy0\">,</span>F<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">\\\\ Testing:</span><br/>processCsv<span class=\"br0\">(</span><span class=\"st0\">\"c:<span class=\"es0\">\\\\</span>pariData<span class=\"es0\">\\\\</span>test\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 47, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> CSV_Data_Manipulation<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span> Classes<span class=\"sy1\">,</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>    ts<span class=\"sy1\">:</span> tStringList<span class=\"sy1\">;</span><br/>    inFile<span class=\"sy1\">,</span><br/>    outFile<span class=\"sy1\">:</span> Text<span class=\"sy1\">;</span><br/>    Sum<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    Number<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>  Assign<span class=\"br0\">(</span>inFile<span class=\"sy1\">,</span><span class=\"st0\">'input.csv'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Reset<span class=\"br0\">(</span>inFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Assign<span class=\"br0\">(</span>outFile<span class=\"sy1\">,</span><span class=\"st0\">'result.csv'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Rewrite<span class=\"br0\">(</span>outFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  ts<span class=\"sy1\">:</span><span class=\"sy3\">=</span>tStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  ts<span class=\"sy1\">.</span><span class=\"me1\">StrictDelimiter</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">True</span><span class=\"sy1\">;</span>             <br/>\u00a0<br/>  <span class=\"co1\">// Handle the header</span><br/>  <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>inFile<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span>                     <span class=\"co1\">// Read a line from input file</span><br/>  ts<span class=\"sy1\">.</span><span class=\"me1\">CommaText</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>s<span class=\"sy1\">;</span>                      <span class=\"co1\">// Split it to lines</span><br/>  ts<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">'SUM'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                        <span class=\"co1\">// Add a line</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>outFile<span class=\"sy1\">,</span>ts<span class=\"sy1\">.</span><span class=\"me1\">CommaText</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>        <span class=\"co1\">// Reassemble it with comma as delimiter</span><br/>\u00a0<br/>  <span class=\"co1\">// Handle the data</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eof</span><span class=\"br0\">(</span>inFile<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>inFile<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    ts<span class=\"sy1\">.</span><span class=\"me1\">CommaText</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>s<span class=\"sy1\">;</span><br/>\u00a0<br/>    Sum<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> Number <span class=\"kw1\">in</span> ts <span class=\"kw1\">do</span><br/>      Sum<span class=\"sy3\">+=</span>StrToInt<span class=\"br0\">(</span>Number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    ts<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">'%D'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>Sum<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outFile<span class=\"sy1\">,</span> ts<span class=\"sy1\">.</span><span class=\"me1\">CommaText</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>outFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>inFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ts<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'sum'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@header</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/,/</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;&gt;;</span><br/><span class=\"co1\"># Remove the newline.</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a> <span class=\"re0\">$header</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%column_number</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#header</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$column_number</span><span class=\"br0\">{</span><span class=\"re0\">$header</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@rows</span>   <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/,/</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;&gt;;</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"re0\">@rows</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Add 1 to the numbers in the 2nd column:</span><br/><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"re0\">@rows</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Add C1 into C4:</span><br/><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"re0\">$column_number</span><span class=\"br0\">{</span>C4<span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"re0\">$column_number</span><span class=\"br0\">{</span>C1<span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"re0\">@rows</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Add sums to both rows and columns.</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@header</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Sum'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$column_number</span><span class=\"br0\">{</span>Sum<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$#header</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> sum<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@rows</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rows</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>                <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a>  <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>                    sum<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span> <span class=\"re0\">$column_number</span><span class=\"br0\">{</span><span class=\"re0\">$col</span><span class=\"br0\">}</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@rows</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"re0\">@header</span><br/>            <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Print the output.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@header</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">@rows</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$csvfile</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'./whatever.csv'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$fh</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"re0\">$csvfile</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@header</span> <span class=\"sy0\">=</span> <span class=\"re0\">$fh</span><span class=\"sy0\">.</span><span class=\"me1\">get</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@csv</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;.</span><span class=\"me1\">Num</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$fh</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">;</span><br/>close <span class=\"re0\">$fh</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"re0\">$csvfile</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">@header</span><span class=\"sy0\">,</span><span class=\"st_h\">'SUM'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">@</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@csv</span><span class=\"sy0\">;</span><br/>close <span class=\"re0\">$out</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">integer fn = open(\"test.csv\",\"r\")<br/>sequence lines = {}<br/>    while 1 do<br/>        object line = gets(fn)<br/>        if atom(line) then exit end if<br/>        lines = append(lines,split(trim(line),','))<br/>    end while<br/>    close(fn)<br/>    lines[1] = join(lines[1],',')&amp;\",SUM\"<br/>    for i=2 to length(lines) do<br/>        sequence s = lines[i]<br/>        for j=1 to length(s) do<br/>            {{s[j]}} = scanf(s[j],\"%d\")<br/>        end for<br/>--      s[rand(length(s))] = rand(100) -- (if you like)<br/>        lines[i] = sprintf(\"%d,%d,%d,%d,%d,%d\",s&amp;sum(s))<br/>    end for<br/>    lines = join(lines,'\\n')<br/>    fn = open(\"out.csv\",\"w\")<br/>    puts(fn,lines)<br/>    close(fn)<br/>    puts(1,lines)</pre>"}, {"lang": "PHP", "loc": 37, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"co1\">// fputcsv() requires at least PHP 5.1.0</span><br/><span class=\"co1\">// file \"data_in.csv\" holds input data</span><br/><span class=\"co1\">// the result is saved in \"data_out.csv\"</span><br/><span class=\"co1\">// this version has no error-checking</span><br/>\u00a0<br/><span class=\"re0\">$handle</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/fopen\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st_h\">'data_in.csv'</span><span class=\"sy0\">,</span><span class=\"st_h\">'r'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$handle_output</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/fopen\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st_h\">'data_out.csv'</span><span class=\"sy0\">,</span><span class=\"st_h\">'w'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$row</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/fgetcsv\"><span class=\"kw3\">fgetcsv</span></a><span class=\"br0\">(</span><span class=\"re0\">$handle</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$line</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//change some data to zeroes </span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// 1,5,9,13,17 =&gt; 0,5,9,13,17</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// 2,6,10,14,18 =&gt; 2,0,10,14,18</span><br/>\u00a0<br/><span class=\"co1\">//add sum and write file</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$arr</span> <span class=\"kw1\">as</span> <span class=\"re0\">$line</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/array_push\"><span class=\"kw3\">array_push</span></a><span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"sy0\">,</span><span class=\"st0\">\"SUM\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>    <span class=\"kw1\">else</span> <br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/array_push\"><span class=\"kw3\">array_push</span></a><span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.php.net/fputcsv\"><span class=\"kw3\">fputcsv</span></a><span class=\"br0\">(</span><span class=\"re0\">$handle_output</span><span class=\"sy0\">,</span> <span class=\"re0\">$line</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>    <span class=\"re0\">$row</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(in \"data.csv\"<br/>   (prinl (line) \",\" \"SUM\")<br/>   (while (split (line) \",\")<br/>      (prinl (glue \",\" @) \",\" (sum format @)) ) )</pre>"}, {"lang": "PL/I", "loc": 65, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref attributes or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> csv<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">Main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 19.10.2013 Walter Pachl<br/> * 'erase d:\\csv.out'<br/> * 'set dd:in=d:\\csv.in,recsize(300)'<br/> * 'set dd:out=d:\\csv.out,recsize(300)'<br/> * Say 'Input:'<br/> * 'type csv.in'<br/> * 'csv'<br/> * Say ' '<br/> * Say 'Output:'<br/> * 'type csv.out'<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">in</span>  <span class=\"kw1\">Record</span> <span class=\"kw1\">Input</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> out <span class=\"kw1\">Record</span> <span class=\"kw1\">Output</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">On</span> <span class=\"kw1\">Endfile</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"br0\">)</span> <span class=\"kw1\">Goto</span> part2<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">INDEX</span><span class=\"sy0\">,</span><span class=\"kw1\">LEFT</span><span class=\"sy0\">,</span><span class=\"kw1\">SUBSTR</span><span class=\"sy0\">,</span><span class=\"kw1\">TRIM</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> iline<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">sum</span> <span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> oline <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Read</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"br0\">)</span> <span class=\"kw1\">Into</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   iline<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/>   m<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> sep<span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> part2<span class=\"sy0\">:</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>     oline<span class=\"sy0\">=</span>iline<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"st0\">','</span>!!<span class=\"st0\">'SUM'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">sum</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">sum</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"sy0\">+</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     oline<span class=\"sy0\">=</span>iline<span class=\"br0\">(</span>i<span class=\"br0\">)</span>!!<span class=\"st0\">','</span>!!<span class=\"kw1\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Write</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"kw1\">From</span><span class=\"br0\">(</span>oline<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> sep<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span><span class=\"kw1\">line</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">line</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> loop<span class=\"sy0\">:</span><br/> <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span><span class=\"kw1\">line</span><span class=\"sy0\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> p<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span><span class=\"kw1\">line</span><span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">line</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span><span class=\"kw1\">line</span><span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">line</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Leave</span> loop<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> n<span class=\"sy0\">=</span>j<span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 23, "block": "<pre class=\"prolog highlighted_source\">test <span class=\"sy1\">:-</span> augment<span class=\"br0\">(</span><span class=\"st_h\">'test.csv'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'test.out.csv'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% augment( +InFileName, +OutFileName) </span><br/>augment<span class=\"br0\">(</span>InFile<span class=\"sy4\">,</span> OutFile<span class=\"br0\">)</span>  <span class=\"sy1\">:-</span> <br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">(</span>OutFile<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"sy4\">,</span> OutStream<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span> <span class=\"br0\">(</span> csv_read_file_row<span class=\"br0\">(</span>InFile<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span> <span class=\"br0\">[</span>line<span class=\"br0\">(</span>Line<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    <span class=\"co1\">% Row is of the form row( Item1, Item2, ....).</span><br/>\t    addrow<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    csv_write_stream<span class=\"br0\">(</span>OutStream<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Out<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><br/>\t  <span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">close</span></a><span class=\"br0\">(</span>OutStream<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% If the first item in a row is an integer, then append the sum;</span><br/><span class=\"co1\">% otherwise append 'SUM':</span><br/>addrow<span class=\"br0\">(</span> Term<span class=\"sy4\">,</span> NewTerm <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tTerm <span class=\"sy6\">=</span><span class=\"sy4\">..</span> <span class=\"br0\">[</span>F <span class=\"sy5\">|</span> List<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tList <span class=\"sy6\">=</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> sum_list<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> Sum<span class=\"br0\">)</span> <span class=\"sy4\">;</span> Sum <span class=\"sy6\">=</span> <span class=\"st_h\">'SUM'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Sum<span class=\"br0\">]</span><span class=\"sy4\">,</span> NewList<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tNewTerm <span class=\"sy6\">=</span><span class=\"sy4\">..</span> <span class=\"br0\">[</span>F <span class=\"sy5\">|</span> NewList<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 34, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">## Create a CSV file</span><br/><span class=\"sy0\">@</span><span class=\"st0\">\"<br/>C1,C2,C3,C4,C5<br/>1,5,9,13,17<br/>2,6,10,14,18<br/>3,7,11,15,19<br/>4,8,12,16,20<br/>\"</span><span class=\"sy0\">@</span> <span class=\"sy0\">-</span>split <span class=\"st0\">\"<span class=\"es0\">`r</span><span class=\"es0\">`n</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Out<span class=\"kw4\">-File</span></span> <span class=\"kw5\">-FilePath</span> .\\Temp.csv <span class=\"kw5\">-Force</span><br/>\u00a0<br/><span class=\"co1\">## Import each line of the CSV file into an array of PowerShell objects</span><br/><span class=\"re0\">$records</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Import-Csv</span> <span class=\"kw5\">-Path</span> .\\Temp.csv<br/>\u00a0<br/><span class=\"co1\">## Sum the values of the properties of each object</span><br/><span class=\"re0\">$sums</span> <span class=\"sy0\">=</span> <span class=\"re0\">$records</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$field</span> <span class=\"kw3\">in</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.PSObject.Properties.Name<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"re0\">$field</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">## Add a column (Sum) and its value to each object in the array</span><br/><span class=\"re0\">$records</span> <span class=\"sy0\">=</span> <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$sums</span>.Count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"re0\">$records</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> <span class=\"sy0\">*,@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">'Sum'</span>;Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"re0\">$sums</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">## Export the array of modified objects to the CSV file</span><br/><span class=\"re0\">$records</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Export-Csv</span> <span class=\"kw5\">-Path</span> .\\Temp.csv <span class=\"kw5\">-Force</span><br/>\u00a0<br/><span class=\"co1\">## Display the object in tabular form</span><br/><span class=\"re0\">$records</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-Table</span> <span class=\"kw5\">-AutoSize</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 53, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/>#Separator$ <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> fInput$ <span class=\"sy0\">=</span> <span class=\"st0\">\"input.csv\"</span><span class=\"co1\">; insert path to input file</span><br/><span class=\"kw1\">Define</span> fOutput$ <span class=\"sy0\">=</span> <span class=\"st0\">\"output.csv\"</span><span class=\"co1\">; insert path to output file  </span><br/><span class=\"kw1\">Define</span> header$, row$, field$<br/><span class=\"kw1\">Define</span> nbColumns, sum, i<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, fInput$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Error opening input file\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Goto</span> Finish<br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">CreateFile</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, fOutput$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Error creating output file\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Goto</span> Finish <br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"co1\">; Read header row</span><br/>  header$ <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; Determine number of columns</span><br/>  nbColumns <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>header$, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"co1\">; Change header row</span><br/>  header$ <span class=\"sy0\">+</span> #Separator$ <span class=\"sy0\">+</span> <span class=\"st0\">\"SUM\"</span><br/>  <span class=\"co1\">; Write to output file</span><br/>  <span class=\"kw2\">WriteStringN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, header$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">; Read remaining rows, process and write to output file</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    row$ <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nbColumns<br/>      field$ <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>row$, i, #Separator$<span class=\"br0\">)</span><br/>      sum <span class=\"sy0\">+</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span>field$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    row$ <span class=\"sy0\">+</span> #Separator$ <span class=\"sy0\">+</span> sum<br/>    <span class=\"kw2\">WriteStringN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, row$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Finish:<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">fileinput</span><br/>\u00a0<br/>changerow<span class=\"sy0\">,</span> changecolumn<span class=\"sy0\">,</span> changevalue <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'\"Spam\"'</span><br/>\u00a0<br/><span class=\"kw1\">with</span> <span class=\"kw3\">fileinput</span>.<span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'csv_data_manipulation.csv'</span><span class=\"sy0\">,</span> inplace<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>    <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> f:<br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">fileinput</span>.<span class=\"me1\">filelineno</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> changerow:<br/>            fields <span class=\"sy0\">=</span> line.<span class=\"me1\">rstrip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>            fields<span class=\"br0\">[</span>changecolumn-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> changevalue<br/>            line <span class=\"sy0\">=</span> <span class=\"st0\">','</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>fields<span class=\"br0\">)</span> + <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>line<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>df &lt;- read.csv(textConnection(<br/>\"C1,C2,C3,C4,C5<br/>1,5,9,13,17<br/>2,6,10,14,18<br/>3,7,11,15,19<br/>4,8,12,16,20\"))<br/>\u00a0<br/>df &lt;- transform(df,SUM = rowSums(df))<br/>\u00a0<br/>write.csv(df,row.names = FALSE)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require (planet neil/csv:1:=7) net/url)<br/>\u00a0<br/>(define make-reader<br/>  (make-csv-reader-maker<br/>   '((separator-chars              #\\,)<br/>     (strip-leading-whitespace?  . #t)<br/>     (strip-trailing-whitespace? . #t))))<br/>\u00a0<br/>(define (all-rows port)<br/>  (define read-row (make-reader port))<br/>  (define head (append (read-row) '(\"SUM\")))<br/>  (define rows (for/list ([row (in-producer read-row '())])<br/>                 (define xs (map string-&gt;number row))<br/>                 (append row (list (~a (apply + xs))))))<br/>  (define (-&gt;string row) (string-join row \",\" #:after-last \"\\n\"))<br/>  (string-append* (map -&gt;string (cons head rows))))</pre>"}, {"lang": "Red", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;&gt;filein: read/lines\u00a0%file.csv<br/>&gt;&gt;data: copy []<br/>&gt;&gt;foreach item filein [append/only data split item \",\"]<br/>; [[\"C1\" \"C2\" \"C3\" \"C4\" \"C5\"] [\"1\" \"5\" \"9\" \"13\" \"17\"] [\"2\" \"6\" \"10\" \"14\" \"18\"] [\"3\" \"7\" \"11\" \"15\" \"19\"][\"4\" \"8\" \"12\" \"16\" \"20\"]]</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* extend in.csv to add a column containing the sum of the lines' elems<br/>* 21.06.2013 Walter Pachl<br/>**********************************************************************/</span><br/>csv=<span class=\"st0\">'in.csv'</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">By</span> <span class=\"nu0\">1</span> <span class=\"kw2\">While</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>csv<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>  l=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>csv<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> i=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    l<span class=\"sy0\">.</span>i=l<span class=\"st0\">',SUM'</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    ol=l<br/>    sum=<span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> l<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span><br/>      <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> l e <span class=\"st0\">','</span> l<br/>      sum=sum+e<br/>      <span class=\"kw3\">End</span><br/>    l<span class=\"sy0\">.</span>i=ol<span class=\"st0\">','</span>sum<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> csv<br/><span class=\"st0\">'erase'</span> csv<br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> i-<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> csv,l<span class=\"sy0\">.</span>i<br/>  <span class=\"kw3\">End</span></pre>"}, {"lang": "Ring", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: CSV data manipulation<br/>\u00a0<br/>load \"stdlib.ring\"<br/>fnin = \"input.csv\"<br/>fnout = \"output.csv\"<br/>fpin = fopen(fnin,\"r\")<br/>fpout = fopen(fnout,\"r\")<br/>csv = read(fnin)<br/>nr = 0<br/>csvstr = \"\"<br/>\u00a0<br/>while not feof(fpin)<br/>        sum = 0<br/>        nr = nr + 1<br/>        line = readline(fpin)<br/>        if nr = 1<br/>           line = substr(line,nl,\"\")<br/>           line = line + \",SUM\"<br/>           csvstr = csvstr + line + windowsnl()<br/>        else<br/>           csvarr = split(line,\",\")<br/>           for n = 1 to len(csvarr)<br/>                sum = sum + csvarr[n]<br/>           next<br/>           line = substr(line,nl,\"\")<br/>           line = line + \",\" + string(sum)<br/>           csvstr = csvstr + line + windowsnl()<br/>        ok<br/>end<br/>write(fnout,csvstr)<br/>csvend = read(fnout)<br/>fclose(fpin)<br/>fclose(fpout)<br/>see csvend + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'csv'</span><br/><span class=\"co1\"># read:</span><br/>ar = CSV.<span class=\"me1\">table</span><span class=\"br0\">(</span><span class=\"st0\">\"test.csv\"</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span> <span class=\"co1\">#table method assumes headers and converts numbers if possible.</span><br/>\u00a0<br/><span class=\"co1\"># manipulate:</span><br/>ar.<span class=\"me1\">first</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"SUM\"</span><br/>ar<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row <span class=\"sy0\">&lt;&lt;</span> row.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># write:</span><br/>CSV.<span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"out.csv\"</span>, <span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>csv<span class=\"sy0\">|</span><br/>  ar.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> csv <span class=\"sy0\">&lt;&lt;</span> line<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 34, "block": "<pre class=\"text highlighted_source\">csv$ = \"C1,C2,C3,C4,C5<br/>1,5,9,13,17<br/>2,6,10,14,18<br/>3,7,11,15,19<br/>4,8,12,16,20<br/>\"<br/>\u00a0<br/>print csv$<br/>dim csvData$(5,5)<br/>\u00a0<br/>for r = 1 to 5<br/>  a$ = word$(csv$,r,chr$(13))<br/>  for c = 1 to 5<br/>    csvData$(r,c) = word$(a$,c,\",\")<br/>  next c<br/>next r<br/>\u00a0<br/>[loop]<br/>input \"Row to change:\";r<br/>input \"Col to change;\";c<br/>if r &gt; 5 or c &gt; 5 then<br/>  print \"Row \";r;\" or Col \";c;\" is greater than 5\"<br/>  goto [loop]<br/>end if<br/>input \"Change Row \";r;\" Col \";c;\" from \";csvData$(r,c);\" to \";d$<br/>csvData$(r,c) = d$<br/>for r = 1 to 5<br/>  for c = 1 to 5<br/>    print cma$;csvData$(r,c);<br/>    cma$ = \",\"<br/>   next c<br/>   cma$ = \"\"<br/>   print<br/>next r</pre>"}, {"lang": "SAS", "loc": 15, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/><span class=\"kw4\">infile</span> datalines dlm=<span class=\"st0\">\",\"</span> firstobs=<span class=\"nu0\">2</span>;<br/><span class=\"kw4\">file</span> <span class=\"st0\">\"output.csv\"</span> dlm=<span class=\"st0\">\",\"</span>;<br/><span class=\"kw3\">input</span> c1-c5;<br/><span class=\"kw5\">if</span> <span class=\"kw1\">_n_</span>=<span class=\"nu0\">1</span> <span class=\"kw5\">then</span> <span class=\"kw3\">put</span> <span class=\"st0\">\"C1,C2,C3,C4,C5,Sum\"</span>;<br/>s=<span class=\"kw3\">sum</span><span class=\"br0\">(</span>of c1-c5<span class=\"br0\">)</span>;<br/><span class=\"kw3\">put</span> c1-c5 s;<br/>datalines;<br/>C1,C2,C3,C4,C5<br/><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">13</span>,<span class=\"nu0\">17</span><br/><span class=\"nu0\">2</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">14</span>,<span class=\"nu0\">18</span><br/><span class=\"nu0\">3</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">11</span>,<span class=\"nu0\">15</span>,<span class=\"nu0\">19</span><br/><span class=\"nu0\">4</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">12</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">20</span><br/>;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> parseCSV <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rawData <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"|C1,C2,C3,C4,C5<br/>\t\t  \t\t   |1,5,9,13,17<br/>\t\t  \t\t   |2,6,10,14,18<br/>\t\t  \t\t   |3,7,11,15,19<br/>\t\t  \t\t   |20,21,22,23,24\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">stripMargin</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"br0\">(</span>Source.<span class=\"me1\">fromString</span><span class=\"br0\">(</span>rawData<span class=\"br0\">)</span>.<span class=\"me1\">getLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span><span class=\"sy0\">:</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> output <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>data.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span> <span class=\"sy0\">:</span>+ <span class=\"st0\">\"SUM\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> +<span class=\"sy0\">:</span> <span class=\"co1\">// Header line</span><br/>    data.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span>. <span class=\"co1\">// Convert per line each array of String to array of integer</span><br/>    map<span class=\"br0\">(</span>cells <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>cells, cells.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"br0\">)</span>. <span class=\"co1\">//Add sum column to assemble a tuple. Part 1 are original numbers, 2 is the sum</span><br/>    map<span class=\"br0\">(</span>part <span class=\"sy0\">=&gt;</span> s<span class=\"st0\">\"${part._1.mkString(\"</span>,<span class=\"st0\">\")},${part._2}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>  <span class=\"coMULTI\">/* Outputs:<br/>\u00a0<br/>C1,C2,C3,C4,C5,SUM<br/>1,5,9,13,17,45<br/>2,6,10,14,18,50<br/>3,7,11,15,19,55<br/>20,21,22,23,24,110<br/>\u00a0<br/>*/</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 17, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var file: input is STD_NULL;<br/>    var array array string: csvData is 0 times 0 times \"\";<br/>    var integer: line is 0;<br/>  begin<br/>    input\u00a0:= open(dir(PROGRAM) &amp; \"/csvDataManipulation.in\", \"r\");<br/>    while hasNext(input) do<br/>      csvData &amp;:= split(getln(input), \",\");<br/>    end while;<br/>    csvData[3][3]\u00a0:= \"X\";<br/>    for key line range csvData do<br/>      writeln(join(csvData[line], \",\"));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Read</span><br/>var csvfile = <span class=\"sy0\">%</span>f<span class=\"st0\">'data.csv'</span>;<br/>var fh = csvfile.<span class=\"me1\">open_r</span>;<br/>var header = fh.<span class=\"me1\">line</span>.<span class=\"me1\">trim_end</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>;<br/>var csv = fh.<span class=\"me1\">lines</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">trim_end</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_num</span><span class=\"br0\">}</span> <span class=\"br0\">}</span>;<br/>fh.<span class=\"me1\">close</span>;<br/>\u00a0<br/><span class=\"co1\"># Write</span><br/>var out = csvfile.<span class=\"me1\">open_w</span>;<br/>out.<span class=\"me1\">say</span><span class=\"br0\">(</span><span class=\"br0\">[</span>header..., <span class=\"st0\">'SUM'</span><span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>csv.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> out.<span class=\"me1\">say</span><span class=\"br0\">(</span><span class=\"br0\">[</span>row..., row.<span class=\"me1\">sum</span><span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/>out.<span class=\"me1\">close</span>;</pre>"}, {"lang": "Stata", "loc": 4, "block": "<pre class=\"text highlighted_source\">import delim input.csv, clear <br/>replace c5=c3+c4<br/>drop if mod(c3,3)==0<br/>export delim output.csv, replace</pre>"}, {"lang": "Tcl", "loc": 29, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"me1\">matrix</span><br/><span class=\"kw2\">package</span> require csv<br/>\u00a0<br/><span class=\"kw1\">proc</span> addSumColumn <span class=\"br0\">{</span><span class=\"kw3\">filename</span> <span class=\"br0\">{</span>title <span class=\"st0\">\"SUM\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span>struct::<span class=\"me1\">matrix</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># Load the CSV in</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/>    csv::<span class=\"me1\">read2matrix</span> <span class=\"re0\">$f</span> <span class=\"re0\">$m</span> <span class=\"st0\">\",\"</span> auto<br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>\u00a0<br/>    <span class=\"co1\"># Add the column with the sums</span><br/>    <span class=\"kw1\">set</span> sumcol <span class=\"br0\">[</span><span class=\"re0\">$m</span> columns<span class=\"br0\">]</span><br/>    <span class=\"re0\">$m</span> add column <span class=\"re0\">$title</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"re0\">$m</span> rows<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Fill out a dummy value</span><br/>\t<span class=\"re0\">$m</span> <span class=\"kw1\">set</span> cell <span class=\"re0\">$sumcol</span> <span class=\"re0\">$i</span> <span class=\"nu0\">0</span><br/>\t<span class=\"re0\">$m</span> <span class=\"kw1\">set</span> cell <span class=\"re0\">$sumcol</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"re0\">$m</span> get row <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Write the CSV out</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span> w<span class=\"br0\">]</span><br/>    csv::<span class=\"me1\">writematrix</span> <span class=\"re0\">$m</span> <span class=\"re0\">$f</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>\u00a0<br/>    <span class=\"re0\">$m</span> destroy<br/><span class=\"br0\">}</span><br/>\u00a0<br/>addSumColumn <span class=\"st0\">\"example.csv\"</span></pre>"}, {"lang": "TUSCRIPT", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE DATA<br/>$$ csv=*<br/>C1,C2,C3,C4,C5<br/>1,5,9,13,17<br/>2,6,10,14,18<br/>3,7,11,15,19<br/>4,8,12,16,20<br/>$$ MODE TUSCRIPT<br/>LOOP/CLEAR n,line=csv<br/> IF (n==1) THEN<br/>  line=CONCAT (line,\",SUM\")<br/> ELSE<br/>  lineadd=EXCHANGE(line,\":,:':\")<br/>  sum=SUM(lineadd)<br/>  line=JOIN(line,\",\",sum)<br/> ENDIF<br/> csv=APPEND(csv,line)<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 12, "block": "<pre class=\"text highlighted_source\">@(coll)@{name /[^,]+/}@(end)<br/>@(collect\u00a0:vars (value sum))<br/>@  (bind sum 0)<br/>@  (coll)@{value /[^,]+/}@(set sum @(+ sum (int-str value)))@(end)<br/>@(end)<br/>@(output)<br/>@  (rep)@name,@(last)<a class=\"__cf_email__\" data-cfemail=\"faa9afb7ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)<br/>@  (repeat)<br/>@    (rep)@value,@(last)@<a class=\"__cf_email__\" data-cfemail=\"e093958da0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)<br/>@  (end)<br/>@(end)<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 20, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">exec</span> <span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span><span class=\"st0\">\"$1\"</span>                 <span class=\"co0\"># open the input file on stdin</span><br/><span class=\"kw3\">exec</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"st0\">\"$1.new\"</span>             <span class=\"co0\"># open an output file on stdout</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> header<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$header</span>,SUM\"</span><br/>    <span class=\"re2\">IFS</span>=,<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> <span class=\"re5\">-a</span> numbers; <span class=\"kw1\">do</span><br/>        <span class=\"re2\">sum</span>=<span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> <span class=\"st0\">\"<span class=\"es3\">${numbers[@]}</span>\"</span>; <span class=\"kw1\">do</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"kw2\">sum</span> += num <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">done</span><br/>\u00a0<br/>        <span class=\"co0\"># can write the above loop as</span><br/>        <span class=\"co0\">#   sum=$(( $(IFS=+; echo \"${numbers[*]}\") ))</span><br/>\u00a0<br/>        <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${numbers[*]}</span>,<span class=\"es2\">$sum</span>\"</span><br/>    <span class=\"kw1\">done</span> <br/><span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span><br/><span class=\"kw2\">mv</span> <span class=\"st0\">\"$1\"</span> <span class=\"st0\">\"$1.bak\"</span> <span class=\"sy0\">&amp;&amp;</span> <br/><span class=\"kw2\">mv</span> <span class=\"st0\">\"$1.new\"</span> <span class=\"st0\">\"$1\"</span></pre>"}, {"lang": "Ursa", "loc": 42, "block": "<pre class=\"text highlighted_source\">#<br/># csv data manipulation<br/>#<br/>\u00a0<br/># declare a string stream to hold lines<br/>decl string&lt;&gt; lines<br/>\u00a0<br/># open the file specified on the command line, halting<br/># execution if they didn't enter one. it will be created if<br/># it doesn't exist yet<br/>decl file f<br/>if (&lt; (size args) 2)<br/>        out \"error: please specify a csv file\" endl console<br/>        stop<br/>end if<br/>f.create args&lt;1&gt;<br/>f.open args&lt;1&gt;<br/>\u00a0<br/># read in all lines from the file<br/>set lines (f.readlines)<br/>\u00a0<br/># append sum column to header<br/>set lines&lt;0&gt; (+ lines&lt;0&gt; \",SUM\")<br/>\u00a0<br/># determine sums and append them<br/>decl int i sum<br/>for (set i 1) (&lt; i (size lines)) (inc i)<br/>        set sum 0<br/>        for (decl int j) (&lt; j (size (split lines&lt;i&gt; \",\"))) (inc j)<br/>                set sum (int (+ sum (int (split lines&lt;i&gt; \",\")&lt;j&gt;)))<br/>        end for<br/>        set lines&lt;i&gt; (+ lines&lt;i&gt; (+ \",\" sum))<br/>end for<br/>\u00a0<br/># delete the file, then create it again<br/>f.delete args&lt;1&gt;<br/>f.create args&lt;1&gt;<br/>\u00a0<br/># output all lines to the file<br/>for (set i 0) (&lt; i (size lines)) (inc i)<br/>        out lines&lt;i&gt; endl f<br/>end for</pre>"}, {"lang": "VBA", "loc": 7, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> ReadCSV()<br/>    Workbooks.<span class=\"kw4\">Open</span> Filename:=<span class=\"st0\">\"L:\\a\\input.csv\"</span><br/>    Range(<span class=\"st0\">\"F1\"</span>).Value = <span class=\"st0\">\"Sum\"</span><br/>    Range(<span class=\"st0\">\"F2:F5\"</span>).Formula = <span class=\"st0\">\"=SUM(A2:E2)\"</span><br/>    ActiveWorkbook.SaveAs Filename:=<span class=\"st0\">\"L:\\a\\output.csv\"</span>, FileFormat:=xlCSV<br/>    ActiveWindow.<span class=\"kw3\">Close</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "VBScript", "loc": 35, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Instatiate FSO.<br/></span><span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/><span class=\"co1\">'Open the CSV file for reading. The file is in the same folder as the script and named csv_sample.csv.<br/></span><span class=\"kw4\">Set</span> objInCSV = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp; <span class=\"st0\">\"\\csv_sample.csv\"</span>,1,<span class=\"kw5\">False</span>)<br/><span class=\"co1\">'Set header status to account for the first line as the column headers.<br/></span>IsHeader = <span class=\"kw5\">True</span><br/><span class=\"co1\">'Initialize the var for the output string.<br/></span>OutTxt = <span class=\"st0\">\"\"</span><br/><span class=\"co1\">'Read each line of the file.<br/></span><span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> objInCSV.AtEndOfStream<br/>\t<span class=\"kw4\">line</span> = objInCSV.ReadLine<br/>\t<span class=\"kw3\">If</span> IsHeader <span class=\"kw3\">Then</span><br/>\t\tOutTxt = OutTxt &amp; <span class=\"kw4\">line</span> &amp; <span class=\"st0\">\",SUM\"</span> &amp; vbCrLf<br/>\t\tIsHeader = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tOutTxt = OutTxt &amp; <span class=\"kw4\">line</span> &amp; <span class=\"st0\">\",\"</span> &amp; AddElements(<span class=\"kw4\">line</span>) &amp; vbCrLf<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Loop</span><br/><span class=\"co1\">'Close the file.<br/></span>objInCSV.<span class=\"kw3\">Close</span><br/><span class=\"co1\">'Open the same file for writing.<br/></span><span class=\"kw4\">Set</span> objOutCSV = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp; <span class=\"st0\">\"\\csv_sample.csv\"</span>,2,<span class=\"kw5\">True</span>)<br/><span class=\"co1\">'Write the var OutTxt to the file overwriting existing contents.<br/></span>objOutCSV.Write OutTxt<br/><span class=\"co1\">'Close the file.<br/></span>objOutCSV.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objFSO = <span class=\"kw5\">Nothing</span><br/>\u00a0<br/><span class=\"co1\">'Routine to add each element in a row.<br/></span><span class=\"kw2\">Function</span> AddElements(s)<br/>\tarr = Split(s,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tAddElements = AddElements + CInt(arr(i))<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Vedit macro language", "loc": 11, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"input.csv\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Goto_Line<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                             <span class=\"co1\">// line (starting from line 2)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Search<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span> ADVANCE<span class=\"sy0\">+</span>COUNT<span class=\"sy0\">,</span> #<span class=\"nu0\">1</span><span class=\"br0\">)</span>          <span class=\"co1\">// column</span><br/>    <span class=\"br0\">}</span><br/>    #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Num_Eval<span class=\"br0\">(</span><span class=\"br0\">)</span>                             <span class=\"co1\">// #2 = old value</span><br/>    Del_Char<span class=\"br0\">(</span>Chars_Matched<span class=\"br0\">)</span>                     <span class=\"co1\">// delete old value</span><br/>    Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">+</span>NOCR<span class=\"br0\">)</span>                  <span class=\"co1\">// write new value</span><br/><span class=\"br0\">}</span><br/>File_Save_As<span class=\"br0\">(</span><span class=\"st0\">\"output.csv\"</span><span class=\"sy0\">,</span> OK<span class=\"sy0\">+</span>NOMSG<span class=\"br0\">)</span> </pre>"}, {"lang": "Visual FoxPro", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>CLOSE DATABASES ALL<br/>SET SAFETY OFF<br/>MODIFY FILE file1.csv NOEDIT<br/>*!* Create a cursor with integer columns<br/>CREATE CURSOR tmp1 (C1 I, C2 I, C3 I, C4 I, C5 I)<br/>APPEND FROM file1.csv TYPE CSV<br/>SELECT C1, C2, C3, C4, C5, C1+C2+C3+C4+C5 As sum\u00a0;<br/>FROM tmp1 INTO CURSOR tmp2<br/>COPY TO file2.csv TYPE CSV<br/>MODIFY FILE file2.csv NOEDIT IN SCREEN<br/>SET SAFETY ON<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">csvFile:=File(\"test.csv\");<br/>header:=csvFile.readln().strip(); // remove trailing \"\\n\" and leading white space<br/>listOfLines:=csvFile.pump(List,fcn(line){ line.strip().split(\",\").apply(\"toInt\") });<br/>\u00a0<br/>newFile:=File(\"test2.csv\",\"w\");<br/>newFile.writeln(header + \",sum\");<br/>listOfLines.pump(newFile.writeln,fcn(ns){ String(ns.concat(\",\"),\",\",ns.sum()) });<br/>newFile.close();</pre>"}]}