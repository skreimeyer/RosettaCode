{"task": "Null_object", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>null? if \"item was null\" . then<br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 2, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">object</span> == <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"object is null\"</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 5, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw1\">if</span> Object = <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>   Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Put_line</span><span class=\"br0\">(</span><span class=\"st0\">\"object is null\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 19, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> no result <span class=\"sy1\">=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">STRING</span> result <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">IF</span> no result <span class=\"sy1\">:=:</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"no result\u00a0:=: NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">IF</span> result <span class=\"sy1\">:/=:</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"result\u00a0:/=: NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">IF</span> no result <span class=\"kw7\">IS</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"no result IS NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">IF</span> result <span class=\"kw7\">ISNT</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"result ISNT NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>COMMENT using the UNESCO<span class=\"sy1\">/</span>IFIP<span class=\"sy1\">/</span>WG<span class=\"re1\">2.1</span> ALGOL 68 character set<br/>  result <span class=\"sy1\">:=</span> \u00b0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"sy1\">:\u2260:</span> \u00b0 <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"result \u2260 \u00b0\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/><span class=\"coMULTI\"># Note the following gotcha: #</span><br/>\u00a0<br/><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> var <span class=\"sy1\">:=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">IF</span> var <span class=\"kw7\">ISNT</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"The address of var ISNT NIL\"</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">IF</span> var <span class=\"kw7\">IS</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"The address of var IS REF STRING(NIL)\"</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span></pre>"}, {"lang": "ALGOL W", "loc": 10, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% declare a record type - will be accessed via references               \u00a0%<br/>    record R( integer f1, f2, f3 );<br/>   \u00a0% declare a reference to a R instance                                   \u00a0%<br/>    reference(R) refR;<br/>   \u00a0% assign null to the reference                                          \u00a0%<br/>    refR\u00a0:= null;<br/>   \u00a0% test for a null reference - will write \"refR is null\"                 \u00a0%<br/>    if refR = null then write( \"refR is null\" ) else write( \"not null\" );<br/>end.</pre>"}, {"lang": "AmigaE", "loc": 5, "block": "<pre class=\"text highlighted_source\">DEF x\u00a0: PTR TO object<br/>-&gt; ...<br/>IF object &lt;&gt; NIL<br/>  -&gt; ...<br/>ENDIF</pre>"}, {"lang": "AppleScript", "loc": 7, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">if</span> x <span class=\"kw3\">is</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">display dialog</span> <span class=\"st0\">\"x is missing value\"</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/><span class=\"kw3\">if</span> x <span class=\"kw3\">is</span> null <span class=\"kw3\">then</span><br/>  <span class=\"kw1\">display dialog</span> <span class=\"st0\">\"x is null\"</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">if</span></pre>"}, {"lang": "AutoHotkey", "loc": 2, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"kw1\">If</span> <span class=\"br0\">(</span>object <span class=\"sy0\">==</span> null<span class=\"br0\">)</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> object is null</pre>"}, {"lang": "AutoIt", "loc": 2, "block": "<pre class=\"autoit highlighted_source\"><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$object</span> <span class=\"sy0\">=</span> Null<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$object</span> <span class=\"sy0\">=</span> Null <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"NULL\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Object is null\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>  b=<span class=\"nu0\">0</span>; <br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;\"</span>b,<span class=\"kw4\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"st0\">\"&gt;\"</span> <br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;\"</span>u,<span class=\"kw4\">length</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"st0\">\"&gt;\"</span> <br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;\"</span>u<span class=\"sy3\">+</span><span class=\"nu0\">0</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span>u<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"st0\">\"&gt;\"</span>; <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 3, "block": "<pre class=\"text highlighted_source\">If P=0<br/> Disp \"NULL PTR\",i<br/>End</pre>"}, {"lang": "Babel", "loc": 1, "block": "<pre class=\"text highlighted_source\">{ nil { nil? } { \"Whew!\\n\" } { \"Something is terribly wrong!\\n\" } ifte &lt;&lt; }</pre>"}, {"lang": "BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">TRUE = 1\u00a0: FALSE = 0<br/>NULL = TRUE<br/>IF NULL THEN PRINT \"NULL\"<br/>NULL = FALSE<br/>IF NOT NULL THEN PRINT \"NOT NULL\"</pre>"}, {"lang": "Bracmat", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a:?x*a*?z  {assigns 1 to x and to z}<br/>a:?x+a+?z  {assigns 0 to x and to z}<br/>a:?x a\u00a0?z  {assigns \"\" (or (), which is equivalent) to x and to z}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>object <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>object <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"object is null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 5, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>object <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"object is null\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 2, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>foo <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"foo is null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Chapel", "loc": 3, "block": "<pre class=\"text highlighted_source\">class C { };<br/>var c:C; // is nil<br/>writeln(if c == nil then \"nil\" else \"something\");</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>x <span class=\"kw1\">nil</span><span class=\"br0\">]</span><br/> <span class=\"br0\">(</span>println <span class=\"st0\">\"Object is\"</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil</span>? x<span class=\"br0\">)</span> <span class=\"st0\">\"nil\"</span> <span class=\"st0\">\"not nil\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 43, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> null-objects<span class=\"sy0\">.</span><br/>       remarks<span class=\"sy0\">.</span> <span class=\"kw3\">test</span> <span class=\"kw3\">with</span> cobc -x -j null-objects<span class=\"sy0\">.</span>cob<br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> thing-not-thing      <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; <span class=\"kw2\">call</span> a subprogram<br/>      *&gt;   <span class=\"kw3\">with</span> one <span class=\"kw3\">null</span> <span class=\"kw3\">pointer</span><br/>      *&gt;   an <span class=\"kw3\">omitted</span> parameter<br/>      *&gt;   <span class=\"kw3\">and</span> expect void <span class=\"kw2\">return</span> <span class=\"br0\">(</span>callee returning <span class=\"kw3\">omitted</span><span class=\"br0\">)</span><br/>      *&gt;   <span class=\"kw3\">and</span> do <span class=\"kw3\">not</span> touch default return-<span class=\"kw1\">code</span> <span class=\"br0\">(</span>returning nothing<span class=\"br0\">)</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"test-null\"</span> <span class=\"kw3\">using</span> thing-not-thing <span class=\"kw3\">omitted</span> returning nothing<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> null-objects<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; <span class=\"kw3\">Test</span> <span class=\"kw3\">for</span> <span class=\"kw3\">pointer</span> <span class=\"kw2\">to</span> <span class=\"kw3\">null</span> <span class=\"br0\">(</span>still a real thing that takes <span class=\"kw3\">space</span><span class=\"br0\">)</span><br/>      *&gt;   <span class=\"kw3\">and</span> an <span class=\"kw3\">omitted</span> parameter<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw2\">call</span> frame has placeholder<span class=\"br0\">)</span><br/>      *&gt;   <span class=\"kw3\">and</span> finally<span class=\"sy0\">,</span> <span class=\"kw2\">return</span> void<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw3\">omitted</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> test-<span class=\"kw3\">null</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> thing-one            <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> thing-two            <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span><br/>           thing-one<br/>           <span class=\"kw3\">optional</span> thing-two<br/>           returning <span class=\"kw3\">omitted</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> thing-one <span class=\"kw3\">equal</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"thing-one pointer to null\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> thing-two <span class=\"kw3\">omitted</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"no thing-two was passed\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw1\">if</span><br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> test-<span class=\"kw3\">null</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>condition<span class=\"br0\">)</span> <span class=\"br0\">(</span>do-this<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 19, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> ObjectNil;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/><span class=\"kw1\">TYPE</span> <br/>\tObject <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> ObjectDesc;<br/>\tObjectDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t<span class=\"kw1\">END</span>;<br/><span class=\"kw1\">VAR</span>\t<br/>\tx<span class=\"sy0\">:</span> Object; <span class=\"coMULTI\">(* default initialization to NIL *)</span><br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoIt<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">BEGIN</span> <br/>\t<span class=\"kw1\">IF</span> x <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span><br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"x is NIL\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> DoIt;<br/>\u00a0<br/><span class=\"kw1\">END</span> ObjectNil.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> K <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    K k<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"k is null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    k <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> K<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Now k is not null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 6, "block": "<pre class=\"delphi highlighted_source\">  <span class=\"co1\">// the following are equivalent</span><br/>  <span class=\"kw1\">if</span> lObject <span class=\"sy3\">=</span> <span class=\"kw1\">nil</span> <span class=\"kw1\">then</span><br/>  <span class=\"sy1\">...</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">Assigned</span><span class=\"br0\">(</span>lObject<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>  <span class=\"sy1\">...</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 5, "block": "<pre class=\"text highlighted_source\">if not obj:<br/>    pass #obj is seen as null<br/>\u00a0<br/>if =\u00a0:nil obj:<br/>    pass #obj is seen as null</pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"e highlighted_source\">object <span class=\"sy0\">==</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\">object <span class=\"sy0\">==</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a></pre>"}, {"lang": "EchoLisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"kw1\">null</span> \u2192 <span class=\"kw1\">null</span><br/><span class=\"br0\">(</span><span class=\"br0\">)</span> \u2192 <span class=\"kw1\">null</span><br/><span class=\"br0\">(</span><span class=\"kw1\">null</span>? <span class=\"nu0\">3</span><span class=\"br0\">)</span> \u2192 #f<br/><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">null</span>? <span class=\"nu0\">4</span><span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span><span class=\"kw1\">null</span>? <span class=\"kw1\">null</span><span class=\"br0\">)</span> \u2192 #t<br/>\u00a0<br/><span class=\"co1\">;; careful - null is not false\u00a0:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"kw1\">null</span> 'OUI 'NON<span class=\"br0\">)</span> \u2192 OUI<br/>\u00a0<br/><span class=\"co1\">;; usual usage\u00a0: recursion on lists until (null? list)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>f <span class=\"kw1\">list</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">null</span>? <span class=\"kw1\">list</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>first <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>rest <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>f '<span class=\"br0\">(</span> a b c<span class=\"br0\">)</span><span class=\"br0\">)</span>  \u2192  a b c<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 23, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\ts<span class=\"sy0\">:</span> detachable <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> i <span class=\"sy0\">=</span> <span class=\"kw3\">Void</span> <span class=\"kw2\">then</span><br/>\t\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"i = Void\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">if</span> s <span class=\"sy0\">=</span> <span class=\"kw3\">Void</span> <span class=\"kw2\">then</span><br/>\t\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"s = Void\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; nil ==\u00a0:nil<br/>true<br/>iex(2)&gt; is_nil(nil)<br/>true</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>{ok, 3}\u00a0% normal case</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> sl\u00a0: <span class=\"kw4\">string</span> list <span class=\"sy0\">=</span> <span class=\"br0\">[</span>null<span class=\"sy0\">;</span> <span class=\"st0\">\"abc\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> f s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> s <span class=\"kw1\">with</span><br/>    | <span class=\"kw1\">null</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"It is null!\"</span><br/>    | _ <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"It's non-null: \"</span> <span class=\"sy0\">+</span> s<br/>\u00a0<br/><span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> sl <span class=\"kw1\">do</span> printfn <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span>f s<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">: is-f? ( obj --\u00a0? ) f =\u00a0;</pre>"}, {"lang": "Fantom", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; x\u00a0:= null<br/>fansh&gt; x == null<br/>true<br/>fansh&gt; x = 1<br/>1<br/>fansh&gt; x == null<br/>false<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' FreeBASIC does not have a NULL keyword but it's possible to create one using a macro</span><br/>\u00a0<br/><span class=\"co2\">#Define NULL CPtr(Any Ptr, 0) '' Any Ptr is implicitly convertible to pointers of other types</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> Dog<br/>  <span class=\"kw1\">name</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  age <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> Dog <span class=\"kw1\">Ptr</span> = New Dog<br/>d-&gt;<span class=\"kw1\">Name</span> = <span class=\"st0\">\"Rover\"</span><br/>d-&gt;Age = <span class=\"nu0\">5</span><br/><span class=\"kw1\">Print</span> d-&gt;<span class=\"kw1\">Name</span>, d-&gt;Age<br/>Delete d <br/>d = NULL <span class=\"co1\">'' guard against 'd' being used accidentally in future </span><br/>\u00a0<br/><span class=\"co1\">' in practice many FB developers would simply have written: d = 0 above</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' FreeBASIC does not have a NULL keyword but it's possible to create one using a macro</span><br/>\u00a0<br/><span class=\"co2\">#Define NULL CPtr(Any Ptr, 0) '' Any Ptr is implicitly convertible to pointers of other types</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> Dog<br/>  <span class=\"kw1\">name</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  age <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> Dog <span class=\"kw1\">Ptr</span> = New Dog<br/>d-&gt;<span class=\"kw1\">Name</span> = <span class=\"st0\">\"Rover\"</span><br/>d-&gt;Age = <span class=\"nu0\">5</span><br/><span class=\"kw1\">Print</span> d-&gt;<span class=\"kw1\">Name</span>, d-&gt;Age<br/>Delete d <br/>d = NULL <span class=\"co1\">'' guard against 'd' being used accidentally in future </span><br/>\u00a0<br/><span class=\"co1\">' in practice many FB developers would simply have written: d = 0 above</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    s <span class=\"sy1\">[]</span><span class=\"kw4\">int</span>       <span class=\"co1\">// slice type</span><br/>    p <span class=\"sy3\">*</span><span class=\"kw4\">int</span>        <span class=\"co1\">// pointer type</span><br/>    f <span class=\"kw4\">func</span><span class=\"sy1\">()</span>      <span class=\"co1\">// function type</span><br/>    <span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span> <span class=\"co1\">// interface type</span><br/>    m <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span> <span class=\"co1\">// map type</span><br/>    c <span class=\"kw4\">chan</span> <span class=\"kw4\">int</span>    <span class=\"co1\">// channel type</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>f <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>m <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a>      <span class=\"co1\">-- undefined value provided by the standard library</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"oops\"</span>   <span class=\"co1\">-- another undefined value</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span>        <span class=\"co1\">-- undefined, you can't take the head of an empty list</span></pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>nulltest<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span>                <span class=\"co1\"># unassigned variables are null by default</span><br/>nulltest<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"sy1\">,</span>b <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span>       <span class=\"co1\"># explicit assignment is possible</span><br/>nulltest<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"sy1\">,</span>c <span class=\"sy1\">:=</span> <span class=\"st0\">\"anything\"</span><span class=\"br0\">)</span><br/>nulltest<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"sy1\">,</span>c <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span>       <span class=\"co1\"># varibables can't be undefined</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nulltest<span class=\"br0\">(</span><span class=\"kw4\">name</span><span class=\"sy1\">,</span>var<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">name</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>var <span class=\"kw1\">then</span> <span class=\"st0\">\" is\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" is not\"</span><span class=\"sy1\">,</span><span class=\"st0\">\" null.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">object</span> == <span class=\"kw3\">nil</span>, <span class=\"st0\">\"object is nil\"</span> println<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">isUndefined=: <span class=\"nu0\">_1</span> = <a class=\"__cf_email__\" data-cfemail=\"acc2cfeccec3d4d4c3dcc9c2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java highlighted_source\"><span class=\"co1\">// here \"object\" is a reference</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>object <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"object is null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 6, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>object <span class=\"sy0\">===</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  alert<span class=\"br0\">(</span><span class=\"st0\">\"object is null\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// The object is nothing</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">typeof</span> <span class=\"kw2\">null</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"object\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// This stands since the beginning of JavaScript</span></pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\">null|type      # =&gt; \"null\"<br/>\u00a0<br/>null == false  # =&gt; false<br/>\u00a0<br/>null == null   # =&gt; true<br/>\u00a0<br/>empty|type     # =&gt;  # i.e. nothing (as in, nada)<br/>\u00a0<br/>empty == empty # =&gt;  # niente<br/>\u00a0<br/>empty == \"black hole\" # =&gt;  # \u041d\u0438\u0447\u0435\u0433\u043e</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  (1;;2) ~ (1\u00a0; _n\u00a0; 2)    /  ~  is ''identical to'' or ''match'' .<br/>1<br/>  _n ~' ( 1\u00a0;\u00a0; 2 )        /  ''match each''<br/>0 1 0 <br/>\u00a0<br/>additional properties\u00a0:  <a class=\"__cf_email__\" data-cfemail=\"e7b889a78e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> and _n?i are i; _n`v is _n <br/>\u00a0</pre>"}, {"lang": "K", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  (1;;2) ~ (1\u00a0; _n\u00a0; 2)    /  ~  is ''identical to'' or ''match'' .<br/>1<br/>  _n ~' ( 1\u00a0;\u00a0; 2 )        /  ''match each''<br/>0 1 0 <br/>\u00a0<br/>additional properties\u00a0:  <a class=\"__cf_email__\" data-cfemail=\"e7b889a78e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> and _n?i are i; _n`v is _n <br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i<span class=\"sy0\">:</span> Int  <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>           <span class=\"co1\">// non-nullable Int type - can't be assigned null</span><br/>    println<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j<span class=\"sy0\">:</span> Int<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>        <span class=\"co1\">// nullable Int type - can be assigned null</span><br/>    println<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <br/>    println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> is Nothing<span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"co1\">// test that null is indeed of type Nothing? </span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 18, "block": "<pre class=\"text highlighted_source\">local(x = string, y = null)<br/>#x-&gt;isA(::null) <br/>// 0 (false)<br/>\u00a0<br/>#y-&gt;isA(::null) <br/>// 1 (true)<br/>\u00a0<br/>#x == null<br/>// false<br/>\u00a0<br/>#y == null<br/>//true<br/>\u00a0<br/>#x-&gt;type == 'null'<br/>// false<br/>\u00a0<br/>#y-&gt;type == 'null'<br/>//true</pre>"}, {"lang": "Lingo", "loc": 12, "block": "<pre class=\"text highlighted_source\">put _global.doesNotExist<br/>-- &lt;Void&gt;<br/>\u00a0<br/>put voidP(_global.doesNotExist)<br/>-- 1<br/>\u00a0<br/>x = VOID<br/>put x<br/>-- &lt;Void&gt;<br/>\u00a0<br/>put voidP(x)<br/>-- 1</pre>"}, {"lang": "Lily", "loc": 21, "block": "<pre class=\"text highlighted_source\">enum class Option[A] {<br/>  Some(A)<br/>  None<br/>}<br/>\u00a0<br/># Only variables of class Option can be assigned to None.<br/>\u00a0<br/># Type: Option[integer]<br/>var v = Some(10)<br/>\u00a0<br/># Valid: v is an Option, and any Option can be assigned to None<br/>v = None<br/>\u00a0<br/># Invalid! v is an Option[integer], not just a plain integer.<br/>v = 10<br/>\u00a0<br/># Type: integer<br/>var w = 10<br/>\u00a0<br/># Invalid! Likewise, w is an integer, not an Option.<br/>w = None</pre>"}, {"lang": "Logo", "loc": 6, "block": "<pre class=\"text highlighted_source\">to test\u00a0:thing<br/>if empty?\u00a0:thing [print [list or word is empty]]<br/>end<br/>\u00a0<br/>print empty? [] \u00a0; true<br/>print empty? \"||\u00a0; true</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>isnil <span class=\"sy0\">=</span> <span class=\"br0\">(</span>object <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>isnil<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckWord {<br/>      Declare Alfa \"WORD.APPLICATION\"<br/>      Declare Alfa Nothing<br/>      Print Type$(Alfa)=\"Nothing\"<br/>      Try ok {<br/>            Declare Alfa \"WORD.APPLICATION\"<br/>            \\\\ we can't declare again Alfa      <br/>\u00a0<br/>      }<br/>      If Not Ok Then Print Error$  ' return Bad Object declaration<br/>}<br/>CheckWord<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">a\u00a0:= NULL;<br/>                                                         a\u00a0:= <br/>is (NULL = ());<br/>                                                         true<br/>if a = NULL then<br/>    print (NULL);<br/>end if;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">x=Null;</pre>"}, {"lang": "MATLAB / Octave", "loc": 8, "block": "<pre class=\"matlab highlighted_source\">a = <span class=\"br0\">[</span><span class=\"br0\">]</span>; b=<span class=\"co2\">''</span>;<br/>isempty<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>isempty<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <br/>  <span class=\"nu0\">1</span>, <br/><span class=\"kw1\">else</span>, <br/>  <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span>;</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">if obj == undefined then print \"Obj is undefined\"</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">if obj == undefined then print \"Obj is undefined\"</pre>"}, {"lang": "Modula-3", "loc": 1, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">VAR</span> foo <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span></pre>"}, {"lang": "MUMPS", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>CACHE&gt;WRITE $DATA(VARI)<br/>0<br/>CACHE&gt;SET VARI=\"HELLO\" WRITE $DATA(VARI)<br/>1<br/>CACHE&gt;NEW VARI WRITE $DATA(VARI)\u00a0;Change to a new scope<br/>0<br/>CACHE 1S1&gt;SET VARI(1,2)=\"DOWN\" WRITE $DATA(VARI)<br/>10<br/>CACHE 1S1&gt;WRITE $DATA(VARI(1))<br/>10<br/>CACHE 1S1&gt;WRITE $D(VARI(1,2))<br/>1<br/>CACHE 1S1&gt;SET VARI(1)=\"UP\" WRITE $DATA(VARI(1))<br/>11<br/>&lt;CACHE 1S1&gt;QUIT\u00a0;Leave the scope<br/>\u00a0<br/>&lt;CACHE&gt;W $DATA(VARI),\" \",VARI<br/>1 HELLO<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 7, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>robject = Rexx <span class=\"co1\">-- create an object for which the value is undefined</span><br/><span class=\"kw1\">say</span> String.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>robject<span class=\"br0\">)</span> <span class=\"co1\">-- will report the text \"null\"</span><br/><span class=\"kw1\">if</span> robject = null <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'Really, it'</span><span class=\"st0\">'s \"null\"!'</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 6, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"co2\">#! /usr/local/bin/newlisp</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> myobject <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil\"><span class=\"kw1\">nil</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil%3F\"><span class=\"kw1\">nil?</span></a> myobject<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">var s: string = nil<br/>\u00a0<br/>var ns: string not nil = nil # Compile time error</pre>"}, {"lang": "Oberon-2", "loc": 16, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Null;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/><span class=\"kw1\">TYPE</span><br/>  Object <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> ObjectDesc;<br/>  ObjectDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  o<span class=\"sy0\">:</span> Object;  <span class=\"coMULTI\">(* default initialization to NIL *)</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">IF</span> o <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"o is NIL\"</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">Ln</span> <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Null.<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 4, "block": "<pre class=\"objc highlighted_source\"><span class=\"co2\">// here \"object\" is an object pointer</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>object <span class=\"sy0\">==</span> <span class=\"kw2\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   NSLog<span class=\"br0\">(</span><span class=\"st0\">\"object is nil\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objeck", "loc": 6, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"co1\"># here \"object\" is a reference</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>object <span class=\"sy0\">=</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"st0\">\"object is null\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> <span class=\"sy0\">'</span>a <span class=\"kw1\">option</span> <span class=\"sy0\">=</span> None <span class=\"sy0\">|</span> Some <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a</pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">null isNull<br/>\"abcd\" isNull<br/>: testNull { | a | a ifNull: [ \"Variable value is null\" println ]\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 3, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>   <span class=\"kw1\">if</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"Item\"</span> i <span class=\"st0\">\"is missing\"</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 4, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  X<br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show X<span class=\"sy0\">+</span>2<span class=\"br0\">}</span>  <span class=\"co1\">%% blocks</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">foo<span class=\"sy0\">!=</span><span class=\"re1\">'foo</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'Defined'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'Undefined'</span><span class=\"sy0\">,</span> <span class=\"st0\">\".<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'Defined'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'Undefined'</span><span class=\"sy0\">,</span> <span class=\"st0\">\".<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$var</span><span class=\"sy0\">.</span><span class=\"me1\">WHAT</span><span class=\"sy0\">;</span>      <span class=\"co1\"># Any()</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$var</span><span class=\"sy0\">.</span><span class=\"me1\">WHAT</span><span class=\"sy0\">;</span>      <span class=\"co1\"># Int()</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$var</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span><span class=\"sy0\">;</span>   <span class=\"co1\"># True</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> Nil<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$var</span><span class=\"sy0\">.</span><span class=\"me1\">WHAT</span><span class=\"sy0\">;</span>      <span class=\"co1\"># Any()</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$var</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span>    <span class=\"co1\"># False</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">type nullableString(object o)<br/>    return string(o) or o=NULL<br/>end type<br/>nullableString s<br/>s = \"hello\"<br/>s = NULL<br/>--s = 1 -- error<br/>--s = {1,2,3} -- error<br/>\u00a0<br/>type nullableSequence(object o)<br/>    return sequence(o) or o=NULL<br/>end type<br/>nullableSequence q<br/>q = {1,2,3}<br/>q = \"string\"    -- fine (strings are a subset of sequences)<br/>q = NULL<br/>--q = 1         -- error</pre>"}, {"lang": "PHL", "loc": 1, "block": "<pre class=\"text highlighted_source\">if (obj == null) printf(\"obj is null!\\n\");</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/is_null\"><span class=\"kw3\">is_null</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\$</span>x is null<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(if (not MyNewVariable)<br/>   (handle value-is-NIL) )</pre>"}, {"lang": "Pike", "loc": 12, "block": "<pre class=\"pike highlighted_source\">&gt; mapping bar<span class=\"sy0\">;</span><br/>&gt; bar<span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>&gt; bar <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"st0\">\"foo\"</span>:<span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; bar<span class=\"sy0\">-</span>&gt;foo<span class=\"sy0\">;</span><br/>Result <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>&gt; zero_type<span class=\"br0\">(</span>bar<span class=\"sy0\">-</span>&gt;foo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>&gt; bar<span class=\"sy0\">-</span>&gt;baz<span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>&gt; zero_type<span class=\"br0\">(</span>bar<span class=\"sy0\">-</span>&gt;baz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span></pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare x fixed decimal (10);<br/>...<br/>if ^valid(x) then signal error;<br/>\u00a0<br/>declare y picture 'A9XAAA9';<br/>...<br/>if ^valid(y) then signal error;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$null</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$object</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ...<br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> variable <span class=\"sy0\">=</span> #Null<br/>  <span class=\"kw1\">Debug</span> <span class=\"st0\">\"Variable has no value\"</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\">x <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/><span class=\"kw1\">if</span> x <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"x is None\"</span><br/><span class=\"kw1\">else</span>:<br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"x is not None\"</span></pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">is.null(NULL)       # TRUE<br/>is.null(123)        # FALSE<br/>is.null(NA)         # FALSE<br/>123==NULL           # Empty logical value, with a warning<br/>foo &lt;- function(){} # function that does nothing<br/>foo()               # returns NULL</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-&gt; null<br/>'()<br/>-&gt; (null? null)<br/>#t<br/>-&gt; (null? 3)<br/>#f<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 9, "block": "<pre class=\"text highlighted_source\">NULL as $v<br/>$v NULL =     # TRUE<br/>$v NULL\u00a0!=    # FALSE<br/>\u00a0<br/>1 NULL =      # FALSE<br/>1.1 NULL =    # FALSE<br/>\u00a0<br/>NULL as $v2<br/>$v2 $v =      # TRUE</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\">x: none<br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"x\"</span>  <span class=\"kw2\">either</span> <span class=\"kw3\">none?</span> x <span class=\"br0\">[</span><span class=\"st0\">\"is\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"isn't\"</span><span class=\"br0\">]</span>  <span class=\"st0\">\"none.\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates null strings, and also undefined values. */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'ABC'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'variable ABC is defined, value='</span>abc<span class=\"st0\">\"&lt;&lt;&lt;\"</span><br/>                        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"variable ABC isn't defined.\"</span><br/>xyz=<span class=\"nu0\">47</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'XYZ'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'variable XYZ is defined, value='</span>xyz<span class=\"st0\">\"&lt;&lt;&lt;\"</span><br/>                        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"variable XYZ isn't defined.\"</span><br/><span class=\"kw1\">drop</span> xyz<br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'XYZ'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'variable XYZ is defined, value='</span>xyz<span class=\"st0\">\"&lt;&lt;&lt;\"</span><br/>                        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"variable XYZ isn't defined.\"</span><br/>cat=<span class=\"st0\">''</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'CAT'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'variable CAT is defined, value='</span>cat<span class=\"st0\">\"&lt;&lt;&lt;\"</span><br/>                        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"variable CAT isn't defined.\"</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see isnull(5) + nl +        # print 0<br/>isnull(\"hello\") + nl +      # print 0<br/>isnull([1,3,5]) + nl +      # print 0<br/>isnull(\"\") + nl +           # print 1<br/>isnull(\"NULL\")              # print 1 <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> <span class=\"st0\">\"@object is nil\"</span> <span class=\"kw1\">if</span> <span class=\"re1\">@object</span>.<span class=\"kw2\">nil</span>?\t\t<span class=\"co1\"># instance variable</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"$object is nil\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$object</span>.<span class=\"kw2\">nil</span>?\t\t<span class=\"co1\"># global variable, too</span><br/>\u00a0<br/><span class=\"co1\"># It recognizes as the local variable even if it isn't executed.</span><br/>object = <span class=\"nu0\">1</span>  <span class=\"kw1\">if</span> <span class=\"kw2\">false</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"object is nil\"</span> <span class=\"kw1\">if</span> object.<span class=\"kw2\">nil</span>?<br/>\u00a0<br/><span class=\"co1\"># nil itself is an object:</span><br/><span class=\"kw3\">puts</span> <span class=\"kw2\">nil</span>.<span class=\"kw1\">class</span>  <span class=\"co1\"># =&gt; NilClass</span></pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">// If an option may return null - or nothing - in Rust, it's wrapped<br/>// in an Optional which may return either the type of object specified<br/>// in &lt;&gt; or None. We can check this using .is_some() and .is_none() on<br/>// the Option.<br/>\u00a0<br/>fn check_number(num: &amp;Option&lt;u8&gt;) {<br/>    if num.is_none() {<br/>        println!(\"Number is: None\");<br/>    } else {<br/>        println!(\"Number is: {}\", num.unwrap());<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut possible_number: Option&lt;u8&gt; = None;<br/>    check_number(&amp;possible_number);<br/>\u00a0<br/>    possible_number = Some(31);<br/>    check_number(&amp;possible_number);<br/>}</pre>"}, {"lang": "S-lang", "loc": 5, "block": "<pre class=\"text highlighted_source\">variable foo = NULL;<br/>print(foo);<br/>if (foo == NULL)<br/>   print(typeof(foo));<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>scala<span class=\"sy0\">&gt;</span> Nil<br/>res0<span class=\"sy0\">:</span> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">Nil</span>.<a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> Nil <span class=\"sy0\">==</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>res1<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> Null<br/><span class=\"sy0\">&lt;</span>console<span class=\"sy0\">&gt;:</span><span class=\"nu0\">8</span><span class=\"sy0\">:</span> error<span class=\"sy0\">:</span> not found<span class=\"sy0\">:</span> value Null<br/>              Null<br/>              ^<br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>res3<span class=\"sy0\">:</span> Null <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> None<br/>res4<span class=\"sy0\">:</span> None.<a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> <span class=\"sy0\">=</span> None<br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> Unit<br/>res5<span class=\"sy0\">:</span> Unit.<a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> scala.<span class=\"me1\">Unit</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>a<span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">null?</span> object<span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var undefined;         <span class=\"co1\"># initialized with an implicit nil</span><br/>say undefined==<span class=\"kw2\">nil</span>;    <span class=\"co1\"># true</span><br/>say <span class=\"kw1\">defined</span><span class=\"br0\">(</span><span class=\"kw2\">nil</span><span class=\"br0\">)</span>       <span class=\"co1\"># false</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">Nil isNil = True.</pre>"}, {"lang": "Smalltalk", "loc": 6, "block": "<pre class=\"smalltalk highlighted_source\">object isNil ifTrue: <span class=\"br0\">[</span> <span class=\"coMULTI\">\"true block\"</span> <span class=\"br0\">]</span><br/>             ifFalse: <span class=\"br0\">[</span> <span class=\"coMULTI\">\"false block\"</span> <span class=\"br0\">]</span>.<br/><span class=\"kw1\">nil</span> isNil ifTrue: <span class=\"br0\">[</span> <span class=\"st0\">'true!'</span> displayNl <span class=\"br0\">]</span>. <span class=\"coMULTI\">\"output: true!\"</span><br/>foo isNil ifTrue: <span class=\"br0\">[</span> <span class=\"st0\">'ouch'</span> displayNl <span class=\"br0\">]</span>.<br/><span class=\"re5\">x</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">foo</span> <span class=\"sy0\">==</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span>.<br/><span class=\"re5\">x</span> <span class=\"sy0\">:=</span> <span class=\"re5\">foo</span> isNil</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">datatype 'a option = NONE | SOME of 'a</pre>"}, {"lang": "Swift", "loc": 2, "block": "<pre class=\"text highlighted_source\">var opt\u00a0: Int? = nil // use \"nil\" to represent no value<br/>opt = 5 // or simply assign a value to the optional type</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$value</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> ...</pre>"}, {"lang": "Ursa", "loc": 9, "block": "<pre class=\"text highlighted_source\"># the type at declaration doesn't matter<br/>decl int x<br/>\u00a0<br/>set x null<br/>if (= x null)<br/>    out \"x is null\" endl console<br/>else<br/>    out \"x is not null\" endl console<br/>end if</pre>"}, {"lang": "Visual Basic", "loc": 17, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> c <span class=\"kw4\">As</span> VBA.Collection<br/>\u00a0<br/><span class=\"co1\">' initial state: Nothing<br/></span>Debug.Assert c <span class=\"kw3\">Is</span> <span class=\"kw5\">Nothing</span><br/>\u00a0<br/><span class=\"co1\">' create an instance<br/></span><span class=\"kw4\">Set</span> c = <span class=\"kw2\">New</span> VBA.Collection<br/>Debug.Assert <span class=\"kw3\">Not</span> c <span class=\"kw3\">Is</span> <span class=\"kw5\">Nothing</span><br/>\u00a0<br/><span class=\"co1\">' release the instance<br/></span><span class=\"kw4\">Set</span> c = <span class=\"kw5\">Nothing</span><br/>Debug.Assert c <span class=\"kw3\">Is</span> <span class=\"kw5\">Nothing</span><br/>\u00a0<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"text highlighted_source\">(not nil)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">if(Void == n) ...<br/>return(Void)</pre>"}]}