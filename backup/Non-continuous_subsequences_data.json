{"task": "Non-continuous_subsequences", "blocks": [{"lang": "Ada", "loc": 37, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Non_Continuous <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Sequence <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>   <span class=\"kw3\">procedure</span> Put_NCS<br/>             <span class=\"br0\">(</span>  Tail\u00a0: Sequence;                <span class=\"co1\">-- To generate subsequences of</span><br/>                Head\u00a0: Sequence\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">0</span> =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"co1\">-- Already generated</span><br/>                Contiguous\u00a0: Boolean\u00a0:= True    <span class=\"co1\">-- It is still continuous</span><br/>             <span class=\"br0\">)</span>  <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Contiguous <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Head'Length &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Head'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Head <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> Tail'Length /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>         <span class=\"kw1\">declare</span><br/>            New_Head\u00a0: Sequence <span class=\"br0\">(</span>Head'First..<span class=\"me1\">Head</span>'Last + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">begin</span><br/>            New_Head <span class=\"br0\">(</span>Head'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>\u00a0:= Head;<br/>            <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Tail'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               New_Head <span class=\"br0\">(</span>New_Head'Last<span class=\"br0\">)</span>\u00a0:= Tail <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>               Put_NCS<br/>               <span class=\"br0\">(</span>  Tail =&gt; Tail <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span>..<span class=\"me1\">Tail</span>'Last<span class=\"br0\">)</span>,<br/>                  Head =&gt; New_Head,<br/>                  Contiguous =&gt; Contiguous <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>I = Tail'First <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Head'Length = <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Put_NCS;<br/><span class=\"kw1\">begin</span><br/>   Put_NCS <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;     New_Line;<br/>   Put_NCS <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;   New_Line;<br/>   Put_NCS <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; New_Line;<br/><span class=\"kw1\">end</span> Test_Non_Continuous;</pre>"}, {"lang": "ALGOL 68", "loc": 35, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> test non continuous <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">MODE</span> SEQMODE <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">MODE</span> SEQ <span class=\"sy1\">=</span> <span class=\"br0\">[</span>1<span class=\"sy1\">:</span>0<span class=\"br0\">]</span>SEQMODE<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">MODE</span> YIELDSEQ <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>SEQ<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">PROC</span> gen ncs <span class=\"sy1\">=</span><br/>             <span class=\"br0\">(</span>  SEQ tail<span class=\"sy1\">,</span>       <span class=\"coMULTI\"># To generate subsequences of #</span><br/>                SEQ head<span class=\"sy1\">,</span>       <span class=\"coMULTI\">#           Already generated #</span><br/>                <span class=\"kw3\">BOOL</span> contiguous<span class=\"sy1\">,</span><span class=\"coMULTI\">#      It is still continuous #</span><br/>                YIELDSEQ yield<br/>             <span class=\"br0\">)</span>  <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> contiguous <span class=\"kw19\">ANDTH</span> <span class=\"kw8\">UPB</span> head <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">THEN</span><br/>         yield <span class=\"br0\">(</span>head<span class=\"br0\">)</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> tail <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">THEN</span> <br/>            <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> head<span class=\"sy1\">+</span>1<span class=\"br0\">]</span>SEQMODE new head<span class=\"sy1\">;</span><br/>            new head <span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> head<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> head<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> tail <span class=\"kw2\">DO</span><br/>               new head <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> new head<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> tail <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               gen ncs<br/>               <span class=\"br0\">(</span>  tail<span class=\"br0\">[</span>i <span class=\"sy1\">+</span> 1<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> tail<span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>                  new head<span class=\"sy1\">,</span><br/>                  contiguous <span class=\"kw19\">ANDTH</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"kw8\">LWB</span> tail <span class=\"kw19\">OREL</span> <span class=\"kw8\">UPB</span> head <span class=\"sy1\">=</span> 0<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                  yield<br/>               <span class=\"br0\">)</span><br/>            <span class=\"kw2\">OD</span><br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">END</span> <span class=\"coMULTI\"># put ncs #</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\"># FOR SEQ seq IN #</span> gen ncs<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"e\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"i\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"o\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"u\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO ( #</span><br/> <span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>SEQ seq<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>seq<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> test non continuous</pre>"}, {"lang": "AutoHotkey", "loc": 20, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% noncontinuous<span class=\"br0\">(</span><span class=\"st0\">\"a,b,c,d,e\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% noncontinuous<span class=\"br0\">(</span><span class=\"st0\">\"1,2,3,4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>noncontinuous<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> delimiter<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">stringsplit</span></a><span class=\"sy0\">,</span> seq<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> <span class=\"re0\">%delimiter%</span><br/>n <span class=\"sy0\">:=</span> seq0                                            <span class=\"co1\">; sequence length</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>                                  <span class=\"co1\">; try all 0-1 candidate sequences</span><br/>   <span class=\"kw1\">If</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">:=</span>ToBin<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"^0*1*0*$\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">; drop continuous subsequences</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> b<br/>         t <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>\u00a0? seq<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\" \"</span>\u00a0: <span class=\"st0\">\"\"</span>         <span class=\"co1\">; position -&gt; number</span><br/>\t\t t <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span>                                   <span class=\"co1\">; new sequences in new lines</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> t<br/><span class=\"br0\">}</span><br/>\u00a0<br/>ToBin<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>W<span class=\"sy0\">=</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">; LS W-bits of Binary representation of n</span><br/>   <span class=\"kw1\">Return</span> W<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0? n<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span>\u00a0: ToBin<span class=\"br0\">(</span>n<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>W<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> n<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">      DIM list1$(3)<br/>      list1$() = \"1\", \"2\", \"3\", \"4\"<br/>      PRINT \"For [1, 2, 3, 4] non-continuous subsequences are:\"<br/>      PROCnon_continuous_subsequences(list1$())<br/>      DIM list2$(4)<br/>      list2$() = \"1\", \"2\", \"3\", \"4\", \"5\"<br/>      PRINT \"For [1, 2, 3, 4, 5] non-continuous subsequences are:\"<br/>      PROCnon_continuous_subsequences(list2$())<br/>      END<br/>\u00a0<br/>      DEF PROCnon_continuous_subsequences(l$())<br/>      LOCAL i%, j%, g%, n%, r%, s%, w%, a$, b$<br/>      n% = DIM(l$(),1)<br/>      FOR s% = 0 TO n%-2<br/>        FOR g% = s%+1 TO n%-1<br/>          a$ = \"[\"<br/>          FOR i% = s% TO g%-1<br/>            a$ += l$(i%) + \", \"<br/>          NEXT<br/>          FOR w% = 1 TO n%-g%<br/>            r% = n%+1-g%-w%<br/>            FOR i% = 1 TO 2^r%-1 STEP 2<br/>              b$ = a$<br/>              FOR j% = 0 TO r%-1<br/>                IF i% AND 2^j% b$ += l$(g%+w%+j%) + \", \"<br/>              NEXT<br/>              PRINT LEFT$(LEFT$(b$)) + \"]\"<br/>            NEXT i%<br/>          NEXT w%<br/>        NEXT g%<br/>      NEXT s%<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 21, "block": "<pre class=\"text highlighted_source\">( ( noncontinuous<br/>  =   sub<br/>    .     ( sub<br/>          =   su a nc<br/>            .  \u00a0!arg:(?su.?nc)<br/>              &amp;  \u00a0!su<br/>               \u00a0:  \u00a0%<br/>                   \u00a0%?a<br/>                    (\u00a0%:[%(sub$(!sjt.!nc\u00a0!a))<br/>                    |  \u00a0?<br/>                      &amp;\u00a0!nc:~<br/>                      &amp; out$(!nc\u00a0!a)<br/>                      &amp; ~<br/>                    )<br/>          )<br/>        &amp; sub$(dummy\u00a0!arg.)<br/>      | <br/>  )<br/>&amp; noncontinuous$(e r n i t)<br/>);<br/>\u00a0</pre>"}, {"lang": "C", "loc": 20, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// consecutive 1s</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> n<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> j<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 17, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/*<br/> * Nigel Galloway, July 19th., 2017 - Yes well is this any better?<br/> */</span><br/><span class=\"kw2\">class</span> N<span class=\"br0\">{</span><br/>  uint n,i,g,e,l<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  N<span class=\"br0\">(</span>uint n<span class=\"br0\">)</span><span class=\"sy4\">:</span> n<span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,i<span class=\"br0\">{</span><span class=\"br0\">}</span>,g<span class=\"br0\">{</span><span class=\"br0\">}</span>,e<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,l<span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">bool</span> hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    g<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">&lt;&lt;</span>n<span class=\"br0\">)</span><span class=\"sy2\">+</span>e<span class=\"sy4\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy1\">=</span>l<span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>n<span class=\"sy4\">;</span><span class=\"sy2\">++</span>i<span class=\"br0\">)</span> g<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">&lt;&lt;</span>i<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"sy1\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>             <span class=\"br0\">{</span>l<span class=\"sy1\">=</span><span class=\"sy2\">--</span>n<span class=\"sy4\">;</span> e<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"sy1\">&lt;</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>l<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy2\">++</span>e<span class=\"sy4\">;</span>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>                           e<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">--</span>l<span class=\"sy4\">;</span>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>l<span class=\"sy1\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  uint next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> g<span class=\"sy4\">;</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>combinatorics <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">(</span>subsets<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn of-min-<span class=\"kw1\">length</span> <span class=\"br0\">[</span>min-<span class=\"kw1\">length</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>count s<span class=\"br0\">)</span> min-<span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn runs <span class=\"br0\">[</span>c <span class=\"kw1\">l</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>map <span class=\"br0\">(</span>partial take <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>take-while not-empty <span class=\"br0\">(</span>iterate rest c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn is-subseq? <span class=\"br0\">[</span>c sub<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>some <span class=\"kw1\">identity</span> <span class=\"br0\">(</span>map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>runs c <span class=\"br0\">(</span>count sub<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>repeat sub<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn non-continuous-subsequences <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">complement</span> <span class=\"br0\">(</span>partial is-subseq? s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>subsets s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>filter <span class=\"br0\">(</span>of-min-<span class=\"kw1\">length</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>non-continuous-subsequences <span class=\"br0\">[</span><span class=\"sy0\">:</span><span class=\"me1\">a</span> <span class=\"sy0\">:</span><span class=\"me1\">b</span> <span class=\"sy0\">:</span><span class=\"me1\">c</span> <span class=\"sy0\">:</span><span class=\"me1\">d</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 59, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>is_contigous_binary = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># return true if binary representation of n is</span><br/>  <span class=\"co1\"># of the form 1+0+</span><br/>  <span class=\"co1\"># examples:</span><br/>  <span class=\"co1\">#     0 true</span><br/>  <span class=\"co1\">#     1 true</span><br/>  <span class=\"co1\">#   100 true</span><br/>  <span class=\"co1\">#   110 true</span><br/>  <span class=\"co1\">#  1001 false</span><br/>  <span class=\"co1\">#  1010 false</span><br/>\u00a0<br/>  <span class=\"co1\"># special case zero, or you'll get an infinite loop later</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"co1\"># first remove 0s from end</span><br/>  <span class=\"kw1\">while</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>    n = n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"co1\"># next, take advantage of the fact that a continuous</span><br/>  <span class=\"co1\"># run of 1s would be of the form 2^n - 1</span><br/>  is_power_of_two<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>is_power_of_two = <span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">while</span> m <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>    m = m <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  m == <span class=\"nu0\">1</span><br/>\u00a0<br/>seq_from_bitmap = <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># grabs elements from array according to a bitmap</span><br/>  <span class=\"co1\"># e.g. if n == 13 (1101), and arr = ['a', 'b', 'c', 'd'],</span><br/>  <span class=\"co1\"># then return ['a', 'c', 'd'] (flipping bits to 1011, so</span><br/>  <span class=\"co1\"># that least significant bit comes first)</span><br/>  i = <span class=\"nu0\">0</span><br/>  new_arr = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">1</span><br/>      new_arr.<span class=\"me1\">push</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      n <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">/</span>= <span class=\"nu0\">2</span><br/>    i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  new_arr<br/>\u00a0<br/>non_contig_subsequences = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Return all subsqeuences from an array that have a \"hole\" in</span><br/>  <span class=\"co1\"># them.  The order of the subsequences is not specified here.</span><br/>\u00a0<br/>  <span class=\"co1\"># This algorithm uses binary counting, so it is limited to</span><br/>  <span class=\"co1\"># small lists, but large lists would be unwieldy regardless.</span><br/>  bitmasks = <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> arr.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>seq_from_bitmap arr<span class=\"sy0\">,</span> n <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> bitmasks <span class=\"kw1\">when</span> <span class=\"sy0\">!</span>is_contigous_binary n<span class=\"br0\">)</span><br/>\u00a0<br/>arr = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>console.<span class=\"me1\">log</span> non_contig_subsequences arr<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>  arr = <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>  num_solutions = non_contig_subsequences<span class=\"br0\">(</span>arr<span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"for n=#{n} there are #{num_solutions} solutions\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> all-subsequences <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>subsequences <span class=\"br0\">(</span>tail <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>acc '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"st0\">\"Return a list of the subsequence designators of the<br/>              subsequences of tail. Each subsequence designator is a<br/>              list of tails of tail, the subsequence being the first<br/>              element of each tail.\"</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp tail<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">list</span>* <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> acc<span class=\"br0\">)</span> result<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>subsequences <span class=\"br0\">(</span>rest tail<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span>* tail acc<span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>subsequences <span class=\"br0\">(</span>rest tail<span class=\"br0\">)</span> acc<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>continuous-p <span class=\"br0\">(</span>subsequence-d<span class=\"br0\">)</span><br/>             <span class=\"st0\">\"True if the designated subsequence is continuous.\"</span><br/>             <span class=\"br0\">(</span>loop for i in subsequence-d<br/>                   for j on <span class=\"br0\">(</span>first subsequence-d<span class=\"br0\">)</span><br/>                   always <span class=\"br0\">(</span><span class=\"kw1\">eq</span> i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>designated-sequence <span class=\"br0\">(</span>subsequence-d<span class=\"br0\">)</span><br/>             <span class=\"st0\">\"Destructively transforms a subsequence designator into<br/>              the designated subsequence.\"</span><br/>             <span class=\"br0\">(</span>map-into subsequence-d 'first subsequence-d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nc-subsequences <span class=\"br0\">(</span>delete-<span class=\"kw1\">if</span> #'continuous-p <span class=\"br0\">(</span>subsequences <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>map-into nc-subsequences #'designated-sequence nc-subsequences<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\">T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ncsub<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> seq<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>seq.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> aux<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>ys<span class=\"sy0\">;</span> ncsub<span class=\"br0\">(</span>seq<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> s <span class=\"sy0\">+</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            aux <span class=\"sy0\">~=</span> seq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> ys<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> aux <span class=\"sy0\">~</span> ncsub<span class=\"br0\">(</span>seq<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> s <span class=\"sy0\">+</span> s <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>s <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">ncsub</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">ncsub</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> nc<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">ncsub</span><span class=\"br0\">)</span><br/>        nc.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  defp masks(n) do<br/>    maxmask = trunc(:math.pow(2, n)) - 1<br/>    Enum.map(3..maxmask, &amp;Integer.to_string(&amp;1, 2))<br/>    |&gt; Enum.filter_map(&amp;contains_noncont(&amp;1), &amp;String.rjust(&amp;1, n,\u00a0?0)) # padding<br/>  end<br/>\u00a0<br/>  defp contains_noncont(n) do<br/>    Regex.match?(~r/10+1/, n)<br/>  end<br/>\u00a0<br/>  defp apply_mask_to_list(mask, list) do<br/>    Enum.zip(to_char_list(mask), list)<br/>    |&gt; Enum.filter_map(fn {include, _} -&gt; include &gt;\u00a0?0 end, fn {_, value} -&gt; value end)<br/>  end<br/>\u00a0<br/>  def ncs(list) do<br/>    Enum.map(masks(length(list)), fn mask -&gt; apply_mask_to_list(mask, list) end)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.ncs([1,2,3])<br/>IO.inspect RC.ncs([1,2,3,4])<br/>IO.inspect RC.ncs('abcd')</pre>"}, {"lang": "Erlang", "loc": 24, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>rosetta<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>ncs<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">masks</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">MaxMask</span> <span class=\"sy3\">=</span> <span class=\"kw3\">trunc</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Total</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>                <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">MaxMask</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Filtered</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">contains_noncont</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">right</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re6\">$0</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Filtered</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">% padding</span><br/>\u00a0<br/><span class=\"re3\">contains_noncont</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"st0\">\"10+1\"</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        <span class=\"br0\">{</span>match<span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/>        nomatch <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">apply</span>_<span class=\"re3\">mask_to_list</span><span class=\"br0\">(</span><span class=\"re5\">Mask</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Zipped</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Mask</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Filtered</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">Include</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Include</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">48</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Zipped</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Value</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Filtered</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ncs</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Mask</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">apply</span>_<span class=\"re3\">mask_to_list</span><span class=\"br0\">(</span><span class=\"re5\">Mask</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>                <span class=\"re3\">masks</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>  A function to generate only the non-continuous subsequences.<br/>  Nigel Galloway July 20th., 2017<br/>*)</span><br/><span class=\"kw1\">let</span> N n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span>     fn n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">&lt;&lt;&lt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span>g<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fg n <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><span class=\"kw1\">if</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">yield!</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;&lt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">|&gt;</span>fn n<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fg <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span>fn n<span class=\"br0\">}</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> fg <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span> <span class=\"co1\">// state:</span><br/>    m   <span class=\"sy2\">=</span> iota <span class=\"co1\">// missing:  all elements missing so far</span><br/>    c          <span class=\"co1\">// continuous:  all elements included so far are continuous</span><br/>    cm         <span class=\"co1\">// one or more continuous followed by one or more missing</span><br/>    cmc        <span class=\"co1\">// non-continuous subsequence</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ncs<span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">3</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> append<span class=\"sy1\">(</span>n2<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> m<span class=\"sy1\">),</span> n2<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]},</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> c<span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> skip <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>m<span class=\"sy1\">,</span> cm<span class=\"sy1\">,</span> cm<span class=\"sy1\">,</span> cmc<span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> incl <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>c<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> cmc<span class=\"sy1\">,</span> cmc<span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> n2<span class=\"sy1\">(</span>ss<span class=\"sy1\">,</span> tail <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> seq <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>tail<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> seq <span class=\"sy2\">!=</span> cmc <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>ss<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> append<span class=\"sy1\">(</span>n2<span class=\"sy1\">(</span>append<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{},</span> ss<span class=\"sy4\">...</span><span class=\"sy1\">),</span> tail<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> skip<span class=\"sy1\">[</span>seq<span class=\"sy1\">]),</span><br/>        n2<span class=\"sy1\">(</span>append<span class=\"sy1\">(</span>ss<span class=\"sy1\">,</span> tail<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]),</span> tail<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> incl<span class=\"sy1\">[</span>seq<span class=\"sy1\">])</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    ss <span class=\"sy2\">:=</span> ncs<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">})</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>ss<span class=\"sy1\">),</span> <span class=\"st0\">\"non-continuous subsequences:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ss <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">action p x <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> p x <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> x <span class=\"kw1\">else</span> x<br/>\u00a0<br/>fenceM p q s <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> guard <span class=\"br0\">(</span>q s<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>fenceM p q s <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"br0\">(</span>f<span class=\"sy0\">,</span>g<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> p <br/>  ys <span class=\"sy0\">&lt;-</span> fenceM p q <span class=\"br0\">(</span>g s<span class=\"br0\">)</span> xs<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> f x ys<br/>\u00a0<br/>ncsubseq <span class=\"sy0\">=</span> fenceM <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"sy0\">,</span> action <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a><span class=\"sy0\">,</span> action <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">allmasks=: <span class=\"nu0\">2</span> #:@<a class=\"__cf_email__\" data-cfemail=\"aac384ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^ #<br/>firstend=:<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> i.&amp;<span class=\"nu0\">1</span>@E.\"<span class=\"nu0\">1</span> ]<br/>laststart=: <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> {:@<a class=\"__cf_email__\" data-cfemail=\"a0e98ee0e58e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"<span class=\"nu0\">1</span> ]<br/>noncont=: &lt;@#~ <span class=\"sy0\">(</span>#~ firstend &lt; laststart<span class=\"sy0\">)</span>@allmasks</pre>"}, {"lang": "Java", "loc": 16, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> NonContinuousSubsequences <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        seqR<span class=\"br0\">(</span><span class=\"st0\">\"1234\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> seqR<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> c, <span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> added<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> added<span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            seqR<span class=\"br0\">(</span>s, c <span class=\"sy0\">+</span> s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, added <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            seqR<span class=\"br0\">(</span>s, c <span class=\"sy0\">+</span> <span class=\"st0\">' '</span>, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, added<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> non_continuous_subsequences<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> non_continuous <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> is_array_continuous<span class=\"br0\">(</span>ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            non_continuous.<span class=\"me1\">push</span><span class=\"br0\">(</span>ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> non_continuous<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> is_array_continuous<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> ary<span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>load<span class=\"br0\">(</span><span class=\"st0\">'json2.js'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* http://www.json.org/js.html */</span><br/>\u00a0<br/>print<span class=\"br0\">(</span>JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span> non_continuous_subsequences<span class=\"br0\">(</span> powerset<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># Generate a stream of subsets of the input array<br/>def subsets:<br/>  if length == 0 then []<br/>  else .[0] as $first<br/>    | (.[1:] | subsets) <br/>    | ., ([$first] + .)<br/>  end\u00a0;<br/>\u00a0<br/># Generate a stream of non-continuous indices in the range 0 &lt;= i &lt; .<br/>def non_continuous_indices:<br/>  [range(0;.)] | subsets<br/>  | select(length &gt; 1 and length\u00a0!= 1 + .[length-1] - .[0])\u00a0;<br/>\u00a0<br/>def non_continuous_subsequences:<br/>  (length | non_continuous_indices) as $ix<br/>  | [.[ $ix[] ]]\u00a0;</pre>"}, {"lang": "Julia", "loc": 56, "block": "<pre class=\"text highlighted_source\">iscontseq(n::Integer) = count_zeros(n) == leading_zeros(n) + trailing_zeros(n)<br/>iscontseq(n::BigInt)  =\u00a0!ismatch(r\"0\", rstrip(bin(n), '0'))<br/>\u00a0<br/>function makeint2seq(n::Integer)<br/>    const idex = collect(1:n)<br/>    function int2seq(m::Integer)<br/>        d = digits(m, 2, n)<br/>        idex[d .== 1]<br/>    end<br/>    return int2seq<br/>end<br/>\u00a0<br/>struct NCSubSeq{T&lt;:Integer}<br/>    n::T<br/>end<br/>\u00a0<br/>mutable struct NCSubState{T&lt;:Integer}<br/>    m::T<br/>    m2s::Function<br/>end<br/>\u00a0<br/>Base.iteratorsize(::NCSubSeq) = Base.HasLength()<br/>Base.length(a::NCSubSeq) = 2 ^ a.n - a.n * (a.n + 1) \u00f7 2 - 1<br/>\u00a0<br/>Base.start(a::NCSubSeq) = NCSubState(5, makeint2seq(a.n))<br/>Base.done(a::NCSubSeq, as::NCSubState) = 2 ^ a.n - 3 &lt; as.m<br/>function Base.next(a::NCSubSeq, as::NCSubState)<br/>    s = as.m2s(as.m)<br/>    as.m += 1<br/>    while iscontseq(as.m)<br/>        as.m += 1<br/>    end<br/>    return (s, as)<br/>end<br/>\u00a0<br/>n = 4<br/>println(\"Testing NCSubSeq for \", n, \" items:\\n \", join(NCSubSeq(n), \" \"))<br/>\u00a0<br/>s = \"Rosetta\"<br/>cs = split(s, \"\")<br/>m = 10<br/>n = length(NCSubSeq(length(s))) - m<br/>println(\"\\nThe first and last \", m, \" NC sub-sequences of \\\"\", s, \"\\\":\")<br/>for (i, a) in enumerate(NCSubSeq(length(cs)))<br/>    i &lt;= m || n &lt; i || continue<br/>    println(@sprintf \"%6d\u00a0%s\" i join(cs[a], \"\"))<br/>    i == m || continue<br/>    println(\"    .. ......\")<br/>end<br/>\u00a0<br/>using IterTools.chain<br/>\u00a0<br/>println(\"\\nThe first and last \", m, \" NC sub-sequences of \\\"\", s, \"\\\"\")<br/>for x in IterTools.chain(1:10, 20:10:40, big.(50:50:200))<br/>    @printf \"%7d \u2192\u00a0%d\\n\" x length(NCSubSeq(x))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> ncs<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    fun generate<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Int, k<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">[</span>m - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + m - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m<span class=\"br0\">)</span>  print<span class=\"br0\">(</span><span class=\"st0\">\"${a[c[i]]} \"</span><span class=\"br0\">)</span>                <br/>                println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || j <span class=\"sy0\">&gt;</span> c<span class=\"br0\">[</span>k - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    c<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<br/>                    generate<span class=\"br0\">(</span>m, k + <span class=\"nu0\">1</span>, c<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in <span class=\"nu0\">2</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <br/>        generate<span class=\"br0\">(</span>m, <span class=\"nu0\">0</span>, c<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>    <br/><span class=\"br0\">}</span>  <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    ncs<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ca <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span>, <span class=\"st0\">'e'</span><span class=\"br0\">)</span><br/>    ncs<span class=\"br0\">(</span>ca<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">GoodBad[i_List]:=Not[MatchQ[Differences[i],{1..}|{}]]<br/>n=5<br/>Select[Subsets[Range[n]],GoodBad]</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import sequtils<br/>\u00a0<br/>proc ncsub[T](se: seq[T], s = 0): seq[seq[T]] =<br/>  result = @[]<br/>  if se.len &gt; 0:<br/>    let<br/>      x = se[0..0]<br/>      xs = se[1 .. -1]<br/>      p2 = s mod 2<br/>      p1 = (s + 1) mod 2<br/>    for ys in ncsub(xs, s + p1):<br/>      result.add(x &amp; ys)<br/>    result.add(ncsub(xs, s + p2))<br/>  elif s &gt;= 3:<br/>    result.add(@[])<br/>\u00a0<br/>echo \"ncsub(\", toSeq 1.. 3, \") = \", ncsub(toSeq 1..3)<br/>echo \"ncsub(\", toSeq 1.. 4, \") = \", ncsub(toSeq 1..4)<br/>echo \"ncsub(\", toSeq 1.. 5, \") = \", ncsub(toSeq 1..5)</pre>"}, {"lang": "OCaml", "loc": 22, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fence s <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> s <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"sy0\">|</span> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> s <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map<br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> ys <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">::</span> ys<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>fence <span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span><br/>        @<br/>          fence s xs<br/>      <span class=\"kw1\">else</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map<br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> ys <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">::</span> ys<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>fence s xs<span class=\"br0\">)</span><br/>        @<br/>          fence <span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<br/>\u00a0<br/><span class=\"kw1\">let</span> ncsubseq <span class=\"sy0\">=</span> fence <span class=\"nu0\">0</span></pre>"}, {"lang": "Oz", "loc": 25, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NCSubseq</span> SeqList<span class=\"br0\">}</span><br/>     Seq = <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>value<span class=\"sy0\">.</span>make SeqList<span class=\"br0\">}</span><br/>     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Script</span> Result<span class=\"br0\">}</span><br/>        <span class=\"co1\">%% the result is a subset of Seq</span><br/>        <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>subset Result Seq<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">%% at least one element of Seq is missing</span><br/>        <span class=\"kw1\">local</span> Gap <span class=\"kw1\">in</span><br/>           <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>include Gap Seq<span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>exclude Gap Result<span class=\"br0\">}</span><br/>           <span class=\"co1\">%% and this element is between the smallest</span><br/>           <span class=\"co1\">%% and the largest elements of the subsequence</span><br/>           Gap <span class=\"sy0\">&gt;:</span> <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>int<span class=\"sy0\">.</span>min Result<span class=\"br0\">}</span><br/>           Gap <span class=\"sy0\">&lt;:</span> <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>int<span class=\"sy0\">.</span>max Result<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%% enumerate all such sets</span><br/>        <span class=\"br0\">{</span>FS<span class=\"sy0\">.</span>distribute naive <span class=\"br0\">[</span>Result<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Map <span class=\"br0\">{</span>SearchAll Script<span class=\"br0\">}</span> FS<span class=\"sy0\">.</span>reflect<span class=\"sy0\">.</span>lowerBoundList<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>NCSubseq <span class=\"br0\">[</span>1 2 3 4<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\">noncontig<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">&gt;&gt;=</span><span class=\"kw1\">valuation</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>n<span class=\"sy0\">++;</span>n<span class=\"sy0\">&gt;&gt;=</span><span class=\"kw1\">valuation</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>n<span class=\"sy0\">&gt;</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>nonContigSubseq<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>noncontig<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>nonContigSubseq<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>nonContigSubseq<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"d\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"e\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"sy0\">,</span> <span class=\"re0\">@current</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> non_continuous <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$has_gap</span><span class=\"sy0\">,</span> <span class=\"re0\">$found</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span> <span class=\"sy0\">..</span> <span class=\"re0\">$max</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@current</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\"># print \"@current\\n\" if $has_gap; # uncomment for huge output</span><br/>                <span class=\"re0\">$found</span> <span class=\"sy0\">++</span> <span class=\"kw1\">if</span> <span class=\"re0\">$has_gap</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$found</span> <span class=\"sy0\">+=</span> non_continuous<span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$has_gap</span><span class=\"br0\">)</span>   <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>                <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@current</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$has_gap</span> <span class=\"sy0\">=</span> <span class=\"re0\">@current</span><span class=\"sy0\">;</span>   <span class=\"co1\"># don't set gap flag if it's empty still</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$found</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span>      <span class=\"co1\"># 1048365 sequences, 10 seconds-ish</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"found \"</span><span class=\"sy0\">,</span> non_continuous<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" sequences<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> non_continuous_subsequences <span class=\"br0\">(</span> <span class=\"sy0\">*</span><span class=\"re0\">@list</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">@list</span><span class=\"sy0\">.</span><span class=\"me1\">combinations</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!=</span> <span class=\"kw3\">all</span><span class=\"br0\">(</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^..</span> <span class=\"sy0\">.</span><span class=\"kw3\">end</span><span class=\"br0\">]</span> Z<span class=\"sy0\">-</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"sy0\">.</span><span class=\"kw3\">end</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> non_continuous_subsequences<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span> <span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">gist</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> non_continuous_subsequences<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span> <span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">gist</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> non_continuous_subsequences<span class=\"br0\">(</span>   <span class=\"sy0\">^</span><span class=\"nu0\">4</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>a b c d<span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">gist</span><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">bool countonly = false<br/>integer count = 0<br/>\u00a0<br/>procedure ncs(sequence rest, integer ri=0, sequence taken={}, bool contig=false, bool gap=false)<br/>    if ri&gt;=length(rest) then<br/>        if contig then<br/>            if countonly then<br/>                count += 1<br/>            else<br/>               \u00a0?taken<br/>            end if<br/>        end if<br/>    else<br/>        ri += 1<br/>        ncs(rest,ri,taken&amp;rest[ri],gap,gap)<br/>        ncs(rest,ri,taken,contig,length(taken)!=0)<br/>    end if<br/>end procedure<br/>\u00a0<br/>ncs({1,2,3})<br/>?\"===\"<br/>ncs({1,2,3,4})<br/>?\"===\"<br/>countonly = true<br/>atom t0 = time()<br/>sequence s = {}<br/>for i=1 to 20 do<br/>    count = 0<br/>    ncs(tagset(i))<br/>    s = append(s,count)<br/>end for<br/>?time()-t0<br/>?s</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(de ncsubseq (Lst)<br/>   (let S 0<br/>      (recur (S Lst)<br/>         (ifn Lst<br/>            (and (&gt;= S 3) '(NIL))<br/>            (let (X (car Lst)  XS (cdr Lst))<br/>               (ifn (bit? 1 S)  # even<br/>                  (conc<br/>                     (mapcar '((YS) (cons X YS))<br/>                        (recurse (inc S) XS) )<br/>                     (recurse S XS) )<br/>                  (conc<br/>                     (mapcar '((YS) (cons X YS))<br/>                        (recurse S XS) )<br/>                     (recurse (inc S) XS) ) ) ) ) ) ) )</pre>"}, {"lang": "Pop11", "loc": 24, "block": "<pre class=\"text highlighted_source\">define ncsubseq(l);<br/>    lvars acc = [], gap_started = false, is_continuous = true;<br/>    define do_it(l1, l2);<br/>        dlocal gap_started;<br/>        lvars el, save_is_continuous = is_continuous;<br/>        if l2 = [] then<br/>            if not(is_continuous) then<br/>                cons(l1, acc) -&gt; acc;<br/>            endif;<br/>        else<br/>            front(l2) -&gt; el;<br/>            back(l2) -&gt; l2;<br/>            not(gap_started) and is_continuous -&gt; is_continuous;<br/>            do_it(cons(el, l1), l2);<br/>            save_is_continuous -&gt; is_continuous;<br/>            not(l1 = []) or gap_started -&gt; gap_started;<br/>            do_it(l1, l2);<br/>        endif;<br/>    enddefine;<br/>    do_it([], rev(l));<br/>    acc;<br/>enddefine;<br/>\u00a0<br/>ncsubseq([1 2 3 4 5]) =&gt;</pre>"}, {"lang": "PowerShell", "loc": 69, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">Function</span> SubSequence <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span> <span class=\"re0\">$S</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span> <span class=\"re0\">$all</span><span class=\"sy0\">=</span><span class=\"re0\">$false</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"re0\">$sc</span> <span class=\"sy0\">=</span> <span class=\"re0\">$S</span>.count<br/>   <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$sc</span> <span class=\"kw4\">-gt</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span>Int32<span class=\"br0\">]</span> <span class=\"re0\">$all</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">[</span>void<span class=\"br0\">]</span> <span class=\"re0\">$sc</span><span class=\"sy0\">--</span><br/>      <span class=\"nu0\">0</span>..<span class=\"re0\">$sc</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$gap</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>         <span class=\"st0\">\"$( $S[ $_ ] )\"</span><br/>         <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$gap</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$sc</span> <span class=\"br0\">)</span><br/>         <span class=\"br0\">{</span><br/>            SubSequence <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$gap</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>..<span class=\"re0\">$sc</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-ne</span> <span class=\"re0\">$gap</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$gap</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw4\">-or</span> <span class=\"re0\">$all</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>               <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span>::Join<span class=\"br0\">(</span> <span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span>.Split<span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>                  <span class=\"re0\">$lt</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>               <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                  <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$lt</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-gt</span> <span class=\"re0\">$gap</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                  <span class=\"br0\">{</span><br/>                     <span class=\"re0\">$S</span><span class=\"br0\">[</span> <span class=\"re0\">$gap</span> <span class=\"br0\">]</span><br/>                     <span class=\"re0\">$lt</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>                  <span class=\"br0\">}</span><br/>                  <span class=\"re0\">$S</span><span class=\"br0\">[</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">]</span><br/>               <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                  <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$lt</span> <span class=\"br0\">)</span><br/>                  <span class=\"br0\">{</span><br/>                     <span class=\"re0\">$S</span><span class=\"br0\">[</span> <span class=\"re0\">$gap</span> <span class=\"br0\">]</span><br/>                  <span class=\"br0\">}</span><br/>               <span class=\"br0\">}</span><br/>               <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"co1\">#[String]::Join( ',', $S)</span><br/>   <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span> <br/>      <span class=\"re0\">$S</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span> <br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">Function</span> NonContinuous<span class=\"sy0\">-</span>SubSequence <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span> <span class=\"re0\">$S</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"re0\">$sc</span> <span class=\"sy0\">=</span> <span class=\"re0\">$S</span>.count<br/>   <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$sc</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span>::Join<span class=\"br0\">(</span> <span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"re0\">$S</span><span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span> <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span> <span class=\"re0\">$sc</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">[</span>void<span class=\"br0\">]</span> <span class=\"re0\">$sc</span><span class=\"sy0\">--</span><br/>      <span class=\"re0\">$gaps</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"re0\">$gaps</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> NonContinuous<span class=\"sy0\">-</span>SubSequence <span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$sc</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$gap1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\",$_,\"</span><br/>         <span class=\"st0\">\"0,{0}\"</span> <span class=\"kw4\">-f</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span>::Join<span class=\"br0\">(</span> <span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$sc</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <span class=\"re0\">$gap1</span> <span class=\"kw4\">-notmatch</span> <span class=\"st0\">\"$_,\"</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>      <span class=\"re0\">$gaps</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>..<span class=\"br0\">(</span> <span class=\"re0\">$sc</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      <span class=\"nu0\">2</span>..<span class=\"br0\">(</span> <span class=\"re0\">$sc</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$gap2</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>         <span class=\"re0\">$gaps</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> SubSequence <span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>..<span class=\"re0\">$sc</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"$gap2,$_\"</span><br/>         <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"co1\">#Write-Host \"S $S gaps $gaps\"</span><br/>      <span class=\"re0\">$gaps</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$gap3</span> <span class=\"sy0\">=</span> <span class=\"st0\">\",$_,\"</span><br/>         <span class=\"st0\">\"$( 0..$sc | Where-Object { $gap3 -notmatch \"</span><span class=\"sy0\">,</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">,</span><span class=\"st0\">\" } | ForEach-Object {<br/>            $S[$_]<br/>         } )\"</span> <span class=\"kw4\">-replace</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">','</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span> <br/>      <span class=\"re0\">$null</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span> NonContinuous<span class=\"sy0\">-</span>SubSequence <span class=\"st0\">'a'</span><span class=\"sy0\">,</span><span class=\"st0\">'b'</span><span class=\"sy0\">,</span><span class=\"st0\">'c'</span><span class=\"sy0\">,</span><span class=\"st0\">'d'</span><span class=\"sy0\">,</span><span class=\"st0\">'e'</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> length<span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">'value'</span>;Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span> length<span class=\"sy0\">,</span> value <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.value <span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 27, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"co1\">% fetch all the subsequences</span><br/>ncsubs<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> LNCSL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">setof</span></a><span class=\"br0\">(</span>NCSL<span class=\"sy4\">,</span> one_ncsubs<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span><span class=\"sy4\">,</span> LNCSL<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% how to build one subsequence</span><br/>one_ncsubs<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\textract_elem<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   sublist<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    one_ncsubs<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% extract one element of the list</span><br/><span class=\"co1\">% this element is neither the first nor the last.</span><br/>extract_elem<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tLen1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Len <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tbetween<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Len1<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> Elem<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tselect<span class=\"br0\">(</span>Elem<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> NCS1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   NCSL <span class=\"sy6\">=</span> NCS1<span class=\"sy4\">;</span> extract_elem<span class=\"br0\">(</span>NCS1<span class=\"sy4\">,</span> NCSL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% extract the first or the last element of the list</span><br/>sublist<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> SL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>L <span class=\"sy6\">=</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>SL<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\treverse<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>SL1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\treverse<span class=\"br0\">(</span>SL1<span class=\"sy4\">,</span> SL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> ncsub<span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> seq:<br/>        x <span class=\"sy0\">=</span> seq<span class=\"br0\">[</span>:<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        xs <span class=\"sy0\">=</span> seq<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>        p2 <span class=\"sy0\">=</span> s\u00a0% <span class=\"nu0\">2</span><br/>        p1 <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> p2<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x + ys <span class=\"kw1\">for</span> ys <span class=\"kw1\">in</span> ncsub<span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> s + p1<span class=\"br0\">)</span><span class=\"br0\">]</span> + ncsub<span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> s + p2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> s <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 17, "block": "<pre class=\"text highlighted_source\">ncsub &lt;- function(x)<br/>{<br/>   n &lt;- length(x)<br/>   a &lt;- seq_len(n)<br/>   seqlist &lt;- list()<br/>   for(i in 2:(n-1))<br/>   {<br/>      seqs &lt;- combn(a, i)                                                          # Get all subseqs<br/>      ok &lt;- apply(seqs, 2, function(x) any(diff(x)!=1))                            # Find noncts ones<br/>      newseqs &lt;- unlist(apply(seqs[,ok], 2, function(x) list(x)), recursive=FALSE) # Convert matrix to list of its columns<br/>      seqlist &lt;- c(seqlist, newseqs)                                               # Append to existing list <br/>   }<br/>   lapply(seqlist, function(index) x[index])<br/>}<br/># Example usage<br/>ncsub(1:4)<br/>ncsub(letters[1:5])</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (subsets l)<br/>  (if (null? l) '(())<br/>      (append (for/list ([l2 (subsets (cdr l))]) (cons (car l) l2))<br/>              (subsets (cdr l)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program lists all the  non\u2500continuous subsequences  (NCS),  given a sequence.    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> list                                   <span class=\"coMULTI\">/*obtain the arguments from the  C. L. */</span><br/><span class=\"kw1\">if</span> list=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> list==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> list=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span>      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'list='</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>;        <span class=\"kw1\">say</span>              <span class=\"coMULTI\">/*display the list to the terminal.    */</span><br/>w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*W:  is the number of items in list.  */</span><br/>$=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">123456789</span>, w<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*build a string of decimal digits.    */</span><br/>tail=<span class=\"kw6\">right</span><span class=\"br0\">(</span>$, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, w-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*construct a fast tail for comparisons*/</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/* [\u2193]      L:   length of  Jth  item. */</span><br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">13</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>$,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> tail;  L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*step through list (using smart start)*/</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw6\">verify</span><span class=\"br0\">(</span>j, $<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>            <span class=\"coMULTI\">/*Not one of the chosen  (sequences)\u00a0? */</span><br/>    f=<span class=\"kw6\">left</span><span class=\"br0\">(</span>j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*use the fist decimal digit of  J.    */</span><br/>    NCS=<span class=\"nu0\">0</span>                                        <span class=\"coMULTI\">/*there isn't a non\u2500continuous subseq. */</span><br/>            <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> L;      _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>j, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*extract a single decimal digit of  J.*/</span><br/>            <span class=\"kw1\">if</span> _ <span class=\"sy0\">&lt;</span>=  f    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j         <span class=\"coMULTI\">/*if next digit \u2264, then skip this digit*/</span><br/>            <span class=\"kw1\">if</span> _ <span class=\"sy0\">\\</span>== f+<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> NCS=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*it's OK as of now  (that is, so far).*/</span><br/>            f=_                                  <span class=\"coMULTI\">/*now have a  new  next decimal digit. */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>NCS  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                        <span class=\"coMULTI\">/*not OK?  Then skip this number (item)*/</span><br/>    #=#+<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*Eureka!  We found a number (or item).*/</span><br/>    @=;     <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L                        <span class=\"coMULTI\">/*build a sequence string to display.  */</span><br/>            @<a class=\"__cf_email__\" data-cfemail=\"0d304d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  <span class=\"kw6\">word</span><span class=\"br0\">(</span>list, <span class=\"kw6\">substr</span><span class=\"br0\">(</span>j, m, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*pick off a number (item) to display. */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/>\u00a0<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'a non\u2500continuous subsequence: '</span>    @    <span class=\"coMULTI\">/*show the non\u2500continuous subsequence. */</span><br/>    <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #=<span class=\"st0\">'no'</span>                             <span class=\"coMULTI\">/*make it look more gooder Angleshy.   */</span><br/><span class=\"kw1\">say</span>  #  <span class=\"st0\">\"non\u2500continuous subsequence\"</span>s<span class=\"br0\">(</span>#<span class=\"br0\">)</span>     <span class=\"st0\">'were found.'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>;     <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">'s'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*pluralizer.*/</span></pre>"}, {"lang": "Ring", "loc": 60, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Non-continuous subsequences<br/>\u00a0<br/>load \"stdlib.ring\"<br/>list = [1,2,3,4]<br/>items = newlist(pow(2,len(list))-1,len(list))<br/>see \"For [1, 2, 3, 4] non-continuous subsequences are:\" + nl<br/>powerset(list,4)<br/>showarray(items,4)<br/>see nl<br/>\u00a0<br/>list = [1,2,3,4,5]<br/>items = newlist(pow(2,len(list))-1,len(list))<br/>see \"For [1, 2, 3, 4, 5] non-continuous subsequences are:\" + nl<br/>powerset(list,5)<br/>showarray(items,5)<br/>\u00a0<br/>func showarray(items,ind)<br/>        for n = 1 to len(items)<br/>             flag = 0<br/>             for m = 1 to ind - 1<br/>                  if items[n][m] = 0 or items[n][m+1] = 0<br/>                     exit<br/>                 ok   <br/>                 if (items[n][m] + 1)\u00a0!= items[n][m+1]<br/>                     flag = 1<br/>                     exit<br/>                 ok<br/>            next<br/>            if flag = 1<br/>               see \"[\" <br/>               str = \"\"<br/>               for x = 1 to len(items[n])<br/>                    if items[n][x]\u00a0!= 0  <br/>                       str = str + items[n][x] + \" \"<br/>                    ok<br/>               next  <br/>               str = left(str, len(str) - 1)  <br/>               see str + \"]\" + nl<br/>            ok<br/>        next<br/>\u00a0<br/>func powerset(list,ind)<br/>        num = 0<br/>        num2 = 0<br/>        items = newlist(pow(2,len(list))-1,ind)<br/>        for i = 2 to (2 &lt;&lt; len(list)) - 1 step 2<br/>             num2 = 0<br/>             num = num + 1<br/>             for j = 1 to len(list) <br/>                  if i &amp; (1 &lt;&lt; j)<br/>                      num2 = num2 + 1<br/>                      if list[j]\u00a0!= 0<br/>                        items[num][num2] = list[j]<br/>                     ok<br/>                  ok<br/>             next<br/>        next<br/>        return items<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Array</span><br/>  <span class=\"kw1\">def</span> func_power_set<br/>    inject<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>ps,item<span class=\"sy0\">|</span>    <span class=\"co1\"># for each item in the Array</span><br/>      ps <span class=\"sy0\">+</span>                      <span class=\"co1\"># take the powerset up to now and add</span><br/>      ps.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e <span class=\"sy0\">+</span> <span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># it again, with the item appended to each element</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> non_continuous_subsequences<br/>    func_power_set.<span class=\"me1\">reject</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>seq<span class=\"sy0\">|</span> continuous?<span class=\"br0\">(</span>seq<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> continuous?<span class=\"br0\">(</span>seq<span class=\"br0\">)</span><br/>    seq.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>a, b<span class=\"sy0\">|</span> <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> a.<span class=\"me1\">succ</span>\u00a0!= b<span class=\"br0\">}</span><br/>    <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">non_continuous_subsequences</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">non_continuous_subsequences</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">non_continuous_subsequences</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>..<span class=\"st0\">\"d\"</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">non_continuous_subsequences</span></pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> NonContinuousSubSequences <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> seqR<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, c<span class=\"sy0\">:</span> String, i<span class=\"sy0\">:</span> Int, added<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> s.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c.<span class=\"me1\">trim</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> added<span class=\"br0\">)</span> println<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      seqR<span class=\"br0\">(</span>s, c + s<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, i + <span class=\"nu0\">1</span>, added + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      seqR<span class=\"br0\">(</span>s, c + <span class=\"st0\">\" \"</span>, i + <span class=\"nu0\">1</span>, added<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  seqR<span class=\"br0\">(</span><span class=\"st0\">\"1234\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 18, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ncsubseq lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> recurse <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>lst lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> lst<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"kw1\">s</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>xs <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">append</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>ys<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>recurse <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">s</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>recurse <span class=\"kw1\">s</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">append</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>ys<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>recurse <span class=\"kw1\">s</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>recurse <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">s</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array bitset: ncsub (in bitset: seq, in integer: s) is func<br/>  result<br/>    var array bitset: subseq is 0 times {};<br/>  local<br/>    var bitset: x is {};<br/>    var bitset: xs is {};<br/>    var bitset: ys is {};<br/>  begin<br/>    if seq &lt;&gt; {} then<br/>      x\u00a0:= {min(seq)};<br/>      xs\u00a0:= seq - x;<br/>      for ys range ncsub(xs, s + 1 - s rem 2) do<br/>        subseq &amp;:= x | ys;<br/>      end for;<br/>      subseq &amp;:= ncsub(xs, s + s rem 2);<br/>    elsif s &gt;= 3 then<br/>      subseq &amp;:= {};<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bitset: seq is {};<br/>  begin<br/>    for seq range ncsub({1, 2, 3, 4}, 0) do<br/>      writeln(seq);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 18, "block": "<pre class=\"ruby highlighted_source\">func non_continuous<span class=\"br0\">(</span>min, max, subseq=<span class=\"br0\">[</span><span class=\"br0\">]</span>, has_gap=<span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    static current = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    range<span class=\"br0\">(</span>min, max<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        current.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>        has_gap <span class=\"sy0\">&amp;&amp;</span> subseq.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span>current...<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        i <span class=\"sy0\">&lt;</span> max <span class=\"sy0\">&amp;&amp;</span> non_continuous<span class=\"br0\">(</span>i.<span class=\"me1\">inc</span>, max, subseq, has_gap<span class=\"br0\">)</span>;<br/>        current.<span class=\"me1\">pop</span>;<br/>        has_gap = current.<span class=\"me1\">len</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    subseq;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say non_continuous<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>say non_continuous<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>say non_continuous<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"d\"</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Standard ML", "loc": 21, "block": "<pre class=\"text highlighted_source\">fun fence s [] =<br/>      if s &gt;= 3 then<br/>        [[]]<br/>      else<br/>        []<br/>\u00a0<br/>  | fence s (x\u00a0:: xs) =<br/>      if s mod 2 = 0 then<br/>        map<br/>          (fn ys =&gt; x\u00a0:: ys)<br/>          (fence (s + 1) xs)<br/>        @<br/>          fence s xs<br/>      else<br/>        map<br/>          (fn ys =&gt; x\u00a0:: ys)<br/>          (fence s xs)<br/>        @<br/>          fence (s + 1) xs<br/>\u00a0<br/>fun ncsubseq xs = fence 0 xs</pre>"}, {"lang": "Tcl", "loc": 23, "block": "<pre class=\"tcl highlighted_source\"> <span class=\"kw1\">proc</span> subsets l <span class=\"br0\">{</span><br/>     <span class=\"kw1\">set</span> res <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>     <span class=\"kw1\">foreach</span> e <span class=\"re0\">$l</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">foreach</span> subset <span class=\"re0\">$res</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> res <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> subset <span class=\"re0\">$e</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">proc</span> is_not_continuous seq <span class=\"br0\">{</span><br/>     <span class=\"kw1\">set</span> last <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$seq</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>     <span class=\"kw1\">foreach</span> e <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$seq</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$e</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$last</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>         <span class=\"kw1\">set</span> last <span class=\"re0\">$e</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">proc</span> lfilter <span class=\"br0\">{</span>f <span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>     <span class=\"kw1\">set</span> res <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">foreach</span> i <span class=\"re0\">$list</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> res <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">%</span> lfilter is_not_continuous <span class=\"br0\">[</span>subsets <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>noncontinuous = num; ^rlK3ZK17rSS/~&amp; powerset<br/>\u00a0<br/>#show+<br/>\u00a0<br/>examples = noncontinuous 'abcde'</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn non_continuous_subsequences(ary){<br/>   pwerSet(ary).filter(fcn(list){(not isContinuous(list)) })<br/>}<br/>fcn isContinuous(ary){<br/>   if(ary.len()&lt;2) return(True);<br/>   foreach n in (ary.len()-1){ if(1+ary[n]!=ary[n+1]) return(False); }<br/>   return(True);<br/>}<br/>non_continuous_subsequences(T(1,2,3,4)).println();</pre>"}]}