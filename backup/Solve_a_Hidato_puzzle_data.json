{"task": "Solve_a_Hidato_puzzle", "blocks": [{"lang": "AutoHotkey", "loc": 67, "block": "<pre class=\"autohotkey highlighted_source\">SolveHidato<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> R<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> C<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>R<span class=\"sy0\">&amp;&amp;</span>C<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if neighbors (not first iteration)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tGrid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"&gt;\"</span> num \t\t\t\t\t<span class=\"co1\">; place num in current neighbor and mark it visited \"&gt;\"</span><br/>\t\trow<span class=\"sy0\">:=</span>R<span class=\"sy0\">,</span> col<span class=\"sy0\">:=</span>C\t\t\t\t\t\t<span class=\"co1\">; move to current neighbor</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tnum<span class=\"sy0\">++</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; increment num</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>num<span class=\"sy0\">=</span>max<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if reached end</span><br/>\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">; return solution</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t\t\t<span class=\"co1\">; if current num is a locked value</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t<span class=\"co1\">; find row of num</span><br/>\t\tcol <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t<span class=\"co1\">; find col of num</span><br/>\t\t<span class=\"kw1\">if</span> SolveHidato<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location and value</span><br/>\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tfor each<span class=\"sy0\">,</span> value in StrSplit<span class=\"br0\">(</span>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tR <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<br/>\t\t\tC <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span>C<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; a hole or out of bounds</span><br/>\t\t\t|| <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; visited</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num+1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num-1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t<span class=\"co1\">; locked value</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"br0\">]</span>\t\t\t\t<span class=\"co1\">; locked cell</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> SolveHidato<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> C<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location, neighbor and value</span><br/>\t\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tnum<span class=\"sy0\">--</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; step back</span><br/>\tfor i<span class=\"sy0\">,</span> line in Grid<br/>\t\tfor j<span class=\"sy0\">,</span> element in line<br/>\t\t\t<span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>StrReplace<span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> num<span class=\"br0\">)</span><br/>\t\t\t\tGrid<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"Y\"</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tR <span class=\"sy0\">:=</span> row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>\t<span class=\"br0\">{</span><br/>\t\tDeltaC <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>\t: <span class=\"nu0\">1</span><br/>\t\tres <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>R<span class=\"sy0\">=</span>row <span class=\"sy0\">&amp;&amp;</span>\u00a0!DeltaC<span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: R <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span>DeltaC <span class=\"st0\">\",\"</span><br/>\t\tR <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0? R\u00a0: R<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> Trim<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/>map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tfor i<span class=\"sy0\">,</span> row in Grid<br/>\t<span class=\"br0\">{</span><br/>\t\tfor j<span class=\"sy0\">,</span> element in row<br/>\t\t\tline <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"`t\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> element <br/>\t\tmap <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>map<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span>?<span class=\"st0\">\"`n\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> line<br/>\t\tline <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> StrReplace<span class=\"br0\">(</span>map<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Bracmat", "loc": 113, "block": "<pre class=\"text highlighted_source\">(<br/>  ( hidato<br/>  =     Line solve lowest Ncells row column rpad<br/>      , Board colWidth maxDigits start curCol curRow<br/>      , range head line cellN solution output tail<br/>    .   out$!arg<br/>      &amp; @(!arg:? ((%@:&gt;\" \")\u00a0?:?arg))<br/>      &amp; 0:?row:?column<br/>      &amp;\u00a0:?Board<br/>      &amp; ( Line<br/>        =   token<br/>          .   whl<br/>            ' ( @(!arg:?token [3\u00a0?arg)<br/>              &amp; (   (   @(!token:? \"_\"\u00a0?)<br/>                      &amp;\u00a0:?token<br/>                    | @(!token:? #?token (|\" \"\u00a0?))<br/>                    )<br/>                  &amp; (!token.!row.!column)\u00a0!Board:?Board<br/>                | <br/>                )<br/>              &amp; 1+!column:?column<br/>              )<br/>        )<br/>      &amp;   whl<br/>        ' ( @(!arg:?line \\n\u00a0?arg)<br/>          &amp; Line$!line<br/>          &amp; 1+!row:?row<br/>          &amp; 0:?column<br/>          )<br/>      &amp; Line$!arg<br/>      &amp; ( range<br/>        =   hi lo<br/>          .   (!arg+1:?hi)+-2:?lo<br/>            &amp; '($lo|$arg|$hi)<br/>        )<br/>      &amp; ( solve<br/>        =     ToDo cellN row column head tail remainder<br/>            , candCell Solved rowCand colCand pattern recurse<br/>          .  \u00a0!arg:(?ToDo.?cellN.?row.?column)<br/>            &amp; range$!row:(=?row)<br/>            &amp; range$!column:(=?column)<br/>            &amp;     <br/>                ' (    \u00a0?head ($cellN.?rowCand.?colCand)\u00a0?tail<br/>                      &amp; (!rowCand.!colCand):($row.$column)<br/>                      &amp;\u00a0!recurse<br/>                    |  \u00a0?head<br/>                        (.($row.$column):(?rowCand.?colCand))<br/>                        (?tail&amp;!recurse)<br/>                  .     ((!rowCand.!colCand).$cellN)<br/>                     \u00a0:\u00a0?candCell<br/>                    &amp;   (  \u00a0!head\u00a0!tail:<br/>                          &amp; out$found!<br/>                          &amp;\u00a0!candCell<br/>                        |       solve<br/>                              $ (\u00a0!head\u00a0!tail<br/>                                . $cellN+1<br/>                                .\u00a0!rowCand<br/>                                .\u00a0!colCand<br/>                                )<br/>                           \u00a0:\u00a0?remainder<br/>                          &amp;\u00a0!candCell+!remainder<br/>                        )<br/>                     \u00a0:\u00a0?Solved<br/>                  )<br/>             \u00a0: (=?pattern.?recurse)<br/>            &amp;\u00a0!ToDo:!pattern<br/>            &amp;\u00a0!Solved<br/>        )<br/>      &amp; infinity:?lowest<br/>      &amp; (  \u00a0!Board<br/>         \u00a0:\u00a0? (&lt;!lowest:#%?lowest.?start) (?&amp;~)<br/>        | solve$(!Board.!lowest.!start):?solution<br/>        )<br/>      &amp;\u00a0:?output<br/>      &amp; 0:?curCol<br/>      &amp;\u00a0!solution:((?curRow.?).?)+?+[?Ncells<br/>      &amp; @(!Ncells:? [?maxDigits)<br/>      &amp; 1+!maxDigits:?colWidth<br/>      &amp; ( rpad<br/>        =   len<br/>          .  \u00a0!arg:(?arg.?len)<br/>            &amp; @(str$(!arg \"    \"):?arg [!len\u00a0?)<br/>            &amp;\u00a0!arg<br/>        )<br/>      &amp;   whl<br/>        ' (\u00a0!solution:((?row.?column).?cellN)+?solution<br/>          &amp; (  \u00a0!row:&gt;!curRow:?curRow<br/>              &amp;\u00a0!output \\n:?output<br/>              &amp; 0:?curCol<br/>            | <br/>            )<br/>          &amp;   whl<br/>            ' (\u00a0!curCol+1:~&gt;!column:?curCol<br/>              &amp;\u00a0!output rpad$(.!colWidth):?output<br/>              )<br/>          &amp;  \u00a0!output rev$(rpad$(rev$(str$(!cellN \" \")).!colWidth))<br/>           \u00a0:\u00a0?output<br/>          &amp;\u00a0!curCol+1:?curCol<br/>          )<br/>      &amp; str$!output<br/>  )<br/>&amp;   \"<br/> __ 33 35 __ __         <br/> __ __ 24 22 __         <br/> __ __ __ 21 __ __      <br/> __ 26 __ 13 40 11      <br/> 27 __ __ __  9 __  1   <br/>       __ __ 18 __ __   <br/>             __  7 __ __<br/>                    5 __\"<br/> \u00a0:\u00a0?board<br/>&amp; out$(hidato$!board)<br/>);</pre>"}, {"lang": "C", "loc": 167, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>board<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>flood<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>known<span class=\"sy0\">,</span> top <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> idx<span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> neighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>p<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*<br/>@c cell<br/>@p list of neighbours<br/>@return amount of neighbours<br/>*/</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> w<span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> c <span class=\"sy0\">%</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">&gt;=</span> h<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">&gt;=</span> w<br/>\t\t\t\t<span class=\"sy0\">||</span> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> x <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> y<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">||</span> board<span class=\"br0\">[</span> p<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> idx<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tn<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> flood_fill<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*<br/>fill all free cells around @c with \u201c1\u201d and write output to variable \u201cflood\u201d<br/>@c cell<br/>*/</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> n<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nei<span class=\"sy0\">;</span><br/>\u00a0<br/>\tnei <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nei<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// for all neighbours</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> flood<span class=\"br0\">[</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span> <span class=\"co1\">// if cell is not free, choose another neighbour</span><br/>\u00a0<br/>\t\tflood<span class=\"br0\">[</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tflood_fill<span class=\"br0\">(</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Check all empty cells are reachable from higher known cells.<br/>   Should really do more checks to make sure cell_x and cell_x+1<br/>   share enough reachable empty cells; I'm lazy. Will implement<br/>   if a good counter example is presented. */</span><br/><span class=\"kw4\">int</span> check_connectity<span class=\"br0\">(</span><span class=\"kw4\">int</span> lowerbound<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>flood<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>flood<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> lowerbound <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;=</span> top<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>known<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> flood_fill<span class=\"br0\">(</span>known<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// mark all free cells around known cells</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>flood<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// if there are free cells which could not be reached from flood_fill</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> make_board<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tw <span class=\"sy0\">=</span> x<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        top <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tx <span class=\"sy0\">=</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span><br/>\u00a0<br/>        known <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        board <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>     <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        flood <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>     <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"sy0\">--</span><span class=\"br0\">)</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> w<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">=</span> idx<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> s<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'_'</span><span class=\"sy0\">:</span>\tboard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'.'</span><span class=\"sy0\">:</span>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>\t\t\tknown<span class=\"br0\">[</span> board<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtol.html\"><span class=\"kw3\">strtol</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> top<span class=\"br0\">)</span> top <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> s<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_board<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> w<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tc <span class=\"sy0\">=</span> board<span class=\"br0\">[</span> idx<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"sy0\">!</span>c <span class=\"sy0\">?</span> <span class=\"st0\">\" __\"</span> <span class=\"sy0\">:</span> c <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"   \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\u00a0%2d\"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> fill<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> nei<span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ko<span class=\"sy0\">,</span> bo<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>board<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> n<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>known<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> known<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> top<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tko <span class=\"sy0\">=</span> known<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tbo <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tboard<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>check_connectity<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tnei <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nei<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fill<span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tboard<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> bo<span class=\"sy0\">;</span><br/>\tknown<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ko<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmake_board<span class=\"br0\">(</span><br/><span class=\"co2\">#define USE_E 0</span><br/><span class=\"co2\">#if (USE_E == 0)</span><br/>\t\t<span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\" __ 33 35 __ __ .. .. ..\"</span><br/>\t\t\t<span class=\"st0\">\" __ __ 24 22 __ .. .. ..\"</span><br/>\t\t\t<span class=\"st0\">\" __ __ __ 21 __ __ .. ..\"</span><br/>\t\t\t<span class=\"st0\">\" __ 26 __ 13 40 11 .. ..\"</span><br/>\t\t\t<span class=\"st0\">\" 27 __ __ __  9 __  1 ..\"</span><br/>\t\t\t<span class=\"st0\">\" .   . __ __ 18 __ __ ..\"</span><br/>\t\t\t<span class=\"st0\">\" .  ..  .  . __  7 __ __\"</span><br/>\t\t\t<span class=\"st0\">\" .  .. .. ..  .  .  5 __\"</span><br/><span class=\"co2\">#elif (USE_E == 1)</span><br/>\t<span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\" . 4 .\"</span><br/>\t\t<span class=\"st0\">\" _ 7 _\"</span><br/>\t\t<span class=\"st0\">\" 1 _ _\"</span><br/><span class=\"co2\">#else</span><br/>\t<span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\" 1 _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . 74\"</span><br/>\t<span class=\"st0\">\" . . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ .\"</span><br/>\t<span class=\"st0\">\" . . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ .\"</span><br/><span class=\"co2\">#endif</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow_board<span class=\"br0\">(</span><span class=\"st0\">\"Before\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfill<span class=\"br0\">(</span>known<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_board<span class=\"br0\">(</span><span class=\"st0\">\"After\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* \"40 lbs in two weeks!\" */</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 154, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"co1\">//------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//------------------------------------------------------------------------------</span><br/><span class=\"kw4\">struct</span> node<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> val<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> neighbors<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> hSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    hSolver<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tdy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> puzz, <span class=\"kw4\">int</span> max_wid <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\twid <span class=\"sy1\">=</span> max_wid<span class=\"sy4\">;</span> hei <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> wid<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> len <span class=\"sy1\">=</span> wid <span class=\"sy2\">*</span> hei, c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> max <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\tarr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> node<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> arr, <span class=\"nu0\">0</span>, len <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> node <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tweHave <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>len <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> weHave, <span class=\"nu0\">0</span>, len <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>    arr<span class=\"br0\">[</span>c<span class=\"sy2\">++</span><span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> weHave<span class=\"br0\">[</span>arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> max <span class=\"sy1\">&lt;</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> max <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsolveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tostringstream o<span class=\"sy4\">;</span> o <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">=</span> o.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> weHave<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> w <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> w <span class=\"sy1\">==</span> max <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tnode<span class=\"sy2\">*</span> n <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tn<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy1\">=</span> getNeighbors<span class=\"br0\">(</span> x, y <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> weHave<span class=\"br0\">[</span>w<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> w <span class=\"br0\">)</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> search<span class=\"br0\">(</span> a, b, w <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> search<span class=\"br0\">(</span> a, b, w <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> getNeighbors<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, a, b<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> yy <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> yy<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> xx <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> xx<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>yy <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>xx <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\tm<span class=\"sy2\">++</span><span class=\"sy4\">;</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> xx, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> yy<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> a <span class=\"sy1\">&gt;=</span> wid <span class=\"sy3\">||</span> b <span class=\"sy1\">&gt;=</span> hei <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> c <span class=\"sy3\">|</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> m <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span> findStart<span class=\"br0\">(</span> x, y <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Can't find start point!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\tsearch<span class=\"br0\">(</span> x, y, <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> findStart<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> x, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> b<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\tx <span class=\"sy1\">=</span> y <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> wid, hei, max, dx<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>, dy<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    node<span class=\"sy2\">*</span> arr<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span><span class=\"sy2\">*</span> weHave<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> wid<span class=\"sy4\">;</span><br/>    string p <span class=\"sy1\">=</span> <span class=\"st0\">\". 33 35 . . * * * . . 24 22 . * * * . . . 21 . . * * . 26 . 13 40 11 * * 27 . . . 9 . 1 * * * . . 18 . . * * * * * . 7 . . * * * * * * 5 .\"</span><span class=\"sy4\">;</span> wid <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">//string p = \"54 . 60 59 . 67 . 69 . . 55 . . 63 65 . 72 71 51 50 56 62 . * * * * . . . 14 * * 17 . * 48 10 11 * 15 . 18 . 22 . 46 . * 3 . 19 23 . . 44 . 5 . 1 33 32 . . 43 7 . 36 . 27 . 31 42 . . 38 . 35 28 . 30\"; wid = 9;</span><br/>    <span class=\"co1\">//string p = \". 58 . 60 . . 63 66 . 57 55 59 53 49 . 65 . 68 . 8 . . 50 . 46 45 . 10 6 . * * * . 43 70 . 11 12 * * * 72 71 . . 14 . * * * 30 39 . 15 3 17 . 28 29 . . 40 . . 19 22 . . 37 36 . 1 20 . 24 . 26 . 34 33\"; wid = 9;</span><br/>\u00a0<br/>    istringstream iss<span class=\"br0\">(</span> p <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> puzz<span class=\"sy4\">;</span><br/>    copy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> iss <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    hSolver s<span class=\"sy4\">;</span> s.<span class=\"me1\">solve</span><span class=\"br0\">(</span> puzz, wid <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"*\"</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"   \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>c <span class=\"sy1\">&gt;=</span> wid <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Curry", "loc": 54, "block": "<pre class=\"text highlighted_source\">import CLPFD<br/>import Constraint (andC, anyC)<br/>import Findall (unpack)<br/>import Integer (abs)<br/>\u00a0<br/>\u00a0<br/>hidato\u00a0:: [[Int]] -&gt; Success<br/>hidato path =<br/>    test path inner<br/>  &amp; domain inner 1 40<br/>  &amp; allDifferent inner<br/>  &amp; andFD [x `near` y | x &lt;- cells, y &lt;- cells]<br/>  &amp; labeling [] (concat path)<br/>  where<br/>    andFD = solve . foldr1 (#/\\#)<br/>    cells = enumerate path<br/>    inner free<br/>\u00a0<br/>near\u00a0:: (Int,Int,Int) -&gt; (Int,Int,Int) -&gt; Constraint<br/>(x,rx,cx) `near` (y,ry,cy) =  x #&lt;=# y  #/\\#  dist (y -# x)<br/>                        #\\/#  x #&gt;#  y  #/\\#  dist (x -# y)<br/>                        #\\/#  x #=#  0<br/>                        #\\/#  y #=#  0<br/>  where<br/>    dist d =  abs (rx - ry) #&lt;=# d<br/>        #/\\#  abs (cx - cy) #&lt;=# d<br/>\u00a0<br/>enumerate\u00a0:: [[Int]] -&gt; [(Int,Int,Int)]<br/>enumerate xss = [(x,row,col) | (xs,row) &lt;- xss `zip` [1..]<br/>                             , (x ,col) &lt;- xs  `zip` [1..]<br/>                ]<br/>\u00a0<br/>test [[ 0,  0,  0,  0,  0,  0,  0, 0, 0, 0]<br/>     ,[ 0,  A, 33, 35,  B,  C,  0, 0, 0, 0]<br/>     ,[ 0,  D,  E, 24, 22,  F,  0, 0, 0, 0]<br/>     ,[ 0,  G,  H,  I, 21,  J,  K, 0, 0, 0]<br/>     ,[ 0,  L, 26,  M, 13, 40, 11, 0, 0, 0]<br/>     ,[ 0, 27,  N,  O,  P,  9,  Q, 1, 0, 0]<br/>     ,[ 0,  0,  0,  R,  S, 18,  T, U, 0, 0]<br/>     ,[ 0,  0,  0,  0,  0,  V,  7, W, X, 0]<br/>     ,[ 0,  0,  0,  0,  0,  0,  0, 5, Y, 0]<br/>     ,[ 0,  0,  0,  0,  0,  0,  0, 0, 0, 0]<br/>     ]<br/>     [ A, 33, 35,  B,  C<br/>     , D,  E, 24, 22,  F<br/>        , G,  H,  I, 21,  J,  K<br/>        , L, 26,  M, 13, 40, 11<br/>           , 27,  N,  O,  P,  9, Q, 1<br/>           ,  R,  S, 18,  T,  U<br/>               ,  V,  7,  W,  X<br/>                       ,  5,  Y<br/>     ] = success<br/>\u00a0<br/>main = unpack hidato</pre>"}, {"lang": "D", "loc": 81, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> board<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> given<span class=\"sy0\">,</span> start<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setup<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> lines <span class=\"sy0\">=</span> s.<span class=\"me1\">splitLines</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> cols <span class=\"sy0\">=</span> lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> rows <span class=\"sy0\">=</span> lines.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    given.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    board <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>rows <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cols <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span><br/>        row<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> lines<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> cell<span class=\"sy0\">;</span> row.<span class=\"me1\">split</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">\"__\"</span><span class=\"sy0\">:</span><br/>                    board<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw4\">int</span> val <span class=\"sy0\">=</span> cell.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">;</span><br/>                    board<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>                    given <span class=\"sy0\">~=</span> val<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>val <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        start <span class=\"sy0\">=</span> <span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    given.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> next <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> given.<span class=\"me1\">back</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> given<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> back <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>j<span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> c <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> next <span class=\"sy0\">+</span> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            writef<span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" . \"</span> <span class=\"sy0\">:</span> c <span class=\"sy0\">?</span> <span class=\"st0\">\"%2d \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"__ \"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> hi <span class=\"sy0\">=</span> <span class=\"st0\">\"__ 33 35 __ __  .  .  .<br/>                __ __ 24 22 __  .  .  .<br/>                __ __ __ 21 __ __  .  .<br/>                __ 26 __ 13 40 11  .  .<br/>                27 __ __ __  9 __  1  .<br/>                 .  . __ __ 18 __ __  .<br/>                 .  .  .  . __  7 __ __<br/>                 .  .  .  .  .  .  5 __\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    hi.<span class=\"me1\">setup</span><span class=\"sy0\">;</span><br/>    printBoard<span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"<span class=\"es1\">\\n</span>Found:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    solve<span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> start<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    printBoard<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 78, "block": "<pre class=\"text highlighted_source\"># Solve a Hidato Like Puzzle with Warnsdorff like logic applied<br/>#<br/>defmodule HLPsolver do<br/>  defmodule Cell do<br/>    defstruct value: -1, used: false, adj: []<br/>  end<br/>\u00a0<br/>  def solve(str, adjacent, print_out\\\\true) do<br/>    board = setup(str)<br/>    if print_out, do: print(board, \"Problem:\")<br/>    {start, _} = Enum.find(board, fn {_,cell} -&gt; cell.value==1 end)<br/>    board = set_adj(board, adjacent)<br/>    zbl = for\u00a0%Cell{value: n} &lt;- Map.values(board), into:\u00a0%{}, do: {n, true}<br/>    try do<br/>      solve(board, start, 1, zbl, map_size(board))<br/>      IO.puts \"No solution\"<br/>    catch<br/>      {:ok, result} -&gt; if print_out, do: print(result, \"Solution:\"),<br/>                                   else: result<br/>    end<br/>  end<br/>\u00a0<br/>  defp solve(board, position, seq_num, zbl, goal) do<br/>    value = board[position].value<br/>    cond do<br/>      value &gt; 0 and value\u00a0!= seq_num -&gt; nil<br/>      value == 0 and zbl[seq_num] -&gt; nil<br/>      true -&gt;<br/>        cell =\u00a0%Cell{board[position] | value: seq_num, used: true}<br/>        board =\u00a0%{board | position =&gt; cell}<br/>        if seq_num == goal, do: throw({:ok, board})<br/>        Enum.each(wdof(board, cell.adj), fn pos -&gt;<br/>          solve(board, pos, seq_num+1, zbl, goal)<br/>        end)<br/>    end<br/>  end<br/>\u00a0<br/>  defp setup(str) do<br/>    lines = String.strip(str) |&gt; String.split(~r/(\\n|\\r\\n|\\r)/) |&gt; Enum.with_index<br/>    for {line,i} &lt;- lines, {char,j} &lt;- Enum.with_index(String.split(line)),<br/>       \u00a0:error\u00a0!= Integer.parse(char), into:\u00a0%{} do<br/>          {n,_} = Integer.parse(char)<br/>          {{i,j},\u00a0%Cell{value: n}}<br/>        end<br/>  end<br/>\u00a0<br/>  defp set_adj(board, adjacent) do<br/>    Enum.reduce(Map.keys(board), board, fn {x,y},map -&gt;<br/>      adj = Enum.map(adjacent, fn {i,j} -&gt; {x+i, y+j} end)<br/>            |&gt; Enum.reduce([], fn pos,acc -&gt; if board[pos], do: [pos | acc], else: acc end)<br/>      Map.update!(map, {x,y}, fn cell -&gt;\u00a0%Cell{cell | adj: adj} end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp wdof(board, adj) do              # Warnsdorf's rule<br/>    Enum.reject(adj, fn pos -&gt; board[pos].used end)<br/>    |&gt; Enum.sort_by(fn pos -&gt;<br/>         Enum.count(board[pos].adj, fn p -&gt; not board[p].used end)<br/>       end)<br/>  end<br/>\u00a0<br/>  def print(board, title) do<br/>    IO.puts \"\\n#{title}\"<br/>    {xmin, xmax} = Map.keys(board) |&gt; Enum.map(fn {x,_} -&gt; x end) |&gt; Enum.min_max<br/>    {ymin, ymax} = Map.keys(board) |&gt; Enum.map(fn {_,y} -&gt; y end) |&gt; Enum.min_max<br/>    len = map_size(board) |&gt; to_char_list |&gt; length<br/>    space = String.duplicate(\" \", len)<br/>    Enum.each(xmin..xmax, fn x -&gt;<br/>      Enum.map_join(ymin..ymax, \" \", fn y -&gt;<br/>        case Map.get(board, {x,y}) do<br/>          nil  -&gt; space<br/>          cell -&gt; to_string(cell.value) |&gt; String.rjust(len)<br/>        end<br/>      end)<br/>      |&gt; IO.puts<br/>    end)<br/>  end<br/>end</pre>"}, {"lang": "Erlang", "loc": 106, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> solve_hidato_puzzle <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>create<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> solve<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span><span class=\"br0\">{</span>no_auto_import<span class=\"sy1\">,</span><span class=\"br0\">[</span>max<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_list</span><span class=\"sy1\">,</span> <span class=\"re5\">Number_list</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Squares</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">create_column</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Grid_list</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> store<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re5\">Squares</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Number_list</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_list</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_list</span><span class=\"br0\">(</span><span class=\"re5\">Grid_list</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"re5\">Grid_list</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Max_x</span> <span class=\"sy3\">=</span> <span class=\"re3\">max_x</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Max_y</span> <span class=\"sy3\">=</span> <span class=\"re3\">max_y</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Print_row</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid_dict</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">P</span><span class=\"re3\">rint_row</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>find_start<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span>find_start<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fold</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> start<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Max</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"kw3\">size</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span>stop_ok<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Stop</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span>stop_ok<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fold</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> stop<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">path</span><span class=\"br0\">(</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">receive</span><br/>    <span class=\"br0\">{</span>grid<span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"sy1\">,</span> path<span class=\"sy1\">,</span> <span class=\"re5\">Path</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Grid</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"co1\">%% Square is {X, Y}, N}. N = 0 for empty square. These are created if not present.</span><br/>    <span class=\"co1\">%% Leftmost column is X=1. Top row is Y=1.</span><br/>    <span class=\"co1\">%% Optimised for the example, grid is a list of {X, {Y_min, Y_max}}.</span><br/>    <span class=\"co1\">%% When there are holes, X is repeated as many times as needed with two new Y values each time.</span><br/>    <span class=\"re5\">Start</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Stop</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Grid_list</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Number_list</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">27</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">33</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">26</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">35</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">22</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">21</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Grid</span> <span class=\"sy3\">=</span> <span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"re5\">Grid_list</span><span class=\"sy1\">,</span> <span class=\"re5\">Number_list</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Start grid~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">New_grid</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"re5\">Grid_list</span><span class=\"sy1\">,</span> <span class=\"re5\">Number_list</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Start square ~p, Stop square ~p.~nPath ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">New_grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">create_column</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Y_min</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_max</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">Y_min</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_max</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_filled</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">=:=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fold</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> keep_0_square<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">keep_0_square</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">Key</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">keep_0_square</span><span class=\"br0\">(</span>  <span class=\"re5\">_Key</span><span class=\"sy1\">,</span> <span class=\"re5\">_Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">max</span><span class=\"br0\">(</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Keys</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Square</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Square</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">max_x</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_Y</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">max</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">X</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">max_y</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">max</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Y</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">neighbourhood</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Potentials</span> <span class=\"sy3\">=</span> <span class=\"re3\">neighbourhood_potential_squares</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">neighbourhood_squares</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Potentials</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">neighbourhood_potential_squares</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Sx</span><span class=\"sy1\">,</span> <span class=\"re5\">Sy</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Sx</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sy</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"re5\">Y</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">=/=</span> <span class=\"br0\">{</span><span class=\"re5\">Sx</span><span class=\"sy1\">,</span> <span class=\"re5\">Sy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">neighbourhood_squares</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Potentials</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Square_values</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">neighbourhood_square_value</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Potentials</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Next_value</span> <span class=\"sy3\">=</span> <span class=\"re5\">Value</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">neighbourhood_squares_next_value</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span><span class=\"re5\">Next_value</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Square_values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Square_values</span><span class=\"sy1\">,</span> <span class=\"re5\">Next_value</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">neighbourhood_squares_next_value</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Square_values</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">neighbourhood_squares_next_value</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Square_values</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Square_values</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">neighbourhood_square_value</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">neighbourhood_square_value</span><span class=\"br0\">(</span> <span class=\"re5\">_Square</span><span class=\"sy1\">,</span> error <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">path</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">path_correct</span><span class=\"br0\">(</span> <span class=\"re3\">is_filled</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Square</span> | <span class=\"re5\">Path</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">path</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Reversed_path</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Square</span> | <span class=\"re5\">Path</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Neighbours</span> <span class=\"sy3\">=</span> <span class=\"re3\">neighbourhood</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">path</span><span class=\"br0\">(</span><span class=\"re5\">Next_square</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"re5\">Next_square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Reversed_path</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Next_square</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Neighbours</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">path_correct</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Path</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>grid<span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> path<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Path</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">path_correct</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">_Path</span><span class=\"sy1\">,</span> <span class=\"re5\">_Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">dead_end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">print_number</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print_number</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~3s\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\".\"</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">% . is less distracting than 0</span><br/><span class=\"re3\">print_number</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~3b\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Value</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">print_number</span><span class=\"br0\">(</span> error <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~3s\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\" \"</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">Key</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"sy1\">;</span> <span class=\"co1\">% Allow check that we only have one key with value 1.</span><br/><span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"re5\">_Key</span><span class=\"sy1\">,</span> <span class=\"re5\">_Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">stop</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_found</span><span class=\"sy1\">,</span> <span class=\"re5\">Stops</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">max</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_found</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Key</span> | <span class=\"re5\">Stops</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span> <span class=\"co1\">% Allow check that we only have one key with value Max.</span><br/><span class=\"re3\">stop</span><span class=\"br0\">(</span> <span class=\"re5\">_Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_found</span><span class=\"sy1\">,</span> <span class=\"re5\">Stops</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">max</span><span class=\"br0\">(</span><span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_found</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Stops</span><span class=\"br0\">}</span><span class=\"sy1\">.</span> <span class=\"co1\">% Allow check that Max is Max.</span><br/>\u00a0<br/><span class=\"re3\">store</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 118, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> board <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> start<span class=\"sy1\">,</span> given <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> setup<span class=\"sy1\">(</span>input <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"coMULTI\">/* This task is not about input validation, so<br/>       we're going to trust the input to be valid */</span><br/>    puzzle <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>input<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>input<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        puzzle<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>input<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>    nCols <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>puzzle<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>    nRows <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>puzzle<span class=\"sy1\">)</span><br/>    list <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nRows<span class=\"sy3\">*</span>nCols<span class=\"sy1\">)</span><br/>    board <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nRows<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; nRows<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        board<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nCols<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; nCols<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            board<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; nRows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        row <span class=\"sy2\">:=</span> puzzle<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; nCols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> cell <span class=\"sy2\">:=</span> row<span class=\"sy1\">[</span>c<span class=\"sy1\">];</span> cell <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"_\"</span><span class=\"sy1\">:</span><br/>                board<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">:</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                val<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>cell<span class=\"sy1\">)</span><br/>                board<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> val<br/>                list <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>list<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> val <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                    start <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>start<span class=\"sy1\">,</span> r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>list<span class=\"sy1\">)</span><br/>    given <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>given<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        given<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> next <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &gt; given<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>given<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    back <span class=\"sy2\">:=</span> board<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>    <span class=\"kw1\">if</span> back <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> &amp;&amp; back <span class=\"sy2\">!=</span> n <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> back <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; given<span class=\"sy1\">[</span>next<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> back <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>        next<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    board<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt; <span class=\"nu0\">2</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> c<span class=\"sy3\">+</span>j<span class=\"sy1\">,</span> n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> next<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    board<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> back<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printBoard<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> board <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> row <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> c <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" . \"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">case</span> c &gt; <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d \"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"__ \"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    input <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"_ 33 35 _ _ . . .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"_ _ 24 22 _ . . .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"_ _ _ 21 _ _ . .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"_ 26 _ 13 40 11 . .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"27 _ _ _ 9 _ 1 .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\". . _ _ 18 _ _ .\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\". . . . _ 7 _ _\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\". . . . . . 5 _\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    setup<span class=\"sy1\">(</span>input<span class=\"sy1\">)</span><br/>    printBoard<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Found:\"</span><span class=\"sy1\">)</span><br/>    solve<span class=\"sy1\">(</span>start<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> start<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    printBoard<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 111, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE TupleSections #-}</span><br/><span class=\"coMULTI\">{-# LANGUAGE Rank2Types #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>IntMap <span class=\"kw1\">as</span> I<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>IntMap <span class=\"br0\">(</span>IntMap<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Time<span class=\"sy0\">.</span>Clock<br/>\u00a0<br/><span class=\"kw1\">data</span> BoardProblem <span class=\"sy0\">=</span> Board<br/>  <span class=\"br0\">{</span> cells <span class=\"sy0\">::</span> IntMap <span class=\"br0\">(</span>IntMap <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> endVal <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>  <span class=\"sy0\">,</span> onePos <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> givens <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>tupIns x y v m <span class=\"sy0\">=</span> I<span class=\"sy0\">.</span>insert x <span class=\"br0\">(</span>I<span class=\"sy0\">.</span>insert y v <span class=\"br0\">(</span>I<span class=\"sy0\">.</span>findWithDefault I<span class=\"sy0\">.</span>empty x m<span class=\"br0\">)</span><span class=\"br0\">)</span> m<br/>\u00a0<br/>tupLookup x y m <span class=\"sy0\">=</span> I<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> x m <span class=\"sy0\">&gt;&gt;=</span> I<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> y<br/>\u00a0<br/>makeBoard <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span><br/>      x<br/>      <span class=\"br0\">{</span> givens <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> sort <span class=\"sy0\">$</span> givens x<br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">' --'</span><br/>    f<br/>    <span class=\"br0\">(</span>Board I<span class=\"sy0\">.</span>empty <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\y w <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> <span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> w<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    f bd <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span><br/>        <span class=\"kw1\">then</span> bd<br/>        <span class=\"kw1\">else</span> Board<br/>               <span class=\"br0\">(</span>tupIns x y <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> v<span class=\"br0\">)</span> <span class=\"br0\">(</span>cells bd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> v <span class=\"sy0\">&gt;</span> endVal bd<br/>                  <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> v<br/>                  <span class=\"kw1\">else</span> endVal bd<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span><br/>                  <span class=\"kw1\">then</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>                  <span class=\"kw1\">else</span> onePos bd<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> v\u00a0: givens bd<span class=\"br0\">)</span><br/>\u00a0<br/>hidato brd <span class=\"sy0\">=</span> listToMaybe <span class=\"sy0\">$</span> h <span class=\"nu0\">2</span> <span class=\"br0\">(</span>cells brd<span class=\"br0\">)</span> <span class=\"br0\">(</span>onePos brd<span class=\"br0\">)</span> <span class=\"br0\">(</span>givens brd<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    h nval pmap <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> gs<br/>      <span class=\"sy0\">|</span> nval <span class=\"sy0\">==</span> endVal brd <span class=\"sy0\">=</span> <span class=\"br0\">[</span>pmap<span class=\"br0\">]</span><br/>      <span class=\"sy0\">|</span> nval <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> gs <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> nvalAdj<br/>          <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>          <span class=\"kw1\">else</span> h <span class=\"br0\">(</span>nval <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> pmap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> nvalAdj<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> gs<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> nvalAdj <span class=\"sy0\">=</span> h <span class=\"br0\">(</span>nval <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> pmap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> nvalAdj<span class=\"br0\">)</span> gs<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> hEmptyAdj<br/>      <span class=\"kw1\">where</span><br/>        around <span class=\"sy0\">=</span><br/>          <span class=\"br0\">[</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">]</span><br/>        lkdUp <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> tupLookup x y pmap<span class=\"br0\">)</span><span class=\"br0\">)</span> around<br/>        nvalAdj <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Just nval<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> lkdUp<br/>        hEmptyAdj <span class=\"sy0\">=</span><br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a><br/>            <span class=\"br0\">(</span>\\<span class=\"br0\">(</span><span class=\"br0\">(</span>nx<span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> h <span class=\"br0\">(</span>nval <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>tupIns nx ny nval pmap<span class=\"br0\">)</span> <span class=\"br0\">(</span>nx<span class=\"sy0\">,</span> ny<span class=\"br0\">)</span> gs<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Just <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> lkdUp<br/>\u00a0<br/>printCellMap cellmap <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> strings<br/>  <span class=\"kw1\">where</span><br/>    maxPos <span class=\"sy0\">=</span> xyBy I<span class=\"sy0\">.</span>findMax <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a><br/>    minPos <span class=\"sy0\">=</span> xyBy I<span class=\"sy0\">.</span>findMin <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minimum\"><span class=\"kw3\">minimum</span></a><br/>    xyBy <span class=\"sy0\">::</span> <span class=\"br0\">(</span><span class=\"kw1\">forall</span> a<span class=\"sy0\">.</span> IntMap a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>    xyBy a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"br0\">(</span>a cellmap<span class=\"br0\">)</span><span class=\"sy0\">,</span> b <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">.</span> a <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> I<span class=\"sy0\">.</span>toList cellmap<span class=\"br0\">)</span><br/>    strings <span class=\"sy0\">=</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a><br/>        f<br/>        <span class=\"br0\">[</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> minPos <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> maxPos<span class=\"br0\">]</span> <br/>        <span class=\"sy0\">,</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> minPos <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> maxPos<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    f <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> maxPos<br/>              <span class=\"kw1\">then</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>              <span class=\"kw1\">else</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"kw1\">in</span> <span class=\"kw1\">case</span> tupLookup x y cellmap <span class=\"kw1\">of</span><br/>           Nothing <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">++</span> z<br/>           Just n <span class=\"sy0\">-&gt;</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><br/>                <span class=\"kw1\">then</span> <span class=\"st0\">' '</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<br/>                <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">++</span><br/>             z<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> sampleBoard <span class=\"sy0\">=</span> makeBoard sample<br/>  printCellMap <span class=\"sy0\">$</span> cells sampleBoard<br/>  printCellMap <span class=\"sy0\">$</span> fromJust <span class=\"sy0\">$</span> hidato sampleBoard<br/>\u00a0<br/>sample <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"st0\">\" 0 33 35  0  0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\" 0  0 24 22  0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\" 0  0  0 21  0  0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\" 0 26  0 13 40 11\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"27  0  0  0  9  0  1\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\".  .   0  0 18  0  0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\".  .  .  .   0  7  0  0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\".  .  .  .  .  .   5  0\"</span><br/>  <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 105, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> nCells<span class=\"sy0\">,</span> cMap<span class=\"sy0\">,</span> best<br/><span class=\"kw1\">record</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    puzzle <span class=\"sy0\">:=</span> showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy0\">,</span>readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span>findStart<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"sy0\">,&amp;</span><span class=\"kw3\">null</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Output\"</span><span class=\"sy0\">,</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Start with a reduced puzzle space</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    nCells <span class=\"sy0\">:=</span> maxCols <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> gencells<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        maxCols <span class=\"sy0\">&lt;:=</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Now normalize all rows to the same length</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>p <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">!</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">|-</span><span class=\"nu0\">1</span><span class=\"sy0\">\\</span><span class=\"br0\">(</span>maxCols <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gencells<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> WS<span class=\"sy0\">,</span> NWS<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>        NWS <span class=\"sy0\">:=</span> <span class=\"sy0\">~</span><span class=\"br0\">(</span>WS <span class=\"sy0\">:=</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        cMap <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\"># Map to/from internal model</span><br/>        cMap<span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>  cMap<span class=\"br0\">[</span><span class=\"st0\">\"_\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span>  <span class=\"nu0\">0</span><br/>        cMap<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">:=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> cMap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"sy0\">:=</span> <span class=\"st0\">\"_\"</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    s <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>NWS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"sy0\">|</span>w<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">~=</span> w <span class=\"kw1\">then</span> nCells <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">suspend</span> w<br/>            <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showPuzzle<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>label<span class=\"sy0\">,</span><span class=\"st0\">\" with \"</span><span class=\"sy0\">,</span>nCells<span class=\"sy0\">,</span><span class=\"st0\">\" cells:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>p <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>r <span class=\"kw1\">do</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">|</span>c<span class=\"br0\">)</span><span class=\"sy0\">,*</span>nCells<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> findStart<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>p<span class=\"br0\">[</span>r <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>best <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>            loc <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>path<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> puzzle<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> loc<span class=\"sy0\">,</span> <span class=\"kw4\">parent</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    <span class=\"kw1\">method</span> getVal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getLoc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> loc<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getParent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">parent</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>nCells <span class=\"sy0\">=</span> val<span class=\"br0\">)</span> <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goNorth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goNE<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goEast<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goSE<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goSouth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goSW<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goWest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> goNW<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"kw1\">return</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> visit<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>best <span class=\"sy0\">&amp;</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        xv <span class=\"sy0\">:=</span> puzzle<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> xv <span class=\"sy0\">=</span> <span class=\"br0\">(</span>val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">if</span> xv <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>  <span class=\"co1\"># make sure this path hasn't already gone there</span><br/>            ancestor <span class=\"sy0\">:=</span> self<br/>            <span class=\"kw1\">while</span> xl <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>ancestor <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>ancestor<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">=</span> c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>            <span class=\"kw1\">return</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><br/>    val <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> best <span class=\"sy0\">:=</span> self<br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goNorth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goNE<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>    self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goEast<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goSE<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>    self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goSouth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goSW<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>    self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goWest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> goNW<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>    self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 105, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Hidato <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> board<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> given, start<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> input <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"_ 33 35 _ _ . . .\"</span>,<br/>            <span class=\"st0\">\"_ _ 24 22 _ . . .\"</span>,<br/>            <span class=\"st0\">\"_ _ _ 21 _ _ . .\"</span>,<br/>            <span class=\"st0\">\"_ 26 _ 13 40 11 . .\"</span>,<br/>            <span class=\"st0\">\"27 _ _ _ 9 _ 1 .\"</span>,<br/>            <span class=\"st0\">\". . _ _ 18 _ _ .\"</span>,<br/>            <span class=\"st0\">\". . . . _ 7 _ _\"</span>,<br/>            <span class=\"st0\">\". . . . . . 5 _\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        setup<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Found:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        solve<span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, start<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> setup<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* This task is not about input validation, so<br/>           we're going to trust the input to be valid */</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> puzzle <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>input.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            puzzle<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> nCols <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nRows <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span>nRows <span class=\"sy0\">*</span> nCols<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        board <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>nRows <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>nCols <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> board<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                row<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> nRows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cell <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> <span class=\"st0\">\"_\"</span><span class=\"sy0\">:</span><br/>                        board<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw4\">int</span> val <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        board<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>                        list.<span class=\"me1\">add</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>val <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                            start <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        given <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> given.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            given<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> list.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> given<span class=\"br0\">[</span>given.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> given<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> back <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>            next<span class=\"sy0\">++;</span><br/>\u00a0<br/>        board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r <span class=\"sy0\">+</span> i, c <span class=\"sy0\">+</span> j, n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, next<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">:</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" . \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"%2d \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"__ \"</span>, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 75, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> board<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> given<span class=\"sy0\">:</span> IntArray<br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> start<span class=\"sy0\">:</span> IntArray<br/>\u00a0<br/>fun setUp<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nRows <span class=\"sy0\">=</span> input.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> puzzle <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span> input<span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nCols <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    board <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>nRows + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>nCols + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> row <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span>r<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span> until nCols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cell <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cell <span class=\"sy0\">==</span> <span class=\"st0\">\"_\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                board<span class=\"br0\">[</span>r + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cell <span class=\"sy0\">!=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> cell.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                board<span class=\"br0\">[</span>r + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>                list.<span class=\"me1\">add</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> start <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span>r + <span class=\"nu0\">1</span>, c + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    list.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    given <span class=\"sy0\">=</span> list.<span class=\"me1\">toIntArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int, next<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> given<span class=\"br0\">[</span>given.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> back <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> back <span class=\"sy0\">!=</span> n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> given<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> next2 <span class=\"sy0\">=</span> next<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> next2++<br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in -<span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in -<span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r + i, c + j, n + <span class=\"nu0\">1</span>, next2<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\" . \"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"%2d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"__ \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> input <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"_ 33 35 _ _ . . .\"</span>,<br/>        <span class=\"st0\">\"_ _ 24 22 _ . . .\"</span>,<br/>        <span class=\"st0\">\"_ _ _ 21 _ _ . .\"</span>,<br/>        <span class=\"st0\">\"_ 26 _ 13 40 11 . .\"</span>,<br/>        <span class=\"st0\">\"27 _ _ _ 9 _ 1 .\"</span>,<br/>        <span class=\"st0\">\". . _ _ 18 _ _ .\"</span>,<br/>        <span class=\"st0\">\". . . . _ 7 _ _\"</span>,<br/>        <span class=\"st0\">\". . . . . . 5 _\"</span><br/>    <span class=\"br0\">)</span><br/>    setUp<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Found:\"</span><span class=\"br0\">)</span><br/>    solve<span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, start<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathprog", "loc": 64, "block": "<pre class=\"text highlighted_source\">/*Hidato.mathprog, part of KuKu by Nigel Galloway<br/>\u00a0<br/>  Find a solution to a Hidato problem<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"410f2826242d1e06202d2d2e362038012e312433202c20282d6f222e2c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  April 1st., 2011<br/>*/<br/>\u00a0<br/>param ZBLS;<br/>param ROWS;<br/>param COLS;<br/>param D\u00a0:= 1;<br/>set ROWSR\u00a0:= 1..ROWS;<br/>set COLSR\u00a0:= 1..COLS;<br/>set ROWSV\u00a0:= (1-D)..(ROWS+D);<br/>set COLSV\u00a0:= (1-D)..(COLS+D);<br/>param Iz{ROWSR,COLSR}, integer, default 0;<br/>set ZBLSV\u00a0:= 1..(ZBLS+1);<br/>set ZBLSR\u00a0:= 1..ZBLS;<br/>\u00a0<br/>var BR{ROWSV,COLSV,ZBLSV}, binary;<br/>\u00a0<br/>void0{r in ROWSV, z in ZBLSR,c in (1-D)..0}: BR[r,c,z] = 0;<br/>void1{r in ROWSV, z in ZBLSR,c in (COLS+1)..(COLS+D)}: BR[r,c,z] = 0;<br/>void2{c in COLSV, z in ZBLSR,r in (1-D)..0}: BR[r,c,z] = 0;<br/>void3{c in COLSV, z in ZBLSR,r in (ROWS+1)..(ROWS+D)}: BR[r,c,z] = 0;<br/>void4{r in ROWSV,c in (1-D)..0}: BR[r,c,ZBLS+1] = 1;<br/>void5{r in ROWSV,c in (COLS+1)..(COLS+D)}: BR[r,c,ZBLS+1] = 1;<br/>void6{c in COLSV,r in (1-D)..0}: BR[r,c,ZBLS+1] = 1;<br/>void7{c in COLSV,r in (ROWS+1)..(ROWS+D)}: BR[r,c,ZBLS+1] = 1;<br/>\u00a0<br/>Izfree{r in ROWSR, c in COLSR, z in ZBLSR\u00a0: Iz[r,c] = -1}: BR[r,c,z] = 0;<br/>Iz1{Izr in ROWSR, Izc in COLSR, r in ROWSR, c in COLSR, z in ZBLSR\u00a0: Izr=r and Izc=c and Iz[Izr,Izc]=z}: BR[r,c,z] = 1;<br/>\u00a0<br/>rule1{z in ZBLSR}: sum{r in ROWSR, c in COLSR} BR[r,c,z] = 1;<br/>rule2{r in ROWSR, c in COLSR}: sum{z in ZBLSV} BR[r,c,z] = 1;<br/>rule3{r in ROWSR, c in COLSR, z in ZBLSR}: BR[0,0,z+1] + BR[r-1,c-1,z+1] + BR[r-1,c,z+1] + BR[r-1,c+1,z+1] + BR[r,c-1,z+1] + BR[r,c+1,z+1] + BR[r+1,c-1,z+1] + BR[r+1,c,z+1] + BR[r+1,c+1,z+1] - BR[r,c,z] &gt;= 0;<br/>\u00a0<br/>solve;<br/>\u00a0<br/>for {r in ROWSR} {<br/>    for {c in COLSR} {<br/>        printf \"\u00a0%2d\", sum{z in ZBLSR} BR[r,c,z]*z;<br/>    }<br/>    printf \"\\n\";<br/>}<br/>data;<br/>\u00a0<br/>param ROWS\u00a0:= 8;<br/>param COLS\u00a0:= 8;<br/>param ZBLS\u00a0:= 40;<br/>param<br/>Iz: 1   2   3   4   5   6   7   8\u00a0:=<br/> 1  .  33  35   .   .  -1  -1  -1<br/> 2  .   .  24  22   .  -1  -1  -1<br/> 3  .   .   .  21   .   .  -1  -1<br/> 4  .  26   .  13  40  11  -1  -1<br/> 5 27   .   .   .   9   .   1  -1 <br/> 6 -1  -1   .   .  18   .   .  -1 <br/> 7 -1  -1  -1  -1   .   7   .   .<br/> 8 -1  -1  -1  -1  -1  -1   5   . <br/>\u00a0;<br/>\u00a0<br/> end;</pre>"}, {"lang": "Nim", "loc": 80, "block": "<pre class=\"text highlighted_source\">import strutils, algorithm<br/>\u00a0<br/>var board: array[0..19, array[0..19, int]]<br/>var given, start: seq[int] = @[]<br/>var rows, cols: int = 0<br/>\u00a0<br/>proc setup(s: string) =<br/>    var lines = s.splitLines()<br/>    cols = lines[0].split().len()<br/>    rows = lines.len()<br/>\u00a0<br/>    for i in 0 .. rows + 1:<br/>        for j in 0 .. cols + 1:<br/>           board[i][j] = -1<br/>\u00a0<br/>    for r, row in pairs(lines):<br/>        for c, cell in pairs(row.split()):<br/>            case cell<br/>            of \"__\"\u00a0: <br/>                board[r + 1][c + 1] = 0<br/>                continue<br/>            of \".\"\u00a0: continue<br/>            else\u00a0:<br/>               var val = parseInt(cell)<br/>               board[r + 1][c + 1] = val<br/>               given.add(val)<br/>               if (val == 1): <br/>                   start.add(r + 1)<br/>                   start.add(c + 1)<br/>    given.sort(cmp[int], Ascending)<br/>\u00a0<br/>proc solve(r, c, n: int, next: int = 0): bool =<br/>    if n &gt; given[high(given)]:<br/>       return true<br/>    if board[r][c] &lt; 0:<br/>        return false<br/>    if (board[r][c] &gt; 0 and board[r][c]\u00a0!= n):<br/>        return false<br/>    if (board[r][c] == 0 and given[next] == n):<br/>        return false<br/>\u00a0<br/>    var back = board[r][c]<br/>    board[r][c] = n<br/>    for i in -1 .. 1:<br/>        for j in -1 .. 1:<br/>            if back == n:<br/>                if (solve(r + i, c + j, n + 1, next + 1)):  return true<br/>            else:<br/>                if (solve(r + i, c + j, n + 1, next)): return true<br/>    board[r][c] = back<br/>    result = false<br/>\u00a0<br/>\u00a0<br/>proc printBoard() =<br/>    for r in  0 .. rows + 1:<br/>        for cellid,c in pairs(board[r]):<br/>            if cellid &gt; cols + 1: break<br/>            if c == -1:<br/>                write(stdout, \" . \")<br/>            elif c == 0:<br/>                write(stdout, \"__ \")<br/>            else:<br/>                write(stdout, \"$# \"\u00a0% align($c,2))<br/>        writeLine(stdout, \"\")<br/>\u00a0<br/>var hi: string = \"\"\"__ 33 35 __ __  .  .  .<br/>__ __ 24 22 __  .  .  .<br/>__ __ __ 21 __ __  .  .<br/>__ 26 __ 13 40 11  .  .<br/>27 __ __ __  9 __  1  .<br/>.  . __ __ 18 __ __  .<br/>.  .  .  . __  7 __ __<br/>.  .  .  .  .  .  5 __\"\"\"<br/>\u00a0<br/>setup(hi)<br/>printBoard()<br/>echo(\"\")<br/>echo(\"Found:\")<br/>discard solve(start[0], start[1], 1)<br/>printBoard()</pre>"}, {"lang": "Perl", "loc": 84, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'max'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">our</span> <span class=\"br0\">(</span><span class=\"re0\">@grid</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> show_board <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"br0\">(</span><span class=\"re0\">@grid</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span>\t<span class=\"sy0\">?</span> <span class=\"st_h\">'   '</span> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><br/>\t\t\t\t\t<span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"sy0\">:</span> <span class=\"st_h\">' __'</span><br/>\t\t\t<span class=\"sy0\">,</span> <span class=\"re0\">@$r</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> parse_board <span class=\"br0\">{</span><br/>\t<span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">{</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"co2\">/^_/</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#grid</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw1\">and</span> <span class=\"re0\">$known</span><span class=\"br0\">[</span><span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$y,$x\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$n</span> <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> max <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"re0\">@grid</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> neighbors <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@out</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>\t<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>\t   <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$y1,$x1\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">@out</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> try_fill <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span>\t<span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a>\t<span class=\"kw1\">if</span> <span class=\"re0\">$old</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a>\t<span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">$known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[0H\"</span><span class=\"sy0\">;</span><br/>\tshow_board<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ttry_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">for</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>parse_board <br/><span class=\"co1\">#\t\". 4 .</span><br/><span class=\"co1\">#\t _ 7 _</span><br/><span class=\"co1\">#\t 1 _ _\";</span><br/>\u00a0<br/><span class=\"co1\">#\t\" 1 _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . 74</span><br/><span class=\"co1\">#\t  . . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _ . _</span><br/><span class=\"co1\">#\t  . . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _ . . _ _</span><br/><span class=\"co1\">#\t\";</span><br/>\u00a0<br/>\t<span class=\"st0\">\"__ 33 35 __ __ .. .. .. .<br/>\t __ __ 24 22 __ .. .. .. .<br/>\t __ __ __ 21 __ __ .. .. .<br/>\t __ 26 __ 13 40 11 .. .. .<br/>\t 27 __ __ __  9 __  1 .. .<br/>\t .   . __ __ 18 __ __ .. .<br/>\t .  ..  .  . __  7 __ __ .<br/>\t .  .. .. ..  .  .  5 __ .\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[2J\"</span><span class=\"sy0\">;</span><br/>try_fill<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 98, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@adjacent</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>          <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>        __ <span class=\"nu0\">33</span> <span class=\"nu0\">35</span> __ __ <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span><br/>        __ __ <span class=\"nu0\">24</span> <span class=\"nu0\">22</span> __ <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span><br/>        __ __ __ <span class=\"nu0\">21</span> __ __ <span class=\"sy0\">..</span> <span class=\"sy0\">..</span><br/>        __ <span class=\"nu0\">26</span> __ <span class=\"nu0\">13</span> <span class=\"nu0\">40</span> <span class=\"nu0\">11</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span><br/>        <span class=\"nu0\">27</span> __ __ __  <span class=\"nu0\">9</span> __  <span class=\"nu0\">1</span> <span class=\"sy0\">..</span><br/>        <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> __ __ <span class=\"nu0\">18</span> __ __ <span class=\"sy0\">..</span><br/>        <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> __  <span class=\"nu0\">7</span> __ __<br/>        <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span> <span class=\"sy0\">..</span>  <span class=\"nu0\">5</span> __<br/>        <span class=\"kw2\">END</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solveboard<span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@known</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@neigh</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@degree</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"co2\">/^_/</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">??</span> Rat <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span> <span class=\"sy0\">--&gt;</span> List<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eager gather <span class=\"kw1\">for</span> <span class=\"re0\">@adjacent</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            take <span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">defined</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H<span class=\"es0\">\\e</span>[0J\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    try_fill <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> try_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tries</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">$old</span> <span class=\"kw1\">and</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span>               <span class=\"co1\"># conjecture grid value</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H\"</span><span class=\"sy0\">;</span>                    <span class=\"co1\"># show conjectured board</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Rat <span class=\"br0\">{</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"nu0\">0</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'_'</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span>  <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$width}d\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># conjecture new degrees</span><br/>            <span class=\"kw3\">push</span> <span class=\"re0\">@degrees</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<span class=\"sy0\">;</span>         <span class=\"co1\"># and categorize by degree</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">defined</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ties</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@ties</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">{</span>           <span class=\"co1\"># reverse works better for this hidato anyway</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> try_fill <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>          <span class=\"co1\"># undo degree conjectures</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span>             <span class=\"co1\"># undo grid value conjecture</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$tries tries\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 174, "block": "<pre class=\"text highlighted_source\">sequence board, warnsdorffs, knownx, knowny<br/>\u00a0<br/>integer width, height, limit, nchars, tries<br/>string fmt, blank<br/>\u00a0<br/>constant ROW = 1, COL = 2<br/>constant moves = {{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}}<br/>\u00a0<br/>function onboard(integer row, integer col)<br/>    return row&gt;=1 and row&lt;=height and col&gt;=nchars and col&lt;=nchars*width<br/>end function<br/>\u00a0<br/>procedure init_warnsdorffs()<br/>integer nrow,ncol<br/>    for row=1 to height do<br/>        for col=nchars to nchars*width by nchars do<br/>            for move=1 to length(moves) do<br/>                nrow = row+moves[move][ROW]<br/>                ncol = col+moves[move][COL]*nchars<br/>                if onboard(nrow,ncol)<br/>                and board[nrow][ncol]='_' then<br/>                    warnsdorffs[nrow][ncol] += 1<br/>                end if<br/>            end for<br/>        end for<br/>    end for<br/>end procedure<br/>\u00a0<br/>function solve(integer row, integer col, integer n)<br/>integer nrow, ncol<br/>    tries+= 1<br/>    if n&gt;limit then return 1 end if<br/>    if knownx[n] then<br/>        for move=1 to length(moves) do<br/>            nrow = row+moves[move][ROW]<br/>            ncol = col+moves[move][COL]*nchars<br/>            if nrow = knownx[n]<br/>            and ncol = knowny[n] then<br/>                if solve(nrow,ncol,n+1) then return 1 end if<br/>                exit<br/>            end if<br/>        end for<br/>        return 0<br/>    end if<br/>    sequence wmoves = {}<br/>    for move=1 to length(moves) do<br/>        nrow = row+moves[move][ROW]<br/>        ncol = col+moves[move][COL]*nchars<br/>        if onboard(nrow,ncol)<br/>        and board[nrow][ncol]='_' then<br/>            wmoves = append(wmoves,{warnsdorffs[nrow][ncol],nrow,ncol})<br/>        end if<br/>    end for<br/>    wmoves = sort(wmoves)<br/>    -- avoid creating orphans<br/>    if length(wmoves)&lt;2 or wmoves[2][1]&gt;1 then<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            warnsdorffs[nrow][ncol] -= 1<br/>        end for<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            board[nrow][ncol-nchars+1..ncol] = sprintf(fmt,n)<br/>            if solve(nrow,ncol,n+1) then return 1 end if<br/>            board[nrow][ncol-nchars+1..ncol] = blank<br/>        end for<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            warnsdorffs[nrow][ncol] += 1<br/>        end for<br/>    end if<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure Hidato(sequence s, integer w, integer h, integer lim)<br/>integer y, ch, ch2, k<br/>atom t0 = time()<br/>    s = split(s,'\\n')<br/>    width = w<br/>    height = h<br/>    nchars = length(sprintf(\"\u00a0%d\",lim))<br/>    fmt = sprintf(\"\u00a0%%%dd\",nchars-1)<br/>    blank = repeat('_',nchars)<br/>    board = repeat(repeat(' ',width*nchars),height)<br/>    knownx = repeat(0,lim)<br/>    knowny = repeat(0,lim)<br/>    limit = 0<br/>    for x=1 to height do<br/>        for y=nchars to width*nchars by nchars do<br/>            if y&gt;length(s[x]) then<br/>                ch = '.'<br/>            else<br/>                ch = s[x][y]<br/>            end if<br/>            if ch='_' then<br/>                limit += 1<br/>            elsif ch!='.' then<br/>                k = ch-'0'<br/>                ch2 = s[x][y-1]<br/>                if ch2!=' ' then<br/>                    k += (ch2-'0')*10<br/>                    board[x][y-1] = ch2<br/>                end if<br/>                knownx[k] = x<br/>                knowny[k] = y<br/>                limit += 1<br/>            end if<br/>            board[x][y] = ch<br/>        end for<br/>    end for<br/>    warnsdorffs = repeat(repeat(0,width*nchars),height)<br/>    init_warnsdorffs()<br/>    tries = 0<br/>    if solve(knownx[1],knowny[1],2) then<br/>        puts(1,join(board,\"\\n\"))<br/>        printf(1,\"\\nsolution found in\u00a0%d tries (%3.2fs)\\n\",{tries,time()-t0})<br/>    else<br/>        puts(1,\"no solutions found\\n\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant board1 = \"\"\"<br/> __ 33 35 __ __ .. .. ..<br/> __ __ 24 22 __ .. .. ..<br/> __ __ __ 21 __ __ .. ..<br/> __ 26 __ 13 40 11 .. ..<br/> 27 __ __ __  9 __  1 ..<br/> .. .. __ __ 18 __ __ ..<br/> .. .. .. .. __  7 __ __<br/> .. .. .. .. .. ..  5 __\"\"\"<br/>Hidato(board1,8,8,40)<br/>\u00a0<br/>constant board2 = \"\"\"<br/> . 4 .<br/> _ 7 _<br/> 1 _ _\"\"\"<br/>Hidato(board2,3,3,7)<br/>\u00a0<br/>constant board3 = \"\"\"<br/>  1  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  . 74<br/>  .  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .  _  .<br/>  .  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .  .  _  _  .\"\"\"<br/>Hidato(board3,50,3,74)<br/>\u00a0<br/>constant board4 = \"\"\"<br/> 54 __ 60 59 __ 67 __ 69 __<br/> __ 55 __ __ 63 65 __ 72 71<br/> 51 50 56 62 __ .. .. .. ..<br/> __ __ __ 14 .. .. 17 __ ..<br/> 48 10 11 .. 15 __ 18 __ 22<br/> __ 46 __ ..  3 __ 19 23 __<br/> __ 44 __  5 __  1 33 32 __<br/> __ 43  7 __ 36 __ 27 __ 31<br/> 42 __ __ 38 __ 35 28 __ 30\"\"\"<br/>Hidato(board4,9,9,72)<br/>\u00a0<br/>constant board5 = \"\"\"<br/> __ 58 __ 60 __ __ 63 66 __<br/> 57 55 59 53 49 __ 65 __ 68<br/> __  8 __ __ 50 __ 46 45 __<br/> 10  6 __ .. .. .. __ 43 70<br/> __ 11 12 .. .. .. 72 71 __<br/> __ 14 __ .. .. .. 30 39 __<br/> 15  3 17 __ 28 29 __ __ 40<br/> __ __ 19 22 __ __ 37 36 __<br/>  1 20 __ 24 __ 26 __ 34 33\"\"\"<br/>Hidato(board5,9,9,72)<br/>\u00a0<br/>constant board6 = \"\"\"<br/>  1 __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. __ __ .. .. .. 82<br/> .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ ..<br/> .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. .. __ .. __ .. ..<br/> __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. __ __ __ .. .. ..\"\"\"<br/>Hidato(board6,46,4,82)</pre>"}, {"lang": "PicoLisp", "loc": 45, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de hidato (Lst)<br/>   (let Grid (grid (length (maxi length Lst)) (length Lst))<br/>      (mapc<br/>         '((G L)<br/>            (mapc<br/>               '((This Val)<br/>                  (nond<br/>                     (Val<br/>                        (with (: 0 1 1) (con (: 0 1)))    # Cut off west<br/>                        (with (: 0 1 -1) (set (: 0 1)))   # east<br/>                        (with (: 0 -1 1) (con (: 0 -1)))  # south<br/>                        (with (: 0 -1 -1) (set (: 0 -1))) # north<br/>                        (set This) )<br/>                     ((=T Val) (=: val Val)) ) )<br/>               G L ) )<br/>         Grid<br/>         (apply mapcar (reverse Lst) list) )<br/>      (let Todo<br/>         (by '((This) (: val)) sort<br/>            (mapcan '((Col) (filter '((This) (: val)) Col))<br/>               Grid ) )<br/>         (let N 1<br/>            (with (pop 'Todo)<br/>               (recur (N Todo)<br/>                  (unless (&gt; (inc 'N) (; Todo 1 val))<br/>                     (find<br/>                        '((Dir)<br/>                           (with (Dir This)<br/>                              (cond<br/>                                 ((= N (: val))<br/>                                    (if (cdr Todo) (recurse N @) T) )<br/>                                 ((not (: val))<br/>                                    (=: val N)<br/>                                    (or (recurse N Todo) (=: val NIL)) ) ) ) )<br/>                        (quote<br/>                           west east south north<br/>                           ((X) (or (south (west X)) (west (south X))))<br/>                           ((X) (or (north (west X)) (west (north X))))<br/>                           ((X) (or (south (east X)) (east (south X))))<br/>                           ((X) (or (north (east X)) (east (north X)))) ) ) ) ) ) ) )<br/>      (disp Grid 0<br/>         '((This)<br/>            (if (: val) (align 3 @) \"   \") ) ) ) )</pre>"}, {"lang": "Prolog", "loc": 100, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>hidato <span class=\"sy1\">:-</span><br/>\tinit1<span class=\"br0\">(</span>Li<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% skip first blank line</span><br/>\tinit2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> Li<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmy_write<span class=\"br0\">(</span>Li<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>init1<span class=\"br0\">(</span>Li<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLi <span class=\"sy6\">=</span> <span class=\"br0\">[</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t\t<span class=\"nu0\">0</span><span class=\"sy4\">,</span>  A<span class=\"sy4\">,</span> <span class=\"nu0\">33</span><span class=\"sy4\">,</span> <span class=\"nu0\">35</span><span class=\"sy4\">,</span>  B<span class=\"sy4\">,</span>  C<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  D<span class=\"sy4\">,</span>  E<span class=\"sy4\">,</span> <span class=\"nu0\">24</span><span class=\"sy4\">,</span> <span class=\"nu0\">22</span><span class=\"sy4\">,</span>  F<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  G<span class=\"sy4\">,</span>  H<span class=\"sy4\">,</span>  I<span class=\"sy4\">,</span> <span class=\"nu0\">21</span><span class=\"sy4\">,</span>  J<span class=\"sy4\">,</span>  K<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  L<span class=\"sy4\">,</span> <span class=\"nu0\">26</span><span class=\"sy4\">,</span>  M<span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"sy4\">,</span> <span class=\"nu0\">40</span><span class=\"sy4\">,</span> <span class=\"nu0\">11</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">27</span><span class=\"sy4\">,</span>  N<span class=\"sy4\">,</span>  O<span class=\"sy4\">,</span>  P<span class=\"sy4\">,</span>  <span class=\"nu0\">9</span><span class=\"sy4\">,</span>  Q<span class=\"sy4\">,</span>  <span class=\"nu0\">1</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  R<span class=\"sy4\">,</span>  S<span class=\"sy4\">,</span> <span class=\"nu0\">18</span><span class=\"sy4\">,</span>  T<span class=\"sy4\">,</span>  U<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  V<span class=\"sy4\">,</span>  <span class=\"nu0\">7</span><span class=\"sy4\">,</span>  W<span class=\"sy4\">,</span>  X<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">5</span><span class=\"sy4\">,</span>  Y<span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t        <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"sy4\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tLV <span class=\"sy6\">=</span> <span class=\"br0\">[</span>  A<span class=\"sy4\">,</span> <span class=\"nu0\">33</span><span class=\"sy4\">,</span> <span class=\"nu0\">35</span><span class=\"sy4\">,</span>  B<span class=\"sy4\">,</span>  C<span class=\"sy4\">,</span><br/>\t        D<span class=\"sy4\">,</span>  E<span class=\"sy4\">,</span> <span class=\"nu0\">24</span><span class=\"sy4\">,</span> <span class=\"nu0\">22</span><span class=\"sy4\">,</span>  F<span class=\"sy4\">,</span><br/>\t        G<span class=\"sy4\">,</span>  H<span class=\"sy4\">,</span>  I<span class=\"sy4\">,</span> <span class=\"nu0\">21</span><span class=\"sy4\">,</span>  J<span class=\"sy4\">,</span>  K<span class=\"sy4\">,</span><br/>\t        L<span class=\"sy4\">,</span> <span class=\"nu0\">26</span><span class=\"sy4\">,</span>  M<span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"sy4\">,</span> <span class=\"nu0\">40</span><span class=\"sy4\">,</span> <span class=\"nu0\">11</span><span class=\"sy4\">,</span><br/>\t       <span class=\"nu0\">27</span><span class=\"sy4\">,</span>  N<span class=\"sy4\">,</span>  O<span class=\"sy4\">,</span>  P<span class=\"sy4\">,</span>  <span class=\"nu0\">9</span><span class=\"sy4\">,</span>  Q<span class=\"sy4\">,</span>  <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t                R<span class=\"sy4\">,</span>  S<span class=\"sy4\">,</span> <span class=\"nu0\">18</span><span class=\"sy4\">,</span>  T<span class=\"sy4\">,</span>  U<span class=\"sy4\">,</span><br/>\t                        V<span class=\"sy4\">,</span>  <span class=\"nu0\">7</span><span class=\"sy4\">,</span>  W<span class=\"sy4\">,</span>  X<span class=\"sy4\">,</span><br/>\t\t\t\t\t<span class=\"nu0\">5</span><span class=\"sy4\">,</span>  Y<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\u00a0<br/>\tLV ins <span class=\"nu0\">1</span><span class=\"sy4\">..</span><span class=\"nu0\">40</span><span class=\"sy4\">,</span><br/>\tall_distinct<span class=\"br0\">(</span>LV<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% give the constraints</span><br/><span class=\"co1\">% Stop before the last line </span><br/>init2<span class=\"br0\">(</span>_N<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> Max_Col<span class=\"sy4\">,</span> _L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tCol <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Max_Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% skip zeros</span><br/>init2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">+</span> Lig <span class=\"sy3\">*</span> Col<span class=\"sy4\">,</span><br/>\telement<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   V <span class=\"sy6\">&gt;</span> Col <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> N1 <span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> Lig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> N1 <span class=\"sy6\">=</span> V<span class=\"sy4\">,</span> Lig1 <span class=\"sy6\">=</span> Lig<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tinit2<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% skip first column</span><br/>init2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tinit2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% skip last column</span><br/>init2<span class=\"br0\">(</span>Col<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tinit2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% V5 V3 V6</span><br/><span class=\"co1\">% V1  V V2</span><br/><span class=\"co1\">% V7 V4 V8</span><br/><span class=\"co1\">% general case</span><br/>init2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">+</span> Lig <span class=\"sy3\">*</span> Col<span class=\"sy4\">,</span><br/>\telement<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tI1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I  <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> I2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I  <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> I3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I  <span class=\"sy3\">-</span> Col<span class=\"sy4\">,</span> I4 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I  <span class=\"sy3\">+</span> Col<span class=\"sy4\">,</span><br/>\tI5 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I3 <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> I6 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I3 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> I7 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I4 <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span>   I8 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I4 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tmaplist<span class=\"br0\">(</span>compute_BI<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>I1<span class=\"sy4\">,</span>I2<span class=\"sy4\">,</span>I3<span class=\"sy4\">,</span>I4<span class=\"sy4\">,</span>I5<span class=\"sy4\">,</span>I6<span class=\"sy4\">,</span>I7<span class=\"sy4\">,</span>I8<span class=\"br0\">]</span><span class=\"sy4\">,</span> VI<span class=\"sy4\">,</span> BI<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsum<span class=\"br0\">(</span>BI<span class=\"sy4\">,</span> #<span class=\"sy6\">=</span><span class=\"sy4\">,</span> SBI<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>V #<span class=\"sy6\">=</span>  <span class=\"nu0\">1</span> #<span class=\"sy2\">\\/</span> V #<span class=\"sy6\">=</span>  <span class=\"nu0\">40</span><span class=\"br0\">)</span> #<span class=\"sy3\">/</span>\\ SBI #<span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> #<span class=\"sy2\">\\/</span><br/>\t    <span class=\"br0\">(</span>V #\\<span class=\"sy6\">=</span> <span class=\"nu0\">1</span> #<span class=\"sy3\">/</span>\\ V #\\<span class=\"sy6\">=</span> <span class=\"nu0\">40</span>  #<span class=\"sy3\">/</span>\\ SBI #<span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #<span class=\"sy6\">&lt;==&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tlabeling<span class=\"br0\">(</span><span class=\"br0\">[</span>ffc<span class=\"sy4\">,</span> enum<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V <span class=\"sy5\">|</span> VI<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tinit2<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_BI<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> VI<span class=\"sy4\">,</span> BI<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\telement<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> VI<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tVI #<span class=\"sy6\">=</span> <span class=\"nu0\">0</span> #<span class=\"sy6\">==&gt;</span> BI #<span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span> VI #\\<span class=\"sy6\">=</span> <span class=\"nu0\">0</span> #<span class=\"sy3\">/</span>\\ <span class=\"br0\">(</span>V <span class=\"sy3\">-</span> VI #<span class=\"sy6\">=</span> <span class=\"nu0\">1</span> #<span class=\"sy2\">\\/</span> VI <span class=\"sy3\">-</span> V #<span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  #<span class=\"sy6\">&lt;==&gt;</span> BI<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% display the result</span><br/>my_write<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> F<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>my_write_1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> F<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> H<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\tmy_write<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write_1<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'   '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write_1<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'%3r'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 69, "block": "<pre class=\"python highlighted_source\">board <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>given <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>start <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>\u00a0<br/><span class=\"kw1\">def</span> setup<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> board<span class=\"sy0\">,</span> given<span class=\"sy0\">,</span> start<br/>    lines <span class=\"sy0\">=</span> s.<span class=\"me1\">splitlines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ncols <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    nrows <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><br/>    board <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>ncols + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>nrows + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r<span class=\"sy0\">,</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span> cell <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>row.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> cell <span class=\"sy0\">==</span> <span class=\"st0\">\"__\"</span>\u00a0:<br/>                board<span class=\"br0\">[</span>r + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">elif</span> cell <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span>:<br/>                <span class=\"kw1\">continue</span> <span class=\"co1\"># -1</span><br/>            <span class=\"kw1\">else</span>:<br/>                val <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><br/>                board<span class=\"br0\">[</span>r + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<br/>                given.<span class=\"me1\">append</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> val <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                    start <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> c + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    given.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> next<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> given<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>    <span class=\"kw1\">if</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"kw1\">and</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> n:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">if</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> given<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>    back <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n:<br/>        next +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        back <span class=\"sy0\">=</span> n<br/>\u00a0<br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> solve<span class=\"br0\">(</span>r + i<span class=\"sy0\">,</span> c + j<span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> next<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>    board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_board<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    d <span class=\"sy0\">=</span> <span class=\"br0\">{</span>-<span class=\"nu0\">1</span>: <span class=\"st0\">\"  \"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span>: <span class=\"st0\">\"__\"</span><span class=\"br0\">}</span><br/>    bmax <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> board<span class=\"br0\">)</span><br/>    form <span class=\"sy0\">=</span> <span class=\"st0\">\"%\"</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>bmax<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"st0\">\"s\"</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> board<span class=\"br0\">[</span><span class=\"nu0\">1</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>form\u00a0% d.<span class=\"me1\">get</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>hi <span class=\"sy0\">=</span> <span class=\"st0\">\"\"\"<span class=\"es0\">\\</span><br/>__ 33 35 __ __  .  .  .<br/>__ __ 24 22 __  .  .  .<br/>__ __ __ 21 __ __  .  .<br/>__ 26 __ 13 40 11  .  .<br/>27 __ __ __  9 __  1  .<br/> .  . __ __ 18 __ __  .<br/> .  .  .  . __  7 __ __<br/> .  .  .  .  .  .  5 __\"\"\"</span><br/>\u00a0<br/>setup<span class=\"br0\">(</span>hi<span class=\"br0\">)</span><br/>print_board<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>solve<span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> start<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><br/>print_board<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 71, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math/array)<br/>\u00a0<br/>;#f = not a legal position, #t = blank position<br/>(define board<br/>  (array<br/>   #[#[#t 33 35 #t #t #f #f #f]<br/>     #[#t #t 24 22 #t #f #f #f]<br/>     #[#t #t #t 21 #t #t #f #f]<br/>     #[#t 26 #t 13 40 11 #f #f]<br/>     #[27 #t #t #t  9 #t  1 #f]<br/>     #[#f #f #t #t 18 #t #t #f]<br/>     #[#f #f #f #f #t  7 #t #t]<br/>     #[#f #f #f #f #f #f  5 #t]]))<br/>\u00a0<br/>;filters elements with the predicate, returning the element and its indices<br/>(define (array-indices-of a f)<br/>  (for*/list ([i (range 0 (vector-ref (array-shape a) 0))]<br/>              [j (range 0 (vector-ref (array-shape a) 1))]<br/>              #:when (f (array-ref a (vector i j))))<br/>    (list (array-ref a (vector i j)) i j)))<br/>\u00a0<br/>;returns a list, each element is a list of the number followed by i and j indices<br/>;sorted ascending by number<br/>(define (goal-list v) (sort (array-indices-of v number?) (\u03bb (a b) (&lt; (car a) (car b)))))<br/>\u00a0<br/>;every direction + start position that's on the board<br/>(define (legal-moves a i0 j0)<br/>  (for*/list ([i (range (sub1 i0) (+ i0 2))]<br/>              [j (range (sub1 j0) (+ j0 2))]<br/>             \u00a0;cartesian product -1..1 and -1..1, except 0 0<br/>              #:when (and (not (and (= i i0) (= j j0)))<br/>                         \u00a0;make sure it's on the board<br/>                          (&lt;= 0 i (sub1 (vector-ref (array-shape a) 0)))<br/>                          (&lt;= 0 j (sub1 (vector-ref (array-shape a) 1)))<br/>                         \u00a0;make sure it's an actual position too (the real board isn't square)<br/>                          (array-ref a (vector i j))))<br/>    (cons i j)))<br/>\u00a0<br/>;find path through array, returning list of coords from start to finish<br/>(define (hidato-path a)<br/> \u00a0;get starting position as first goal<br/>  (match-let ([(cons (list n i j) goals) (goal-list a)])<br/>    (let hidato ([goals goals] [n n] [i i] [j j] [path '()])<br/>      (match goals<br/>       \u00a0;no more goals, return path<br/>        ['() (reverse (cons (cons i j) path))]<br/>       \u00a0;get next goal<br/>        [(cons (list n-goal i-goal j-goal) _)<br/>         (let ([move (cons i j)])<br/>          \u00a0;already visiting a spot or taking too many moves to reach the next goal is no good<br/>           (cond [(or (member move path) (&gt; n n-goal)) #f]<br/>                \u00a0;taking the right number of moves to be at the goal square is good<br/>                \u00a0;so go to the next goal<br/>                 [(and (= n n-goal) (= i i-goal) (= j j-goal))<br/>                  (hidato (cdr goals) n i j path)]<br/>                \u00a0;depth first search using every legal move to find next goal<br/>                 [else (ormap (\u03bb (m) (hidato goals (add1 n) (car m) (cdr m) (cons move path)))<br/>                              (legal-moves a i j))]))]))))<br/>\u00a0<br/>;take a path and insert it into the array<br/>(define (put-path a path)<br/>  (let ([a (array-&gt;mutable-array a)])<br/>    (for ([n (range 1 (add1 (length path)))] [move path])<br/>      (array-set! a (vector (car move) (cdr move)) n))<br/>    a))<br/>\u00a0<br/>;main function<br/>(define (hidato board) (put-path board (hidato-path board)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 55, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves a  Numbrix (R) puzzle, it also displays the puzzle and solution.  */</span><br/>maxR=<span class=\"nu0\">0</span>;    maxC=<span class=\"nu0\">0</span>;    maxX=<span class=\"nu0\">0</span>;     minR=9e9;      minC=9e9;    minX=9e9;    cells=<span class=\"nu0\">0</span>;    @<span class=\"sy0\">.</span>=<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> xxx;        PZ=<span class=\"st0\">'Hidato puzzle'</span>         <span class=\"coMULTI\">/*get the cell definitions from the CL.*/</span><br/>xxx=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>xxx, , <span class=\"st0\">\"/\\;:_\"</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*also allow other characters as comma.*/</span><br/>\u00a0<br/>               <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> xxx<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  xxx    r c   marks  <span class=\"st0\">','</span>  xxx<br/>                   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> marks<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;          <a class=\"__cf_email__\" data-cfemail=\"0a55374a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<br/>                   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> marks  x  marks<br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  x=x<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                     <span class=\"coMULTI\">/*normalize X*/</span><br/>                                                 <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> PZ= <span class=\"st0\">'Numbrix puzzle'</span><br/>                                                 x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*use  \u2502x\u2502   */</span><br/>                                            <span class=\"kw3\">end</span><br/>                   minR=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minR,r<span class=\"br0\">)</span>;  maxR=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxR,r<span class=\"br0\">)</span>; minC=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minC,c<span class=\"br0\">)</span>; maxC=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxC,c<span class=\"br0\">)</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; \u00a0!r=r; \u00a0!c=c;  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*the START cell. */</span><br/>                   <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">\"cell at\"</span> r c <span class=\"st0\">'is already occupied with:'</span>  _<br/>                   @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=x;   c=c+<span class=\"nu0\">1</span>;    cells=cells+<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*assign a mark.  */</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"sy0\">.</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                  <span class=\"coMULTI\">/*is a hole?  Skip*/</span><br/>                   <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">'illegal marker specified:'</span> x<br/>                   minX=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minX,x<span class=\"br0\">)</span>;    maxX=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxX,x<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*min and max  X. */</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while marks\u00ac='' */</span><br/>               <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*while xxx  \u00ac='' */</span><br/><span class=\"kw1\">call</span> show                                        <span class=\"coMULTI\">/* [\u2193]  is used for making fast moves. */</span><br/>Nr = <span class=\"st0\">'0  1   0  -1    -1   1   1  -1'</span>            <span class=\"coMULTI\">/*possible  row     for the next move. */</span><br/>Nc = <span class=\"st0\">'1  0  -1   0     1  -1   1  -1'</span>            <span class=\"coMULTI\">/*   \"      column   \"   \"    \"    \"   */</span><br/>pMoves=<span class=\"kw6\">words</span><span class=\"br0\">(</span>Nr<span class=\"br0\">)</span> -<span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>PZ,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'N'</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*is this to be a Numbrix puzzle\u00a0?     */</span><br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves;   Nr<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nr,i<span class=\"br0\">)</span>;   Nc<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nc,i<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*for fast moves. */</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>next<span class=\"br0\">(</span><span class=\"nu0\">2</span>,!r,!c<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'No solution possible for this'</span>   PZ    <span class=\"st0\">\"puzzle.\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'A solution for the'</span>   PZ    <span class=\"st0\">\"exists.\"</span>;      <span class=\"kw1\">say</span>;                     <span class=\"kw1\">call</span> show<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>err:  <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"st0\">'***error*** (from'</span> PZ<span class=\"st0\">\"): \"</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;        <span class=\"kw1\">say</span>;          <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>next: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> Nr<span class=\"sy0\">.</span> Nc<span class=\"sy0\">.</span> cells pMoves;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #,r,c;   ##=#+<span class=\"nu0\">1</span><br/>           <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves                                   <span class=\"coMULTI\">/* [\u2193]  try some moves. */</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  r+Nr<span class=\"sy0\">.</span>t c+Nc<span class=\"sy0\">.</span>t  <span class=\"kw2\">with</span> nr nc               <span class=\"coMULTI\">/*next move co\u00f6rdinates.*/</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=#     <span class=\"coMULTI\">/*let's try this move.  */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>    <span class=\"coMULTI\">/*is this the last move?*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                               @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=<span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*undo the above move.  */</span><br/>                               <span class=\"kw1\">iterate</span>                          <span class=\"coMULTI\">/*go &amp; try another move.*/</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==#  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                               <span class=\"coMULTI\">/*this a fill-in move\u00a0? */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*this is the last move.*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*a fill-in move.       */</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                                  <span class=\"coMULTI\">/*this ain't working.   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show: <span class=\"kw1\">if</span> maxR<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> maxC<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no legal cell was specified.'</span><br/>      <span class=\"kw1\">if</span> minX<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no  1  was specified for the puzzle start'</span><br/>      w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw1\">do</span>    r=maxR  <span class=\"kw2\">to</span> minR  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>; _=<br/>                                  <span class=\"kw1\">do</span> c=minC  <span class=\"kw2\">to</span> maxC;        _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c,w<span class=\"br0\">)</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*c*/</span><br/>                               <span class=\"kw1\">say</span> _<br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>      <span class=\"kw1\">say</span>;    <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 55, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Solve a Hidato Puzzle</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">class</span> Hidato<br/>  Cell = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:value</span>, <span class=\"re3\">:used</span>, <span class=\"re3\">:adj</span><span class=\"br0\">)</span><br/>  ADJUST = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>board, pout=<span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@board</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    board.<span class=\"me1\">each_line</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>      <span class=\"re1\">@board</span> <span class=\"sy0\">&lt;&lt;</span> line.<span class=\"kw3\">split</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> Cell<span class=\"br0\">[</span><span class=\"kw3\">Integer</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"kw1\">rescue</span> <span class=\"kw2\">nil</span><span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"kw2\">nil</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re1\">@board</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                                <span class=\"co1\"># frame (Sentinel value\u00a0: nil)</span><br/>    <span class=\"re1\">@board</span>.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row, x<span class=\"sy0\">|</span><br/>      row.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>cell, y<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> cell<br/>          <span class=\"re1\">@sx</span>, <span class=\"re1\">@sy</span> = x, y  <span class=\"kw1\">if</span> cell.<span class=\"me1\">value</span>==<span class=\"nu0\">1</span>     <span class=\"co1\"># start position</span><br/>          cell.<span class=\"me1\">adj</span> = ADJUST.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>dx,dy<span class=\"sy0\">|</span> <span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dx,y<span class=\"sy0\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>xx,yy<span class=\"sy0\">|</span> <span class=\"re1\">@board</span><span class=\"br0\">[</span>xx<span class=\"br0\">]</span><span class=\"br0\">[</span>yy<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re1\">@xmax</span> = <span class=\"re1\">@board</span>.<span class=\"me1\">size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"re1\">@ymax</span> = <span class=\"re1\">@board</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:size<span class=\"br0\">)</span>.<span class=\"me1\">max</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    @<span class=\"kw1\">end</span>  = <span class=\"re1\">@board</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">compact</span>.<span class=\"me1\">size</span><br/>    <span class=\"kw3\">puts</span> to_s<span class=\"br0\">(</span><span class=\"st0\">'Problem:'</span><span class=\"br0\">)</span>  <span class=\"kw1\">if</span> pout<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> solve<br/>    <span class=\"re1\">@zbl</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>@<span class=\"kw1\">end</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@board</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">compact</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>cell<span class=\"sy0\">|</span> <span class=\"re1\">@zbl</span><span class=\"br0\">[</span>cell.<span class=\"me1\">value</span><span class=\"br0\">]</span> = <span class=\"kw2\">true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">puts</span> <span class=\"br0\">(</span>try<span class=\"br0\">(</span>@board<span class=\"br0\">[</span>@sx<span class=\"br0\">]</span><span class=\"br0\">[</span>@sy<span class=\"br0\">]</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? to_s<span class=\"br0\">(</span><span class=\"st0\">'Solution:'</span><span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"No solution\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> try<span class=\"br0\">(</span>cell, seq_num<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">true</span>  <span class=\"kw1\">if</span> seq_num <span class=\"sy0\">&gt;</span> @<span class=\"kw1\">end</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> cell.<span class=\"me1\">used</span><br/>    value = cell.<span class=\"me1\">value</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> value <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> value\u00a0!= seq_num<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> value == <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"re1\">@zbl</span><span class=\"br0\">[</span>seq_num<span class=\"br0\">]</span><br/>    cell.<span class=\"me1\">used</span> = <span class=\"kw2\">true</span><br/>    cell.<span class=\"me1\">adj</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> try<span class=\"br0\">(</span>@board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>, seq_num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        cell.<span class=\"me1\">value</span> = seq_num<br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    cell.<span class=\"me1\">used</span> = <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<span class=\"br0\">(</span>msg=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><br/>    str = <span class=\"br0\">(</span><span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"2a0404046a52474b52\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"735d5d5d330a1e120b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> <span class=\"st0\">\"%3s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"e380dea3818c829187\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? c.<span class=\"me1\">value</span>\u00a0: c<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"br0\">(</span>msg\u00a0? <span class=\"br0\">[</span>msg<span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> str <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Seed7", "loc": 100, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>var set of integer: given is {};<br/>var array array integer: board is 0 times 0 times 0;<br/>var integer: startRow is 0;<br/>var integer: startColumn is 0;<br/>\u00a0<br/>const proc: setup (in array string: input) is func<br/>  local<br/>    var integer: r is 0;<br/>    var integer: c is 0;<br/>    var array string: row is 0 times \"\";<br/>    var string: cell is \"\";<br/>    var integer: value is 0;<br/>  begin<br/>    board\u00a0:= (length(input) + 2) times 0 times 0;<br/>    for key r range input do<br/>      row\u00a0:= split(input[r], \" \");<br/>      board[r + 1]\u00a0:= (length(row) + 2) times - 1;<br/>      for key c range row do<br/>        cell\u00a0:= row[c];<br/>        if cell = \"_\" then<br/>          board[r + 1][c + 1]\u00a0:= 0;<br/>        elsif cell[1] in {'0' .. '9'} then<br/>          value\u00a0:= integer parse cell;<br/>          board[r + 1][c + 1]\u00a0:= value;<br/>          incl(given, value);<br/>          if value = 1 then<br/>            startRow\u00a0:= r + 1;<br/>            startColumn\u00a0:= c + 1;<br/>          end if;<br/>        end if;<br/>      end for;<br/>    end for;<br/>    board[1]\u00a0:= (length(row) + 2) times - 1;<br/>    board[length(input) + 2]\u00a0:= (length(row) + 2) times - 1;<br/>  end func;<br/>\u00a0<br/>const func boolean: solve (in integer: r, in integer: c, in integer: n) is func<br/>  result<br/>    var boolean: solved is FALSE;<br/>  local<br/>    var integer: back is 0;<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>  begin<br/>    if n &gt; max(given) then<br/>      solved\u00a0:= TRUE;<br/>    elsif board[r][c] = 0 and n not in given or board[r][c] = n then<br/>      back\u00a0:= board[r][c];<br/>      board[r][c]\u00a0:= n;<br/>      for i range -1 to 1 until solved do<br/>        for j range -1 to 1 until solved do<br/>          solved\u00a0:= solve(r + i, c + j, n + 1);<br/>        end for;<br/>      end for;<br/>      if not solved then<br/>        board[r][c]\u00a0:= back;<br/>      end if;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: printBoard is func<br/>  local<br/>    var integer: r is 0;<br/>    var integer: c is 0;<br/>  begin<br/>    for key r range board do<br/>      for c range board[r] do<br/>        if c = -1 then<br/>          write(\" . \");<br/>        elsif c &gt; 0 then<br/>          write(c lpad 2 &lt;&amp; \" \");<br/>        else<br/>          write(\"__ \");<br/>        end if;<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array string: input is [] (\"_ 33 35 _ _ . . .\",<br/>                                     \"_ _ 24 22 _ . . .\",<br/>                                     \"_ _ _ 21 _ _ . .\",<br/>                                     \"_ 26 _ 13 40 11 . .\",<br/>                                     \"27 _ _ _ 9 _ 1 .\",<br/>                                     \". . _ _ 18 _ _ .\",<br/>                                     \". . . . _ 7 _ _\",<br/>                                     \". . . . . . 5 _\");<br/>  begin<br/>    setup(input);<br/>    printBoard;<br/>    writeln;<br/>    if solve(startRow, startColumn, 1) then<br/>      writeln(\"Found:\");<br/>      printBoard;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 110, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> init <span class=\"br0\">{</span>initialConfiguration<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid max filled<br/>    <span class=\"kw1\">set</span> max <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$initialConfiguration</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">set</span> rowcontents <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> cell <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is integer -strict <span class=\"re0\">$cell</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> cell -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> rowcontents <span class=\"re0\">$cell</span><br/>\t    <span class=\"kw1\">set</span> max <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"re0\">$max</span>, <span class=\"re0\">$cell</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tdict <span class=\"kw1\">set</span> filled <span class=\"re0\">$cell</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">incr</span> x<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> grid <span class=\"re0\">$rowcontents</span><br/>\t<span class=\"kw2\">incr</span> y<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> findseps <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> max filled<br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$max</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict exists <span class=\"re0\">$filled</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$max</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict exists <span class=\"re0\">$filled</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span>-<span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span>-<span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -index <span class=\"nu0\">2</span> <span class=\"re0\">$result</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> makepaths <span class=\"br0\">{</span>sep<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid filled<br/>    lassign <span class=\"re0\">$sep</span> from to len<br/>    lassign <span class=\"br0\">[</span>dict get <span class=\"re0\">$filled</span> <span class=\"re0\">$from</span><span class=\"br0\">]</span> y x<br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tdiscover <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$from</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$to</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$from</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$grid</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> discover <span class=\"br0\">{</span>x y n limit path model<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> filled<br/>    <span class=\"co1\"># Check for illegal</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$model</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> result result<br/>    lassign <span class=\"br0\">[</span>dict get <span class=\"re0\">$filled</span> <span class=\"re0\">$limit</span><span class=\"br0\">]</span> ly lx<br/>    <span class=\"co1\"># Special case</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"re0\">$limit</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$x</span>-<span class=\"re0\">$lx</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>=<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> abs<span class=\"br0\">(</span><span class=\"re0\">$y</span>-<span class=\"re0\">$ly</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>=<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$lx</span>==<span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ly</span>==<span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> path <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$n</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$limit</span> <span class=\"re0\">$lx</span> <span class=\"re0\">$ly</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Check for impossible</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$x</span>-<span class=\"re0\">$lx</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$limit</span>-<span class=\"re0\">$n</span> || abs<span class=\"br0\">(</span><span class=\"re0\">$y</span>-<span class=\"re0\">$ly</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$limit</span>-<span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"co1\"># Recursive search</span><br/>    <span class=\"kw2\">lappend</span> path <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$n</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> model <span class=\"re0\">$y</span> <span class=\"re0\">$x</span> <span class=\"re0\">$n</span><br/>    <span class=\"kw2\">incr</span> n<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tdiscover <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span> <span class=\"re0\">$limit</span> <span class=\"re0\">$path</span> <span class=\"re0\">$model</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> applypath <span class=\"br0\">{</span>path<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid filled<br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Found unique path for [lindex $path 0 0] -&gt; [lindex $path end 0]\"</span><br/>    <span class=\"kw1\">foreach</span> cell <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$path</span> <span class=\"nu0\">1</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$cell</span> n x y<br/>\t<span class=\"kw2\">lset</span> grid <span class=\"re0\">$y</span> <span class=\"re0\">$x</span> <span class=\"re0\">$n</span><br/>\tdict <span class=\"kw1\">set</span> filled <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> printgrid <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid max<br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> cell <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%*s\"</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$max</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$cell</span>==-<span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\".\"</span>\u00a0: <span class=\"re0\">$cell</span><br/>\t    <span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> solveHidato <span class=\"br0\">{</span>initialConfiguration<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    init <span class=\"re0\">$initialConfiguration</span><br/>    <span class=\"kw1\">set</span> limit <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span>findseps<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> seps <span class=\"br0\">[</span>findseps<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> limit -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> sep <span class=\"re0\">$seps</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>makepaths <span class=\"re0\">$sep</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tapplypath <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$paths</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    printgrid<br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 17, "block": "<pre class=\"text highlighted_source\">hi:=  // 0==empty cell, X==not a cell<br/>#&lt;&lt;&lt;<br/> \"0  33  35   0   0   X   X   X<br/>  0   0  24  22   0   X   X   X<br/>  0   0   0  21   0   0   X   X<br/>  0  26   0  13  40  11   X   X<br/> 27   0   0   0   9   0   1   X<br/>  X   X   0   0  18   0   0   X<br/>  X   X   X   X   0   7   0   0<br/>  X   X   X   X   X   X   5   0\";<br/>#&lt;&lt;&lt;<br/>\u00a0<br/>board,given,start:=setup(hi);<br/>print_board(board);<br/>solve(board,given, start.xplode(), 1);<br/>println();<br/>print_board(board);</pre>"}]}