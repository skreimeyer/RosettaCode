{"task": "Move-to-front_algorithm", "blocks": [{"lang": "Ada", "loc": 82, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Move_To_Front <span class=\"kw1\">is</span> <br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Lower_Case <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'a' .. 'z';<br/>   <span class=\"kw3\">subtype</span> Index <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">25</span>;<br/>   <span class=\"kw3\">type</span> Table <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Lower_Case;<br/>   Alphabet: <span class=\"kw3\">constant</span> Table\u00a0:= <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>;<br/>   <span class=\"kw3\">type</span> Number_String <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Encode<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number_String <span class=\"kw1\">is</span><br/>      Key: Table\u00a0:= Alphabet;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Encode<span class=\"br0\">(</span>S: String; Tab: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number_String <span class=\"kw1\">is</span><br/>\u00a0<br/>\t <span class=\"kw3\">procedure</span> Look_Up<span class=\"br0\">(</span>A: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Table; Ch: Lower_Case; Pos: <span class=\"kw3\">out</span> Index<span class=\"br0\">)</span> <span class=\"kw1\">is</span>  <br/>\t <span class=\"kw1\">begin</span><br/>\t    <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t       <span class=\"kw1\">if</span> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> = Ch <span class=\"kw1\">then</span> <br/>\t\t  Pos\u00a0:= I;<br/>\t\t  A\u00a0:= A<span class=\"br0\">(</span>Pos<span class=\"br0\">)</span> &amp; A<span class=\"br0\">(</span>A'First .. <span class=\"me1\">Pos</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; A<span class=\"br0\">(</span>Pos+<span class=\"nu0\">1</span> .. <span class=\"me1\">A</span>'Last<span class=\"br0\">)</span>;<br/>\t\t  <span class=\"kw1\">return</span>;<br/>\t       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t    <span class=\"kw3\">raise</span> Program_Error <span class=\"kw3\">with</span> <span class=\"st0\">\"unknown character\"</span>;<br/>\t <span class=\"kw1\">end</span> Look_Up;<br/>\u00a0<br/>\t Empty: Number_String<span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\t Result: Natural;   <br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw1\">if</span> S'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>\t    <span class=\"kw1\">return</span> Empty;<br/>\t <span class=\"kw1\">else</span><br/>\t    Look_Up<span class=\"br0\">(</span>Tab, S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span>, Result<span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">return</span> Result &amp; Encode<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span>, Tab<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Encode;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Encode<span class=\"br0\">(</span>S, Key<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Encode;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Decode<span class=\"br0\">(</span>N: Number_String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Key: Table\u00a0:= Alphabet;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Decode<span class=\"br0\">(</span>N: Number_String; Tab: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Table<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>\u00a0<br/>\t <span class=\"kw3\">procedure</span> Look_Up<span class=\"br0\">(</span>A: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Table; Pos: Index; Ch: <span class=\"kw3\">out</span> Lower_Case<span class=\"br0\">)</span> <span class=\"kw1\">is</span>  <br/>\t <span class=\"kw1\">begin</span><br/>\t    Ch\u00a0:= A<span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>;<br/>\t    A\u00a0:= A<span class=\"br0\">(</span>Pos<span class=\"br0\">)</span> &amp; A<span class=\"br0\">(</span>A'First .. <span class=\"me1\">Pos</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; A<span class=\"br0\">(</span>Pos+<span class=\"nu0\">1</span> .. <span class=\"me1\">A</span>'Last<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> Look_Up;<br/>\u00a0<br/>\t Result: String<span class=\"br0\">(</span>N'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> N'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t    Look_Up<span class=\"br0\">(</span>Tab, N<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Result<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">return</span> Result;<br/>      <span class=\"kw1\">end</span> Decode;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Decode<span class=\"br0\">(</span>N, Key<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Decode;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Encode_Write_Check<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      N: Number_String\u00a0:= Encode<span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>      T: String\u00a0:= Decode<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>      Check: String\u00a0:= <span class=\"br0\">(</span><span class=\"kw1\">if</span> S=T <span class=\"kw1\">then</span> <span class=\"st0\">\"Correct!\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"*WRONG*!\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> &amp; S &amp; <span class=\"st0\">\"' encodes to\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> Num <span class=\"kw3\">of</span> N <span class=\"kw1\">loop</span><br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Num<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\". This decodes to '\"</span> &amp; T &amp; <span class=\"st0\">\"'. \"</span> &amp; Check<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Encode_Write_Check;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Encode_Write_Check<span class=\"br0\">(</span><span class=\"st0\">\"broood\"</span><span class=\"br0\">)</span>;<br/>   Encode_Write_Check<span class=\"br0\">(</span><span class=\"st0\">\"bananaaa\"</span><span class=\"br0\">)</span>;<br/>   Encode_Write_Check<span class=\"br0\">(</span><span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Move_To_Front;</pre>"}, {"lang": "Aime", "loc": 48, "block": "<pre class=\"text highlighted_source\">text<br/>decode(list l)<br/>{<br/>    integer c, e, i;<br/>    text al, s;<br/>\u00a0<br/>    al = \"abcdefghijklmnopqrstuvwxyz\";<br/>    for (i, e in l) {<br/>        s = insert(s, -1, c = al[e]);<br/>        al = insert(delete(al, e), 0, c);<br/>    }<br/>\u00a0<br/>    s;<br/>}<br/>\u00a0<br/>list<br/>encode(text s)<br/>{<br/>    integer c, e;<br/>    text al;<br/>    list l;<br/>\u00a0<br/>    al = \"abcdefghijklmnopqrstuvwxyz\";<br/>    while (c = initial(s)) {<br/>        s = delete(s, 0);<br/>        l.append(e = place(al, c));<br/>        al = insert(delete(al, e), 0, c);<br/>    }<br/>\u00a0<br/>    l;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer i;<br/>    text s;<br/>\u00a0<br/>    for (i, s in list(\"broood\", \"bananaaa\", \"hiphophiphop\")) {<br/>        list l;<br/>\u00a0<br/>        l = encode(s);<br/>        l.ucall(o_, 1, \" \");<br/>        o_(\": \", decode(l), \"\\n\");<br/>    }<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 137, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># move the character at text pos to the front of text                         #</span><br/><span class=\"coMULTI\"># note text pos is based from 0                                               #</span><br/><span class=\"kw4\">PROC</span> move to front <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> text pos <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> text pos <span class=\"sy1\">&lt;</span> 1<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># the character is already at the front (or not in the string)        #</span><br/>        text<br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># the character isn't already at the front - construct the new string #</span><br/>\u00a0<br/>        <span class=\"kw3\">INT</span>    char pos <span class=\"sy1\">=</span> <span class=\"kw8\">LWB</span> text <span class=\"sy1\">+</span> text pos<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"br0\">(</span> text<span class=\"br0\">[</span> char pos     <span class=\"sy1\">:</span> char pos     <span class=\"br0\">]</span><br/>        <span class=\"sy1\">+</span> text<span class=\"br0\">[</span>              <span class=\"sy1\">:</span> char pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>        <span class=\"sy1\">+</span> text<span class=\"br0\">[</span> char pos <span class=\"sy1\">+</span> 1 <span class=\"sy1\">:</span>              <span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># encode the string \"text\", using \"initial table\" as the starting symbol table#</span><br/><span class=\"kw4\">PROC</span> encode <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> initial table <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> text <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> text <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">STRING</span> symbol table <span class=\"sy1\">:=</span> initial table<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> text pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> text <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> text<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">INT</span>    symbol pos <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/>        result<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span><br/>            <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> text<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span><span class=\"sy1\">,</span> symbol pos<span class=\"sy1\">,</span> symbol table <span class=\"br0\">)</span><br/>               <span class=\"kw2\">THEN</span><br/>                   <span class=\"coMULTI\"># the character is in the symbol table at symbol pos       #</span><br/>                   <span class=\"coMULTI\"># (indexed from LWB text) - we store the positions         #</span><br/>                   <span class=\"coMULTI\"># indexed from 0                                           #</span><br/>                   symbol pos <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> text<br/>               <span class=\"kw2\">ELSE</span><br/>                   <span class=\"coMULTI\"># the character isn't in the symbol table                  #</span><br/>                   <span class=\"sy1\">-</span>1<br/>               <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># modify the symbol table so the latest character is at the front     #</span><br/>        symbol table <span class=\"sy1\">:=</span> move to front<span class=\"br0\">(</span> symbol table<span class=\"sy1\">,</span> result<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    result<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># encode #</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># decode \"encoded\", using \"initial table\" as the starting symbol table        #</span><br/><span class=\"kw4\">PROC</span> decode <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> encoded<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> initial table <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw3\">STRING</span> result       <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> symbol table <span class=\"sy1\">:=</span> initial table<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> text pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> encoded <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> encoded<br/>    <span class=\"kw2\">DO</span><br/>        result<br/>           <span class=\"sy1\">+:=</span> <span class=\"kw2\">IF</span> encoded<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> 0<br/>               <span class=\"kw2\">THEN</span><br/>                   <span class=\"coMULTI\"># the encoded character wasn't in the string               #</span><br/>                   <span class=\"st0\">\"?\"</span><br/>               <span class=\"kw2\">ELSE</span><br/>                  <span class=\"coMULTI\"># the character is in the symbol table                      #</span><br/>                  symbol table<span class=\"br0\">[</span> encoded<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"kw8\">LWB</span> symbol table <span class=\"br0\">]</span><br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># modify the symbol table so the latest character is at the front     #</span><br/>        symbol table <span class=\"sy1\">:=</span> move to front<span class=\"br0\">(</span> symbol table<span class=\"sy1\">,</span> encoded<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    result<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># decode #</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># routine to test the encode and decode routines                              #</span><br/><span class=\"kw4\">PROC</span> test encode and decode <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># initial value for the symbol table                                      #</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> initial table <span class=\"sy1\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># procedure to format the encoded value                                   #</span><br/>    <span class=\"kw4\">PROC</span> format encoded value <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> values <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">STRING</span> result <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> value pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> values <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> values<br/>        <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> values<span class=\"br0\">[</span> value pos <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        result<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># format encoded value #</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span>  encoded <span class=\"sy1\">=</span> encode<span class=\"br0\">(</span> text<span class=\"sy1\">,</span>    initial table <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> decoded <span class=\"sy1\">=</span> decode<span class=\"br0\">(</span> encoded<span class=\"sy1\">,</span> initial table <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> text<br/>             <span class=\"sy1\">+</span> <span class=\"st0\">\" encodes to [\"</span><br/>             <span class=\"sy1\">+</span> format encoded value<span class=\"br0\">(</span> encoded <span class=\"br0\">)</span><br/>             <span class=\"sy1\">+</span> <span class=\"st0\">\" ] which \"</span><br/>             <span class=\"sy1\">+</span> <span class=\"kw2\">IF</span> text <span class=\"sy1\">=</span> decoded<br/>               <span class=\"kw2\">THEN</span><br/>                   <span class=\"st0\">\"correctly\"</span><br/>               <span class=\"kw2\">ELSE</span><br/>                   <span class=\"st0\">\"INCORRECTLY\"</span><br/>               <span class=\"kw2\">FI</span><br/>             <span class=\"sy1\">+</span> <span class=\"st0\">\" decodes to \"</span><span class=\"st0\">\"\"</span><br/>             <span class=\"sy1\">+</span> decoded<br/>             <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>             <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># test encode and decode #</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>\u00a0<br/>     test encode and decode<span class=\"br0\">(</span> <span class=\"st0\">\"broood\"</span> <span class=\"br0\">)</span><br/>  <span class=\"sy1\">;</span>  test encode and decode<span class=\"br0\">(</span> <span class=\"st0\">\"bananaaa\"</span> <span class=\"br0\">)</span><br/>  <span class=\"sy1\">;</span>  test encode and decode<span class=\"br0\">(</span> <span class=\"st0\">\"hiphophiphop\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">#\u00a0;  test encode and decode( \"abcdefghijklmnopqrstuvwxyz\" ) #</span><br/><span class=\"coMULTI\">#\u00a0;  test encode and decode( \"zyxwvutsrqponmlkjihgfedcba\" ) #</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">MTF_Encode<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstr <span class=\"sy0\">:=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> string<br/>\t\tcode <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\",\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"sy0\">,</span> str <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> StrReplace<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> code<br/><span class=\"br0\">}</span><br/>\u00a0<br/>MTF_Decode<span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstr <span class=\"sy0\">:=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> code<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\tstring <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>letter <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \t\t<span class=\"sy0\">,</span> str <span class=\"sy0\">:=</span> letter <span class=\"sy0\">.</span> StrReplace<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> letter<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> string<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 46, "block": "<pre class=\"text highlighted_source\">  ( encode<br/>  =   string symboltable<br/>    .  \u00a0!arg:(?string.?symboltable)<br/>      &amp;   vap<br/>        $ ( ( <br/>            =   A Z i<br/>              .  \u00a0!symboltable:?A [?i\u00a0!arg\u00a0?Z<br/>                &amp;\u00a0!arg\u00a0!A\u00a0!Z:?symboltable<br/>                &amp;\u00a0!i<br/>            )<br/>          .\u00a0!string<br/>          )<br/>  )<br/>&amp; ( decode<br/>  =   indices symboltable<br/>    .  \u00a0!arg:(?indices.?symboltable)<br/>      &amp;   str<br/>        $ ( map<br/>          $ ( ( <br/>              =   A Z symbol<br/>                .  \u00a0!symboltable:?A [!arg\u00a0%?symbol\u00a0?Z<br/>                  &amp;\u00a0!symbol\u00a0!A\u00a0!Z:?symboltable<br/>                  &amp;\u00a0!symbol<br/>              )<br/>            .\u00a0!indices<br/>            )<br/>          )<br/>  )<br/>&amp; ( test<br/>  =   string symboltable encoded decoded<br/>    .  \u00a0!arg:(?string.?symboltable)<br/>      &amp; put$str$(\"input:\"\u00a0!string \", \")<br/>      &amp; encode$(!string.!symboltable):?encoded<br/>      &amp; put$(\"encoded:\"\u00a0!encoded \", \")<br/>      &amp; decode$(!encoded.!symboltable):?decoded<br/>      &amp; put$str$(\"decoded:\"\u00a0!decoded \", \")<br/>      &amp; (  \u00a0!string:!decoded<br/>          &amp; out$OK<br/>        | out$WRONG<br/>        )<br/>  )<br/>&amp;   a b c d e f g h i j k l m n o p q r s t y v w x y z<br/> \u00a0:\u00a0?symboltable<br/>&amp; test$(broood.!symboltable)<br/>&amp; test$(bananaaa.!symboltable)<br/>&amp; test$(hiphophiphop.!symboltable)</pre>"}, {"lang": "C", "loc": 88, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_SIZE 100</span><br/>\u00a0<br/><span class=\"kw4\">int</span> move_to_front<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>q<span class=\"sy0\">,*</span>p<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> shift<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    p<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    q<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns pointer to location of char c in string str</span><br/>    shift<span class=\"sy0\">=</span>q<span class=\"sy0\">-</span>p<span class=\"sy0\">;</span>      <span class=\"co1\">// no of characters from 0 to position of c in str</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>shift<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//  printf(\"\\n%s\\n\",str);</span><br/>    <span class=\"kw1\">return</span> shift<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> decode<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span> pass<span class=\"sy0\">,</span><span class=\"kw4\">int</span> size<span class=\"sy0\">,</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sym<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>index<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> table<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>size<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        c<span class=\"sy0\">=</span>table<span class=\"br0\">[</span>pass<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        index<span class=\"sy0\">=</span>move_to_front<span class=\"br0\">(</span>table<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>pass<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>index<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"there is an error\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    sym<span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> encode<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sym<span class=\"sy0\">,</span><span class=\"kw4\">int</span> size<span class=\"sy0\">,</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>pass<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> table<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>size<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        c<span class=\"sy0\">=</span>sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        pass<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>move_to_front<span class=\"br0\">(</span>table<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> check<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sym<span class=\"sy0\">,</span><span class=\"kw4\">int</span> size<span class=\"sy0\">,</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>pass<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>pass2<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sym2<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>val<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    encode<span class=\"br0\">(</span>sym<span class=\"sy0\">,</span>size<span class=\"sy0\">,</span>pass2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>size <span class=\"sy0\">&amp;&amp;</span> pass<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span>pass2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>i<span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">!=</span>size<span class=\"br0\">)</span>val<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    decode<span class=\"br0\">(</span>pass<span class=\"sy0\">,</span>size<span class=\"sy0\">,</span>sym2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>sym<span class=\"sy0\">,</span>sym2<span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>val<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sym2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>pass2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> sym<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>MAX_SIZE<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"st0\">\"broood\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"bananaaa\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> pass<span class=\"br0\">[</span>MAX_SIZE<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>len<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        len<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        encode<span class=\"br0\">(</span>sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>len<span class=\"sy0\">,</span>pass<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0: [\"</span><span class=\"sy0\">,</span>sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span>pass<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>check<span class=\"br0\">(</span>sym<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>len<span class=\"sy0\">,</span>pass<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Correct\u00a0:)<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Incorrect\u00a0:(<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 84, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> MTF<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    string encode<span class=\"br0\">(</span> string str <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tfillSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> output<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> string<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> str.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">==</span> symbolTable<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    output.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    moveToFront<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tstring r<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> output.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> output.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    ostringstream ss<span class=\"sy4\">;</span><br/>\t    ss <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>it<span class=\"sy4\">;</span><br/>\t    r <span class=\"sy2\">+</span><span class=\"sy1\">=</span> ss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    string decode<span class=\"br0\">(</span> string str <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tfillSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tistringstream iss<span class=\"br0\">(</span> str <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> output<span class=\"sy4\">;</span><br/>\tcopy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> iss <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> output <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstring r<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> output.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> output.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    r.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>, symbolTable<span class=\"br0\">[</span><span class=\"sy2\">*</span>it<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    moveToFront<span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> moveToFront<span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> t <span class=\"sy1\">=</span> symbolTable<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> z <span class=\"sy1\">=</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> z <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> z<span class=\"sy2\">--</span> <span class=\"br0\">)</span><br/>\t    symbolTable<span class=\"br0\">[</span>z <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> symbolTable<span class=\"br0\">[</span>z<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        symbolTable<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> fillSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    symbolTable<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> symbolTable<span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    MTF mtf<span class=\"sy4\">;</span><br/>    string a, str<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"broood\"</span>, <span class=\"st0\">\"bananaaa\"</span>, <span class=\"st0\">\"hiphophiphop\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        a <span class=\"sy1\">=</span> str<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" -&gt; encoded = \"</span><span class=\"sy4\">;</span><br/>        a <span class=\"sy1\">=</span> mtf.<span class=\"me1\">encode</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"; decoded = \"</span> <span class=\"sy1\">&lt;&lt;</span> mtf.<span class=\"me1\">decode</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 75, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MoveToFront<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> symbolTable<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> setSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            symbolTable <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> moveToFront<span class=\"br0\">(</span><span class=\"kw4\">int</span> charIndex<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> toFront <span class=\"sy0\">=</span> symbolTable<span class=\"br0\">[</span>charIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> charIndex<span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                symbolTable<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbolTable<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            symbolTable<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> toFront<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Encode<span class=\"br0\">(</span><span class=\"kw4\">string</span> input<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            setSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> input<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>symbolTable<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> c<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        moveToFront<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span>         <br/>            <span class=\"kw1\">return</span> output<span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Decode<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            setSymbolTable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span>input<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"kw1\">in</span> input<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>symbolTable<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                moveToFront<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> output<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> testInputs <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"broood\"</span>, <span class=\"st0\">\"bananaaa\"</span>, <span class=\"st0\">\"hiphophiphop\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> encoding<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s <span class=\"kw1\">in</span> testInputs<span class=\"br0\">)</span> <br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Encoding for '{s}':\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                encoding <span class=\"sy0\">=</span> Encode<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"kw1\">in</span> encoding<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{i} \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"<span class=\"es0\">\\n</span>Decoding for '{s}':\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{Decode(encoding)}<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 21, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> lowercase <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>int \\a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>int \\z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> move<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>front <span class=\"br0\">[</span>x xs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"br0\">(</span><span class=\"kw1\">remove</span> #<span class=\"br0\">{</span>x<span class=\"br0\">}</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> encode <span class=\"br0\">[</span>text table <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>:<span class=\"kw1\">keys</span> <span class=\"br0\">[</span>acc<span class=\"br0\">]</span>\u00a0:<span class=\"kw1\">or</span> <span class=\"br0\">{</span>acc <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span><span class=\"kw1\">first</span> text<span class=\"br0\">)</span><br/>        idx <span class=\"br0\">(</span><span class=\"sy0\">.</span>indexOf table c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> text<span class=\"br0\">)</span> acc <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> text<span class=\"br0\">)</span> <span class=\"br0\">(</span>move<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>front c table<span class=\"br0\">)</span> <span class=\"br0\">{</span>:<span class=\"me1\">acc</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> acc idx<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> decode <span class=\"br0\">[</span>indices table <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>:<span class=\"kw1\">keys</span> <span class=\"br0\">[</span>acc<span class=\"br0\">]</span>\u00a0:<span class=\"kw1\">or</span> <span class=\"br0\">{</span>acc <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> indices<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> acc<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">first</span> indices<span class=\"br0\">)</span><br/>          c <span class=\"br0\">(</span>nth table n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> indices<span class=\"br0\">)</span> <span class=\"br0\">(</span>move<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>front c table<span class=\"br0\">)</span> <span class=\"br0\">{</span>:<span class=\"me1\">acc</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> acc c<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>word <span class=\"br0\">[</span><span class=\"st0\">\"broood\"</span> <span class=\"st0\">\"bananaaa\"</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>encoded <span class=\"br0\">(</span>encode word lowercase<span class=\"br0\">)</span><br/>        decoded <span class=\"br0\">(</span>decode encoded lowercase<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%s encodes to\u00a0%s which decodes back to\u00a0%s.\"</span><br/>                   word encoded decoded<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defconstant +lower+ <span class=\"br0\">(</span>coerce <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span> '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> move-to-front <span class=\"br0\">(</span>x xs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"br0\">(</span><span class=\"kw1\">remove</span> x xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> enc <span class=\"br0\">(</span>text table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> <br/>       <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>idx <span class=\"br0\">(</span>position c table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> table <span class=\"br0\">(</span>move-to-front c table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dec <span class=\"br0\">(</span>indices table<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>idx<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"br0\">(</span><span class=\"kw1\">nth</span> idx table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> table <span class=\"br0\">(</span>move-to-front c table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    indices<span class=\"br0\">)</span><br/>            'string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for word in '<span class=\"br0\">(</span><span class=\"st0\">\"broood\"</span> <span class=\"st0\">\"bananaaa\"</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>encoded <span class=\"br0\">(</span>enc word +lower+<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>decoded <span class=\"br0\">(</span>dec encoded +lower+<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> word decoded<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>format T <span class=\"st0\">\"~s encodes to ~a which decodes back to ~s.~%\"</span><br/>                   word encoded decoded<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 49, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">ptrdiff_t</span><span class=\"br0\">[</span><span class=\"br0\">]</span> mtfEncoder<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> data<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data.<span class=\"me1\">countchars</span><span class=\"br0\">(</span><span class=\"st0\">\"a-z\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> data.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> data.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">&lt;</span> lowercase.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>lowercase.<span class=\"me1\">length</span><span class=\"br0\">]</span> order <span class=\"sy0\">=</span> lowercase.<span class=\"me1\">representation</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> encoded <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>data.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> b<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> j <span class=\"sy0\">=</span> encoded<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> order<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        bringToFront<span class=\"br0\">(</span>order<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> order<span class=\"br0\">[</span>j <span class=\"sy0\">..</span> <span class=\"me1\">j</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> encoded<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">string</span> mtfDecoder<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">ptrdiff_t</span><span class=\"br0\">[</span><span class=\"br0\">]</span> encoded<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>encoded.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">&lt;</span> lowercase.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> encoded.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">countchars</span><span class=\"br0\">(</span><span class=\"st0\">\"a-z\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> result.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>lowercase.<span class=\"me1\">length</span><span class=\"br0\">]</span> order <span class=\"sy0\">=</span> lowercase.<span class=\"me1\">representation</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> decoded <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>encoded.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> code<span class=\"sy0\">;</span> encoded<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        decoded<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> order<span class=\"br0\">[</span>code<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        bringToFront<span class=\"br0\">(</span>order<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">code</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> order<span class=\"br0\">[</span>code <span class=\"sy0\">..</span> <span class=\"me1\">code</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> decoded<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> word<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"broood\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bananaaa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> encoded <span class=\"sy0\">=</span> word.<span class=\"me1\">mtfEncoder</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> decoded <span class=\"sy0\">=</span> encoded.<span class=\"me1\">mtfDecoder</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"'%s' encodes to\u00a0%s, which decodes back to '%s'\"</span><span class=\"sy0\">,</span><br/>                 word<span class=\"sy0\">,</span> encoded<span class=\"sy0\">,</span> decoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>word <span class=\"sy0\">==</span> decoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 26, "block": "<pre class=\"text highlighted_source\">defmodule MoveToFront do<br/>  @table  Enum.to_list(?a..?z)<br/>\u00a0<br/>  def encode(text), do: encode(to_char_list(text), @table, [])<br/>\u00a0<br/>  defp encode([], _, output), do: Enum.reverse(output)<br/>  defp encode([h|t], table, output) do<br/>    i = Enum.find_index(table, &amp;(&amp;1 == h))<br/>    encode(t, move2front(table, i), [i | output])<br/>  end<br/>\u00a0<br/>  def decode(indices), do: decode(indices, @table, [])<br/>\u00a0<br/>  defp decode([], _, output), do: Enum.reverse(output) |&gt; to_string<br/>  defp decode([h|t], table, output) do<br/>    decode(t, move2front(table, h), [Enum.at(table, h) | output])<br/>  end<br/>\u00a0<br/>  def move2front(table, i), do: [Enum.at(table,i) | List.delete_at(table, i)]<br/>end<br/>\u00a0<br/>Enum.each([\"broood\", \"bananaaa\", \"hiphophiphop\"], fn word -&gt;<br/>  IO.inspect word<br/>  IO.inspect enc = MoveToFront.encode(word)<br/>  IO.puts \"#{word == MoveToFront.decode(enc)}\\n\"<br/>end)</pre>"}, {"lang": "Gambas", "loc": 33, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sToCode <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"broood\"</span>, <span class=\"st0\">\"bananaaa\"</span>, <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">]</span>  <span class=\"co1\">'Samples to process</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sHold <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                                         <span class=\"co1\">'To store results</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount, siCounter, siPos <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                            <span class=\"co1\">'Various variables</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOutput, sCode, sWork, sEach <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                        <span class=\"co1\">'Various variables</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCounter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> sToCode.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                                  <span class=\"co1\">'To loop through each 'Sample' </span><br/>  sCode <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>                            <span class=\"co1\">'Set sCode to default setting</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sToCode<span class=\"br0\">[</span>siCounter<span class=\"br0\">]</span><span class=\"br0\">)</span>                      <span class=\"co1\">'Loop through each letter in 'Sample'</span><br/>    sWork <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sToCode<span class=\"br0\">[</span>siCounter<span class=\"br0\">]</span>, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                   <span class=\"co1\">'sWork to store the Letter</span><br/>    siPos <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span>scode, sWork<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>                               <span class=\"co1\">'Find the position of the letter in sCode, -1 for '0' based array</span><br/>    sOutput <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siPos<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span>                                   <span class=\"co1\">'Add the postion to sOutput</span><br/>    sCode <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sCode, siPos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span>sCode, sWork, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>  <span class=\"co1\">'sCode = the letter + the rest of sCode except the letter</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sToCode<span class=\"br0\">[</span>siCounter<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">&amp;</span> sOutput                      <span class=\"co1\">'Print the 'Sample' and the coded version</span><br/>  sHold.<span class=\"me1\">Add</span><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/trim\"><span class=\"kw2\">Trim</span></a><span class=\"br0\">(</span>sOutput<span class=\"br0\">)</span><span class=\"br0\">)</span>                                        <span class=\"co1\">'Add the code to the sHold array</span><br/>  sOutput <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>                                                    <span class=\"co1\">'Clear sOutput</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a>                                                             <span class=\"co1\">'Print a blank line</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCounter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> sHold.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                                    <span class=\"co1\">'To loop through each coded 'Sample' </span><br/>  sCode <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>                            <span class=\"co1\">'Set sCode to default setting</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sEach <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sHold<span class=\"br0\">[</span>siCounter<span class=\"br0\">]</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>                  <span class=\"co1\">'For each 'code' in coded 'Sample'</span><br/>    sWork <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sCode, <a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sEach<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                         <span class=\"co1\">'sWork = the decoded letter</span><br/>    sOutput <span class=\"sy0\">&amp;=</span> sWork                                              <span class=\"co1\">'Add the decoded letter to sOutput</span><br/>    sCode <span class=\"sy0\">=</span> sWork <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span>sCode, sWork, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>                     <span class=\"co1\">'sCode = the decoded letter + the rest of sCode except the letter</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sHold<span class=\"br0\">[</span>siCounter<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">&amp;</span> sOutput                        <span class=\"co1\">'Print the coded and decoded result</span><br/>  sOutput <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>                                                    <span class=\"co1\">'Clear sOutput</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 44, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"bytes\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> symbolTable <span class=\"kw4\">string</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>symbols symbolTable<span class=\"sy1\">)</span> encode<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span> <span class=\"sy1\">{</span><br/>\tseq <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>\tpad <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>symbols<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\tx <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>IndexByte<span class=\"sy1\">(</span>pad<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>\t\tseq<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw3\">copy</span><span class=\"sy1\">(</span>pad<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> pad<span class=\"sy1\">[:</span>x<span class=\"sy1\">])</span><br/>\t\tpad<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> seq<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>symbols symbolTable<span class=\"sy1\">)</span> decode<span class=\"sy1\">(</span>seq <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tchars <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>seq<span class=\"sy1\">))</span><br/>\tpad <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>symbols<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> seq <span class=\"sy1\">{</span><br/>\t\tc <span class=\"sy2\">:=</span> pad<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span><br/>\t\tchars<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>\t\t<span class=\"kw3\">copy</span><span class=\"sy1\">(</span>pad<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> pad<span class=\"sy1\">[:</span>x<span class=\"sy1\">])</span><br/>\t\tpad<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>chars<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> symbolTable<span class=\"sy1\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"broood\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"bananaaa\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tenc <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>encode<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t\tdec <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>decode<span class=\"sy1\">(</span>enc<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> enc<span class=\"sy1\">,</span> dec<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> dec <span class=\"sy2\">!=</span> s <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"Whoops!\"</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>delete<span class=\"sy0\">,</span> elemIndex<span class=\"sy0\">,</span> mapAccumL<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromJust<span class=\"br0\">)</span><br/>\u00a0<br/>table <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>table <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span><br/>\u00a0<br/>encode <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>encode <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f t s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s\u00a0: delete s t<span class=\"sy0\">,</span> fromJust <span class=\"br0\">(</span>elemIndex s t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> mapAccumL f table<br/>\u00a0<br/>decode <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>decode <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> mapAccumL f table<br/>  <span class=\"kw1\">where</span><br/>    f t i <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t <span class=\"sy0\">!!</span> i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">in</span> <span class=\"br0\">(</span>s\u00a0: delete s t<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"co1\">-- Test that ((fst . fst) x) == snd x)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span>decode <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> encode <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"broood\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bananaaa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 29, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>s <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>A<span class=\"sy0\">,</span> <span class=\"st0\">\" -&gt; [\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>enc <span class=\"sy0\">:=</span> encode<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">lcase</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"] -&gt; \"</span><span class=\"sy0\">,</span>s2 <span class=\"sy0\">:=</span> decode<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">lcase</span><span class=\"sy0\">,</span>enc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">==</span> s2<span class=\"sy0\">,</span> <span class=\"st0\">\" (Correct)\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\" (Incorrect)\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> encode<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>    enc <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>s <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        m <span class=\"sy0\">?:=</span> reorder<span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"kw4\">upto</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>enc<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\"># Strings are 1-based</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> enc<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> decode<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>enc<span class=\"br0\">)</span><br/>    dec <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"sy0\">!</span>enc <span class=\"kw1\">do</span> <span class=\"br0\">{</span>\t<span class=\"co1\"># Lists are 1-based</span><br/>        dec <span class=\"sy0\">||:=</span> m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        m <span class=\"sy0\">?:=</span> reorder<span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> dec<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> reorder<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"sy0\">,</span>s3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s2<span class=\"sy0\">||</span>s1<span class=\"sy0\">||</span>s3<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">spindizzy=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'seq table'</span>=. <span class=\"kw2\">y</span><br/>  ndx=.$<span class=\"nu0\">0</span><br/>  orig=. table<br/>  <span class=\"re0\">for_sym.</span> seq <span class=\"kw1\">do.</span><br/>    ndx=.ndx,table i.sym<br/>    table=. sym,table-.sym<br/>  <span class=\"kw1\">end.</span><br/>  ndx<br/>  <span class=\"kw1\">assert.</span> seq-:yzzidnips ndx;orig<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>yzzidnips=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'ndx table'</span>=. <span class=\"kw2\">y</span><br/>  seq=.<span class=\"st_h\">''</span><br/>  <span class=\"re0\">for_n.</span> ndx <span class=\"kw1\">do.</span><br/>    seq=.seq,sym=. <span class=\"kw2\">n</span>{table<br/>    table=. sym,table-.sym<br/>  <span class=\"kw1\">end.</span><br/>  seq<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 40, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> MTF<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> encode<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> msg, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> symTable<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> output = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> s = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">char</span> c\u00a0: msg.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">int</span> idx = s.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span> + c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\toutput.<span class=\"me1\">add</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts = s.<span class=\"me1\">deleteCharAt</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span>.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> output<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> decode<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> idxs, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> symTable<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> output = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> s = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> idx\u00a0: idxs<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">char</span> c = s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\toutput = output.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts = s.<span class=\"me1\">deleteCharAt</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span>.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> output.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> test<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> toEncode, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> symTable<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> encoded = encode<span class=\"br0\">(</span>toEncode, symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>toEncode + <span class=\"st0\">\": \"</span> + encoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> decoded = decode<span class=\"br0\">(</span>encoded, symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">(</span>toEncode.<span class=\"me1\">equals</span><span class=\"br0\">(</span>decoded<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: <span class=\"st0\">\"in\"</span><span class=\"br0\">)</span> + <span class=\"st0\">\"correctly decoded to \"</span> + decoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> symTable = <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">;</span><br/>\t\ttest<span class=\"br0\">(</span><span class=\"st0\">\"broood\"</span>, symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttest<span class=\"br0\">(</span><span class=\"st0\">\"bananaaa\"</span>, symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttest<span class=\"br0\">(</span><span class=\"st0\">\"hiphophiphop\"</span>, symTable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 31, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> encodeMTF <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> init <span class=\"sy0\">=</span> <span class=\"br0\">{</span>wordAsNumbers<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> charList<span class=\"sy0\">:</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> word.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> <span class=\"kw5\">char</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> charNum <span class=\"sy0\">=</span> acc.<span class=\"me1\">charList</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"kw5\">char</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//get index of char</span><br/>    acc.<span class=\"me1\">wordAsNumbers</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>charNum<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//add original index to acc</span><br/>    acc.<span class=\"me1\">charList</span>.<span class=\"me1\">unshift</span><span class=\"br0\">(</span>acc.<span class=\"me1\">charList</span>.<span class=\"me1\">splice</span><span class=\"br0\">(</span>charNum<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//put at beginning of list</span><br/>    <span class=\"kw1\">return</span> acc<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> init<span class=\"br0\">)</span>.<span class=\"me1\">wordAsNumbers</span><span class=\"sy0\">;</span> <span class=\"co1\">//return number list</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> decodeMTF <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>numList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> init <span class=\"sy0\">=</span> <span class=\"br0\">{</span>word<span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> charList<span class=\"sy0\">:</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> numList.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    acc.<span class=\"me1\">word</span> <span class=\"sy0\">+=</span> acc.<span class=\"me1\">charList</span><span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    acc.<span class=\"me1\">charList</span>.<span class=\"me1\">unshift</span><span class=\"br0\">(</span>acc.<span class=\"me1\">charList</span>.<span class=\"me1\">splice</span><span class=\"br0\">(</span>num<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//put at beginning of list</span><br/>    <span class=\"kw1\">return</span> acc<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> init<span class=\"br0\">)</span>.<span class=\"me1\">word</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//test our algorithms</span><br/><span class=\"kw1\">var</span> words <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'broood'</span><span class=\"sy0\">,</span> <span class=\"st0\">'bananaaa'</span><span class=\"sy0\">,</span> <span class=\"st0\">'hiphophiphop'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> encoded <span class=\"sy0\">=</span> words.<span class=\"me1\">map</span><span class=\"br0\">(</span>encodeMTF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> decoded <span class=\"sy0\">=</span> encoded.<span class=\"me1\">map</span><span class=\"br0\">(</span>decodeMTF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//print results</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"from encoded:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"from decoded:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>decoded<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Input is the string to be encoded, st is the initial symbol table (an array)<br/># Output: the encoded string (an array)<br/>def m2f_encode(st):<br/>  reduce explode[] as $ch <br/>    ( [ [], st];                  # state: [ans, st]<br/>      (.[1]|index($ch)) as $ix<br/>      | .[1] as $st<br/>      | [ (.[0] + [ $ix ]),  [$st[$ix]] + $st[0:$ix] + $st[$ix+1:] ] )<br/>  | .[0];<br/>\u00a0<br/># Input should be the encoded string (an array) <br/># and st should be the initial symbol table (an array)<br/>def m2f_decode(st):<br/>  reduce .[] as $ix<br/>    ( [ [], st];                  # state: [ans, st]<br/>      .[1] as $st<br/>      | [ (.[0] + [ $st[$ix] ]),  [$st[$ix]] + $st[0:$ix] + $st[$ix+1:] ] )<br/>  | .[0]<br/>  | implode;</pre>"}, {"lang": "Julia", "loc": 33, "block": "<pre class=\"text highlighted_source\">function encodeMTF(str::AbstractString, symtable::Vector{Char}=collect('a':'z'))<br/>    function encode(ch::Char)<br/>        r = findfirst(symtable, ch)<br/>        deleteat!(symtable, r)<br/>        prepend!(symtable, ch)<br/>        return r<br/>    end<br/>    collect(encode(ch) for ch in str)<br/>end<br/>\u00a0<br/>function decodeMTF(arr::Vector{Int}, symtable::Vector{Char}=collect('a':'z'))<br/>    function decode(i::Int)<br/>        r = symtable[i]<br/>        deleteat!(symtable, i)<br/>        prepend!(symtable, r)<br/>        return r<br/>    end<br/>    join(decode(i) for i in arr)<br/>end<br/>\u00a0<br/>testset = [\"broood\", \"bananaaa\", \"hiphophiphop\"]<br/>encoded = encodeMTF.(testset)<br/>decoded = decodeMTF.(encoded)<br/>for (str, enc, dec) in zip(testset, encoded, decoded)<br/>    println(\"Test string: $str\\n -&gt; Encoded: $enc\\n -&gt; Decoded: $dec\")<br/>end<br/>\u00a0<br/>using Base.Test<br/>@testset \"Decoded string equal to original\" begin<br/>    for (str, dec) in zip(testset, decoded)<br/>        @test str == dec<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 48, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun encode<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> intArrayOf<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbols <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>s.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, c<span class=\"br0\">)</span> in s.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> index <span class=\"sy0\">=</span> symbols.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"$s contains a non-alphabetic character\"</span><span class=\"br0\">)</span><br/>        result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> index<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in index - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> symbols<span class=\"br0\">[</span>j + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbols<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        symbols<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun decode<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbols <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> CharArray<span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, n<span class=\"br0\">)</span> in a.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!</span>in <span class=\"nu0\">0</span>..<span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"${a.contentToString()} contains an invalid number\"</span><span class=\"br0\">)</span><br/>        result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbols<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in n - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> symbols<span class=\"br0\">[</span>j + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbols<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        symbols<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"broood\"</span>, <span class=\"st0\">\"bananaaa\"</span>, <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> encoded <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">?&gt;</span><span class=\"br0\">(</span>strings.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, s<span class=\"br0\">)</span> in strings.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        encoded<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${s.padEnd(12)} -&gt; ${encoded[i]!!.contentToString()}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> decoded <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">?&gt;</span><span class=\"br0\">(</span>encoded.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, a<span class=\"br0\">)</span> in encoded.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        decoded<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> decode<span class=\"br0\">(</span>a<span class=\"sy0\">!!</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${a.contentToString().padEnd(38)} -&gt; ${decoded[i]!!.padEnd(12)}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\" -&gt; ${if (decoded[i] == strings[i]) \"</span>correct<span class=\"st0\">\" else \"</span>incorrect<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 46, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return table of the alphabet in lower case</span><br/><span class=\"kw1\">function</span> getAlphabet <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> letters <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> ascii <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">,</span> <span class=\"nu0\">122</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>letters<span class=\"sy0\">,</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span>ascii<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> letters<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Move the table value at ind to the front of tab</span><br/><span class=\"kw1\">function</span> moveToFront <span class=\"br0\">(</span>tab<span class=\"sy0\">,</span> ind<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> toMove <span class=\"sy0\">=</span> tab<span class=\"br0\">[</span>ind<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> ind <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> tab<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tab<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>    tab<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> toMove<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Perform move-to-front encoding on input</span><br/><span class=\"kw1\">function</span> encode <span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> symbolTable<span class=\"sy0\">,</span> output<span class=\"sy0\">,</span> index <span class=\"sy0\">=</span> getAlphabet<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>input <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>symbolTable<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> input<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span> <span class=\"kw1\">then</span> index <span class=\"sy0\">=</span> k <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        moveToFront<span class=\"br0\">(</span>symbolTable<span class=\"sy0\">,</span> index<span class=\"br0\">)</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>output<span class=\"sy0\">,</span> index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>output<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Perform move-to-front decoding on input</span><br/><span class=\"kw1\">function</span> decode <span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> symbolTable<span class=\"sy0\">,</span> output <span class=\"sy0\">=</span> getAlphabet<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> num <span class=\"kw2\">in</span> input<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%d+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        output <span class=\"sy0\">=</span> output <span class=\"sy0\">..</span> symbolTable<span class=\"br0\">[</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        moveToFront<span class=\"br0\">(</span>symbolTable<span class=\"sy0\">,</span> num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> output<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> testCases<span class=\"sy0\">,</span> output <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"broood\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bananaaa\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> case <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    output <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>case<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Original string: \"</span> <span class=\"sy0\">..</span> case<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Encoded: \"</span> <span class=\"sy0\">..</span> output<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Decoded: \"</span> <span class=\"sy0\">..</span> decode<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Global All$, nl$<br/>      \\\\ upgrade to document<br/>      Document All$<br/>      Nl$&lt;={<br/>      }<br/>      Function Encode$(Inp$) {<br/>           Def SymbolTable$=\"abcdefghijklmnopqrstuvwxyz\", Out$=\"\"<br/>            For i=1 to Len(Inp$)<br/>                  c$=Mid$(Inp$, i, 1)<br/>                  k=Instr(SymbolTable$, c$)<br/>                  Insert k, 1 SymbolTable$=\"\"<br/>                  Out$=If$(Out$=\"\" -&gt; Quote$(k-1),Quote$(Param(Out$), k-1))<br/>                  Insert 1 SymbolTable$=c$<br/>                  \\\\ we use &lt;= for globals<br/>                  All$&lt;=Format$(\"   {0} {1:30} {2}\", c$, Out$, SymbolTable$)+nl$<br/>            Next i<br/>            =Out$<br/>      }<br/>      Function Decode$(Inp$) {<br/>           Def SymbolTable$=\"abcdefghijklmnopqrstuvwxyz\", Out$=\"\"<br/>           flush<br/>           Data Param(Inp$)<br/>           While not empty {<br/>                  k=Number+1<br/>                  c$=Mid$(SymbolTable$, k, 1)<br/>                  Out$+=c$<br/>                  Insert k, 1 SymbolTable$=\"\"  ' erase at position k<br/>                  Insert 1 SymbolTable$=c$<br/>                  All$&lt;=Format$(\"{0::-2} {1} {2:30} {3}\", k-1, c$, Out$, SymbolTable$)+nl$<br/>            }<br/>            =Out$<br/>      }<br/>      TryThis(\"broood\")<br/>      TryThis(\"bananaaa\")<br/>      TryThis(\"hiphophiphop\")<br/>      ClipBoard All$<br/>      Sub TryThis(a$)<br/>            Local Out$=Encode$(a$)<br/>            Local final$=Decode$(Out$)<br/>            Print final$, final$=a$<br/>      End Sub<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">mtf[word_]:=Module[{f,f2,p,q},<br/>   f[{output_,symList_},next_]:=Module[{index},index=Position[symList,next][[1,1]]-1;<br/>       {output~Append~index,Prepend[Delete[symList,index+1],next]}];<br/>   p=Fold[f,{{},CharacterRange[\"a\",\"z\"]},Characters[ToString[word]]][[1]];<br/>   f2[{output_,symList_},next_]:=Module[{index},index=symList[[next+1]];<br/>       {output~Append~index,Prepend[DeleteCases[symList,ToString[index]],index]}];<br/>   q=Fold[f2,{{},CharacterRange[\"a\",\"z\"]},p][[1]];<br/>   Print[\"'\", word,\"' encodes to: \",p, \" - \"  ,p,\" decodes to: '\",<a class=\"__cf_email__\" data-cfemail=\"c192b5b3a8afa68baea8af81b0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,\"' - Input equals Output: \" ,<a class=\"__cf_email__\" data-cfemail=\"e89f879a8cd5d5d5bb9c9a81868fa2878186a899\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>];]</pre>"}, {"lang": "MATLAB", "loc": 30, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> testMTF<br/>    symTable = <span class=\"co2\">'abcdefghijklmnopqrstuvwxyz'</span>;<br/>    inStr = <span class=\"br0\">{</span><span class=\"co2\">'broood'</span> <span class=\"co2\">'bananaaa'</span> <span class=\"co2\">'hiphophiphop'</span><span class=\"br0\">}</span>;<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>inStr<span class=\"br0\">)</span><br/>        outArr = encodeMTF<span class=\"br0\">(</span>inStr<span class=\"br0\">{</span>k<span class=\"br0\">}</span>, symTable<span class=\"br0\">)</span>;<br/>        outStr = decodeMTF<span class=\"br0\">(</span>outArr, symTable<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s: [\u00a0%s]\\n'</span>, inStr<span class=\"br0\">{</span>k<span class=\"br0\">}</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%d '</span>, outArr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%scorrectly decoded to\u00a0%s\\n'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"co2\">'in'</span>.*~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>outStr, inStr<span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, outStr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> arr = encodeMTF<span class=\"br0\">(</span>str, symTable<span class=\"br0\">)</span><br/>    n = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span>;<br/>    arr = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:n<br/>        arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>str<span class=\"br0\">(</span>k<span class=\"br0\">)</span> == symTable, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        symTable = <span class=\"br0\">[</span>symTable<span class=\"br0\">(</span>arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> symTable<span class=\"br0\">(</span><span class=\"nu0\">1</span>:arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> symTable<span class=\"br0\">(</span>arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">end</span><br/>    arr = arr-<span class=\"nu0\">1</span>; <span class=\"co1\">% Change to zero-indexed array</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> str = decodeMTF<span class=\"br0\">(</span>arr, symTable<span class=\"br0\">)</span><br/>    arr = arr+<span class=\"nu0\">1</span>; <span class=\"co1\">% Change to one-indexed array</span><br/>    n = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>arr<span class=\"br0\">)</span>;<br/>    str = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:n<br/>        str<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = symTable<span class=\"br0\">(</span>arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        symTable = <span class=\"br0\">[</span>symTable<span class=\"br0\">(</span>arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> symTable<span class=\"br0\">(</span><span class=\"nu0\">1</span>:arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> symTable<span class=\"br0\">(</span>arr<span class=\"br0\">(</span>k<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> encode <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$table</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$table</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/(.*?)$_/$_$1/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"co3\">$1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> decode <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$table</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$table</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/(.{$_})(.)/$2$1/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"co3\">$2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$test</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>broood bananaaa hiphophiphop<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@encoded</span> <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$test: @encoded<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$decoded</span> <span class=\"sy0\">=</span> decode<span class=\"br0\">(</span><span class=\"re0\">@encoded</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"in\"</span> x <span class=\"br0\">(</span> <span class=\"re0\">$decoded</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$test</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"correctly decoded to $decoded<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> <span class=\"kw3\">encode</span> <span class=\"br0\">(</span> Str <span class=\"re0\">$word</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@sym</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/>    gather <span class=\"kw1\">for</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$c</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">die</span> <span class=\"st0\">\"Symbol '$c' not found in @sym\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$c</span> <span class=\"kw1\">eq</span> <span class=\"re0\">@sym</span><span class=\"sy0\">.</span><span class=\"kw3\">none</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@sym</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">take</span> <span class=\"br0\">(</span><span class=\"re0\">@sym</span> <span class=\"sy0\">...</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span><span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw3\">decode</span> <span class=\"br0\">(</span> <span class=\"re0\">@enc</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@sym</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@enc</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$pos</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">@sym</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@sym</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>plan <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span>broood bananaaa hiphophiphop<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$word</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$enc</span> <span class=\"sy0\">=</span> <span class=\"kw3\">encode</span><span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$dec</span> <span class=\"sy0\">=</span> <span class=\"kw3\">decode</span><span class=\"br0\">(</span><span class=\"re0\">$enc</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> <span class=\"re0\">$word</span><span class=\"sy0\">,</span> <span class=\"re0\">$dec</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$word.fmt('%-12s') ($enc[])\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 38, "block": "<pre class=\"text highlighted_source\">function encode(string s)<br/>    string symtab = \"abcdefghijklmnopqrstuvwxyz\"<br/>    sequence res = {}<br/>    for i=1 to length(s) do<br/>        integer ch = s[i]<br/>        integer k = find(ch,symtab)<br/>        res &amp;= k-1<br/>        for j=k to 2 by -1 do<br/>            symtab[j] = symtab[j-1]<br/>        end for<br/>        symtab[1] = ch<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function decode(sequence s)<br/>    string symtab = \"abcdefghijklmnopqrstuvwxyz\"<br/>    string res = \"\"<br/>    for i=1 to length(s) do<br/>        integer k = s[i]+1<br/>        integer ch = symtab[k]<br/>        res &amp;= ch<br/>        for j=k to 2 by -1 do<br/>            symtab[j] = symtab[j-1]<br/>        end for<br/>        symtab[1] = ch<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>procedure test(string s)<br/>    sequence e = encode(s)<br/>    string d = decode(e)<br/>   \u00a0?{s,e,d,{\"**ERROR**\",\"ok\"}[(s=d)+1]}<br/>end procedure<br/>test(\"broood\")<br/>test(\"bananaaa\")<br/>test(\"hiphophiphop\")</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(de encode (Str)<br/>   (let Table (chop \"abcdefghijklmnopqrstuvwxyz\")<br/>      (mapcar<br/>         '((C)<br/>            (dec<br/>               (prog1<br/>                  (index C Table)<br/>                  (rot Table @) ) ) )<br/>         (chop Str) ) ) )<br/>\u00a0<br/>(de decode (Lst)<br/>   (let Table (chop \"abcdefghijklmnopqrstuvwxyz\")<br/>      (pack<br/>         (mapcar<br/>            '((N)<br/>               (prog1<br/>                  (get Table (inc 'N))<br/>                  (rot Table N) ) )<br/>            Lst ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 40, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 25.5.2014 Walter Pachl translated from REXX<br/> *********************************************************************/</span><br/> ed<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> enc_dec<span class=\"br0\">(</span><span class=\"st0\">'broood'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> enc_dec<span class=\"br0\">(</span><span class=\"st0\">'bananaaa'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> enc_dec<span class=\"br0\">(</span><span class=\"st0\">'hiphophiphop'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> enc_dec<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">in</span>  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> out <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> st <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sta <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> enc<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> encn <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>p.<span class=\"me1\">k</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c       <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   encn<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   enc<span class=\"br0\">(</span>encn<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   st<span class=\"sy0\">=</span>c!!<span class=\"kw1\">left</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">' in='</span>!!<span class=\"kw1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">'sta='</span>!!sta!!<span class=\"st0\">' original symbol table'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'enc='</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>enc<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> encn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">' st='</span>!!st!!<span class=\"st0\">' symbol table after encoding'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> encn<span class=\"sy0\">;</span><br/>   k<span class=\"sy0\">=</span>enc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   out<span class=\"sy0\">=</span>out!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>sta<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   sta<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>sta<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"kw1\">left</span><span class=\"br0\">(</span>sta<span class=\"sy0\">,</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>sta<span class=\"sy0\">,</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">'out='</span>!!out<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> out<span class=\"sy0\">=</span><span class=\"kw1\">in</span> <span class=\"kw1\">Then</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">'all wrong!!'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 75, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">Function</span> Test<span class=\"sy0\">-</span>MTF<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span>Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$word</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$SymbolTable</span> <span class=\"sy0\">=</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>    <span class=\"br0\">)</span><br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">Function</span> Encode<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">Param</span> <br/>            <span class=\"br0\">(</span><br/>                <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span>Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$word</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$SymbolTable</span> <span class=\"sy0\">=</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>            <span class=\"br0\">)</span><br/>            <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$letter</span> <span class=\"kw3\">in</span> <span class=\"re0\">$word</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$index</span> <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span>.IndexOf<span class=\"br0\">(</span><span class=\"re0\">$letter</span><span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"re0\">$prop</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                    Input <span class=\"sy0\">=</span> <span class=\"re0\">$letter</span><br/>                    Output <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$index</span><br/>                    SymbolTable <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">New-Object</span> PSobject <span class=\"kw5\">-Property</span> <span class=\"re0\">$prop</span><br/>                <span class=\"re0\">$SymbolTable</span> <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span>.Remove<span class=\"br0\">(</span><span class=\"re0\">$index</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.Insert<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$letter</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">Function</span> Decode<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">Param</span><br/>            <span class=\"br0\">(</span><br/>                <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span>Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$index</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$SymbolTable</span> <span class=\"sy0\">=</span> <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>            <span class=\"br0\">)</span><br/>            <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"re0\">$index</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">#Write-host $i -ForegroundColor Red</span><br/>                <span class=\"re0\">$letter</span> <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span>.Chars<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"re0\">$prop</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                    Input <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>                    Output <span class=\"sy0\">=</span> <span class=\"re0\">$letter</span><br/>                    SymbolTable <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">New-Object</span> PSObject <span class=\"kw5\">-Property</span> <span class=\"re0\">$prop</span><br/>                <span class=\"re0\">$SymbolTable</span> <span class=\"sy0\">=</span> <span class=\"re0\">$SymbolTable</span>.Remove<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.Insert<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$letter</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">#Encoding</span><br/>        <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"Encoding $word\"</span> <span class=\"kw5\">-NoNewline</span><br/>        <span class=\"re0\">$Encoded</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Encode <span class=\"kw5\">-word</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span>.output<br/>        <span class=\"kw1\">Write-Host</span> <span class=\"kw5\">-NoNewline</span> <span class=\"st0\">\": $($Encoded -join ',')\"</span><br/>\u00a0<br/>        <span class=\"co1\">#Decoding</span><br/>        <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>Decoding $($Encoded -join ',')\"</span> <span class=\"kw5\">-NoNewline</span><br/>        <span class=\"re0\">$Decoded</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Decode <span class=\"sy0\">-</span>index <span class=\"re0\">$Encoded</span><span class=\"br0\">)</span>.output <span class=\"sy0\">-</span>join <span class=\"st0\">''</span><br/>        <span class=\"kw1\">Write-Host</span> <span class=\"kw5\">-NoNewline</span> <span class=\"st0\">\": $Decoded<span class=\"es0\">`n</span>\"</span>   <br/>    <span class=\"br0\">}</span><br/>    End<span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> <span class=\"kw3\">string</span> <span class=\"kw1\">import</span> ascii_lowercase<br/>\u00a0<br/>SYMBOLTABLE <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>ascii_lowercase<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> move2front_encode<span class=\"br0\">(</span>strng<span class=\"sy0\">,</span> symboltable<span class=\"br0\">)</span>:<br/>    sequence<span class=\"sy0\">,</span> pad <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> symboltable<span class=\"br0\">[</span>::<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> char <span class=\"kw1\">in</span> strng:<br/>        indx <span class=\"sy0\">=</span> pad.<span class=\"me1\">index</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>        sequence.<span class=\"me1\">append</span><span class=\"br0\">(</span>indx<span class=\"br0\">)</span><br/>        pad <span class=\"sy0\">=</span> <span class=\"br0\">[</span>pad.<span class=\"me1\">pop</span><span class=\"br0\">(</span>indx<span class=\"br0\">)</span><span class=\"br0\">]</span> + pad<br/>    <span class=\"kw1\">return</span> sequence<br/>\u00a0<br/><span class=\"kw1\">def</span> move2front_decode<span class=\"br0\">(</span>sequence<span class=\"sy0\">,</span> symboltable<span class=\"br0\">)</span>:<br/>    chars<span class=\"sy0\">,</span> pad <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> symboltable<span class=\"br0\">[</span>::<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> indx <span class=\"kw1\">in</span> sequence:<br/>        char <span class=\"sy0\">=</span> pad<span class=\"br0\">[</span>indx<span class=\"br0\">]</span><br/>        chars.<span class=\"me1\">append</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>        pad <span class=\"sy0\">=</span> <span class=\"br0\">[</span>pad.<span class=\"me1\">pop</span><span class=\"br0\">(</span>indx<span class=\"br0\">)</span><span class=\"br0\">]</span> + pad<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">'broood'</span><span class=\"sy0\">,</span> <span class=\"st0\">'bananaaa'</span><span class=\"sy0\">,</span> <span class=\"st0\">'hiphophiphop'</span><span class=\"br0\">]</span>:<br/>        encode <span class=\"sy0\">=</span> move2front_encode<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> SYMBOLTABLE<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%14r encodes to\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> encode<span class=\"br0\">)</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>        decode <span class=\"sy0\">=</span> move2front_decode<span class=\"br0\">(</span>encode<span class=\"sy0\">,</span> SYMBOLTABLE<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'which decodes back to\u00a0%r'</span>\u00a0% decode<span class=\"br0\">)</span><br/>        <span class=\"kw1\">assert</span> s <span class=\"sy0\">==</span> decode<span class=\"sy0\">,</span> <span class=\"st0\">'Whoops!'</span></pre>"}, {"lang": "Racket", "loc": 45, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define default-symtab \"abcdefghijklmnopqrstuvwxyz\")<br/>\u00a0<br/>(define (move-to-front:encode in (symtab default-symtab))<br/>  (define inner-encode<br/>    (match-lambda**<br/>     [((? string? (app string-&gt;list in)) st acc)\u00a0; make input all listy<br/>      (inner-encode in st acc)]<br/>     [(in (? string? (app string-&gt;list st)) acc)\u00a0; make symtab all listy<br/>      (inner-encode in st acc)]<br/>     [((list) _ (app reverse rv))\u00a0; nothing more to encode<br/>      rv]<br/>     [((list a tail ...) (list left ... a right ...) acc)\u00a0; encode and recur<br/>      (inner-encode tail `(,a ,@left ,@right) (cons (length left) acc))]))<br/>  (inner-encode in symtab null))<br/>\u00a0<br/>(define (move-to-front:decode in (symtab default-symtab))<br/>  (define inner-decode<br/>    (match-lambda**<br/>     [(in (? string? (app string-&gt;list st)) acc)\u00a0; make symtab all listy<br/>      (inner-decode in st acc)]<br/>     [((list) _ (app (compose list-&gt;string reverse) rv))\u00a0; nothing more to encode<br/>      rv]<br/>     [((list a tail ...) symbols acc)\u00a0; decode and recur<br/>      (match/values<br/>       (split-at symbols a)<br/>       [(l (cons ra rd))<br/>        (inner-decode tail (cons ra (append l rd)) (cons ra acc))])]))<br/>  (inner-decode in symtab null))<br/>\u00a0<br/>(module+ test<br/> \u00a0;; Test against the example in the task<br/>  (require rackunit)<br/>  (check-equal? (move-to-front:encode \"broood\") '(1 17 15 0 0 5))<br/>  (check-equal? (move-to-front:decode '(1 17 15 0 0 5)) \"broood\")<br/>  (check-equal? (move-to-front:decode (move-to-front:encode \"broood\")) \"broood\"))<br/>\u00a0<br/>(module+ main<br/>  (define (encode+decode-string str)<br/>    (define enc (move-to-front:encode str))<br/>    (define dec (move-to-front:decode enc))<br/>    (define crt (if (equal? dec str) \"correctly\" \"incorrectly\"))<br/>    (printf \"~s encodes to ~s, which decodes ~s to ~s.~%\" str enc crt dec))<br/>\u00a0<br/>  (for-each encode+decode-string '(\"broood\" \"bananaaa\" \"hiphophiphop\")))</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 25.05.2014 Walter Pachl<br/>* REXX strings start with position 1<br/>**********************************************************************/</span><br/><span class=\"kw1\">Call</span> enc_dec <span class=\"st0\">'broood'</span><br/><span class=\"kw1\">Call</span> enc_dec <span class=\"st0\">'bananaaa'</span><br/><span class=\"kw1\">Call</span> enc_dec <span class=\"st0\">'hiphophiphop'</span><br/><span class=\"kw1\">Exit</span><br/>enc_dec: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> in<br/>st=<span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>sta=st <span class=\"coMULTI\">/* remember this for decoding */</span><br/>enc=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><br/>  c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>in,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>c,st<span class=\"br0\">)</span><br/>  enc=enc <span class=\"br0\">(</span>p-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  st=c<span class=\"sy0\">||</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>st,p-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>st,p+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">' in='</span>in<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'sta='</span>sta <span class=\"st0\">'original symbol table'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'enc='</span>enc<br/><span class=\"kw1\">Say</span> <span class=\"st0\">' st='</span>st  <span class=\"st0\">'symbol table after encoding'</span><br/>out=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>enc<span class=\"br0\">)</span><br/>  k=<span class=\"kw6\">word</span><span class=\"br0\">(</span>enc,i<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/>  out=out<span class=\"sy0\">||</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>sta,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  sta=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>sta,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>sta,k-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>sta,k+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'out='</span>out<br/><span class=\"kw1\">Say</span> <span class=\"st0\">' '</span><br/><span class=\"kw1\">If</span> out==in <span class=\"kw3\">Then</span> <span class=\"kw1\">Nop</span><br/><span class=\"kw3\">Else</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'all wrong!!'</span><br/><span class=\"kw1\">Return</span><br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Move-to-front algorithm<br/>\u00a0<br/>test(\"broood\")<br/>test(\"bananaaa\")<br/>test(\"hiphophiphop\")<br/>\u00a0<br/>func encode(s)<br/>        symtab = \"abcdefghijklmnopqrstuvwxyz\"<br/>        res = \"\"<br/>        for i=1 to len(s) <br/>             ch = s[i]<br/>             k = substr(symtab, ch)<br/>             res = res + \" \" + (k-1)<br/>             for j=k to 2 step -1 <br/>                  symtab[j] = symtab[j-1]<br/>             next<br/>             symtab[1] = ch<br/>        next<br/>        return res<br/>\u00a0<br/>func decode(s)<br/>        s = str2list( substr(s, \" \", nl) )        <br/>        symtab = \"abcdefghijklmnopqrstuvwxyz\"<br/>        res = \"\"<br/>        for i=1 to len(s) <br/>             k = number(s[i]) + 1<br/>             ch = symtab[k]<br/>             res = res + \" \" + ch<br/>             for j=k to 2 step -1<br/>                   symtab[j] = symtab[j-1]<br/>             next<br/>             symtab[1] = ch<br/>        next<br/>        return right(res, len(res)-2)<br/>\u00a0<br/>func test(s)<br/>        e = encode(s)<br/>        d = decode(e)<br/>        see \"\" + s + \" =&gt; \" + \"(\" + right(e, len(e) - 1) + \") \" + \" =&gt; \" + substr(d, \" \", \"\") + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 30, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> MoveToFront<br/>\u00a0<br/>  ABC = <span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>..<span class=\"st0\">\"z\"</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">freeze</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">encode</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    ar = ABC.<span class=\"me1\">dup</span><br/>    str.<span class=\"me1\">chars</span>.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>char, memo<span class=\"sy0\">|</span><br/>      memo <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i = ar.<span class=\"me1\">index</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      ar = m2f<span class=\"br0\">(</span>ar,i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">decode</span><span class=\"br0\">(</span>indices<span class=\"br0\">)</span><br/>    ar = ABC.<span class=\"me1\">dup</span><br/>    indices.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i, str<span class=\"sy0\">|</span><br/>      str <span class=\"sy0\">&lt;&lt;</span> ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      ar = m2f<span class=\"br0\">(</span>ar,i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">m2f</span><span class=\"br0\">(</span>ar,i<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>ar.<span class=\"me1\">delete_at</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> ar<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"st0\">'broood'</span>, <span class=\"st0\">'bananaaa'</span>, <span class=\"st0\">'hiphophiphop'</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>word<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">p</span> word == MoveToFront.<span class=\"me1\">decode</span><span class=\"br0\">(</span><span class=\"kw3\">p</span> MoveToFront.<span class=\"me1\">encode</span><span class=\"br0\">(</span><span class=\"kw3\">p</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 97, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">package</span></a> rosetta<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MoveToFront <span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/** <br/>   *  Default radix<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> R <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** <br/>   *  Default symbol table<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> symbolTable <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until R<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toChar</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   *  Apply move-to-front encoding using default symbol table.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encode<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    encode<span class=\"br0\">(</span>s, symbolTable<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** <br/>   *  Apply move-to-front encoding using symbol table &lt;tt&gt;symTable&lt;/tt&gt;.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encode<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, symTable<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> table <span class=\"sy0\">=</span> symTable.<span class=\"me1\">toCharArray</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>inline <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveToFront<span class=\"br0\">(</span>ch<span class=\"sy0\">:</span> Char, index<span class=\"sy0\">:</span> Int, tmpout<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmpin <span class=\"sy0\">=</span> table<span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>      table<span class=\"br0\">(</span>index<span class=\"br0\">)</span> <span class=\"sy0\">=</span> tmpout<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> tmpin<span class=\"br0\">)</span><br/>        moveToFront<span class=\"br0\">(</span>ch, index + <span class=\"nu0\">1</span>, tmpin<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        table<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> ch<br/>        index<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encodeString<span class=\"br0\">(</span>output<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, s<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> output<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        encodeString<span class=\"br0\">(</span>moveToFront<span class=\"br0\">(</span>x, <span class=\"nu0\">0</span>, table<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> output, s.<span class=\"me1\">tail</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    encodeString<span class=\"br0\">(</span>Nil, s.<span class=\"me1\">toList</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   *  Apply move-to-front decoding using default symbol table.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decode<span class=\"br0\">(</span>ints<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    decode<span class=\"br0\">(</span>ints, symbolTable<span class=\"br0\">)</span>   <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   *  Apply move-to-front decoding using symbol table &lt;tt&gt;symTable&lt;/tt&gt;.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decode<span class=\"br0\">(</span>lst<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, symTable<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> table <span class=\"sy0\">=</span> symTable.<span class=\"me1\">toCharArray</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>inline <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveToFront<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Char, index<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- index-<span class=\"nu0\">1</span> to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        table<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> table<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      table<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> c<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decodeList<span class=\"br0\">(</span>output<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span>, lst<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span> <span class=\"sy0\">=</span> lst <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> output<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> table<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        moveToFront<span class=\"br0\">(</span>c, x<span class=\"br0\">)</span><br/>        decodeList<span class=\"br0\">(</span>c <span class=\"sy0\">::</span> output, xs<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    decodeList<span class=\"br0\">(</span>Nil, lst<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">mkString</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> test<span class=\"br0\">(</span>toEncode<span class=\"sy0\">:</span> String, symTable<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> encoded <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>toEncode, symTable<span class=\"br0\">)</span><br/>\t\tprintln<span class=\"br0\">(</span>toEncode + <span class=\"st0\">\": \"</span> + encoded<span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> decoded <span class=\"sy0\">=</span> decode<span class=\"br0\">(</span>encoded, symTable<span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>toEncode <span class=\"sy0\">!=</span> decoded<span class=\"br0\">)</span><br/>\t\t  print<span class=\"br0\">(</span><span class=\"st0\">\"in\"</span><span class=\"br0\">)</span><br/>\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"correctly decoded to \"</span> + decoded<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Unit tests the &lt;tt&gt;MoveToFront&lt;/tt&gt; data type.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RosettaCodeMTF <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symTable <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>\tMoveToFront.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"st0\">\"broood\"</span>, symTable<span class=\"br0\">)</span><br/>\tMoveToFront.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"st0\">\"bananaaa\"</span>, symTable<span class=\"br0\">)</span><br/>\tMoveToFront.<span class=\"me1\">test</span><span class=\"br0\">(</span><span class=\"st0\">\"hiphophiphop\"</span>, symTable<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">func encode<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var table = <span class=\"br0\">(</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span> <span class=\"sy0\">-&gt;</span> join<span class=\"br0\">)</span>;<br/>    str.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span><br/>        var s = <span class=\"st0\">''</span>;<br/>        table.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">'(.*?)'</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1<span class=\"sy0\">|</span> s=s1; c <span class=\"sy0\">+</span> s1<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>        s.<span class=\"me1\">len</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func decode<span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var table = <span class=\"br0\">(</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span> <span class=\"sy0\">-&gt;</span> join<span class=\"br0\">)</span>;<br/>    nums.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>        var s = <span class=\"st0\">''</span>;<br/>        table.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">'(.{'</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">+</span> <span class=\"st0\">'})(.)'</span><span class=\"br0\">)</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1, s2<span class=\"sy0\">|</span> s=s2; s2 <span class=\"sy0\">+</span> s1<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>        s;<br/>    <span class=\"br0\">}</span>.<span class=\"me1\">join</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">%</span>w<span class=\"br0\">(</span>broood bananaaa hiphophiphop<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>test<span class=\"sy0\">|</span><br/>    var encoded = encode<span class=\"br0\">(</span>test<span class=\"br0\">)</span>;<br/>    say <span class=\"st0\">\"#{test}: #{encoded}\"</span>;<br/>    var decoded = decode<span class=\"br0\">(</span>encoded<span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"in\"</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>decoded\u00a0!= test<span class=\"br0\">)</span>;<br/>    say <span class=\"st0\">\"correctly decoded to #{decoded}\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 72, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>var str=\"broood\"<br/>var number:[Int]=[1,17,15,0,0,5]<br/>\u00a0<br/>//function to encode the string<br/>func encode(st:String)-&gt;[Int]<br/>{<br/>\u00a0<br/>var array:[Character]=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]<br/>\u00a0<br/>\tvar num:[Int]=[]<br/>\tvar temp:Character=\"a\"<br/>\tvar i1:Int=0<br/>\tfor i in st.characters<br/>\t{<br/>\t\tfor j in 0...25<br/>\t\t{<br/>\t\t\tif i==array[j]<br/>\t\t\t{<br/>\t\t\t\tnum.append(j)<br/>\t\t\t\ttemp=array[j]<br/>\t\t\t\ti1=j<br/>\t\t\t\twhile(i1&gt;0)<br/>\t\t\t\t{<br/>\t\t\t\t\tarray[i1]=array[i1-1]<br/>\t\t\t\t\ti1=i1-1<br/>\u00a0<br/>\t\t\t\t}<br/>\t\t\t\tarray[0]=temp<br/>\t\t\t}<br/>\u00a0<br/>\t\t}<br/>\u00a0<br/>\u00a0<br/>\t}<br/>\u00a0<br/>\treturn num<br/>\u00a0<br/>}<br/>\u00a0<br/>func decode(s:[Int])-&gt;[Character]<br/>{<br/>\u00a0<br/>\tvar st1:[Character]=[]<br/>\tvar alph:[Character]=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]<br/>\tvar temp1:Character=\"a\"<br/>\tvar i2:Int=0<br/>\tfor i in 0...s.character.count-1<br/>\t{<br/>\t\ti2=s[i]<br/>\t\tst1.append(alph[i2])<br/>\t\ttemp1=alph[i2]<br/>\u00a0<br/>\t\t\t\twhile(i2&gt;0)<br/>\t\t\t\t{<br/>\t\t\t\t\talph[i2]=alph[i2-1]<br/>\t\t\t\t\ti2=i2-1<br/>\u00a0<br/>\t\t\t\t}<br/>\t\t\t\talph[0]=temp1<br/>\u00a0<br/>\t}<br/>\treturn st1\t\t\t\t\t  <br/>\u00a0<br/>}<br/>\u00a0<br/>var encarr:[Int]=encode(st:str)<br/>var decarr:[Character]=decode(s:number)<br/>print(encarr)<br/>print(decarr)<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 39, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create MoveToFront <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> symbolTable<br/>    constructor <span class=\"br0\">{</span>symbols<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> symbolTable <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$symbols</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> MoveToFront <span class=\"br0\">{</span>table index<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$table</span> <span class=\"re0\">$index</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$table</span> <span class=\"re0\">$index</span> <span class=\"re0\">$index</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> encode <span class=\"br0\">{</span>text<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> t <span class=\"re0\">$symbolTable</span><br/>\t<span class=\"kw1\">set</span> r <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$text</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact <span class=\"re0\">$t</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">lappend</span> r <span class=\"re0\">$i</span><br/>\t    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span>my MoveToFront <span class=\"re0\">$t</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> decode <span class=\"br0\">{</span>numbers<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> t <span class=\"re0\">$symbolTable</span><br/>\t<span class=\"kw1\">set</span> r <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">foreach</span> n <span class=\"re0\">$numbers</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">append</span> r <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$t</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span>my MoveToFront <span class=\"re0\">$t</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>MoveToFront create mtf <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/><span class=\"kw1\">foreach</span> tester <span class=\"br0\">{</span><span class=\"st0\">\"broood\"</span> <span class=\"st0\">\"bananaaa\"</span> <span class=\"st0\">\"hiphophiphop\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> enc <span class=\"br0\">[</span>mtf encode <span class=\"re0\">$tester</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dec <span class=\"br0\">[</span>mtf decode <span class=\"re0\">$enc</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"'%s' encodes to\u00a0%s. This decodes to '%s'.\u00a0%s\"</span> \\<br/>\t    <span class=\"re0\">$tester</span> <span class=\"re0\">$enc</span> <span class=\"re0\">$dec</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$tester</span> eq <span class=\"re0\">$dec</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Correct!\"</span>\u00a0: <span class=\"st0\">\"WRONG!\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 49, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> mtf_encode(s)<br/>\t<span class=\"co1\">'create the array list and populate it with the initial symbol position<br/></span>\t<span class=\"kw4\">Set</span> symbol_table = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\t<span class=\"kw3\">For</span> j = 97 <span class=\"kw3\">To</span> 122 <span class=\"co1\">'a to z in decimal.<br/></span>\t\tsymbol_table.Add Chr(j)<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw4\">output</span> = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(s)<br/>\t\tchar = Mid(s,i,1)<br/>\t\t<span class=\"kw3\">If</span> i = Len(s) <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw4\">output</span> = <span class=\"kw4\">output</span> &amp; symbol_table.IndexOf(char,0)<br/>\t\t\tsymbol_table.RemoveAt(symbol_table.LastIndexOf(char))<br/>\t\t\tsymbol_table.Insert 0,char<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\t<span class=\"kw4\">output</span> = <span class=\"kw4\">output</span> &amp; symbol_table.IndexOf(char,0) &amp; <span class=\"st0\">\" \"</span><br/>\t\t\tsymbol_table.RemoveAt(symbol_table.LastIndexOf(char))<br/>\t\t\tsymbol_table.Insert 0,char<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tmtf_encode = <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> mtf_decode(s)<br/>\t<span class=\"co1\">'break the function argument into an array<br/></span>\tcode = Split(s,<span class=\"st0\">\" \"</span>)<br/>\t<span class=\"co1\">'create the array list and populate it with the initial symbol position<br/></span>\t<span class=\"kw4\">Set</span> symbol_table = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\t<span class=\"kw3\">For</span> j = 97 <span class=\"kw3\">To</span> 122 <span class=\"co1\">'a to z in decimal.<br/></span>\t\tsymbol_table.Add Chr(j)<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw4\">output</span> = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(code)<br/>\t\tchar = symbol_table(code(i))<br/>\t\t<span class=\"kw4\">output</span> = <span class=\"kw4\">output</span> &amp; char<br/>\t\t<span class=\"kw3\">If</span> code(i) &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\tsymbol_table.RemoveAt(symbol_table.LastIndexOf(char))<br/>\t\t\tsymbol_table.Insert 0,char<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tmtf_decode = <span class=\"kw4\">output</span>\t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Testing the functions<br/></span>wordlist = Array(<span class=\"st0\">\"broood\"</span>,<span class=\"st0\">\"bananaaa\"</span>,<span class=\"st0\">\"hiphophiphop\"</span>)<br/><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> word <span class=\"kw3\">In</span> wordlist<br/>\tWScript.StdOut.Write word &amp; <span class=\"st0\">\" encodes as \"</span> &amp; mtf_encode(word) &amp; <span class=\"st0\">\" and decodes as \"</span> &amp;_<br/>\t\tmtf_decode(mtf_encode(word)) &amp; <span class=\"st0\">\".\"</span><br/>\tWScript.StdOut.WriteBlankLines(1)<br/><span class=\"kw3\">Next</span></pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">fcn encode(text){ //--&gt;List<br/>   st:=[\"a\"..\"z\"].pump(Data);\t//\"abcd..z\" as byte array<br/>   text.reduce(fcn(st,c,sink){<br/>      n:=st.index(c); sink.write(n); st.del(n).insert(0,c); },st,sink:=L());<br/>   sink;<br/>}</pre>"}]}