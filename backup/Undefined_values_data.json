{"task": "Undefined_values", "blocks": [{"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">var</span> foo; <span class=\"co1\">// untyped</span><br/><span class=\"kw2\">var</span> bar:<span class=\"sy0\">*</span>; <span class=\"co1\">// explicitly untyped</span><br/>\u00a0<br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>foo + <span class=\"st0\">\", \"</span> + bar<span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"undefined, undefined\"</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>foo == <span class=\"kw3\">undefined</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"foo is undefined\"</span><span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"foo is undefined\"</span></pre>"}, {"lang": "Ada", "loc": 25, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">pragma</span> Initialize_Scalars; <br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Invalid_Value <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Color <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Red, Green, Blue<span class=\"br0\">)</span>;<br/>   X\u00a0: Float;<br/>   Y\u00a0: Color;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> X'Valid <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"X is not valid\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   X\u00a0:= <span class=\"nu0\">1.0</span>;<br/>   <span class=\"kw1\">if</span> X'Valid <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"X is\"</span> &amp; Float'Image <span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;   <br/>   <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Y'Valid <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Y is not valid\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   Y\u00a0:= Green;<br/>   <span class=\"kw1\">if</span> Y'Valid <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Y is \"</span> &amp; Color'Image <span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> Invalid_Value;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 16, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> R <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">;</span><br/>R r <span class=\"sy1\">:=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> U <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>U u <span class=\"sy1\">:=</span> <span class=\"kw7\">EMPTY</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">IF</span> r <span class=\"kw7\">IS</span> R<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"r IS NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ELSE</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"r ISNT NIL\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">CASE</span> u <span class=\"kw2\">IN</span><br/>  <span class=\"br0\">(</span><span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"u is EMPTY\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OUT</span>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"u isnt EMPTY\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ESAC</span></pre>"}, {"lang": "BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      ok% = TRUE<br/>      ON ERROR LOCAL IF ERR&lt;&gt;26 REPORT\u00a0: END ELSE ok% = FALSE<br/>      IF ok% THEN<br/>        PRINT variable$<br/>      ELSE<br/>        PRINT \"Not defined\"<br/>      ENDIF<br/>      RESTORE ERROR</pre>"}, {"lang": "BBC BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      ok% = TRUE<br/>      ON ERROR LOCAL IF ERR&lt;&gt;26 REPORT\u00a0: END ELSE ok% = FALSE<br/>      IF ok% THEN<br/>        PRINT variable$<br/>      ELSE<br/>        PRINT \"Not defined\"<br/>      ENDIF<br/>      RESTORE ERROR</pre>"}, {"lang": "C", "loc": 16, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> junk<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>junkp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Print an unitialized variable! */</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"junk:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> junk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Follow a pointer to unitialized memory! */</span><br/>\tjunkp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>junkp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>junkp<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"*junkp:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>junkp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 1, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">string</span> foo <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/>  <span class=\"co1\">;; assumption: none of these variables initially exist</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>defvar *x*<span class=\"br0\">)</span>    <span class=\"co1\">;; variable exists now, but has no value</span><br/>  <span class=\"br0\">(</span>defvar *y* <span class=\"nu0\">42</span><span class=\"br0\">)</span> <span class=\"co1\">;; variable exists now, and has a value</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>special-variable-p '*x*<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> T  <span class=\"co1\">;; Symbol *x* names a special variable</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">boundp</span> '*x*<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> <span class=\"kw1\">NIL</span>            <span class=\"co1\">;; *x* has no binding</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">boundp</span> '*y*<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> T<br/>\u00a0<br/>  <span class=\"br0\">(</span>special-variable-p '*z*<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> <span class=\"kw1\">NIL</span> <span class=\"co1\">;; *z* does not name a special variable</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Initialized:</span><br/>    <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <span class=\"nu16\">5.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> <span class=\"st0\">'f'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Default initialized:</span><br/>    <span class=\"kw4\">int</span> aa<span class=\"sy0\">;</span> <span class=\"co1\">// set to 0</span><br/>    <span class=\"kw4\">double</span> bb<span class=\"sy0\">;</span> <span class=\"co1\">// set to double.init, that is a NaN</span><br/>    <span class=\"kw4\">char</span> cc<span class=\"sy0\">;</span> <span class=\"co1\">// set to 0xFF</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dd<span class=\"sy0\">;</span> <span class=\"co1\">// set to null</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> ee<span class=\"sy0\">;</span> <span class=\"co1\">// set to [0, 0, 0]</span><br/>\u00a0<br/>    <span class=\"co1\">// Undefined (contain garbage):</span><br/>    <span class=\"kw4\">int</span> aaa <span class=\"sy0\">=</span> <span class=\"kw4\">void</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bbb <span class=\"sy0\">=</span> <span class=\"kw4\">void</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> eee <span class=\"sy0\">=</span> <span class=\"kw4\">void</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 13, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span><br/>    P<span class=\"sy1\">:</span> <span class=\"kw4\">PInteger</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">New</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"co1\">//Allocate some memory</span><br/>    <span class=\"kw1\">try</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw3\">Assigned</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"co1\">//...</span><br/>        <span class=\"kw1\">begin</span><br/>            P<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">42</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">finally</span><br/>        <span class=\"kw3\">Dispose</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//Release memory allocated by New</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 6, "block": "<pre class=\"text highlighted_source\">try:<br/>\tbogus<br/>catch name-error:<br/>\t!print \"There is *no*\u00a0:bogus in the current context\"<br/>\treturn<br/>!print \"You won't see this.\"</pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>foo <span class=\"sy0\">==</span> bar <span class=\"sy0\">||</span> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> baz <span class=\"sy0\">:=</span> lookup<span class=\"br0\">(</span>foo<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     ...<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 12, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> undefined_values <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> a_record<span class=\"sy1\">,</span> <span class=\"br0\">{</span>member_1<span class=\"sy1\">,</span> member_2<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Record</span> <span class=\"sy3\">=</span> #<span class=\"re7\">a_record</span><span class=\"br0\">{</span>member_1<span class=\"sy3\">=</span>a_value<span class=\"br0\">}</span><span class=\"sy1\">,</span>   <br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Record member_1 ~p, member_2 ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Record</span><span class=\"re8\">#</span><span class=\"re7\">a_record</span><span class=\"sy1\">.</span>member_1<span class=\"sy1\">,</span> <span class=\"re5\">Record</span><span class=\"re8\">#</span><span class=\"re7\">a_record</span><span class=\"sy1\">.</span>member_2<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Member_2 is undefined ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Record</span><span class=\"re8\">#</span><span class=\"re7\">a_record</span><span class=\"sy1\">.</span>member_2 <span class=\"sy3\">=:=</span> undefined<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">IsNaN<span class=\"br0\">(</span>x<span class=\"br0\">)</span></pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">IsNaN<span class=\"br0\">(</span>x<span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 8, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>        <span class=\"co1\">'' initialized to 0 by default</span><br/><span class=\"kw1\">Dim</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">3</span>    <span class=\"co1\">'' initialized to 3</span><br/><span class=\"kw1\">Dim</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = Any  <span class=\"co1\">'' left uninitialized (compiler warning but can be ignored)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> i, j, k<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 7, "block": "<pre class=\"text highlighted_source\">IsBound(a);<br/># true<br/>\u00a0<br/>Unbind(a);<br/>\u00a0<br/>IsBound(a);<br/># false</pre>"}, {"lang": "Go", "loc": 97, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    s <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>    p <span class=\"sy3\">*</span><span class=\"kw4\">int</span><br/>    f <span class=\"kw4\">func</span><span class=\"sy1\">()</span><br/>    <span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span><br/>    m <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>    c <span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Exercise nil objects:\"</span><span class=\"sy1\">)</span><br/>    status<span class=\"sy1\">()</span><br/>\u00a0<br/>    <span class=\"co1\">// initialize objects</span><br/>    s <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    p <span class=\"sy2\">=</span> &amp;s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"co1\">// yes, reference element of slice just created</span><br/>    f <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span> fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"function call\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> user<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"co1\">// see user defined type just below</span><br/>    m <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    c <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Exercise objects after initialization:\"</span><span class=\"sy1\">)</span><br/>    status<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> user <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>user<span class=\"sy1\">)</span> m<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"method call\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> status<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    trySlice<span class=\"sy1\">()</span><br/>    tryPointer<span class=\"sy1\">()</span><br/>    tryFunction<span class=\"sy1\">()</span><br/>    tryInterface<span class=\"sy1\">()</span><br/>    tryMap<span class=\"sy1\">()</span><br/>    tryChannel<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reportPanic<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy2\">:=</span> <span class=\"kw3\">recover</span><span class=\"sy1\">();</span> x <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"panic:\"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> trySlice<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"s[0] =\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tryPointer<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"*p =\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>p<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tryFunction<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>    f<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tryInterface<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>\u00a0<br/>    <span class=\"co1\">// normally the nil identifier accesses a nil value for one of</span><br/>    <span class=\"co1\">// six predefined types.  In a type switch however, nil can be used</span><br/>    <span class=\"co1\">// as a type.  In this case, it matches the nil interface.</span><br/>    <span class=\"kw1\">switch</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw1\">type</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"kw2\">nil</span><span class=\"sy1\">:</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i is nil interface\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">case</span> <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}:</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i has method m\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// assert type with method and then call method</span><br/>    <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>m<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tryMap<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>    m<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"m[0] =\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tryChannel<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> reportPanic<span class=\"sy1\">()</span><br/>    <span class=\"kw3\">close</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"channel closed\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Incoming error--\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><br/><span class=\"co1\">-- When run in GHC:</span><br/><span class=\"co1\">-- \"Incoming error--*** Exception: Prelude.undefined</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> G1<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw2\">local</span> ML1<br/><span class=\"kw2\">static</span> MS1<br/>undeftest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> undeftest<span class=\"br0\">(</span>P1<span class=\"br0\">)</span><br/><span class=\"kw2\">static</span> S1<br/><span class=\"kw2\">local</span> L1<span class=\"sy0\">,</span>L2<br/><span class=\"kw1\">every</span>                                                                   <span class=\"co1\">#write all local, parameter, static, and global variable names </span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">localnames</span><span class=\"sy0\">|</span><span class=\"kw4\">paramnames</span><span class=\"sy0\">|</span><span class=\"kw4\">staticnames</span><span class=\"sy0\">|</span><span class=\"kw4\">globalnames</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">current</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\"># ... visible in the current co-expression at this calling level (0)</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>  foo=: <span class=\"nu0\">3</span><br/>  nc;:<span class=\"st_h\">'foo bar'</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">_1</span></pre>"}, {"lang": "Java", "loc": 3, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> string <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span>        <span class=\"co1\">// the variable string is undefined</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span>           <span class=\"co1\">//prints \"null\" to std out</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>string.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// dereferencing null throws java.lang.NullPointerException</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> a<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">typeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"undefined\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">typeof</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"undefined\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> obj <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\">// Empty object.</span><br/><span class=\"kw1\">typeof</span><span class=\"br0\">(</span>obj.<span class=\"me1\">c</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"undefined\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>obj.<span class=\"me1\">c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/>obj.<span class=\"me1\">c</span> <span class=\"sy0\">===</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">delete</span> obj.<span class=\"me1\">c</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">typeof</span><span class=\"br0\">(</span>obj.<span class=\"me1\">c</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"undefined\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">{}[\"key\"] #=&gt; null</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SomeClass <br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SomeOtherClass <span class=\"br0\">{</span><br/>    lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sc<span class=\"sy0\">:</span> SomeClass<br/>\u00a0<br/>    fun initialize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sc <span class=\"sy0\">=</span> SomeClass<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// not initialized in place or in constructor</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun printSomething<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>sc<span class=\"br0\">)</span>  <span class=\"co1\">// 'sc' may not have been initialized at this point</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun someFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <span class=\"co1\">// for now calls a library function which throws an error and returns Nothing</span><br/>        TODO<span class=\"br0\">(</span><span class=\"st0\">\"someFunc not yet implemented\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> soc <span class=\"sy0\">=</span> SomeOtherClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        soc.<span class=\"me1\">printSomething</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ex<span class=\"sy0\">:</span> Exception<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>ex<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        soc.<span class=\"me1\">someFunc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> Error<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">put var<br/>-- &lt;Void&gt;<br/>put var=VOID<br/>-- 1<br/>put voidP(var)<br/>-- 1<br/>var = 23<br/>put voidP(var)<br/>-- 0</pre>"}, {"lang": "Logo", "loc": 19, "block": "<pre class=\"text highlighted_source\">; procedures<br/>to square\u00a0:x<br/>  output\u00a0:x *\u00a0:x<br/>end<br/>\u00a0<br/>show defined? \"x  \u00a0; true<br/>show procedure? \"x \u00a0; true (also works for built-in primitives)<br/>erase \"x<br/>show defined? \"x  \u00a0; false<br/>show square 3     \u00a0; I don't know how  to square<br/>\u00a0<br/>; names<br/>\u00a0<br/>make \"n 23<br/>\u00a0<br/>show name? \"n  \u00a0; true<br/>ern \"n<br/>show name? \"n  \u00a0; false<br/>show\u00a0:n    \u00a0; n has no value</pre>"}, {"lang": "LOLCODE", "loc": 18, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> foo <span class=\"co1\">BTW, INISHULIZD TO NOOB</span><br/><span class=\"kw2\">DIFFRINT</span> foo <span class=\"kw4\">AN</span> FAIL<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>    YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"FAIL\u00a0!= NOOB\"</span><br/>OIC<br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> bar <span class=\"kw1\">ITZ</span> <span class=\"nu0\">42</span><br/>bar<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>    YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"bar IZ DEFIND\"</span><br/>OIC<br/>\u00a0<br/>bar <span class=\"kw1\">R</span> NOOB <span class=\"co1\">BTW, UNDEF bar</span><br/>bar<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>    YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"SHUD NEVAR C DIS\"</span><br/>OIC<br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">print</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> b<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> b <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 14, "block": "<pre class=\"text highlighted_source\">a<br/>-&gt; a<br/>\u00a0<br/>a + a<br/>-&gt; 2 a<br/>\u00a0<br/>ValueQ[a]<br/>-&gt; False<br/>\u00a0<br/>a = 5<br/>-&gt; 5<br/>\u00a0<br/>ValueQ[a]<br/>-&gt; True</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">global</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/var.html\"><span class=\"kw2\">var</span></a>; </pre>"}, {"lang": "MUMPS", "loc": 2, "block": "<pre class=\"text highlighted_source\"> IF $DATA(SOMEVAR)=0 DO UNDEF\u00a0; A result of 0 means the value is undefined<br/> SET LOCAL=$GET(^PATIENT(RECORDNUM,0))\u00a0;If there isn't a defined item at that location, a null string is returned</pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* There is no undefined value in OCaml,<br/>   but if you really need this you can use the built-in \"option\" type.<br/>   It is defined like this: type 'a option = None | Some of 'a *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> inc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  Some n <span class=\"sy0\">-&gt;</span> Some <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"Undefined argument\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/>inc <span class=\"br0\">(</span>Some <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* -\u00a0: value = Some 1 *)</span><br/>\u00a0<br/>inc None<span class=\"sy0\">;;</span><br/><span class=\"co1\">(* Exception: Failure \"Undefined argument\". *)</span></pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span> X <span class=\"kw1\">in</span><br/>\u00a0<br/><span class=\"kw1\">thread</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">{</span>IsFree X<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"X is unbound.\"</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>   <span class=\"br0\">{</span>Wait X<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Now X is determined.\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Sleeping...\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>Delay 1000<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Setting X.\"</span><span class=\"br0\">}</span><br/>X = 42</pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span> X <span class=\"kw1\">in</span><br/>\u00a0<br/><span class=\"kw1\">thread</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">{</span>IsFree X<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"X is unbound.\"</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>   <span class=\"br0\">{</span>Wait X<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Now X is determined.\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Sleeping...\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>Delay 1000<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Setting X.\"</span><span class=\"br0\">}</span><br/>X = 42</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">v <span class=\"sy0\">==</span> <span class=\"re1\">'v</span></pre>"}, {"lang": "Pascal", "loc": 35, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Declare the variable. It is initialized to the value \"undef\"</span><br/><span class=\"kw1\">our</span> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at first check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give it a value</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Chocolate\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after we gave it the</span><br/><span class=\"co1\"># value \"Chocolate\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at second check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give the variable the value \"undef\".</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">;</span><br/><span class=\"co1\"># or, equivalently:</span><br/><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after we've explicitly</span><br/><span class=\"co1\"># given it an undefined value.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at third check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give the variable a value of 42</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether the it is defined after we've given it</span><br/><span class=\"co1\"># the value 42.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at fourth check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Because most of the output is conditional, this serves as</span><br/><span class=\"co1\"># a clear indicator that the program has run to completion.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Done<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 35, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Declare the variable. It is initialized to the value \"undef\"</span><br/><span class=\"kw1\">our</span> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at first check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give it a value</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Chocolate\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after we gave it the</span><br/><span class=\"co1\"># value \"Chocolate\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at second check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give the variable the value \"undef\".</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">;</span><br/><span class=\"co1\"># or, equivalently:</span><br/><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after we've explicitly</span><br/><span class=\"co1\"># given it an undefined value.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at third check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Give the variable a value of 42</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether the it is defined after we've given it</span><br/><span class=\"co1\"># the value 42.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"var contains an undefined value at fourth check<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$var</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Because most of the output is conditional, this serves as</span><br/><span class=\"co1\"># a clear indicator that the program has run to completion.</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Done<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> Nil<span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"re0\">$x</span><span class=\"sy0\">.</span><span class=\"me1\">WHAT</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints Any()</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">object x<br/>\u00a0<br/>procedure test()<br/>    if object(x) then<br/>        puts(1,\"x is an object\\n\")<br/>    else<br/>        puts(1,\"x is unassigned\\n\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>test()<br/>x = 1<br/>test()</pre>"}, {"lang": "PHP", "loc": 33, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co1\">// Check to see whether it is defined</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"var is undefined at first check<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Give it a value</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Chocolate\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Check to see whether it is defined after we gave it the</span><br/><span class=\"co1\">// value \"Chocolate\"</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"var is undefined at second check<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Give the variable an undefined value.</span><br/><a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Check to see whether it is defined after we've explicitly</span><br/><span class=\"co1\">// given it an undefined value.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"var is undefined at third check<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Give the variable a value of 42</span><br/><span class=\"re0\">$var</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Check to see whether the it is defined after we've given it</span><br/><span class=\"co1\">// the value 42.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"var is undefined at fourth check<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Because most of the output is conditional, this serves as</span><br/><span class=\"co1\">// a clear indicator that the program has run to completion.</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Done<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">: (myfoo 3 4)<br/>!? (myfoo 3 4)<br/>myfoo -- Undefined<br/>?</pre>"}, {"lang": "Pike", "loc": 13, "block": "<pre class=\"pike highlighted_source\">\u00a0<br/>&gt; zero_type<span class=\"br0\">(</span>UNDEFINED<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span><br/>&gt; mapping bar <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"st0\">\"foo\"</span>:<span class=\"st0\">\"hello\"</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; zero_type<span class=\"br0\">(</span>bar<span class=\"sy0\">-</span>&gt;foo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>&gt; zero_type<span class=\"br0\">(</span>bar<span class=\"sy0\">-</span>&gt;baz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span><br/>&gt; bar<span class=\"sy0\">-</span>&gt;baz<span class=\"sy0\">=</span>UNDEFINED<span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>&gt; zero_type<span class=\"br0\">(</span>bar<span class=\"sy0\">-</span>&gt;baz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 10, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Variable</span> <span class=\"kw5\">-Name</span> noSuchVariable <span class=\"kw5\">-ErrorAction</span> SilentlyContinue<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$true</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">else</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$false</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre>?- var(Y).\ntrue.\n\n?- X = 4, var(X).\nfalse.\n\n?- nonvar(Y).\nfalse.\n\n?- X = 4, nonvar(X).\nX = 4.\n</pre>"}, {"lang": "PureBasic", "loc": 21, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">CompilerIf</span> <span class=\"kw2\">Defined</span><span class=\"br0\">(</span>var, #PB_Variable<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"var is defined at first check\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CompilerElse</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"var is undefined at first check\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Define</span> var<br/>  <span class=\"kw1\">CompilerEndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">CompilerIf</span> <span class=\"kw2\">Defined</span><span class=\"br0\">(</span>var, #PB_Variable<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"var is defined at second check\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CompilerElse</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"var is undefined at second check\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Define</span> var<br/>  <span class=\"kw1\">CompilerEndIf</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Check to see whether a name is defined</span><br/><span class=\"kw1\">try</span>: name<br/><span class=\"kw1\">except</span> <span class=\"kw2\">NameError</span>: <span class=\"kw1\">print</span> <span class=\"st0\">\"name is undefined at first check\"</span><br/>\u00a0<br/><span class=\"co1\"># Create a name, giving it a string value</span><br/>name <span class=\"sy0\">=</span> <span class=\"st0\">\"Chocolate\"</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether the name is defined now.</span><br/><span class=\"kw1\">try</span>: name<br/><span class=\"kw1\">except</span> <span class=\"kw2\">NameError</span>: <span class=\"kw1\">print</span> <span class=\"st0\">\"name is undefined at second check\"</span><br/>\u00a0<br/><span class=\"co1\"># Remove the definition of the name.</span><br/><span class=\"kw1\">del</span> name<br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after the explicit removal.</span><br/><span class=\"kw1\">try</span>: name<br/><span class=\"kw1\">except</span> <span class=\"kw2\">NameError</span>: <span class=\"kw1\">print</span> <span class=\"st0\">\"name is undefined at third check\"</span><br/>\u00a0<br/><span class=\"co1\"># Recreate the name, giving it a value of 42</span><br/>name <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether the name is defined now.</span><br/><span class=\"kw1\">try</span>: name<br/><span class=\"kw1\">except</span> <span class=\"kw2\">NameError</span>: <span class=\"kw1\">print</span> <span class=\"st0\">\"name is undefined at fourth check\"</span><br/>\u00a0<br/><span class=\"co1\"># Because most of the output is conditional, this serves as</span><br/><span class=\"co1\"># a clear indicator that the program has run to completion.</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Done\"</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>exists(\"x\")<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-&gt; (letrec ([x x]) x)<br/>#&lt;undefined&gt;<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 20, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program test if a (REXX)  variable is  defined  or  not defined.       */</span><br/>tlaloc = <span class=\"st0\">\"rain god of the Aztecs.\"</span>     <span class=\"coMULTI\">/*assign a value to the Aztec rain god.*/</span><br/>                                       <span class=\"coMULTI\">/*check if the  rain god  is defined.  */</span><br/>y= <span class=\"st0\">'tlaloc'</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">' is   defined.'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">\"isn't defined.\"</span><br/>\u00a0<br/>                                       <span class=\"coMULTI\">/*check if the  fire god  is defined.  */</span><br/>\u00a0<br/>y= <span class=\"st0\">'xiuhtecuhtli'</span>                      <span class=\"coMULTI\">/*assign a value to the Aztec file god.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">' is   defined.'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">\"isn't defined.\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">drop</span> tlaloc                            <span class=\"coMULTI\">/*un\u2500define the  TLALOC  REXX variable.*/</span><br/>                                       <span class=\"coMULTI\">/*check if the  rain god  is defined.  */</span><br/>y= <span class=\"st0\">'tlaloc'</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>==<span class=\"st0\">\"VAR\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">' is  defined.'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> y  <span class=\"st0\">\"isn't defined.\"</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Undefined values<br/>\u00a0<br/>test()<br/>func test <br/>       x=10 y=20 <br/>       see islocal(\"x\") + nl + <br/>       islocal(\"y\") + nl +<br/>       islocal(\"z\") + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Check to see whether it is defined</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"var is undefined at first check\"</span> <span class=\"kw1\">unless</span> <span class=\"kw1\">defined</span>? var<br/>\u00a0<br/><span class=\"co1\"># Give it a value</span><br/>var = <span class=\"st0\">\"Chocolate\"</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined after we gave it the</span><br/><span class=\"co1\"># value \"Chocolate\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"var is undefined at second check\"</span> <span class=\"kw1\">unless</span> <span class=\"kw1\">defined</span>? var<br/>\u00a0<br/><span class=\"co1\"># I don't know any way of undefining a variable in Ruby</span><br/>\u00a0<br/><span class=\"co1\"># Because most of the output is conditional, this serves as</span><br/><span class=\"co1\"># a clear indicator that the program has run to completion.</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Done\"</span></pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">var x;      <span class=\"co1\"># declared, but not defined</span><br/>x == <span class=\"kw2\">nil</span>   <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"nil value\"</span>;<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Give \"x\" some value</span><br/>x = <span class=\"nu0\">42</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"defined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Change \"x\" back to `nil`</span><br/>x = <span class=\"kw2\">nil</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;</pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">var x;      <span class=\"co1\"># declared, but not defined</span><br/>x == <span class=\"kw2\">nil</span>   <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"nil value\"</span>;<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Give \"x\" some value</span><br/>x = <span class=\"nu0\">42</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"defined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Change \"x\" back to `nil`</span><br/>x = <span class=\"kw2\">nil</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">var x;      <span class=\"co1\"># declared, but not defined</span><br/>x == <span class=\"kw2\">nil</span>   <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"nil value\"</span>;<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Give \"x\" some value</span><br/>x = <span class=\"nu0\">42</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> say <span class=\"st0\">\"defined\"</span>;<br/>\u00a0<br/><span class=\"co1\"># Change \"x\" back to `nil`</span><br/>x = <span class=\"kw2\">nil</span>;<br/>\u00a0<br/><span class=\"kw1\">defined</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> say <span class=\"st0\">\"undefined\"</span>;</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Smalltalk</span> includesKey: <span class=\"re1\">#FooBar</span><br/>myNamespace includesKey: <span class=\"re1\">#Baz</span></pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Variables are undefined by default and do not need explicit declaration</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists var<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"var is undefind at first check\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Give it a value</span><br/><span class=\"kw1\">set</span> var <span class=\"st0\">\"Screwy Squirrel\"</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists var<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"var is undefind at second check\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Remove its value</span><br/>unset var<br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists var<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"var is undefind at third check\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Give it a value again</span><br/><span class=\"kw1\">set</span> var <span class=\"nu0\">12345</span><br/>\u00a0<br/><span class=\"co1\"># Check to see whether it is defined</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists var<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"var is undefind at fourth check\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Done\"</span></pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">VAR1</span>=<span class=\"st0\">\"VAR1\"</span><br/><span class=\"kw3\">echo</span> <span class=\"co1\">${VAR1:-\"Not set.\"}</span><br/><span class=\"kw3\">echo</span> <span class=\"co1\">${VAR2:-\"Not set.\"}</span></pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">println(Void);<br/>1+Void<br/>if(Void){} else { 23 }</pre>"}]}