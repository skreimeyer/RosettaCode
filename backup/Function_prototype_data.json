{"task": "Function_prototype", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> noargs <span class=\"kw1\">return</span> Integer;<br/><span class=\"kw3\">function</span> twoargs <span class=\"br0\">(</span>a, b\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer;<br/><span class=\"co1\">--  varargs do not exist</span><br/><span class=\"kw3\">function</span> optionalargs <span class=\"br0\">(</span>a, b\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer;<br/><span class=\"co1\">--  all parameters are always named, only calling by name differs</span><br/><span class=\"kw3\">procedure</span> dostuff <span class=\"br0\">(</span>a\u00a0: Integer<span class=\"br0\">)</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 37, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/bin/a68g --script #</span><br/><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>\u00a0<br/><span class=\"coMULTI\"># An explanation of any placement restrictions for prototype declarations #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> no args<span class=\"sy1\">;</span> <span class=\"coMULTI\"># Declare a function with no argument that returns an INTeger #</span><br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> <span class=\"coMULTI\">#a#</span><span class=\"sy1\">,</span><span class=\"kw3\">INT</span> <span class=\"coMULTI\">#b#</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> two args<span class=\"sy1\">;</span> <span class=\"coMULTI\"># Declare a function with two arguments that returns an INTeger #</span><br/><span class=\"kw4\">MODE</span> VARARGS <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span><span class=\"kw3\">REAL</span><span class=\"sy1\">,</span><span class=\"kw3\">COMPL</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>VARARGS<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> var args<span class=\"sy1\">;</span> <span class=\"coMULTI\"># An empty parameter list can be used to declare a function that accepts varargs #</span><br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>VARARGS<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> at least one args<span class=\"sy1\">;</span> <span class=\"coMULTI\"># One mandatory INTeger argument followed by varargs #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> OPTINT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">VOID</span><span class=\"sy1\">,</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> OPTSTRING<span class=\"sy1\">=</span><span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">VOID</span><span class=\"sy1\">,</span><span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># a function that utilizes optional arguments #</span><br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>OPTINT<span class=\"sy1\">,</span> OPTSTRING<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> optional arguments<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># A prototype declaration for a function that utilizes named parameters #</span><br/><span class=\"kw4\">MODE</span> KWNAME <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     KWSPECIES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> species<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     KWBREED <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> breed<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     OWNER<span class=\"sy1\">=</span><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> first name<span class=\"sy1\">,</span> middle name<span class=\"sy1\">,</span> last name<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># due to the \"Yoneda ambiguity\" simple arguments must have an unique operator defined #</span><br/><span class=\"kw4\">OP</span> NAME <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"br0\">)</span>KWNAME<span class=\"sy1\">:</span> <span class=\"br0\">(</span>KWNAME opt<span class=\"sy1\">;</span> name <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> name<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   SPECIES <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> species<span class=\"br0\">)</span>KWSPECIES<span class=\"sy1\">:</span> <span class=\"br0\">(</span>KWSPECIES opt<span class=\"sy1\">;</span> species <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> species<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   BREED <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> breed<span class=\"br0\">)</span>KWBREED<span class=\"sy1\">:</span> <span class=\"br0\">(</span>KWBREED opt<span class=\"sy1\">;</span> breed <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> breed<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw6\">UNION</span><span class=\"br0\">(</span>KWNAME<span class=\"sy1\">,</span>KWSPECIES<span class=\"sy1\">,</span>KWBREED<span class=\"sy1\">,</span>OWNER<span class=\"br0\">)</span> <span class=\"coMULTI\">#options#</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> <span class=\"kw22\">print</span> pet<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># subroutines, and fuctions are procedures, so have the same prototype declarations #</span><br/>\u00a0<br/><span class=\"coMULTI\"># An explanation and example of any special forms of prototyping not covered by the above:  #</span><br/>COMMENT <br/>  If a function has no arguments<span class=\"sy1\">,</span> eg f<span class=\"sy1\">,</span> <br/>  then it is not requied to pass it a <span class=\"st0\">\"vacuum()\"</span> to call it<span class=\"sy1\">,</span> eg <span class=\"st0\">\"f()\"</span> not correct<span class=\"sy1\">!</span><br/>  Rather is can be called without the <span class=\"br0\">(</span><span class=\"br0\">)</span> vacuum. eg <span class=\"st0\">\"f\"</span><br/>  A <span class=\"kw2\">GOTO</span> <span class=\"st0\">\"label\"</span> is equivalent to <span class=\"st0\">\"PROC VOID label\"</span>.<br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "Aime", "loc": 10, "block": "<pre class=\"text highlighted_source\">integer f0(void);               # No arguments<br/>void f1(integer, real);         # Two arguments<br/>real f2(...);                   # Varargs<br/>void f3(integer, ...);          # Varargs<br/>\u00a0<br/>void f4(integer &amp;, text &amp;);     # Two arguments (integer and string), pass by reference<br/>integer f5(integer, integer (*)(integer));<br/>                                # Two arguments: integer and function returning integer and taking one integer argument<br/>integer f6(integer a, real b);  # Parameters names are allowed<br/>record f7(void);                # Function returning an associative array</pre>"}, {"lang": "C", "loc": 5, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> noargs<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Declare a function with no argument that returns an integer */</span><br/><span class=\"kw4\">int</span> twoargs<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span><span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Declare a function with two arguments that returns an integer */</span><br/><span class=\"kw4\">int</span> twoargs<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">,</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Parameter names are optional in a prototype definition */</span><br/><span class=\"kw4\">int</span> anyargs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* An empty parameter list can be used to declare a function that accepts varargs */</span><br/><span class=\"kw4\">int</span> atleastoneargs<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> ...<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* One mandatory integer argument followed by varargs */</span></pre>"}, {"lang": "C#", "loc": 12, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">abstract</span> <span class=\"kw4\">class</span> Printer<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">abstract</span> <span class=\"kw4\">void</span> Print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> PrinterImpl <span class=\"sy0\">:</span> Printer<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">void</span> Print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello world!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">int</span> noargs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// Declare a function with no arguments that returns an integer</span><br/><span class=\"kw4\">int</span> twoargs<span class=\"br0\">(</span><span class=\"kw4\">int</span> a,<span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// Declare a function with two arguments that returns an integer</span><br/><span class=\"kw4\">int</span> twoargs<span class=\"br0\">(</span><span class=\"kw4\">int</span> ,<span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// Parameter names are optional in a prototype definition</span><br/><span class=\"kw4\">int</span> anyargs<span class=\"br0\">(</span>...<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// An ellipsis is used to declare a function that accepts varargs</span><br/><span class=\"kw4\">int</span> atleastoneargs<span class=\"br0\">(</span><span class=\"kw4\">int</span>, ...<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// One mandatory integer argument followed by varargs</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span> T declval<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//A function template</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ...<span class=\"me1\">T</span><span class=\"sy1\">&gt;</span> tuple<span class=\"sy1\">&lt;</span>T...<span class=\"sy1\">&gt;</span> make_tuple<span class=\"br0\">(</span>T...<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//Function template using parameter pack (since c++11)</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">declare</span> foo<span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 39, "block": "<pre class=\"cobol highlighted_source\">       *&gt; A subprogram taking <span class=\"kw3\">no</span> arguments <span class=\"kw3\">and</span> returning nothing<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> no-args PROTOTYPE<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> no-args<span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; A subprogram taking two <span class=\"nu0\">8</span>-digit numbers as arguments<span class=\"sy0\">,</span> <span class=\"kw3\">and</span> returning<br/>       *&gt; an <span class=\"nu0\">8</span>-digit <span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> two-args PROTOTYPE<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  arg-<span class=\"nu0\">1</span> <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  arg-<span class=\"nu0\">2</span> <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ret   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> arg-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> arg-<span class=\"nu0\">2</span> RETURNING ret<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> two-args<span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; A subprogram taking two <span class=\"kw3\">optional</span> arguments which are <span class=\"nu0\">8</span>-digit<br/>       *&gt; numbers <span class=\"br0\">(</span>passed <span class=\"kw3\">by</span> <span class=\"kw3\">reference</span> <span class=\"br0\">(</span>the default <span class=\"kw3\">and</span> compulsory <span class=\"kw3\">for</span><br/>       *&gt; <span class=\"kw3\">optional</span> arguments<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> optional-args PROTOTYPE<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  arg-<span class=\"nu0\">1</span> <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  arg-<span class=\"nu0\">2</span> <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">OPTIONAL</span> arg-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">OPTIONAL</span> arg-<span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> optional-args<span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; <span class=\"kw3\">Standard</span> <span class=\"kw2\">COBOL</span> does <span class=\"kw3\">not</span> support varargs <span class=\"kw3\">or</span> named parameters<span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; A <span class=\"kw3\">function</span> <span class=\"kw3\">from</span> another language<span class=\"sy0\">,</span> taking a <span class=\"nu0\">32</span>-bit <span class=\"kw4\">integer</span> <span class=\"kw3\">by</span><br/>       *&gt; <span class=\"kw3\">value</span> <span class=\"kw3\">and</span> returning a <span class=\"nu0\">32</span>-bit <span class=\"kw4\">integer</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span> Visual <span class=\"kw2\">COBOL</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> foreign-func PROTOTYPE<span class=\"sy0\">.</span><br/>       OPTIONS<span class=\"sy0\">.</span><br/>           ENTRY-CONVENTION some-langauge<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  arg <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ret <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">USAGE</span> <span class=\"kw3\">COMP-5</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> arg RETURNING ret<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> foreign-func<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; An empty lambda list () takes 0 parameters.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> 0args <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Called 0args~%\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; This lambda list (a b) takes 2 parameters.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> 2args <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Called 2args with ~A and ~A~%\"</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Local variables from lambda lists may have declarations.</span><br/><span class=\"co1\">;; This function takes 2 arguments, which must be integers.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> 2ints <span class=\"br0\">(</span>i j<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>type <span class=\"kw1\">integer</span> i j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ i j<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 47, "block": "<pre class=\"d highlighted_source\"><span class=\"co2\">/// Declare a function with no arguments that returns an integer.</span><br/><span class=\"kw4\">int</span> noArgs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Declare a function with no arguments that returns an integer.</span><br/><span class=\"kw4\">int</span> twoArgs<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Parameter names are optional in a prototype definition.</span><br/><span class=\"kw4\">int</span> twoArgs2<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// An ellipsis can be used to declare a function that accepts</span><br/><span class=\"co2\">/// C-style varargs.</span><br/><span class=\"kw4\">int</span> anyArgs<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// One mandatory integer argument followed by C-style varargs.</span><br/><span class=\"kw4\">int</span> atLeastOneArg<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Declare a function that accepts any number of integers.</span><br/><span class=\"kw4\">void</span> anyInts<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Declare a function that accepts D-style varargs.</span><br/><span class=\"kw4\">void</span> anyArgs2<span class=\"br0\">(</span>TArgs<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>TArgs args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Declare a function that accepts two or more D-style varargs.</span><br/><span class=\"kw4\">void</span> anyArgs3<span class=\"br0\">(</span>TArgs<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>TArgs args<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>TArgs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Currently D doesn't support named arguments.</span><br/>\u00a0<br/><span class=\"co2\">/// One implementation.</span><br/><span class=\"kw4\">int</span> twoArgs<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">interface</span> SomeInterface <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Varargs</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// C-style.</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">void</span> bar<span class=\"br0\">(</span>T<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>T args<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// D-style.</span><br/>\u00a0<br/>    <span class=\"co1\">// Optional arguments are only supported if a default is provided,</span><br/>    <span class=\"co1\">// the default arg(s) has/have to be at the end of the args list.</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' The position regarding prototypes is broadly similar to that of the C language in that functions, </span><br/><span class=\"co1\">' sub-routines or operators (unless they have already been fully defined) must be declared before they can be used. </span><br/><span class=\"co1\">' This is usually done near the top of a file or in a separate header file which is then 'included'.</span><br/>\u00a0<br/><span class=\"co1\">' Parameter names are optional in declarations. When calling functions, using parameter names </span><br/><span class=\"co1\">' (as opposed to identifying arguments by position) is not supported.</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> MyType <span class=\"co1\">' needed for operator declaration</span><br/>  i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> noArgs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <span class=\"co1\">' function with no argument that returns an integer </span><br/><span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> twoArgs<span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">' function with two arguments that returns an integer </span><br/><span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> atLeastOneArg <span class=\"kw1\">CDecl</span><span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, ...<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">' one mandatory integer argument followed by varargs</span><br/><span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> optionalArg<span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">' function with a (single) optional argument with default value </span><br/><span class=\"kw1\">Declare</span> <span class=\"kw1\">Sub</span> noArgs2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">' sub-routine with no argument</span><br/><span class=\"kw1\">Declare</span> Operator + <span class=\"br0\">(</span><span class=\"kw1\">As</span> MyType, <span class=\"kw1\">As</span> MyType<span class=\"br0\">)</span> <span class=\"kw1\">As</span> MyType <span class=\"co1\">' operator declaration (no hidden 'This' parameter for MyType)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' FreeBASIC also supports object-oriented programming and here all constructors, destructors, </span><br/><span class=\"co1\">' methods (function or sub), properties and operators (having a hidden 'This' parameter) must be </span><br/><span class=\"co1\">' declared within a user defined type and then defined afterwards.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Type</span> MyType2<br/>  <span class=\"kw1\">Public</span>:<br/>    <span class=\"kw1\">Declare</span> Constructor<span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> Destructor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Sub</span> MySub<span class=\"br0\">(</span><span class=\"br0\">)</span>   <br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> MyFunction<span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <br/>    <span class=\"kw1\">Declare</span> Property MyProperty <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">Declare</span> Operator Cast<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Private</span>:<br/>    i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span></pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// A function taking and returning nothing (unit).</span><br/><span class=\"kw1\">val</span> noArgs\u00a0: <span class=\"kw4\">unit</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">unit</span><br/><span class=\"co1\">// A function taking two integers, and returning an integer.</span><br/><span class=\"kw1\">val</span> twoArgs\u00a0: <span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/><span class=\"co1\">// A function taking a ParamPack array of ints, and returning an int. The ParamPack</span><br/><span class=\"co1\">// attribute is not included in the signature.</span><br/><span class=\"kw1\">val</span> varArgs\u00a0: <span class=\"kw4\">int</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/><span class=\"co1\">// A function taking an int and a ParamPack array of ints, and returning an</span><br/><span class=\"co1\">// object of the same type.</span><br/><span class=\"kw1\">val</span> atLeastOnArg\u00a0: <span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/><span class=\"co1\">// A function taking an int Option, and returning an int.</span><br/><span class=\"kw1\">val</span> optionalArg\u00a0: <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Option</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"co1\">// Named arguments and the other form of optional arguments are only available on</span><br/><span class=\"co1\">// methods.</span><br/><span class=\"kw1\">type</span> methodClass <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">class</span><br/>    <span class=\"co1\">// A method taking an int named x, and returning an int.</span><br/>    <span class=\"kw1\">member</span> NamedArg\u00a0: x:<span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/>    <span class=\"co1\">// A method taking two optional ints in a tuple, and returning an int. The</span><br/>    <span class=\"co1\">//optional arguments must be tupled.</span><br/>    <span class=\"kw1\">member</span> OptionalArgs\u00a0:\u00a0?x:<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>\u00a0?y:<span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Go", "loc": 3, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> a<span class=\"sy1\">()</span>          <span class=\"co1\">// function with no arguments</span><br/><span class=\"kw4\">func</span> b<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span>  <span class=\"co1\">// function with two arguments</span><br/><span class=\"kw4\">func</span> c<span class=\"sy1\">(</span><span class=\"sy4\">...</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span>    <span class=\"co1\">// varargs are called \"variadic parameters\" in Go.</span></pre>"}, {"lang": " haskell ", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/>add <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>add x y <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>y<br/>\u00a0</pre>"}, {"lang": "J", "loc": 60, "block": "<pre class=\"j highlighted_source\">   <span class=\"co1\">NB. j assumes an unknown name f is a verb of infinite rank</span><br/>   <span class=\"co1\">NB. f has infinite ranks</span><br/>   f b. <span class=\"nu0\">0</span><br/><span class=\"nu0\">_</span> <span class=\"nu0\">_</span> <span class=\"nu0\">_</span><br/>\u00a0<br/>   <span class=\"co1\">NB. The verb g makes a table.</span><br/>   g=: f/~<br/>\u00a0<br/>   <span class=\"co1\">NB. * has rank 0</span><br/>   f=: *<br/>\u00a0<br/>\u00a0<br/>   <span class=\"co1\">NB. indeed, make a multiplication table</span><br/>   f/~ i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">8</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">12</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">16</span><br/>\u00a0<br/>   <span class=\"co1\">NB. g was defined as if f had infinite rank.</span><br/>   g i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">16</span><br/>\u00a0<br/>   <span class=\"co1\">NB. f is known to have rank 0.</span><br/>   g=: f/~<br/>\u00a0<br/>   <span class=\"co1\">NB. Now we reproduce the table</span><br/>   g i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">8</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">12</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">16</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>   <span class=\"co1\">NB. change f to another rank 0 verb</span><br/>   f=: +   <br/>\u00a0<br/>   <span class=\"co1\">NB. and construct an addition table</span><br/>   g i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>\u00a0<br/>   <span class=\"co1\">NB. f is multiplication at infinite rank</span><br/>   f=: *\"<span class=\"nu0\">_</span><br/>\u00a0<br/>\u00a0<br/>   <span class=\"co1\">NB. g, however, has rank 0</span><br/>   g i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">8</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">12</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">16</span></pre>"}, {"lang": "JavaScript", "loc": 39, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"co1\">// A prototype declaration for a function that does not require arguments</span><br/><span class=\"kw1\">function</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>List.<span class=\"kw1\">prototype</span>.<span class=\"me1\">push</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">push</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>List.<span class=\"kw1\">prototype</span>.<span class=\"me1\">pop</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">pop</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>l.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>l.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// 1</span><br/>l<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><br/>l.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 5</span><br/>l.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// 0</span><br/>\u00a0<br/><span class=\"co1\">// A prototype declaration for a function that utilizes varargs</span><br/><span class=\"kw1\">function</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">push</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>List.<span class=\"kw1\">prototype</span>.<span class=\"me1\">push</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">push</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>List.<span class=\"kw1\">prototype</span>.<span class=\"me1\">pop</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">pop</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> List<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>l.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// 3</span><br/>l<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><br/>l.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 15</span><br/>l.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// 2</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>interface MyInterface <span class=\"br0\">{</span><br/>    fun foo<span class=\"br0\">(</span><span class=\"br0\">)</span>                     <span class=\"co1\">// no arguments, no return type</span><br/>    fun goo<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span>       <span class=\"co1\">// two arguments, no return type</span><br/>    fun voo<span class=\"br0\">(</span>vararg v<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span>        <span class=\"co1\">// variable number of arguments, no return type</span><br/>    fun ooo<span class=\"br0\">(</span>o<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int      <span class=\"co1\">// optional argument with default value and return type Int</span><br/>    fun roo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int                <span class=\"co1\">// no arguments with return type Int</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> poo<span class=\"sy0\">:</span> Int                <span class=\"co1\">// read only property of type Int</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyAbstractClass <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> fun afoo<span class=\"br0\">(</span><span class=\"br0\">)</span>           <span class=\"co1\">// abstract member function, no arguments or return type</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> apoo<span class=\"sy0\">:</span> Int        <span class=\"co1\">// abstract read/write member property of type Int</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Derived <span class=\"sy0\">:</span> MyAbstractClass<span class=\"br0\">(</span><span class=\"br0\">)</span>, MyInterface <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun afoo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> apoo<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun goo<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun voo<span class=\"br0\">(</span>vararg v<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun ooo<span class=\"br0\">(</span>o<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> o  <span class=\"co1\">// can't specify default argument again here but same as in interface</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun roo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> poo<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> Derived<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>d.<span class=\"me1\">apoo</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>d.<span class=\"me1\">ooo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// default argument of 1 inferred</span><br/>    println<span class=\"br0\">(</span>d.<span class=\"me1\">roo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>d.<span class=\"me1\">poo</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 15, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">-- Does not require arguments</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Func<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"co1\">-- Requires arguments</span><br/>\t<span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Func<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"co1\">-- Arguments are optional</span><br/>\t<span class=\"kw1\">return</span> a <span class=\"kw2\">or</span> <span class=\"nu0\">4</span> <span class=\"sy0\">+</span> b <span class=\"kw2\">or</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Func<span class=\"br0\">(</span>a<span class=\"sy0\">,...</span><span class=\"br0\">)</span> <span class=\"co1\">-- One argument followed by varargs</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"sy0\">...</span><span class=\"br0\">}</span> <span class=\"co1\">-- Returns both arguments, varargs as table</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Luck", "loc": 8, "block": "<pre class=\"text highlighted_source\">function noargs(): int =\u00a0?\u00a0;;<br/>function twoargs(x:int, y:int): int =\u00a0?\u00a0;;<br/>\u00a0<br/>/* underscore means ignore and is not bound to lexical scope */<br/>function twoargs(_:bool, _:bool): int =\u00a0?\u00a0;;<br/>\u00a0<br/>function anyargs(xs: ...): int =\u00a0?\u00a0;;<br/>function plusargs(x:int, xs: ...): int =\u00a0?\u00a0;;</pre>"}, {"lang": "M2000 Interpreter", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Check {<br/>      Module MyBeta (a) {<br/>            Print \"MyBeta\", a/2<br/>      }<br/>      Module TestMe {<br/>            Module Beta (x) {<br/>                  Print \"TestMeBeta\", x<br/>            }<br/>            Beta 100<br/>      }<br/>      TestMe\u00a0; Beta as MyBeta<br/>}<br/>Check<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 17, "block": "<pre class=\"text highlighted_source\"># Procedure declarations. All are named<br/>proc noargs(): int<br/>proc twoargs(a, b: int): int<br/>proc anyargs(x: varargs[int]): int<br/>proc optargs(a, b: int = 10): int<br/>\u00a0<br/># Usage<br/>discard noargs()<br/>discard twoargs(1,2)<br/>discard anyargs(1,2,3,4,5,6,7,8)<br/>discard optargs(5)<br/>\u00a0<br/># Procedure definitions<br/>proc noargs(): int = echo \"noargs\"<br/>proc twoargs(a, b: int): int = echo \"twoargs\"<br/>proc anyargs(x: varargs[int]): int = echo \"anyargs\"<br/>proc optargs(a: int, b = 10): int = echo \"optargs\"</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">Method new: myMethod</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">long</span><br/>foo<span class=\"br0\">(</span>GEN a<span class=\"sy0\">,</span> GEN b<span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> noargs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># Declare a function with no arguments</span><br/><span class=\"kw2\">sub</span> twoargs<span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># Declare a function with two scalar arguments. The two sigils act as argument type placeholders</span><br/><span class=\"kw2\">sub</span> noargs <span class=\"sy0\">:</span><a href=\"http://perldoc.perl.org/functions/prototype.html\"><span class=\"kw3\">prototype</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># Using the\u00a0:attribute syntax instead</span><br/><span class=\"kw2\">sub</span> twoargs <span class=\"sy0\">:</span><a href=\"http://perldoc.perl.org/functions/prototype.html\"><span class=\"kw3\">prototype</span></a><span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> foo <span class=\"br0\">(</span> <span class=\"sy0\">--&gt;</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">...</span><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">forward function noargs() -- Declare a function with no arguments<br/>forward procedure twoargs(integer a, integer b) -- Declare a procedure with two arguments<br/>forward procedure twoargs(integer, integer /*b*/) -- Parameter names are optional in forward (and actual) definitions<br/>forward function anyargs(sequence s) -- varargs are [best/often] handled as a (single) sequence in Phix<br/>forward function atleastonearg(integer a, integer b=1, ...); -- Default makes args optional (== actual defn)</pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">declare</span> s1 <span class=\"kw1\">entry</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> s2 <span class=\"kw1\">entry</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> s3 <span class=\"kw1\">entry</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span><span class=\"sy0\">,</span> <span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">declare</span> f1 <span class=\"kw1\">entry</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> f2 <span class=\"kw1\">entry</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> f3 <span class=\"kw1\">entry</span> <span class=\"br0\">(</span><span class=\"kw1\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (no-arg) (void))<br/>\u00a0<br/>(define (two-args a b) (void))\u00a0;arguments are always named<br/>\u00a0<br/>(define (varargs . args) (void))\u00a0;the extra arguments are stored in a list<br/>\u00a0<br/>(define (varargs2 a . args) (void))\u00a0;one obligatory argument and the rest are contained in the list<br/>\u00a0<br/>(define (optional-arg (a 5)) (void))\u00a0;a defaults to 5</pre>"}, {"lang": "REXX", "loc": 8, "block": "<pre class=\"text highlighted_source\">          define('multiply(a,b)')\u00a0:(mul_end)<br/>multiply  multiply = a * b       \u00a0:(return)<br/>mul_end<br/>\u00a0<br/>* Test<br/>          output = multiply(10.1,12.2)<br/>          output = multiply(10,12)<br/>end</pre>"}, {"lang": "SNOBOL4", "loc": 8, "block": "<pre class=\"text highlighted_source\">          define('multiply(a,b)')\u00a0:(mul_end)<br/>multiply  multiply = a * b       \u00a0:(return)<br/>mul_end<br/>\u00a0<br/>* Test<br/>          output = multiply(10.1,12.2)<br/>          output = multiply(10,12)<br/>end</pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">fcn{\"Hello World\"}   // no expected args<br/>fcn(){\"Hello World\"} // ditto<br/>\u00a0<br/>fcn{vm.arglist}(1,2)   // ask the VM for the passed in args --&gt;L(1,2)<br/>fcn f(a,b){a+b}  // fcn(1,2,3) works just fine<br/>fcn f(args){}(1,2,3)  //args = 1<br/>fcn(args){vm.arglist.sum()}(1,2,3) //--&gt;6<br/>\u00a0<br/>fcn(a=1,b=2){vm.arglist}()  //--&gt;L(1,2)<br/>fcn(a=1,b=2){vm.arglist}(5) //--&gt;L(5,2)<br/>fcn(a=1,b){vm.arglist}()    //--&gt;L(1), error if you try to use b<br/>fcn(a,b=2){vm.arglist}(5)   //--&gt;L(5,2)<br/>fcn(a,b=2,c){vm.arglist}(1) //--&gt;L(1,2)<br/>\u00a0<br/>fcn(){vm.nthArg(1)}(5,6)           //--&gt;6<br/>fcn{vm.numArgs}(1,2,3,4,5,6,7,8,9) //--&gt;9<br/>fcn{vm.argsMatch(...)}   // a somewhat feeble attempt arg pattern matching based on type (vs value)<br/>\u00a0<br/>   // you can do list assignment in the prototype:<br/>fcn(a,[(b,c)],d){vm.arglist}(1,L(2,3,4),5) //--&gt;L(1,L(2,3,4),5)<br/>fcn(a,[(b,c)],d){\"%s,%s,%s,%s\".fmt(a,b,c,d)}(1,L(2,3,4),5) //--&gt;1,2,3,5<br/>\u00a0<br/>   // no type enforcement but you can give a hint to the compiler<br/>fcn([Int]n){n.sin()} //--&gt; syntax error as Ints don't do sin</pre>"}]}