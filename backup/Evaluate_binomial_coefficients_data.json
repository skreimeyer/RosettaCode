{"task": "Evaluate_binomial_coefficients", "blocks": [{"lang": "360 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">*        Evaluate binomial coefficients - 29/09/2015<br/>BINOMIAL CSECT<br/>         USING  BINOMIAL,R15       set base register<br/>         SR     R4,R4              clear for mult and div <br/>         LA     R5,1               r=1<br/>         LA     R7,1               i=1<br/>         L      R8,N               m=n<br/>LOOP     LR     R4,R7              do while i&lt;=k<br/>         C      R4,K               i&lt;=k<br/>         BH     LOOPEND            if not then exit while<br/>         MR     R4,R8              r*m<br/>         DR     R4,R7              r=r*m/i<br/>         LA     R7,1(R7)           i=i+1<br/>         BCTR   R8,0               m=m-1<br/>         B      LOOP               loop while<br/>LOOPEND  XDECO  R5,PG              edit r<br/>         XPRNT  PG,12              print r<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>N        DC     F'10'              &lt;== input value<br/>K        DC     F'4'               &lt;== input value<br/>PG       DS     CL12               buffer<br/>         YREGS<br/>         END    BINOMIAL</pre>"}, {"lang": "ABAP", "loc": 28, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> lcl_binom <span class=\"kw4\">DEFINITION</span> <span class=\"kw9\">CREATE PUBLIC</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw8\"><span class=\"kw4\">PUBLIC</span> SECTION</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">CLASS-METHODS</span></a><span class=\"sy0\">:</span><br/>      calc<br/>        <span class=\"kw4\">IMPORTING</span> n               <span class=\"kw4\">TYPE</span> i<br/>                  k               <span class=\"kw4\">TYPE</span> i<br/>        <span class=\"kw4\">RETURNING</span> <span class=\"kw4\">VALUE</span><span class=\"br0\">(</span>r_result<span class=\"br0\">)</span> <span class=\"kw4\">TYPE</span> f<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> lcl_binom <span class=\"kw4\">IMPLEMENTATION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">METHOD</span></a> calc<span class=\"sy0\">.</span><br/>\u00a0<br/>    r_result <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy1\">=</span> n<span class=\"sy0\">.</span><br/>\u00a0<br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> i <span class=\"sy1\">&lt;=</span> k<span class=\"sy0\">.</span><br/>      r_result <span class=\"sy1\">=</span> r_result <span class=\"sy0\">*</span> m <span class=\"sy0\">/</span> i<span class=\"sy0\">.</span><br/>      i <span class=\"sy1\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      m <span class=\"sy1\">=</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">ENDMETHOD</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fac <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span><br/>       <span class=\"nu0\">1</span><br/>       <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>fac <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> binom <span class=\"br0\">(</span>n k<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>fac n<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span>fac <span class=\"br0\">(</span>- n k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fac k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 29, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Test_Binomial <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Binomial <span class=\"br0\">(</span>N, K\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Result\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      M     \u00a0: Natural;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N &lt; K <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Constraint_Error;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> K &gt; N/<span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- Use symmetry</span><br/>         M\u00a0:= N - K;<br/>      <span class=\"kw1\">else</span><br/>         M\u00a0:= K;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">M</span> <span class=\"kw1\">loop</span><br/>         Result\u00a0:= Result * <span class=\"br0\">(</span>N - M + I<span class=\"br0\">)</span> / I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Binomial;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">17</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> K <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">N</span> <span class=\"kw1\">loop</span><br/>         Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Binomial <span class=\"br0\">(</span>N, K<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      New_Line;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Test_Binomial;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> factorial <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>        <span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>\u00a0<br/>        result <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i  <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                result <span class=\"sy1\">*:=</span> i<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        result<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> choose <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> k<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>        <span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Note: code can be optimised here as k &lt; n #</span><br/>        result <span class=\"sy1\">:=</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> <span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy1\">*</span> factorial<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        result<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>choose<span class=\"br0\">(</span>5<span class=\"sy1\">,</span> 3<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 32, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% calculates n!/k!                                                      \u00a0%<br/>    integer procedure factorialOverFactorial( integer value n, k )\u00a0;<br/>        if      k &gt; n then 0<br/>        else if k = n then 1<br/>        else\u00a0%  k &lt; n\u00a0%    begin<br/>            integer f;<br/>            f\u00a0:= 1;<br/>            for i\u00a0:= k + 1 until n do f\u00a0:= f * i;<br/>            f<br/>        end factorialOverFactorial\u00a0;<br/>\u00a0<br/>   \u00a0% calculates n!                                                         \u00a0%<br/>    integer procedure factorial( integer value n )\u00a0;<br/>        begin<br/>            integer f;<br/>            f\u00a0:= 1;<br/>            for i\u00a0:= 2 until n do f\u00a0:= f * i;<br/>            f<br/>        end factorial\u00a0;<br/>\u00a0<br/>   \u00a0% calculates the binomial coefficient of (n k)                          \u00a0%<br/>   \u00a0% uses the factorialOverFactorial procedure for a slight optimisation   \u00a0%<br/>    integer procedure binomialCoefficient( integer value n, k )\u00a0;<br/>        if ( n - k ) &gt; k<br/>        then factorialOverFactorial( n, n - k ) div factorial(   k   )<br/>        else factorialOverFactorial( n,   k   ) div factorial( n - k );<br/>\u00a0<br/>   \u00a0% display the binomial coefficient of (5 3)                             \u00a0%<br/>    write( binomialCoefficient( 5, 3 ) )<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 18, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"nu0\">5</span><br/><span class=\"kw3\">set</span> k <span class=\"kw3\">to</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw3\">on</span> calculateFactorial<span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">set</span> partial_factorial <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> val<br/>\t\t<span class=\"kw3\">set</span> factorial <span class=\"kw3\">to</span> i <span class=\"sy0\">*</span> partial_factorial<br/>\t\t<span class=\"kw3\">set</span> partial_factorial <span class=\"kw3\">to</span> factorial<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t<span class=\"kw3\">return</span> factorial<br/><span class=\"kw3\">end</span> calculateFactorial<br/>\u00a0<br/><span class=\"kw3\">set</span> n_factorial <span class=\"kw3\">to</span> calculateFactorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> k_factorial <span class=\"kw3\">to</span> calculateFactorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> n_minus_k_factorial <span class=\"kw3\">to</span> calculateFactorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">return</span> n_factorial <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n_minus_k_factorial<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k_factorial<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Round</span></a><span class=\"br0\">(</span>BinomialCoefficient<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>BinomialCoefficient<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    r <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% k <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> k\u00a0? k\u00a0: n <span class=\"sy0\">-</span> k <span class=\"br0\">{</span><br/>        r <span class=\"sy0\">*=</span> n <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        r <span class=\"sy0\">/=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f EVALUATE_BINOMIAL_COEFFICIENTS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">100</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">33</span>,<span class=\"nu0\">17</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>n,k,  i,r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      r <span class=\"sy3\">*</span>= <span class=\"br0\">(</span>n <span class=\"sy3\">-</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> i<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d =\u00a0%d<span class=\"es0\">\\n</span>\"</span>,n,k,r<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      @%=&amp;1010<br/>\u00a0<br/>      PRINT \"Binomial (5,3) = \"; FNbinomial(5, 3)<br/>      PRINT \"Binomial (100,2) = \"; FNbinomial(100, 2)<br/>      PRINT \"Binomial (33,17) = \"; FNbinomial(33, 17)<br/>      END<br/>\u00a0<br/>      DEF FNbinomial(N%, K%)<br/>      LOCAL R%, D%<br/>      R% = 1\u00a0: D% = N% - K%<br/>      IF D% &gt; K% THEN K% = D%\u00a0: D% = N% - K%<br/>      WHILE N% &gt; K%<br/>        R% *= N%<br/>        N% -= 1<br/>        WHILE D% &gt; 1 AND (R% MOD D%) = 0<br/>          R% /= D%<br/>          D% -= 1<br/>        ENDWHILE<br/>      ENDWHILE<br/>      = R%<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 17, "block": "<pre class=\"text highlighted_source\">(binomial=<br/>  n k coef<br/>.  \u00a0!arg:(?n,?k)<br/>  &amp; (!n+-1*!k:&lt;!k:?k|)<br/>  &amp; 1:?coef<br/>  &amp;   whl<br/>    ' (\u00a0!k:&gt;0<br/>      &amp;\u00a0!coef*!n*!k^-1:?coef<br/>      &amp;\u00a0!k+-1:?k<br/>      &amp;\u00a0!n+-1:?n<br/>      )<br/>  &amp;\u00a0!coef<br/>);<br/>\u00a0<br/>binomial$(5,3)<br/>10<br/>\u00a0</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 5 3nr<br/>10<br/>\u00a0</pre>"}, {"lang": "C", "loc": 43, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;limits.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* We go to some effort to handle overflow situations */</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> gcd_ui<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> t<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> t <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> x <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    t <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span>  y <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> y<span class=\"sy0\">;</span>  x <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* y1 &lt;- x0\u00a0% y0\u00a0; x1 &lt;- y0 */</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> binomial<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> d<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> k <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span>k<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;=</span> k<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> ULONG_MAX<span class=\"sy0\">/</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"coMULTI\">/* Possible overflow */</span><br/>      <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> nr<span class=\"sy0\">,</span> dr<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* reduced numerator / denominator */</span><br/>      g <span class=\"sy0\">=</span> gcd_ui<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span>  nr <span class=\"sy0\">=</span> n<span class=\"sy0\">/</span>g<span class=\"sy0\">;</span>  dr <span class=\"sy0\">=</span> d<span class=\"sy0\">/</span>g<span class=\"sy0\">;</span><br/>      g <span class=\"sy0\">=</span> gcd_ui<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> dr<span class=\"br0\">)</span><span class=\"sy0\">;</span>  r <span class=\"sy0\">=</span> r<span class=\"sy0\">/</span>g<span class=\"sy0\">;</span>  dr <span class=\"sy0\">=</span> dr<span class=\"sy0\">/</span>g<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> ULONG_MAX<span class=\"sy0\">/</span>nr<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Unavoidable overflow */</span><br/>      r <span class=\"sy0\">*=</span> nr<span class=\"sy0\">;</span><br/>      r <span class=\"sy0\">/=</span> dr<span class=\"sy0\">;</span><br/>      n<span class=\"sy0\">--;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      r <span class=\"sy0\">*=</span> n<span class=\"sy0\">--;</span><br/>      r <span class=\"sy0\">/=</span> d<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">67</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">double</span> Factorial<span class=\"br0\">(</span><span class=\"kw4\">double</span> nValue<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>       <span class=\"kw4\">double</span> result <span class=\"sy1\">=</span> nValue<span class=\"sy4\">;</span><br/>       <span class=\"kw4\">double</span> result_next<span class=\"sy4\">;</span><br/>       <span class=\"kw4\">double</span> pc <span class=\"sy1\">=</span> nValue<span class=\"sy4\">;</span><br/>       <span class=\"kw1\">do</span><br/>       <span class=\"br0\">{</span><br/>           result_next <span class=\"sy1\">=</span> result<span class=\"sy2\">*</span><span class=\"br0\">(</span>pc<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>           result <span class=\"sy1\">=</span> result_next<span class=\"sy4\">;</span><br/>           pc<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>       <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>pc<span class=\"sy1\">&gt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       nValue <span class=\"sy1\">=</span> result<span class=\"sy4\">;</span><br/>       <span class=\"kw1\">return</span> nValue<span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> binomialCoefficient<span class=\"br0\">(</span><span class=\"kw4\">double</span> n, <span class=\"kw4\">double</span> k<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>n <span class=\"sy2\">-</span> k<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu19\">1e-7</span> <span class=\"sy3\">||</span> k  <span class=\"sy1\">&lt;</span> <span class=\"nu19\">1e-7</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu16\">1.0</span><span class=\"sy4\">;</span><br/>       <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span>k<span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu19\">1e-7</span> <span class=\"sy3\">||</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span>k <span class=\"sy2\">-</span> <span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu19\">1e-7</span><span class=\"br0\">)</span><span class=\"kw1\">return</span> n<span class=\"sy4\">;</span><br/>       <span class=\"kw1\">return</span> Factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy2\">/</span><span class=\"br0\">(</span>Factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy2\">*</span>Factorial<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy2\">-</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 37, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> BinomialCoefficients<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">ulong</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span>, k <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">ulong</span> result <span class=\"sy0\">=</span> biCoefficient<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The Binomial Coefficient of {0}, and {1}, is equal to: {2}\"</span>, n, k, result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> fact<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">ulong</span> biCoefficient<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> n, <span class=\"kw4\">ulong</span> k<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">-</span> k<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                k <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> k<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">ulong</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                c <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> binomial<span class=\"sy0\">-</span>coefficient <span class=\"br0\">[</span>n k<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rprod <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>a b<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> a <span class=\"br0\">(</span><span class=\"kw1\">inc</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>rprod <span class=\"br0\">(</span><span class=\"sy0\">-</span> n k <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>rprod <span class=\"nu0\">1</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>binomial_coefficient = <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  result = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">k</span><span class=\"br0\">]</span><br/>    result <span class=\"sy0\">*</span>= <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  result<br/>\u00a0<br/>n = <span class=\"nu0\">5</span><br/><span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"binomial_coefficient(#{n}, #{k}) = #{binomial_coefficient(n,k)}\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> choose <span class=\"br0\">(</span>n k<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>prod-enum <span class=\"br0\">(</span>s e<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i s <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>r <span class=\"nu0\">1</span> <span class=\"br0\">(</span>* i r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i e<span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>fact <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>prod-enum <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>prod-enum <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span> k<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>fact k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\">T binomial<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T n<span class=\"sy0\">,</span> T k<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        k <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> k<span class=\"sy0\">;</span><br/>    T bc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T i<span class=\"sy0\">;</span> T<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"me1\">k</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        bc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bc <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> bc<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> d<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"(%3d\u00a0%3d) =\u00a0%s\"</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> binomial<span class=\"br0\">(</span>d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"(100  50) = \"</span><span class=\"sy0\">,</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">100</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span>.<span class=\"me1\">BigInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">[sx1q]sz[d0=zd1-lfx*]sf[skdlfxrlk-lfxlklfx*/]sb</pre>"}, {"lang": "Delphi", "loc": 28, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Binomial<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> BinomialCoff<span class=\"br0\">(</span>N<span class=\"sy1\">,</span> K<span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  L<span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> N &lt; K <span class=\"kw1\">then</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span>      <span class=\"co1\">// Error</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> K &gt; N <span class=\"sy3\">-</span> K <span class=\"kw1\">then</span><br/>      K<span class=\"sy1\">:</span><span class=\"sy3\">=</span> N <span class=\"sy3\">-</span> K<span class=\"sy1\">;</span>    <span class=\"co1\">// Optimization</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    L<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> L &lt; K <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">*</span> <span class=\"br0\">(</span>N <span class=\"sy3\">-</span> L<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"kw1\">div</span> L<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'C(5,3) is '</span><span class=\"sy1\">,</span> BinomialCoff<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ReadLn<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def choose(n,k) when is_integer(n) and is_integer(k) and n&gt;=0 and k&gt;=0 and n&gt;=k do<br/>    if k==0, do: 1, else: choose(n,k,1,1)<br/>  end<br/>\u00a0<br/>  def choose(n,k,k,acc), do: div(acc * (n-k+1), k)<br/>  def choose(n,k,i,acc), do: choose(n, k, i+1, div(acc * (n-i+1), i))<br/>end<br/>\u00a0<br/>IO.inspect RC.choose(5,3)<br/>IO.inspect RC.choose(60,30)</pre>"}, {"lang": "Erlang", "loc": 10, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_integer</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">is_integer</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">K</span> <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">(</span><span class=\"re5\">Acc</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"sy1\">;</span><br/><span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">choose</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">Acc</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"re5\">I</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"re5\">I</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 28, "block": "<pre class=\"text highlighted_source\">PROGRAM BINOMIAL<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>PROCEDURE BINOMIAL(N,K-&gt;BIN)<br/>      LOCAL R,D<br/>      R=1 D=N-K<br/>      IF D&gt;K THEN K=D D=N-K  END IF<br/>      WHILE N&gt;K DO<br/>        R*=N<br/>        N-=1<br/>        WHILE D&gt;1 AND (R-D*INT(R/D))=0 DO<br/>          R/=D<br/>          D-=1<br/>        END WHILE<br/>      END WHILE<br/>      BIN=R<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   BINOMIAL(5,3-&gt;BIN)<br/>   PRINT(\"Binomial (5,3) = \";BIN)<br/>   BINOMIAL(100,2-&gt;BIN)<br/>   PRINT(\"Binomial (100,2) = \";BIN)<br/>   BINOMIAL(33,17-&gt;BIN)<br/>   PRINT(\"Binomial (33,17) = \";BIN)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: fact ( n -- n-factorial )<br/>    dup 0 = [ drop 1 ] [ dup 1 - fact * ] if\u00a0;<br/>\u00a0<br/>: choose ( n k -- n-choose-k )<br/>    2dup - fact swap fact * swap fact swap /\u00a0;<br/>\u00a0<br/>! outputs 10<br/>5 3 choose .<br/>\u00a0<br/>! alternative using folds<br/>USE: math.ranges<br/>\u00a0<br/>! (product [n..k+1] / product [n-k..1])<br/>: choose-fold ( n k -- n-choose-k )<br/>    2dup 1 + [a,b] product -rot - 1 [a,b] product /\u00a0;<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> choose n k <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s i <span class=\"sy0\">-&gt;</span> s <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>i <span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">k</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: choose ( n k -- nCk ) 1 swap 0\u00a0?do over i - i 1+ */ loop nip\u00a0;<br/>\u00a0<br/> 5  3 choose .   \\ 10<br/>33 17 choose .   \\ 1166803110</pre>"}, {"lang": "Fortran", "loc": 31, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test_choose<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(i0)'</span><span class=\"br0\">)</span> choose <span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> factorial <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    res <span class=\"sy0\">=</span> <span class=\"kw4\">product</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> factorial<br/>\u00a0<br/>  <span class=\"kw1\">function</span> choose <span class=\"br0\">(</span>n, k<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>\u00a0<br/>    res <span class=\"sy0\">=</span> factorial <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> factorial <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> choose<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_choose</pre>"}, {"lang": "FreeBASIC", "loc": 31, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> factorial<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> product <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>    product *= i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> Product<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> binomial<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">0</span> OrElse k &lt; <span class=\"nu0\">0</span> OrElse n &lt;= k <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> product <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = n - k + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    Product *= i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> product \\ factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> =  <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">14</span> <br/>  <span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; binomial<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">Print</span><span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span> k<br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span> n<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[binomial[5,3]]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 8, "block": "<pre class=\"text highlighted_source\">def<br/>  choose( n, k ) | k &lt; 0 or k &gt; n = 0<br/>  choose( n, 0 ) = 1<br/>  choose( n, n ) = 1<br/>  choose( n, k ) = product( [(n - i)/(i + 1) | i &lt;- 0:min( k, n - k )] )<br/>\u00a0<br/>println( choose(5, 3) )<br/>println( choose(60, 30) )</pre>"}, {"lang": "GAP", "loc": 3, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>Binomial(5, 3);<br/># 10</pre>"}, {"lang": "Go", "loc": 8, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"math/big\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Binomial<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>  fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Binomial<span class=\"sy1\">(</span><span class=\"nu0\">60</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 3, "block": "<pre class=\"text highlighted_source\">;5 3 # Set up demo input<br/>{),(;{*}*}:f; # Define a factorial function<br/><a class=\"__cf_email__\" data-cfemail=\"260840660840\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@/\\@-f/</pre>"}, {"lang": "Groovy", "loc": 10, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factorial <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> x <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">x</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span>1G<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> product, <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> factor <span class=\"sy0\">-&gt;</span> product <span class=\"sy0\">*=</span> factor <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> combinations <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n, k <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> k <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> n <span class=\"sy0\">&gt;=</span> k<br/>    factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">*</span>factorial<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/>choose <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>choose n k <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">-</span>k<span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 12, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> BinomCoeff<span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">! displays 10</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> factorial<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/>   factorial <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<br/>      factorial <span class=\"sy1\">=</span> factorial <span class=\"sy1\">*</span> i<br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> BinomCoeff<span class=\"br0\">(</span> n<span class=\"sy1\">,</span> k <span class=\"br0\">)</span><br/>   BinomCoeff <span class=\"sy1\">=</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">/</span>factorial<span class=\"br0\">(</span>n<span class=\"sy1\">-</span>k<span class=\"br0\">)</span><span class=\"sy1\">/</span>factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> math<span class=\"sy1\">,</span> factors <br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"choose(5,3)=\"</span><span class=\"sy1\">,</span>binocoef<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">3</span>\u00a0! <span class=\"nu0\">5</span><br/><span class=\"nu0\">10</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Binomial<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> binomial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> k<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span>n<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><br/>            k<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span>k<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">long</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, m<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span>k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span>, m<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            b<span class=\"sy0\">=</span>b<span class=\"sy0\">*</span>m<span class=\"sy0\">/</span>i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>binomial<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> binom<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> coeff <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> coeff <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>     i <span class=\"sy0\">&lt;=</span> k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> coeff <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> coeff<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>print<span class=\"br0\">(</span>binom<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 13, "block": "<pre class=\"text highlighted_source\"># nCk assuming n &gt;= k<br/>def binomial(n; k): <br/>  if k &gt; n / 2 then binomial(n; n-k)<br/>  else reduce range(1; k+1) as $i (1; . * (n - $i + 1) / $i)<br/>  end;<br/>\u00a0<br/>def task:<br/>  .[0] as $n | .[1] as $k<br/>  | \"\\($n) C \\($k) = \\(binomial( $n; $k) )\";<br/>;<br/>\u00a0<br/>([5,3], [100,2], [ 33,17]) | task<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">@show binomial(5, 3)</pre>"}, {"lang": "K", "loc": 2, "block": "<pre class=\"text highlighted_source\">   {[n;k]_(*/(k-1)_1+!n)%(*/1+!k)} . 5 3<br/>10</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/>fun factorial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ans <span class=\"sy0\">=</span> 1L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> ans <span class=\"sy0\">*=</span> i<br/>        ans<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun binomial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, k<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">==</span> k         -<span class=\"sy0\">&gt;</span> 1L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>           -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ans <span class=\"sy0\">=</span> 1L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n - k + <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> ans <span class=\"sy0\">*=</span> i<br/>        ans / factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">0</span>..<span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%4d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>binomial<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 12, "block": "<pre class=\"text highlighted_source\">define binomial(n::integer,k::integer) =&gt; {<br/>\t#k == 0\u00a0? return 1<br/>\tlocal(result = 1)<br/>\tloop(#k) =&gt; {<br/>\t\t#result = #result * (#n - loop_count + 1) / loop_count<br/>\t}<br/>\treturn #result<br/>}<br/>// Tests<br/>binomial(5, 3)<br/>binomial(5, 4)<br/>binomial(60, 30)</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to choose\u00a0:n\u00a0:k<br/>  if\u00a0:k = 0 [output 1]<br/>  output (choose\u00a0:n\u00a0:k-1) * (:n -\u00a0:k + 1) /\u00a0:k<br/>end<br/>\u00a0<br/>show choose 5 3  \u00a0; 10<br/>show choose 60 30\u00a0; 1.18264581564861e+17</pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Binomial<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> k <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> k <span class=\"kw1\">end</span>       <span class=\"co1\">--   (n k) = (n n-k)</span><br/>\u00a0<br/>    numer<span class=\"sy0\">,</span> denom <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> k <span class=\"kw1\">do</span><br/>        numer <span class=\"sy0\">=</span> numer <span class=\"sy0\">*</span> <span class=\"br0\">(</span> n <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        denom <span class=\"sy0\">=</span> denom <span class=\"sy0\">*</span> i<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> numer <span class=\"sy0\">/</span> denom<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Liberty BASIC", "loc": 24, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"co1\">'   [RC] Binomial Coefficients</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Binomial Coefficient of \"</span>; <span class=\"nu0\">5</span>; <span class=\"st0\">\" and \"</span>; <span class=\"nu0\">3</span>; <span class=\"st0\">\" is \"</span><span class=\"sy0\">,</span>BinomialCoefficient<span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    k <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> n <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Binomial Coefficient of \"</span>; n; <span class=\"st0\">\" and \"</span>; k; <span class=\"st0\">\" is \"</span><span class=\"sy0\">,</span>BinomialCoefficient<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> BinomialCoefficient<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>        BinomialCoefficient <span class=\"sy0\">=</span>factorial<span class=\"br0\">(</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span>factorial<span class=\"br0\">(</span> n <span class=\"sy0\">-</span>k<span class=\"br0\">)</span> <span class=\"sy0\">/</span>factorial<span class=\"br0\">(</span> k<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> factorial<span class=\"br0\">(</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>            f <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            f <span class=\"sy0\">=</span>n <span class=\"sy0\">*</span>factorial<span class=\"br0\">(</span> n <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    factorial <span class=\"sy0\">=</span>f<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">convert(binomial(n,k),factorial);<br/>\u00a0<br/>binomial(5,3);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">(Local) In[1]:= Binomial[5,3]<br/>(Local) Out[1]= 10</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nchoosek.html\"><span class=\"kw2\">nchoosek</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>    <span class=\"nu0\">10</span></pre>"}, {"lang": "Maxima", "loc": 13, "block": "<pre class=\"text highlighted_source\">binomial( 5,  3);      /* 10 */<br/>binomial(-5,  3);      /* -35 */<br/>binomial( 5, -3);      /* 0 */<br/>binomial(-5, -3);      /* 0 */<br/>binomial( 3,  5);      /* 0 */<br/>\u00a0<br/>binomial(x, 3);        /* ((x - 2)*(x - 1)*x)/6 */<br/>\u00a0<br/>binomial(3, 1/2);      /* binomial(3, 1/2) */<br/>makegamma(%);          /* 32/(5*%pi) */<br/>\u00a0<br/>binomial(a, b);        /* binomial(a, b) */<br/>makegamma(%);          /* gamma(a + 1)/(gamma(-b + a + 1)*gamma(b + 1)) */</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f1\t&lt;-&gt;\t\u041f0\t\u041f\u041f\t22\t\u041f2\t \u0418\u041f1\t\u041f\u041f\t22\t\u041f3<br/>\u0418\u041f0\t\u0418\u041f1\t-\t\u041f\u041f\t22\t\u0418\u041f3\t*\t\u041f3\t\u0418\u041f2\t\u0418\u041f3<br/>/\t\u0421/\u041f\t\u0412\u041f\t\u041f0\t1\t\u0418\u041f0\t*\tL0\t25\t\u0412/\u041e</pre>"}, {"lang": "MINIL", "loc": 33, "block": "<pre class=\"text highlighted_source\">// Number of combinations nCr<br/>00 0E  Go:    ENT  R0   // n<br/>01 1E         ENT  R1   // r<br/>02 2C         CLR  R2<br/>03 2A  Loop:  ADD1 R2<br/>04 0D         DEC  R0<br/>05 1D         DEC  R1<br/>06 C3         JNZ  Loop<br/>07 3C         CLR  R3   // for result<br/>08 3A         ADD1 R3<br/>09 0A  Next:  ADD1 R0<br/>0A 1A         ADD1 R1<br/>0B 50         R5 = R0<br/>0C 5D         DEC  R5<br/>0D 63         R6 = R3<br/>0E 46  Mult:  R4 = R6<br/>0F 3A  Add:   ADD1 R3<br/>10 4D         DEC  R4<br/>11 CF         JNZ  Add<br/>12 5D         DEC  R5<br/>13 CE         JNZ  Mult<br/>14 61  Divide:R6 = R1<br/>15 5A         ADD1 R5<br/>16 3D  Sub:   DEC  R3<br/>17 9B         JZ   Exact<br/>18 6D         DEC  R6<br/>19 D6         JNZ  Sub<br/>1A 94         JZ   Divide<br/>1B 35  Exact: R3 = R5<br/>1C 2D         DEC  R2<br/>1D C9         JNZ  Next<br/>1E 03         R0 = R3<br/>1F 80         JZ   Go   // Display result</pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">proc binomialCoeff(n, k: int): int =<br/>  result = 1<br/>  for i in 1..k:<br/>    result = result * (n-i+1) div i<br/>\u00a0<br/>echo binomialCoeff(5, 3)</pre>"}, {"lang": "Oberon", "loc": 23, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Binomial;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> For<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>m<span class=\"sy0\">,</span>r<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>n &gt; k<span class=\"br0\">)</span>;<br/>  r <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">IF</span> k &gt; n <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> m <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> k <span class=\"kw1\">ELSE</span> m <span class=\"sy0\">:=</span> k <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> m <span class=\"kw1\">DO</span><br/>    r <span class=\"sy0\">:=</span> r <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> i<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> r<br/><span class=\"kw1\">END</span> For;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>For<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Binomial.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> binomialCoeff n p <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> p <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-.</span> p <span class=\"kw1\">then</span> p <span class=\"kw1\">else</span> n <span class=\"sy0\">-.</span> p <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> cm res num denum <span class=\"sy0\">=</span><br/>    <span class=\"co1\">(* this method partially prevents overflow.<br/>     * float type is choosen to have increased domain on 32-bits computer,<br/>     * however algorithm ensures an integral result as long as it is possible<br/>     *)</span><br/>    <span class=\"kw1\">if</span> denum <span class=\"sy0\">&lt;=</span> p <span class=\"kw1\">then</span> cm <span class=\"br0\">(</span><span class=\"br0\">(</span>res <span class=\"sy0\">*.</span> num<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> denum<span class=\"br0\">)</span> <span class=\"br0\">(</span>num <span class=\"sy0\">-.</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>denum <span class=\"sy0\">+.</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> res <span class=\"kw1\">in</span><br/>  cm <span class=\"nu0\">1</span><span class=\"sy0\">.</span> n <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: binomial(n, k)  | i |  1 k loop: i [ n i - 1+ * i / ]\u00a0;</pre>"}, {"lang": "Oz", "loc": 10, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">BinomialCoeff</span> N K<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>foldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 K 1<span class=\"br0\">}</span><br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Z I<span class=\"br0\">}</span><br/>         Z <span class=\"sy0\">*</span> <span class=\"br0\">(</span>N<span class=\"sy0\">-</span>I<span class=\"sy0\">+</span>1<span class=\"br0\">)</span> <span class=\"kw1\">div</span> I<br/>      <span class=\"kw1\">end</span><br/>      1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>BinomialCoeff 5 3<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">binomial</span><span class=\"br0\">(</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> binomial <span class=\"br0\">{</span><br/>    <span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$n</span><span class=\"sy0\">--;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">/=</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> binomial<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> binomial <span class=\"br0\">{</span><br/>    <span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$n</span><span class=\"sy0\">--;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">/=</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> binomial<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> combinations<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">function binom(integer n, k)<br/>    return factorial(n)/(factorial(k)*factorial(n-k))<br/>end function<br/>\u00a0<br/>?binom(5,3)</pre>"}, {"lang": "PHP", "loc": 10, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$k</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">function</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"re0\">$val</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$f</span><span class=\"sy0\">*=</span><span class=\"re0\">$val</span><span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$binomial_coefficient</span><span class=\"sy0\">=</span>factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>factorial<span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$binomial_coefficient</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de binomial (N K)<br/>   (let f<br/>      '((N)<br/>         (if (=0 N) 1 (apply * (range 1 N))) )<br/>      (/<br/>         (f N)<br/>         (* (f (- N K)) (f K)) ) ) )</pre>"}, {"lang": "PL/I", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>binomial_coefficients:<br/>   procedure options (main);<br/>      declare (n, k) fixed;<br/>\u00a0<br/>   get (n, k);<br/>   put (coefficient(n, k));<br/>\u00a0<br/>coefficient: procedure (n, k) returns (fixed decimal (15));<br/>   declare (n, k) fixed;<br/>   return (fact(n)/ (fact(n-k) * fact(k)) );<br/>end coefficient;<br/>\u00a0<br/>fact: procedure (n) returns (fixed decimal (15));<br/>   declare n fixed;<br/>   declare i fixed, f fixed decimal (15);<br/>   f = 1;<br/>   do i = 1 to n;<br/>      f = f * i;<br/>   end;<br/>   return (f);<br/>end fact;<br/>end binomial_coefficients;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> choose<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span> <span class=\"kw4\">-and</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$numerator</span> <span class=\"sy0\">=</span> <span class=\"re0\">$denominator</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$numerator</span> <span class=\"sy0\">*=</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><br/>            <span class=\"re0\">$denominator</span> <span class=\"sy0\">*=</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$numerator</span><span class=\"sy0\">/</span><span class=\"re0\">$denominator</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"$k is greater than $n or lower than 0\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>choose <span class=\"nu0\">5</span> <span class=\"nu0\">3</span><br/>choose <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/>choose <span class=\"nu0\">10</span> <span class=\"nu0\">10</span><br/>choose <span class=\"nu0\">10</span> <span class=\"nu0\">2</span><br/>choose <span class=\"nu0\">10</span> <span class=\"nu0\">8</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 21, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Result<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    Result<span class=\"sy0\">*</span>n<br/>    n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Result<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> C<span class=\"br0\">(</span>n,k<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>Factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>Factor<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">*</span>factor<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter value n: \"</span><span class=\"br0\">)</span>: n<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter value k: \"</span><span class=\"br0\">)</span>: k<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"C(n,k)= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>C<span class=\"br0\">(</span>n,k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to quit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> binomialCoeff<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span>:<br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> k+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        result <span class=\"sy0\">=</span> result * <span class=\"br0\">(</span>n-i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> / i<br/>    <span class=\"kw1\">return</span> result<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>binomialCoeff<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">choose(5,3)</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(binomial 10 5)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 8, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates   binomial coefficients  (also known as  combinations).       */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100000</span>                            <span class=\"coMULTI\">/*be able to handle gihugeic numbers.  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n k <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain  N  and  K   from the C.L.    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'combinations('</span>n<span class=\"st0\">\",\"</span>k<span class=\"st0\">')='</span>  comb<span class=\"br0\">(</span>n,k<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*display the number of combinations.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>comb: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;         <span class=\"kw1\">return</span>\u00a0!<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\u00a0% <span class=\"br0\">(</span>!<span class=\"br0\">(</span>x-y<span class=\"br0\">)</span> <span class=\"sy0\">*</span>\u00a0!<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>!:    <span class=\"kw1\">procedure</span>; \u00a0!=<span class=\"nu0\">1</span>;           <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; \u00a0!=!<span class=\"sy0\">*</span>j;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>;          <span class=\"kw1\">return</span>\u00a0!</pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>numer = 0<br/>binomial(5,3)<br/>see \"(5,3) binomial = \" + numer + nl<br/>\u00a0<br/>func binomial n, k <br/>     if k &gt; n return nil ok<br/>     if k &gt; n/2 k = n - k ok<br/>     numer = 1<br/>     for i = 1 to k  <br/>         numer = numer * ( n - i + 1 ) / i<br/>     next <br/>     return numer<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"co1\"># binomial coefficient: n C k</span><br/>  <span class=\"kw1\">def</span> choose<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>    <span class=\"co1\"># n!/(n-k)!</span><br/>    pTop = <span class=\"br0\">(</span>self<span class=\"sy0\">-</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span> .. <span class=\"kw2\">self</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"sy0\">&amp;</span>:<span class=\"sy0\">*</span><span class=\"br0\">)</span> <br/>    <span class=\"co1\"># k!</span><br/>    pBottom = <span class=\"br0\">(</span><span class=\"nu0\">2</span> .. <span class=\"me1\">k</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"sy0\">&amp;</span>:<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    pTop <span class=\"sy0\">/</span> pBottom<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"nu0\">5</span>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> <span class=\"nu0\">60</span>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">print \"binomial (5,1) = \"; binomial(5, 1)<br/>print \"binomial (5,2) = \"; binomial(5, 2)<br/>print \"binomial (5,3) = \"; binomial(5, 3)<br/>print \"binomial (5,4) = \"; binomial(5,4)<br/>print \"binomial (5,5) = \"; binomial(5,5)<br/>end<br/>\u00a0<br/>function binomial(n,k)<br/> coeff = 1<br/> for i = n - k + 1 to n<br/>   coeff = coeff * i<br/> next i<br/> for i = 1 to k <br/>   coeff = coeff / i<br/> next i<br/>binomial = coeff<br/>end function</pre>"}, {"lang": "Rust", "loc": 19, "block": "<pre class=\"text highlighted_source\">fn fact(n:u32) -&gt; u64 {<br/>  let mut f:u64 = n as u64;<br/>  for i in 2..n {<br/>    f *= i as u64;<br/>  }<br/>  return f;<br/>}<br/>\u00a0<br/>fn choose(n: u32, k: u32)  -&gt; u64 {<br/>   let mut num:u64 = n as u64;<br/>   for i in 1..k {<br/>     num *= (n-i) as u64;<br/>   }<br/>   return num / fact(k);<br/>}<br/>\u00a0<br/>fn main() {<br/>  println!(\"{}\", choose(5,3));<br/>}</pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Binomial <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k<span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result<span class=\"sy0\">=</span>binomialCoefficient<span class=\"br0\">(</span>n,k<span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"The Binomial Coefficient of\u00a0%d and\u00a0%d equals\u00a0%d.\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>n, k, result<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> binomialCoefficient<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int, k<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span> / <span class=\"br0\">(</span>fact<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n-k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fact<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> n<span class=\"sy0\">*</span>fact<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>factorial n acc<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>        acc<br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> acc n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>factorial n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>choose n k<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>factorial k<span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">-</span> n k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>choose <span class=\"nu0\">5</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 14, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: n is 0;<br/>    var integer: k is 0;<br/>  begin<br/>    for n range 0 to 66 do<br/>      for k range 0 to n do<br/>         write(n\u00a0! k &lt;&amp; \" \");<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>choose(n, k)\u00a0:= product(k + 1 ... n) / product(1 ... n - k);<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func binomial<span class=\"br0\">(</span>n,k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n! <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>k<span class=\"br0\">)</span>! <span class=\"sy0\">*</span> k!<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say binomial<span class=\"br0\">(</span><span class=\"nu0\">400</span>, <span class=\"nu0\">200</span><span class=\"br0\">)</span></pre>"}, {"lang": "Stata", "loc": 2, "block": "<pre class=\"text highlighted_source\">. display comb(5,3)<br/>10</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> binom <span class=\"br0\">{</span>n k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Compute the top half of the division; this is n!/(n-k)!</span><br/>    <span class=\"kw1\">set</span> pTop <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span> - <span class=\"re0\">$k</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> pTop <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pTop</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Compute the bottom half of the division; this is k!</span><br/>    <span class=\"kw1\">set</span> pBottom <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$k</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> pBottom <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pBottom</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Integer arithmetic divide is correct here; the factors always cancel out</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pTop</span> / <span class=\"re0\">$pBottom</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">10 nCr 4</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">nCr(n,k)</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">$ txr -p '(n-choose-k 20 15)'<br/>15504</pre>"}, {"lang": "UNIX Shell", "loc": 20, "block": "<pre class=\"text highlighted_source\">#!/bin/sh                                                                                                                                             <br/>n=5;<br/>k=3;<br/>calculate_factorial(){<br/>partial_factorial=1;<br/>for (( i=1; i&lt;=\"$1\"; i++ ))<br/>do<br/>    factorial=$(expr $i \\* $partial_factorial)<br/>    partial_factorial=$factorial<br/>\u00a0<br/>done<br/>echo $factorial<br/>}<br/>\u00a0<br/>n_factorial=$(calculate_factorial $n)<br/>k_factorial=$(calculate_factorial $k)<br/>n_minus_k_factorial=$(calculate_factorial `expr $n - $k`)<br/>binomial_coefficient=$(expr $n_factorial \\/ $k_factorial \\* 1 \\/ $n_minus_k_factorial )<br/>\u00a0<br/>echo \"Binomial Coefficient ($n,$k) = $binomial_coefficient\"</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>choose = ~&amp;ar^?\\1! quotient^\\~&amp;ar product^/~&amp;al ^|R/~&amp; predecessor~~</pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> binomial(n,k)<br/>\tbinomial = factorial(n)/(factorial(n-k)*factorial(k))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> factorial(n)<br/>\t<span class=\"kw3\">If</span> n = 0 <span class=\"kw3\">Then</span><br/>\t\tfactorial = 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\t<span class=\"kw3\">For</span> i = n <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\t<span class=\"kw3\">If</span> i = n <span class=\"kw3\">Then</span><br/>\t\t\t\tfactorial = n<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tfactorial = factorial * i<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'calling the function<br/></span>WScript.StdOut.Write <span class=\"st0\">\"the binomial coefficient of 5 and 3 = \"</span> &amp; binomial(5,3)<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "Windows Batch", "loc": 17, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~2</span>\"==\"\" <span class=\"sy0\">(</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Usage: <span class=\"sy0\">%</span><span class=\"re3\">~nx0</span> n k <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span> <span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">binom</span> binom <span class=\"sy0\">%</span><span class=\"re3\">~1</span> <span class=\"sy0\">%</span><span class=\"re3\">~2</span><br/>1<span class=\"sy0\">&gt;&amp;</span>2 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /P \"=<span class=\"sy0\">%</span><span class=\"re3\">~1</span> choose <span class=\"sy0\">%</span><span class=\"re3\">~2</span> = \"<span class=\"sy0\">&lt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">NUL</span></a><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">binom</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>:<span class=\"re0\">binom</span> <span class=\"sy0\">&lt;</span>var_to_set<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>N<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>K<span class=\"sy0\">&gt;</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a coeff=1, nk=<span class=\"sy0\">%</span><span class=\"re3\">~2</span> - <span class=\"sy0\">%</span><span class=\"re3\">~3</span> + 1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">I</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">nk</span><span class=\"sy0\">%</span>, 1, <span class=\"sy0\">%</span><span class=\"re3\">~2</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a coeff *= <span class=\"sy0\">%%</span><span class=\"re3\">I</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">I</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1, 1, <span class=\"sy0\">%</span><span class=\"re3\">~3</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a coeff /= <span class=\"sy0\">%%</span><span class=\"re3\">I</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~1</span>=<span class=\"sy0\">%</span><span class=\"re3\">coeff</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "XPL0", "loc": 22, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9, IntOut=11;<br/>\u00a0<br/>func Binomial(N, K);<br/>int  N, K;<br/>int  M, B, I;<br/>[M:= K;<br/>if K&gt;N/2 the M:= N-K;<br/>B:=1;<br/>for I:= 1 to M do<br/>    B:= B*(N-M+I)/I;<br/>return B;<br/>];<br/>\u00a0<br/>int N, K;<br/>[for N:= 0 to 9 do<br/>    [for K:= 0 to 9 do<br/>        [if N&gt;=K then IntOut(0, Binomial(N,K));<br/>        ChOut(0, 9\\tab\\);<br/>        ];<br/>    CrLf(0);<br/>    ];<br/>] \\Mr. Pascal's triangle!</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn binomial(n,k){ (1).reduce(k,fcn(p,i,n){ p*(n-i+1)/i },1,n) }</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 10, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">33</span>: <span class=\"kw1\">LET</span> k=<span class=\"nu0\">17</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Binomial \"</span>;n;<span class=\"st0\">\",\"</span>;k;<span class=\"st0\">\" = \"</span>;<br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> r=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> d=n-k<br/><span class=\"nu0\">30</span> <span class=\"kw1\">IF</span> d&gt;k <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> k=d: <span class=\"kw1\">LET</span> d=n-k<br/><span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> n&lt;=k <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">90</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> r=r*n<br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> n=n-<span class=\"nu0\">1</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>d&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">AND</span> <span class=\"br0\">(</span>FN m<span class=\"br0\">(</span>r,d<span class=\"br0\">)</span>=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> r=r/d: <span class=\"kw1\">LET</span> d=d-<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">70</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">40</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> r<br/><span class=\"nu0\">100</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}