{"task": "Modular_inverse", "blocks": [{"lang": "8th", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ return \"extended gcd\" of a and b; The result satisfies the equation:<br/>\\     a*x + b*y = gcd(a,b)<br/>: n:xgcd \\ a b --  gcd x y<br/>  dup 0 n:= if<br/>    1 swap            \\ -- a 1 0<br/>  else<br/>    tuck n:/mod<br/>    -rot recurse<br/>    tuck 4 roll<br/>    n:* n:neg n:+<br/>  then\u00a0;<br/>\u00a0<br/>\\ Return modular inverse of n modulo mod, or null if it doesn't exist (n and mod<br/>\\ not coprime):<br/>: n:invmod \\ n mod -- invmod<br/>  dup &gt;r<br/>  n:xgcd rot 1 n:= not if<br/>    2drop null<br/>  else<br/>    drop dup 0 n:&lt; if <a class=\"__cf_email__\" data-cfemail=\"592b19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> n:+ then<br/>  then<br/>  rdrop\u00a0;<br/>\u00a0<br/>42 2017 n:invmod . cr bye<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> modular_inverse <span class=\"kw1\">is</span><br/>  <span class=\"co1\">-- inv_mod calculates the inverse of a mod n. We should have n&gt;0 and, at the end, the contract is a*Result=1 mod n</span><br/>  <span class=\"co1\">-- If this is false then we raise an exception (don't forget the -gnata option when you compile </span><br/>  <span class=\"kw3\">function</span> inv_mod <span class=\"br0\">(</span>a\u00a0: Integer; n\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw3\">with</span> post=&gt; <span class=\"br0\">(</span>a * inv_mod'Result<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">is</span> <br/>    <span class=\"co1\">-- To calculate the inverse we do as if we would calculate the GCD with the Euclid extended algorithm </span><br/>    <span class=\"co1\">-- (but we just keep the coefficient on a)</span><br/>    <span class=\"kw3\">function</span> inverse <span class=\"br0\">(</span>a, b, u, v\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> b=<span class=\"nu0\">0</span> <span class=\"kw1\">then</span> u <span class=\"kw1\">else</span> inverse <span class=\"br0\">(</span>b, a <span class=\"kw2\">mod</span> b, v, u-<span class=\"br0\">(</span>v*a<span class=\"br0\">)</span>/b<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">return</span> inverse <span class=\"br0\">(</span>a, n, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span> inv_mod;<br/><span class=\"kw1\">begin</span> <br/>  <span class=\"co1\">-- This will output -48 (which is correct)</span><br/>  Put_Line <span class=\"br0\">(</span>inv_mod <span class=\"br0\">(</span><span class=\"nu0\">42</span>,<span class=\"nu0\">2017</span><span class=\"br0\">)</span>'img<span class=\"br0\">)</span>;<br/>  <span class=\"co1\">-- The further line will raise an exception since the GCD will not be 1</span><br/>  Put_Line <span class=\"br0\">(</span>inv_mod <span class=\"br0\">(</span><span class=\"nu0\">42</span>,<span class=\"nu0\">77</span><span class=\"br0\">)</span>'img<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">exception</span> <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"The inverse doesn't exist.\"</span><span class=\"br0\">)</span>; <br/><span class=\"kw1\">end</span> bitmap;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 37, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">PROC</span> modular inverse <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> m<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw4\">PROC</span> extended gcd <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>CO<br/>   Algol 68 allows us to return three INTs in several ways.  A <span class=\"br0\">[</span>3<span class=\"br0\">]</span><span class=\"kw3\">INT</span><br/>   is used here but it could just as well be a <span class=\"kw6\">STRUCT</span>.<br/>CO<br/>      <span class=\"kw2\">BEGIN</span><br/>\t <span class=\"kw3\">INT</span> v <span class=\"sy1\">:=</span> 1<span class=\"sy1\">,</span> a <span class=\"sy1\">:=</span> 1<span class=\"sy1\">,</span> u <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> g <span class=\"sy1\">:=</span> x<span class=\"sy1\">,</span> w <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span><br/>\t <span class=\"kw2\">WHILE</span> w<span class=\"sy1\">&gt;</span>0<br/>\t <span class=\"kw2\">DO</span><br/>\t    <span class=\"kw3\">INT</span> q <span class=\"sy1\">:=</span> g <span class=\"sy1\">%</span> w<span class=\"sy1\">,</span> t <span class=\"sy1\">:=</span> a <span class=\"sy1\">-</span> q <span class=\"sy1\">*</span> u<span class=\"sy1\">;</span><br/>\t    a <span class=\"sy1\">:=</span> u<span class=\"sy1\">;</span> u <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>\t    t <span class=\"sy1\">:=</span> b <span class=\"sy1\">-</span> q <span class=\"sy1\">*</span> v<span class=\"sy1\">;</span><br/>\t    b <span class=\"sy1\">:=</span> v<span class=\"sy1\">;</span> v <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>\t    t <span class=\"sy1\">:=</span> g <span class=\"sy1\">-</span> q <span class=\"sy1\">*</span> w<span class=\"sy1\">;</span><br/>\t    g <span class=\"sy1\">:=</span> w<span class=\"sy1\">;</span> w <span class=\"sy1\">:=</span> t<br/>\t <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t a <span class=\"kw17\">PLUSAB</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> 0 <span class=\"sy1\">|</span> u <span class=\"sy1\">|</span> 0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t <span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> g<span class=\"br0\">)</span><br/>      <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw3\">INT</span> egcd <span class=\"sy1\">=</span> extended gcd <span class=\"br0\">(</span>a<span class=\"sy1\">,</span> m<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>egcd<span class=\"br0\">[</span>3<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> 1 <span class=\"sy1\">|</span> 0 <span class=\"sy1\">|</span> egcd<span class=\"br0\">[</span>1<span class=\"br0\">]</span> <span class=\"kw12\">MOD</span> m<span class=\"br0\">)</span>      <br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"42 ^ -1 (mod 2017) = \"</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> modular inverse <span class=\"br0\">(</span>42<span class=\"sy1\">,</span> 2017<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>CO<br/>   Note that if \u03d5<span class=\"br0\">(</span>m<span class=\"br0\">)</span> is known<span class=\"sy1\">,</span> then a<span class=\"sy1\">^-</span>1 <span class=\"sy1\">=</span> a<span class=\"sy1\">^</span><span class=\"br0\">(</span>\u03d5<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy1\">-</span>1<span class=\"br0\">)</span> mod m which<br/>   allows an alternative implementation in terms of modular<br/>   exponentiation but<span class=\"sy1\">,</span> in general<span class=\"sy1\">,</span> this requires the factorization of<br/>   m.  If m is prime the factorization is trivial and \u03d5<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy1\">=</span> m<span class=\"sy1\">-</span><span class=\"re1\">1.<br/>   2017</span> is prime which may<span class=\"sy1\">,</span> or may not<span class=\"sy1\">,</span> be ironic within the context<br/>   of the Rosetta Code conditions.<br/>CO<br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% ModInv<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><br/>\u00a0<br/>ModInv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\tb0 <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy0\">:=</span> a <span class=\"sy0\">//</span> b<br/>\t\t<span class=\"sy0\">,</span> t  <span class=\"sy0\">:=</span> b<br/>\t\t<span class=\"sy0\">,</span> b  <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> a  <span class=\"sy0\">:=</span> t<br/>\t\t<span class=\"sy0\">,</span> t  <span class=\"sy0\">:=</span> x0<br/>\t\t<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<br/>\t\t<span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span> t<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\tx1 <span class=\"sy0\">+=</span> b0<br/>\t<span class=\"kw1\">return</span> x1<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MODULAR_INVERSE.AWK</span><br/><span class=\"co1\"># converted from C</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,mod_inv<span class=\"br0\">(</span><span class=\"nu0\">42</span>,<span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> mod_inv<span class=\"br0\">(</span>a,b,  b0,t,q,x0,x1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    b0 = b<br/>    x0 = <span class=\"nu0\">0</span><br/>    x1 = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      q = <span class=\"kw4\">int</span><span class=\"br0\">(</span>a <span class=\"sy3\">/</span> b<span class=\"br0\">)</span><br/>      t = b<br/>      b = <span class=\"kw4\">int</span><span class=\"br0\">(</span>a <span class=\"sy3\">%</span> b<span class=\"br0\">)</span><br/>      a = t<br/>      t = x0<br/>      x0 = x1 <span class=\"sy3\">-</span> q <span class=\"sy3\">*</span> x0<br/>      x1 = t<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      x1 <span class=\"sy3\">+</span>= b0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 43, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Calls the \"function\" ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">ModInv</span> 42 2017 result<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">result</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">ModInv</span> 40 1 result<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">result</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">ModInv</span> 52 -217 result<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">result</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">ModInv</span> -486 217 result<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">result</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">ModInv</span> 40 2018 result<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">result</span><span class=\"sy0\">!</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The \"function\" ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">ModInv</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> b=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">b</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a b=-b<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">a</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a a=b - <span class=\"co3\">^(</span>-a <span class=\"sy0\">%</span><span class=\"sy0\">%</span> b<span class=\"co3\">^)</span><span class=\"sy0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> t=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> nt=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r=<span class=\"sy0\">!</span><span class=\"re2\">b</span><span class=\"sy0\">!&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a nr=a<span class=\"sy0\">%%</span><span class=\"re3\">b</span><br/>\u00a0<br/>\t:<span class=\"re0\">while_loop</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">nr</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">neq</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a q=r/nr<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmp=nt<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a nt=t - <span class=\"co3\">^(</span>q*nt<span class=\"co3\">^)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a t=tmp<br/>\u00a0<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmp=nr<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a nr=r - <span class=\"co3\">^(</span>q*nr<span class=\"co3\">^)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a r=tmp<br/>\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> while_loop<br/>\t<span class=\"sy0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> 1 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">3</span>=-1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">t</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a t+=b<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">3</span>=<span class=\"sy0\">!</span><span class=\"re2\">t</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">( ( mod-inv<br/>  =   a b b0 x0 x1 q<br/>    .  \u00a0!arg:(?a.?b)<br/>      &amp; (\u00a0!b:1<br/>        |   (!b.0.1):(?b0.?x0.?x1)<br/>          &amp;   whl<br/>            ' (\u00a0!a:&gt;1<br/>              &amp; div$(!a.!b):?q<br/>              &amp; (!b.mod$(!a.!b)):(?a.?b)<br/>              &amp; (!x1+-1*!q*!x0.!x0):(?x0.?x1)<br/>              )<br/>          &amp; (!x:&gt;0|!x1+!b0)<br/>        )<br/>  )<br/>&amp; out$(mod-inv$(42.2017))<br/>};</pre>"}, {"lang": "C", "loc": 20, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> mul_inv<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> b0 <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> q<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> x0<span class=\"sy0\">,</span> x0 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 <span class=\"sy0\">+=</span> b0<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x1<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> mul_inv<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/> <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> mul_inv<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> b0 <span class=\"sy1\">=</span> b, t, q<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> x0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, x1 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy1\">=</span> a <span class=\"sy2\">/</span> b<span class=\"sy4\">;</span><br/>\t\tt <span class=\"sy1\">=</span> b, b <span class=\"sy1\">=</span> a <span class=\"sy2\">%</span> b, a <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>\t\tt <span class=\"sy1\">=</span> x0, x0 <span class=\"sy1\">=</span> x1 <span class=\"sy2\">-</span> q <span class=\"sy2\">*</span> x0, x1 <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> b0<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> x1<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>mul_inv<span class=\"br0\">(</span><span class=\"nu0\">42</span>, <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">.</span><span class=\"me1\">ModInverse</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> IntExtensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> ModInverse<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> m<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> m0 <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> m<span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span>a, m<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m, a <span class=\"sy0\">%</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y, x <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">+</span> m0 <span class=\"sy0\">:</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 45, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns test-p<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn extended-gcd<br/>  <span class=\"st0\">\"The extended Euclidean algorithm--using Clojure code from RosettaCode for Extended Eucliean<br/>  (see http://en.wikipedia.orwiki/Extended_Euclidean_algorithm)<br/>  Returns a list containing the GCD and the B\u00e9zout coefficients<br/>  corresponding to the inputs with the result: gcd followed by bezout coefficients \"</span><br/>  <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>zero? a<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> b<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>zero? b<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> a<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>s <span class=\"nu0\">0</span><br/>                     s0 <span class=\"nu0\">1</span><br/>                     t <span class=\"nu0\">1</span><br/>                     t0 <span class=\"nu0\">0</span><br/>                     r <span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> b<span class=\"br0\">)</span><br/>                     r0 <span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? r<span class=\"br0\">)</span><br/>                  <span class=\"br0\">[</span>r0 s0 t0<span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>q <span class=\"br0\">(</span>quot r0 r<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>- s0 <span class=\"br0\">(</span>* q s<span class=\"br0\">)</span><span class=\"br0\">)</span> s<br/>                           <span class=\"br0\">(</span>- t0 <span class=\"br0\">(</span>* q t<span class=\"br0\">)</span><span class=\"br0\">)</span> t<br/>                           <span class=\"br0\">(</span>- r0 <span class=\"br0\">(</span>* q r<span class=\"br0\">)</span><span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn mul_inv<br/>  <span class=\"st0\">\" Get inverse using extended gcd.  Extended GCD returns<br/>    gcd followed by bezout coefficients. We want the 1st coefficients<br/>   (i.e. second of extend-gcd result).  We compute mod base so result<br/>    is between 0..(base-1) \"</span><br/>  <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>b <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>neg? b<span class=\"br0\">)</span> <span class=\"br0\">(</span>- b<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>        a <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>neg? a<span class=\"br0\">)</span> <span class=\"br0\">(</span>- b <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>- a<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>        egcd <span class=\"br0\">(</span>extended-gcd a b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>first egcd<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>second egcd<span class=\"br0\">)</span> b<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>str <span class=\"st0\">\"No inverse since gcd is: \"</span> <span class=\"br0\">(</span>first egcd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>mul_inv <span class=\"nu0\">42</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>mul_inv <span class=\"nu0\">40</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>mul_inv <span class=\"nu0\">52</span> -<span class=\"nu0\">217</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>mul_inv -<span class=\"nu0\">486</span> <span class=\"nu0\">217</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>mul_inv <span class=\"nu0\">40</span> <span class=\"nu0\">2018</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 25, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; Calculates the GCD of a and b based on the Extended Euclidean Algorithm. The function also returns</span><br/><span class=\"co1\">;; the B\u00e9zout coefficients s and t, such that gcd(a, b) = as + bt.</span><br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; The algorithm is described on page http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Iterative_method_2</span><br/><span class=\"co1\">;;</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> egcd <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span><span class=\"kw1\">cons</span> b a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">car</span> r<span class=\"br0\">)</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (r+1 r) i.e. the latest is first.</span><br/>       <span class=\"br0\">(</span>s <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> s<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">car</span> s<span class=\"br0\">)</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (s+1 s)</span><br/>       <span class=\"br0\">(</span>u <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> u<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">car</span> u<span class=\"br0\">)</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (t+1 t)</span><br/>       <span class=\"br0\">(</span>q <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> s<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">; exit when r+1 = 0 and return r s t</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> q <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                     <span class=\"co1\">; inside loop; calculate the q</span><br/>\u00a0<br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; Calculates the inverse module for a = 1 (mod m). </span><br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; Note: The inverse is only defined when a and m are coprimes, i.e. gcd(a, m) = 1.\u201d</span><br/><span class=\"co1\">;;</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> invmod <span class=\"br0\">(</span>a m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>r s k<span class=\"br0\">)</span> <span class=\"br0\">(</span>egcd a m<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"invmod: Values ~a and ~a are not coprimes.\"</span> a m<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>     s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\">T modInverse<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T a<span class=\"sy0\">,</span> T b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    T b0 <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span><br/>      x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>      x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span><br/>        a <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>        t <span class=\"sy0\">=</span> x0<span class=\"sy0\">;</span><br/>        x0 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<span class=\"sy0\">;</span><br/>        x1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">+</span> b0<span class=\"br0\">)</span> <span class=\"sy0\">:</span> x1<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>modInverse<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; for egcd = extended gcd</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mod<span class=\"sy0\">-</span>inv x m<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>define<span class=\"sy0\">-</span>values <span class=\"br0\">(</span>g inv q<span class=\"br0\">)</span> <span class=\"br0\">(</span>egcd x m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> g<span class=\"br0\">)</span> <span class=\"br0\">(</span>error 'not<span class=\"sy0\">-</span>coprimes <span class=\"br0\">(</span><span class=\"kw1\">list</span> x m<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> inv <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> m inv<span class=\"br0\">)</span> inv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>mod<span class=\"sy0\">-</span>inv <span class=\"nu0\">42</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span>  \u2192 <span class=\"nu0\">1969</span><br/><span class=\"br0\">(</span>mod<span class=\"sy0\">-</span>inv <span class=\"nu0\">42</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>\ud83d\udd34 error: not<span class=\"sy0\">-</span>coprimes <span class=\"br0\">(</span><span class=\"nu0\">42</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 21, "block": "<pre class=\"text highlighted_source\">defmodule Modular do<br/>  def extended_gcd(a, b) do<br/>    {last_remainder, last_x} = extended_gcd(abs(a), abs(b), 1, 0, 0, 1)<br/>    {last_remainder, last_x * (if a &lt; 0, do: -1, else: 1)}<br/>  end<br/>\u00a0<br/>  defp extended_gcd(last_remainder, 0, last_x, _, _, _), do: {last_remainder, last_x}<br/>  defp extended_gcd(last_remainder, remainder, last_x, x, last_y, y) do<br/>    quotient   = div(last_remainder, remainder)<br/>    remainder2 = rem(last_remainder, remainder)<br/>    extended_gcd(remainder, remainder2, x, last_x - quotient*x, y, last_y - quotient*y)<br/>  end<br/>\u00a0<br/>  def inverse(e, et) do<br/>      {g, x} = extended_gcd(e, et)<br/>      if g\u00a0!= 1, do: raise \"The maths are broken!\"<br/>      rem(x+et, et)<br/>    end<br/>  end<br/>\u00a0<br/>IO.puts Modular.inverse(42,2017)</pre>"}, {"lang": "ERRE", "loc": 27, "block": "<pre class=\"text highlighted_source\">PROGRAM MOD_INV<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>PROCEDURE MUL_INV(A,B-&gt;T)<br/>  LOCAL NT,R,NR,Q,TMP<br/>  IF B&lt;0 THEN B=-B<br/>  IF A&lt;0 THEN A=B-(-A MOD B)<br/>  T=0  NT=1  R=B  NR=A MOD B<br/>  WHILE NR&lt;&gt;0 DO<br/>      Q=R DIV NR<br/>      TMP=NT  NT=T-Q*NT  T=TMP<br/>      TMP=NR  NR=R-Q*NR  R=TMP<br/>  END WHILE<br/>  IF (R&gt;1) THEN T=-1 EXIT PROCEDURE \u00a0! NO INVERSE<br/>  IF (T&lt;0) THEN T+=B<br/>END PROCEDURE<br/>\u00a0<br/>\u00a0<br/>BEGIN<br/>     MUL_INV(42,2017-&gt;T) PRINT(T)<br/>     MUL_INV(40,1-&gt;T) PRINT(T)<br/>     MUL_INV(52,-217-&gt;T) PRINT(T)   \u00a0! pari semantics for negative modulus<br/>     MUL_INV(-486,217-&gt;T)  PRINT(T)<br/>     MUL_INV(40,2018-&gt;T) PRINT(T)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//Calculate the Modular Inverse: Nigel Galloway: April 3rd., 2018</span><br/><span class=\"kw1\">let</span> MI n g <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fN n i g e l a <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> e <span class=\"kw1\">with</span><br/>    | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> g<br/>    | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> o <span class=\"sy0\">=</span> n<span class=\"sy0\">/</span>e<br/>           fN e l a <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>o<span class=\"sy0\">*</span>e<span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>o<span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"br0\">(</span>g<span class=\"sy0\">-</span>o<span class=\"sy0\">*</span>a<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"br0\">(</span>fN n <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> g <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USE: math.functions<br/>42 2017 mod-inv</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: invmod { a m | v b c -- inv }<br/>  m to v  <br/>  1 to c  <br/>  0 to b<br/>  begin a<br/>  while v a / &gt;r<br/>     c b s&gt;d c s&gt;d <a class=\"__cf_email__\" data-cfemail=\"255765\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1 m*/ d- d&gt;s to c to b<br/>     a v s&gt;d a s&gt;d r&gt; 1 m*/ d- d&gt;s to a to v<br/>  repeat b m mod dup to b 0&lt;<br/>  if m b + else b then\u00a0;<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 75, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 10-07-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> ext_euclid<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> a, b<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"co1\">' \"Table method\" aka \"The Magic Box\"</span><br/><span class=\"kw1\">Function</span> magic_box<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> ext_euclid<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span>, d<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span>, k<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span><br/>\u00a0<br/>    a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>\u00a0: b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>\u00a0: d<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = x<br/>    a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>\u00a0: b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>\u00a0: d<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = y\u00a0: k<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = x \\ y<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i = <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">While</span> Abs<span class=\"br0\">(</span>d<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">1</span><br/>        i += <span class=\"nu0\">1</span><br/>        a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = a<span class=\"br0\">(</span>i -<span class=\"nu0\">2</span><span class=\"br0\">)</span> - k<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span> * a<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = b<span class=\"br0\">(</span>i -<span class=\"nu0\">2</span><span class=\"br0\">)</span> - k<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span> * b<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        d<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = d<span class=\"br0\">(</span>i -<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> d<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        k<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = d<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ d<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"co1\">'Print a(i),b(i),d(i),k(i)</span><br/>        <span class=\"kw1\">If</span> d<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> d<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">While</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> d<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"co1\">'  -1 * (ab + by) = -1 * -1 ==&gt; -ab -by = 1 </span><br/>        a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = -a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = -b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Function</span> = <span class=\"kw1\">Type</span><span class=\"br0\">(</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> x, y, gcd<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ext_euclid result<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Read</span> x, y<br/>    <span class=\"kw1\">If</span> x = <span class=\"nu0\">0</span> AndAlso y = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    result = magic_box<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">With</span> result<br/>        gcd = .<span class=\"me1\">a</span> * x + .<span class=\"me1\">b</span> * y<br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"a * \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; <span class=\"st0\">\" + b * \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>;  <br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\" = GCD(\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; <span class=\"st0\">\", \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>; <span class=\"st0\">\") =\"</span>; gcd<br/>        <span class=\"kw1\">If</span> gcd &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"No solution, numbers are not coprime\"</span><br/>        <span class=\"kw1\">Else</span> <br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"a = \"</span>; .<span class=\"me1\">a</span>; <span class=\"st0\">\", b = \"</span>;.<span class=\"me1\">b</span><br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"The Modular inverse of \"</span>; x; <span class=\"st0\">\" modulo \"</span>; y; <span class=\"st0\">\" = \"</span>;<br/>            <span class=\"kw1\">While</span> .<span class=\"me1\">a</span> &lt; <span class=\"nu0\">0</span>\u00a0: .<span class=\"me1\">a</span> += <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>y &gt; <span class=\"nu0\">0</span>, y, -y<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Wend</span> <br/>            <span class=\"kw1\">Print</span> .<span class=\"me1\">a</span><br/>            <span class=\"co1\">'Print \"The Modular inverse of \"; y; \" modulo \"; x; \" = \";</span><br/>            <span class=\"co1\">'While .b &lt; 0\u00a0: .b += IIf(x &gt; 0, x, -x)\u00a0: Wend </span><br/>            <span class=\"co1\">'Print .b</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">With</span><br/>    <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"nu0\">42</span>, <span class=\"nu0\">2017</span><br/><span class=\"kw1\">Data</span> <span class=\"nu0\">40</span>, <span class=\"nu0\">1</span><br/><span class=\"kw1\">Data</span> <span class=\"nu0\">52</span>, -<span class=\"nu0\">217</span><br/><span class=\"kw1\">Data</span> -<span class=\"nu0\">486</span>, <span class=\"nu0\">217</span><br/><span class=\"kw1\">Data</span> <span class=\"nu0\">40</span>, <span class=\"nu0\">2018</span><br/><span class=\"kw1\">Data</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "FunL", "loc": 12, "block": "<pre class=\"text highlighted_source\">import integers.egcd<br/>\u00a0<br/>def modinv( a, m ) =<br/>    val (g, x, _) = egcd( a, m )<br/>\u00a0<br/>    if g\u00a0!= 1 then error( a + ' and ' + m + ' not coprime' )<br/>\u00a0<br/>    val res = x\u00a0% m<br/>\u00a0<br/>    if res &lt; 0 then res + m else res<br/>\u00a0<br/>println( modinv(42, 2017) )</pre>"}, {"lang": "Go", "loc": 13, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\ta <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">42</span><span class=\"sy1\">)</span><br/>\tm <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2017</span><span class=\"sy1\">)</span><br/>\tk <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>ModInverse<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 29, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\"><br/>10</span> <span class=\"co1\">' Modular inverse</span><br/><span class=\"co3\">20</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> E% <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/><span class=\"co3\">30</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> T% <span class=\"sy0\">=</span> <span class=\"nu0\">2017</span><br/><span class=\"co3\">40</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">50</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> MODINV%<br/><span class=\"co3\">60</span> <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/><span class=\"co3\"><br/>990</span>  <span class=\"co1\">' increments e stp (step) times until bal is greater than t</span><br/><span class=\"co3\">992</span>  <span class=\"co1\">' repeats until bal = 1 (mod = 1) and returns count</span><br/><span class=\"co3\">994</span>  <span class=\"co1\">' bal will not be greater than t + e </span><br/><span class=\"co3\">1000</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> D% <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co3\">1010</span> <span class=\"kw1\">IF</span> E% <span class=\"sy0\">&gt;=</span> T% <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">1140</span><br/><span class=\"co3\">1020</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> BAL% <span class=\"sy0\">=</span> E%<br/><span class=\"co3\">1025</span>  <span class=\"co1\">' At least one iteration is necessary</span><br/><span class=\"co3\">1030</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> STP% <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>T% <span class=\"sy0\">-</span> BAL%<span class=\"br0\">)</span> \\ E%<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">1040</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> BAL% <span class=\"sy0\">=</span> BAL% <span class=\"sy0\">+</span> STP% <span class=\"sy0\">*</span> E%<br/><span class=\"co3\">1050</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> COUNT% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> STP%<br/><span class=\"co3\">1060</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> BAL% <span class=\"sy0\">=</span> BAL% <span class=\"sy0\">-</span> T%<br/><span class=\"co3\">1070</span>  <span class=\"kw1\">WHILE</span> BAL% <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">1080</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> STP% <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>T% <span class=\"sy0\">-</span> BAL%<span class=\"br0\">)</span> \\ E%<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">1090</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> BAL% <span class=\"sy0\">=</span> BAL% <span class=\"sy0\">+</span> STP% <span class=\"sy0\">*</span> E%<br/><span class=\"co3\">1100</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> COUNT% <span class=\"sy0\">=</span> COUNT% <span class=\"sy0\">+</span> STP%<br/><span class=\"co3\">1110</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> BAL% <span class=\"sy0\">=</span> BAL% <span class=\"sy0\">-</span> T%<br/><span class=\"co3\">1120</span>  <span class=\"kw1\">WEND</span><br/><span class=\"co3\">1130</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> D% <span class=\"sy0\">=</span> COUNT%<br/><span class=\"co3\">1140</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> MODINV% <span class=\"sy0\">=</span> D%<br/><span class=\"co3\">1150</span> <span class=\"kw1\">RETURN</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- Given a and m, return Just x such that ax = 1 mod m.</span><br/><span class=\"co1\">-- If there is no such x return Nothing.</span><br/>modInv <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>modInv a m<br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> g <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>mkPos i<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">_,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=</span> gcdExt a m<br/>    mkPos x<br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> m<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> x<br/>\u00a0<br/><span class=\"co1\">-- Extended Euclidean algorithm.</span><br/><span class=\"co1\">-- Given non-negative a and b, return x, y and g</span><br/><span class=\"co1\">-- such that ax + by = g, where g = gcd(a,b).</span><br/><span class=\"co1\">-- Note that x or y may be negative.</span><br/>gcdExt <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>gcdExt a <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>gcdExt a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a>` b<br/>      <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=</span> gcdExt b r<br/>  <span class=\"kw1\">in</span> <span class=\"br0\">(</span>t<span class=\"sy0\">,</span> s <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> t<span class=\"sy0\">,</span> g<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">[</span><span class=\"nu0\">2</span> `modInv` <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span> `modInv` <span class=\"nu0\">2017</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">42</span><br/>    b <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">2017</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>mul_inv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mul_inv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>b0 <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        q <span class=\"sy0\">:=</span> a<span class=\"sy0\">/</span>b<br/>        <span class=\"br0\">(</span>t <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">:=</span> a<span class=\"sy0\">%</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"sy0\">:=</span> x0<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> x1<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>x0<span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> x1 <span class=\"kw1\">else</span> x1<span class=\"sy0\">+</span>b0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   modInv =: dyad def <span class=\"st_h\">'x y&amp;|@^ &lt;: 5 p: y'</span>\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span>.<span class=\"me1\">modInverse</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> modInverse <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">%=</span> b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">%</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">invmod(a, b)</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>a.<span class=\"me1\">modInverse</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>1/42 mod 2017;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">modInv[a_, m_]\u00a0:= <br/> Block[{x,k}, x /. FindInstance[a x == 1 + k m, {x, k}, Integers]]</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u041f1\t\u041f2\t&lt;-&gt;\t\u041f0\t0\t\u041f5\t1\t\u041f6\t\u0418\u041f1\t1<br/>-\tx=0\t14\t\u0421/\u041f\t\u0418\u041f0\t1\t-\t/-/\tx&lt;0\t50<br/>\u0418\u041f0\t\u0418\u041f1\t/\t[x]\t\u041f4\t\u0418\u041f1\t\u041f3\t\u0418\u041f0\t^\t\u0418\u041f1<br/>/\t[x]\t\u0418\u041f1\t*\t-\t\u041f1\t\u0418\u041f3\t\u041f0\t\u0418\u041f5\t\u041f3<br/>\u0418\u041f6\t\u0418\u041f4\t\u0418\u041f5\t*\t-\t\u041f5\t\u0418\u041f3\t\u041f6\t\u0411\u041f\t14<br/>\u0418\u041f6\tx&lt;0\t55\t\u0418\u041f2\t+\t\u0421/\u041f</pre>"}, {"lang": "Modula-2", "loc": 43, "block": "<pre class=\"text highlighted_source\">MODULE ModularInverse;<br/>  FROM InOut IMPORT WriteString, WriteInt, WriteLn;<br/>\u00a0<br/>  TYPE Data = RECORD x\u00a0: INTEGER;<br/>                     y\u00a0: INTEGER<br/>              END;<br/>\u00a0<br/>  VAR c \u00a0: INTEGER;<br/>      ab\u00a0: ARRAY [1..5] OF Data;<br/>\u00a0<br/>PROCEDURE mi(VAR a, b\u00a0: INTEGER): INTEGER;<br/>  VAR t, nt, r, nr, q, tmp\u00a0: INTEGER;<br/>\u00a0<br/>BEGIN<br/>  b\u00a0:= ABS(b);<br/>  IF a &lt; 0 THEN a\u00a0:= b - (-a MOD b) END;<br/>  t\u00a0:= 0; nt\u00a0:= 1; r\u00a0:= b; nr\u00a0:= a MOD b;<br/>  WHILE (nr # 0) DO<br/>    q\u00a0:= r / nr;<br/>    tmp\u00a0:= nt; nt\u00a0:= t - q * nt; t\u00a0:= tmp;<br/>    tmp\u00a0:= nr; nr\u00a0:= r - q * nr; r\u00a0:= tmp;<br/>  END;<br/>  IF (r &gt; 1) THEN RETURN -1 END;<br/>  IF (t &lt; 0) THEN RETURN t + b END;<br/>  RETURN t;<br/>END mi;<br/>\u00a0<br/>BEGIN<br/>  ab[1].x\u00a0:= 42;   ab[1].y\u00a0:= 2017;<br/>  ab[2].x\u00a0:= 40;   ab[2].y\u00a0:= 1;<br/>  ab[3].x\u00a0:= 52;   ab[3].y\u00a0:= -217;<br/>  ab[4].x\u00a0:= -486; ab[4].y\u00a0:= 217;<br/>  ab[5].x\u00a0:= 40;   ab[5].y\u00a0:= 2018;<br/>  WriteLn;<br/>  WriteString(\"Modular inverse\");<br/>  WriteLn;<br/>  FOR c\u00a0:= 1 TO 5 DO<br/>    WriteInt(ab[c].x, 6); WriteString(\", \");<br/>    WriteInt(ab[c].y, 6); WriteString(\" = \");<br/>    WriteInt(mi(ab[c].x, ab[c].y),6);<br/>    WriteLn;<br/>  END;<br/>END ModularInverse.</pre>"}, {"lang": "newLISP", "loc": 32, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>modular<span class=\"sy1\">-</span>multiplicative<span class=\"sy1\">-</span>inverse a n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> n <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#abs\"><span class=\"kw1\">abs</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> a <span class=\"br0\">(</span><span class=\"sy1\">-</span> n <span class=\"br0\">(</span><span class=\"sy1\">%</span> <span class=\"br0\">(</span><span class=\"sy1\">-</span> <span class=\"nu0\">0</span> a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> t <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> nt <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> r n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> nr <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#mod\"><span class=\"kw1\">mod</span></a> a n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#not\"><span class=\"kw1\">not</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#zero%3F\"><span class=\"kw1\">zero?</span></a> nr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> q <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#int\"><span class=\"kw1\">int</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> r nr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> tmp nt<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> nt <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sub\"><span class=\"kw1\">sub</span></a> t <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#mul\"><span class=\"kw1\">mul</span></a> q nt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> t tmp<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> tmp nr<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> nr <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sub\"><span class=\"kw1\">sub</span></a> r <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#mul\"><span class=\"kw1\">mul</span></a> q nr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> r tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&gt;</span> r <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> retvalue <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil\"><span class=\"kw1\">nil</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span> t <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> retvalue <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#add\"><span class=\"kw1\">add</span></a> t n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> retvalue t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    retvalue<span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>modular<span class=\"sy1\">-</span>multiplicative<span class=\"sy1\">-</span>inverse <span class=\"nu0\">42</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">proc mulInv(a0, b0): int =<br/>  var (a, b, x0) = (a0, b0, 0)<br/>  result = 1<br/>  if b == 1: return<br/>  while a &gt; 1:<br/>    let q = a div b<br/>    a = a mod b<br/>    swap a, b<br/>    result = result - q * x0<br/>    swap x0, result<br/>  if result &lt; 0: result += b0<br/>\u00a0<br/>echo mulInv(42, 2017)</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> mul_inv a <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">|</span> b <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux a b x0 x1 <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> x1 <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"mul_inv\"</span> <span class=\"kw1\">else</span><br/>    aux b <span class=\"br0\">(</span>a <span class=\"kw1\">mod</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> <span class=\"br0\">(</span>a <span class=\"sy0\">/</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> x0<span class=\"br0\">)</span> x0<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> aux a b <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> x <span class=\"sy0\">+</span> b <span class=\"kw1\">else</span> x</pre>"}, {"lang": "Oforth", "loc": 22, "block": "<pre class=\"text highlighted_source\">// euclid ( a b -- u v r )<br/>//    Return r = gcd(a, b) and (u, v) / r = au + bv<br/>\u00a0<br/>: euclid(a, b)<br/>| q u u1 v v1 |<br/>\u00a0<br/>   b 0 &lt; ifTrue: [ b neg -&gt;b ]<br/>   a 0 &lt; ifTrue: [ b a neg b mod - -&gt;a ]<br/>\u00a0<br/>   1 dup -&gt;u -&gt;v1<br/>   0 dup -&gt;v -&gt;u1<br/>\u00a0<br/>   while(b) [<br/>      b a b /mod -&gt;q -&gt;b -&gt;a<br/>      u1 u u1 q * - -&gt;u1 -&gt;u<br/>      v1 v v1 q * - -&gt;v1 -&gt;v<br/>      ]<br/>   u v a\u00a0;<br/>\u00a0<br/>: invmod(a, modulus)<br/>   a modulus euclid 1 == ifFalse: [ drop drop null return ]<br/>   drop dup 0 &lt; ifTrue: [ modulus + ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">42</span><span class=\"sy0\">,</span><span class=\"nu1\">2017</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 25, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co1\">// increments e step times until bal is greater than t</span><br/><span class=\"co1\">// repeats until bal = 1 (mod = 1) and returns count</span><br/><span class=\"co1\">// bal will not be greater than t + e</span><br/>\u00a0<br/><span class=\"kw1\">function</span> modInv<span class=\"br0\">(</span>e<span class=\"sy1\">,</span> t <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    d <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    bal<span class=\"sy1\">,</span> count<span class=\"sy1\">,</span> step <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> e &lt; t <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        count <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        bal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> e<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">repeat</span><br/>          step <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy3\">-</span>bal<span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> e<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>          bal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> bal <span class=\"sy3\">+</span> step <span class=\"sy3\">*</span> e<span class=\"sy1\">;</span><br/>          count <span class=\"sy1\">:</span><span class=\"sy3\">=</span> count <span class=\"sy3\">+</span> step<span class=\"sy1\">;</span><br/>          bal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> bal <span class=\"sy3\">-</span> t<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">until</span> bal <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> count<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    modInv <span class=\"sy1\">:</span><span class=\"sy3\">=</span> d<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span> say <span class=\"nu0\">42</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bmodinv</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># or</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">ModInt</span> <span class=\"co2\">qw/mod/</span><span class=\"sy0\">;</span>  say mod<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">inverse</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">residue</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># or</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Pari</span> <span class=\"co2\">qw/PARI lift/</span><span class=\"sy0\">;</span> say lift PARI <span class=\"st0\">\"Mod(1/42,2017)\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># or</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMP</span> <span class=\"co2\">qw/:constant/</span><span class=\"sy0\">;</span> say <span class=\"nu0\">42</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bmodinv</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># or</span><br/><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/invmod/</span><span class=\"sy0\">;</span> say invmod<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> inverse<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$modulo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$uc</span><span class=\"sy0\">,</span> <span class=\"re0\">$vc</span><span class=\"sy0\">,</span> <span class=\"re0\">$ud</span><span class=\"sy0\">,</span> <span class=\"re0\">$vd</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$modulo</span><span class=\"sy0\">,</span> <span class=\"re0\">$modulo</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$q</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$c</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"kw1\">div</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$uc</span><span class=\"sy0\">,</span> <span class=\"re0\">$vc</span><span class=\"sy0\">,</span> <span class=\"re0\">$ud</span><span class=\"sy0\">,</span> <span class=\"re0\">$vd</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$ud</span> <span class=\"sy0\">-</span> <span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"re0\">$uc</span><span class=\"sy0\">,</span> <span class=\"re0\">$vd</span> <span class=\"sy0\">-</span> <span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"re0\">$vc</span><span class=\"sy0\">,</span> <span class=\"re0\">$uc</span><span class=\"sy0\">,</span> <span class=\"re0\">$vc</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$ud</span> <span class=\"sy0\">%</span> <span class=\"re0\">$modulo</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> inverse <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>modulo<span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span></pre>"}, {"lang": "PHP", "loc": 16, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> invmod<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$nt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$nr</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$quot</span><span class=\"sy0\">=</span> <a href=\"http://www.php.net/intval\"><span class=\"kw3\">intval</span></a><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">/</span><span class=\"re0\">$nr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nt</span><span class=\"sy0\">;</span>  <span class=\"re0\">$nt</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">-</span> <span class=\"re0\">$quot</span><span class=\"sy0\">*</span><span class=\"re0\">$nt</span><span class=\"sy0\">;</span>  <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><span class=\"sy0\">;</span>  <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$quot</span><span class=\"sy0\">*</span><span class=\"re0\">$nr</span><span class=\"sy0\">;</span>  <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$t</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$t</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\t<a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es6\">%d</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> invmod<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(de modinv (A B)<br/>   (let (B0 B  X0 0  X1 1  Q 0  T1 0)<br/>      (while (&lt; 1 A)<br/>         (setq<br/>            Q (/ A B)<br/>            T1 B<br/>            B (% A B)<br/>            A T1<br/>            T1 X0<br/>            X0 (- X1 (* Q X0))<br/>            X1 T1 ) )<br/>      (if (lt0 X1) (+ X1 B0) X1) ) )<br/>\u00a0<br/>(println<br/>   (modinv 42 2017) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 33, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 13.07.2015 Walter Pachl<br/> *-------------------------------------------------------------------*/</span><br/> minv<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> x<span class=\"sy0\">=</span><span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/> y<span class=\"sy0\">=</span><span class=\"nu0\">2017</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'modular inverse of'</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">' by '</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">' ---&gt; '</span><span class=\"sy0\">,</span>modinv<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> modinv<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>ob<span class=\"sy0\">,</span>ox<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> ob<span class=\"sy0\">=</span>b<span class=\"sy0\">;</span><br/> ox<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">If</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>a<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     q<span class=\"sy0\">=</span>a<span class=\"sy0\">/</span>b<span class=\"sy0\">;</span><br/>     r<span class=\"sy0\">=</span><span class=\"kw1\">mod</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     a<span class=\"sy0\">=</span>b<span class=\"sy0\">;</span><br/>     b<span class=\"sy0\">=</span>r<span class=\"sy0\">;</span><br/>     t<span class=\"sy0\">=</span>ox<span class=\"sy0\">;</span><br/>     ox<span class=\"sy0\">=</span>d<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>ox<span class=\"sy0\">;</span><br/>     d<span class=\"sy0\">=</span>t<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> d<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>   d<span class=\"sy0\">=</span>d<span class=\"sy0\">+</span>ob<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 23, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> invmod<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$a</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"re0\">$nt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><br/>\t<span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><br/>\t<span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$nr</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::truncate<span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">/</span><span class=\"re0\">$nr</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nt</span><br/>\t\t<span class=\"re0\">$nt</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">-</span> <span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"re0\">$nt</span><br/>\t\t<span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span><br/>\t\t<span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><br/>\t\t<span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"re0\">$nr</span><br/>\t\t<span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$t</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$t</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">return</span> <span class=\"re0\">$t</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>invmod <span class=\"nu0\">42</span> <span class=\"nu0\">2017</span></pre>"}, {"lang": "PureBasic", "loc": 37, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Declare</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span>.i mi<span class=\"br0\">(</span>a.i, b.i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"MODULAR-INVERSE\"</span><span class=\"br0\">)</span><br/>  main<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">End</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> ModularInverse<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>  <br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\tMODULAR-INVERSE(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">+</span> <br/>         <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\") = \"</span> <span class=\"sy0\">+</span> <br/>         <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>mi<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  ModularInverse<span class=\"br0\">(</span><span class=\"nu0\">42</span>, <span class=\"nu0\">2017</span><span class=\"br0\">)</span>  <span class=\"co1\">; = 1969</span><br/>  ModularInverse<span class=\"br0\">(</span><span class=\"nu0\">40</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"co1\">; = 0</span><br/>  ModularInverse<span class=\"br0\">(</span><span class=\"nu0\">52</span>, <span class=\"sy0\">-</span><span class=\"nu0\">217</span><span class=\"br0\">)</span>  <span class=\"co1\">; = 96</span><br/>  ModularInverse<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">486</span>, <span class=\"nu0\">217</span><span class=\"br0\">)</span> <span class=\"co1\">; = 121</span><br/>  ModularInverse<span class=\"br0\">(</span><span class=\"nu0\">40</span>, <span class=\"nu0\">2018</span><span class=\"br0\">)</span>  <span class=\"co1\">; = -1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i mi<span class=\"br0\">(</span>a.i, b.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> x.i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<br/>         y.i <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>         r.i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <br/>  <span class=\"kw1\">If</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">While</span> x <span class=\"sy0\">&lt;</span> y<br/>    r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">%</span> b   <br/>    <span class=\"kw1\">If</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Break</span><br/>    <span class=\"kw1\">EndIf</span><br/>    x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">If</span> x <span class=\"sy0\">&gt;</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\u00a0: x <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> x  <br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> extended_gcd<span class=\"br0\">(</span>aa<span class=\"sy0\">,</span> bb<span class=\"br0\">)</span>:<br/>    lastremainder<span class=\"sy0\">,</span> remainder <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>aa<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>bb<span class=\"br0\">)</span><br/>    x<span class=\"sy0\">,</span> lastx<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> lasty <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> remainder:<br/>        lastremainder<span class=\"sy0\">,</span> <span class=\"br0\">(</span>quotient<span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span> <span class=\"sy0\">=</span> remainder<span class=\"sy0\">,</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>lastremainder<span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span><br/>        x<span class=\"sy0\">,</span> lastx <span class=\"sy0\">=</span> lastx - quotient*x<span class=\"sy0\">,</span> x<br/>        y<span class=\"sy0\">,</span> lasty <span class=\"sy0\">=</span> lasty - quotient*y<span class=\"sy0\">,</span> y<br/>    <span class=\"kw1\">return</span> lastremainder<span class=\"sy0\">,</span> lastx * <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">if</span> aa <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lasty * <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">if</span> bb <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> modinv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> m<span class=\"br0\">)</span>:<br/>\tg<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> extended_gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> g <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:<br/>\t\t<span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><br/>\t<span class=\"kw1\">return</span> x\u00a0% m<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> modinv<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">2017</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1969</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(require math)<br/>(modular-inverse 42 2017)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays the  modular inverse  of an integer  X  modulo Y.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x y <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain two integers from the C.L.    */</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> x=   <span class=\"nu0\">42</span>                  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> y==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> y==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> y= <span class=\"nu0\">2017</span>                  <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'modular inverse of '</span>      x       <span class=\"st0\">\" by \"</span>       y        <span class=\"st0\">' \u2500\u2500\u2500\u25ba '</span>         modInv<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>modInv: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b <span class=\"nu0\">1</span> ob;     z=<span class=\"nu0\">0</span>              <span class=\"coMULTI\">/*B &amp; OB are obtained from the 2nd arg.*/</span><br/>        $=<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> b<span class=\"sy0\">\\</span>=<span class=\"nu0\">1</span>     <span class=\"kw3\">then</span>    <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> a<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><br/>                            <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  a<span class=\"sy0\">/</span>b  a<span class=\"sy0\">//</span>b  b  z       <span class=\"kw2\">with</span>      q  b  a  t<br/>                            z=$ - q<span class=\"sy0\">*</span>z;              $=<span class=\"kw6\">trunc</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>        <span class=\"kw1\">if</span> $<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$+ob<br/>        <span class=\"kw1\">return</span> $</pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"42\u00a0%! 2017 = \" + multInv(42, 2017) + nl<br/>\u00a0<br/>func multInv a,b<br/>     b0 = b  <br/>     x0 = 0<br/>     multInv = 1<br/>     if b = 1 return 0 ok<br/>     while a &gt; 1<br/>           q = floor(a / b)<br/>           t = b  <br/>           b = a\u00a0% b<br/>           a = t<br/>           t = x0 <br/>           x0 = multInv - q * x0<br/>           multInv = t  <br/>     end<br/>     if multInv &lt; 0 multInv = multInv + b0 ok<br/>     return multInv<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 20, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#based on pseudo code from http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Iterative_method_2 and from translating the python implementation.</span><br/><span class=\"kw1\">def</span> extended_gcd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  last_remainder, remainder = a.<span class=\"me1\">abs</span>, b.<span class=\"me1\">abs</span><br/>  x, last_x, y, last_y = <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> remainder\u00a0!= <span class=\"nu0\">0</span><br/>    last_remainder, <span class=\"br0\">(</span>quotient, remainder<span class=\"br0\">)</span> = remainder, last_remainder.<span class=\"me1\">divmod</span><span class=\"br0\">(</span>remainder<span class=\"br0\">)</span><br/>    x, last_x = last_x <span class=\"sy0\">-</span> quotient<span class=\"sy0\">*</span>x, x<br/>    y, last_y = last_y <span class=\"sy0\">-</span> quotient<span class=\"sy0\">*</span>y, y<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw2\">return</span> last_remainder, last_x <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> invmod<span class=\"br0\">(</span>e, et<span class=\"br0\">)</span><br/>  g, x = extended_gcd<span class=\"br0\">(</span>e, et<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> g\u00a0!= <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">raise</span> <span class=\"st0\">'The maths are broken!'</span><br/>  <span class=\"kw1\">end</span><br/>  x <span class=\"sy0\">%</span> et<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">print multInv(42, 2017)<br/>end<br/>\u00a0<br/>function multInv(a,b)<br/>\tb0\t= b<br/>\tmultInv\t= 1<br/>\tif b = 1 then goto [endFun]<br/>\twhile a &gt; 1<br/>\t\tq\t= a / b<br/>\t\tt\t= b <br/>\t\tb\t= a mod b<br/>\t\ta\t= t<br/>\t\tt\t= x0 <br/>\t\tx0\t= multInv - q * x0<br/>\t\tmultInv\t= int(t)<br/>\twend<br/>\tif multInv &lt; 0 then multInv = multInv + b0<br/>[endFun]<br/>end function</pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">fn mod_inv(a: isize, module: isize) -&gt; isize {<br/>  let mut mn = (module, a);<br/>  let mut xy = (0, 1);<br/>\u00a0<br/>  while mn.1\u00a0!= 0 {<br/>    xy = (xy.1, xy.0 - (mn.0 / mn.1) * xy.1);<br/>    mn = (mn.1, mn.0\u00a0% mn.1);<br/>  }<br/>\u00a0<br/>  while xy.0 &lt; 0 {<br/>    xy.0 += module;<br/>  }<br/>  xy.0<br/>}<br/>\u00a0<br/>fn main() {<br/>  println!(\"{}\", mod_inv(42, 2017))<br/>}</pre>"}, {"lang": "Scala", "loc": 16, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> gcdExt<span class=\"br0\">(</span>u<span class=\"sy0\">:</span> Int, v<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int, Int, Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"sy0\">@</span>tailrec<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> aux<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, x1<span class=\"sy0\">:</span> Int, x2<span class=\"sy0\">:</span> Int, y1<span class=\"sy0\">:</span> Int, y2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int, Int, Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x, y, a<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>q, r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a / b, a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>      aux<span class=\"br0\">(</span>b, r, x2 - q <span class=\"sy0\">*</span> x1, y2 - q <span class=\"sy0\">*</span> y1, x, x1, y, y1<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  aux<span class=\"br0\">(</span>u, v, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> modInv<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, m<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>i, j, g<span class=\"br0\">)</span> <span class=\"sy0\">=</span> gcdExt<span class=\"br0\">(</span>a, m<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>g <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> Option<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i + m <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> i<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Option.<span class=\"me1\">empty</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 43, "block": "<pre class=\"text highlighted_source\">const func bigInteger: modInverse (in var bigInteger: a,<br/>    in var bigInteger: b) is func<br/>  result<br/>    var bigInteger: modularInverse is 0_;<br/>  local<br/>    var bigInteger: b_bak is 0_;<br/>    var bigInteger: x is 0_;<br/>    var bigInteger: y is 1_;<br/>    var bigInteger: lastx is 1_;<br/>    var bigInteger: lasty is 0_;<br/>    var bigInteger: temp is 0_;<br/>    var bigInteger: quotient is 0_;<br/>  begin<br/>    if b &lt; 0_ then<br/>      raise RANGE_ERROR;<br/>    end if;<br/>    if a &lt; 0_ and b &lt;&gt; 0_ then<br/>      a\u00a0:= a mod b;<br/>    end if;<br/>    b_bak\u00a0:= b;<br/>    while b &lt;&gt; 0_ do<br/>      temp\u00a0:= b;<br/>      quotient\u00a0:= a div b;<br/>      b\u00a0:= a rem b;<br/>      a\u00a0:= temp;<br/>\u00a0<br/>      temp\u00a0:= x;<br/>      x\u00a0:= lastx - quotient * x;<br/>      lastx\u00a0:= temp;<br/>\u00a0<br/>      temp\u00a0:= y;<br/>      y\u00a0:= lasty - quotient * y;<br/>      lasty\u00a0:= temp;<br/>    end while;<br/>    if a = 1_ then<br/>      modularInverse\u00a0:= lastx;<br/>      if modularInverse &lt; 0_ then<br/>        modularInverse +:= b_bak;<br/>      end if;<br/>    else<br/>      raise RANGE_ERROR;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"nu0\">42</span>.<span class=\"me1\">modinv</span><span class=\"br0\">(</span><span class=\"nu0\">2017</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> gcdExt <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> / <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    lassign <span class=\"br0\">[</span>gcdExt <span class=\"re0\">$b</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span> s t g<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> - <span class=\"re0\">$q</span><span class=\"sy0\">*</span><span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$g</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> modInv <span class=\"br0\">{</span>a m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>gcdExt <span class=\"re0\">$a</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> i -<span class=\"sy0\">&gt;</span> g<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$g</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"no inverse exists of $a\u00a0%! $m\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"re0\">$m</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$i</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "tsql", "loc": 34, "block": "<pre class=\"tsql highlighted_source\">;<span class=\"kw1\">WITH</span> <span class=\"kw1\">Iterate</span><span class=\"br0\">(</span>N,A,B,X0,X1<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">AS</span> <span class=\"br0\">(</span><br/>\t\t<span class=\"kw1\">SELECT</span> <br/>\t\t\t<span class=\"nu0\">1</span><br/>\t\t\t,<span class=\"kw1\">CASE</span> <span class=\"kw1\">WHEN</span> @a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> @b<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>@a <span class=\"sy0\">%</span> @b<span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> @a <span class=\"kw1\">END</span><br/>\t\t\t,<span class=\"kw1\">CASE</span> <span class=\"kw1\">WHEN</span> @b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"sy0\">-</span>@b <span class=\"kw1\">ELSE</span> @b <span class=\"kw1\">END</span><br/>\t\t\t,<span class=\"nu0\">0</span><br/>\t\t\t,<span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">UNION</span> <span class=\"sy0\">ALL</span><br/>\t\t<span class=\"kw1\">SELECT</span> <br/>\t\t\tN<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t\t,B<br/>\t\t\t,A<span class=\"sy0\">%</span>B<br/>\t\t\t,X1<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"br0\">(</span>A<span class=\"sy0\">/</span>B<span class=\"br0\">)</span><span class=\"sy0\">*</span>X0<span class=\"br0\">)</span><br/>\t\t\t,X0<br/>\t\t<span class=\"kw1\">FROM</span> <span class=\"kw1\">Iterate</span><br/>\t\t<span class=\"kw1\">WHERE</span> A <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">AND</span> B <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">)</span>,<br/>\tModularInverse<span class=\"br0\">(</span><span class=\"kw1\">Result</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">AS</span> <span class=\"br0\">(</span><br/>\t\t<span class=\"kw1\">SELECT</span><br/>\t\t\t<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">FROM</span> <span class=\"kw1\">Iterate</span><br/>\t\t\t<span class=\"kw1\">WHERE</span> A <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">AND</span> B <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">UNION</span> <span class=\"sy0\">ALL</span><br/>\t\t<span class=\"kw1\">SELECT</span><br/>\t\t\t<span class=\"kw1\">TOP</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">CASE</span> <span class=\"kw1\">WHEN</span> X1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> X1<span class=\"sy0\">+</span>@b <span class=\"kw1\">ELSE</span> X1 <span class=\"kw1\">END</span> <span class=\"kw1\">AS</span> <span class=\"kw1\">Result</span><br/>\t\t\t<span class=\"kw1\">FROM</span> <span class=\"kw1\">Iterate</span><br/>\t\t\t<span class=\"kw1\">WHERE</span> <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw2\">COUNT</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> <span class=\"kw1\">Iterate</span> <span class=\"kw1\">WHERE</span> A <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">AND</span> B <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">ORDER</span> <span class=\"kw1\">BY</span> N <span class=\"kw1\">DESC</span><br/>\t<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">SELECT</span> <span class=\"sy0\">*</span><br/>\t<span class=\"kw1\">FROM</span> ModularInverse</pre>"}, {"lang": "uBasic/4tH", "loc": 25, "block": "<pre class=\"text highlighted_source\">Print FUNC(_MulInv(42, 2017))<br/>End<br/>\u00a0<br/>_MulInv Param(2)<br/>  Local(5)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"e487a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"8ae8ca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  <a class=\"__cf_email__\" data-cfemail=\"8debcd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>  <a class=\"__cf_email__\" data-cfemail=\"ccab8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>\u00a0<br/>  If <a class=\"__cf_email__\" data-cfemail=\"513311\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 Then Return<br/>\u00a0<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"731233\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 1<br/>    <a class=\"__cf_email__\" data-cfemail=\"335673\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"620322\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"a3c1e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"85e1c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"bddffd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"4f2d0f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"caab8a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"f290b2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"ff9ebf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"600420\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>    <a class=\"__cf_email__\" data-cfemail=\"ef8baf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"ea8caa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"5a3c1a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"781f38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - <a class=\"__cf_email__\" data-cfemail=\"264366\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"4e280e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"7e193e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"4f2b0f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>\u00a0<br/>  If <a class=\"__cf_email__\" data-cfemail=\"254265\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 0 Then <a class=\"__cf_email__\" data-cfemail=\"513611\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"5a3d1a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + <a class=\"__cf_email__\" data-cfemail=\"610221\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>Return (<a class=\"__cf_email__\" data-cfemail=\"422502\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "XPL0", "loc": 7, "block": "<pre class=\"text highlighted_source\">code IntOut=11, Text=12;<br/>int  X;<br/>def  A=42, M=2017;<br/>[for X:= 2 to M-1 do<br/>    if rem(A*X/M) = 1 then [IntOut(0, X);  exit];<br/>Text(0, \"Does not exist\");<br/>]</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn gcdExt(a,b){<br/>   if(b==0) return(1,0,a);<br/>   q,r:=a.divr(b); s,t,g:=gcdExt(b,r); return(t,s-q*t,g);<br/>}<br/>fcn modInv(a,m){i,_,g:=gcdExt(a,m); if(g==1) {if(i&lt;0)i+m} else Void}</pre>"}]}