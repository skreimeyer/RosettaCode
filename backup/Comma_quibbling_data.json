{"task": "Comma_quibbling", "blocks": [{"lang": "360 Assembly", "loc": 77, "block": "<pre class=\"text highlighted_source\">*        Comma quibbling           13/03/2017<br/>COMMAQUI CSECT<br/>         USING  COMMAQUI,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=A(N))    do i=1 to hbound(t)<br/>         LR     R1,R6                i<br/>         SLA    R1,5                 *32<br/>         LA     R2,T-32              @t(0)<br/>         AR     R1,R2                @t(i)<br/>         MVC    S1,0(R1)             s1=t(i)<br/>         MVC    S2,=CL32'{'          s2='{'<br/>         LA     R8,S2+1              s2ins=1<br/>         MVC    I2,=F'0'             i2=0<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,=A(L'T))    do j=1 to length(t)<br/>         LA     R1,S1                  @s1<br/>         BCTR   R1,0                   @s1-1<br/>         AR     R1,R7                  @s1-1+j<br/>         MVC    CJ,0(R1)               cj=mid(s1,j,1)<br/>         CLI    CJ,C' '                if cj=' '<br/>         BE     EXITJ                  then goto exitj<br/>       IF CLI,CJ,EQ,C',' THEN          if cj=\",\" then<br/>         MVC    0(2,R8),=C', '           s2=s2||\", \"<br/>         LA     R8,2(R8)                 s2ins=s2ins+2<br/>         LR     R0,R8                    s2ins<br/>         LA     R1,S2+1                  @s2+1<br/>         SR     R0,R1                    len(s2)-1<br/>         ST     R0,I2                    i2=len(s2)-1<br/>       ELSE     ,                      else<br/>         MVC    0(1,R8),CJ               s2=s2||cj<br/>         LA     R8,1(R8)                 s2ins=s2ins+1<br/>       ENDIF    ,                      endif<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>EXITJ    MVI    0(R8),C'}'           s2=s2||\"}\"<br/>         LA     R8,1(R8)             s2ins=s2ins+1<br/>         L      R0,I2                i2<br/>       IF LTR,R0,NZ,R0 THEN          if i2&lt;&gt;0 then<br/>         MVC    S2B,S2                 s2b=mid(s2,1,i2-1)<br/>         LA     R1,S2B-1               @s2b-1<br/>         A      R1,I2                  +i2<br/>         MVC    0(5,R1),=C' and '      s2b||\" and \"<br/>         LA     R1,5(R1)               +5 <br/>         LA     R2,S2+1                @s2+1<br/>         A      R2,I2                  +i2<br/>         LR     R3,R8                  s2ins<br/>         LA     R0,S2+1                @s2+1<br/>         SR     R3,R0                  s2ins-(@s2+1)<br/>         S      R3,I2                  -i2<br/>         BCTR   R3,0                   -1<br/>         EX     R3,XMVC                s2b||=mid(s2,i2+2)<br/>         MVC    S2,S2B     s2=mid(s2,1,i2-1)||\" and \"||mid(s2,i2+2)<br/>       ENDIF    ,                    endif<br/>         XPRNT  S2,L'S2              print s2<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>XMVC     MVC    0(0,R1),0(R2)      mvc @r1,@r2<br/>N        EQU    (TEND-T)/L'T       items of t<br/>T        DC     CL32' ',CL32'ABC',CL32'ABC,DEF',CL32'ABC,DEF,G,H'<br/>TEND     DS     0C<br/>I2       DS     F<br/>S1       DS     CL(L'T)<br/>S2       DS     CL(L'T)<br/>S2B      DS     CL(L'T)<br/>CJ       DS     CL1<br/>         YREGS<br/>         END    COMMAQUI</pre>"}, {"lang": "Ada", "loc": 17, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Comma_Quibble <span class=\"kw1\">is</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">case</span> Argument_Count <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"{}\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span> &amp; Argument<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Argument_Count</span>-<span class=\"nu0\">2</span> <span class=\"kw1\">loop</span><br/>\t    Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Argument<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Argument<span class=\"br0\">(</span>Argument_Count-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" and \"</span> &amp;<br/>\t\t         Argument<span class=\"br0\">(</span>Argument_Count<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/><span class=\"kw1\">end</span> Comma_Quibble;</pre>"}, {"lang": "ALGOL 68", "loc": 77, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns a string ( assumed to be of space-separated words ) with the words  #</span><br/><span class=\"coMULTI\"># separated by \", \", except for the last which is separated from the rest by  #</span><br/><span class=\"coMULTI\"># \" and \". The list is enclosed by braces                                     #</span><br/><span class=\"kw4\">PROC</span> to list <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> words <span class=\"br0\">)</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># count the number of words                                           #</span><br/>        <span class=\"kw3\">INT</span>  word count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> in word    <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> words <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> words<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is upper<span class=\"br0\">(</span> words<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># not an upper-case letter, possibly a word has been ended    #</span><br/>                in word <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"coMULTI\"># not a delimitor, possibly the start of a word               #</span><br/>                <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> in word<br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># we are starting a new word                              #</span><br/>                    word count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                    in word     <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># format the result                                                   #</span><br/>        <span class=\"kw3\">STRING</span> result    <span class=\"sy1\">:=</span> <span class=\"st0\">\"{\"</span><span class=\"sy1\">;</span><br/>        in word          <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>  word number <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> words <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> words<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is upper<span class=\"br0\">(</span> words<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># not an upper-case letter, possibly a word has been ended    #</span><br/>                in word <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"coMULTI\"># not a delimitor, possibly the start of a word               #</span><br/>                <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> in word<br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># we are starting a new word                              #</span><br/>                    word number <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                    in word      <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> word number <span class=\"sy1\">&gt;</span> 1<br/>                    <span class=\"kw2\">THEN</span><br/>                        <span class=\"coMULTI\"># second or subsequent word - need a separator        #</span><br/>                        result <span class=\"sy1\">+:=</span> <span class=\"kw2\">IF</span> word number <span class=\"sy1\">=</span> word count<br/>                                   <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># final word                          #</span><br/>                                       <span class=\"st0\">\" and \"</span><br/>                                   <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\"># non-final word                      #</span><br/>                                       <span class=\"st0\">\", \"</span><br/>                                   <span class=\"kw2\">FI</span><br/>                    <span class=\"kw2\">FI</span><br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                <span class=\"coMULTI\"># add the character to the result                             #</span><br/>                result <span class=\"sy1\">+:=</span> words<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        result <span class=\"sy1\">+</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># to list #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\"># procedure to test the to list PROC                                      #</span><br/>    <span class=\"kw4\">PROC</span> test to list <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> words <span class=\"br0\">)</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> words<br/>                 <span class=\"sy1\">+</span> <span class=\"st0\">\": \"</span><br/>                 <span class=\"sy1\">+</span> to list<span class=\"br0\">(</span> words <span class=\"br0\">)</span><br/>                 <span class=\"br0\">)</span><br/>               <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>               <span class=\"br0\">)</span><br/>             <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># test the to list PROC                                                   #</span><br/>    test to list<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test to list<span class=\"br0\">(</span> <span class=\"st0\">\"ABC\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test to list<span class=\"br0\">(</span> <span class=\"st0\">\"ABC DEF\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test to list<span class=\"br0\">(</span> <span class=\"st0\">\"ABC DEF G H\"</span> <span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 107, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>   \u00a0% returns a list of the words contained in wordString, separated by \", \",\u00a0%<br/>   \u00a0% except for the last which is separated from the rest by \" and \".       \u00a0%<br/>   \u00a0% The words are enclosed by braces                                       \u00a0%<br/>    string(256) procedure toList ( string(256) value  words )\u00a0;<br/>    begin<br/>        string(256) list;<br/>        integer     wordCount, wordNumber, listPos;<br/>        logical     inWord;<br/>\u00a0<br/>       \u00a0% returns true if ch is an upper-case letter, false otherwise        \u00a0%<br/>       \u00a0%         assumes the letters are consecutive in the character set   \u00a0%<br/>       \u00a0%         (as in ascii) would not be correct if the character set was\u00a0%<br/>       \u00a0%         ebcdic (as in the original implementations of Algol W)     \u00a0%<br/>        logical procedure isUpper ( string(1) value ch )\u00a0; ch &gt;= \"A\" and ch &lt;= \"Z\"\u00a0;<br/>\u00a0<br/>       \u00a0% adds a character to the result                                     \u00a0%<br/>        procedure addChar( string(1) value ch )\u00a0;<br/>        begin<br/>            list( listPos // 1 )\u00a0:= ch;<br/>            listPos\u00a0:= listPos + 1;<br/>        end addChar\u00a0;<br/>\u00a0<br/>       \u00a0% adds a string to the result                                       \u00a0%<br/>        procedure addString( string(256) value str<br/>                          \u00a0; integer     value len<br/>                           )\u00a0;<br/>            for strPos\u00a0:= 0 until len - 1 do addChar( str( strPos // 1 ) );<br/>\u00a0<br/>       \u00a0% count the number of words                                          \u00a0%<br/>\u00a0<br/>        wordCount\u00a0:= 0;<br/>        inWord   \u00a0:= false;<br/>        for charPos\u00a0:= 0 until 255<br/>        do begin<br/>            if isUpper( words( charPos // 1 ) ) then begin<br/>               \u00a0% not an upper-case letter, possibly a word has been ended   \u00a0%<br/>                inWord\u00a0:= false<br/>                end<br/>            else begin<br/>               \u00a0% not a delimitor, possibly the start of a word              \u00a0%<br/>                if not inWord then begin<br/>                   \u00a0% we are starting a new word                             \u00a0%<br/>                    wordCount\u00a0:= wordCount + 1;<br/>                    inWord   \u00a0:= true<br/>                end if_not_inWord<br/>            end <br/>        end for_charPos;<br/>\u00a0<br/>       \u00a0% format the result                                                  \u00a0%<br/>\u00a0<br/>        list      \u00a0:= \"\";<br/>        listPos   \u00a0:= 0;<br/>        inWord    \u00a0:= false;<br/>        wordNumber\u00a0:= 0;<br/>\u00a0<br/>        addChar( \"{\" );<br/>\u00a0<br/>        for charPos\u00a0:= 0 until 255<br/>        do begin<br/>            if not isUpper( words( charPos // 1 ) ) then begin<br/>               \u00a0% not an upper-case letter, possibly a word has been ended   \u00a0%<br/>                inWord\u00a0:= false<br/>                end<br/>            else begin<br/>               \u00a0% not a delimitor, possibly the start of a word              \u00a0%<br/>                if not inWord then begin<br/>                   \u00a0% we are starting a new word                             \u00a0%<br/>                    wordNumber\u00a0:= wordNumber + 1;<br/>                    inWord    \u00a0:= true;<br/>                    if wordNumber &gt; 1 then begin<br/>                       \u00a0% second or subsequent word - need a separator       \u00a0%<br/>                        if wordNumber = wordCount then addString( \" and \", 5 )\u00a0% final word\u00a0%<br/>                                                  else addString( \", \",    2 )\u00a0% non-final word\u00a0%<br/>                    end<br/>                end;<br/>               \u00a0% add the character to the result                            \u00a0%<br/>                addChar( words( charPos // 1 ) )<br/>            end<br/>        end for_charPos\u00a0;<br/>\u00a0<br/>        addChar( \"}\" );<br/>\u00a0<br/>        list<br/>    end toList\u00a0;<br/>\u00a0<br/>\u00a0<br/>   \u00a0% procedure to test the toList procedure                                \u00a0%<br/>    procedure testToList ( string(256) value words )\u00a0;<br/>    begin<br/>        string(256) list;<br/>        list\u00a0:= toList( words );<br/>        write( s_w\u00a0:= 0<br/>             , words( 0 // 32 )<br/>             , \": \"<br/>             , list(  0 // 32 )<br/>             )<br/>    end testToList\u00a0;<br/>\u00a0<br/>   \u00a0% test the toList procedure                                             \u00a0%<br/>    testToList( \"\" );<br/>    testToList( \"ABC\" );<br/>    testToList( \"ABC DEF\" );<br/>    testToList( \"ABC DEF G H\" );<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 185, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- quibble\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> quibble<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> applyCommas <span class=\"kw3\">to</span> \u00ac<br/>            compose<span class=\"br0\">(</span><span class=\"br0\">[</span>curry<span class=\"br0\">(</span><span class=\"kw3\">my</span> intercalate<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>, <span class=\"kw3\">my</span> |reverse|, <span class=\"kw3\">my</span> tail<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        intercalate<span class=\"br0\">(</span><span class=\"st0\">\" and \"</span>, ap<span class=\"br0\">(</span><span class=\"br0\">{</span>applyCommas, <span class=\"kw3\">my</span> head<span class=\"br0\">}</span>, <span class=\"br0\">{</span>|reverse|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> quibble<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> braces<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> x <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"br0\">{</span>braces, quibble<span class=\"br0\">}</span><span class=\"br0\">)</span>, \u00ac<br/>        append<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, \u00ac<br/>            map<span class=\"br0\">(</span>|words|, \u00ac<br/>                <span class=\"br0\">{</span><span class=\"st0\">\"One two three four\"</span>, <span class=\"st0\">\"Me myself I\"</span>, <span class=\"st0\">\"Jack Jill\"</span>, <span class=\"st0\">\"Loner\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> ap<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>intFs, intXs<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>length <span class=\"kw3\">of</span> fs, length <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> intFs<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> fs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> intXs<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> ap<br/>\u00a0<br/><span class=\"co1\">-- (++)\u00a0:: [a] -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> append<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    xs <span class=\"sy0\">&amp;</span> ys<br/><span class=\"kw3\">end</span> append<br/>\u00a0<br/><span class=\"co1\">-- compose\u00a0:: [(a -&gt; a)] -&gt; (a -&gt; a)</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>fs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, f<span class=\"br0\">)</span><br/>                    mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, x, fs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> append<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">&amp;</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> unit <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> unit <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    foldl<span class=\"br0\">(</span>append, unit, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- head\u00a0:: [a] -&gt; a</span><br/><span class=\"kw3\">on</span> head<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> head<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- |reverse|\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |reverse|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span><br/>        reverse <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |reverse|<br/>\u00a0<br/><span class=\"co1\">-- tail\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tail<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- words\u00a0:: String -&gt; [String]</span><br/><span class=\"kw3\">on</span> |words|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    words <span class=\"kw3\">of</span> s<br/><span class=\"kw3\">end</span> |words|</pre>"}, {"lang": "Astro", "loc": 14, "block": "<pre class=\"python highlighted_source\">fun quibble<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    let result <span class=\"sy0\">=</span> <span class=\"st0\">\" and \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>/ <span class=\"kw1\">and</span> /<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"{ $result }\"</span><br/>\u00a0<br/>let s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> s:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>quibble i<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 18, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% quibble<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% quibble<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% quibble<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% quibble<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>quibble<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\ts<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><br/>\tfor i<span class=\"sy0\">,</span> e in d<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\ts<span class=\"sy0\">:=</span> s <span class=\"sy0\">.</span> e <span class=\"sy0\">.</span> <span class=\"st0\">\", \"</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span>d<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\ts<span class=\"sy0\">:=</span> s <span class=\"sy0\">.</span> e <span class=\"sy0\">.</span> <span class=\"st0\">\" and \"</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\ts<span class=\"sy0\">:=</span> s <span class=\"sy0\">.</span> e<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">.</span> s <span class=\"sy0\">.</span> <span class=\"st0\">\"}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> quibble<span class=\"br0\">(</span>a, n,    i, s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> s = s a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"st0\">\", \"</span><br/>\ti = n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> s = s a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"st0\">\" and \"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> s = s a<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\t<span class=\"kw6\">return</span> <span class=\"st0\">\"{\"</span> s <span class=\"st0\">\"}\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> quibble<span class=\"br0\">(</span>a, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\tn = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span>, b<span class=\"br0\">)</span>; <span class=\"kw5\">print</span> quibble<span class=\"br0\">(</span>b, n<span class=\"br0\">)</span><br/>\tn = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"ABC DEF\"</span>, c<span class=\"br0\">)</span>; <span class=\"kw5\">print</span> quibble<span class=\"br0\">(</span>c, n<span class=\"br0\">)</span><br/>\tn = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"ABC DEF G H\"</span>, d<span class=\"br0\">)</span>; <span class=\"kw5\">print</span> quibble<span class=\"br0\">(</span>d, n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 41, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>::THE MAIN THING...</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp=[]<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">quibble</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp=[\"ABC\"]<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">quibble</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp=[\"ABC\",\"DEF\"]<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">quibble</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp=[\"ABC\",\"DEF\",\"G\",\"H\"]<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">quibble</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\">::/THE MAIN THING...</span><br/><span class=\"co2\"><br/>::THE FUNCTION</span><br/>:<span class=\"re0\">quibble</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cont=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> proc=<span class=\"sy0\">%</span><span class=\"re3\">inp:[=</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> proc=<span class=\"sy0\">%</span><span class=\"re3\">proc:]=</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">x</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">proc</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cont+=1<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> x=<span class=\"sy0\">%%</span><span class=\"re3\">x</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str<span class=\"sy0\">!</span><span class=\"re2\">cont</span><span class=\"sy0\">!</span><span class=\"re2\">=</span><span class=\"sy0\">!</span><span class=\"re2\">x</span>:\"=<span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a bef=<span class=\"sy0\">%</span><span class=\"re3\">cont</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> output=<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">cont</span><span class=\"sy0\">%</span>==2 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> output=<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span> and <span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%)</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">cont</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> 2 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">y</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>2,1,<span class=\"sy0\">%</span><span class=\"re3\">bef</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> output=<span class=\"sy0\">!</span><span class=\"re2\">output</span><span class=\"sy0\">!</span><span class=\"co3\">^,</span> <span class=\"sy0\">!</span><span class=\"re2\">str%%<span class=\"re3\">y</span></span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> output=<span class=\"sy0\">!</span><span class=\"re2\">output</span><span class=\"sy0\">!</span><span class=\"re2\"> and </span><span class=\"sy0\">!</span><span class=\"re2\">str%<span class=\"re3\">cont</span>%</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> {<span class=\"sy0\">!</span><span class=\"re2\">output</span><span class=\"sy0\">!</span>}<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"co2\">::/THE FUNCTION</span></pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">(\u00a0:?L1<br/>&amp; ABC:?L2<br/>&amp; ABC DEF:?L3<br/>&amp; ABC DEF G H:?L4<br/>&amp; L1 L2 L3 L4:?names<br/>&amp; ( quibble<br/>  =   w<br/>    .    \u00a0!arg:%?w (%\u00a0%:?arg)<br/>        &amp;\u00a0!w \", \" quibble$!arg<br/>      |\u00a0!arg:%?w\u00a0%?arg&amp;!w \" and \" quibble$!arg<br/>      |\u00a0!arg<br/>  )<br/>&amp; (concat=.str$(\"{\" quibble$!arg \"}\"))<br/>&amp;   whl<br/>  ' (!names:%?name\u00a0?names&amp;out$(!name concat$!!name))<br/>);</pre>"}, {"lang": "C", "loc": 53, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>quib<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>strs<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>size <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> size <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        len <span class=\"sy0\">+=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>strs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Can't allocate memory!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"{\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span>  <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> strs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">{</span><br/>                     <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> strs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                     <span class=\"kw1\">else</span><br/>                         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\" and \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 <span class=\"br0\">}</span><br/>                 <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> strs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>  <br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>test<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">=</span> quib<span class=\"br0\">(</span>test<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 33, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> CommaQuibbling<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co2\">#region Static Members</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Quibble<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><br/>                <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{{{0}}}\"</span>,<br/>                    <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<br/>                        input<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Zip</span><span class=\"br0\">(</span><br/>                            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"\"</span>, <span class=\"st0\">\" and \"</span> <span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                            <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> Quibble<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> Quibble<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> Quibble<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> Quibble<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\"&lt; Press Any Key &gt;\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co2\">#endregion</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> quibble<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> o, T i, T e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  o <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"{\"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy3\">!</span><span class=\"sy1\">=</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T n <span class=\"sy1\">=</span> i<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> more <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>e <span class=\"sy3\">!</span><span class=\"sy1\">=</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      o <span class=\"sy1\">&lt;&lt;</span> more <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>n<span class=\"sy4\">;</span><br/>      more <span class=\"sy1\">=</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>      n <span class=\"sy1\">=</span> i<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    o <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>more<span class=\"sy4\">?</span><span class=\"st0\">\" and \"</span><span class=\"sy4\">:</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>n<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  o <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"}\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">**</span> argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>,<span class=\"st0\">\"DEF\"</span>,<span class=\"st0\">\"G\"</span>,<span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    quibble<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, a, a<span class=\"sy2\">+</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> quibble <span class=\"br0\">[</span>sq<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>sep <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">pos?</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> sq<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"st0\">\"{\"</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span><span class=\"kw1\">butlast</span> sq<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>sep <span class=\"br0\">(</span>last sq<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Or, using clojure.pprint's cl-format, which implements common lisp's format:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> quibble<span class=\"sy0\">-</span>f <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>pprint<span class=\"sy0\">/</span>cl<span class=\"sy0\">-</span><span class=\"kw1\">format</span> nil <span class=\"st0\">\"{~{~a~#[~; and ~:;, ~]~}}\"</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> test<br/>  #<span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>sq <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>comp println <span class=\"sy0\">%</span><span class=\"br0\">)</span> sq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>test quibble<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test quibble<span class=\"sy0\">-</span>f<span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 75, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FORMAT <span class=\"kw3\">IS</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> comma-quibbling-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>\u00a0<br/>ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>REPOSITORY<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">FUNCTION</span> comma-quibbling<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  strs-<span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  strs-len                  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  strs                      <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                                  <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">0</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw2\">TIMES</span><br/>                                  <span class=\"kw3\">DEPENDING</span> <span class=\"kw3\">ON</span> strs-len<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"st0\">\"ABC\"</span> <span class=\"kw2\">TO</span> strs <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"st0\">\"DEF\"</span> <span class=\"kw2\">TO</span> strs <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"st0\">\"G\"</span> <span class=\"kw2\">TO</span> strs <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"st0\">\"H\"</span> <span class=\"kw2\">TO</span> strs <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> strs-len <span class=\"kw3\">FROM</span> <span class=\"nu0\">0</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> strs-len &gt; <span class=\"nu0\">4</span><br/>        <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> comma-quibbling<span class=\"br0\">(</span>strs-<span class=\"kw3\">area</span><span class=\"br0\">)</span><br/>    END-<span class=\"kw2\">PERFORM</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> comma-quibbling-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>FUNCTION-ID<span class=\"sy0\">.</span> comma-quibbling<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  i                             <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  num-extra-<span class=\"kw3\">words</span>               <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  strs-<span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  strs-len                  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  strs                      <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                                  <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">0</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw2\">TIMES</span><br/>                                  <span class=\"kw3\">DEPENDING</span> <span class=\"kw3\">ON</span> strs-len<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  str                           <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> strs-<span class=\"kw3\">area</span> RETURNING str<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">EVALUATE</span> strs-len<br/>        <span class=\"kw3\">WHEN</span> <span class=\"kw3\">ZERO</span><br/>            <span class=\"kw2\">MOVE</span> <span class=\"st0\">\"{}\"</span> <span class=\"kw2\">TO</span> str<br/>            GOBACK<br/>\u00a0<br/>        <span class=\"kw3\">WHEN</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> CONCATENATE<span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>strs <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">TO</span> str<br/>            GOBACK<br/>    END-<span class=\"kw2\">EVALUATE</span><br/>\u00a0<br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> CONCATENATE<span class=\"br0\">(</span><span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>strs <span class=\"br0\">(</span>strs-len<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\" and \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>strs <span class=\"br0\">(</span>strs-len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">TO</span> str<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> strs-len &gt; <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">2</span> <span class=\"kw3\">FROM</span> strs-len <span class=\"kw2\">GIVING</span> num-extra-<span class=\"kw3\">words</span><br/>        <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> num-extra-<span class=\"kw3\">words</span> <span class=\"kw3\">BY</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> CONCATENATE<span class=\"br0\">(</span><span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>strs <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> str<span class=\"br0\">)</span><br/>                <span class=\"kw2\">TO</span> str<br/>        END-<span class=\"kw2\">PERFORM</span><br/>    END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> CONCATENATE<span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">,</span> str<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> str<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">FUNCTION</span> comma-quibbling<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 10, "block": "<pre class=\"coffeescript highlighted_source\">quibble = <span class=\"br0\">(</span><span class=\"br0\">[</span>most...<span class=\"sy0\">,</span> last<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>  <span class=\"st0\">'{'</span> <span class=\"sy0\">+</span> <br/>    <span class=\"br0\">(</span>most.<span class=\"me1\">join</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> most.<span class=\"me1\">length</span> <span class=\"kw1\">then</span> <span class=\"st0\">' and '</span> <span class=\"kw1\">else</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>  <span class=\"sy0\">+</span> <br/>    <span class=\"br0\">(</span>last <span class=\"kw2\">or</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>  <span class=\"st0\">'}'</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> quibble<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>                                  <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span> <span class=\"br0\">]</span>   <span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> quibble <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"{~{~a~#[~; and ~:;, ~]~}}\"</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>quibble<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> quibbler<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> seq<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>seq.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"{%-(%s,\u00a0%)}\"</span><span class=\"sy0\">,</span> seq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"{%-(%s,\u00a0%) and\u00a0%s}\"</span><span class=\"sy0\">,</span> seq<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> seq<span class=\"br0\">[</span>$<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">//foreach (immutable test; [[],</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> test<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        test.<span class=\"me1\">quibbler</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 36, "block": "<pre class=\"dcl highlighted_source\">$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"[]\"</span><br/>$ <span class=\"kw1\">gosub</span> comma_quibbling<br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> return_string<br/>$<br/>$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\"]\"</span><br/>$ <span class=\"kw1\">gosub</span> comma_quibbling<br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> return_string<br/>$<br/>$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\", \"</span><span class=\"st0\">\"DEF\"</span><span class=\"st0\">\"]\"</span><br/>$ <span class=\"kw1\">gosub</span> comma_quibbling<br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> return_string<br/>$<br/>$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\", \"</span><span class=\"st0\">\"DEF\"</span><span class=\"st0\">\", \"</span><span class=\"st0\">\"G\"</span><span class=\"st0\">\", \"</span><span class=\"st0\">\"H\"</span><span class=\"st0\">\"]\"</span><br/>$ <span class=\"kw1\">gosub</span> comma_quibbling<br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> return_string<br/>$<br/>$ <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> comma_quibbling:</span><br/>$ list <span class=\"sy0\">=</span> list <span class=\"sy0\">-</span> <span class=\"st0\">\"[\"</span> <span class=\"sy0\">-</span> <span class=\"st0\">\"]\"</span><br/>$ return_string <span class=\"sy0\">=</span> <span class=\"st0\">\"{}\"</span><br/>$ <span class=\"kw1\">if</span> list <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">return</span><br/>$ return_string <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span> + <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\",\"</span>, list <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">-</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>$ <span class=\"kw1\">if</span> <span class=\"kw2\">f$locate</span><span class=\"br0\">(</span> <span class=\"st0\">\",\"</span>, list <span class=\"br0\">)</span> <span class=\"sy0\">.eq.</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> list <span class=\"br0\">)</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done2<br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> loop:</span><br/>$  word <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> i, <span class=\"st0\">\",\"</span>, list <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">-</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>$  <span class=\"kw1\">if</span> word <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\",\"</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done1<br/>$  return_string <span class=\"sy0\">=</span> return_string <span class=\"sy0\">-</span> <span class=\"st0\">\"^\"</span> + <span class=\"st0\">\"^,\"</span> + word<br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">goto</span> loop<br/>$ done1:<br/>$ return_string <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"^\"</span>, return_string <span class=\"br0\">)</span> + <span class=\"st0\">\" and\"</span> + <span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"^\"</span>, return_string <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"st0\">\",\"</span> <span class=\"br0\">)</span><br/>$ done2:<br/>$ return_string <span class=\"sy0\">=</span> return_string + <span class=\"st0\">\"}\"</span><br/>$ <span class=\"kw1\">return</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 15, "block": "<pre class=\"text highlighted_source\">comma-quibble lst:<br/>\t\"}\" )<br/>\tif lst:<br/>\t\tpop-from lst<br/>\t\tif lst:<br/>\t\t\t\" and \"<br/>\t\t\tpop-from lst<br/>\t\t\tfor item in lst:<br/>\t\t\t\titem \", \"<br/>\tconcat( \"{\"<br/>\u00a0<br/>!. comma-quibble []<br/>!. comma-quibble [ \"ABC\" ]<br/>!. comma-quibble [ \"ABC\" \"DEF\" ]<br/>!. comma-quibble [ \"ABC\" \"DEF\" \"G\" \"H\" ]</pre>"}, {"lang": "EchoLisp", "loc": 22, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'match<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>quibble words<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>match words<br/>         <span class=\"br0\">[</span> null <span class=\"st0\">\"{}\"</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span>  <span class=\"br0\">(</span>format <span class=\"st0\">\"{\u00a0%a }\"</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"{\u00a0%a and\u00a0%a }\"</span> a b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span><span class=\"br0\">(</span> a ... b c<span class=\"br0\">)</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"{\u00a0%a\u00a0%a and\u00a0%a }\"</span> <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>w a<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> w <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  b c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span><span class=\"kw1\">else</span> 'bad<span class=\"sy0\">-</span>input<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; output</span><br/>\u00a0<br/> <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">t</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln <span class=\"kw1\">t</span> '<span class=\"sy0\">----&gt;</span> <span class=\"br0\">(</span>quibble <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>null     <span class=\"sy0\">----&gt;</span>     <span class=\"st0\">\"{}\"</span>    <br/><span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span>     <span class=\"sy0\">----&gt;</span>     <span class=\"st0\">\"{ ABC }\"</span>    <br/><span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span>     <span class=\"sy0\">----&gt;</span>     <span class=\"st0\">\"{ ABC and DEF }\"</span>    <br/><span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span>     <span class=\"sy0\">----&gt;</span>     <span class=\"st0\">\"{ ABC, DEF, G and H }\"</span>    <br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 49, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\t\tmake<br/>\t\t\t<span class=\"co1\">-- Test of the feature comma_quibbling.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tl<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> l.<span class=\"me1\">make</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>comma_quibbling <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tl.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>comma_quibbling <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tl.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>comma_quibbling <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tl.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"st0\">\"G\"</span><span class=\"br0\">)</span><br/>\t\t\tl.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"st0\">\"H\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>comma_quibbling <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcomma_quibbling <span class=\"br0\">(</span>l<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\t<span class=\"co1\">-- Elements of 'l' seperated by a comma or an and where appropriate.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tl_not_void<span class=\"sy0\">:</span> l <span class=\"sy0\">/=</span> <span class=\"kw3\">Void</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">extend</span> <span class=\"br0\">(</span><span class=\"st0\">'{'</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">if</span> l.<span class=\"me1\">is_empty</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">elseif</span> l.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span>l <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span>l <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">2</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>l.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> l <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span> l <span class=\"br0\">[</span>l.<span class=\"me1\">count</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 16, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def generate( list ), do: \"{#{ generate_content(list) }}\"<br/>\u00a0<br/>  defp generate_content( [] ), do: \"\"<br/>  defp generate_content( [x] ), do: x<br/>  defp generate_content( [x1, x2] ), do: \"#{x1} and #{x2}\"<br/>  defp generate_content( xs ) do<br/>    [last, second_to_last | t] = Enum.reverse( xs )<br/>    with_commas = for x &lt;- t, do: x &lt;&gt; \",\"<br/>    Enum.join(Enum.reverse([last, \"and\", second_to_last | with_commas]), \" \")<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([[], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]], fn list -&gt;<br/>  IO.inspect RC.generate(list)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-module( comma_quibbling ).<br/>\u00a0<br/>-export( [task/0] ).<br/>\u00a0<br/>task() -&gt; [generate(X) || X &lt;- [[], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]]].<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>generate( List ) -&gt; \"{\" ++ generate_content(List) ++ \"}\".<br/>\u00a0<br/>generate_content( [] ) -&gt; \"\";<br/>generate_content( [X] ) -&gt; X;<br/>generate_content( [X1, X2] ) -&gt; string:join( [X1, \"and\", X2], \" \" );<br/>generate_content( Xs ) -&gt;<br/>\t[Last, Second_to_last | T] = lists:reverse( Xs ),<br/>\tWith_commas = [X ++ \",\" || X &lt;- T],<br/>\tstring:join(lists:reverse([Last, \"and\", Second_to_last | With_commas]), \" \").<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> quibble list <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> inner <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>        | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"\"</span><br/>        | <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> x<br/>        | <span class=\"br0\">[</span>x<span class=\"sy0\">;</span>y<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> sprintf <span class=\"st0\">\"%s and\u00a0%s\"</span> x y<br/>        | h::t <span class=\"sy0\">-&gt;</span> sprintf <span class=\"st0\">\"%s,\u00a0%s\"</span> h <span class=\"br0\">(</span>inner t<span class=\"br0\">)</span><br/>    sprintf <span class=\"st0\">\"{%s}\"</span> <span class=\"br0\">(</span>inner list<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// test interactively</span><br/>quibble <span class=\"br0\">[</span><span class=\"br0\">]</span>            <br/>quibble <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><br/>quibble <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><br/>quibble <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"G\"</span><span class=\"br0\">]</span><br/>quibble <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "Factor", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: arrays combinators io kernel qw sequences\u00a0;<br/>IN: rosetta-code.comma-quibble<br/>\u00a0<br/>: wrap ( str -- {str} ) \"{\" prepend \"}\" append\u00a0;<br/>: quibble-pair ( seq -- str ) \" and \" join wrap\u00a0;<br/>: quibble-list ( seq -- str )<br/>    [ but-last ] [ last ] bi [ \", \" join ] dip 2array<br/>    quibble-pair\u00a0;<br/>: comma-quibble ( seq -- ) dup length<br/>{<br/>  { 0 [ drop \"{}\" ] }<br/>  { 1 [ first wrap ] }<br/>  { 2 [ quibble-pair ] }<br/>  [ drop quibble-list ]<br/>} case print\u00a0;<br/>\u00a0<br/>{ } comma-quibble<br/>qw{ ABC } comma-quibble<br/>qw{ ABC DEF } comma-quibble<br/>qw{ ABC DEF G H } comma-quibble<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 94, "block": "<pre class=\"text highlighted_source\">\\ string primitives operate on addresses passed on the stack<br/>: C+!      ( n addr -- )        dup &gt;R  <a class=\"__cf_email__\" data-cfemail=\"d19291\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> +  R&gt; C!\u00a0;                     \\ increment a byte at addr by n<br/>: APPEND   ( addr1 n addr2 -- ) 2DUP 2&gt;R  COUNT +  SWAP MOVE 2R&gt; C+!\u00a0;    \\ append u bytes at addr1 to addr2<br/>: PLACE    ( addr1 n addr2 -- )  2DUP 2&gt;R  1+  SWAP  MOVE  2R&gt; C!\u00a0;       \\ copy n bytes at addr to addr2<br/>: ,'       ( -- )               [CHAR] ' WORD  <a class=\"__cf_email__\" data-cfemail=\"cead8e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1+ ALLOT ALIGN\u00a0;        \\ Parse input stream until ' and write into next<br/>                                                                          \\ available memory<br/>\u00a0<br/>\\ use ,' to create some counted string literals with mnemonic names<br/>create '\"{}\"' ( -- addr) ,' \"{}\"'                                         \\ counted strings return the address of the 1st byte<br/>create '\"{'   ( -- addr) ,' \"{'<br/>create '}\"'   ( -- addr) ,' }\"'<br/>create ','    ( -- addr) ,' , '<br/>create 'and'  ( -- addr) ,'  and '<br/>create \"]     ( -- addr) ,' \"]'<br/>\u00a0<br/>create null$ ( -- addr)  0 ,<br/>\u00a0<br/>HEX<br/>\\ build a string stack/array to hold input strings<br/>100 constant ss-width                                                     \\ string stack width<br/>variable $DEPTH                                                           \\ the string stack pointer<br/>\u00a0<br/>create $stack ( -- addr) 20 ss-width * allot<br/>\u00a0<br/>DECIMAL<br/>: new:   ( -- )    1 $DEPTH +!\u00a0;                                          \\ incr. string stack pointer<br/>: ]stk$  ( ndx -- addr) ss-width * $stack +\u00a0;                             \\ calc string stack element address from ndx<br/>: TOP$   ( -- addr) $DEPTH @ ]stk$\u00a0;                                      \\ returns address of the top string on string stack<br/>: collapse ( -- )     $DEPTH off\u00a0;                                        \\ reset string stack pointer<br/>\u00a0<br/>\\ used primitives to build counted string functions<br/>: move$    ( $1 $2 -- ) &gt;r COUNT R&gt; PLACE\u00a0;                               \\ copy $1 to $2<br/>: push$    ( $ -- )     new: top$ move$\u00a0;                                 \\ push $ onto string stack<br/>: +$       ( $1 $2 --  top$ ) swap push$ count TOP$ APPEND top$\u00a0;         \\ concatentate $2 to $1, Return result in TOP$<br/>: LEN      ( $1 -- length)  <a class=\"__cf_email__\" data-cfemail=\"355675\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;                                          \\ char fetch the first byte returns the string length<br/>: compare$ ( $1 $2 -- -n:0:n )  count rot count compare\u00a0;                 \\ compare is an ANS Forth word. returns 0 if $1=$2<br/>: =$       ( $1 $2 -- flag )    compare$ 0=\u00a0;<br/>: [\"\"]     ( -- )  null$  push$\u00a0;                                         \\ put a null string on the string stack<br/>\u00a0<br/>: [\"                                                                      \\ collects input strings onto string stack<br/>           COLLAPSE<br/>           begin<br/>              bl word dup \"] =$ not                                       \\ parse input stream and terminate at \"]<br/>           while<br/>              push$<br/>           repeat<br/>           drop<br/>           $DEPTH @ 0= if [\"\"] then\u00a0;                                      \\ minimally leave a null string on the string stack<br/>\u00a0<br/>\u00a0<br/>: ]stk$+   ( dest$ n -- top$)  ]stk$  +$ \u00a0;                                \\ concatenate  n ]stk$ to DEST$<br/>\u00a0<br/>: writeln  ( $ -- )  cr count type collapse\u00a0;                              \\ print string on new line and collapse string stack<br/>\u00a0<br/>\\ write the solution with the new words<br/>: 1-input    ( -- )<br/>            1 ]stk$ LEN 0=                                                 \\ check for empty string length<br/>            if<br/>                 '\"{}\"' writeln                                            \\ return the null string output<br/>            else<br/>                 '\"{'  push$                                               \\ create a new string beginning with '{'<br/>                 TOP$  1 ]stk$+ '}\"' +$  writeln                           \\ concatenate the pieces for 1 input<br/>\u00a0<br/>            then \u00a0;<br/>\u00a0<br/>: 2-inputs ( -- )<br/>           '\"{'  push$<br/>           TOP$  1 ]stk$+  'and' +$   2 ]stk$+  '}\"' +$ writeln\u00a0;<br/>\u00a0<br/>: 3+inputs ( -- )<br/>           $DEPTH @ dup &gt;R                                                \\ save copy of the number of inputs on the return stack<br/>           '\"{'  push$<br/>           ( n) 1- 1                                                      \\ loop indices for 1 to 2nd last string<br/>           DO   TOP$  I ]stk$+  ',' +$   LOOP                             \\ create all but the last 2 strings in a loop with comma<br/>           ( -- top$) <a class=\"__cf_email__\" data-cfemail=\"451705\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1- ]stk$+  'and' +$                              \\ concatenate the 2nd last string to Top$ + 'and'<br/>           R&gt; ]stk$+  '}\"' +$ writeln                                     \\ use the copy of $DEPTH to get the final string index<br/>           2drop\u00a0;                                                        \\ clean the parameter stack<br/>\u00a0<br/>: quibble ( -- )<br/>           $DEPTH @<br/>           case<br/>             1 of  1-input    endof<br/>             2 of  2-inputs   endof<br/>                   3+inputs                                               \\ default case<br/>           endcase\u00a0;<br/>\u00a0<br/>\u00a0<br/>\\ interpret this test code after including the above code<br/>[\"\"] QUIBBLE<br/>[\" \"] QUIBBLE<br/>[\" ABC \"] QUIBBLE<br/>[\" ABC DEF \"] QUIBBLE<br/>[\" ABC DEF GHI BROWN FOX \"] QUIBBLE<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 66, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> QUIBBLE<span class=\"br0\">(</span>TEXT,OXFORDIAN<span class=\"br0\">)</span>\t<span class=\"co1\">!Punctuates a list with commas and stuff.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The text, delimited by spaces.</span><br/>       <span class=\"kw3\">LOGICAL</span> OXFORDIAN\t<span class=\"co1\">!Just so.</span><br/>       <span class=\"kw3\">INTEGER</span> IST<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>,LST<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Start and stop positions.</span><br/>       <span class=\"kw3\">INTEGER</span> N,L,I\t\t<span class=\"co1\">!Counters.</span><br/>       <span class=\"kw3\">INTEGER</span> L1,L2\t\t<span class=\"co1\">!Fingers for the scan.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG\t\t<span class=\"co1\">!Output unit.</span><br/>       <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span>MSG\t<span class=\"co1\">!Share.</span><br/><span class=\"co1\">Chop the text into words.</span><br/>        N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No words found.</span><br/>        L <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Multiple trailing spaces - no worries.</span><br/>        L2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Syncopation: where the previous chomp ended.</span><br/>   <span class=\"nu0\">10</span>   L1 <span class=\"sy0\">=</span> L2\t\t<span class=\"co1\">!Thus, where a fresh scan should follow.</span><br/>   <span class=\"nu0\">11</span>   L1 <span class=\"sy0\">=</span> L1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Advance one.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L1.<span class=\"me1\">GT</span>.<span class=\"me1\">L</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span>\t\t<span class=\"co1\">!Finished yet?</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L1<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">LE</span>.</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">11</span>\t<span class=\"co1\">!No. Skip leading spaces.</span><br/>        L2 <span class=\"sy0\">=</span> L1\t\t\t<span class=\"co1\">!Righto, L1 is the first non-blank.</span><br/>   <span class=\"nu0\">12</span>   L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Scan through the non-blanks.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2.<span class=\"me1\">GT</span>.<span class=\"me1\">L</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">13</span>\t<span class=\"co1\">!Is it safe to look?</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>L2<span class=\"sy0\">:</span>L2<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">GT</span>.</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">12</span>\t<span class=\"co1\">!Yes. Speed through non-blanks.</span><br/>   <span class=\"nu0\">13</span>   N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Righto, a word is found in TEXT(L1:L2 - 1)</span><br/>        IST<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">=</span> L1\t\t<span class=\"co1\">!So, recall its first character.</span><br/>        LST<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">=</span> L2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And its last.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2.<span class=\"me1\">LT</span>.<span class=\"me1\">L</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Perhaps more text follows.</span><br/><span class=\"co1\">Comma time...</span><br/>   <span class=\"nu0\">20</span>   WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"st0\">\"{\"</span>\t<span class=\"co1\">!Start the output.</span><br/>   <span class=\"nu0\">21</span>   FORMAT <span class=\"br0\">(</span>A,$<span class=\"br0\">)</span>\t\t<span class=\"co1\">!The $, obviously, specifies that the line is not finished.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t\t<span class=\"co1\">!Step through the texts, there possibly being none.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!If there has been a predecessor, supply separators.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LT</span>.<span class=\"me1\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t\t<span class=\"co1\">!Up to the last two, it's easy.</span><br/>              WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"st0\">\", \"</span>\t\t\t<span class=\"co1\">!Always just a comma.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>OXFORDIAN<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!But after the penultimate item, what?</span><br/>              WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"st0\">\", and \"</span>\t\t\t<span class=\"co1\">!Supply the comma omitted above: a double-power separator.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!One fewer comma, with possible ambiguity arising.</span><br/>              WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span>\t\t\t<span class=\"co1\">!A single separator.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!So much for the style.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Enough with the separation.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span> TEXT<span class=\"br0\">(</span>IST<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">:</span>LST<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The text at last!</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next text.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"st0\">\"('}')\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!End the line, marking the end of the text.</span><br/>      <span class=\"kw1\">END</span>\t\t<span class=\"co1\">!That was fun.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> ENCOMMA\t<span class=\"co1\">!Punctuate a list with commas.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">666</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Holds the text. Easily long enough.</span><br/>      <span class=\"kw3\">INTEGER</span> KBD,MSG,INF\t<span class=\"co1\">!Now for some messing.</span><br/>      <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span>MSG,KBD\t<span class=\"co1\">!Pass the word.</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t<span class=\"co1\">!Standard output.</span><br/>      INF <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Suitable for a disc file.</span><br/>      OPEN <span class=\"br0\">(</span>INF,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"List.txt\"</span>,<span class=\"kw1\">ACTION</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"READ\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Attach one.</span><br/>\u00a0<br/>   <span class=\"nu0\">10</span> WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"st0\">\"To insert commas into lists...\"</span>\t<span class=\"co1\">!Announce.</span><br/>   <span class=\"nu0\">11</span> FORMAT <span class=\"br0\">(</span>A<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Just the text.</span><br/>   <span class=\"nu0\">12</span> READ <span class=\"br0\">(</span>INF,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Grab the text, with trailing spaces to fill out TEXT.</span><br/>      <span class=\"kw1\">CALL</span> QUIBBLE<span class=\"br0\">(</span>TEXT,<span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!One way to quibble.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">12</span>\t\t\t\t<span class=\"co1\">!Try for another.</span><br/>\u00a0<br/>   <span class=\"nu0\">20</span> REWIND <span class=\"br0\">(</span>INF<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Back to the start of the file.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">11</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Set off a bit.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"st0\">\"Oxford style...\"</span>\t<span class=\"co1\">!Announce the proper style.</span><br/>   <span class=\"nu0\">21</span> READ <span class=\"br0\">(</span>INF,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Grab the text.</span><br/>      <span class=\"kw1\">CALL</span> QUIBBLE<span class=\"br0\">(</span>TEXT,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!The other way to quibble.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">21</span>\t\t\t\t<span class=\"co1\">!Have another try.</span><br/>\u00a0<br/><span class=\"co1\">Closedown</span><br/>   <span class=\"nu0\">30</span> <span class=\"kw1\">END</span>\t<span class=\"co1\">!All files are closed by exiting.</span></pre>"}, {"lang": "FreeBASIC", "loc": 60, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Split<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, sep <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, result<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, count = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> temp <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> position<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  position<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = sep<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> <br/>        count += <span class=\"nu0\">1</span><br/>        position<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = i + <span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>  position<span class=\"br0\">(</span>count + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count + <span class=\"nu0\">1</span>    <br/>    result<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s, position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, position<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> CommaQuibble<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> result<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> words<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>  s = <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>s, Any <span class=\"st0\">\"[]\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>  <span class=\"co1\">' Now remove internal quotes</span><br/>  Split s, <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span>, words<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  s = <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>     s &amp;= words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">' Now split 's' using the comma as separator</span><br/>  <span class=\"kw1\">Erase</span> words  <br/>  Split s, <span class=\"st0\">\",\"</span>, words<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' And re-assemble the string in the desired format</span><br/>  result = <span class=\"st0\">\"{\"</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">If</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>      result &amp;= words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ElseIf</span> i = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <br/>      result &amp;= <span class=\"st0\">\" and \"</span> &amp; words<span class=\"br0\">(</span>i<span class=\"br0\">)</span>       <br/>    <span class=\"kw1\">Else</span><br/>      result &amp;= <span class=\"st0\">\", \"</span> + words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    EndIf   <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> result &amp; <span class=\"st0\">\"}\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' As 3 of the strings contain embedded quotes these need to be doubled in FB</span><br/><span class=\"kw1\">Print</span> CommaQuibble<span class=\"br0\">(</span><span class=\"st0\">\"[]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> CommaQuibble<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> CommaQuibble<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\",\"</span><span class=\"st0\">\"DEF\"</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> CommaQuibble<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"st0\">\"ABC\"</span><span class=\"st0\">\",\"</span><span class=\"st0\">\"DEF\"</span><span class=\"st0\">\",\"</span><span class=\"st0\">\"G\"</span><span class=\"st0\">\",\"</span><span class=\"st0\">\"H\"</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit the program\"</span><br/><span class=\"kw1\">Sleep</span><br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 15, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sInput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"ABC DEF\"</span>, <span class=\"st0\">\"ABC DEF G H\"</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sInput<br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sTemp <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = \"</span>;<br/>  sTemp <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span>sTemp, <span class=\"st0\">\" \"</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/rinstr\"><span class=\"kw2\">RInStr</span></a><span class=\"br0\">(</span>sTemp, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>    sTemp <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sTemp, <span class=\"nu0\">1</span>, <a href=\"http://gambasdoc.org/help/lang/rinstr\"><span class=\"kw2\">RInStr</span></a><span class=\"br0\">(</span>sTemp, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sTemp, <a href=\"http://gambasdoc.org/help/lang/rinstr\"><span class=\"kw2\">RInStr</span></a><span class=\"br0\">(</span>sTemp, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>  sTemp <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> sTemp <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sTemp<br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> q<span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"{}\"</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span> <span class=\"sy3\">+</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span> <span class=\"sy3\">+</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">\" and \"</span> <span class=\"sy3\">+</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span> <span class=\"sy3\">+</span><br/>            strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>s<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\" and \"</span> <span class=\"sy3\">+</span><br/>            s<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"}\"</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>q<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{}))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>q<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy1\">}))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>q<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy1\">}))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>q<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> commaQuibbling <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"{${it.join(', ')}}\"</span>\u00a0: <span class=\"st0\">\"{${it[0..-2].join(', ')} and ${it[-1]}}\"</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\">quibble ws <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">++</span> quibbles ws <span class=\"sy0\">++</span> <span class=\"st0\">\"}\"</span><br/>  <span class=\"kw1\">where</span> quibbles <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        quibbles <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>        quibbles <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">++</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">++</span> b<br/>        quibbles <span class=\"br0\">(</span>a:bs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">++</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">++</span> quibbles bs<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> quibble<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span> <br/>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> <span class=\"br0\">[</span><span class=\"st0\">\"One two three four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Me myself I\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jack Jill\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Loner\"</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> quibble<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    join <span class=\"sy0\">:=</span> s <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> s <span class=\"sy0\">:=</span> <span class=\"kw4\">pull</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">||</span>join<span class=\"sy0\">||</span>s <span class=\"kw1\">do</span> join <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>join <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" and \"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\", \"</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span><span class=\"sy0\">||</span>s<span class=\"sy0\">||</span><span class=\"st0\">\"}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">quibLast2=: <span class=\"st_h\">' and '</span> joinstring <span class=\"sy0\">(</span><span class=\"nu0\">2</span> <a class=\"__cf_email__\" data-cfemail=\"a78ae7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;. #<span class=\"sy0\">)</span> {. ]<br/>withoutLast2=: <span class=\"sy0\">(</span>[: # <span class=\"nu0\">_2</span>&amp;}.<span class=\"sy0\">)</span> {. ]<br/>quibble=: <span class=\"st_h\">'{'</span>, <span class=\"st_h\">'}'</span> ,~ <span class=\"st_h\">', '</span> joinstring withoutLast2 , &lt;@quibLast2</pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Quibbler <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> quibble<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> words<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> qText <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> wIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> wIndex <span class=\"sy0\">&lt;</span> words.<span class=\"me1\">length</span><span class=\"sy0\">;</span> wIndex<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tqText <span class=\"sy0\">+=</span> words<span class=\"br0\">[</span>wIndex<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>wIndex <span class=\"sy0\">==</span> words.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <br/>\t\t\t\t\t\t  wIndex <span class=\"sy0\">==</span> words.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">:</span><br/>\t\t\t\t\t\t  <span class=\"st0\">\", \"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tqText <span class=\"sy0\">+=</span> <span class=\"st0\">\"}\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> qText<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span>, <span class=\"st0\">\"G\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"DEF\"</span>, <span class=\"st0\">\"G\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> quibble<span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span> <br/>    words.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> words.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>   <span class=\"br0\">(</span>words.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>   <span class=\"br0\">(</span>words<span class=\"br0\">[</span>words.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>  <span class=\"st0\">\"}\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><br/>  <span class=\"kw1\">function</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\">def quibble:<br/>  if length == 0 then \"\" <br/>  elif length == 1 then .[0]<br/>  else (.[0:length-1] | join(\", \")) + \" and \" + .[length-1]<br/>  end<br/>  | \"{\" + . + \"}\";</pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">function quibble(arr::Array)<br/>    if isempty(arr) rst = \"\" else rst = \"$(arr[end])\" end<br/>    if length(arr) &gt; 1 rst = join(arr[1:end-1], \", \") * \" and \" * rst end<br/>    return \"{\" * rst * \"}\"<br/>end<br/>\u00a0<br/>@show quibble([])<br/>@show quibble([\"ABC\"])<br/>@show quibble([\"ABC\", \"DEF\"])<br/>@show quibble([\"ABC\", \"DEF\", \"G\", \"H\"])</pre>"}, {"lang": "Kotlin", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun commaQuibble<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"st0\">'['</span>, <span class=\"st0\">']'</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\\"</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> t.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until words.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>when <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"nu0\">0</span>                -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span><br/>            words.<span class=\"me1\">lastIndex</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\" and \"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>             -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\", \"</span>    <br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputs <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\"[]\"</span><span class=\"st0\">\"\"</span>,<br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\"[\"</span>ABC<span class=\"st0\">\"]\"</span><span class=\"st0\">\"\"</span>,<br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\"[\"</span>ABC<span class=\"st0\">\", \"</span>DEF<span class=\"st0\">\"]\"</span><span class=\"st0\">\"\"</span>,<br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\"[\"</span>ABC<span class=\"st0\">\", \"</span>DEF<span class=\"st0\">\", \"</span>G<span class=\"st0\">\", \"</span>H<span class=\"st0\">\"]\"</span><span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>input in inputs<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${input.padEnd(24)}  -&gt;  ${commaQuibble(input)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 23, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>local(collection =<br/>\tarray(<br/>\t\tarray,<br/>\t\tarray(\"ABC\"),<br/>\t\tarray(\"ABC\", \"DEF\"),<br/>\t\tarray(\"ABC\", \"DEF\", \"G\", \"H\")<br/>\t)<br/>)<br/>\u00a0<br/>with words in #collection do {<br/>\tif(#words -&gt; size &gt; 1) =&gt; {<br/>\t\tlocal(last = #words -&gt; last)<br/>\t\t#words -&gt; removelast<br/>\t\tstdoutnl('{' + #words -&gt; join(', ') + ' and ' + #last'}')<br/>\telse(#words -&gt; size == 1)<br/>\t\tstdoutnl('{' + #words -&gt; first + '}')<br/>\telse<br/>\t\tstdoutnl('{}')<br/>\t}<br/>\u00a0<br/>}</pre>"}, {"lang": "Liberty BASIC", "loc": 46, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">do</span><br/>        <span class=\"kw1\">read</span> in$<br/>        <span class=\"kw1\">if</span> in$ <span class=\"sy0\">=</span><span class=\"st0\">\"END\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">wait</span><br/>        w <span class=\"sy0\">=</span>wordCount<span class=\"br0\">(</span> in$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> w<br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><br/>                o$ <span class=\"sy0\">=</span><span class=\"st0\">\"{}\"</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><br/>                o$ <span class=\"sy0\">=</span><span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span>in$ <span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><br/>                o$ <span class=\"sy0\">=</span><span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><br/>            <span class=\"kw1\">case</span> <span class=\"kw1\">else</span><br/>                o$ <span class=\"sy0\">=</span><span class=\"st0\">\"{\"</span><br/>                o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> w <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>                    o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>                <span class=\"kw1\">next</span> k<br/>                o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span><span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> w<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\"}\"</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>        <span class=\"kw1\">if</span> w <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"'\"</span>; in$; <span class=\"st0\">\"'\"</span>; <span class=\"st0\">\" held \"</span>; w; <span class=\"st0\">\" word. \"</span>; <span class=\"kw2\">tab</span><span class=\"br0\">(</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span>; o$<br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"'\"</span>; in$; <span class=\"st0\">\"'\"</span>; <span class=\"st0\">\" held \"</span>; w; <span class=\"st0\">\" words. \"</span>; <span class=\"kw2\">tab</span><span class=\"br0\">(</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span>; o$<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> wordCount<span class=\"br0\">(</span> IN$<span class=\"br0\">)</span><br/>        wordCount <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> IN$<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> IN$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\" \"</span> <span class=\"kw1\">then</span> wordCount <span class=\"sy0\">=</span>wordCount <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">next</span> i<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"\"</span>                 <span class=\"co1\">'No input words.</span><br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"ABC\"</span>              <span class=\"co1\">'One input word.</span><br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"ABC DEF\"</span>          <span class=\"co1\">'Two words.</span><br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"ABC DEF G\"</span>        <span class=\"co1\">'Three words.</span><br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"ABC DEF G H\"</span>      <span class=\"co1\">'Four words.</span><br/>\u00a0<br/>    <span class=\"kw1\">data</span> <span class=\"st0\">\"END\"</span>              <span class=\"co1\">'Sentinel for EOD.</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 26, "block": "<pre class=\"text highlighted_source\">to join\u00a0:delimiter\u00a0:list [:result []]<br/>  output cond [<br/>    [ [empty?\u00a0:list]  \u00a0:result ]<br/>    [ [empty?\u00a0:result] (join\u00a0:delimiter butfirst\u00a0:list first\u00a0:list) ]<br/>    [ else             (join\u00a0:delimiter butfirst\u00a0:list <br/>                                        (word\u00a0:result\u00a0:delimiter first\u00a0:list)) ]<br/>  ]<br/>end<br/>\u00a0<br/>to quibble\u00a0:list<br/>  local \"length<br/>  make \"length count\u00a0:list<br/>  make \"text (<br/>    ifelse [:length &lt;= 2] [<br/>      (join \"\\ and\\ \u00a0:list)<br/>    ] [ <br/>      (join \"\\ and\\  (sentence join \",\\  butlast\u00a0:list last\u00a0:list))<br/>    ])<br/>  output ifelse [empty?\u00a0:text] \"\\{\\} [(word \"\\{\u00a0:text \"\\})]<br/>end<br/>\u00a0<br/>foreach [ [] [ABC] [ABC DEF] [ABC DEF G H] ] [<br/>  print quibble\u00a0?<br/>]<br/>\u00a0<br/>bye</pre>"}, {"lang": "Lua", "loc": 22, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> quibble <span class=\"br0\">(</span>strTab<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> outString<span class=\"sy0\">,</span> join <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span><br/>    <span class=\"kw1\">for</span> strNum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>strTab <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> strNum <span class=\"sy0\">==</span> <span class=\"sy0\">#</span>strTab <span class=\"kw1\">then</span><br/>            join <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">elseif</span> strNum <span class=\"sy0\">==</span> <span class=\"sy0\">#</span>strTab <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            join <span class=\"sy0\">=</span> <span class=\"st0\">\" and \"</span> <br/>        <span class=\"kw1\">else</span><br/>            join <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span><br/>        <span class=\"kw1\">end</span><br/>        outString <span class=\"sy0\">=</span> outString <span class=\"sy0\">..</span> strTab<span class=\"br0\">[</span>strNum<span class=\"br0\">]</span> <span class=\"sy0\">..</span> join<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> outString <span class=\"sy0\">..</span> <span class=\"st0\">'}'</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> input <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>quibble<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      function f$ {<br/>            what$=mid$(trim$(letter$),2)<br/>            what$=Left$(what$, len(what$)-1)<br/>            flush ' erase any argument from stack<br/>            Data param$(what$)<br/>            m=stack.size<br/>            document resp$=\"{\" <br/>             if m&gt;2 then {<br/>                  shift m-1, 2    ' get last two as first two<br/>                  push letter$+\" and \"+letter$<br/>                  m--   ' one less<br/>                  shiftback m   ' move to last position<br/>            }<br/>            while not empty {<br/>                   resp$=letter$+if$(not empty-&gt;\", \", \"\")<br/>             }<br/>            =resp$+\"}\"   <br/>\u00a0<br/>      }<br/>      \\\\ we use\u00a0? for Print<br/>     \u00a0? f$({[]})<br/>     \u00a0? f$({[\"ABC\"]})<br/>     \u00a0? f$({[\"ABC\", \"DEF\"]})<br/>     \u00a0? f$({[\"ABC\",\"DEF\", \"G\", \"H\"]})<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 12, "block": "<pre class=\"text highlighted_source\">Quibble\u00a0:= proc( los )<br/>  uses  StringTools;<br/>  Fence( proc()<br/>        if los = [] then<br/>          \"\"<br/>        elif numelems( los ) = 1 then<br/>          los[ 1 ]<br/>        else<br/>          cat( Join( los[ 1 .. -2 ], \", \" ), \" and \", los[ -1 ] )<br/>        end if<br/>  end(), \"{\", \"}\" )<br/>end proc:</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">quibble[words___]\u00a0:=<br/>    <a class=\"__cf_email__\" data-cfemail=\"03576c5077716a6d6443\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"540720263d3a331e3b3d3a14\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<br/>        Replace[Riffle[{words}, \", \"],<br/>            {most__, \", \", last_} -&gt; {most, \" and \", last}]}</pre>"}, {"lang": "MAXScript", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn separate words: =<br/>(<br/>\tif words == unsupplied or words == undefined or classof words\u00a0!= array then return \"{}\"<br/>\t\telse<br/>\t\t(<br/>\t\t\tlocal toReturn = \"{\"<br/>\t\t\tlocal pos = 1<br/>\t\t\twhile pos &lt;= words.count do<br/>\t\t\t(<br/>\t\t\t\tif pos == 1 then (append toReturn words[pos]; pos+=1)<br/>\t\t\t\telse<br/>\t\t\t\t(\t<br/>\t\t\t\t\tif pos &lt;= words.count-1 then (append toReturn (\", \"+words[pos]); pos+=1)<br/>\t\t\t\t\t\telse<br/>\t\t\t\t\t\t(<br/>\t\t\t\t\t\t\tappend toReturn (\" and \" + words[pos])<br/>\t\t\t\t\t\t\tpos +=1<br/>\t\t\t\t\t\t)<br/>\t\t\t\t)<br/>\t\t\t)<br/>\t\t\treturn (toReturn+\"}\")<br/>\t\t)<br/>)<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 26, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method quibble<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg <span class=\"st0\">'['</span> lst <span class=\"st0\">']'</span><br/>  lst = lst.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'\"'</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  lc = lst.<span class=\"kw6\">lastpos</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> lc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>    lst = lst.<span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">'and'</span>, lc<span class=\"br0\">)</span>.<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, lc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">'{'</span>lst<span class=\"st0\">'}'</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  lists = <span class=\"br0\">[</span><span class=\"st0\">'[]'</span>, -                     <span class=\"co1\">-- {}</span><br/>           <span class=\"st0\">'[\"ABC\"]'</span>, -                <span class=\"co1\">-- {ABC}</span><br/>           <span class=\"st0\">'[\"ABC\", \"DEF\"]'</span>, -         <span class=\"co1\">-- {ABC and DEF}</span><br/>           <span class=\"st0\">'[\"ABC\", \"DEF\", \"G\", \"H\"]'</span><span class=\"br0\">]</span> <span class=\"co1\">-- {ABC, DEF, G and H}</span><br/>  <span class=\"kw1\">loop</span> lst over lists<br/>    <span class=\"kw1\">say</span> lst.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"st0\">':'</span> quibble<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> lst<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">proc commaQuibble(s: openArray[string]): string =<br/>  result = \"\"<br/>  for i, c in s:<br/>    if i &gt; 0: result.add (if i &lt; s.high: \", \" else: \" and \")<br/>    result.add c<br/>  result = \"{\" &amp; result &amp; \"}\"<br/>\u00a0<br/>var s = @[@[], @[\"ABC\"], @[\"ABC\", \"DEF\"], @[\"ABC\", \"DEF\", \"G\", \"H\"]]<br/>for i in s:<br/>  echo commaQuibble(i)</pre>"}, {"lang": "Oberon-2", "loc": 47, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CommaQuibbling;<br/><span class=\"kw1\">IMPORT</span> <br/>  NPCT<span class=\"sy0\">:</span>Args<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">256</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Do<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    aux<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>params<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    params <span class=\"sy0\">:=</span> Args.<span class=\"me1\">Number</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">CASE</span> params <span class=\"kw1\">OF</span><br/>       <span class=\"nu0\">0</span><span class=\"sy0\">:</span> <br/>        <span class=\"kw3\">COPY</span><span class=\"br0\">(</span><span class=\"st0\">\"{}\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>      |<span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>        Args.<span class=\"me1\">At</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>aux<span class=\"br0\">)</span>;<br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span>aux<span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span>; <br/>      <span class=\"kw1\">ELSE</span><br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> params <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>          Args.<span class=\"me1\">At</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>aux<span class=\"br0\">)</span>;<br/>          Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span>aux<span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>          <span class=\"kw1\">IF</span> i <span class=\"sy0\">#</span> params <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <br/>            Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>          <span class=\"kw1\">ELSE</span> <br/>            Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" and \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <br/>          <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span>;<br/>        Args.<span class=\"me1\">At</span><span class=\"br0\">(</span>params<span class=\"sy0\">,</span>aux<span class=\"br0\">)</span>;<br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span>aux<span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>        Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Do<span class=\"br0\">(</span>str<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CommaQuibbling.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> quibble <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"sy0\">|</span> a <span class=\"sy0\">::</span> b <span class=\"sy0\">::</span> c <span class=\"sy0\">::</span> d <span class=\"sy0\">::</span> rest <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">^</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">^</span> aux <span class=\"br0\">(</span>b <span class=\"sy0\">::</span> c <span class=\"sy0\">::</span> d <span class=\"sy0\">::</span> rest<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"sy0\">;</span> b<span class=\"sy0\">;</span> c<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> sprintf <span class=\"st0\">\"%s,\u00a0%s and\u00a0%s}\"</span> a b c<br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"sy0\">;</span> b<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> sprintf <span class=\"st0\">\"%s and\u00a0%s}\"</span> a b<br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> sprintf <span class=\"st0\">\"%s}\"</span> a<br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"}\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"st0\">\"{\"</span> <span class=\"sy0\">^</span> aux <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> test <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>quibble <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: quibbing(l) -- string<br/>| i s |<br/>   StringBuffer new \"{\" &lt;&lt;<br/>   l size dup 1- -&gt;s loop: i [ <br/>      l at(i) &lt;&lt;<br/>      i s &lt; ifTrue: [ \", \" &lt;&lt; continue ]<br/>      i s == ifTrue: [ \" and \" &lt;&lt; ]<br/>      ]<br/>   \"}\" &lt;&lt; dup freeze\u00a0; </pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"parigp highlighted_source\">comma<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"st0\">\"{}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  my<span class=\"br0\">(</span>s<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>s<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">\" and \"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>comma<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>comma<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>comma<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>comma<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 64, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> CommaQuibbling<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span> Classes<span class=\"sy1\">,</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> OuterBracket<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"st0\">'['</span><span class=\"sy1\">,</span><span class=\"st0\">']'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{ TCommaQuibble }</span><br/>\u00a0<br/>  TCommaQuibble <span class=\"sy3\">=</span> class<span class=\"br0\">(</span>TStringList<span class=\"br0\">)</span><br/>  <span class=\"kw1\">private</span><br/>    <span class=\"kw1\">function</span> GetCommaquibble<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> SetCommaQuibble<span class=\"br0\">(</span>AValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">property</span> CommaQuibble<span class=\"sy1\">:</span> <span class=\"kw4\">string</span> <span class=\"kw3\">read</span> GetCommaquibble <span class=\"kw3\">write</span> SetCommaQuibble<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TCommaQuibble }</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TCommaQuibble<span class=\"sy1\">.</span><span class=\"me1\">SetCommaQuibble</span><span class=\"br0\">(</span>AValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  AValue<span class=\"sy1\">:</span><span class=\"sy3\">=</span>ExtractWord<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>AValue<span class=\"sy1\">,</span>OuterBracket<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  commatext<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Avalue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TCommaQuibble<span class=\"sy1\">.</span><span class=\"me1\">GetCommaquibble</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> x<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>    Del<span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  Del<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">', '</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> x<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Count<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    result<span class=\"sy3\">+=</span>Strings<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> x<span class=\"sy3\">=</span>Count<span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> Del<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">' and '</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> x<span class=\"sy3\">=</span>count<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Del<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    result<span class=\"sy3\">+=</span>del<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">'{'</span><span class=\"sy3\">+</span>result<span class=\"sy3\">+</span><span class=\"st0\">'}'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> TestData<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><span class=\"sy3\">=</span><span class=\"br0\">(</span> <span class=\"st0\">'[]'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'[\"ABC\"]'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'[\"ABC\", \"DEF\"]'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'[\"ABC\", \"DEF\", \"G\", \"H\"]'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">''</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'\"ABC\"'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'\"ABC\", \"DEF\"'</span><span class=\"sy1\">,</span><br/>                                         <span class=\"st0\">'\"ABC\", \"DEF\", \"G\", \"H\"'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> Quibble<span class=\"sy1\">:</span> TCommaQuibble<span class=\"sy1\">;</span><br/>    TestString<span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Quibble<span class=\"sy1\">:</span><span class=\"sy3\">=</span>TCommaQuibble<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> TestString <span class=\"kw1\">in</span> TestData <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    Quibble<span class=\"sy1\">.</span><span class=\"me1\">CommaQuibble</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>TestString<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Quibble<span class=\"sy1\">.</span><span class=\"me1\">CommaQuibble</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> comma_quibbling<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"{$_}\"</span> <span class=\"kw1\">for</span><br/>        <span class=\"co5\">@_</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"@_\"</span> <span class=\"sy0\">:</span><br/>        <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"co5\">@_</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st_h\">' and '</span> <span class=\"sy0\">.</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> comma_quibbling<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>ABC<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>ABC DEF<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>ABC DEF G H<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> comma<span class=\"sy0\">-</span>quibbling<span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">&lt;</span><span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;.</span><span class=\"kw3\">join</span><span class=\"sy0\">:</span> <span class=\"re0\">@A</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"re0\">@A</span> <span class=\"sy0\">!!</span> <span class=\"st0\">\"@A[0..*-2].join(', ') and @A[*-1]\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> comma<span class=\"sy0\">-</span>quibbling<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>ABC<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>ABC DEF<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>ABC DEF G H<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">function quibble(sequence words)<br/>    if length(words)&gt;=2 then<br/>        words[-2..-1] = {words[-2]&amp;\" and \"&amp;words[-1]}<br/>    end if<br/>    return \"{\"&amp;join(words,\", \")&amp;\"}\"<br/>end function<br/>\u00a0<br/>constant tests = {{},<br/>                  {\"ABC\"},<br/>                  {\"ABC\",\"DEF\"},<br/>                  {\"ABC\",\"DEF\",\"G\",\"H\"}}<br/>\u00a0<br/>for i=1 to length(tests) do<br/>   \u00a0?quibble(tests[i])<br/>end for</pre>"}, {"lang": "PHP", "loc": 29, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"kw2\">function</span> quibble<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"re0\">$words</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$words</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'{}'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"kw1\">elseif</span><span class=\"br0\">(</span><span class=\"re0\">$words</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'{'</span><span class=\"sy0\">.</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"st_h\">'}'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"kw1\">elseif</span><span class=\"br0\">(</span><span class=\"re0\">$words</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'{'</span><span class=\"sy0\">.</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"st_h\">' and '</span><span class=\"sy0\">.</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"st_h\">'}'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'{'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span>  <a href=\"http://www.php.net/array_splice\"><span class=\"kw3\">array_splice</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"st_h\">' and '</span><span class=\"sy0\">.</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"st_h\">'}'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re0\">$tests</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span> <br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$tests</span> <span class=\"kw1\">as</span> <span class=\"re0\">$test</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> quibble<span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(for L '([] [\"ABC\"] [\"ABC\", \"DEF\"] [\"ABC\", \"DEF\", \"G\", \"H\"])<br/>   (let H (head -1 L)<br/>      (prinl<br/>         \"{\"<br/>         (glue \", \" H)<br/>         (and H \" and \")<br/>         (last L)<br/>         \"}\" ) ) )</pre>"}, {"lang": "PL/I", "loc": 46, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> quib<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 06.10.2013 Walter Pachl<br/> *********************************************************************/</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">Edit</span><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> quib<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 06.10.2013 Walter Pachl<br/> * 07.10.2013 -\"- change \"Oxford comma\" to and<br/> *********************************************************************/</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>quibbling<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC DEF'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC DEF G H'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/> quibbling<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> result   <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> word<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>wi<span class=\"sy0\">,</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> s<span class=\"sy0\">=</span><span class=\"st0\">''</span> <span class=\"kw1\">Then</span> result<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> wi<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>s<span class=\"sy0\">^=</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">if</span> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>         word<span class=\"br0\">(</span>wi<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/>         s<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>         word<span class=\"br0\">(</span>wi<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         s<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>     wn<span class=\"sy0\">=</span>wi<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     result<span class=\"sy0\">=</span>word<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> wn<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       result<span class=\"sy0\">=</span>result!!<span class=\"st0\">', '</span>!!word<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> wn<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>       result<span class=\"sy0\">=</span>result!!<span class=\"st0\">' and '</span>!!word<span class=\"br0\">(</span>wn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'{'</span>!!result!!<span class=\"st0\">'}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 43, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Out<span class=\"sy0\">-</span>Quibble<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"co1\"># Zero or more strings.</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>AllowEmptyString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Text</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># If not null or empty...</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Text</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Remove empty strings from the array.</span><br/>        <span class=\"re0\">$text</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$Text\"</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>StringSplitOptions<span class=\"br0\">]</span>::RemoveEmptyEntries<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"st0\">\"{}\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Build a format string.</span><br/>    <span class=\"re0\">$outStr</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$text</span>.Count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$outStr</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"{$i}, \"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$outStr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$outStr</span>.TrimEnd<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># If more than one word, insert \" and\" at last comma position.</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$text</span>.Count <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$cIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$outStr</span>.LastIndexOf<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$outStr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$outStr</span>.Remove<span class=\"br0\">(</span><span class=\"re0\">$cIndex</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.Insert<span class=\"br0\">(</span><span class=\"re0\">$cIndex</span><span class=\"sy0\">,</span><span class=\"st0\">\" and\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Output the formatted string.</span><br/>    <span class=\"st0\">\"{\"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$outStr</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$text</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 18, "block": "<pre class=\"prolog highlighted_source\">words_series<span class=\"br0\">(</span>Words<span class=\"sy4\">,</span> Bracketed<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    words_serialized<span class=\"br0\">(</span>Words<span class=\"sy4\">,</span> Serialized<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    atomics_to_string<span class=\"br0\">(</span><span class=\"br0\">[</span>\"<span class=\"br0\">{</span>\"<span class=\"sy4\">,</span>Serialized<span class=\"sy4\">,</span>\"<span class=\"br0\">}</span>\"<span class=\"br0\">]</span><span class=\"sy4\">,</span> Bracketed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>words_serialized<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> \"\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>words_serialized<span class=\"br0\">(</span><span class=\"br0\">[</span>Word<span class=\"br0\">]</span><span class=\"sy4\">,</span> Word<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>words_serialized<span class=\"br0\">(</span>Words<span class=\"sy4\">,</span> Serialized<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    append<span class=\"br0\">(</span>Rest<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Last<span class=\"br0\">]</span><span class=\"sy4\">,</span> Words<span class=\"br0\">)</span><span class=\"sy4\">,</span>                                  <span class=\"co1\">%% Splits the list of *Words* into the *Last* word and the *Rest* </span><br/>    atomics_to_string<span class=\"br0\">(</span>Rest<span class=\"sy4\">,</span> \"<span class=\"sy4\">,</span> \"<span class=\"sy4\">,</span> WithCommas<span class=\"br0\">)</span><span class=\"sy4\">,</span>                     <br/>    atomics_to_string<span class=\"br0\">(</span><span class=\"br0\">[</span>WithCommas<span class=\"sy4\">,</span> \" and \"<span class=\"sy4\">,</span> Last<span class=\"br0\">]</span><span class=\"sy4\">,</span> Serialized<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>test <span class=\"sy1\">:-</span><br/>    forall<span class=\"br0\">(</span> member<span class=\"br0\">(</span>Words<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"ABC\"<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"ABC\"<span class=\"sy4\">,</span> \"DEF\"<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"ABC\"<span class=\"sy4\">,</span> \"DEF\"<span class=\"sy4\">,</span> \"G\"<span class=\"sy4\">,</span> \"H\"<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">(</span> words_series<span class=\"br0\">(</span>Words<span class=\"sy4\">,</span> Series<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>              format<span class=\"br0\">(</span><span class=\"st_h\">'~w ~15|=&gt; ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Words<span class=\"sy4\">,</span> Series<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 36, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s CommaQuibble<span class=\"br0\">(</span><span class=\"kw2\">Input</span>$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, count<br/>  <span class=\"kw1\">Protected</span> result$, word$<br/>  <span class=\"kw2\">Input</span>$ <span class=\"sy0\">=</span> <span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span>$, <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span>$ <span class=\"sy0\">=</span> <span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span>$, <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span>$ <span class=\"sy0\">=</span> <span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span>$, #DQUOTE$<span class=\"br0\">)</span><br/>  count <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span>$, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  result$ <span class=\"sy0\">=</span> <span class=\"st0\">\"{\"</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>    word$ <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span>$, i, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      result$ <span class=\"sy0\">+</span> word$<br/>    <span class=\"kw1\">ElseIf</span> Count <span class=\"sy0\">=</span> i<br/>      result$ <span class=\"sy0\">+</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span> word$      <br/>    <span class=\"kw1\">Else</span><br/>      result$ <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> word$<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result$ <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; As 3 of the strings contain embedded quotes these need to be escaped with '\\' and the whole string preceded by '~'</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>CommaQuibble<span class=\"br0\">(</span><span class=\"st0\">\"[]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>CommaQuibble<span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"[\\\"</span>ABC<span class=\"sy0\">\\</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>CommaQuibble<span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"[\\\"</span>ABC<span class=\"sy0\">\\</span><span class=\"st0\">\",\\\"</span>DEF<span class=\"sy0\">\\</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>CommaQuibble<span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"[\\\"</span>ABC<span class=\"sy0\">\\</span><span class=\"st0\">\",\\\"</span>DEF<span class=\"sy0\">\\</span><span class=\"st0\">\",\\\"</span>G<span class=\"sy0\">\\</span><span class=\"st0\">\",\\\"</span>H<span class=\"sy0\">\\</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> strcat<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'{%s}'</span>\u00a0% <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"st0\">'dna '</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> seq <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DEF\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Input:\u00a0%-24r -&gt; Output:\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> strcat<span class=\"br0\">(</span>seq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>Input: <span class=\"br0\">[</span><span class=\"br0\">]</span>                       -<span class=\"sy0\">&gt;</span> Output: <span class=\"st0\">'{}'</span><br/>Input: <span class=\"br0\">[</span><span class=\"st0\">'ABC'</span><span class=\"br0\">]</span>                  -<span class=\"sy0\">&gt;</span> Output: <span class=\"st0\">'{ABC}'</span><br/>Input: <span class=\"br0\">[</span><span class=\"st0\">'ABC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'DEF'</span><span class=\"br0\">]</span>           -<span class=\"sy0\">&gt;</span> Output: <span class=\"st0\">'{ABC and DEF}'</span><br/>Input: <span class=\"br0\">[</span><span class=\"st0\">'ABC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'DEF'</span><span class=\"sy0\">,</span> <span class=\"st0\">'G'</span><span class=\"sy0\">,</span> <span class=\"st0\">'H'</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> Output: <span class=\"st0\">'{ABC, DEF, G and H}'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">(define (quibbling words)<br/>  (define (sub-quibbling words)<br/>    (match words<br/>      ['() \"\"]<br/>      [(list a) a]<br/>      [(list a b) (format \"~a and ~a\" a b)]<br/>      [(list a b ___) (format \"~a, ~a\" a (sub-quibbling b))]))<br/>  (format \"{~a}\" (sub-quibbling words)))<br/>\u00a0<br/>(for ((input '([] [\"ABC\"] [\"ABC\" \"DEF\"] [\"ABC\" \"DEF\" \"G\" \"H\"])))<br/>  (printf \"~s\\t-&gt;\\t~a~%\" input (quibbling input)))</pre>"}, {"lang": "REBOL", "loc": 19, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol []</span><br/>\u00a0<br/>comma-quibbling: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>block<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span><br/>        <span class=\"st0\">\"^{\"</span><br/>\u00a0<br/>        <span class=\"kw3\">to-string</span> <span class=\"kw3\">use</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>            s: <span class=\"kw3\">copy</span> block<br/>            s: <span class=\"kw2\">next</span> s<br/>            <span class=\"kw2\">forskip</span> s <span class=\"nu0\">2</span> <span class=\"br0\">[</span><span class=\"kw3\">insert</span> s <span class=\"kw2\">either</span> <span class=\"kw3\">tail?</span> <span class=\"kw2\">next</span> s <span class=\"br0\">[</span><span class=\"st0\">\" and \"</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\", \"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            s: <span class=\"kw3\">head</span> s<br/>        <span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"st0\">\"^}\"</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">foreach</span> t <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>ABC<span class=\"br0\">]</span> <span class=\"br0\">[</span>ABC DEF<span class=\"br0\">]</span> <span class=\"br0\">[</span>ABC DEF G H<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw3\">print</span> comma-quibbling t<span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">say</span> quibbling<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC DEF'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> quibbling<span class=\"br0\">(</span><span class=\"st0\">'ABC DEF G H'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>quibbling: <span class=\"kw1\">procedure</span><br/>    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> list<br/>    <span class=\"kw1\">Select</span><br/>      <span class=\"kw3\">When</span> list=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw4\">result</span>=<span class=\"st0\">''</span><br/>      <span class=\"kw3\">When</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>=<span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw4\">result</span>=<span class=\"kw6\">word</span><span class=\"br0\">(</span>list,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">Otherwise</span> <span class=\"kw4\">result</span>=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>list,<span class=\"nu0\">1</span>,<span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"st0\">','</span>,<span class=\"st0\">' '</span><span class=\"br0\">)</span>,<br/>        <span class=\"st0\">'and'</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>list,<span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">'{'</span><span class=\"kw4\">result</span><span class=\"st0\">'}'</span></pre>"}, {"lang": "Ring", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Comma Quibbling<br/>\u00a0<br/>text = list(4)<br/>text[1] = \"{}\"<br/>text[2] = \"ABC\"<br/>text[3] = \"ABC,DEF\"<br/>text[4] = \"ABC,DEF,G,H\"<br/>comma(text)<br/>\u00a0<br/>func comma(text)<br/>       listtext = []<br/>       for n = 1 to 4<br/>            listtext = str2list(substr(text[n], \",\", nl))<br/>            if n = 2<br/>               see \"{\" + list2str(listtext) + \"}\" + nl<br/>               loop<br/>            ok<br/>            if len(listtext) = 1<br/>               see \"{}\" + nl<br/>               loop<br/>            ok<br/>            str = \"{\"<br/>            for m = 1 to len(listtext)-1<br/>                if len(listtext) = 2<br/>                   str = str + listtext[m] + \" \"<br/>                else<br/>                   str = str + listtext[m] + \", \"<br/>                ok<br/>            next<br/>            if len(listtext) = 2<br/>               str = left(str, len(str)-1)<br/>            else<br/>               str = left(str, len(str)-2)<br/>            ok<br/>            if len(listtext) = 2<br/>               str = str + \" \" + listtext[len(listtext)] + \"}\"<br/>            else<br/>               str = str + \" and \" + listtext[len(listtext)] + \"}\"<br/>            ok<br/>            see str + nl<br/>     next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> comma_quibbling<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"sy0\">%</span>w<span class=\"sy0\">&lt;</span><span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? a.<span class=\"me1\">first</span>\u00a0:<br/>               <span class=\"st0\">\"#{a[0..-2].join(', ')} and #{a[-1]}\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"sy0\">%</span>w<span class=\"sy0\">&lt;</span>ABC<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">%</span>w<span class=\"sy0\">&lt;</span>ABC DEF<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">%</span>w<span class=\"sy0\">&lt;</span>ABC <span class=\"kw1\">DEF</span> G H<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> comma_quibbling<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">wrds$ = \"[]<br/>[\"\"ABC\"\"]<br/>[\"\"ABC\"\", \"\"DEF\"\"]<br/>[\"\"ABC\"\", \"\"DEF\"\", \"\"G\"\", \"\"H\"\"]<br/>\"<br/>while  word$(wrds$,j+1,chr$(13)) &lt;&gt; \"\"<br/>  a$ = word$(wrds$,j+1,chr$(13))<br/>  print a$;\" ==&gt; \";<br/>  a$ = \"{\"+mid$(a$,2,len(a$)-2)+\"}\"<br/>  j = j + 1<br/>  for i = len(a$) to 1 step -1<br/>    if mid$(a$,i,1) = \",\" then <br/>       a$ =  left$(a$,i-1) + \" and \" + mid$(a$,i+2) <br/>       exit for<br/>    end if<br/>  next i<br/>  print a$<br/>WEND</pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn quibble(seq: &amp;[&amp;str]) -&gt; String {<br/>    match seq.len() {<br/>        0 =&gt; \"{}\".to_string(),<br/>        1 =&gt; format!(\"{{{}}}\", seq[0]),<br/>        _ =&gt; {<br/>            format!(\"{{{} and {}}}\",<br/>                    seq[..seq.len() - 1].join(\", \"),<br/>                    seq.last().unwrap())<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", quibble(&amp;[]));<br/>    println!(\"{}\", quibble(&amp;[\"ABC\"]));<br/>    println!(\"{}\", quibble(&amp;[\"ABC\", \"DEF\"]));<br/>    println!(\"{}\", quibble(&amp;[\"ABC\", \"DEF\", \"G\", \"H\"]));<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> quibble<span class=\"br0\">(</span> s<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> s <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> m <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> m.<span class=\"me1\">isEmpty</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{}\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> m <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> m.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> m.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"{\"</span>, <span class=\"st0\">\" and \"</span>, <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> m <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{\"</span> + m.<span class=\"me1\">init</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span> + <span class=\"st0\">\" and \"</span> + m.<span class=\"me1\">last</span> + <span class=\"st0\">\"}\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A little test...</span><br/><span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span> quibble<span class=\"br0\">(</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> quibble<span class=\"br0\">(</span> List<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> quibble<span class=\"br0\">(</span> List<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span>,<span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> quibble<span class=\"br0\">(</span> List<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span>,<span class=\"st0\">\"DEF\"</span>,<span class=\"st0\">\"G\"</span>,<span class=\"st0\">\"H\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 17, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>quibble . args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"{\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rem args <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"}<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" and \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>quibble<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>quibble <span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sed", "loc": 6, "block": "<pre class=\"text highlighted_source\">s/#.*$//g<br/>y/[/{/<br/>y/]/}/<br/>s/\"//g<br/>s/ [A-Z][A-Z]*}/ and&amp;/g<br/>s/, and/ and/</pre>"}, {"lang": "Seed7", "loc": 21, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: quibble (in array string: input) is func<br/>  result<br/>    var string: quibble is \"{\";<br/>  begin<br/>    case length(input) of<br/>      when {0}:  quibble &amp;:= \"}\";<br/>      when {1}:  quibble &amp;:= input[1] &amp; \"}\";<br/>      otherwise: quibble &amp;:= join(input[.. pred(length(input))], \", \") &amp;<br/>                             \" and \" &amp; input[length(input)] &amp; \"}\";<br/>    end case;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(quibble(0 times \"\"));<br/>    writeln(quibble([] (\"ABC\")));<br/>    writeln(quibble([] (\"ABC\", \"DEF\")));<br/>    writeln(quibble([] (\"ABC\", \"DEF\", \"G\", \"H\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func comma_quibbling<span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'{'</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>words.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>words.<span class=\"me1\">last</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> join<span class=\"br0\">(</span><span class=\"st0\">' and '</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'}'</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;&gt;</span>, <span class=\"sy0\">&lt;</span>ABC<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">&lt;</span>ABC DEF<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">&lt;</span>ABC <span class=\"kw1\">DEF</span> G H<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>w<span class=\"sy0\">|</span><br/>    say comma_quibbling<span class=\"br0\">(</span>w<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 15, "block": "<pre class=\"text highlighted_source\">local<br/>  fun quib []      = \"\"<br/>    | quib [x]     = x<br/>    | quib [x0,x1] = x0 ^ \" and \" ^ x1<br/>    | quib (x::xs) = x ^ \", \" ^ quib xs<br/>in<br/>  fun quibble xs = \"{\" ^ quib xs ^ \"}\"<br/>end<br/>\u00a0<br/>(* Tests: *)<br/>val t_quibble_0 = quibble [] = \"{}\"<br/>val t_quibble_1 = quibble [\"ABC\"] = \"{ABC}\"<br/>val t_quibble_2 = quibble [\"ABC\", \"DEF\"] = \"{ABC and DEF}\"<br/>val t_quibble_3 = quibble [\"ABC\", \"DEF\", \"G\", \"H\"] = \"{ABC, DEF, G and H}\"<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">let inputs = [[], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]]<br/>\u00a0<br/>func quibbling(var words:[String]) {<br/>    if words.count == 0 {<br/>        println(\"{}\")<br/>    } else if words.count == 1 {<br/>        println(\"{\\(words[0])}\")<br/>    } else if words.count == 2 {<br/>        println(\"{\\(words[0]) and \\(words[1])}\")<br/>    } else {<br/>        var output = \"{\"<br/>        while words.count\u00a0!= 2 {<br/>            output += words.removeAtIndex(0) + \", \"<br/>        }<br/>        output += \"\\(words.removeAtIndex(0)) and \\(words.removeAtIndex(0))}\"<br/>\u00a0<br/>        println(output)<br/>    }<br/>}<br/>\u00a0<br/>for word in inputs {<br/>    quibbling(word)<br/>}</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> commaQuibble <span class=\"br0\">{</span>lst<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> \\<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$lst</span> end-<span class=\"nu0\">1</span> end <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$lst</span> end-<span class=\"nu0\">1</span> end<span class=\"br0\">]</span> <span class=\"st0\">\" and \"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span><span class=\"br0\">]</span>\\<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> input <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span>commaQuibble <span class=\"re0\">$input</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 3, "block": "<pre class=\"text highlighted_source\">(defun quib (list)<br/>  (tree-bind (: last . lead) (reverse list)<br/>    `{@{(nreverse lead) \", \"}@(if lead \" and \")@last}`))</pre>"}, {"lang": "UNIX Shell", "loc": 15, "block": "<pre class=\"bash highlighted_source\">quibble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co0\"># Here awk(1) is easier than sed(1).</span><br/>\t<span class=\"kw2\">awk</span> <span class=\"st_h\">'BEGIN {<br/>\t\tfor (i = 1; i &lt; ARGC - 2; i++) s = s ARGV[i] \", \"<br/>\t\ti = ARGC - 2; if (i &gt; 0) s = s ARGV[i] \" and \"<br/>\t\ti = ARGC - 1; if (i &gt; 0) s = s ARGV[i]<br/>\t\tprintf \"{%s}\\n\", s<br/>\t\texit 0<br/>\t}'</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"052145\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>quibble<br/>quibble ABC<br/>quibble ABC DEF<br/>quibble ABC DEF G H</pre>"}, {"lang": "VBA", "loc": 16, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/>   Debug.<span class=\"kw4\">Print</span> Quibbling(<span class=\"st0\">\"\"</span>)<br/>   Debug.<span class=\"kw4\">Print</span> Quibbling(<span class=\"st0\">\"ABC\"</span>)<br/>   Debug.<span class=\"kw4\">Print</span> Quibbling(<span class=\"st0\">\"ABC, DEF\"</span>)<br/>   Debug.<span class=\"kw4\">Print</span> Quibbling(<span class=\"st0\">\"ABC, DEF, G, H\"</span>)<br/>   Debug.<span class=\"kw4\">Print</span> Quibbling(<span class=\"st0\">\"ABC, DEF, G, H, IJKLM, NO, PQRSTUV\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Quibbling(MyString <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>   s = <span class=\"st0\">\"{\"</span> &amp; MyString &amp; <span class=\"st0\">\"}\"</span>: n = InStrRev(s, <span class=\"st0\">\",\"</span>)<br/>   <span class=\"kw3\">If</span> n &gt; 0 <span class=\"kw3\">Then</span> s = Left(s, n - 1) &amp; <span class=\"st0\">\" and \"</span> &amp; Right(s, Len(s) - (n + 1))<br/>   Quibbling = s<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 27, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Quibble(s)<br/>\tarr = Split(s,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw3\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>\t\tQuibble = <span class=\"st0\">\"{}\"</span> <br/>\t<span class=\"kw3\">ElseIf</span> <span class=\"kw4\">UBound</span>(arr) = 0 <span class=\"kw3\">Then</span><br/>\t\tQuibble = <span class=\"st0\">\"{\"</span> &amp; arr(0) &amp; <span class=\"st0\">\"}\"</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tQuibble = <span class=\"st0\">\"{\"</span><br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\t\t<span class=\"kw3\">If</span> i = <span class=\"kw4\">UBound</span>(arr) - 1 <span class=\"kw3\">Then</span><br/>\t\t\t\tQuibble = Quibble &amp; arr(i) &amp; <span class=\"st0\">\" and \"</span> &amp; arr(i + 1) &amp; <span class=\"st0\">\"}\"</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tQuibble = Quibble &amp; arr(i) &amp; <span class=\"st0\">\", \"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write Quibble(<span class=\"st0\">\"\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write Quibble(<span class=\"st0\">\"ABC\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write Quibble(<span class=\"st0\">\"ABC,DEF\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write Quibble(<span class=\"st0\">\"ABC,DEF,G,H\"</span>)<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "XLISP", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> quibble <span class=\"br0\">(</span>inputs <span class=\"sy0\">&amp;</span>optional oxford-comma<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>define final<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> inputs<span class=\"br0\">)</span> oxford-comma<span class=\"br0\">)</span><br/>            <span class=\"st0\">\", and \"</span><br/>            <span class=\"st0\">\" and \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">defun</span> comma-quibble <span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> words<span class=\"br0\">)</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>t <span class=\"br0\">(</span>begin<br/>                <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> words<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> words<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span>comma-quibble <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> final <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> <span class=\"st0\">\"{\"</span> <span class=\"br0\">(</span>comma-quibble inputs<span class=\"br0\">)</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; test cases:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; empty list</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>newline<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; test cases using the Oxford comma:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>quibble '<span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"DEF\"</span> <span class=\"st0\">\"G\"</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc Quibble(N, S);<br/>int  N, S;<br/>int  I;<br/>[ChOut(0, ^{);<br/>for I:= 0 to N-1 do<br/>    [Text(0, S(I));<br/>    if I&lt;N-2 then Text(0, \", \");<br/>    if I=N-2 then Text(0, \" and \");<br/>    ];<br/>ChOut(0, ^});<br/>];<br/>\u00a0<br/>int I;<br/>for I:= 0 to 4 do<br/>    if I#3 then [Quibble(I, [\"ABC\", \"DEF\", \"G\", \"H\"]);  CrLf(0)]<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn quib(list){ text:=(\"{\"+list.toString(*)[2,-1]+\"}\").replace(\"\\\"\",\"\");<br/>   if(list.len()&lt;2) text;<br/>   else{<br/>      z:=(text=text.replace(\",\",\", \")).rfind(\",\"); <br/>      String(text[0,z],\" and \",text[z+2,*])<br/>   }<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 20, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> DATA <span class=\"nu0\">0</span><br/><span class=\"nu0\">20</span> DATA <span class=\"nu0\">1</span>,<span class=\"st0\">\"ABC\"</span><br/><span class=\"nu0\">30</span> DATA <span class=\"nu0\">2</span>,<span class=\"st0\">\"ABC\"</span>,<span class=\"st0\">\"DEF\"</span><br/><span class=\"nu0\">40</span> DATA <span class=\"nu0\">4</span>,<span class=\"st0\">\"ABC\"</span>,<span class=\"st0\">\"DEF\"</span>,<span class=\"st0\">\"G\"</span>,<span class=\"st0\">\"H\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">10</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">40</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">60</span> RESTORE n: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">80</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM quibble</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> s$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">1020</span> READ j<br/><span class=\"nu0\">1030</span> <span class=\"kw1\">IF</span> j=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1100</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> j<br/><span class=\"nu0\">1050</span> READ a$<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">LET</span> s$=s$+a$<br/><span class=\"nu0\">1070</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>=j <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s$=s$+<span class=\"st0\">\" and \"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1090</span><br/><span class=\"nu0\">1080</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>&lt;j <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s$=s$+<span class=\"st0\">\", \"</span><br/><span class=\"nu0\">1090</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1100</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"{\"</span>;s$;<span class=\"st0\">\"}\"</span><br/><span class=\"nu0\">1110</span> <span class=\"kw1\">RETURN</span></pre>"}]}