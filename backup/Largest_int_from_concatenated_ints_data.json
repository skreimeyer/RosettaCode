{"task": "Largest_int_from_concatenated_ints", "blocks": [{"lang": "Ada", "loc": 2, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Order<span class=\"br0\">(</span>Left, Right: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"br0\">(</span> <span class=\"br0\">(</span>Img<span class=\"br0\">(</span>Left<span class=\"br0\">)</span> &amp; Img<span class=\"br0\">(</span>Right<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; <span class=\"br0\">(</span>Img<span class=\"br0\">(</span>Right<span class=\"br0\">)</span> &amp; Img<span class=\"br0\">(</span>Left<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;</pre>"}, {"lang": "Aime", "loc": 22, "block": "<pre class=\"text highlighted_source\">void<br/>largest(...)<br/>{<br/>    integer i;<br/>    index x;<br/>    i = count();<br/>    while (i) {<br/>        data b;<br/>        call_n(9, b_, b, $(i -= 1));<br/>        x[999999999 - b.size(9).atoi] = $i;<br/>    }<br/>    x.ucall(o_, 0);<br/>    o_newline();<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    largest(1, 34, 3, 98, 9, 76, 45, 4);<br/>    largest(54, 546, 548, 60);<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 69, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># returns the integer value of s #</span><br/>    <span class=\"kw4\">OP</span> TOINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> s pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># TOINT #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the first digit of n #</span><br/>    <span class=\"kw4\">OP</span> FIRSTDIGIT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> result <span class=\"sy1\">&gt;</span> 9 <span class=\"kw2\">DO</span> result <span class=\"kw17\">OVERAB</span> 10 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># FIRSTDIGIT #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns a string representaton of n #</span><br/>    <span class=\"kw4\">OP</span> TOSTRING <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns an array containing the values of a sorted such that concatenating the values would result in the largest value #</span><br/>    <span class=\"kw4\">OP</span> CONCATSORT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>       <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">THEN</span><br/>           <span class=\"coMULTI\"># 0 or 1 element(s) #</span><br/>           a<br/>       <span class=\"kw2\">ELSE</span><br/>           <span class=\"coMULTI\"># 2 or more elements #</span><br/>           <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> a <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> a <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> a<span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>           <span class=\"coMULTI\"># sort the numbers into reverse first digit order #</span><br/>           <span class=\"kw2\">FOR</span> o pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> result <span class=\"sy1\">-</span> 1 <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1<br/>           <span class=\"kw2\">WHILE</span> <span class=\"kw3\">BOOL</span> swapped <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw2\">FOR</span> i pos <span class=\"kw2\">TO</span> o pos <span class=\"kw2\">DO</span><br/>                     <span class=\"kw2\">IF</span> FIRSTDIGIT result<span class=\"br0\">[</span> i pos <span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> FIRSTDIGIT result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                         <span class=\"kw3\">INT</span> t <span class=\"sy1\">=</span> result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                         result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                         result<span class=\"br0\">[</span> i pos     <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>                         swapped             <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                      <span class=\"kw2\">FI</span><br/>                 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                 swapped<br/>           <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>           <span class=\"coMULTI\"># now re-order adjacent numbers so they have the highest concatenated value #</span><br/>           <span class=\"kw2\">WHILE</span> <span class=\"kw3\">BOOL</span> swapped <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw2\">FOR</span> i pos <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>                     <span class=\"kw3\">STRING</span> l <span class=\"sy1\">:=</span> TOSTRING result<span class=\"br0\">[</span> i pos     <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     <span class=\"kw3\">STRING</span> r <span class=\"sy1\">:=</span> TOSTRING result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     <span class=\"kw2\">IF</span> TOINT <span class=\"br0\">(</span> l <span class=\"sy1\">+</span> r <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> TOINT <span class=\"br0\">(</span> r <span class=\"sy1\">+</span> l <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>                         <span class=\"kw3\">INT</span> t <span class=\"sy1\">=</span> result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                         result<span class=\"br0\">[</span> i pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                         result<span class=\"br0\">[</span> i pos     <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>                         swapped             <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                     <span class=\"kw2\">FI</span><br/>                 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                 swapped<br/>           <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>           result<br/>       <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># CONCATSORT #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># prints the array a #</span><br/>    <span class=\"kw4\">OP</span> PRINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>       <span class=\"kw2\">FOR</span> a pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> TOSTRING a<span class=\"br0\">[</span> a pos <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"kw2\">OD</span> <span class=\"coMULTI\"># PRINT #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># task test cases #</span><br/>    PRINT CONCATSORT <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 34<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 98<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span> 76<span class=\"sy1\">,</span> 45<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    PRINT CONCATSORT <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> 54<span class=\"sy1\">,</span> 546<span class=\"sy1\">,</span> 548<span class=\"sy1\">,</span> 60 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\">LargestConcatenatedInts<span class=\"br0\">(</span>var<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span><span class=\"re0\">%A_Space%</span><span class=\"sy0\">,,</span> all<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> D`<span class=\"sy0\">,</span> fConcSort<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> `<span class=\"sy0\">,,,</span> all<br/>\t<span class=\"kw1\">return</span> var<br/><span class=\"br0\">}</span><br/>\u00a0<br/>ConcSort<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> a <span class=\"sy0\">.</span> b\t<span class=\"sy0\">,</span> n <span class=\"sy0\">:=</span> b <span class=\"sy0\">.</span> a<br/>    <span class=\"kw1\">return</span> m <span class=\"sy0\">&lt;</span> n\u00a0? <span class=\"nu0\">1</span>\u00a0: m <span class=\"sy0\">&gt;</span> n\u00a0? <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 21, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw6\">function</span> cmp<span class=\"br0\">(</span>i1, v1, i2, v2, u1, u2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tu1 = v1<span class=\"st0\">\"\"</span>v2;<br/>\tu2 = v2<span class=\"st0\">\"\"</span>v1;<br/>        <span class=\"kw6\">return</span> <span class=\"br0\">(</span>u2 <span class=\"sy3\">-</span> u1<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> largest_int_from_concatenated_ints<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> \tPROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span>=<span class=\"st0\">\"cmp\"</span>;<br/>\tu=<span class=\"st0\">\"\"</span>;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> X<span class=\"br0\">)</span> u=u<span class=\"st0\">\"\"</span>X<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"kw6\">return</span> u<br/><span class=\"br0\">}</span> <br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"1 34 3 98 9 76 45 4\"</span>,X<span class=\"br0\">)</span>;<br/>\t<span class=\"kw5\">print</span> largest_int_from_concatenated_ints<span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"54 546 548 60\"</span>,X<span class=\"br0\">)</span>;<br/>\t<span class=\"kw5\">print</span> largest_int_from_concatenated_ints<span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      DIM Nums%(10)<br/>      Nums%()=1,34,3,98,9,76,45,4<br/>      PRINT FNlargestint(8)<br/>      Nums%()=54,546,548,60<br/>      PRINT FNlargestint(4)<br/>      END<br/>\u00a0<br/>      DEF FNlargestint(len%)<br/>      LOCAL i%,l$,a$,b$,sorted%<br/>      REPEAT<br/>        sorted%=TRUE<br/>        FOR i%=0 TO len%-2<br/>          a$=STR$Nums%(i%)<br/>          b$=STR$Nums%(i%+1)<br/>          IF a$+b$&lt;b$+a$ SWAP Nums%(i%),Nums%(i%+1):sorted%=FALSE<br/>        NEXT<br/>      UNTIL sorted%<br/>      FOR i%=0 TO len%-1<br/>        l$+=STR$Nums%(i%)<br/>      NEXT<br/>      =l$</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( ( maxnum<br/>  =   A Z F C<br/>    .  \u00a0!arg:#<br/>      |  \u00a0!arg<br/>       \u00a0:  \u00a0%@?F<br/>           \u00a0?<br/>            ( #%@?C<br/>            &amp; ( str$(!F\u00a0!C)+-1*str$(!C\u00a0!F):~&lt;0<br/>              |\u00a0!C:?F<br/>              )<br/>            &amp; ~<br/>            )<br/>           \u00a0?<br/>      |\u00a0!arg:?A\u00a0!F\u00a0?Z&amp;!F maxnum$(!A\u00a0!Z)<br/>  )<br/>&amp; out$(str$(maxnum$(1 34 3 98 9 76 45 4)))<br/>&amp; out$(str$(maxnum$(54 546 548 60)))<br/>);</pre>"}, {"lang": "C", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> catcmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> ab<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ba<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>ab<span class=\"sy0\">,</span> <span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>ba<span class=\"sy0\">,</span> <span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>ba<span class=\"sy0\">,</span> ab<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> maxcat<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> catcmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmaxcat<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmaxcat<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> findLargestConcat <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> mynumbers <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> concatnumbers <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">sort</span> <span class=\"br0\">(</span> mynumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , mynumbers.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> numberstream <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy4\">:</span> mynumbers <span class=\"br0\">)</span> <br/>\t numberstream <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy4\">;</span><br/>      concatnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> numberstream.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">next_permutation</span><span class=\"br0\">(</span> mynumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t    mynumbers.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">max_element</span><span class=\"br0\">(</span> concatnumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t concatnumbers.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> mynumbers <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">98</span>, <span class=\"nu0\">76</span> , <span class=\"nu0\">45</span> , <span class=\"nu0\">34</span>, <span class=\"nu0\">9</span> , <span class=\"nu0\">4</span> , <span class=\"nu0\">3</span> , <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> othernumbers <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">54</span> , <span class=\"nu0\">546</span> , <span class=\"nu0\">548</span> , <span class=\"nu0\">60</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The largest concatenated int is \"</span> <span class=\"sy1\">&lt;&lt;</span><br/>      findLargestConcat<span class=\"br0\">(</span> mynumbers <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"And here it is \"</span> <span class=\"sy1\">&lt;&lt;</span> findLargestConcat<span class=\"br0\">(</span> othernumbers <span class=\"br0\">)</span> <br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 35, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> source1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> source2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> largest1 <span class=\"sy0\">=</span> LargestPossibleSequence<span class=\"br0\">(</span>source1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> largest2 <span class=\"sy0\">=</span> LargestPossibleSequence<span class=\"br0\">(</span>source2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The largest possible integer from set 1 is: {0}\"</span>, largest1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The largest possible integer from set 2 is: {0}\"</span>, largest2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> LargestPossibleSequence<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ints<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">long</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, ints<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> i, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> IntConcatenationComparer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> IntConcatenationComparer <span class=\"sy0\">:</span> IComparer<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Compare<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> xy <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> yx <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>y<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> xy <span class=\"sy0\">-</span> yx<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 15, "block": "<pre class=\"text highlighted_source\">shared void run2() {<br/>\u00a0<br/>\tfunction intConcatenationComparer(Integer x, Integer y) {<br/>\t\tassert(exists xy = parseInteger(x.string + y.string),<br/>\t\t\texists yx = parseInteger(y.string + x.string));<br/>\t\treturn yx &lt;=&gt; xy;<br/>\t}<br/>\u00a0<br/>\tfunction biggestConcatenation(Integer* ints) =&gt; \"\".join(ints.sort(intConcatenationComparer));<br/>\u00a0<br/>\tvalue test1 = {1, 34, 3, 98, 9, 76, 45, 4};<br/>\tvalue test2 = {54, 546, 548, 60};<br/>\u00a0<br/>\tprint(\"``biggestConcatenation(*test1)`` and ``biggestConcatenation(*test2)``\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> maxcat <span class=\"br0\">[</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>string<br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">apply</span> compare<br/>                          <span class=\"br0\">(</span><span class=\"kw1\">map</span> read<span class=\"sy0\">-</span>string <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">str</span> y x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> x y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>prn <span class=\"br0\">(</span><span class=\"kw1\">map</span> maxcat <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">34</span> <span class=\"nu0\">3</span> <span class=\"nu0\">98</span> <span class=\"nu0\">9</span> <span class=\"nu0\">76</span> <span class=\"nu0\">45</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">54</span> <span class=\"nu0\">546</span> <span class=\"nu0\">548</span> <span class=\"nu0\">60</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> int-concat <span class=\"br0\">(</span>ints<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>read-from-string <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~{~a~}\"</span> ints<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> by-biggest-result <span class=\"br0\">(</span>first second<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>int-concat  <span class=\"br0\">(</span><span class=\"kw1\">list</span> first second<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>int-concat <span class=\"br0\">(</span><span class=\"kw1\">list</span> second first<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-largest-int <span class=\"br0\">(</span>ints<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span>int-concat <span class=\"br0\">(</span>sort ints #'by-biggest-result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> permutations2<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> maxCat1<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> arr.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">permutations</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>join.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> maxCat2<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> arr.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>b <span class=\"sy0\">~</span> a <span class=\"sy0\">&lt;</span> a <span class=\"sy0\">~</span> b<span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> maxCat3<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"coMULTI\">/*pure nothrow @safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> maxL <span class=\"sy0\">=</span> arr.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max.<span class=\"me1\">text</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> arr.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">schwartzSort</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>maxL<span class=\"sy0\">/</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a &gt; b\"</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> lists <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span>maxCat1<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>maxCat2<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>maxCat3<span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>cat <span class=\"sy0\">=&gt;</span> lists.<span class=\"me1\">map</span><span class=\"sy0\">!</span>cat<span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def largest_int(list) do<br/>    sorted = Enum.sort(list, fn x,y -&gt; \"#{x}#{y}\" &gt;= \"#{y}#{x}\" end)<br/>    Enum.join(sorted)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.largest_int [1, 34, 3, 98, 9, 76, 45, 4]<br/>IO.inspect RC.largest_int [54, 546, 548, 60]</pre>"}, {"lang": "Erlang", "loc": 13, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> largest_int_from_concatenated <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>ints<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ints</span><span class=\"br0\">(</span> <span class=\"re5\">Ints</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Int_strings</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Ints</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Pad_ints</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">++</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Int_strings</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">list_to_integer</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Int</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_Pad</span><span class=\"sy1\">,</span> <span class=\"re5\">Int</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">Pad_ints</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Largest ~p from ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">ints</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">98</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">76</span><span class=\"sy1\">,</span> <span class=\"nu0\">45</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span> <span class=\"nu0\">546</span><span class=\"sy1\">,</span> <span class=\"nu0\">548</span><span class=\"sy1\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Form largest integer which is a permutation from a list of integers. Nigel Galloway: March 21st., 2018</span><br/><span class=\"kw1\">let</span> fN g <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">)</span> g <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n g<span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span> n<span class=\"sy0\">+</span>g<span class=\"sy0\">&lt;</span>g<span class=\"sy0\">+</span>n <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> System.<a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Concat</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 15, "block": "<pre class=\"text highlighted_source\">USING: assocs io kernel math qw sequences sorting\u00a0;<br/>IN: rosetta-code.largest-int<br/>\u00a0<br/>: pad ( target seq -- padded )<br/>    2dup length / swap &lt;repetition&gt; concat swap head\u00a0;<br/>\u00a0<br/>: largest-int ( seq -- )<br/>    dup dup [ length ] map supremum   \u00a0! find longest length so we know how much to pad<br/>    [ swap pad ] curry map            \u00a0! pad the integers<br/>    &lt;enum&gt; sort-values                \u00a0! sort the padded integers<br/>    keys                              \u00a0! find the original indices of the sorted integers<br/>    swap nths                         \u00a0! order non-padded integers according to their sorted order<br/>    reverse concat print\u00a0;             <br/>\u00a0<br/>qw{ 1 34 3 98 9 76 45 4 } qw{ 54 546 548 60 } [ largest-int ] <a class=\"__cf_email__\" data-cfemail=\"aeccc7ee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Fortran", "loc": 73, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> SWAP<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>\t<span class=\"co1\">!Why can't the compiler supply these!</span><br/>       <span class=\"kw3\">INTEGER</span> A,B,T<br/>        T <span class=\"sy0\">=</span> B<br/>        B <span class=\"sy0\">=</span> A<br/>        A <span class=\"sy0\">=</span> T<br/>      <span class=\"kw1\">END</span><br/>\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> BIGUP<span class=\"br0\">(</span>TEXT,N<span class=\"br0\">)</span>\t<span class=\"co1\">!Outputs the numbers in TEXT to give the biggest number.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The numbers as text, aligned left.</span><br/>       <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!The number of them.</span><br/>       <span class=\"kw3\">INTEGER</span> XLAT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>,L<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!An index and a set of lengths.</span><br/>       <span class=\"kw3\">INTEGER</span> I,J,M\t\t<span class=\"co1\">!Assorted steppers.</span><br/>       <span class=\"kw3\">INTEGER</span> TI,TJ\t\t<span class=\"co1\">!Fingers to a text.</span><br/>       <span class=\"kw3\">INTEGER</span> LI,LJ\t\t<span class=\"co1\">!Lengths of the fingered texts.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG\t\t<span class=\"co1\">!I/O unit number.</span><br/>       <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span> MSG\t<span class=\"co1\">!Old style.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t<span class=\"co1\">!Step through my supply of texts.</span><br/>          XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> I\t\t<span class=\"co1\">!Preparing a finger to them.</span><br/>          L<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">LEN_TRIM</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And noting their last non-blank.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"Supplied\"</span>,<span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N<span class=\"br0\">)</span>\t<span class=\"co1\">!Show the grist.</span><br/>    <span class=\"nu0\">1</span>   FORMAT <span class=\"br0\">(</span>A12,<span class=\"st0\">\":\"</span>,&lt;N&gt;<span class=\"br0\">(</span>A,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Instead of &lt;N&gt;, 666 might suffice.</span><br/><span class=\"co1\">Crude bubblesort. No attempt at noting the bounds of swaps made.</span><br/>        <span class=\"kw1\">DO</span> M <span class=\"sy0\">=</span> N,<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t<span class=\"co1\">!Just for fun, go backwards.</span><br/>          <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,M\t\t<span class=\"co1\">!Start a scan.</span><br/>            J <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Comparing element I to element I - 1.</span><br/>            TI <span class=\"sy0\">=</span> XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!Thus finger the I'th text in XLAT order.</span><br/>            TJ <span class=\"sy0\">=</span> XLAT<span class=\"br0\">(</span>J<span class=\"br0\">)</span>\t<span class=\"co1\">!And its supposed predecessor.</span><br/>            LI <span class=\"sy0\">=</span> L<span class=\"br0\">(</span>TI<span class=\"br0\">)</span>\t\t<span class=\"co1\">!The length of the fingered text.</span><br/>            LJ <span class=\"sy0\">=</span> L<span class=\"br0\">(</span>TJ<span class=\"br0\">)</span>\t\t<span class=\"co1\">!All this to save on typing below.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LI <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> LJ<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!If the texts are equal lengths,</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>TI<span class=\"br0\">)</span>.<span class=\"me1\">LT</span>.<span class=\"me1\">TEXT</span><span class=\"br0\">(</span>TJ<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SWAP<span class=\"br0\">(</span>XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span>,XLAT<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!A simple comparison.</span><br/>             <span class=\"kw1\">ELSE</span>\t<span class=\"co1\">!But if not, construct the actual candidate texts for comparison.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>TI<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LI<span class=\"br0\">)</span><span class=\"sy0\">//</span>TEXT<span class=\"br0\">(</span>TJ<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LJ<span class=\"br0\">)</span>\t<span class=\"co1\">!These two will be the same length.</span><br/>     <span class=\"nu0\">1</span>        .<span class=\"me1\">LT</span>.<span class=\"me1\">TEXT</span><span class=\"br0\">(</span>TJ<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LJ<span class=\"br0\">)</span><span class=\"sy0\">//</span>TEXT<span class=\"br0\">(</span>TI<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LI<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Just as above.</span><br/>     <span class=\"nu0\">2</span>        <span class=\"kw1\">CALL</span> SWAP<span class=\"br0\">(</span>XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span>,XLAT<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!J shall now follow I.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for that comparison.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t<span class=\"co1\">!The original plan was to reveal element XLAT(M) as found.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">\"Biggest\"</span>,<span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">(</span>XLAT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,I <span class=\"sy0\">=</span> N,<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!But, all at once is good too.</span><br/>    <span class=\"nu0\">2</span>   FORMAT <span class=\"br0\">(</span>A12,<span class=\"st0\">\":\"</span>,&lt;N&gt;<span class=\"br0\">(</span>A,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The space maintains identity.</span><br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!That was fun.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> T1<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Prepare some example arrays.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> T2<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!To hold the specified examples.</span><br/>      <span class=\"kw3\">INTEGER</span> MSG<br/>      <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span> MSG<br/>      <span class=\"kw3\">DATA</span> T1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"34\"</span>,<span class=\"st0\">\"3\"</span>,<span class=\"st0\">\"98\"</span>,<span class=\"st0\">\"9\"</span>,<span class=\"st0\">\"76\"</span>,<span class=\"st0\">\"45\"</span>,<span class=\"st0\">\"4\"</span><span class=\"sy0\">/</span><br/>      <span class=\"kw3\">DATA</span> T2<span class=\"sy0\">/</span><span class=\"st0\">\"54\"</span>,<span class=\"st0\">\"546\"</span>,<span class=\"st0\">\"548\"</span>,<span class=\"st0\">\"60\"</span><span class=\"sy0\">/</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Takes a list of integers and concatenates them so as \"</span>,<br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\"to produce the biggest possible number.\"</span>,<span class=\"sy0\">/</span>,<br/>     <span class=\"nu0\">2</span> <span class=\"st0\">\"The result is shown with spaces between the parts \"</span>,<br/>     <span class=\"nu0\">3</span> <span class=\"st0\">\"to show provenance. Ignore them otherwise.\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> BIGUP<span class=\"br0\">(</span>T1,<span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> BIGUP<span class=\"br0\">(</span>T2,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"These are supplied in lexicographical order...\"</span><br/>      <span class=\"kw1\">CALL</span> BIGUP<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"5\"</span>,<span class=\"st0\">\"54\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"But this is not necessarily the biggest order.\"</span><br/>      <span class=\"kw1\">CALL</span> BIGUP<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"5\"</span>,<span class=\"st0\">\"56\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"And for those who count...\"</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">10</span><br/>        WRITE <span class=\"br0\">(</span>T1<span class=\"br0\">(</span>I<span class=\"br0\">)</span>,<span class=\"st0\">\"(I0)\"</span><span class=\"br0\">)</span> I\t<span class=\"co1\">!This format code produces only the necessary text.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!Thus, the numbers are aligned left in the text field.</span><br/>      <span class=\"kw1\">CALL</span> BIGUP<span class=\"br0\">(</span>T1,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span> </pre>"}, {"lang": "FreeBASIC", "loc": 78, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-01-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' TRUE/FALSE are built-in constants since FreeBASIC 1.04</span><br/><span class=\"co1\">' But we have to define them for older versions.</span><br/><span class=\"co2\">#Ifndef TRUE    ' if TRUE is not defined then</span><br/>   <span class=\"co2\">#Define FALSE 0</span><br/>   <span class=\"co2\">#Define TRUE Not FALSE</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> array<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> largest<span class=\"br0\">(</span>array<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> lb = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>, ub = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, flag<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> a_str<span class=\"br0\">(</span>lb <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span>,tmp<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub<br/>        a_str<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"kw1\">Left</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"nu0\">14</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>, <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Do</span><br/>        flag = <span class=\"kw1\">TRUE</span><br/>        <span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub - <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> a_str<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt; a_str<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Swap</span> a_str<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, a_str<span class=\"br0\">(</span>i +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                flag = <span class=\"kw1\">FALSE</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">If</span> flag = <span class=\"kw1\">TRUE</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Loop</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub<br/>        tmp += <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>a_str<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> tmp<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span>, -<span class=\"nu0\">999</span><br/><span class=\"kw1\">Data</span> <span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span>, -<span class=\"nu0\">999</span><br/><span class=\"kw1\">Data</span> -<span class=\"nu0\">999</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, x<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">ReDim</span> array<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    i = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">Read</span> x<br/>        <span class=\"kw1\">If</span> x = -<span class=\"nu0\">999</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">If</span> i &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">ReDim</span> <span class=\"kw1\">Preserve</span> array<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        array<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = x<br/>        i += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Loop</span><br/>    <span class=\"kw1\">If</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Largest concatenated int from {\"</span>;<br/>    <span class=\"kw1\">For</span> i = <span class=\"kw1\">lBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">If</span> i = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"} = \"</span>; largest<span class=\"br0\">(</span>array<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span><br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\",\"</span>;<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Gambas", "loc": 48, "block": "<pre class=\"gambas highlighted_source\"><span class=\"co1\">'Largest int from concatenated ints</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iList1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>      <span class=\"co1\">'Integer list 1</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iList2 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">]</span>                <span class=\"co1\">'Integer list 2</span><br/>\u00a0<br/>Calc<span class=\"br0\">(</span>iList1<span class=\"br0\">)</span>                                                <span class=\"co1\">'Send List 1 to Calc routine </span><br/>Calc<span class=\"br0\">(</span>iList2<span class=\"br0\">)</span>                                                <span class=\"co1\">'Send List 2 to Calc routine</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/><span class=\"co1\">'_________________________________________________________________________________________</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Calc<span class=\"br0\">(</span>iList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount1, siCount2, siCounter <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                  <span class=\"co1\">'Counters</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                                   <span class=\"co1\">'To hold converted integers</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> bTrigger <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a>                                     <span class=\"co1\">'To trigger a found match</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> siCount1 <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> iList                                  <span class=\"co1\">'For each integer in the list..</span><br/>  sList.<span class=\"me1\">Add</span><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount1<span class=\"br0\">)</span><span class=\"br0\">)</span>                                  <span class=\"co1\">'Convert to a string and add to sList</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> siCounter <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                    <span class=\"co1\">'If the length of the string is greater than siCounter then..</span><br/>    siCounter <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount1<span class=\"br0\">)</span><span class=\"br0\">)</span>                          <span class=\"co1\">'siCounter = length of the string</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> sList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                               <span class=\"co1\">'For each item in sList</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> siCounter <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                  <span class=\"co1\">'If the length of the string is less that siCounter then..</span><br/>    sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span>sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"co1\">'Add the same digit to the string e.g. in list 1 \"9\" becomes \"99\", list 2 \"54\" becomes \"544\"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/>sList.<span class=\"me1\">Sort</span><span class=\"br0\">(</span>gb.<span class=\"me1\">Descent</span><span class=\"br0\">)</span>                                      <span class=\"co1\">'Sort the list in decending order</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> sList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                               <span class=\"co1\">'For each item in sList</span><br/>  bTrigger <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a>                                          <span class=\"co1\">'Set bTrigger to False</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> iList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                             <span class=\"co1\">'Loop through each item in iList</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> iList<span class=\"br0\">[</span>siCount2<span class=\"br0\">]</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>          <span class=\"co1\">'If the value of each is the same e.g. \"98\" = 98 then</span><br/>      bTrigger <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a>                                       <span class=\"co1\">'Set bTrigger to True</span><br/>      <a href=\"http://gambasdoc.org/help/lang/continue\"><span class=\"kw1\">Continue</span></a>                                              <span class=\"co1\">'Exit the loop</span><br/>    <a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/not\"><span class=\"kw5\">Not</span></a> bTrigger <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                      <span class=\"co1\">'If there was no match e.g. there is no \"99\" then.. </span><br/>    sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/left\"><span class=\"kw2\">Left</span></a><span class=\"br0\">(</span>sList<span class=\"br0\">[</span>siCount1<span class=\"br0\">]</span>, siCounter <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">'Strip out the end digit e.g. \"99\" becomes 9 again</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sList.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                                   <span class=\"co1\">'Join all items in sList together and print</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Variation of method 3.  Repeat digits to at least the size of the longest,</span><br/><span class=\"co1\">// then sort as strings.</span><br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> c <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"nu2\">i</span>     <span class=\"kw4\">int</span><br/>    s<span class=\"sy1\">,</span> rs <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> cc <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>c<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>rs &lt; c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>rs <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Function required by task.  Takes a list of integers, returns big int.</span><br/><span class=\"kw4\">func</span> li<span class=\"sy1\">(</span>is <span class=\"sy4\">...</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    ps <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>cc<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>is<span class=\"sy1\">))</span><br/>    ss <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>c<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>is<span class=\"sy1\">))</span><br/>    ml <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> is <span class=\"sy1\">{</span><br/>        p <span class=\"sy2\">:=</span> &amp;ss<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>        ps<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<br/>        p<span class=\"sy3\">.</span><span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>        p<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span> &gt; ml <span class=\"sy1\">{</span><br/>            ml <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ps <span class=\"sy1\">{</span><br/>        p<span class=\"sy3\">.</span>rs <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> <span class=\"sy1\">(</span>ml<span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>ps<span class=\"sy1\">)</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ps <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy3\">.</span>s<br/>    <span class=\"sy1\">}</span><br/>    b<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">),</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>li<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">98</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">76</span><span class=\"sy1\">,</span> <span class=\"nu0\">45</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>li<span class=\"sy1\">(</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span> <span class=\"nu0\">546</span><span class=\"sy1\">,</span> <span class=\"nu0\">548</span><span class=\"sy1\">,</span> <span class=\"nu0\">60</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Variation of method 3.  Repeat digits to at least the size of the longest,</span><br/><span class=\"co1\">// then sort as strings.</span><br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> c <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"nu2\">i</span>     <span class=\"kw4\">int</span><br/>    s<span class=\"sy1\">,</span> rs <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> cc <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>c<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>rs &lt; c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>rs <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c cc<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Function required by task.  Takes a list of integers, returns big int.</span><br/><span class=\"kw4\">func</span> li<span class=\"sy1\">(</span>is <span class=\"sy4\">...</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    ps <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>cc<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>is<span class=\"sy1\">))</span><br/>    ss <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>c<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>is<span class=\"sy1\">))</span><br/>    ml <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> is <span class=\"sy1\">{</span><br/>        p <span class=\"sy2\">:=</span> &amp;ss<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>        ps<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<br/>        p<span class=\"sy3\">.</span><span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>        p<span class=\"sy3\">.</span>s <span class=\"sy2\">=</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span> &gt; ml <span class=\"sy1\">{</span><br/>            ml <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ps <span class=\"sy1\">{</span><br/>        p<span class=\"sy3\">.</span>rs <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> <span class=\"sy1\">(</span>ml<span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>s<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>ps<span class=\"sy1\">)</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ps<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ps <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy3\">.</span>s<br/>    <span class=\"sy1\">}</span><br/>    b<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">),</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>li<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">98</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">76</span><span class=\"sy1\">,</span> <span class=\"nu0\">45</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>li<span class=\"sy1\">(</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span> <span class=\"nu0\">546</span><span class=\"sy1\">,</span> <span class=\"nu0\">548</span><span class=\"sy1\">,</span> <span class=\"nu0\">60</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> largestInt <span class=\"sy0\">=</span> <span class=\"br0\">{</span> c <span class=\"sy0\">-&gt;</span> c.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a> <span class=\"br0\">{</span> v2, v1 <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"$v1$v2\"</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"st0\">\"$v2$v1\"</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> maxcat <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">98</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">76</span><span class=\"sy0\">,</span><span class=\"nu0\">45</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span><span class=\"nu0\">546</span><span class=\"sy0\">,</span><span class=\"nu0\">548</span><span class=\"sy0\">,</span><span class=\"nu0\">60</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span><br/>      sorted xs <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> pad x  <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> replicate <span class=\"br0\">(</span>maxLen `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> x<br/>                      maxLen <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<br/>                  <span class=\"kw1\">in</span>  sortBy <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"sy0\">$</span> comparing pad<span class=\"br0\">)</span> xs<br/>\u00a0<br/>      maxcat <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> sorted <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">import</span> Collections    <span class=\"co1\"># For the Heap (dense priority queue) class</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>lici<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> lici<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>result <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||:=</span> Heap<span class=\"br0\">(</span>a<span class=\"sy0\">,,</span>cmp<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">gen</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cmp<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a<span class=\"sy0\">||</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>b<span class=\"sy0\">||</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">maxlen=: [: &gt;./ #&amp;&gt;<br/>maxnum=: <span class=\"sy0\">(</span><span class=\"nu0\">0</span> \".\u00a0;<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>\\: maxlen $&amp;&gt; ]<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span><span class=\"nu0\">8</span>!:<span class=\"nu0\">0</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 42, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> IntConcat <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Comparator.html\"><span class=\"kw46\">Comparator</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> sorter = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Comparator.html\"><span class=\"kw46\">Comparator</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">int</span> compare<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a> o1, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a> o2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> o1s = o1.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> o2s = o2.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>o1s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == o2s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw2\">return</span> o2s.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>o1s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">int</span> mlen = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>o1s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, o2s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span>o1s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> mlen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> o1s += o1s<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span>o2s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> mlen <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> o2s += o2s<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">return</span> o2s.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>o1s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> join<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;?&gt;</span> things<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> output = <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> obj:things<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            output += obj<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> output<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> ints1 = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>ints1, sorter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>join<span class=\"br0\">(</span>ints1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> ints2 = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>ints2, sorter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>join<span class=\"br0\">(</span>ints2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"> <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co1\">// maxCombine\u00a0:: [Int] -&gt; Int</span><br/>     <span class=\"kw1\">function</span> maxCombine<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">return</span> parseInt<span class=\"br0\">(</span><br/>             xs.<span class=\"me1\">sort</span><span class=\"br0\">(</span><br/>                 <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                     <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> x.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         b <span class=\"sy0\">=</span> y.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         ab <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         ba <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>b <span class=\"sy0\">+</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                     <span class=\"kw1\">return</span> ab <span class=\"sy0\">&gt;</span> ba <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>ab <span class=\"sy0\">&lt;</span> ba <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 <span class=\"br0\">}</span><br/>             <span class=\"br0\">)</span><br/>             .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>         <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>maxCombine<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 14, "block": "<pre class=\"text highlighted_source\">def largest_int:<br/>\u00a0<br/>  def pad(n):  . + (n - length) * .[length-1:];<br/>\u00a0<br/>  map(tostring)<br/>  | (map(length) | max) as $max<br/>  | map([., pad($max)]) <br/>  | sort_by( .[1] )<br/>  | map( .[0] ) | reverse | join(\"\")\u00a0;<br/>\u00a0<br/># Examples:<br/>([1, 34, 3, 98, 9, 76, 45, 4],<br/> [54, 546, 548, 60])  | largest_int<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">function maxconcat(arr::Vector{&lt;:Integer})<br/>    b = sort(dec.(arr); lt=(x, y) -&gt; x * y &lt; y * x, rev=true) |&gt; join<br/>    return try parse(Int, b) catch parse(BigInt, b) end<br/>end<br/>\u00a0<br/>tests = ([1, 34, 3, 98, 9, 76, 45, 4],<br/>         [54, 546, 548, 60],<br/>         [1, 34, 3, 98, 9, 76, 45, 4, 54, 546, 548, 60])<br/>\u00a0<br/>for arr in tests<br/>    println(\"Max concatenating in $arr:\\n -&gt; \", maxconcat(arr))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Comparator</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> comparator <span class=\"sy0\">=</span> Comparator<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> x, y -<span class=\"sy0\">&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + y<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + x<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        xy.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>yx<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun findLargestSequence<span class=\"br0\">(</span>array<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> array.<span class=\"me1\">sortedWith</span><span class=\"br0\">(</span>comparator<span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> source1 <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>findLargestSequence<span class=\"br0\">(</span>source1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> source2 <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>findLargestSequence<span class=\"br0\">(</span>source2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> icsort<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>numbers<span class=\"sy0\">,</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x<span class=\"sy0\">..</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>y<span class=\"sy0\">..</span>x<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> numbers<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>numbers <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span>\t<br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'Numbers: {%s}<span class=\"es1\">\\n</span>  Largest integer:\u00a0%s'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span><br/>\t\t<span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>numbers<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>icsort<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">makeLargestInt[list_]\u00a0:= Module[{sortedlist},<br/>  sortedlist = Sort[list, Order[ToString[#1] &lt;&gt; ToString[#2], ToString[#2] &lt;&gt; ToString[#1]] &lt; 0 &amp;];<br/>  Map[ToString, sortedlist] // StringJoin // FromDigits<br/>  ]<br/>(* testing with two examples *)<br/>makeLargestInt[{1, 34, 3, 98, 9, 76, 45, 4}]<br/>makeLargestInt[{54, 546, 548, 60}]</pre>"}, {"lang": "NetRexx", "loc": 48, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method largestInt<span class=\"br0\">(</span>il<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  ri = <span class=\"st0\">''</span><br/>  wa = <span class=\"st0\">''</span><br/>  <span class=\"co1\">-- put the list into an indexed string</span><br/>  wa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = il.<span class=\"kw6\">words</span><br/>  <span class=\"kw1\">loop</span> ww = <span class=\"nu0\">1</span> to wa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    wa<span class=\"br0\">[</span>ww<span class=\"br0\">]</span> = il.<span class=\"kw6\">word</span><span class=\"br0\">(</span>ww<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> ww<br/>\u00a0<br/>  <span class=\"co1\">-- order the list</span><br/>  <span class=\"kw1\">loop</span> wx = <span class=\"nu0\">1</span> to wa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> wy = wx + <span class=\"nu0\">1</span> to wa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      xx = wa<span class=\"br0\">[</span>wx<span class=\"br0\">]</span><br/>      yy = wa<span class=\"br0\">[</span>wy<span class=\"br0\">]</span><br/>      xy = xx <span class=\"sy0\">||</span> yy<br/>      yx = yy <span class=\"sy0\">||</span> xx<br/>      <span class=\"kw1\">if</span> xy <span class=\"sy0\">&lt;</span> yx <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"co1\">-- swap xx and yy</span><br/>        wa<span class=\"br0\">[</span>wx<span class=\"br0\">]</span> = yy<br/>        wa<span class=\"br0\">[</span>wy<span class=\"br0\">]</span> = xx<br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span> wy<br/>    <span class=\"kw3\">end</span> wx<br/>\u00a0<br/>  <span class=\"co1\">-- rebuild list from indexed string</span><br/>  <span class=\"kw1\">loop</span> ww = <span class=\"nu0\">1</span> to wa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    ri = ri wa<span class=\"br0\">[</span>ww<span class=\"br0\">]</span><br/>    <span class=\"kw3\">end</span> ww<br/>  <span class=\"kw1\">return</span> ri.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">-- concatenate the list elements into a single numeric</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  ints = <span class=\"br0\">[</span> -<br/>    <span class=\"st0\">'1 34 3 98 9 76 45 4'</span>, -<br/>    <span class=\"st0\">'54 546 548 60'</span> -<br/>    <span class=\"br0\">]</span><br/>  <span class=\"kw1\">loop</span> il over ints<br/>    <span class=\"kw1\">say</span> largestInt<span class=\"br0\">(</span>il<span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">':'</span> il.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> il<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">import algorithm, sequtils, strutils, future<br/>\u00a0<br/>proc maxNum(x: seq[int]): string =<br/>  var c = x.mapIt(string, $it)<br/>  c.sort((x, y) =&gt; cmp(y&amp;x, x&amp;y))<br/>  c.join()<br/>\u00a0<br/>echo maxNum(@[1, 34, 3, 98, 9, 76, 45, 4])<br/>echo maxNum(@[54, 546, 548, 60])</pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> myCompare a b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">^</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>a <span class=\"sy0\">^</span> b<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> icsort nums <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort myCompare <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> nums<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: largestInt  map(#asString) sortWith(#[ 2dup + -rot swap + &gt; ]) sum asInteger\u00a0;</pre>"}, {"lang": "Pascal", "loc": 139, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">const</span><br/>  base    <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  MaxDigitCnt <span class=\"sy3\">=</span> <span class=\"nu0\">11</span><span class=\"sy1\">;</span><br/>  source1 <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">98</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">76</span><span class=\"sy1\">,</span> <span class=\"nu0\">45</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  source2 <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy1\">,</span><span class=\"nu0\">546</span><span class=\"sy1\">,</span><span class=\"nu0\">548</span><span class=\"sy1\">,</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  source3 <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"sy1\">,</span> <span class=\"nu0\">54</span><span class=\"sy1\">,</span><span class=\"nu0\">545454546</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  tdata <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>            datOrg<span class=\"sy1\">,</span><br/>            datMod <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/>            datStrOrg       <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span>MaxDigitCnt<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tArrData <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> tData<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> DigitCount<span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span> tdata<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> n <span class=\"kw1\">do</span><br/>    <span class=\"co1\">//InttoStr is very fast</span><br/>    str<span class=\"br0\">(</span>datOrg<span class=\"sy1\">,</span>datStrOrg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InsertData<span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span> tdata<span class=\"sy1\">;</span>data<span class=\"sy1\">:</span>LongWord<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  n<span class=\"sy1\">.</span><span class=\"me1\">datOrg</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> data<span class=\"sy1\">;</span><br/>  DigitCount<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FindMaxLen<span class=\"br0\">(</span><span class=\"kw1\">const</span> ArrData<span class=\"sy1\">:</span>tArrData<span class=\"br0\">)</span><span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  cnt <span class=\"sy1\">:</span> <span class=\"kw4\">longInt</span><span class=\"sy1\">;</span><br/>  res<span class=\"sy1\">,</span>t <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><span class=\"co1\">// 1 is minimum</span><br/>  <span class=\"kw1\">for</span> cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  High<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    t <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>ArrData<span class=\"br0\">[</span>cnt<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">datStrOrg</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> res &lt; t <span class=\"kw1\">then</span><br/>      res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> t<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  FindMaxLen <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ExtendCount<span class=\"br0\">(</span><span class=\"kw1\">var</span> ArrData<span class=\"sy1\">:</span>tArrData<span class=\"sy1\">;</span>newLen<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  cnt<span class=\"sy1\">,</span><br/>  i<span class=\"sy1\">,</span>k <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">For</span> cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">with</span> ArrData<span class=\"br0\">[</span>cnt<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      datMod <span class=\"sy1\">:</span><span class=\"sy3\">=</span> datOrg<span class=\"sy1\">;</span><br/>      i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> newlen<span class=\"sy3\">-</span>length<span class=\"br0\">(</span>datStrOrg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        datMod <span class=\"sy1\">:</span><span class=\"sy3\">=</span> datMod <span class=\"sy3\">*</span>Base<span class=\"sy3\">+</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>datStrOrg<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">IF</span> k &gt;length<span class=\"br0\">(</span>datStrOrg<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SortArrData<span class=\"br0\">(</span><span class=\"kw1\">var</span> ArrData<span class=\"sy1\">:</span>tArrData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span><br/>  j<span class=\"sy1\">,</span>idx <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  tmpData <span class=\"sy1\">:</span> tData<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    idx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">IF</span> ArrData<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">datMod</span> &lt; ArrData<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">datMod</span> <span class=\"kw1\">then</span><br/>         idx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> idx &lt;&gt; i <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      tmpData     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ArrData<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      ArrData<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> ArrData<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      ArrData<span class=\"br0\">[</span>i<span class=\"br0\">]</span>  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmpData<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ArrDataOutput<span class=\"br0\">(</span><span class=\"kw1\">const</span> ArrData<span class=\"sy1\">:</span>tArrData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>l <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  s <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/><span class=\"coMULTI\">{ the easy way<br/>  For i\u00a0:= High(ArrData) downto Low(ArrData) do<br/>    write(ArrData[i].datStrOrg);<br/>  writeln;<br/>  *}</span><br/>  l <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    inc<span class=\"br0\">(</span>l<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>ArrData<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">datStrOrg</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>l<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  l<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> Low<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">with</span> ArrData<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      move<span class=\"br0\">(</span>datStrOrg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy1\">,</span>length<span class=\"br0\">(</span>datStrOrg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>l<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>datStrOrg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> HighestInt<span class=\"br0\">(</span><span class=\"kw1\">var</span>  ArrData<span class=\"sy1\">:</span>tArrData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  ExtendCount<span class=\"br0\">(</span>ArrData<span class=\"sy1\">,</span>FindMaxLen<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  SortArrData<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ArrDataOutput<span class=\"br0\">(</span>ArrData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  tmpData <span class=\"sy1\">:</span> tArrData<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Source1</span><br/>  setlength<span class=\"br0\">(</span>tmpData<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>source1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    InsertData<span class=\"br0\">(</span>tmpData<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>source1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  HighestInt<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">// Source2</span><br/>  setlength<span class=\"br0\">(</span>tmpData<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>source2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    InsertData<span class=\"br0\">(</span>tmpData<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>source2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  HighestInt<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">// Source3</span><br/>  setlength<span class=\"br0\">(</span>tmpData<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>source3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    InsertData<span class=\"br0\">(</span>tmpData<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>source3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  HighestInt<span class=\"br0\">(</span>tmpData<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">large<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>y<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>large<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">34</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">98</span><span class=\"sy0\">,</span> <span class=\"nu1\">9</span><span class=\"sy0\">,</span> <span class=\"nu1\">76</span><span class=\"sy0\">,</span> <span class=\"nu1\">45</span><span class=\"sy0\">,</span> <span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>large<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">54</span><span class=\"sy0\">,</span> <span class=\"nu1\">546</span><span class=\"sy0\">,</span> <span class=\"nu1\">548</span><span class=\"sy0\">,</span> <span class=\"nu1\">60</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> maxnum <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"st0\">\"$b$a\"</span> <span class=\"kw1\">cmp</span> <span class=\"st0\">\"$a$b\"</span> <span class=\"br0\">}</span> <span class=\"co5\">@_</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> maxnum<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> maxnum<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> maxnum<span class=\"br0\">(</span><span class=\"sy0\">*@</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"re0\">$b</span> <span class=\"sy0\">~</span> <span class=\"re0\">$a</span> <span class=\"kw1\">leg</span> <span class=\"re0\">$a</span> <span class=\"sy0\">~</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> maxnum <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">34</span> <span class=\"nu0\">3</span> <span class=\"nu0\">98</span> <span class=\"nu0\">9</span> <span class=\"nu0\">76</span> <span class=\"nu0\">45</span> <span class=\"nu0\">4</span><span class=\"sy0\">&gt;;</span><br/><span class=\"kw3\">say</span> maxnum <span class=\"sy0\">&lt;</span><span class=\"nu0\">54</span> <span class=\"nu0\">546</span> <span class=\"nu0\">548</span> <span class=\"nu0\">60</span><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 14, "block": "<pre class=\"text highlighted_source\">function catcmp(string a, string b)<br/>    return compare(b&amp;a,a&amp;b)<br/>end function<br/>\u00a0<br/>function method2(sequence s)<br/>    for i=1 to length(s) do<br/>        s[i] = sprintf(\"%d\",s[i])<br/>    end for<br/>    s = custom_sort(routine_id(\"catcmp\"),s)<br/>    return join(s,\"\")<br/>end function<br/>\u00a0<br/>? method2({1,34,3,98,9,76,45,4})<br/>? method2({54,546,548,60})</pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> maxnum<span class=\"br0\">(</span><span class=\"re0\">$nums</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.php.net/usort\"><span class=\"kw3\">usort</span></a><span class=\"br0\">(</span><span class=\"re0\">$nums</span><span class=\"sy0\">,</span>  <span class=\"kw2\">function</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <a href=\"http://www.php.net/strcmp\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es4\">$y</span><span class=\"es4\">$x</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es4\">$x</span><span class=\"es4\">$y</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$nums</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> maxnum<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> maxnum<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")  # For 'permute'</pre>"}, {"lang": "PL/I", "loc": 32, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Largest catenation of integers            16 October 2013 */</span><br/><span class=\"coMULTI\">/* Sort using method 2, comparing pairs of adjacent integers. */</span><br/>\u00a0<br/>Largest<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> s<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">char</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span> <span class=\"kw1\">controlled</span><span class=\"sy0\">,</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">allocate</span> s<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   s <span class=\"sy0\">=</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Largest integer='</span><span class=\"sy0\">,</span> Largest_integer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>largest_integer<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> sorted <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>true <span class=\"kw1\">value</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> false <span class=\"kw1\">value</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> temp <span class=\"kw1\">character</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span>sorted<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sorted <span class=\"sy0\">=</span> true<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw1\">char</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">char</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw1\">char</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">char</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>               temp <span class=\"sy0\">=</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span> sorted <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">string</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> largest_integer<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> Largest<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 17, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">Function</span> Get<span class=\"sy0\">-</span>LargestConcatenation <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Integers</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Get the length of the largest integer</span><br/>    <span class=\"re0\">$Length</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Integers</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> <span class=\"kw5\">-Descending</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-First</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span>.Length<br/>\u00a0<br/>    <span class=\"co1\">#  Convert to an array of strings,</span><br/>    <span class=\"co1\">#  sort by each number repeated Length times and truncated to Length,</span><br/>    <span class=\"co1\">#  and concatenate (join)</span><br/>    <span class=\"re0\">$Concat</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Integers</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <span class=\"re0\">$Length</span> <span class=\"br0\">)</span>.Substring<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$Length</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw5\">-Descending</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span><br/>\u00a0<br/>    <span class=\"co1\">#  Convert to integer (upsizing type if needed)</span><br/>    try           <span class=\"br0\">{</span> <span class=\"re0\">$Integer</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> int32<span class=\"br0\">]</span><span class=\"re0\">$Concat</span> <span class=\"br0\">}</span><br/>    catch <span class=\"br0\">{</span> try   <span class=\"br0\">{</span> <span class=\"re0\">$Integer</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> int64<span class=\"br0\">]</span><span class=\"re0\">$Concat</span> <span class=\"br0\">}</span><br/>            catch <span class=\"br0\">{</span> <span class=\"re0\">$Integer</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><span class=\"re0\">$Concat</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Integer</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 10, "block": "<pre class=\"prolog highlighted_source\">largest_int_v1<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>name<span class=\"sy4\">,</span> In<span class=\"sy4\">,</span> LC<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\taggregate<span class=\"br0\">(</span>max<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span> get_int<span class=\"br0\">(</span>LC<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>get_int<span class=\"br0\">(</span>LC<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpermutation<span class=\"br0\">(</span>LC<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> LV<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tname<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> LV<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">try</span>:<br/>    <span class=\"kw2\">cmp</span>     <span class=\"co1\"># Python 2 OK or NameError in Python 3</span><br/>    <span class=\"kw1\">def</span> maxnum<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                              <span class=\"kw2\">cmp</span><span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span>y:<span class=\"kw2\">cmp</span><span class=\"br0\">(</span>y+x<span class=\"sy0\">,</span> x+y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">except</span> <span class=\"kw2\">NameError</span>:<br/>    <span class=\"co1\"># Python 3</span><br/>    <span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> cmp_to_key<br/>    <span class=\"kw1\">def</span> <span class=\"kw2\">cmp</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span> <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span>y <span class=\"kw1\">else</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> x<span class=\"sy0\">==</span>y <span class=\"kw1\">else</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">def</span> maxnum<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                              key<span class=\"sy0\">=</span>cmp_to_key<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span>y:<span class=\"kw2\">cmp</span><span class=\"br0\">(</span>y+x<span class=\"sy0\">,</span> x+y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> numbers <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">98</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">546</span><span class=\"sy0\">,</span> <span class=\"nu0\">548</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Numbers:\u00a0%r<span class=\"es0\">\\n</span>  Largest integer:\u00a0%15s'</span>\u00a0% <span class=\"br0\">(</span>numbers<span class=\"sy0\">,</span> maxnum<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (largest-int ns)<br/>  (string-&gt;number (apply ~a (sort ns (\u03bb(x y) (string&gt;? (~a x y) (~a y x)))))))<br/>(map largest-int '((1 34 3 98 9 76 45 4) (54 546 548 60)))<br/>;; -&gt; '(998764543431 6054854654)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program constructs the largest integer  from an integer list using concatenation.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;     @<span class=\"sy0\">.</span>1 = <span class=\"st0\">'1  34  3  98  9  76  45  4'</span>     <span class=\"coMULTI\">/*the  1st  integer list to be used.   */</span><br/>          @<span class=\"sy0\">.</span>2 = <span class=\"st0\">'54  546  548  60'</span>               <span class=\"coMULTI\">/* \"   2nd     \"      \"   \"  \"   \"     */</span><br/>          @<span class=\"sy0\">.</span>3 = <span class=\"st0\">' 4   45   54   5'</span>               <span class=\"coMULTI\">/* \"   3rd     \"      \"   \"  \"   \"     */</span><br/>w=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/* [\u2193]   process all the integer lists.*/</span><br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>;         z=<span class=\"kw6\">space</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*keep truckin' until lists exhausted. */</span><br/>    w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"br0\">)</span>;          $=            <span class=\"coMULTI\">/*obtain maximum width to align output.*/</span><br/>        <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;  idx=<span class=\"nu0\">1</span>;   big=norm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*keep examining the list  until  done.*/</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span>  <span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>;    #=norm<span class=\"br0\">(</span>k<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*obtain an a number from the list.    */</span><br/>          L=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>big<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span> <span class=\"br0\">)</span>         <span class=\"coMULTI\">/*get the maximum length of the integer*/</span><br/>          <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>#, L, <span class=\"kw6\">left</span><span class=\"br0\">(</span>#, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"sy0\">&lt;&lt;</span>=   <span class=\"kw6\">left</span><span class=\"br0\">(</span>big, L, <span class=\"kw6\">left</span><span class=\"br0\">(</span>big, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>          big=#;                  idx=k          <span class=\"coMULTI\">/*we found a new biggie (and the index)*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                            <span class=\"coMULTI\">/* [\u2191]  find max concatenated integer. */</span><br/>        z=<span class=\"kw6\">delword</span><span class=\"br0\">(</span>z, idx, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*delete this maximum integer from list*/</span><br/>        $=$ <span class=\"sy0\">||</span> big                               <span class=\"coMULTI\">/*append   \"     \"       \"    \u2500\u2500\u2500\u25ba  $. */</span><br/>        <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*while z*/</span>                      <span class=\"coMULTI\">/* [\u2191]  process all integers in a list.*/</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'largest concatenatated integer from '</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>, w<span class=\"br0\">)</span>    <span class=\"st0\">\" is \u2500\u2500\u2500\u2500\u2500\u25ba \"</span>    $<br/>    <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span>                            <span class=\"coMULTI\">/* [\u2191]  process each list of integers. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>norm: <span class=\"kw1\">arg</span> i;  #=<span class=\"kw6\">word</span><span class=\"br0\">(</span>z, i<span class=\"br0\">)</span>;   er=<span class=\"st0\">' ***error*** '</span>;  <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>#, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">\"-\"</span>  <span class=\"kw3\">then</span> #=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>#, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>#,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <span class=\"kw1\">say</span> er <span class=\"st0\">'number'</span>  #  <span class=\"st0\">\"isn't an integer.\"</span>; <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>;  <span class=\"kw3\">end</span><br/>      <span class=\"kw1\">return</span> # <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>                               <span class=\"coMULTI\">/*it's an integer,  then normalize it. */</span></pre>"}, {"lang": "Ring", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nums=[1,34,3,98,9,76,45,4]<br/>see largestInt(8) + nl<br/>nums=[54,546,548,60]<br/>see largestInt(4) + nl<br/>\u00a0<br/>func largestInt len<br/>l = \"\"<br/>sorted = false<br/>while not sorted<br/>      sorted=true<br/>      for i=1 to len-1<br/>          a=string(nums[i])<br/>          b=string(nums[i+1])<br/>          if a+b&lt;b+a <br/>             temp = nums[i]<br/>             nums[i] = nums[i+1]<br/>             nums[i+1] = temp<br/>             sorted=false ok<br/>      next<br/>end<br/>for i=1 to len<br/>    l+=string(nums[i])<br/>next<br/>return l<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> icsort nums<br/>  nums.<span class=\"me1\">sort</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> <span class=\"st0\">\"#{y}#{x}\"</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"st0\">\"#{x}#{y}\"</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">p</span> c <span class=\"co1\"># prints nicer in Ruby 1.8</span><br/>  <span class=\"kw3\">puts</span> icsort<span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">join</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">a1$ = \"1, 34, 3, 98, 9, 76, 45, 4\"<br/>a2$ = \"54,546,548,60\"<br/>\u00a0<br/>print \"Max Num \";a1$;\" = \";maxNum$(a1$)<br/>print \"Max Num \";a2$;\" = \";maxNum$(a2$)<br/>\u00a0<br/>function maxNum$(a1$)<br/>while word$(a1$,i+1,\",\") &lt;&gt; \"\"<br/> i = i + 1<br/> a$(i) = trim$(word$(a1$,i,\",\"))<br/>wend<br/>\u00a0<br/>s = 1<br/>while s = 1<br/> s = 0<br/> for j = 1 to i -1<br/>  if a$(j)+a$(j+1) &lt; a$(j+1)+a$(j) then<br/>   h$      = a$(j)<br/>   a$(j)   = a$(j+1)<br/>   a$(j+1) = h$<br/>   s       = 1<br/>  end if<br/> next j<br/>wend<br/>\u00a0<br/>for j = 1 to i<br/> maxNum$ = maxNum$\u00a0; a$(j)<br/>next j<br/>end function</pre>"}, {"lang": "S-lang", "loc": 19, "block": "<pre class=\"text highlighted_source\">define catcmp(a, b)<br/>{<br/>   a = string(a);<br/>   b = string(b);<br/>   return strcmp(b+a, a+b);<br/>}<br/>\u00a0<br/>define maxcat(arr)<br/>{<br/>   arr = arr[array_sort(arr, &amp;catcmp)];<br/>   variable result = \"\", elem;<br/>   foreach elem (arr)<br/>     result += string(elem);<br/>   return result;<br/>}<br/>\u00a0<br/>print(\"max of series 1 is \" + maxcat([1, 34, 3, 98, 9, 76, 45, 4]));<br/>print(\"max of series 2 is \" + maxcat([54, 546, 548, 60]));<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LIFCI <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> lifci<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Long<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> list.<span class=\"me1\">permutations</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">)</span>.<span class=\"me1\">max</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>lifci<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>lifci<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 6, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cat . nums<span class=\"br0\">)</span>  <span class=\"br0\">(</span>apply <span class=\"kw1\">string-append</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>my<span class=\"sy0\">-</span>compare a b<span class=\"br0\">)</span>  <span class=\"br0\">(</span>string<span class=\"sy0\">&gt;</span>? <span class=\"br0\">(</span>cat a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>cat b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span>apply cat <span class=\"br0\">(</span>sort xs my<span class=\"sy0\">-</span>compare<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">34</span> <span class=\"nu0\">3</span> <span class=\"nu0\">98</span> <span class=\"nu0\">9</span> <span class=\"nu0\">76</span> <span class=\"nu0\">45</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">54</span> <span class=\"nu0\">546</span> <span class=\"nu0\">548</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func maxnum<span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    nums.<span class=\"me1\">sort</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span>  <span class=\"st0\">\"#{y}#{x}\"</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"st0\">\"#{x}#{y}\"</span> <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">54</span>, <span class=\"nu0\">546</span>, <span class=\"nu0\">548</span>, <span class=\"nu0\">60</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">98</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">76</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span><br/>    say maxnum<span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">join</span>.<span class=\"me1\">to_num</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> intcatsort <span class=\"br0\">{</span>nums<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lsort</span> -command <span class=\"br0\">{</span>apply <span class=\"br0\">{</span><span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"st0\">\"$y$x\"</span> - <span class=\"st0\">\"$x$y\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$nums</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 26, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> largestint(list)<br/>\tnums = Split(list,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> IsSorted = <span class=\"kw5\">True</span><br/>\t\tIsSorted = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(nums)<br/>\t\t\t<span class=\"kw3\">If</span> i &lt;&gt; <span class=\"kw4\">UBound</span>(nums) <span class=\"kw3\">Then</span><br/>\t\t\t\ta = nums(i)<br/>\t\t\t\tb = nums(i+1)<br/>\t\t\t\t<span class=\"kw3\">If</span> CLng(a&amp;b) &lt; CLng(b&amp;a) <span class=\"kw3\">Then</span><br/>\t\t\t\t\ttmpnum = nums(i)<br/>\t\t\t\t\tnums(i) = nums(i+1)<br/>\t\t\t\t\tnums(i+1) = tmpnum<br/>\t\t\t\t\tIsSorted = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(nums)<br/>\t\tlargestint = largestint &amp; nums(j)<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write largestint(WScript.Arguments(0))<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 1, "block": "<pre class=\"vim highlighted_source\"><span class=\"sy0\">%</span>s<span class=\"sy0\">/</span>\\<span class=\"br0\">(</span><span class=\"sy0\">.</span>\\<span class=\"sy0\">+</span>\\<span class=\"br0\">)</span><span class=\"sy0\">/</span>\\<span class=\"nu0\">1</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">/</span> <span class=\"sy0\">|</span> <span class=\"kw3\">sort</span><span class=\"sy0\">!</span> <span class=\"sy0\">|</span> <span class=\"sy0\">%</span>s<span class=\"sy0\">/</span>\\<span class=\"br0\">(</span><span class=\"sy0\">.</span>\\<span class=\"sy0\">+</span>\\<span class=\"br0\">)</span>\\<span class=\"nu0\">1</span>\\n<span class=\"sy0\">/</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">/</span></pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fcn bigCI(ns){<br/>   ns.apply(\"toString\").sort(fcn(a,b){ (a+b)&gt;(b+a) }).concat();<br/>}</pre>"}]}