{"task": "Greatest_element_of_a_list", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[ 1.0, 2.3, 1.1, 5.0, 3, 2.8, 2.01, 3.14159 ] ' n:max 0 a:reduce . cr<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> maximum <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>maximum <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> <span class=\"kw3\">max</span><span class=\"br0\">(</span>... <span class=\"me1\">args</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> curMax:<span class=\"kw3\">Number</span> = <span class=\"kw3\">-Infinity</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> args.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t\tcurMax = <span class=\"kw3\">Math</span>.<span class=\"kw3\">max</span><span class=\"br0\">(</span>curMax, args<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> curMax;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Max_Test isco<br/>   <span class=\"co1\">-- substitute any array type with a scalar element</span><br/>   <span class=\"kw3\">type</span> Flt_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float;<br/>\u00a0<br/>   <span class=\"co1\">-- Create an exception for the case of an empty array</span><br/>   Empty_Array\u00a0: <span class=\"kw1\">Exception</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Max<span class=\"br0\">(</span>Item\u00a0: Flt_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Max_Element\u00a0: Float\u00a0:= Float'First;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Item'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>         <span class=\"kw3\">raise</span> Empty_Array;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\u00a0<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Item'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Item<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &gt; Max_Element <span class=\"kw1\">then</span><br/>            Max_Element\u00a0:= Item<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Max_Element;<br/>   <span class=\"kw1\">end</span> Max;<br/>\u00a0<br/>   Buf\u00a0: Flt_Array\u00a0:= <span class=\"br0\">(</span>-<span class=\"nu0\">275.0</span>, -<span class=\"nu0\">111.19</span>, <span class=\"nu0\">0.0</span>, -<span class=\"nu0\">1234568.0</span>, <span class=\"nu0\">3.14159</span>, -<span class=\"nu0\">3.14159</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Float'Image<span class=\"br0\">(</span>Max<span class=\"br0\">(</span>Buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Max_Test;</pre>"}, {"lang": "Aime", "loc": 15, "block": "<pre class=\"text highlighted_source\">integer<br/>lmax(list l)<br/>{<br/>    integer max, x;<br/>\u00a0<br/>    max = l[0];<br/>\u00a0<br/>    for (, x in l) {<br/>        if (max &lt; x) {<br/>            max = x;<br/>        }<br/>    }<br/>\u00a0<br/>    max;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 30, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># substitute any array type with a scalar element #</span><br/><span class=\"kw4\">MODE</span> FLT <span class=\"sy1\">=</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># create an exception for the case of an empty array #</span><br/><span class=\"kw4\">PROC</span> raise empty array <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">GO TO</span> except empty array<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> max <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>FLT item<span class=\"br0\">)</span>FLT<span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> item <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> item <span class=\"kw2\">THEN</span><br/>      raise empty array<span class=\"sy1\">;</span> <span class=\"kw7\">SKIP</span><br/>   <span class=\"kw2\">ELSE</span><br/>     FLT max element <span class=\"sy1\">:=</span> item<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> item<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>     <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> item <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> item <span class=\"kw2\">DO</span><br/>       <span class=\"kw2\">IF</span> item<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> max element <span class=\"kw2\">THEN</span><br/>         max element <span class=\"sy1\">:=</span> item<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>       <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>     max element<br/>   <span class=\"kw2\">FI</span><br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># max #</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span>FLT buf <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"re1\">-275.0</span><span class=\"sy1\">,</span> <span class=\"re1\">-111.19</span><span class=\"sy1\">,</span> <span class=\"re1\">0.0</span><span class=\"sy1\">,</span> <span class=\"re1\">-1234568.0</span><span class=\"sy1\">,</span> <span class=\"kw23\">pi</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"kw23\">pi</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>max<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">EXIT</span><br/>  except empty array<span class=\"sy1\">:</span><br/>    <span class=\"kw7\">SKIP</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 27, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% simple list type                                                      \u00a0%<br/>    record IntList( integer val; reference(IntList) next );<br/>\u00a0<br/>   \u00a0% find the maximum element of an IntList, returns 0 for an empty list   \u00a0%<br/>    integer procedure maxElement( reference(IntList) value list )\u00a0;<br/>        begin<br/>            integer maxValue;<br/>            reference(IntList) listPos;<br/>            maxValue\u00a0:= 0;<br/>            listPos \u00a0:= list;<br/>            if listPos not = null then begin<br/>               \u00a0% non-empty list                                            \u00a0%<br/>                maxValue\u00a0:= val(listPos);<br/>                listPos \u00a0:= next(listPos);<br/>                while listPos not = null do begin<br/>                    if val(listPos) &gt; maxValue then maxValue\u00a0:= val(listPos);<br/>                    listPos\u00a0:= next(listPos)<br/>                end while_listPos_ne_null\u00a0;<br/>            end if_listPos_ne_null\u00a0;<br/>            maxValue<br/>        end maxElement\u00a0;<br/>\u00a0<br/>   \u00a0% test the maxElement procedure                                         \u00a0%<br/>    write( maxElement( IntList( -767, IntList( 2397, IntList( 204, null ) ) ) ) )<br/>\u00a0<br/>end.</pre>"}, {"lang": "AntLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">max|range[10]</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">LIST\u21902 4 6 3 8<br/>\u2308/LIST</pre>"}, {"lang": "AppleScript", "loc": 11, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/>max<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">on</span> max<span class=\"br0\">(</span>aList<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">set</span> _curMax <span class=\"kw3\">to</span> <span class=\"kw2\">first</span> <span class=\"kw1\">item</span> <span class=\"kw3\">of</span> aList<br/>\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">in</span> <span class=\"br0\">(</span>rest <span class=\"kw3\">of</span> aList<span class=\"br0\">)</span><br/>\t\t<span class=\"kw3\">if</span> i &gt; _curMax <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> _curMax <span class=\"kw3\">to</span> <span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> i<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t<span class=\"kw3\">return</span> _curMax<br/><span class=\"kw3\">end</span> max<br/>\u00a0</pre>"}, {"lang": "Applesoft BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\"> 100 REMMAX<br/> 110 R$ = \"\":E$ = \"\"<br/> 120 L =  LEN (L$)<br/> 130 IF L = 0 THEN  RETURN<br/> 140 FOR I = 1 TO L<br/> 150     C$ =  MID$ (L$,I,1)<br/> 160     SP = C$ = \" \"<br/> 170     IF SP THEN  GOSUB 200<br/> 180     E$ = E$ + C$<br/> 190 NEXT I<br/> 200 C$ = \"\"<br/> 210 IF E$ = \"\" THEN  RETURN<br/> 220 V =  VAL (E$):V$ = R$<br/> 230 E$ = \"\":E = V$ = \"\"<br/> 240 IF E AND V = 0 THEN  RETURN<br/> 250 R$ =  STR$ (V)<br/> 260 IF E THEN  RETURN<br/> 270 R =  VAL (V$)<br/> 280 IF R &lt; V THEN  RETURN<br/> 290 R$ = V$: RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">list <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>   x <span class=\"sy0\">:=</span> x <span class=\"sy0\">&lt;</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>\u00a0? <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>\u00a0: x<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Max <span class=\"sy0\">=</span> <span class=\"re0\">%x%</span></pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\">$ awk 'func max<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">&gt;</span>r<span class=\"br0\">)</span>r=a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<span class=\"kw6\">return</span> r<span class=\"br0\">}</span><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=<span class=\"nu0\">42</span>;a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>=<span class=\"nu0\">33</span>;a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>=<span class=\"nu0\">21</span>;<span class=\"kw5\">print</span> max<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">42</span></pre>"}, {"lang": "Axe", "loc": 7, "block": "<pre class=\"text highlighted_source\">Lbl MAX<br/>0\u2192M<br/>While {r\u2081}<br/> {r\u2081}&gt;M?{r\u2081}\u2192M<br/>End<br/>M<br/>Return</pre>"}, {"lang": "BASIC", "loc": 46, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> addVal <span class=\"br0\">(</span>value <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> findMax% <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckshared.shtml\"><span class=\"kw3\">SHARED</span></a> vals<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckshared.shtml\"><span class=\"kw3\">SHARED</span></a> valCount <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> y <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>valCount <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">'''''begin test run</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckrandomize.shtml\"><span class=\"kw3\">RANDOMIZE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/><span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/>    y <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    addVal y<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> y; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\": \"</span>; findMax<br/><span class=\"co1\">'''''end test run</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> addVal <span class=\"br0\">(</span>value <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <span class=\"kw1\">IF</span> valCount <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"co1\">'this is needed for BASICs that don't support REDIM PRESERVE</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> v2<span class=\"br0\">(</span>valCount<span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>        <span class=\"kw1\">FOR</span> tmp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> valCount<br/>            v2<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> vals<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>        <span class=\"kw1\">NEXT</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    valCount <span class=\"sy0\">=</span> valCount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> vals<span class=\"br0\">(</span>valCount<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> valCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"co1\">'also needed for BASICs that don't support REDIM PRESERVE</span><br/>        <span class=\"kw1\">FOR</span> tmp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> valCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            vals<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v2<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>        <span class=\"kw1\">NEXT</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    vals<span class=\"br0\">(</span>valCount<span class=\"br0\">)</span> <span class=\"sy0\">=</span> value<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> findMax%<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmp1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> tmp2 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <span class=\"kw1\">FOR</span> tmp1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> valCount<br/>        <span class=\"kw1\">IF</span> vals<span class=\"br0\">(</span>tmp1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> tmp2 <span class=\"kw1\">THEN</span> tmp2 <span class=\"sy0\">=</span> vals<span class=\"br0\">(</span>tmp1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>    findMax <span class=\"sy0\">=</span> tmp2<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 17, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::max.cmd</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a=.<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">a</span><span class=\"sy0\">%</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \".\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p a=\"Input stream: \"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">max</span> res <span class=\"sy0\">%</span><span class=\"re3\">a</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">max</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/shift.html\"><span class=\"kw1\">shift</span></a> /2<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">2</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">1</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop</pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      ListOfValues$ = \"13, 0, -6, 2, 37, -10, 12\"<br/>      PRINT \"Maximum value = \"\u00a0; FNmax(ListOfValues$)<br/>      END<br/>\u00a0<br/>      DEF FNmax(list$)<br/>      LOCAL index%, number, max<br/>      max = VAL(list$)<br/>      REPEAT<br/>        index% = INSTR(list$, \",\", index%+1)<br/>        number = VAL(MID$(list$, index%+1))<br/>        IF number &gt; max THEN max = number<br/>      UNTIL index% = 0<br/>      = max</pre>"}, {"lang": "bc", "loc": 9, "block": "<pre class=\"text highlighted_source\">define m(a[], n) {<br/>    auto m, i<br/>\u00a0<br/>    m = a[0]<br/>    for (i = 1; i &lt; n; i++) {<br/>        if (a[i] &gt; m) m = a[i]<br/>    }<br/>    return(m)<br/>}</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">001pv            &lt;<br/>    &gt;&amp;:01g`#v_1+#^<a class=\"__cf_email__\" data-cfemail=\"1b442b2a7c355b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    ^p10    &lt;</pre>"}, {"lang": "Bracmat", "loc": 14, "block": "<pre class=\"text highlighted_source\">  ( biggest<br/>  =   max<br/>    .  \u00a0!arg:<br/>      |  \u00a0!arg:%?max\u00a0?arg<br/>        &amp;\u00a0!arg:? (%@:&gt;!max:?max) (?&amp;~)<br/>      |\u00a0!max<br/>  )<br/>&amp; out$(\"1:\" biggest$(5 100000 -5 aap 3446 NOOT mies 0))<br/>&amp; out$(\"2:\" biggest$)<br/>&amp;   out<br/>  $ ( \"3:\"<br/>        biggest<br/>      $ (5 100000 -5 43756243978569758/13 3365864921428443 87512487957139516/27 3446)<br/>    )</pre>"}, {"lang": "Brat", "loc": 9, "block": "<pre class=\"text highlighted_source\">max = { list |<br/>  list.reduce { n, max |<br/>    true? n &gt; max<br/>      { max = n }<br/>      { max }<br/>  }<br/>}<br/>\u00a0<br/>p max [3 4 1 2]</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {88 99 77 66 55}&gt;]<br/>99<br/>\u00a0</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">float</span> max<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> count<span class=\"sy0\">,</span> <span class=\"kw4\">float</span> values<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> idx<span class=\"sy0\">;</span><br/>     <span class=\"kw4\">float</span> themax <span class=\"sy0\">=</span> values<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> count<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          themax <span class=\"sy0\">=</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> themax <span class=\"sy0\">?</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:</span> themax<span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">return</span> themax<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 7, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;cassert&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Ty<span class=\"sy1\">&gt;</span> Ty max<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> count, Ty values<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"kw3\">assert</span><span class=\"br0\">(</span>count <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"kw1\">return</span> <span class=\"sy2\">*</span>std<span class=\"sy4\">::</span><span class=\"me2\">max_element</span><span class=\"br0\">(</span>values, values <span class=\"sy2\">+</span> count<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 3, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>values<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>max <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"co1\">; evaluates to 4</span><br/><span class=\"co1\">;; If the values are already in a collection, use apply:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> max <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; evaluates to 4</span></pre>"}, {"lang": "CMake", "loc": 19, "block": "<pre class=\"cmake highlighted_source\"><span class=\"co1\"># max(var [value1 value2...]) sets var to the maximum of a list of</span><br/><span class=\"co1\"># integers. If list is empty, sets var to NO.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>max var<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>first YES<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>choice NO<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:foreach\"><span class=\"kw1\">foreach</span></a><span class=\"sy0\">(</span>item <span class=\"re0\">${ARGN}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span>first<span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>choice <span class=\"re0\">${item}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>first NO<span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:elseif\"><span class=\"kw1\">elseif</span></a><span class=\"sy0\">(</span>choice <span class=\"kw3\">LESS</span> <span class=\"re0\">${item}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>choice <span class=\"re0\">${item}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endforeach\"><span class=\"kw1\">endforeach</span></a><span class=\"sy0\">(</span>item<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> <span class=\"re0\">${choice}</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>max<span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>list 33 11 44 22 66 55<span class=\"sy0\">)</span><br/>max<span class=\"sy0\">(</span>maximum <span class=\"re0\">${list}</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">STATUS</span> <span class=\"st0\">\"maximum of <span class=\"es1\">${list}</span> =&gt; <span class=\"es1\">${maximum}</span>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MAX</span><span class=\"br0\">(</span>nums <span class=\"br0\">(</span><span class=\"kw3\">ALL</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 18, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># using Math library</span><br/>max1 = <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/> Math.<span class=\"me1\">max</span>.<span class=\"me1\">apply</span> <span class=\"kw4\">null</span><span class=\"sy0\">,</span> list<br/>\u00a0<br/><span class=\"co1\"># using no libraries</span><br/>max2 = <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/> maxVal = list<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/> <span class=\"kw1\">for</span> value <span class=\"kw1\">in</span> list<br/>  maxVal = value <span class=\"kw1\">if</span> value <span class=\"sy0\">&gt;</span> maxVal<br/> maxVal<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Test it</span><br/>a = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>alert<span class=\"br0\">(</span>max1<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\". The answer is \"</span><span class=\"sy0\">+</span>max2<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 8, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> theList <span class=\"sy0\">=</span> <span class=\"st0\">'1, 1000, 250, 13'</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfparam</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"maxNum\"</span> <span class=\"kw6\">default</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> <span class=\"kw6\">list</span><span class=\"sy0\">=</span><span class=\"st0\">\"#theList#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"i\"</span><span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> i <span class=\"kw7\">gt</span> maxNum<span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> maxNum <span class=\"sy0\">=</span> i<span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#maxNum#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>reduce #'<span class=\"kw1\">max</span> values<span class=\"br0\">)</span> <span class=\"co1\">; find max of a list</span><br/><span class=\"br0\">(</span>loop for x in values<br/>      maximize x<span class=\"br0\">)</span> <span class=\"co1\">; alternative way to find max of a list</span></pre>"}, {"lang": "Component Pascal", "loc": 35, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Operations;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Args<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Max<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tmax<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tmax <span class=\"sy0\">:=</span> <span class=\"kw3\">MIN</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tmax <span class=\"sy0\">:=</span> <span class=\"kw3\">MAX</span><span class=\"br0\">(</span>max<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> max<br/><span class=\"kw1\">END</span> Max;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoMax<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span>\t<br/>\tsq<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\tp<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/>\ti<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>done<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> p.<span class=\"me1\">argc</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>sq<span class=\"sy0\">,</span>p.<span class=\"me1\">argc</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p.<span class=\"me1\">argc</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\t\tsq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> n<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"max:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Max<span class=\"br0\">(</span>sq<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> DoMax;<br/>\u00a0<br/><span class=\"kw1\">END</span> Operations.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span>.<span class=\"me1\">searching</span> <span class=\"sy0\">:</span> maxElement<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span> <span class=\"sy0\">:</span> writeln<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">maxElement</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 16, "block": "<pre class=\"text highlighted_source\">/*This is a function which returns the greatest element in a list of numbers */<br/>num findGreatestElement(List&lt;num&gt; list){<br/>  num greatestElement = list[0];<br/>  for (num element in list){<br/>    if (element&gt;greatestElement) {<br/>      greatestElement = element;<br/>    }<br/>  }  <br/>  return greatestElement;<br/>}<br/>/* and this is a shorter version */<br/>import 'dart:math';<br/>num findGreatestElement(List&lt;num&gt; list){<br/>  return list.reduce(max);<br/>}<br/>\u00a0</pre>"}, {"lang": "dc", "loc": 12, "block": "<pre class=\"text highlighted_source\">[sm llx] sg<br/>[lm p q] sq<br/>[d lm &lt;u s_ z 0 =q llx] sl<br/>[d sm] su<br/>\u00a0<br/>[\"Put list of numbers on the stack starting here, then execute g\"] s_<br/>\u00a0<br/>3.14159265358979 sp<br/>\u00a0<br/>_275.0 _111.19 0.0 _1234568.0 lp lp _1 *<br/>\u00a0<br/>lgx</pre>"}, {"lang": "DCL", "loc": 12, "block": "<pre class=\"dcl highlighted_source\">$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"45,65,81,12,0,13,-56,123,-123,888,12,0\"</span><br/>$ max <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\",\"</span>, list <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> loop:</span><br/>$  element <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> i, <span class=\"st0\">\",\"</span>, list <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">if</span> element <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\",\"</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done<br/>$  element <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> element <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">if</span> element <span class=\"sy0\">.gt.</span> max <span class=\"kw1\">then</span> $ max <span class=\"sy0\">=</span> element<br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">goto</span> loop<br/>$<span class=\"re2\"> done:</span><br/>$ <span class=\"kw1\">show symbol</span> max</pre>"}, {"lang": "Delphi", "loc": 25, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> GElemLIst<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFNDEF FPC}</span><br/>  <span class=\"co2\">{$Apptype Console}</span><br/><span class=\"co2\">{$ENDIF}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  math<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  MaxCnt <span class=\"sy3\">=</span> <span class=\"nu0\">10000</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  IntArr <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  fltArr <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">double</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>fltArr<span class=\"sy1\">,</span>MaxCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//filled with 0</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>IntArr<span class=\"sy1\">,</span>MaxCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//filled with 0.0</span><br/>  randomize<span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">random</span><span class=\"br0\">(</span>MaxCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span>      <span class=\"co1\">//choose a random place</span><br/>  IntArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  fltArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Math<span class=\"sy1\">.</span><span class=\"kw3\">MaxIntValue</span><span class=\"br0\">(</span>IntArr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// Array of Integer</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Math<span class=\"sy1\">.</span><span class=\"kw3\">MaxValue</span><span class=\"br0\">(</span>fltArr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 7, "block": "<pre class=\"text highlighted_source\">max lst:<br/>    lst! 0<br/>    for item in copy lst:<br/>         if &gt; item dup:<br/>              item drop<br/>\u00a0<br/>!. max [ 10 300 999 9 ]</pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span> <span class=\"co1\"># non-finalized syntax feature</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> max<span class=\"br0\">(</span><span class=\"br0\">[</span>first<span class=\"br0\">]</span> <span class=\"sy0\">+</span> rest<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> first <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> rest <span class=\"br0\">{</span> _.<span class=\"me1\">max</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; a random length list of random values</span><br/><span class=\"br0\">(</span>define <span class=\"kw1\">L</span> <span class=\"br0\">(</span>map <span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"kw1\">L</span><br/><span class=\"kw1\">L</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">24</span> <span class=\"nu0\">60</span> <span class=\"nu0\">83</span> <span class=\"nu0\">8</span> <span class=\"nu0\">24</span> <span class=\"nu0\">60</span> <span class=\"nu0\">31</span> <span class=\"nu0\">97</span> <span class=\"nu0\">96</span> <span class=\"nu0\">65</span> <span class=\"nu0\">9</span> <span class=\"nu0\">41</span> <span class=\"nu0\">64</span> <span class=\"nu0\">24</span> <span class=\"nu0\">22</span> <span class=\"nu0\">57</span> <span class=\"nu0\">73</span> <span class=\"nu0\">17</span> <span class=\"nu0\">6</span> <span class=\"nu0\">28</span> <span class=\"nu0\">77</span> <span class=\"nu0\">58</span> <span class=\"nu0\">18</span> <span class=\"nu0\">13</span> <span class=\"nu0\">27</span> <span class=\"nu0\">22</span> <span class=\"nu0\">41</span> <span class=\"nu0\">69</span> <span class=\"nu0\">85</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; find max</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">max</span> <span class=\"kw1\">L</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">97</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MaxVal(SET OF INTEGER s)\u00a0:= MAX(s);<br/>\u00a0<br/>//example usage<br/>\u00a0<br/>SetVals\u00a0:= [4,8,16,2,1];<br/>MaxVal(SetVals) //returns 16;<br/>\u00a0</pre>"}, {"lang": "Efene", "loc": 24, "block": "<pre class=\"text highlighted_source\">list_max = fn ([Head:Rest]) {<br/>  list_max(Rest, Head)<br/>}<br/>\u00a0<br/>list_max = fn ([], Res) {<br/>  Res<br/>} <br/>fn ([Head:Rest], Max) when Head &gt; Max {<br/>  list_max(Rest, Head)<br/>} <br/>fn ([_Head:Rest], Max) {<br/>  list_max(Rest, Max)<br/>}<br/>\u00a0<br/>list_max1 = fn ([H:T]) {<br/>  lists.foldl(fn erlang.max:2, H, T)<br/>}<br/>\u00a0<br/>@public<br/>run = fn () {<br/>    io.format(\"~p~n\", [list_max([9, 4, 3, 8, 5])])<br/>    io.format(\"~p~n\", [list_max1([9, 4, 3, 8, 5])])<br/>}<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 42, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tGREATEST_ELEMENT <span class=\"br0\">[</span>G <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+comparable&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">COMPARABLE</span></a><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">--Implementation</span><br/>\u00a0<br/>\tis_max <span class=\"br0\">(</span>element<span class=\"sy0\">:</span> G maximum<span class=\"sy0\">:</span> G<span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> maximum <span class=\"sy0\">&gt;=</span> element<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tmax <span class=\"br0\">(</span>list<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>G<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> G<br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tnot_empty<span class=\"sy0\">:</span> <span class=\"kw2\">not</span> list.<span class=\"me1\">is_empty</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> list <span class=\"br0\">[</span>list.<span class=\"me1\">lower</span><span class=\"br0\">]</span><br/>\t\t\tacross<br/>\t\t\t\tlist <span class=\"kw2\">as</span> i<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> i.<span class=\"me1\">item</span>.<span class=\"me1\">max</span> <span class=\"br0\">(</span><span class=\"kw3\">Result</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tis_part_of_array<span class=\"sy0\">:</span> list.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"kw3\">Result</span><span class=\"br0\">)</span><br/>\t\t\tis_maximum<span class=\"sy0\">:</span> list.<span class=\"me1\">for_all</span> <span class=\"br0\">(</span><span class=\"kw2\">agent</span> is_max<span class=\"br0\">(</span><span class=\"sy0\">?</span>, <span class=\"kw3\">Result</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tgreatest_element <span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>G<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> G<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> max <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 6, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>findBy p (x::xs) = foldl (\\x y | p x y -&gt; x | else -&gt; y) x xs<br/>maximum = findBy (&gt;)<br/>\u00a0<br/>maximum [1..10]</pre>"}, {"lang": "Elena", "loc": 29, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>extension op<br/>{<br/>    maximal<br/>    [<br/>        enumerator en\u00a0:= self enumerator.<br/>\u00a0<br/>        object maximal\u00a0:= $nil.<br/>        while (en next)<br/>        [<br/>            var item\u00a0:= en get.<br/>            if ($nil == maximal)<br/>            [<br/>                maximal\u00a0:= item<br/>            ]; if (maximal &lt; item)<br/>            [<br/>                maximal\u00a0:= item<br/>            ]<br/>        ].<br/>\u00a0<br/>        ^ maximal   <br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine((1,2,3,4,20,10,9,8) maximal).<br/>].</pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.max([3,1,4,1,5,9,2,6,5,3])<br/>9</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">max</span> <span class=\"br0\">(</span>first-arg <span class=\"sy0\">&amp;</span>rest more-args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> more-args<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>max-rest <span class=\"br0\">(</span><span class=\"kw1\">apply</span> '<span class=\"kw1\">max</span> more-args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> first-arg max-rest<span class=\"br0\">)</span><br/>\t    first-arg<br/>\t  max-rest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    first-arg<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">&gt;</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">max</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"nu0\">9</span></pre>"}, {"lang": "ERRE", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MAXLIST<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>! VAR L$,EL$,CH$,I%,MAX<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0! CLS<br/>  INPUT(\"Lista\",L$)<br/>  L$=L$+CHR$(32)<br/>  MAX=-1.7E+38<br/>  FOR I%=1 TO LEN(L$) DO<br/>    CH$=MID$(L$,I%,1)<br/>    IF CH$&lt;&gt;CHR$(32) THEN\u00a0! blank is separator<br/>       EL$=EL$+CH$<br/>     ELSE<br/>       IF VAL(EL$)&gt;MAX THEN MAX=VAL(EL$) END IF<br/>       EL$=\"\"<br/>    END IF<br/>  END FOR<br/>  PRINT(\"Max list element is\";MAX)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;v=random(1,100);<br/>&gt;max(v)<br/> 0.997492478596<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 25, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> aeval<span class=\"br0\">(</span> <span class=\"kw2\">sequence</span> sArr<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> id <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span> sArr <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sArr<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span> id<span class=\"sy2\">,</span> <span class=\"br0\">{</span> sArr<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> sArr<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">object</span> biggun<br/><span class=\"kw1\">function</span> biggest<span class=\"br0\">(</span> <span class=\"kw2\">object</span> elem <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>elem<span class=\"sy2\">,</span> biggun<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        biggun <span class=\"sy1\">=</span> elem<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">return</span> elem<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>biggun <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw2\">object</span> a<br/>a <span class=\"sy1\">=</span> aeval<span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1234</span><span class=\"sy2\">,</span><span class=\"nu0\">62</span><span class=\"sy2\">,</span><span class=\"nu0\">234</span><span class=\"sy2\">,</span><span class=\"nu0\">12</span><span class=\"sy2\">,</span><span class=\"nu0\">34</span><span class=\"sy2\">,</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"biggest\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> biggun <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> s<br/>s <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"antelope\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"dog\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"cat\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"cow\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"wolf\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"wolverine\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"aardvark\"</span><span class=\"br0\">}</span> <br/>biggun <span class=\"sy1\">=</span> <span class=\"st0\">\"ant\"</span><br/>a <span class=\"sy1\">=</span> aeval<span class=\"br0\">(</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"biggest\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>biggun<span class=\"br0\">}</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Excel", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=MAX(3;2;1;4;5;23;1;2)<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">36</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">max</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">int</span> <span class=\"sy0\">=</span> <span class=\"nu0\">36</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">: supremum ( seq -- elt ) [ ] [ max ] map-reduce\u00a0;</pre>"}, {"lang": "Fancy", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1,-2,2,4,6,-4,-1,5] max println  # =&gt; 6</pre>"}, {"lang": "Fantom", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Greatest<br/>{<br/>  public static Void main () <br/>  {<br/>    Int[] values\u00a0:= [1,2,3,4,5,6,7,8,9]<br/>    Int greatest\u00a0:= values.max<br/>    echo (greatest)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: array-max ( addr len -- max )<br/>  dup 0= if nip exit then<br/>  over @  rot cell+  rot 1-<br/>  cells bounds\u00a0?do  i @ max  cell +loop\u00a0;<br/>\u00a0<br/>: stack-max ( n ... m count -- max ) 1\u00a0?do max loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test_maxval<br/>\u00a0<br/><span class=\"kw3\">integer</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw3\">real</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">y</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">5.0</span>,<span class=\"nu0\">60.0</span>,<span class=\"nu0\">1.0</span>,<span class=\"nu0\">678.0</span>,<span class=\"nu0\">0.0</span><span class=\"br0\">]</span><br/>\u00a0<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(I5)'</span><span class=\"br0\">)</span> <span class=\"kw4\">maxval</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(F5.1)'</span><span class=\"br0\">)</span> <span class=\"kw4\">maxval</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_maxval</pre>"}, {"lang": "FreeBASIC", "loc": 25, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> MaxElement<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Dim</span> max <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = a<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &gt; max <span class=\"kw1\">Then</span> max = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> max<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, n<br/><span class=\"kw1\">Input</span> <span class=\"st0\">\"How many values are to be input \"</span>;  n<br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">End</span><br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"  Value\"</span>; i; <span class=\"st0\">\"\u00a0: \"</span>;<br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"\"</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Dim</span> max <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = MaxElement<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The greatest value is\"</span>; max<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span><br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[max[[1,2,3,5,10,20]]]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 1, "block": "<pre class=\"text highlighted_source\">println( max([1,2,3,-1,0]) )</pre>"}, {"lang": "Futhark", "loc": 1, "block": "<pre class=\"text highlighted_source\">let main (xs: []f64) = reduce f64.max (-f64.inf) xs</pre>"}, {"lang": "GAP", "loc": 6, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>\u00a0<br/>L\u00a0:= List([1 .. 100], n -&gt; Random(1, 10));<br/>\u00a0<br/>MaximumList(L);<br/># 10</pre>"}, {"lang": "Go", "loc": 11, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"github.com/gonum/floats\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>floats<span class=\"sy3\">.</span>Max<span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 2, "block": "<pre class=\"text highlighted_source\">{$-1=}:max;<br/>[1 4 8 42 6 3]max # Example usage</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">my<span class=\"sy0\">_</span>max <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a></pre>"}, {"lang": "HicEst", "loc": 24, "block": "<pre class=\"hicest highlighted_source\">\u00a0<br/>   max_value <span class=\"sy1\">=</span> <span class=\"kw1\">MAX</span><span class=\"br0\">(</span> <span class=\"sy1\">-</span><span class=\"nu0\">123</span><span class=\"sy1\">,</span>  <span class=\"nu0\">234.56</span><span class=\"sy1\">,</span> <span class=\"nu0\">345.678</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>456E3<span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">455</span><span class=\"br0\">)</span> <span class=\"co1\">! built-in function MAX(...)</span><br/>\u00a0<br/><span class=\"co1\">! or for an array:</span><br/>   max_value <span class=\"sy1\">=</span> <span class=\"kw1\">MAX</span><span class=\"br0\">(</span> array_of_values <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! or to find a maximum value in a file named filename:</span><br/>   <span class=\"kw1\">CHARACTER</span> List<span class=\"sy1\">,</span> filename<span class=\"sy1\">=</span><span class=\"st0\">'Greatest element of a list.hic'</span> <span class=\"co1\">! filename contains this script</span><br/>   <span class=\"kw1\">REAL</span> values<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">! unknown number of values, allocate more below</span><br/>\u00a0<br/>   <span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>filename<span class=\"sy1\">,</span> BINary<span class=\"sy1\">,</span> LENgth<span class=\"sy1\">=</span><span class=\"kw1\">len</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">ALLOCATE</span><span class=\"br0\">(</span>values<span class=\"sy1\">,</span> <span class=\"kw1\">len</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">! number of values &lt;= half byte count of file</span><br/>   <span class=\"co1\">! read all values, returns item count in values_found:</span><br/>   <span class=\"kw1\">READ</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>filename<span class=\"sy1\">,</span> ItemS<span class=\"sy1\">=</span>values_found<span class=\"sy1\">,</span> CLoSe<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> values <span class=\"co1\">! no Format needed for plain text numbers</span><br/>\u00a0<br/>   max_value <span class=\"sy1\">=</span> <span class=\"kw1\">MAX</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">! write values found in filename and result to spreadsheet type dialog window:</span><br/>   <span class=\"kw1\">DLG</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>values<span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>max_value<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span>values_found<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> max_value<span class=\"sy1\">,</span> values_found<span class=\"sy1\">,</span> values <span class=\"co1\">! pasted to line below</span><br/>   <span class=\"co1\">! max_value=345.678; values_found=30; values(1)=-123; values(2)=234.56; values(3)=345.678; values(4)=-456E3; values(5)=-455; values(6)=1; values(7)=2; values(8)=1; values(9)=0; values(10)=0; ...truncated</span><br/> <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Hoon", "loc": 4, "block": "<pre class=\"text highlighted_source\">:- \u00a0%say<br/>|=  [^ [a=(list ,@) ~] ~]<br/>:- \u00a0%noun<br/>  (snag 0 (sort a gte))</pre>"}, {"lang": "i", "loc": 13, "block": "<pre class=\"text highlighted_source\">concept largest(l) {<br/>\tlarge = l[0]<br/>\tfor element in l<br/>\t\tif element &gt; large<br/>\t\t\tlarge = element<br/>\t\tend<br/>\tend<br/>\treturn large<br/>}<br/>\u00a0<br/>software {<br/>\tprint(largest([23, 1313, 21, 35757, 4, 434, 232, 2, 2342]))<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> l<br/>   l <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>max<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> max<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> max<br/>   max <span class=\"sy1\">:=</span> l<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">every</span> max <span class=\"sy1\">&lt;:=</span> <span class=\"sy1\">!</span>l<br/>   <span class=\"kw1\">return</span> max<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   &gt;./</pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">float</span> max<span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">[</span><span class=\"br0\">]</span> values<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchelementexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchElementException</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchelementexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchElementException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">float</span> themax <span class=\"sy0\">=</span> values<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> idx <span class=\"sy0\">&lt;</span> values.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> themax<span class=\"br0\">)</span><br/>            themax <span class=\"sy0\">=</span> values<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> themax<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw4\">Math</span>.<span class=\"me1\">max</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 5</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">[1, 3, 1.0] | max # =&gt; 3<br/>\u00a0<br/>[ {\"a\": 1},  {\"a\":3}, {\"a\":1.0}] | max  # =&gt; {\"a\": 3}</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">julia&gt; maximum([1,3,3,7])<br/>7<br/>\u00a0<br/>julia&gt; maximum([pi,e+2/5,cos(6)/5,sqrt(91/10)])<br/>3.141592653589793<br/>\u00a0<br/>julia&gt; maximum([1,6,Inf])<br/>Inf<br/>\u00a0<br/>julia&gt; maximum(Float64[])<br/>maximum: argument is empty<br/>at In[138]:1<br/> in maximum at abstractarray.jl:1591<br/>\u00a0</pre>"}, {"lang": "K", "loc": 2, "block": "<pre class=\"text highlighted_source\">  |/ 6 1 7 4<br/>7</pre>"}, {"lang": "Klong", "loc": 4, "block": "<pre class=\"text highlighted_source\">list::[ 1.0 2.3 1.1 5.0 3 2.8 2.01 3.14159 77 ]<br/>|/list<br/>|/ [ 1.0 2.3 1.1 5.0 3 2.8 2.01 3.14159 66 ]<br/>|/ 1.0,2.3,1.1,5.0,3,2.8,2.01,3.14159,55</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Number of values to be input = \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> array <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         print<span class=\"br0\">(</span><span class=\"st0\">\"Value ${i + 1} = \"</span><span class=\"br0\">)</span><br/>         array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The greatest element is ${array.max()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 6, "block": "<pre class=\"text highlighted_source\">define greatest(a::array) =&gt; {<br/>\treturn (#a-&gt;sort&amp;)-&gt;last<br/>}<br/>\u00a0<br/>local(x = array(556,1,7344,4,7,52,22,55,88,122,55,99,1222,578))<br/>greatest(#x)</pre>"}, {"lang": "LFE", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> <span class=\"kw1\">max</span> '<span class=\"br0\">[</span><span class=\"nu0\">9</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">9</span></pre>"}, {"lang": "Liberty BASIC", "loc": 12, "block": "<pre class=\"lb highlighted_source\">aList$<span class=\"sy0\">=</span> <span class=\"st0\">\"1 15 -5 6 39 1.5 14\"</span><br/>\u00a0<br/>maxVal <span class=\"sy0\">=</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>aList$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>token$ <span class=\"sy0\">=</span> <span class=\"st0\">\"?\"</span><br/><span class=\"kw1\">while</span> token$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>    index <span class=\"sy0\">=</span> index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    token$ <span class=\"sy0\">=</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span>aList$<span class=\"sy0\">,</span> index<span class=\"br0\">)</span><br/>    aVal <span class=\"sy0\">=</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>token$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> aVal <span class=\"sy0\">&gt;</span> maxVal <span class=\"kw1\">then</span> maxVal <span class=\"sy0\">=</span> aVal<br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"maxVal = \"</span>;maxVal</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">l = [1,7,5]<br/>put max(l)<br/>-- 7</pre>"}, {"lang": "LiveCode", "loc": 1, "block": "<pre class=\"text highlighted_source\">put max(2,3,6,7,4,1)</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to max\u00a0:a\u00a0:b<br/>output ifelse\u00a0:a &gt;\u00a0:b [:a] [:b]<br/>end<br/>\u00a0<br/>print reduce \"max [...]</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to bigger\u00a0:a\u00a0:b<br/>  output ifelse [greater?\u00a0:a\u00a0:b] [:a] [:b]<br/>end<br/>\u00a0<br/>to max\u00a0:lst<br/>  output reduce \"bigger\u00a0:lst<br/>end</pre>"}, {"lang": "Logtalk", "loc": 10, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/>max([<span class=\"re0\">X</span>| <span class=\"re0\">Xs</span>], <span class=\"re0\">Max</span>) <span class=\"sy2\">:-</span><br/>    max(<span class=\"re0\">Xs</span>, <span class=\"re0\">X</span>, <span class=\"re0\">Max</span>).<br/>\u00a0<br/>max([], <span class=\"re0\">Max</span>, <span class=\"re0\">Max</span>).<br/>max([<span class=\"re0\">X</span>| <span class=\"re0\">Xs</span>], <span class=\"re0\">Aux</span>, <span class=\"re0\">Max</span>) <span class=\"sy2\">:-</span><br/>    (   <span class=\"re0\">X</span> <span class=\"sy1\">@&gt;</span> <span class=\"re0\">Aux</span> <span class=\"sy1\">-&gt;</span><br/>        max(<span class=\"re0\">Xs</span>, <span class=\"re0\">X</span>, <span class=\"re0\">Max</span>)<br/>    <span class=\"sy1\">;</span>   max(<span class=\"re0\">Xs</span>, <span class=\"re0\">Aux</span>, <span class=\"re0\">Max</span>)<br/>    ).</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Table to store values</span><br/><span class=\"kw1\">local</span> values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"co1\">-- Read in the first number from stdin</span><br/><span class=\"kw1\">local</span> new_val <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"st0\">\"*n\"</span><br/><span class=\"co1\">-- Append all numbers passed in</span><br/><span class=\"co1\">-- until there are no more numbers (io.read'*n' = nil) </span><br/><span class=\"kw1\">while</span> new_val <span class=\"kw1\">do</span><br/>  values<span class=\"br0\">[</span><span class=\"sy0\">#</span>values<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> new_val<br/>  new_val <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"st0\">\"*n\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Print the max</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">math.max</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      \\\\ using Max.Data()<br/>      Print Max.data(1,2,3,4,11, 2)=11<br/>      a$=\"1 2 11 32 5\"<br/>      Print Max.Data(Param(a$))=32<br/>      a$=stack$(1,2,3,12,45,1)<br/>      Print Max.Data(Param(a$))=45<br/>\u00a0<br/>      \\\\ making a variadic function<br/>      Function Max.Item {<br/>            read n<br/>            while not empty {<br/>                  \\\\ Stackitem() return item, no drop item<br/>                  \\\\ StackItem() is StackItem(1) ' 1 for top<br/>                  \\\\ Read n drop top and assign it to n<br/>                  \\\\ continue...continue the while<br/>                  if stackitem()&gt;n then Read n\u00a0: continue<br/>                  Drop<br/>            }<br/>            =n<br/>      }<br/>\u00a0<br/>\u00a0<br/>      Print Max.Item(1,2,3,4,11, 2)=11<br/>\u00a0<br/>      A=(1,2,11,32,5)<br/>      Print Type$(A)=\"mArray\"  ' is an array, A is a pointer to Array<br/>      Print Max.Item(!A, 500, 2, 3)=500<br/>      Print Max.Item(-100, -50,\u00a0!A, 2, 3)=32<br/>      Print Max.Item(!A)=32<br/>      B=(10,400,30)<br/>      Print Max.Item(!A,\u00a0!B)=400<br/>      Print Max.Item(!B,\u00a0!A)=400<br/>      Return B, 1:=-10<br/>      Print Max.Item(!B,\u00a0!A)=32<br/>      \\\\ one line function. [] return a stack and leave current stack an empty stack<br/>      Def GetStack()=[]<br/>      \\\\ add a copy of two arrays and return a stack object<br/>      \\\\\u00a0! A pass all items to a new stack of values<br/>      \\\\\u00a0!B append to that stack of values all items <br/>      \\\\ so [] return that stack, by return a pointer<br/>      AA=GetStack(!B,\u00a0!A)<br/>      \\\\ AA=Stack(Stack(B),Stack(A)) ' has the same effect<br/>      \\\\ AA has a pointer to that stack<br/>      Print Type$(AA)=\"mStiva\"  'is a stack object<br/>\u00a0<br/>      Print Max.Item(!AA)=32<br/>      \\\\ stack AA is empty now  (this is a difference with Arrays A and B)<br/>      Print Len(AA)=0    <br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 11, "block": "<pre class=\"text highlighted_source\">&gt; max( { 1, 2,  Pi, exp(1) } ); # set<br/>                                   Pi<br/>\u00a0<br/>&gt; max( [ 1, 2,  Pi, exp(1) ] ); # list<br/>                                   Pi<br/>\u00a0<br/>&gt; max( 1, 2,  Pi, exp(1) ); # sequence<br/>                                   Pi<br/>\u00a0<br/>&gt; max( Array( [ 1, 2,  Pi, exp(1) ] ) ); # Array<br/>                                   Pi</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">Max[1, 3, 3, 7]<br/>Max[Pi,E+2/5,17 Cos[6]/5,Sqrt[91/10]]<br/>Max[1,6,Infinity]<br/>Max[]</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>maxValue<span class=\"br0\">]</span> = findmax<span class=\"br0\">(</span>setOfValues<span class=\"br0\">)</span><br/>   maxValue = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span>setOfValues<span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">u\u00a0: makelist(random(1000), 50)$<br/>\u00a0<br/>/* Three solutions */<br/>lreduce(max, u);<br/>\u00a0<br/>apply(max, u);<br/>\u00a0<br/>lmax(u);</pre>"}, {"lang": "MAXScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">fn MaxValue AnArray = <br/>(<br/>\tif AnArray.count\u00a0!= 0 then<br/>\t(<br/>\t\tlocal maxVal = 0<br/>\t\tfor i in AnArray do if i &gt; maxVal then maxVal = i<br/>\t\tmaxVal<br/>\t)<br/>\telse undefined<br/>)</pre>"}, {"lang": "Metafont", "loc": 3, "block": "<pre class=\"text highlighted_source\">show max(4,5,20,1);<br/>show max((12,3), (10,10), (25,5));<br/>show max(\"hello\", \"world\", \"Hello World\");</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u041f0\t\u0421/\u041f\tx=0\t07\t\u0418\u041f0\tx&lt;0\t00\tmax\t\u0411\u041f\t00</pre>"}, {"lang": "Modula-3", "loc": 7, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">GENERIC</span> <span class=\"kw1\">INTERFACE</span> Maximum<span class=\"br0\">(</span>Elem<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">EXCEPTION</span> Empty;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Max<span class=\"br0\">(</span><span class=\"kw1\">READONLY</span> a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> Elem.<span class=\"me1\">T</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Elem.<span class=\"me1\">T</span> <span class=\"kw1\">RAISES</span> <span class=\"br0\">{</span>Empty<span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">END</span> Maximum.</pre>"}, {"lang": "MontiLang", "loc": 12, "block": "<pre class=\"text highlighted_source\">2 5 3 12 9 9 56 2 ARR<br/>\u00a0<br/>LEN VAR l .<br/>0 VAR i .<br/>FOR l<br/>    GET i SWAP<br/>    i 1 + VAR i .<br/>ENDFOR .<br/>STKLEN 1 - VAR st .<br/>FOR st<br/>    MAX<br/>ENDFOR PRINT</pre>"}, {"lang": "MUMPS", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MV(A,U)<br/>\u00a0;A is a list of values separated by the string U<br/> NEW MAX,T,I<br/> FOR I=1:1 SET T=$PIECE(A,U,I) QUIT:T=\"\"  S MAX=$SELECT(($DATA(MAX)=0):T,(MAX&lt;T):T,(MAX&gt;=T):MAX)<br/> QUIT MAX<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 28, "block": "<pre class=\"text highlighted_source\">using System;<br/>using Nemerle.Collections;<br/>using System.Linq;<br/>using System.Console;<br/>\u00a0<br/>module SeqMax<br/>{<br/>    SeqMax[T, U] (this seq\u00a0: T)\u00a0: U<br/>      where T\u00a0: Seq[U]<br/>      where U\u00a0: IComparable<br/>    {<br/>        $[s | s in seq].Fold(seq.First(), (x, y) =&gt; {if (x.CompareTo(y) &gt; 0) x else y})<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def numbers = [1, 12, 3, -5, 6, 23];<br/>        def letters = ['s', 'p', 'a', 'm'];<br/>\u00a0<br/>        // using SeqMax() method (as task says to \"create a function\")<br/>        WriteLine($\"numbers.SeqMax() = $(numbers.SeqMax())\");<br/>        WriteLine($\"letters.SeqMax() = $(letters.SeqMax())\");<br/>\u00a0<br/>        // using the already available Max() method<br/>        WriteLine($\"numbers.Max() = $(numbers.Max())\");<br/>        WriteLine($\"letters.Max() = $(letters.Max())\")<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 33, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>rn = Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>maxElmts = <span class=\"nu0\">100</span><br/>dlist = double<span class=\"br0\">[</span>maxElmts<span class=\"br0\">]</span><br/>rlist = Rexx<span class=\"br0\">[</span>maxElmts<span class=\"br0\">]</span><br/><span class=\"kw1\">loop</span> r_ = <span class=\"nu0\">0</span> to maxElmts - <span class=\"nu0\">1</span><br/>  nr = rn.<span class=\"me0\">nextGaussian</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span><br/>  dlist<span class=\"br0\">[</span>r_<span class=\"br0\">]</span> = nr<br/>  rlist<span class=\"br0\">[</span>r_<span class=\"br0\">]</span> = Rexx<span class=\"br0\">(</span>nr<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> r_<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Max double:'</span> Rexx<span class=\"br0\">(</span>getMax<span class=\"br0\">(</span>dlist<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Max   Rexx:'</span> getMax<span class=\"br0\">(</span>rlist<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method getMax<span class=\"br0\">(</span>dlist = double<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> double<br/>  dmax = Double.<span class=\"me0\">MIN_VALUE</span><br/>  <span class=\"kw1\">loop</span> n_ = <span class=\"nu0\">0</span> to dlist.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> dlist<span class=\"br0\">[</span>n_<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dmax <span class=\"kw3\">then</span> dmax = dlist<span class=\"br0\">[</span>n_<span class=\"br0\">]</span><br/>    <span class=\"kw3\">end</span> n_<br/>  <span class=\"kw1\">return</span> dmax<br/>\u00a0<br/>method getMax<span class=\"br0\">(</span>dlist = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> Rexx<br/>  dmax = Rexx<span class=\"br0\">(</span>Double.<span class=\"me0\">MIN_VALUE</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> n_ = <span class=\"nu0\">0</span> to dlist.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    dmax = dlist<span class=\"br0\">[</span>n_<span class=\"br0\">]</span>.<span class=\"kw6\">max</span><span class=\"br0\">(</span>dmax<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> n_<br/>  <span class=\"kw1\">return</span> dmax<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#max\"><span class=\"kw1\">max</span></a> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">max 1 2 3 4<br/>=4</pre>"}, {"lang": "Nim", "loc": 1, "block": "<pre class=\"text highlighted_source\">echo max([2,3,4,5,6,1])</pre>"}, {"lang": "Oberon-2", "loc": 40, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> GreatestElement1;<br/><span class=\"kw1\">IMPORT</span><br/>  ADT<span class=\"sy0\">:</span>ArrayList<span class=\"sy0\">,</span><br/>  Object<span class=\"sy0\">:</span>Boxed<span class=\"sy0\">,</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  a<span class=\"sy0\">:</span> ArrayList.<span class=\"me1\">ArrayList</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"br0\">)</span>;<br/>  max<span class=\"sy0\">:</span> Boxed.<span class=\"me1\">LongInt</span>;<br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Max<span class=\"br0\">(</span>al<span class=\"sy0\">:</span> ArrayList.<span class=\"me1\">ArrayList</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boxed.<span class=\"me1\">LongInt</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    item<span class=\"sy0\">,</span> max<span class=\"sy0\">:</span> Boxed.<span class=\"me1\">LongInt</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    max <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"kw3\">MIN</span><span class=\"br0\">(</span><span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; al.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      item <span class=\"sy0\">:=</span> al.<span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">IF</span> item.<span class=\"me1\">value</span> &gt; max.<span class=\"me1\">value</span> <span class=\"kw1\">THEN</span> max <span class=\"sy0\">:=</span> item <span class=\"kw1\">END</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> max<br/>  <span class=\"kw1\">END</span> Max;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  a <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>ArrayList.<span class=\"me1\">ArrayList</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>  a.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  a.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  a.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  a.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">43</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  a.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  max <span class=\"sy0\">:=</span> Max<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Max: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>max.<span class=\"me1\">value</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> GreatestElement1.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 4, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>values <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 23, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"br0\">(</span>WithMaximum<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>maximumValue;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"br0\">(</span>WithMaximum<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>maximumValue<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>self count<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span>;<br/>  <span class=\"kw4\">id</span> maybeMax <span class=\"sy0\">=</span> self<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">id</span> el <span class=\"kw1\">in</span> self <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>maybeMax respondsToSelector<span class=\"sy0\">:</span> <span class=\"kw1\">@selector</span><span class=\"br0\">(</span>compare<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t <span class=\"br0\">[</span>el respondsToSelector<span class=\"sy0\">:</span> <span class=\"kw1\">@selector</span><span class=\"br0\">(</span>compare<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">]</span>       <span class=\"sy0\">&amp;&amp;</span><br/>\t <span class=\"br0\">[</span>el isKindOfClass<span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> class<span class=\"br0\">]</span><span class=\"br0\">]</span>               <span class=\"sy0\">&amp;&amp;</span><br/>\t <span class=\"br0\">[</span>maybeMax isKindOfClass<span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> class<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>maybeMax compare<span class=\"sy0\">:</span> el<span class=\"br0\">]</span> <span class=\"sy0\">==</span> NSOrderedAscending <span class=\"br0\">)</span><br/>\tmaybeMax <span class=\"sy0\">=</span> el;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span>; <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> maybeMax;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> my_max <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinvalid_arg\"><span class=\"kw3\">invalid_arg</span></a> <span class=\"st0\">\"empty list\"</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> x xs</pre>"}, {"lang": "Octave", "loc": 2, "block": "<pre class=\"octave highlighted_source\">m <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/max.html\"><span class=\"kw6\">max</span></a><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span><span class=\"nu0\">3</span><span class=\"sy5\">,</span><span class=\"nu0\">20</span><span class=\"sy5\">,</span><span class=\"nu0\">10</span><span class=\"sy5\">,</span><span class=\"nu0\">9</span><span class=\"sy5\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy5\">;</span>       <span class=\"co2\">% m = 20</span><br/><span class=\"br0\">[</span>m<span class=\"sy5\">,</span> im<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/max.html\"><span class=\"kw6\">max</span></a><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span><span class=\"nu0\">3</span><span class=\"sy5\">,</span><span class=\"nu0\">20</span><span class=\"sy5\">,</span><span class=\"nu0\">10</span><span class=\"sy5\">,</span><span class=\"nu0\">9</span><span class=\"sy5\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy5\">;</span> <span class=\"co2\">% im = 4</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1, 2.3, 5.6, 1, 3, 4 ] reduce(#max)</pre>"}, {"lang": "Ol", "loc": 17, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">; builtin function</span><br/><span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">; 5</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> x '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; using to numbers list</span><br/><span class=\"br0\">(</span>apply <span class=\"kw1\">max</span> x<span class=\"br0\">)</span> <span class=\"co1\">; 5</span><br/>\u00a0<br/><span class=\"co1\">; using list reducing</span><br/><span class=\"br0\">(</span>fold <span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> x<span class=\"br0\">)</span> <span class=\"co1\">; 5</span><br/>\u00a0<br/><span class=\"co1\">; manual lambda-comparator</span><br/><span class=\"br0\">(</span>print <span class=\"br0\">(</span>fold <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>less? a b<span class=\"br0\">)</span> b a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; 5</span><br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 17, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">-- routine that will work with any ordered collection or sets and bags containing numbers.</span><br/>::routine listMax<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> list <br/>  items list~makearray   <span class=\"co1\">-- since we're dealing with different collection types, reduce to an array</span><br/>  <span class=\"kw1\">if</span> items~isEmpty <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>nil   <span class=\"co1\">-- return a failure indicator.  could also raise an error, if desired</span><br/>  largest = items<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"co1\">-- note, this method does call max one extra time.  This could also use the </span><br/>  <span class=\"co1\">-- do i = 2 to items~size to avoid this</span><br/>  <span class=\"kw1\">do</span> item <span class=\"kw2\">over</span> items <br/>     largest = <span class=\"kw6\">max</span><span class=\"br0\">(</span>item, largest<span class=\"br0\">)</span> <br/>  <span class=\"kw3\">end</span>  <br/>\u00a0<br/>  <span class=\"kw1\">return</span> largest <br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 6, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Maximum</span> X<span class=\"sy0\">|</span>Xr<span class=\"br0\">}</span>         <span class=\"co1\">%% pattern-match on argument to make sure the list is not empty</span><br/>     <span class=\"br0\">{</span>FoldL Xr Value<span class=\"sy0\">.</span>max X<span class=\"br0\">}</span>  <span class=\"co1\">%% fold the binary function Value.max over the list</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Maximum <span class=\"br0\">[</span>1 2 3 4 3<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vecmax</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 101, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> GElemLIst<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFNDEF FPC}</span><br/>  <span class=\"co2\">{$Apptype Console}</span><br/><span class=\"co2\">{$else}</span><br/>  <span class=\"co2\">{$Mode Delphi}</span><br/><span class=\"co2\">{$ENDIF}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  MaxCnt <span class=\"sy3\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>   tMaxIntPos<span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                  mpMax<span class=\"sy1\">,</span><br/>                  mpPos <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   tMaxfltPos<span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                  mpMax <span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>                  mpPos <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">function</span> FindMaxInt<span class=\"br0\">(</span><span class=\"kw1\">const</span> ia<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>tMaxIntPos<span class=\"sy1\">;</span><br/><span class=\"co1\">//delivers the highest Element and position of integer array</span><br/><span class=\"kw1\">var</span><br/>  i  <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  tmp<span class=\"sy1\">,</span>max<span class=\"sy1\">,</span>ps<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>MaxInt<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//i = index of last Element</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>ia<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> i&gt;<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">Begin</span><br/>    max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ia<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> i&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ia<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> max&lt; tmp <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmp<span class=\"sy1\">;</span><br/>        ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">mpMax</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Max<span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">mpPos</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ps<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FindMaxflt<span class=\"br0\">(</span><span class=\"kw1\">const</span> ia<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> double<span class=\"br0\">)</span><span class=\"sy1\">:</span>tMaxfltPos<span class=\"sy1\">;</span><br/><span class=\"co1\">//delivers the highest Element and position of double array</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span><br/>  ps<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  max <span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  tmp <span class=\"sy1\">:</span> <span class=\"sy2\">^</span>double<span class=\"sy1\">;</span><span class=\"co1\">//for 32-bit version runs faster</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>  max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>MaxInt<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//i = index of last Element</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>ia<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> i&gt;<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">Begin</span><br/>    max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ia<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>ia<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> i&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">IF</span> tmp<span class=\"sy2\">^</span>&gt;max  <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmp<span class=\"sy2\">^</span><span class=\"sy1\">;</span><br/>        ps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">mpMax</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Max<span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">mpPos</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ps<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  IntArr <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  fltArr <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> double<span class=\"sy1\">;</span><br/>  ErgInt <span class=\"sy1\">:</span> tMaxINtPos<span class=\"sy1\">;</span><br/>  ErgFlt <span class=\"sy1\">:</span> tMaxfltPos<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  randomize<span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>fltArr<span class=\"sy1\">,</span>MaxCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//filled with 0</span><br/>  setlength<span class=\"br0\">(</span>IntArr<span class=\"sy1\">,</span>MaxCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//filled with 0.0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>fltArr<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    fltArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MaxCnt<span class=\"sy3\">*</span>random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>IntArr<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    IntArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> round<span class=\"br0\">(</span>fltArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  ErgInt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FindMaxInt<span class=\"br0\">(</span>IntArr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'FindMaxInt '</span><span class=\"sy1\">,</span>ErgInt<span class=\"sy1\">.</span><span class=\"me1\">mpMax</span><span class=\"sy1\">,</span><span class=\"st0\">' @ '</span><span class=\"sy1\">,</span>ErgInt<span class=\"sy1\">.</span><span class=\"me1\">mpPos</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Ergflt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FindMaxflt<span class=\"br0\">(</span>fltArr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'FindMaxFlt '</span><span class=\"sy1\">,</span>Ergflt<span class=\"sy1\">.</span><span class=\"me1\">mpMax</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">' @ '</span><span class=\"sy1\">,</span>Ergflt<span class=\"sy1\">.</span><span class=\"me1\">mpPos</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> max <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span> <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"kw3\">max</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">max</span> <span class=\"sy0\">&lt;</span>zero <span class=\"kw3\">one</span> two three four five six seven eight nine<span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">?max({1,1234,62,234,12,34,6})<br/>?max({\"ant\", \"antelope\", \"dog\", \"cat\", \"cow\", \"wolf\", \"wolverine\", \"aardvark\"})</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/max\"><span class=\"kw3\">max</span></a><span class=\"br0\">(</span><span class=\"re0\">$values</span><span class=\"br0\">)</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">: (max 2 4 1 3)               # Return the maximal argument<br/>-&gt; 4<br/>: (apply max (2 4 1 3))       # Apply to a list<br/>-&gt; 4<br/>: (maxi abs (2 -4 -1 3))      # Maximum according to given function<br/>-&gt; -4</pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/>maximum <span class=\"sy0\">=</span> A<span class=\"br0\">(</span><span class=\"kw1\">lbound</span><span class=\"br0\">(</span>A<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">lbound</span><span class=\"br0\">(</span>A<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>A<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> maximum <span class=\"sy0\">&lt;</span> A<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> maximum <span class=\"sy0\">=</span> A<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">/findmax {<br/>  dup 0 get exch   \u00a0% put the first element underneath the array<br/>  {max} forall     \u00a0% replace it by the respective larger value if necessary<br/>} def</pre>"}, {"lang": "PowerBASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">FUNCTION PBMAIN()<br/>    DIM x AS LONG, y AS LONG, z AS LONG<br/>    RANDOMIZE TIMER<br/>\u00a0<br/>    FOR x = 1 TO 10<br/>        y = INT(RND * 10000)<br/>        z = MAX(y, z)<br/>    NEXT<br/>\u00a0<br/>   \u00a0? STR$(z) &amp; \" was the highest value\"<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Maximum <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Maximum</span><span class=\"br0\">)</span>.Maximum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 2, "block": "<pre class=\"prolog highlighted_source\"> <span class=\"sy1\">?-</span> max_list<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">9</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>M <span class=\"sy6\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 13, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.f Max <span class=\"br0\">(</span>Array a.f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Protected</span> last, i, <span class=\"kw3\">ret</span>.f<br/>\u00a0<br/>   <span class=\"kw3\">ret</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>   <br/>   last <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> last<br/>      <span class=\"kw1\">If</span> <span class=\"kw3\">ret</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>         <span class=\"kw3\">ret</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>   <span class=\"kw1\">Next</span><br/>\u00a0<br/>   <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw3\">ret</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">max</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 3, "block": "<pre class=\"q highlighted_source\">q<span class=\"br0\">)</span>l:<span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><br/>q<span class=\"br0\">)</span><span class=\"kw1\">max</span> l<br/><span class=\"nu0\">9</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">v &lt;- c(1, 2, 100, 50, 0)<br/>print(max(v)) # 100</pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(max 12 9 8 17 1)</pre>"}, {"lang": "RapidQ", "loc": 10, "block": "<pre class=\"vb highlighted_source\">functioni FindMax(...) <span class=\"kw4\">as</span> <span class=\"kw1\">double</span><br/>    <span class=\"kw4\">dim</span> x <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> x = 1 <span class=\"kw3\">to</span> ParamValCount<br/>        <span class=\"kw3\">IF</span> ParamVal(x) &gt; Result <span class=\"kw3\">THEN</span> Result = ParamVal(x)<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">End</span> functioni<br/>\u00a0<br/><span class=\"kw4\">Print</span> FindMax(50, 20, 65, 20, 105)<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>rascal&gt;import List;<br/>ok<br/>\u00a0<br/>rascal&gt;max([1,2,3,4]);<br/>int: 4<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 1 2 3 4 ] max \"%d\\n\" print</pre>"}, {"lang": "REBOL", "loc": 14, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Maximum Value\"<br/>    URL: http://rosettacode.org/wiki/Maximum_Value<br/>]</span><br/>\u00a0<br/><span class=\"kw3\">max</span>: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Find maximum value in a list.\"</span><br/>\tvalues <span class=\"br0\">[</span>series<span class=\"sy0\">!</span><span class=\"br0\">]</span> <span class=\"st0\">\"List of values.\"</span><br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>\t<span class=\"kw3\">first</span> <span class=\"kw3\">maximum-of</span> values <br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Max of\"</span>  <span class=\"kw3\">mold</span> d: <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"st0\">\"is\"</span>  <span class=\"kw3\">max</span> d<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Max of\"</span>  <span class=\"kw3\">mold</span> d: <span class=\"br0\">[</span>-<span class=\"nu0\">5</span> -<span class=\"nu0\">4</span> -<span class=\"nu0\">3</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"st0\">\"is\"</span>  <span class=\"kw3\">max</span> d<span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 4, "block": "<pre class=\"text highlighted_source\">Red []<br/>list: [1 2 3 5 4]<br/>print  last sort list<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 9, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds the  greatest element  in a list (of the first 25 reversed primes).*/</span><br/>$ = <span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'list of numbers = '</span>  $                      <span class=\"coMULTI\">/*show the original list of numbers.   */</span><br/>big=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*choose an initial biggest number.    */</span><br/># = <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> #                <span class=\"coMULTI\">/*traipse through the list,  find max. */</span><br/>                     big=<span class=\"kw6\">max</span><span class=\"br0\">(</span>big, <span class=\"kw6\">word</span><span class=\"br0\">(</span>$, j<span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*use the  MAX  BIF to find the biggie.*/</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the biggest value in a list of '</span>     #      <span class=\"st0\">\" numbers is: \"</span>     big</pre>"}, {"lang": "Ring", "loc": 2, "block": "<pre class=\"text highlighted_source\">aList = [1,2,4,5,10,6,7,8,9]<br/>see max(aList)</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">values.<span class=\"me1\">max</span></pre>"}, {"lang": "Run BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">list$= \"1 12 -55 46 41 3.66 19\"<br/>while word$(list$,i+1,\" \") &lt;&gt; \"\"<br/>  mx = max(mx,val(word$(list$,i+1,\" \")))<br/>  i = i + 1<br/>wend<br/>print mx</pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let nums = [1,2,39,34,20];<br/>    println!(\"{:?}\", nums.iter().max());<br/>    println!(\"{}\", nums.iter().max().unwrap());<br/>}</pre>"}, {"lang": "S-lang", "loc": 2, "block": "<pre class=\"text highlighted_source\">variable a = [5, -2, 0, 4, 666, 7];<br/>print(max(a));</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> noSweat<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> Int<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> list.<span class=\"me1\">max</span><br/><span class=\"co1\">// Test</span><br/>assert<span class=\"br0\">(</span>noSweat<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>apply <span class=\"kw1\">max</span> values<span class=\"br0\">)</span> <span class=\"co1\">; find max of a list</span></pre>"}, {"lang": "Seed7", "loc": 20, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: max (in array integer: values) is func<br/>  result<br/>    var integer: max is 0;<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    max\u00a0:= values[1];<br/>    for index range 2 to length(values) do<br/>      if values[index] &gt; max then<br/>        max\u00a0:= values[index];<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(max([] (1, 2, 6, 4, 3)));<br/>  end func;</pre>"}, {"lang": "Self", "loc": 1, "block": "<pre class=\"text highlighted_source\">(1 &amp; 2 &amp; 3 &amp; 4 &amp; 20 &amp; 10 &amp; 9 &amp; 8) asVector reduceWith: [:a\u00a0:b | a max: b] \"returns 20\"</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">values.<span class=\"me1\">max</span>;</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">#(1 2 3 4 20 10 9 8) reduce: [|\u00a0:a\u00a0:b | a max: b]</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3 4 20 10 9 8<span class=\"br0\">)</span></span> fold: <span class=\"br0\">[</span>:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> | a max: <span class=\"re5\">b</span><span class=\"br0\">]</span> <span class=\"coMULTI\">\"returns 20\"</span></pre>"}, {"lang": "SNOBOL4", "loc": 4, "block": "<pre class=\"text highlighted_source\">while   a = trim(input)    \u00a0:f(stop)<br/>        max = gt(a,max) a  \u00a0:(while)<br/>stop    output = max<br/>end</pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">fun max_of_ints [] = raise Empty<br/>  | max_of_ints (x::xs) = foldl Int.max x xs</pre>"}, {"lang": "Stata", "loc": 2, "block": "<pre class=\"text highlighted_source\">qui sum x<br/>di r(max)</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">if let x = [4,3,5,9,2,3].maxElement() {<br/>  print(x) // prints 9<br/>}</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> values <span class=\"br0\">{</span><span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">max</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$values</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 9</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 -2 3.1415 0 42 7] [max] foldl1</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 -2 3.1415 0 42 7] [max] foldl1</pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 -2 3.1415 0 42 7] [max] foldl1</pre>"}, {"lang": "TUSCRIPT", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>LOOP n,list=\"2'4'0'3'1'2'-12\"<br/>IF (n==1)          greatest=VALUE(list)<br/>IF (list&gt;greatest) greatest=VALUE(list)<br/>ENDLOOP<br/>PRINT greatest<br/>\u00a0</pre>"}, {"lang": "uBasic/4tH", "loc": 14, "block": "<pre class=\"text highlighted_source\">Push 13, 0, -6, 2, 37, -10, 12         ' Push values on the stack<br/>Print \"Maximum value = \"\u00a0; FUNC(_FNmax(7))<br/>End                                    ' We pushed seven values<br/>\u00a0<br/>_FNmax Param(1)<br/>  Local(3)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"6f0b2f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = -(2^31)                         ' Set maximum to a tiny value<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"afcdef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 To <a class=\"__cf_email__\" data-cfemail=\"3d5c7d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                     ' Get all values from the stack<br/>    <a class=\"__cf_email__\" data-cfemail=\"a8cbe8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = Pop()<br/>    If <a class=\"__cf_email__\" data-cfemail=\"aecdee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; <a class=\"__cf_email__\" data-cfemail=\"f89cb8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> THEN <a class=\"__cf_email__\" data-cfemail=\"680c28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"9cffdc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>            ' Change maximum if required<br/>  Next<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"573317\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' Return the maximum</pre>"}, {"lang": "UNIX Shell", "loc": 12, "block": "<pre class=\"bash highlighted_source\">max<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">m</span>=<span class=\"re4\">$1</span><br/>  <span class=\"kw3\">shift</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">[</span> <span class=\"re4\">$#</span> <span class=\"re5\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">do</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$m</span>\"</span> <span class=\"re5\">-lt</span> <span class=\"st0\">\"$1\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">m</span>=<span class=\"re4\">$1</span><br/>    <span class=\"kw3\">shift</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$m</span>\"</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>max <span class=\"nu0\">10</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">57</span> <span class=\"nu0\">1</span> <span class=\"nu0\">12</span></pre>"}, {"lang": "Ursa", "loc": 12, "block": "<pre class=\"text highlighted_source\">def max (int&lt;&gt; list)<br/>\tdecl int max i<br/>\tset max list&lt;0&gt;<br/>\u00a0<br/>\tfor (set i 1) (&lt; i (- (size list) 1)) (inc i)<br/>\t\tif (&gt; list&lt;i&gt; max)<br/>\t\t\tset max list&lt;i&gt;<br/>\t\tend if<br/>\tend for<br/>\u00a0<br/>\treturn max<br/>end max</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import flo<br/>\u00a0<br/>#cast\u00a0%e<br/>\u00a0<br/>example = fleq$^ &lt;-1.,-2.,0.,5.,4.,6.,1.,-5.&gt;</pre>"}, {"lang": "V", "loc": 2, "block": "<pre class=\"text highlighted_source\">[4 3 2 7 8 9] 0 [max] fold<br/>=9</pre>"}, {"lang": "VBA", "loc": 16, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> a<br/>   a = Array(1, 15, 19, 25, 13, 0, -125, 9)<br/>   Debug.<span class=\"kw4\">Print</span> Max_VBA(a)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Max_VBA(Arr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, temp <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   temp = Arr(<span class=\"kw4\">LBound</span>(Arr))<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Arr) + 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Arr)<br/>      <span class=\"kw3\">If</span> Arr(i) &gt; temp <span class=\"kw3\">Then</span> temp = Arr(i)<br/>   <span class=\"kw3\">Next</span> i<br/>   Max_VBA = temp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 15, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> greatest_element(arr)<br/>\ttmp_num = 0<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\t<span class=\"kw3\">If</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\ttmp_num = arr(i)<br/>\t\t<span class=\"kw3\">ElseIf</span> arr(i) &gt; tmp_num <span class=\"kw3\">Then</span><br/>\t\t\ttmp_num = arr(i)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tgreatest_element = tmp_num<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.Echo greatest_element(Array(1,2,3,44,5,6,8))<br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 1, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw3\">max</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Visual Basic", "loc": 21, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> ListMax(anArray())<br/>    <span class=\"co1\">'return the greatest element in array anArray<br/></span>    <span class=\"co1\">'use LBound and UBound to find its length<br/></span>    n0 = <span class=\"kw4\">LBound</span>(anArray)<br/>    n = <span class=\"kw4\">UBound</span>(anArray)<br/>    theMax = anArray(n0)<br/>    <span class=\"kw3\">For</span> i = (n0 + 1) <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">If</span> anArray(i) &gt; theMax <span class=\"kw3\">Then</span> theMax = anArray(i)<br/>    <span class=\"kw3\">Next</span><br/>    ListMax = theMax<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> ListMaxTest()<br/>    <span class=\"kw4\">Dim</span> b()<br/>    <span class=\"co1\">'test function ListMax<br/></span>    <span class=\"co1\">'fill array b with some numbers:<br/></span>    b = Array(5992424433449#, 4534344439984#, 551344678, 99800000#)<br/>    <span class=\"co1\">'print the greatest element<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Greatest element is\"</span>; ListMax(b())<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "Wart", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>best f seq<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> seq<br/>    ret winner car.<span class=\"me1\">seq</span><br/>      each elem cdr.<span class=\"me1\">seq</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f elem winner<span class=\"br0\">)</span><br/>          winner <span class=\"sy0\">&lt;</span>- elem<br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"br0\">(</span><span class=\"kw2\">max</span> ... <span class=\"me1\">args</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>best <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> args<span class=\"br0\">)</span></pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@maxl [1 6 4 6 4 8 6 3]\u00a0; returns 8</pre>"}, {"lang": "XPL0", "loc": 28, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                  \\include 'code' declarations<br/>\u00a0<br/>def  Tab=$09, LF=$0A, CR=$0D, EOF=$1A;<br/>\u00a0<br/>int  CpuReg, Hand;<br/>char CmdTail($80);<br/>int  I, Max, C;<br/>\u00a0<br/>[\\Copy file name on command line, which is in the Program Segment Prefix (PSP)<br/>\\ ES=CpuReg(11), to the CmdTail array, which is in our Data Segment = CpuReg(12)<br/>CpuReg:= GetReg;                        \\point to copy of CPU registers<br/>Blit(CpuReg(11), $81, CpuReg(12), CmdTail, $7F);<br/>Hand:= FOpen(CmdTail, 0);               \\open file for input and get its handle<br/>FSet(Hand, ^I);                         \\assign handle to device 3<br/>OpenI(3);                               \\initialize file for input<br/>\u00a0<br/>Max:= 0;                                \\scan file for longest line<br/>repeat  I:= 0;<br/>        repeat  C:= ChIn(3);<br/>                case C of<br/>                  CR, LF, EOF:  [];     \\don't count these characters<br/>                  Tab:  [I:= I+8 &amp; ~7]  \\(every 8th column)<br/>                other   I:= I+1;        \\count all other characters<br/>        until   C=LF or C=EOF;<br/>        if I &gt; Max then Max:= I;<br/>until   C = EOF;<br/>Text(0, \"Longest line = \");  IntOut(0, Max);  CrLf(0);<br/>]</pre>"}, {"lang": "XSLT", "loc": 13, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span><span class=\"re2\">&gt;</span></span><br/>\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:output</span> <span class=\"re0\">method</span>=<span class=\"st0\">\"text\"</span><span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/>\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/\"</span><span class=\"re2\">&gt;</span></span><br/>\t\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:for-each</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"/*/*\"</span><span class=\"re2\">&gt;</span></span><br/>\t\t\t<span class=\"sc-1\">&lt;!-- without data-type=\"number\", items are sorted alphabetically --&gt;</span><br/>\t\t\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:sort</span> <span class=\"re0\">data-type</span>=<span class=\"st0\">\"number\"</span> <span class=\"re0\">order</span>=<span class=\"st0\">\"descending\"</span><span class=\"re2\">/&gt;</span></span><br/>\t\t\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:if</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"position() = 1\"</span><span class=\"re2\">&gt;</span></span><br/>\t\t\t\t<span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\".\"</span><span class=\"re2\">/&gt;</span></span><br/>\t\t\t<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:if<span class=\"re2\">&gt;</span></span></span><br/>\t\t<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:for-each<span class=\"re2\">&gt;</span></span></span><br/>\t<span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "Yabasic", "loc": 13, "block": "<pre class=\"text highlighted_source\">l$ = \"1,1234,62,234,12,34,6\"<br/>\u00a0<br/>dim n$(1)<br/>\u00a0<br/>n = token(l$, n$(), \", \")<br/>\u00a0<br/>for i = 1 to n<br/>\tt$ = n$(i)<br/>\tif t$ &gt; m$ then m$ = t$ end if            // or: if t$ &gt; m$ m$ = t$<br/>\tif val(t$) &gt; m then m = val(t$) end if\t  // or: if val(t$) &gt; m m = val(t$)<br/>next<br/>\u00a0<br/>print \"Alphabetic order: \", m$, \", numeric order: \", m</pre>"}, {"lang": "Yacas", "loc": 4, "block": "<pre class=\"text highlighted_source\">Max({1, 3, 3, 7})<br/>Max({Pi,Exp(1)+2/5,17*Cos(6)/5,Sqrt(91/10)})<br/>Max({1,6,Infinity})<br/>Max({})</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre>&gt; foo = [4, 3, 2, 7, 8, 9]\n&gt; max(foo)\n9</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">(1).max(1,2,3)     //--&gt;3<br/>(66).max(1,2,3.14) //--&gt;66</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 8, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Values\"</span><span class=\"co1\">''</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> z=<span class=\"nu0\">0</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> x=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"kw3\">RND</span>*<span class=\"nu0\">10</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> y=<span class=\"kw3\">RND</span>*<span class=\"nu0\">10</span>-<span class=\"nu0\">5</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> y<br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> z=<span class=\"br0\">(</span>y <span class=\"kw4\">AND</span> y&gt;z<span class=\"br0\">)</span>+<span class=\"br0\">(</span>z <span class=\"kw4\">AND</span> y&lt;z<span class=\"br0\">)</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">NEXT</span> x<br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">'\"Max. value = \";z</span></pre>"}]}