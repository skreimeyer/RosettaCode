{"task": "Kronecker_product_based_fractals", "blocks": [{"lang": "C", "loc": 116, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>cell<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> ROW<span class=\"sy0\">,</span>COL<span class=\"sy0\">,</span>SUM<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> raiseTo<span class=\"br0\">(</span><span class=\"kw4\">int</span> base<span class=\"sy0\">,</span><span class=\"kw4\">int</span> power<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>power<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> base<span class=\"sy0\">*</span>raiseTo<span class=\"br0\">(</span>base<span class=\"sy0\">,</span>power<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>cell<span class=\"sy0\">*</span> kroneckerProduct<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> inputFile<span class=\"sy0\">,</span><span class=\"kw4\">int</span> power<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tFILE<span class=\"sy0\">*</span> fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>inputFile<span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>l<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> prod<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span><span class=\"sy0\">**</span> matrix<span class=\"sy0\">;</span><br/>\tcell <span class=\"sy0\">*</span>coreList<span class=\"sy0\">,*</span>tempList<span class=\"sy0\">,*</span>resultList<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,&amp;</span>ROW<span class=\"sy0\">,&amp;</span>COL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrix <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>ROW<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>ROW<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tmatrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>COL<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>COL<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tSUM<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tcoreList <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cell<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>SUM<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tresultList <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cell<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>SUM<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tk <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>ROW<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>COL<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tcoreList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">row</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\tcoreList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">col</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\tresultList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">row</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\tresultList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">col</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\tk<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tprod <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span>power<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\ttempList <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cell<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>prod<span class=\"sy0\">*</span>k<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tl <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>prod<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>k<span class=\"sy0\">&lt;</span>SUM<span class=\"sy0\">;</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\ttempList<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">row</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>resultList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">row</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>ROW <span class=\"sy0\">+</span> coreList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">row</span><span class=\"sy0\">;</span><br/>\t\t\t\ttempList<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">col</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>resultList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">col</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>COL <span class=\"sy0\">+</span> coreList<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">col</span><span class=\"sy0\">;</span><br/>\t\t\t\tl<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>resultList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tprod <span class=\"sy0\">*=</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tresultList <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cell<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>prod<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>prod<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tresultList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">row</span> <span class=\"sy0\">=</span> tempList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">row</span><span class=\"sy0\">;</span><br/>\t\t\tresultList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">col</span> <span class=\"sy0\">=</span> tempList<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">col</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>tempList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> resultList<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> fileName<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> power<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>length<span class=\"sy0\">;</span><br/>\u00a0<br/>\tcell<span class=\"sy0\">*</span> resultList<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter input file name\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span>fileName<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter power\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>power<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tresultList <span class=\"sy0\">=</span> kroneckerProduct<span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span>power<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tinitwindow<span class=\"br0\">(</span>raiseTo<span class=\"br0\">(</span>ROW<span class=\"sy0\">,</span>power<span class=\"br0\">)</span><span class=\"sy0\">,</span>raiseTo<span class=\"br0\">(</span>COL<span class=\"sy0\">,</span>power<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Kronecker Product Fractal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlength <span class=\"sy0\">=</span> raiseTo<span class=\"br0\">(</span>SUM<span class=\"sy0\">,</span>power<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>length<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tputpixel<span class=\"br0\">(</span>resultList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">row</span><span class=\"sy0\">,</span>resultList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">col</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getch.html\"><span class=\"kw3\">getch</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: io kernel math math.matrices sequences\u00a0;<br/>\u00a0<br/>: mat-kron-pow ( m n -- m' ) 1 - [ dup kron ] times\u00a0;<br/>\u00a0<br/>: print-fractal ( m -- )<br/>    [ [ 1 = \"*\" \" \"\u00a0? write ] each nl ] each\u00a0;<br/>\u00a0<br/>{ { 0 1 0 } { 1 1 1 } { 0 1 0 } }<br/>{ { 1 1 1 } { 1 0 1 } { 1 1 1 } }<br/>{ { 0 1 1 } { 0 1 0 } { 1 1 0 } }<br/>[ 3 mat-kron-pow print-fractal ] <a class=\"__cf_email__\" data-cfemail=\"b1c5c3d8f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "gnuplot", "loc": 18, "block": "<pre class=\"gnuplot highlighted_source\">\u00a0<br/><span class=\"co1\">## KPF.gp 4/8/17 aev</span><br/><span class=\"co1\">## Plotting 3 KPF pictures.</span><br/><span class=\"co1\">## dat-files are PARI/GP generated output files: </span><br/><span class=\"co1\">#cd 'C:\\gnupData'</span><br/>\u00a0<br/><span class=\"co1\">##PKF1 from PARI/GP created file pkf1.dat</span><br/><span class=\"re0\">ttl =</span> <span class=\"st0\">\"Vicsec fractal\"</span>; <span class=\"re0\">clr =</span> <span class=\"st0\">'\"blue\"'</span>; <span class=\"re0\">filename =</span> <span class=\"st0\">\"pkf1\"</span>; <br/><span class=\"kw1\">load</span> <span class=\"st0\">\"plotff.gp\"</span><br/>\u00a0<br/><span class=\"co1\">##PKF2 from PARI/GP created file pkf2.dat</span><br/><span class=\"re0\">ttl =</span> <span class=\"st0\">\"Sierpinski carpet fractal\"</span>; <span class=\"re0\">clr =</span> <span class=\"st0\">'\"navy\"'</span>;filename <span class=\"sy0\">=</span> <span class=\"st0\">\"pkf2\"</span>;<br/><span class=\"kw1\">load</span> <span class=\"st0\">\"plotff.gp\"</span><br/>\u00a0<br/><span class=\"co1\">##PKF3 from PARI/GP created file pkf3.dat</span><br/><span class=\"re0\">ttl =</span> <span class=\"st0\">\"Sierpinski triangle fractal\"</span>; <span class=\"re0\">clr =</span> <span class=\"st0\">'\"dark-green\"'</span>; <span class=\"re0\">filename =</span> <span class=\"st0\">\"pkf3\"</span>;<br/><span class=\"kw1\">load</span> <span class=\"st0\">\"plotff.gp\"</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 84, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE OverloadedStrings #-}</span><br/><span class=\"kw1\">import</span> Reflex<br/><span class=\"kw1\">import</span> Reflex<span class=\"sy0\">.</span>Dom<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Map <span class=\"kw1\">as</span> DM <span class=\"br0\">(</span>Map<span class=\"sy0\">,</span> fromList<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Text <span class=\"br0\">(</span>Text<span class=\"sy0\">,</span> pack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Show Vicsek and Sierpinski Carpet fractals</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> mainWidget <span class=\"sy0\">$</span> <span class=\"kw1\">do</span> <br/>  elAttr <span class=\"st0\">\"h1\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"style\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"color:black\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Kroneker Product Based Fractals\"</span> <br/>  elAttr <span class=\"st0\">\"a\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"href\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"http://rosettacode.org/wiki/Kronecker_product_based_fractals#Haskell\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Rosetta Code / Kroneker product based fractals / Haskell\"</span><br/>\u00a0<br/>  <span class=\"co1\">-- Show a Vicsek fractal</span><br/>  el <span class=\"st0\">\"br\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  elAttr <span class=\"st0\">\"h2\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"style\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"color:brown\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Vicsek Fractal\"</span> <br/>  showFractal <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">-- Show a Sierpinski Carpet fractal</span><br/>  el <span class=\"st0\">\"br\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  elAttr <span class=\"st0\">\"h2\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"style\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"color:brown\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Sierpinski Carpet Fractal\"</span> <br/>  showFractal <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Size in pixels of an individual cell</span><br/>cellSize <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>cellSize <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"co1\">-- Given a \"seed\" matrix, generate and display a fractal.</span><br/>showFractal <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showFractal seed <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> boardAttrs w h <span class=\"sy0\">=</span> <br/>         fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"width\"</span> <span class=\"sy0\">,</span> pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> w <span class=\"sy0\">*</span> cellSize<span class=\"br0\">)</span><br/>                  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"height\"</span><span class=\"sy0\">,</span> pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> h <span class=\"sy0\">*</span> cellSize<span class=\"br0\">)</span><br/>                  <span class=\"br0\">]</span><br/>      fractals <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>kronekerProduct seed<span class=\"br0\">)</span> seed<br/>      shown <span class=\"sy0\">=</span> fractals <span class=\"sy0\">!!</span> <span class=\"nu0\">3</span> <span class=\"co1\">-- the fourth fractal (starting from 0)</span><br/>      w <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> shown<br/>      h <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> shown<br/>  elSvgns <span class=\"st0\">\"svg\"</span> <span class=\"br0\">(</span>constDyn <span class=\"sy0\">$</span> boardAttrs w h<span class=\"br0\">)</span> <span class=\"sy0\">$</span> showMatrix shown<br/>\u00a0<br/><span class=\"co1\">-- Compute the Kroneker product of two matrices.</span><br/>kronekerProduct <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>kronekerProduct xs ys <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> m0 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>        m1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><span class=\"sy0\">.</span>m0<br/>    <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><span class=\"sy0\">.</span>transpose<span class=\"br0\">)</span> <span class=\"sy0\">$</span> m1 xs ys<br/>\u00a0<br/><span class=\"co1\">-- Show an entire matrix</span><br/>showMatrix <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showMatrix m <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> showRow <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> m <br/>\u00a0<br/><span class=\"co1\">-- Show a single horizontal row of a matrix</span><br/>showRow <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showRow <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>showCell x<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> r <br/>\u00a0<br/><span class=\"co1\">-- Show a circle in a box moved to the correct location on screen</span><br/>showCell <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showCell x <span class=\"br0\">(</span>y<span class=\"sy0\">,</span>on<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> boxAttrs <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co1\">-- Place box on screen</span><br/>        fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"transform\"</span><span class=\"sy0\">,</span> <br/>                    pack <span class=\"sy0\">$</span>    <span class=\"st0\">\"scale (\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> cellSize <span class=\"sy0\">++</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> cellSize <span class=\"sy0\">++</span> <span class=\"st0\">\") \"</span> <br/>                           <span class=\"sy0\">++</span> <span class=\"st0\">\"translate (\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y <span class=\"sy0\">++</span> <span class=\"st0\">\")\"</span> <br/>                   <span class=\"br0\">)</span><br/>                 <span class=\"br0\">]</span> <br/>\u00a0<br/>      cellAttrs <span class=\"sy0\">=</span> <span class=\"co1\">-- Draw circle in box.</span><br/>        fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"st0\">\"cx\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"0.5\"</span><span class=\"br0\">)</span><br/>                 <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"cy\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"0.5\"</span><span class=\"br0\">)</span><br/>                 <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"r\"</span><span class=\"sy0\">,</span>       <span class=\"st0\">\"0.45\"</span><span class=\"br0\">)</span><br/>                 <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"style\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"fill:green\"</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">]</span> <br/>\u00a0<br/>  <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>on<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>  <span class=\"co1\">-- Only draw circle for elements containing 1</span><br/>       elSvgns <span class=\"st0\">\"g\"</span>  <span class=\"br0\">(</span>constDyn <span class=\"sy0\">$</span> boxAttrs <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>         elSvgns <span class=\"st0\">\"circle\"</span> <span class=\"br0\">(</span>constDyn <span class=\"sy0\">$</span> cellAttrs<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">else</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Wrapper around elDynAttrNS'</span><br/>elSvgns <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Text <span class=\"sy0\">-&gt;</span> Dynamic t <span class=\"br0\">(</span>Map Text Text<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m a <span class=\"sy0\">-&gt;</span> m a<br/>elSvgns t m ma <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"br0\">(</span>el<span class=\"sy0\">,</span> val<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> elDynAttrNS<span class=\"st0\">' (Just \"http://www.w3.org/2000/svg\") t m ma<br/>    return val</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">V=: -.<span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> e.~i.<span class=\"nu0\">3</span> <span class=\"nu0\">3</span><br/>S=: <span class=\"nu0\">4</span> ~:i.<span class=\"nu0\">3</span> <span class=\"nu0\">3</span><br/>KP=: <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> ,/\"<span class=\"nu0\">2</span>@<span class=\"sy0\">(</span>,/<span class=\"sy0\">)</span>@|: */<br/>\u00a0<br/>ascii_art=: <span class=\"st_h\">' *'</span>{~]<br/>\u00a0<br/>KPfractal=:dyad def <span class=\"st_h\">'x&amp;KP^:y,.1'</span></pre>"}, {"lang": "Java", "loc": 138, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">kronecker</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * Uses the Kronecker product powers of two rectangular matrices<br/> * to generate fractals and tests it with three examples.<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ProductFractals <span class=\"br0\">{</span><br/>  <span class=\"co3\">/**<br/>   * Find the Kronecker product of the arguments.<br/>   * @param a The first matrix to multiply.<br/>   * @param b The second matrix to multiply.<br/>   * @return A new matrix: the Kronecker product of the arguments.<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> product<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Create matrix c as the matrix to fill and return.</span><br/>    <span class=\"co1\">// The length of a matrix is its number of rows.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>a.<span class=\"me1\">length</span><span class=\"sy0\">*</span>b.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Fill in the (empty) rows of c.</span><br/>    <span class=\"co1\">// The length of each row is the number of columns.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> num_cols <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">*</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>      c<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>num_cols<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// Now fill in the values: the products of each pair.</span><br/>    <span class=\"co1\">// Go through all the elements of a.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ia <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ia <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ia<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ja <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ja <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>ia<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ja<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// For each element of a, multiply it by all the elements of b.</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ib <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ib <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ib<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> jb <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jb <span class=\"sy0\">&lt;</span> b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> jb<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             c<span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"sy0\">*</span>ia<span class=\"sy0\">+</span>ib<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">*</span>ja<span class=\"sy0\">+</span>jb<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>ia<span class=\"br0\">]</span><span class=\"br0\">[</span>ja<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span><span class=\"br0\">[</span>jb<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Return the completed product matrix c.</span><br/>    <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Print an image obtained from an integer matrix, using the specified<br/>   * characters to indicate non-zero and zero elements.<br/>   * @param m The matrix to print.<br/>   * @param nz The character to print for a non-zero element.<br/>   * @param z The character to print for a zero element.<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> show_matrix<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m, <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> nz, <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> im <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> im <span class=\"sy0\">&lt;</span> m.<span class=\"me1\">length</span><span class=\"sy0\">;</span> im<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> jm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jm <span class=\"sy0\">&lt;</span> m<span class=\"br0\">[</span>im<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> jm<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>im<span class=\"br0\">]</span><span class=\"br0\">[</span>jm<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> z <span class=\"sy0\">:</span> nz<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Compute the specified Kronecker product power<br/>   * of the matrix and return  it.<br/>   * @param m The matrix to raise to the power.<br/>   * @param n The power to which to raise the matrix.<br/>   * @return A new matrix containing the resulting power.<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> power<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m, <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Start with m itself as the first power.</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m_pow <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Start the iteration with 1, not 0,</span><br/>    <span class=\"co1\">// since we already have the first power.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ix <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> ix <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      m_pow <span class=\"sy0\">=</span> product<span class=\"br0\">(</span>m, m_pow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> m_pow<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Run a test by computing the specified Kronecker product power<br/>   * of the matrix and printing matrix and power.<br/>   * @param m The base matrix raise to the power.<br/>   * @param n The power to which to raise the matrix.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m, <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Test matrix\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    show_matrix<span class=\"br0\">(</span>m, <span class=\"st0\">'*'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m_pow <span class=\"sy0\">=</span> power<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix power \"</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    show_matrix<span class=\"br0\">(</span>m_pow, <span class=\"st0\">'*'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Create the matrix for the first test and run the test.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Create the matrix.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Run the test.</span><br/>    test<span class=\"br0\">(</span>m, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Create the matrix for the second test and run the test.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Create the matrix.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Run the test.</span><br/>    test<span class=\"br0\">(</span>m, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Create the matrix for the second test and run the test.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test3<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Create the matrix.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                       <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Run the test.</span><br/>    test<span class=\"br0\">(</span>m, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Run the program to run the three tests.<br/>   * @param args Command line arguments (not used).<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Test the product fractals.</span><br/>    test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 50, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"co1\">// KPF.js 6/23/16 aev</span><br/><span class=\"co1\">// HFJS: Plot any matrix mat (filled with 0,1)</span><br/><span class=\"kw1\">function</span> pmat01<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// DCLs</span><br/>  <span class=\"kw1\">var</span> cvs <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'canvId'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> ctx <span class=\"sy0\">=</span> cvs.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">\"2d\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>  <span class=\"kw1\">var</span> w <span class=\"sy0\">=</span> cvs.<span class=\"me1\">width</span><span class=\"sy0\">;</span> <span class=\"kw1\">var</span> h <span class=\"sy0\">=</span> cvs.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> mat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> mat.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// Cleaning canvas and setting plotting color </span><br/>  ctx.<span class=\"me1\">fillStyle</span><span class=\"sy0\">=</span><span class=\"st0\">\"white\"</span><span class=\"sy0\">;</span> ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>w<span class=\"sy0\">,</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ctx.<span class=\"me1\">fillStyle</span><span class=\"sy0\">=</span>color<span class=\"sy0\">;</span><br/>  <span class=\"co1\">// MAIN LOOP</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"co1\">//fend j</span><br/>  <span class=\"br0\">}</span><span class=\"co1\">//fend i</span><br/><span class=\"br0\">}</span><span class=\"co1\">//func end</span><br/><span class=\"co1\">// Prime functions:</span><br/><span class=\"co1\">// Create Kronecker product based fractal matrix rm from matrix m (order=ord)</span><br/><span class=\"kw1\">function</span> ckpbfmat<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>ord<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> rm<span class=\"sy0\">=</span>m<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>ord<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>rm<span class=\"sy0\">=</span>mkp<span class=\"br0\">(</span>rm<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//matpp2doc('R 4 ordd',rm,'*'); // ASCII \"plotting\" - if you wish to try.</span><br/>  <span class=\"kw1\">return</span><span class=\"br0\">(</span>rm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// Create and plot Kronecker product based fractal from matrix m (filled with 0/1)</span><br/><span class=\"kw1\">function</span> cpmat<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>ord<span class=\"sy0\">,</span>color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> kpr<span class=\"sy0\">;</span><br/>  kpr<span class=\"sy0\">=</span>ckpbfmat<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>ord<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  pmat01<span class=\"br0\">(</span>kpr<span class=\"sy0\">,</span>color<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// Fractal matrix \"pretty\" printing to document. </span><br/><span class=\"co1\">// mat should be filled with 0 and 1; chr is a char substituting 1.</span><br/><span class=\"kw1\">function</span> matpp2doc<span class=\"br0\">(</span>title<span class=\"sy0\">,</span>mat<span class=\"sy0\">,</span>chr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>re<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">,</span>e<span class=\"sy0\">;</span> <span class=\"kw1\">var</span> m<span class=\"sy0\">=</span>mat.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"kw1\">var</span> n<span class=\"sy0\">=</span>mat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;nbsp;&amp;nbsp;&lt;b&gt;'</span><span class=\"sy0\">+</span>title<span class=\"sy0\">+</span><span class=\"st0\">'&lt;/b&gt;:&lt;pre&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      e<span class=\"sy0\">=</span><span class=\"st0\">'&amp;nbsp;'</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>e<span class=\"sy0\">=</span>chr<span class=\"br0\">}</span><span class=\"sy0\">;</span> re<span class=\"sy0\">+=</span>e<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><span class=\"co1\">//fend j</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;nbsp;&amp;nbsp;'</span><span class=\"sy0\">+</span>re<span class=\"sy0\">+</span><span class=\"st0\">'&lt;br /&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> re<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"co1\">//fend i</span><br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;/pre&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// mkp function (exotic arrow function): Return the Kronecker product</span><br/><span class=\"co1\">// of the a and b matrices</span><br/>mkp<span class=\"sy0\">=</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>a.<span class=\"me1\">map</span><span class=\"br0\">(</span>a<span class=\"sy0\">=&gt;</span>b.<span class=\"me1\">map</span><span class=\"br0\">(</span>b<span class=\"sy0\">=&gt;</span>a.<span class=\"me1\">map</span><span class=\"br0\">(</span>y<span class=\"sy0\">=&gt;</span>b.<span class=\"me1\">map</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span>r.<span class=\"me1\">push</span><span class=\"br0\">(</span>y<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t.<span class=\"me1\">push</span><span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>t<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">function matkronpow(M::Matrix, n::Int)<br/>    P = copy(M)<br/>    for i in 1:n P = kron(P, M) end<br/>    return P<br/>end<br/>\u00a0<br/>function fracprint(M::Matrix)<br/>    for i in 1:size(M, 1)<br/>        for j in 1:size(M, 2)<br/>            print(M[i, j] == 1\u00a0? '*'\u00a0: ' ')<br/>        end<br/>        println()<br/>    end<br/>end<br/>\u00a0<br/>M = [0 1 0; 1 1 1; 0 1 0]<br/>matkronpow(M, 3) |&gt; fracprint<br/>\u00a0<br/>M = [1 1 1; 1 0 1; 1 1 1]<br/>matkronpow(M, 3) |&gt; fracprint</pre>"}, {"lang": "Kotlin", "loc": 52, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.31</span><br/>\u00a0<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun kroneckerProduct<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Matrix, b<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> a.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> b.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rtn <span class=\"sy0\">=</span> m <span class=\"sy0\">*</span> p<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ctn <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> q<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r<span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>rtn<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>ctn<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"co1\">// all elements zero by default</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until p<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>l in <span class=\"nu0\">0</span> until q<span class=\"br0\">)</span><br/>                    r<span class=\"br0\">[</span>p <span class=\"sy0\">*</span> i + k<span class=\"br0\">]</span><span class=\"br0\">[</span>q <span class=\"sy0\">*</span> j + l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun kroneckerPower<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Matrix, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow <span class=\"sy0\">=</span> a.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> pow <span class=\"sy0\">=</span> kroneckerProduct<span class=\"br0\">(</span>pow, a<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> pow<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String, m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$text fractal\u00a0:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Vicsek\"</span>, kroneckerPower<span class=\"br0\">(</span>a, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Sierpinski carpet\"</span>, kroneckerPower<span class=\"br0\">(</span>a, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 54, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> prod<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> rt<span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>a <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>b <span class=\"kw1\">do</span><br/>            rt<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>a<span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">for</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>b<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> rt<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>            l <span class=\"sy0\">=</span> l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> rt<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    wid<span class=\"sy0\">,</span> hei <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    canvas <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><br/>    mA <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> mB <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    mC <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> mD <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> drawFractals<span class=\"br0\">(</span> m <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>                love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">*</span> <span class=\"nu0\">.1</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>keypressed<span class=\"br0\">(</span> key<span class=\"sy0\">,</span> scancode<span class=\"sy0\">,</span> isrepeat <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> key <span class=\"sy0\">==</span> <span class=\"st0\">\"a\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Build Vicsek fractal I\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> t <span class=\"sy0\">=</span> mA<br/>    <span class=\"kw1\">elseif</span> key <span class=\"sy0\">==</span> <span class=\"st0\">\"b\"</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Build Vicsek fractal II\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> t <span class=\"sy0\">=</span> mB<br/>    <span class=\"kw1\">elseif</span> key <span class=\"sy0\">==</span> <span class=\"st0\">\"c\"</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Sierpinski carpet fractal\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> t <span class=\"sy0\">=</span> mC<br/>    <span class=\"kw1\">elseif</span> key <span class=\"sy0\">==</span> <span class=\"st0\">\"d\"</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Build 'H' fractal\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> t <span class=\"sy0\">=</span> mD<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span> t <span class=\"sy0\">=</span> prod<span class=\"br0\">(</span> t<span class=\"sy0\">,</span> t <span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    drawFractals<span class=\"br0\">(</span> t <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 22, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Build block matrix applying Kronecker product to the special matrix m</span><br/><span class=\"co1\">\\\\ (n times to itself). Then plot Kronecker fractal. 4/25/2016 aev</span><br/>pkronfractal<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>clr<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> r<span class=\"sy0\">=</span>matkronprod<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  iPlotmat<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>clr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\Requireq tests:</span><br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Vicsek fractal: VicsekFractalgp.png</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Vicsek fractal, order 4:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  pkronfractal<span class=\"br0\">(</span>M<span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Sierpinski carpet fractal:  SierpCarpetFractalgp.png</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Sierpinski carpet fractal, order 4:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  pkronfractal<span class=\"br0\">(</span>M<span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Sierpinski triangle fractal:  SierpTriFractalgp.png</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Sierpinski triangle fractal, order 7:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  pkronfractal<span class=\"br0\">(</span>M<span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 26, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> kronecker<span class=\"sy0\">-</span>product <span class=\"br0\">(</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span> <span class=\"kw1\">X</span> <span class=\"re0\">@b</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"kw1\">X</span><span class=\"sy0\">*</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Array</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> kronecker<span class=\"sy0\">-</span>fractal <span class=\"br0\">(</span> <span class=\"re0\">@pattern</span><span class=\"sy0\">,</span> <span class=\"re0\">$order</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@kronecker</span> <span class=\"sy0\">=</span> <span class=\"re0\">@pattern</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@kronecker</span> <span class=\"sy0\">=</span> kronecker<span class=\"sy0\">-</span>product<span class=\"br0\">(</span><span class=\"re0\">@kronecker</span><span class=\"sy0\">,</span> <span class=\"re0\">@pattern</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$order</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@kronecker</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">#Task requirements</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@vicsek</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@carpet</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@six</span>    <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span>  <span class=\"st_h\">'vicsek'</span><span class=\"sy0\">,</span> <span class=\"re0\">@vicsek</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>     <span class=\"st_h\">'carpet'</span><span class=\"sy0\">,</span> <span class=\"re0\">@carpet</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>     <span class=\"st_h\">'six'</span><span class=\"sy0\">,</span>    <span class=\"re0\">@six</span><span class=\"sy0\">,</span>    <span class=\"nu0\">3</span><br/>  <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$name</span><span class=\"sy0\">,</span>    <span class=\"sy0\">@</span><span class=\"kw3\">shape</span><span class=\"sy0\">,</span>  <span class=\"re0\">$order</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@img</span> <span class=\"sy0\">=</span> kronecker<span class=\"sy0\">-</span>fractal<span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"kw3\">shape</span><span class=\"sy0\">,</span> <span class=\"re0\">$order</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$png</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>width<span class=\"br0\">(</span><span class=\"re0\">@img</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>height<span class=\"br0\">(</span><span class=\"re0\">@img</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@img</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">@img</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">set</span><span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span> <span class=\"re0\">@img</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">??</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">255</span> <span class=\"nu0\">255</span> <span class=\"nu0\">32</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">!!</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">write</span><span class=\"sy0\">:</span> <span class=\"st0\">\"kronecker-{$name}-perl6.png\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 88, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">os</span><br/><span class=\"kw1\">from</span> PIL <span class=\"kw1\">import</span> Image<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> imgsave<span class=\"br0\">(</span>path<span class=\"sy0\">,</span> arr<span class=\"br0\">)</span>:<br/>    w<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    img <span class=\"sy0\">=</span> Image.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>            img.<span class=\"me1\">putpixel</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> arr<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    img.<span class=\"me1\">save</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> get_shape<span class=\"br0\">(</span>mat<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>mat<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> kron<span class=\"br0\">(</span>matrix1<span class=\"sy0\">,</span> matrix2<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Calculate the kronecker product of two matrices<br/>    \"\"\"</span><br/>    final_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    count <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>matrix2<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> elem1 <span class=\"kw1\">in</span> matrix1:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>:<br/>            sub_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">for</span> num1 <span class=\"kw1\">in</span> elem1:<br/>                <span class=\"kw1\">for</span> num2 <span class=\"kw1\">in</span> matrix2<span class=\"br0\">[</span>i<span class=\"br0\">]</span>:<br/>                    sub_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>num1 * num2<span class=\"br0\">)</span><br/>            final_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>sub_list<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> final_list<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> kronpow<span class=\"br0\">(</span>mat<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Generate an arbitrary number of kronecker powers<br/>    \"\"\"</span><br/>    matrix <span class=\"sy0\">=</span> mat<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">yield</span> matrix<br/>        matrix <span class=\"sy0\">=</span> kron<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> matrix<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> fractal<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> mat<span class=\"sy0\">,</span> order<span class=\"sy0\">=</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Save fractal as jpg to 'fractals/name'<br/>    \"\"\"</span><br/>    path <span class=\"sy0\">=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">path</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'fractals'</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span><br/>    <span class=\"kw3\">os</span>.<span class=\"me1\">makedirs</span><span class=\"br0\">(</span>path<span class=\"sy0\">,</span> exist_ok<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fgen <span class=\"sy0\">=</span> kronpow<span class=\"br0\">(</span>mat<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span>:<br/>        p <span class=\"sy0\">=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">path</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>path<span class=\"sy0\">,</span> f<span class=\"st0\">'{i}.jpg'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Calculating n ='</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es0\">\\t</span>'</span><span class=\"sy0\">,</span> flush<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>\u00a0<br/>        mat <span class=\"sy0\">=</span> next<span class=\"br0\">(</span>fgen<span class=\"br0\">)</span><br/>        imgsave<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> mat<span class=\"br0\">)</span><br/>\u00a0<br/>        x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> get_shape<span class=\"br0\">(</span>mat<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Saved as'</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"st0\">'x'</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"st0\">'image'</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>test1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>test2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>test3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>fractal<span class=\"br0\">(</span><span class=\"st0\">'test1'</span><span class=\"sy0\">,</span> test1<span class=\"br0\">)</span><br/>fractal<span class=\"br0\">(</span><span class=\"st0\">'test2'</span><span class=\"sy0\">,</span> test2<span class=\"br0\">)</span><br/>fractal<span class=\"br0\">(</span><span class=\"st0\">'test3'</span><span class=\"sy0\">,</span> test3<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## Generate and plot Kronecker product based fractals. aev 8/12/16<br/>## gpKronFractal(m, n, pf, clr, ttl, dflg=0, psz=600):<br/>## Where: m - initial matrix (filled with 0/1); n - order of the fractal;<br/>## pf - plot file name (without extension); clr - color; ttl - plot title;<br/>## dflg - writing dump file flag (0/1); psz - picture size.<br/>gpKronFractal &lt;- function(m, n, pf, clr, ttl, dflg=0, psz=600) {<br/>  cat(\" *** START:\", date(), \"n=\", n, \"clr=\", clr, \"psz=\", psz, \"\\n\");<br/>  cat(\" *** Plot file -\", pf, \"\\n\");<br/>  r &lt;- m;<br/>  for(i in 1:n) {r = r%x%m};<br/>  plotmat(r, pf, clr, ttl, dflg, psz);<br/>  cat(\" *** END:\", date(), \"\\n\");<br/>}<br/>\u00a0<br/>## Required tests:<br/># 1. Vicsek Fractal<br/>M &lt;- matrix(c(0,1,0,1,1,1,0,1,0), ncol=3, nrow=3, byrow=TRUE);<br/>gpKronFractal(M, 4, \"VicsekFractalR\",\"red\", \"Vicsek Fractal n=4\")<br/># 2. Sierpinski carpet fractal<br/>M &lt;- matrix(c(1,1,1,1,0,1,1,1,1), ncol=3, nrow=3, byrow=TRUE);<br/>gpKronFractal(M, 4, \"SierpinskiCarpetFR\", \"maroon\", \"Sierpinski carpet fractal n=4\")<br/>\u00a0<br/># 3. Plus sign fractal<br/>M &lt;- matrix(c(1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,<br/>+0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1), ncol=7, nrow=7, byrow=TRUE);<br/>gpKronFractal(M, 3, \"PlusSignFR\", \"maroon\", \"Plus sign fractal, n=3\")<br/>\u00a0<br/># Also, try these 3. I bet you've never seen them before.<br/># 4. Wider Sierpinski carpet fractal (a.k.a. Sierpinski carpet mutant)<br/># Note: If your computer is not super fast it could take a lot of time.<br/>#       Use dump flag = 1, to save generated fractal.<br/>#M &lt;- matrix(c(1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1), ncol=5,<br/>#+nrow=5, byrow=TRUE);<br/>#gpKronFractal(M, 4, \"SierpinskiCarpetFw\", \"brown\", \"Wider Sierpinski carpet fractal n=4\", 1)<br/># 5. \"H\" fractal (Try all other letters in the alphabet...)<br/>#M &lt;- matrix(c(1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,<br/>#+0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1), ncol=7, nrow=7, byrow=TRUE);<br/>#gpKronFractal(M, 3, \"HFR\", \"maroon\", \"'H' fractal n=3\", 1)<br/># 6. Chessboard fractal. <br/>#M &lt;- matrix(c(1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,<br/>#     0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1), ncol=8, nrow=8, byrow=TRUE);<br/>#gpKronFractal(M, 2, \"ChessBrdFractalR\",\"black\", \"Chessboard Fractal, n=2\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 39, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the   Kronecker product   of   two arbitrary size   matrices. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> pGlyph <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> pGlyph==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> pGlyph==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> pGlyph=<span class=\"st0\">'\u2588'</span>     <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>pGlyph<span class=\"br0\">)</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> pGlyph=<span class=\"kw6\">x2c</span><span class=\"br0\">(</span>pGlyph<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*Plot glyph is 2 chars?   Hexadecimal.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>pGlyph<span class=\"br0\">)</span>==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> pGlyph=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>pGlyph<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*  \"    \"    \" 3   \"      Decimal.    */</span><br/>     aMat= 3x3  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>                <span class=\"coMULTI\">/*define  A  matrix size  and elements.*/</span><br/>     bMat= 3x3  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*   \"    B     \"     \"    \"     \"     */</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'A'</span>, aMat                           <span class=\"coMULTI\">/*construct   A   matrix from elements.*/</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'B'</span>, bMat                           <span class=\"coMULTI\">/*    \"       B      \"     \"     \"     */</span><br/><span class=\"kw1\">call</span> KronMat <span class=\"st0\">'Kronecker product'</span>                 <span class=\"coMULTI\">/*calculate the  Kronecker  product.   */</span><br/><span class=\"kw1\">call</span> showMat <span class=\"st0\">'Kronecker product'</span>, <span class=\"kw4\">result</span>         <span class=\"coMULTI\">/*display   the  Kronecker  product.   */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>KronMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what;        #=<span class=\"nu0\">0</span>;      <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> @<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>shape aRows aCols<br/>                                          <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> @<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>shape bRows bCols<br/>               <span class=\"kw1\">do</span>       rA=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> aRows<br/>                 <span class=\"kw1\">do</span>     rB=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> bRows;  #=#+<span class=\"nu0\">1</span>;          ##=<span class=\"nu0\">0</span>;        _=<br/>                   <span class=\"kw1\">do</span>   cA=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> aCols;  <a class=\"__cf_email__\" data-cfemail=\"cfb7f28f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>rA<span class=\"sy0\">.</span>cA<br/>                     <span class=\"kw1\">do</span> cB=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> bCols;  <a class=\"__cf_email__\" data-cfemail=\"255c1865\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>rB<span class=\"sy0\">.</span>cB;    ##=##+<span class=\"nu0\">1</span>;     xy=x<span class=\"sy0\">*</span>y;      _=_ xy<br/>                     @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>##=xy<br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cB*/</span><br/>                   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*cA*/</span><br/>                 <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*rB*/</span><br/>               <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*rA*/</span>;        <span class=\"kw1\">return</span> aRows<span class=\"sy0\">*</span>aRows <span class=\"sy0\">||</span> <span class=\"st0\">'X'</span> <span class=\"sy0\">||</span> bRows<span class=\"sy0\">*</span>bRows<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>makeMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what, size elements;   <span class=\"kw1\">arg</span> , row <span class=\"st0\">'X'</span> col <span class=\"sy0\">.</span>;      @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>shape= row  col<br/>         #=<span class=\"nu0\">0</span>;    <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> row               <span class=\"coMULTI\">/* [\u2193]  bump item#; get item; max width*/</span><br/>                   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> col;   #=#+<span class=\"nu0\">1</span>;   @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=<span class=\"kw6\">word</span><span class=\"br0\">(</span>elements, #<span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                   <span class=\"coMULTI\">/* [\u2191] define an element of WHAT matrix*/</span><br/>                 <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>         <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what, size <span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> size  row  <span class=\"st0\">'X'</span>  col   <span class=\"coMULTI\">/*obtain mat name, sz*/</span><br/>                     <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> row;  $=                        <span class=\"coMULTI\">/*build row by row.  */</span><br/>                       <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> col;  $=$ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c         <span class=\"coMULTI\">/*  \"   col  \" col.  */</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                     $=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>$, pGlyph, <span class=\"nu0\">10</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*change\u2500\u2500\u25baplot glyph*/</span><br/>                     <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$, <span class=\"st0\">'T'</span><span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*display line\u2500\u2500\u25baterm*/</span><br/>                     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span></pre>"}, {"lang": "Sidef", "loc": 27, "block": "<pre class=\"ruby highlighted_source\">func kronecker_product <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span> a ~X b <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span> _<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ~X<span class=\"sy0\">*</span> _<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>func kronecker_fractal<span class=\"br0\">(</span>pattern, order=<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var kronecker = pattern<br/>    <span class=\"br0\">{</span> kronecker = kronecker_product<span class=\"br0\">(</span>kronecker, pattern<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">*</span> order<br/>    <span class=\"kw2\">return</span> kronecker<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var vicsek = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>var carpet = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>var six    = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>              <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"Imager\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> name,shape,order <span class=\"kw1\">in</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">:vicsek</span>, vicsek, <span class=\"nu0\">4</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"re3\">:carpet</span>, carpet, <span class=\"nu0\">4</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"re3\">:six</span>,    six,    <span class=\"nu0\">3</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    var pat = kronecker_fractal<span class=\"br0\">(</span>shape, order<span class=\"br0\">)</span><br/>    var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> pat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">len</span>, ysize <span class=\"sy0\">=&gt;</span> pat.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x,y <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^pat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">len</span> ~X ^pat.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, y <span class=\"sy0\">=&gt;</span> y, color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>pat<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>\u00a0? <span class=\"sy0\">&lt;</span><span class=\"nu0\">255</span> <span class=\"nu0\">255</span> <span class=\"nu0\">32</span><span class=\"sy0\">&gt;</span>\u00a0: <span class=\"sy0\">&lt;</span><span class=\"nu0\">16</span> <span class=\"nu0\">16</span> <span class=\"nu0\">16</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"kronecker-#{name}-sidef.png\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 17, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import.lib(\"zklGSL\");    // libGSL (GNU Scientific Library)<br/>fcn kronecker(A,B){  //--&gt; new Matrix<br/>   m,n, p,q\u00a0:= A.rows,A.cols, B.rows,B.cols;<br/>   r:=GSL.Matrix(m*p, n*q);<br/>   foreach i,j,k,l in (m,n,p,q){ r[p*i + k, q*j + l]=A[i,j]*B[k,l] }<br/>   r<br/>}<br/>\u00a0<br/>fcn kfractal(M,n,fname){<br/>   R:=M;<br/>   do(n){ R=kronecker(R,M) }<br/>   r,c,img\u00a0:= R.rows, R.cols, PPM(r,c,0xFFFFFF);\t// white canvas<br/>   foreach i,j in (r,c){ if(R[i,j]) img[i,j]=0x00FF00 } // green dots<br/>   println(\"%s:\u00a0%dx%d with\u00a0%,d points\".fmt(fname,R.rows,R.cols,<br/>        R.pump(0,Ref(0).inc,Void.Filter).value)); // count 1s in fractal matrix<br/>   img.writeJPGFile(fname);<br/>}</pre>"}]}