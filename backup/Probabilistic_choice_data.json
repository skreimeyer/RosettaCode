{"task": "Probabilistic_choice", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Random_Distribution <span class=\"kw1\">is</span><br/>   Trials\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">1</span>_000_000;<br/>   <span class=\"kw3\">type</span> Outcome <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Aleph, Beth, Gimel, Daleth, He, Waw, Zayin, Heth<span class=\"br0\">)</span>;<br/>   Pr\u00a0: <span class=\"kw3\">constant</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Outcome<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Uniformly_Distributed\u00a0:=<br/>        <span class=\"br0\">(</span><span class=\"nu0\">1.0</span>/<span class=\"nu0\">5.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">6.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">7.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">8.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">9.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">10.0</span>, <span class=\"nu0\">1.0</span>/<span class=\"nu0\">11.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;<br/>   Samples\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Outcome<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Value  \u00a0: Uniformly_Distributed;<br/>   Dice   \u00a0: Generator;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Try <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Trials</span> <span class=\"kw1\">loop</span><br/>      Value\u00a0:= Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Pr'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Value &lt;= Pr <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Samples <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Samples <span class=\"br0\">(</span>I<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw3\">exit</span>;<br/>         <span class=\"kw1\">else</span><br/>            Value\u00a0:= Value - Pr <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"co1\">-- Printing the results</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Pr'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Put <span class=\"br0\">(</span>Outcome'Image <span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; Character'Val <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Float'Image <span class=\"br0\">(</span>Float <span class=\"br0\">(</span>Samples <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> / Float <span class=\"br0\">(</span>Trials<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; Character'Val <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> I = Heth <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" rest\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Put_Line <span class=\"br0\">(</span>Uniformly_Distributed'Image <span class=\"br0\">(</span>Pr <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Random_Distribution;</pre>"}, {"lang": "ALGOL 68", "loc": 72, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> trials <span class=\"sy1\">=</span> 1 000 000<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> LREAL <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> ITEM <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span><br/>  <span class=\"kw3\">INT</span> prob count<span class=\"sy1\">,</span><br/>  LREAL expect<span class=\"sy1\">,</span><br/>        mapping<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> col width <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> <span class=\"kw26\">real</span> repr <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>col width<span class=\"sy1\">+</span>1<span class=\"sy1\">,</span> 6<span class=\"br0\">)</span>$<span class=\"sy1\">,</span><br/>       item repr <span class=\"sy1\">=</span> $<span class=\"st0\">\"Name: \"</span>g<span class=\"st0\">\", Prob count: \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"st0\">\", Expect: \"</span>f<span class=\"br0\">(</span><span class=\"kw26\">real</span> repr<span class=\"br0\">)</span><span class=\"st0\">\", Mapping: \"</span><span class=\"sy1\">,</span> f<span class=\"br0\">(</span><span class=\"kw26\">real</span> repr<span class=\"br0\">)</span>l$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>8<span class=\"br0\">]</span>ITEM items <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"aleph\"</span><span class=\"sy1\">,</span>  0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"beth\"</span><span class=\"sy1\">,</span>   0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"gimel\"</span><span class=\"sy1\">,</span>  0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"daleth\"</span><span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"he\"</span><span class=\"sy1\">,</span>     0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"waw\"</span><span class=\"sy1\">,</span>    0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"zayin\"</span><span class=\"sy1\">,</span>  0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"st0\">\"heth\"</span><span class=\"sy1\">,</span>   0<span class=\"sy1\">,</span> <span class=\"sy1\">~,</span> <span class=\"sy1\">~</span> <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  LREAL offset <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span> <span class=\"coMULTI\"># const #</span><br/>\u00a0<br/><span class=\"coMULTI\"># initialise items #</span><br/>  LREAL total sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> items <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> items <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>    expect <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">/</span><span class=\"br0\">(</span>i<span class=\"sy1\">-</span>1<span class=\"sy1\">+</span>offset<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    total sum <span class=\"sy1\">+:=</span> expect <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  expect <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> items<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1 <span class=\"sy1\">-</span> total sum<span class=\"sy1\">;</span><br/>\u00a0<br/>  mapping <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> items<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> expect <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> items<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> items <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> items <span class=\"kw2\">DO</span><br/>    mapping <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> mapping <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"sy1\">-</span>1<span class=\"br0\">]</span> <span class=\"sy1\">+</span> expect <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># printf((item repr, items)) #</span><br/>\u00a0<br/><span class=\"coMULTI\"># perform the sampling #</span><br/>  <span class=\"kw4\">PROC</span> sample <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>LREAL mapping<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> out<span class=\"sy1\">;</span><br/>    LREAL rand <span class=\"kw26\">real</span> <span class=\"sy1\">=</span> random<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> items <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> items <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">IF</span> rand <span class=\"kw26\">real</span> <span class=\"sy1\">&lt;</span> mapping<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>        out <span class=\"sy1\">:=</span> j<span class=\"sy1\">;</span><br/>\tdone<br/>      <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    done<span class=\"sy1\">:</span> out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> trials <span class=\"kw2\">DO</span><br/>      prob count <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>sample<span class=\"br0\">(</span>mapping <span class=\"kw6\">OF</span> items<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> 1<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw6\">FORMAT</span> indent <span class=\"sy1\">=</span> $17k$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># print the results #</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Trials: \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> trials<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Items:\"</span>$<span class=\"sy1\">,</span>indent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> items <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> items <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gn<span class=\"br0\">(</span>col width<span class=\"br0\">)</span>k<span class=\"st0\">\" \"</span>$<span class=\"sy1\">,</span> name <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$l<span class=\"st0\">\"Target prob.:\"</span>$<span class=\"sy1\">,</span> indent<span class=\"sy1\">,</span> $f<span class=\"br0\">(</span><span class=\"kw26\">real</span> repr<span class=\"br0\">)</span><span class=\"st0\">\" \"</span>$<span class=\"sy1\">,</span> expect <span class=\"kw6\">OF</span> items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$l<span class=\"st0\">\"Attained prob.:\"</span>$<span class=\"sy1\">,</span> indent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> items <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> items <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$f<span class=\"br0\">(</span><span class=\"kw26\">real</span> repr<span class=\"br0\">)</span><span class=\"st0\">\" \"</span>$<span class=\"sy1\">,</span> prob count <span class=\"kw6\">OF</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">/</span>trials<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span>$l$<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 39, "block": "<pre class=\"autohotkey highlighted_source\">s1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"aleph\"</span><span class=\"sy0\">,</span>   p1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span>                       <span class=\"co1\">; Input</span><br/>s2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"beth\"</span><span class=\"sy0\">,</span>    p2 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span><br/>s3 <span class=\"sy0\">:=</span> <span class=\"st0\">\"gimel\"</span><span class=\"sy0\">,</span>   p3 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span><br/>s4 <span class=\"sy0\">:=</span> <span class=\"st0\">\"daleth\"</span><span class=\"sy0\">,</span>  p4 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span><br/>s5 <span class=\"sy0\">:=</span> <span class=\"st0\">\"he\"</span><span class=\"sy0\">,</span>      p5 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span><br/>s6 <span class=\"sy0\">:=</span> <span class=\"st0\">\"waw\"</span><span class=\"sy0\">,</span>     p6 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span><br/>s7 <span class=\"sy0\">:=</span> <span class=\"st0\">\"zayin\"</span><span class=\"sy0\">,</span>   p7 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span><br/>s8 <span class=\"sy0\">:=</span> <span class=\"st0\">\"heth\"</span><span class=\"sy0\">,</span>    p8 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">-</span>p1<span class=\"sy0\">-</span>p2<span class=\"sy0\">-</span>p3<span class=\"sy0\">-</span>p4<span class=\"sy0\">-</span>p5<span class=\"sy0\">-</span>p6<span class=\"sy0\">-</span>p7<br/>n <span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> r0 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> r<span class=\"re0\">%n%</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>                         <span class=\"co1\">; auxiliary data</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>   i <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> r<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> r<span class=\"re0\">%i%</span> <span class=\"sy0\">+</span> p<span class=\"re0\">%A_Index%</span> <span class=\"co1\">; cummulative distribution</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">1000000</span> <span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> R<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span>                                        <span class=\"co1\">; linear search</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>R <span class=\"sy0\">&lt;</span> r<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          c<span class=\"re0\">%A_Index%</span><span class=\"sy0\">++</span><br/>          <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>      <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>                                                   <span class=\"co1\">; Output</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span><br/>   t <span class=\"sy0\">.=</span> s<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\"`t\"</span> p<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\"`t\"</span> c<span class=\"re0\">%A_Index%</span><span class=\"sy0\">*</span>1<span class=\"sy0\">.</span>0e<span class=\"sy0\">-</span>6 <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> <span class=\"re0\">%t%</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>output: <br/>---------------------------<br/>aleph  0.200000   0.199960<br/>beth   0.166667   0.166146<br/>gimel  0.142857   0.142624<br/>daleth 0.125000   0.124924<br/>he     0.111111   0.111226<br/>waw    0.100000   0.100434<br/>zayin  0.090909   0.091344<br/>heth   0.063456   0.063342<br/>---------------------------<br/>*/</span></pre>"}, {"lang": "AWK", "loc": 73, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    ITERATIONS = <span class=\"nu0\">1000000</span><br/>    delete symbMap<br/>    delete probMap<br/>    delete counts<br/>    initData<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> ITERATIONS; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        distribute<span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    showDistributions<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    exit<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> distribute<span class=\"br0\">(</span>rnd,    cnt, symNum, sym, symPrb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cnt = <span class=\"kw4\">length</span><span class=\"br0\">(</span>symbMap<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>symNum = <span class=\"nu0\">1</span>; symNum <span class=\"sy2\">&lt;=</span> cnt; symNum<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sym = symbMap<span class=\"br0\">[</span>symNum<span class=\"br0\">]</span>;<br/>        symPrb = probMap<span class=\"br0\">[</span>sym<span class=\"br0\">]</span>;<br/>        rnd <span class=\"sy3\">-</span>= symPrb;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rnd <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            counts<span class=\"br0\">[</span>sym<span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>            <span class=\"kw6\">return</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> showDistributions<span class=\"br0\">(</span>    s, sym, prb, actSum, expSum, totItr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    actSum = <span class=\"nu0\">0.0</span><br/>    expSum = <span class=\"nu0\">0.0</span><br/>    totItr = <span class=\"nu0\">0</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"%-7s \u00a0%-7s \u00a0%-5s \u00a0%-5s<span class=\"es0\">\\n</span>\"</span>, <span class=\"st0\">\"symb\"</span>, <span class=\"st0\">\"num.\"</span>, <span class=\"st0\">\"act.\"</span>, <span class=\"st0\">\"expt.\"</span><br/>    <span class=\"kw5\">print</span>  <span class=\"st0\">\"-------  -------  -----  -----\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>s = <span class=\"nu0\">1</span>; s <span class=\"sy2\">&lt;=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>symbMap<span class=\"br0\">)</span>; s<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sym = symbMap<span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>        prb = counts<span class=\"br0\">[</span>sym<span class=\"br0\">]</span><span class=\"sy3\">/</span>ITERATIONS<br/>        actSum <span class=\"sy3\">+</span>= prb<br/>        expSum <span class=\"sy3\">+</span>= probMap<span class=\"br0\">[</span>sym<span class=\"br0\">]</span><br/>        totItr <span class=\"sy3\">+</span>= counts<span class=\"br0\">[</span>sym<span class=\"br0\">]</span><br/>        <span class=\"kw5\">printf</span> <span class=\"st0\">\"%-7s \u00a0%7d \u00a0%1.3f \u00a0%1.3f<span class=\"es0\">\\n</span>\"</span>, sym, counts<span class=\"br0\">[</span>sym<span class=\"br0\">]</span>, prb, probMap<span class=\"br0\">[</span>sym<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span>  <span class=\"st0\">\"-------  -------  -----  -----\"</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"Totals: \u00a0%7d \u00a0%1.3f \u00a0%1.3f<span class=\"es0\">\\n</span>\"</span>, totItr, actSum, expSum<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> initData<span class=\"br0\">(</span>    sym<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">srand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"aleph\"</span><span class=\"br0\">]</span>  = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">5.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"beth\"</span><span class=\"br0\">]</span>   = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">6.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"gimel\"</span><span class=\"br0\">]</span>  = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">7.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"daleth\"</span><span class=\"br0\">]</span> = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">8.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"he\"</span><span class=\"br0\">]</span>     = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"waw\"</span><span class=\"br0\">]</span>    = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">10.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"zyin\"</span><span class=\"br0\">]</span>   = <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">11.0</span><br/>    probMap<span class=\"br0\">[</span><span class=\"st0\">\"heth\"</span><span class=\"br0\">]</span>   = <span class=\"nu0\">1759.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">27720.0</span><br/>\u00a0<br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">\"aleph\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"st0\">\"beth\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = <span class=\"st0\">\"gimel\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> = <span class=\"st0\">\"daleth\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> = <span class=\"st0\">\"he\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> = <span class=\"st0\">\"waw\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> = <span class=\"st0\">\"zyin\"</span><br/>    symbMap<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> = <span class=\"st0\">\"heth\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>sym <span class=\"kw1\">in</span> probMap<span class=\"br0\">)</span><br/>        counts<span class=\"br0\">[</span>sym<span class=\"br0\">]</span> = <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      DIM item$(7), prob(7), cnt%(7)<br/>      item$() = \"aleph\",\"beth\",\"gimel\",\"daleth\",\"he\",\"waw\",\"zayin\",\"heth\"<br/>      prob()  = 1/5.0, 1/6.0, 1/7.0, 1/8.0, 1/9.0, 1/10.0, 1/11.0, 1759/27720<br/>      IF ABS(SUM(prob())-1) &gt; 1E-6 ERROR 100, \"Probabilities don't sum to 1\"<br/>\u00a0<br/>      FOR trial% = 1 TO 1E6<br/>        r = RND(1)<br/>        p = 0<br/>        FOR i% = 0 TO DIM(prob(),1)<br/>          p += prob(i%)<br/>          IF r &lt; p cnt%(i%) += 1\u00a0: EXIT FOR<br/>        NEXT<br/>      NEXT<br/>\u00a0<br/>      @% = &amp;2060A<br/>      PRINT \"Item        actual    theoretical\"<br/>      FOR i% = 0 TO DIM(item$(),1)<br/>        PRINT item$(i%), cnt%(i%)/1E6, prob(i%)<br/>      NEXT</pre>"}, {"lang": "C", "loc": 34, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* pick a random index from 0 to n-1, according to probablities listed<br/>   in p[] which is assumed to have a sum of 1. The values in the probablity<br/>   list matters up to the point where the sum goes over 1 */</span><br/><span class=\"kw4\">int</span> rand_idx<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define LEN 8</span><br/><span class=\"co2\">#define N 1000000</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>names<span class=\"br0\">[</span>LEN<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"aleph\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"beth\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gimel\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"daleth\"</span><span class=\"sy0\">,</span><br/>\t\t\t  <span class=\"st0\">\"he\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"waw\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"zayin\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"heth\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> s<span class=\"sy0\">,</span> p<span class=\"br0\">[</span>LEN<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">/</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu19\">1e300</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> count<span class=\"br0\">[</span>LEN<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> count<span class=\"br0\">[</span>rand_idx<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> LEN<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  Name  Count    Ratio Expected<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> LEN<span class=\"sy0\">;</span> s <span class=\"sy0\">-=</span> p<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%6s%7d\u00a0%7.4f%%\u00a0%7.4f%%<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t\tnames<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">/</span> N <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> LEN <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:</span> s<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 52, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span>, <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> SPI <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> , <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> ProbType <span class=\"sy4\">;</span><br/>   ProbType probabilities <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"aleph\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">5.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"beth\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">6.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"gimel\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">7.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"daleth\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">8.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"he\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">9.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"waw\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">10.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"zayin\"</span> , <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu16\">11.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   probabilities.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> <span class=\"st0\">\"heth\"</span> , <span class=\"nu0\">1759</span><span class=\"sy2\">/</span><span class=\"nu16\">27720.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> generated <span class=\"sy4\">;</span> <span class=\"co1\">//for the strings that are generatod</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> decider <span class=\"sy4\">;</span> <span class=\"co1\">//holds the numbers that determine the choice of letters </span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> probabilities.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t decider.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">27720</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span>probabilities<span class=\"br0\">[</span> i <span class=\"br0\">]</span>.<span class=\"me1\">second</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw4\">int</span> number <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>\t <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> i <span class=\"sy4\">;</span> j<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    number <span class=\"sy2\">+</span><span class=\"sy1\">=</span>  <span class=\"nu0\">27720</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span> probabilities<span class=\"br0\">[</span> j <span class=\"br0\">]</span>.<span class=\"me1\">second</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"br0\">}</span><br/>\t number <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">27720</span> <span class=\"sy2\">*</span> probabilities<span class=\"br0\">[</span> i <span class=\"br0\">]</span>.<span class=\"me1\">second</span> <span class=\"sy4\">;</span><br/>\t decider.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000000</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> randnumber <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">27721</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> <br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span> randnumber <span class=\"sy1\">&gt;</span> decider<span class=\"br0\">[</span> j <span class=\"br0\">]</span> <span class=\"br0\">)</span> <br/>\t j<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>      generated.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> probabilities<span class=\"br0\">[</span> j <span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">first</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"letter  frequency attained   frequency expected<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> SPI i <span class=\"sy1\">=</span> probabilities.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> probabilities.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first <span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> found <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">count</span> <span class=\"br0\">(</span> generated.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , generated.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">21</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> found <span class=\"sy2\">/</span> <span class=\"nu16\">1000000.0</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">17</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 73, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> TRIALS <span class=\"sy0\">=</span> 1000000L<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">class</span> Expv<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> name<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> probcount<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> expect<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> mapping<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Expv<span class=\"br0\">(</span><span class=\"kw4\">string</span> name, <span class=\"kw4\">int</span> probcount, <span class=\"kw4\">double</span> expect, <span class=\"kw4\">double</span> mapping<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">probcount</span> <span class=\"sy0\">=</span> probcount<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">expect</span> <span class=\"sy0\">=</span> expect<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span> <span class=\"sy0\">=</span> mapping<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> Expv<span class=\"br0\">[</span><span class=\"br0\">]</span> items <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"aleph\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"beth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>        <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"gimel\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"daleth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t<a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"he\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"waw\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t<a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"zayin\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expv<span class=\"br0\">(</span><span class=\"st0\">\"heth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> rnum, tsum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        Random random <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rnum <span class=\"sy0\">=</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span>, rnum <span class=\"sy0\">+=</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">expect</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> rnum<span class=\"sy0\">;</span><br/>            tsum <span class=\"sy0\">+=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">expect</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        items<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">expect</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> tsum<span class=\"sy0\">;</span><br/>\u00a0<br/>        items<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span> <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        items<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> TRIALS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            rnum <span class=\"sy0\">=</span> random<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rnum <span class=\"sy0\">&lt;</span> items<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">mapping</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    items<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">probcount</span><span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Trials: {0}\"</span>, TRIALS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Items:          \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">name</span><span class=\"sy0\">.</span><span class=\"me1\">PadRight</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Target prob.:   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:0.000000} \"</span>, items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">expect</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Attained prob.: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:0.000000} \"</span>, <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">probcount</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>TRIALS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 22, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> to<span class=\"sy0\">-</span>cdf <span class=\"br0\">[</span>pdf<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>acc n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> acc <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>last acc<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    pdf<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> choose <span class=\"br0\">[</span>cdf<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>r <span class=\"br0\">(</span>rand<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">count</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">filter</span> <span class=\"br0\">(</span>partial <span class=\"sy0\">&gt;</span> r<span class=\"br0\">)</span> cdf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">*</span>names<span class=\"sy0\">*</span> '<span class=\"br0\">[</span>aleph beth gimel daleth he waw zayin heth<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">*</span>pdf<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> double <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span> <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>num<span class=\"sy0\">-</span>trials <span class=\"nu0\">1000000</span><br/>      cdf <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>cdf <span class=\"sy0\">*</span>pdf<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>      indexes <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"sy0\">*</span>names<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; use integer key internally, not name</span><br/>      expected <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">(</span>sorted<span class=\"sy0\">-</span><span class=\"kw1\">map</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zipmap</span> indexes <span class=\"sy0\">*</span>pdf<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      actual <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> num<span class=\"sy0\">-</span>trials #<span class=\"br0\">(</span>choose cdf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>idx exp<span class=\"br0\">]</span> expected<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"st0\">\"Expected number of\"</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>names<span class=\"sy0\">*</span> idx<span class=\"br0\">)</span> <span class=\"st0\">\"was\"</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">*</span> num<span class=\"sy0\">-</span>trials exp<span class=\"br0\">)</span> <span class=\"st0\">\"and actually got\"</span> <span class=\"br0\">(</span>actual idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 46, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *probabilities* '<span class=\"br0\">(</span><span class=\"br0\">(</span>aleph  <span class=\"nu0\">1</span>/<span class=\"nu0\">5</span><span class=\"br0\">)</span>                        <br/>                          <span class=\"br0\">(</span>beth   <span class=\"nu0\">1</span>/<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>gimel  <span class=\"nu0\">1</span>/<span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>daleth <span class=\"nu0\">1</span>/<span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>he     <span class=\"nu0\">1</span>/<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>waw    <span class=\"nu0\">1</span>/<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>zayin  <span class=\"nu0\">1</span>/<span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>heth   <span class=\"nu0\">1759</span>/<span class=\"nu0\">27720</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> calculate-probabilities <span class=\"br0\">(</span>choices <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>repetitions <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>reduce #'+ choices <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>make-ranges <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>datum probability<span class=\"br0\">)</span> in choices<br/>                   sum <span class=\"br0\">(</span>coerce probability 'double-<span class=\"kw1\">float</span><span class=\"br0\">)</span> into total<br/>                   collect <span class=\"br0\">(</span><span class=\"kw1\">list</span> datum total<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>pick <span class=\"br0\">(</span>ranges<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>optimize <span class=\"br0\">(</span>speed <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>safety <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>debug <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop with <span class=\"kw1\">random</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> 1<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><br/>                   for <span class=\"br0\">(</span>datum below<span class=\"br0\">)</span> of-type <span class=\"br0\">(</span>t double-<span class=\"kw1\">float</span><span class=\"br0\">)</span> in ranges<br/>                   <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">random</span> below<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> datum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>populate-<span class=\"kw1\">hash</span> <span class=\"br0\">(</span>ranges<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>optimize <span class=\"br0\">(</span>speed <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>safety <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>debug <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop repeat <span class=\"br0\">(</span>the fixnum repetitions<span class=\"br0\">)</span><br/>                   with <span class=\"kw1\">hash</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf <span class=\"br0\">(</span>the fixnum <span class=\"br0\">(</span>gethash <span class=\"br0\">(</span>pick ranges<span class=\"br0\">)</span> <span class=\"kw1\">hash</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"kw1\">hash</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>make-table-data <span class=\"br0\">(</span><span class=\"kw1\">hash</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>datum probability<span class=\"br0\">)</span> in choices<br/>                   collect <span class=\"br0\">(</span><span class=\"kw1\">list</span> datum <br/>                                 <span class=\"br0\">(</span><span class=\"kw1\">float</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>gethash datum <span class=\"kw1\">hash</span><span class=\"br0\">)</span><br/>                                           repetitions<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span><span class=\"kw1\">float</span> probability<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"Datum~10,2TOccured~20,2TExpected~%\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~{~{~A~10,2T~F~20,2T~F~}~%~}\"</span><br/>                 <span class=\"br0\">(</span>make-table-data <span class=\"br0\">(</span>populate-<span class=\"kw1\">hash</span> <span class=\"br0\">(</span>make-ranges<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>calculate-probabilities *probabilities*<span class=\"br0\">)</span><br/>Datum     Occured   Expected<br/>ALEPH     <span class=\"nu0\">0.200156</span>  <span class=\"nu0\">0.2</span><br/>BETH      <span class=\"nu0\">0.166521</span>  <span class=\"nu0\">0.16666667</span><br/>GIMEL     <span class=\"nu0\">0.142936</span>  <span class=\"nu0\">0.14285715</span><br/>DALETH    <span class=\"nu0\">0.124779</span>  <span class=\"nu0\">0.125</span><br/>HE        <span class=\"nu0\">0.111601</span>  <span class=\"nu0\">0.11111111</span><br/>WAW       <span class=\"nu0\">0.100068</span>  <span class=\"nu0\">0.1</span><br/>ZAYIN     <span class=\"nu0\">0.090458</span>  <span class=\"nu0\">0.09090909</span><br/>HETH      <span class=\"nu0\">0.063481</span>  <span class=\"nu0\">0.06345599</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> nTrials <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> items <span class=\"sy0\">=</span> <span class=\"st0\">\"aleph beth gimel daleth he waw zayin heth\"</span>.<span class=\"me1\">split</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> pr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span>.<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">double</span><span class=\"br0\">[</span>pr.<span class=\"me1\">length</span><span class=\"br0\">]</span> counts <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nTrials</span><span class=\"br0\">)</span><br/>    counts<span class=\"br0\">[</span>pr.<span class=\"me1\">dice</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"Item    Target prob  Attained prob\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> co<span class=\"sy0\">;</span> zip<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> pr<span class=\"sy0\">,</span> counts<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-7s\u00a0%.8f  \u00a0%.8f\"</span><span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> co <span class=\"sy0\">/</span> nTrials<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">syntax</span><span class=\"br0\">(</span><span class=\"st0\">\"0.9\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule Probabilistic do<br/>  @tries 1000000<br/>  @probs [aleph:  1/5,<br/>          beth:   1/6,<br/>          gimel:  1/7,<br/>          daleth: 1/8,<br/>          he:     1/9,<br/>          waw:    1/10,<br/>          zayin:  1/11,<br/>          heth:   1759/27720]<br/>\u00a0<br/>  def test do<br/>    trials = for _ &lt;- <a class=\"__cf_email__\" data-cfemail=\"12233c3c5266607b7761\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, do: get_choice(@probs,\u00a0:rand.uniform)<br/>    IO.puts \"Item      Expected   Actual\"<br/>    fmt = \" ~-8s ~.6f  ~.6f~n\"<br/>    Enum.each(@probs, fn {glyph,expected} -&gt;<br/>      actual = length(for ^glyph &lt;- trials, do: glyph) / @tries<br/>     \u00a0:io.format fmt, [glyph, expected, actual]<br/>    end)<br/>  end<br/>\u00a0<br/>  defp get_choice([{glyph,_}], _), do: glyph<br/>  defp get_choice([{glyph,prob}|_], ran) when ran &lt; prob, do: glyph<br/>  defp get_choice([{_,prob}|t], ran), do: get_choice(t, ran - prob)<br/>end<br/>\u00a0<br/>Probabilistic.test</pre>"}, {"lang": "Erlang", "loc": 33, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>probabilistic_choice<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>test<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">TRIES</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Probs</span> <span class=\"sy3\">=</span> <br/>\t\t<span class=\"br0\">[</span><span class=\"br0\">{</span>aleph<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>beth<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>gimel<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>daleth<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>he<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>waw<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>zayin<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">11</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span>heth<span class=\"sy1\">,</span><span class=\"nu0\">1759</span><span class=\"sy3\">/</span><span class=\"nu0\">27720</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">seed</span><span class=\"br0\">(</span><span class=\"kw3\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>    <span class=\"re5\">Trials</span> <span class=\"sy3\">=</span> <br/>    \t<span class=\"br0\">[</span><span class=\"kw3\">get</span>_<span class=\"re3\">choice</span><span class=\"br0\">(</span><span class=\"re5\">Probs</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span>\u00a0_ <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>?<span class=\"re4\">TRIES</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Glyph</span><span class=\"sy1\">,</span><span class=\"re5\">Expected</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Glyph</span> <span class=\"sy3\">||</span> <span class=\"re5\">Glyph_</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Trials</span><span class=\"sy1\">,</span> <span class=\"re5\">Glyph_</span> <span class=\"sy3\">==</span> <span class=\"re5\">Glyph</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">/</span>?<span class=\"re4\">TRIES</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <br/>    \t <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Glyph</span><span class=\"sy1\">,</span><span class=\"re5\">Expected</span><span class=\"br0\">}</span>\u00a0<span class=\"sy3\">&lt;-</span> <span class=\"re5\">Probs</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_<span class=\"re3\">choice</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Glyph</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Glyph</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">get</span>_<span class=\"re3\">choice</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Glyph</span><span class=\"sy1\">,</span><span class=\"re5\">Prob</span><span class=\"br0\">}</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Ran</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"re5\">Ran</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">Prob</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <br/>\t\ttrue <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re5\">Glyph</span><span class=\"sy1\">;</span><br/>\t\tfalse <span class=\"sy1\">-&gt;</span> <br/>\t\t\t<span class=\"kw3\">get</span>_<span class=\"re3\">choice</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">Ran</span> <span class=\"sy3\">-</span> <span class=\"re5\">Prob</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 35, "block": "<pre class=\"text highlighted_source\">PROGRAM PROB_CHOICE<br/>\u00a0<br/>   DIM ITEM$[7],PROB[7],CNT[7]<br/>\u00a0<br/>BEGIN<br/>   ITEM$[]=(\"aleph\",\"beth\",\"gimel\",\"daleth\",\"he\",\"waw\",\"zayin\",\"heth\")<br/>\u00a0<br/>   PROB[0]=1/5.0  PROB[1]=1/6.0  PROB[2]=1/7.0   PROB[3]=1/8.0<br/>   PROB[4]=1/9.0  PROB[5]=1/10.0 PROB[6]=1/11.0  PROB[7]=1759/27720<br/>   SUM=0<br/>   FOR I%=0 TO UBOUND(PROB,1) DO<br/>      SUM=SUM+PROB[I%]<br/>   END FOR<br/>\u00a0<br/>   IF ABS(SUM-1)&gt;1E-6 THEN<br/>        PRINT(\"Probabilities don't sum to 1\")<br/>      ELSE<br/>        FOR TRIAL=1 TO 1E6 DO<br/>           R=RND(1)<br/>           P=0<br/>           FOR I%=0 TO UBOUND(PROB,1) DO<br/>              P+=PROB[I%]<br/>              IF R&lt;P THEN<br/>                 CNT[I%]+=1<br/>                 EXIT<br/>              END IF<br/>           END FOR<br/>        END FOR<br/>        PRINT(\"Item        actual    theoretical\")<br/>        PRINT(\"---------------------------------\")<br/>        FOR I%=0 TO UBOUND(ITEM$,1) DO<br/>           WRITE(\"\\      \\    #.######  #.######\";ITEM$[I%],CNT[I%]/1E6,PROB[I%])<br/>        END FOR<br/>   END IF<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 33, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> MAX <span class=\"sy1\">=</span> #3FFFFFFF<br/><span class=\"kw1\">constant</span> times <span class=\"sy1\">=</span> 1e6<br/><span class=\"kw2\">atom</span> d<span class=\"sy2\">,</span>e<br/><span class=\"kw2\">sequence</span> Mapps<br/>Mapps <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"aleph\"</span><span class=\"sy2\">,</span>  <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">5</span><span class=\"sy2\">,</span>        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"beth\"</span><span class=\"sy2\">,</span>   <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">6</span><span class=\"sy2\">,</span>        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"gimel\"</span><span class=\"sy2\">,</span>  <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span>        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"daleth\"</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">8</span><span class=\"sy2\">,</span>        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"he\"</span><span class=\"sy2\">,</span>     <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">9</span><span class=\"sy2\">,</span>        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"waw\"</span><span class=\"sy2\">,</span>    <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">10</span><span class=\"sy2\">,</span>       <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"zayin\"</span><span class=\"sy2\">,</span>  <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">11</span><span class=\"sy2\">,</span>       <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"heth\"</span><span class=\"sy2\">,</span>   <span class=\"nu0\">1759</span><span class=\"sy1\">/</span><span class=\"nu0\">27720</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> times <span class=\"kw1\">do</span><br/>    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">rand</span><span class=\"br0\">(</span>MAX<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>MAX<br/>    e <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>Mapps<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        e <span class=\"sy1\">+=</span> Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> d &lt;<span class=\"sy1\">=</span> e <span class=\"kw1\">then</span><br/>            Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Sample times:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>times<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>Mapps<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    d <span class=\"sy1\">=</span> Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">/</span>times<br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%-7s should be\u00a0%f is\u00a0%f | Deviatation\u00a0%6.3f%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><br/>                <span class=\"br0\">{</span>Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>d<span class=\"sy2\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">-</span>Mapps<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">/</span>d<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "Factor", "loc": 37, "block": "<pre class=\"text highlighted_source\">USING: arrays assocs combinators.random io kernel macros math<br/>math.statistics prettyprint quotations sequences sorting formatting\u00a0;<br/>IN: rosettacode.proba<br/>\u00a0<br/>CONSTANT: data<br/>{<br/>    { \"aleph\"   1/5.0 }<br/>    { \"beth\"    1/6.0 }<br/>    { \"gimel\"   1/7.0 }<br/>    { \"daleth\"  1/8.0 }<br/>    { \"he\"      1/9.0 }<br/>    { \"waw\"     1/10.0 }<br/>    { \"zayin\"   1/11.0 }<br/>    { \"heth\"    f }<br/>}<br/>\u00a0<br/>MACRO: case-probas ( data -- case-probas )<br/>    [ first2 [ swap 1quotation 2array ] [ 1quotation ] if* ] map 1quotation\u00a0;<br/>\u00a0<br/>: expected ( name data -- float )<br/>    2dup at [ 2nip ] [ nip values sift sum 1 swap - ] if*\u00a0; <br/>: generate ( # case-probas -- seq )<br/>    H{ } clone<br/>    [ [ [ casep ] [ inc-at ] bi* ] 2curry times ] keep\u00a0; inline<br/>: normalize ( seq # -- seq )<br/>    [ clone ] dip [ /f ] curry assoc-map\u00a0;<br/>: summarize1 ( name value data -- )<br/>    [ over ] dip expected<br/>    \"%6s:\u00a0%10f\u00a0%10f\\n\" printf\u00a0;<br/>: summarize ( generated data -- )<br/>    \"Key\" \"Value\" \"expected\" \"%6s \u00a0%10s\u00a0%10s\\n\" printf<br/>    [ summarize1 ] curry assoc-each\u00a0;<br/>: generate-normalized ( # proba -- seq )<br/>    [ generate ] [ drop normalize ] 2bi\u00a0; inline<br/>: example ( # data -- )<br/>    [ case-probas generate-normalized ] <br/>    [ summarize ] bi\u00a0; inline</pre>"}, {"lang": "Forth", "loc": 44, "block": "<pre class=\"text highlighted_source\">include random.fs<br/>\u00a0<br/>\\ common factors of desired probabilities (1/5 .. 1/11)<br/>2 2 * 2 * 3 * 3 * 5 * 7 * 11 * constant denom   \\ 27720<br/>\u00a0<br/>\\ represent each probability as the numerator with 27720 as the denominator<br/>: ,numerators ( max min -- )<br/>  do denom i / , loop\u00a0;<br/>\u00a0<br/>\\  final item is 27720 - sum(probs)<br/>: ,remainder ( denom addr len -- )<br/>  cells bounds do  i @ -  1 cells +loop ,\u00a0;<br/>\u00a0<br/>create probs 12 5 ,numerators  denom probs 7 ,remainder<br/>create bins 8 cells allot<br/>\u00a0<br/>: choose ( -- 0..7 )<br/>  denom random<br/>  8 0 do<br/>    probs i cells + @ -<br/>    dup 0&lt; if drop i unloop exit then<br/>  loop<br/>  abort\" can't get here\"\u00a0;<br/>\u00a0<br/>: trials ( n -- )<br/>  0 do  1  bins choose cells +  +!  loop\u00a0;<br/>\u00a0<br/>: str-table<br/>  create ( c-str ... n -- ) 0 do , loop<br/>  does&gt; ( n -- str len ) swap cells + @ count\u00a0;<br/>\u00a0<br/>here ,\" heth\"   here ,\" zayin\" here ,\" waw\"  here ,\" he\"<br/>here ,\" daleth\" here ,\" gimel\" here ,\" beth\" here ,\" aleph\"<br/>8 str-table names<br/>\u00a0<br/>: .header<br/>  cr .\" Name\" #tab emit .\" Prob\" #tab emit .\" Actual\" #tab emit .\" Error\"\u00a0;<br/>: .result ( n -- )<br/>  cr dup names type #tab emit<br/>  dup cells probs + @ s&gt;f denom s&gt;f f/ fdup f. #tab emit<br/>  dup cells bins  + @ s&gt;f 1e6       f/ fdup f. #tab emit<br/>  f- fabs fs.\u00a0;<br/>\u00a0<br/>: .results   .header 8 0 do i .result loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 33, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> PROBS<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"me2\">trials</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, probcount<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">expected</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, mapping<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, rnum<br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">items</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">\"aleph \"</span>, <span class=\"st0\">\"beth  \"</span>, <span class=\"st0\">\"gimel \"</span>, <span class=\"st0\">\"daleth\"</span>, <span class=\"st0\">\"he    \"</span>, <span class=\"st0\">\"waw   \"</span>, <span class=\"st0\">\"zayin \"</span>, <span class=\"st0\">\"heth  \"</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  expected<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">5</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  expected<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> SUM<span class=\"br0\">(</span>expected<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  mapping<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">5.0</span><br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">7</span><br/>     mapping<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> mapping<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4.0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  mapping<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, trials<br/>     <span class=\"kw1\">CALL</span> <span class=\"kw4\">RANDOM_NUMBER</span><span class=\"br0\">(</span>rnum<span class=\"br0\">)</span><br/>     <span class=\"kw1\">DO</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">8</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>rnum &lt; mapping<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>           probcount<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> probcount<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw1\">EXIT</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>     <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,I10)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Trials:             \"</span>, trials<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,8A10)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Items:             \"</span>, items<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,8F10.6)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Target Probability:  \"</span>, expected<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,8F10.6)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Attained Probability:\"</span>, <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>probcount<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>trials<span class=\"br0\">)</span><br/>\u00a0<br/>ENDPROGRAM PROBS</pre>"}, {"lang": "FreeBASIC", "loc": 59, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> letters  <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"aleph\"</span>, <span class=\"st0\">\"beth\"</span>, <span class=\"st0\">\"gimel\"</span>, <span class=\"st0\">\"daleth\"</span>, <span class=\"st0\">\"he\"</span>, <span class=\"st0\">\"waw\"</span>, <span class=\"st0\">\"zayin\"</span>, <span class=\"st0\">\"heth\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> actual   <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">'' all zero by default</span><br/><span class=\"kw1\">Dim</span> probs <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span>    <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>/<span class=\"nu0\">5.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">6.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">7.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">8.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">9.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">10.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">11.0</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> cumProbs <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>cumProbs<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = probs<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">6</span><br/>  cumProbs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = cumProbs<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + probs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>cumProbs<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> = <span class=\"nu0\">1.0</span><br/>probs<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> = <span class=\"nu0\">1.0</span> - cumProbs<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span><br/><span class=\"kw1\">Dim</span> rand <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">Dim</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">1000000</span><br/><span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">0.0</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>  rand = <span class=\"kw1\">Rnd</span>  <span class=\"co1\">'' random number where 0 &lt;= rand &lt; 1</span><br/>  Select <span class=\"kw1\">case</span> rand<br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> &lt;= cumProbs<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Else</span><br/>      actual<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">End</span> Select<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> sumActual <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Letter\"</span>, <span class=\"st0\">\" Actual\"</span>, <span class=\"st0\">\"Expected\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"------\"</span>, <span class=\"st0\">\"--------\"</span>, <span class=\"st0\">\"--------\"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span>   <br/>  <span class=\"kw1\">Print</span> letters<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#.######\"</span>; actual<span class=\"br0\">(</span>i<span class=\"br0\">)</span>/n; <br/>  sumActual += actual<span class=\"br0\">(</span>i<span class=\"br0\">)</span>/n<br/>  <span class=\"kw1\">Print</span> , <span class=\"kw1\">Using</span> <span class=\"st0\">\"#.######\"</span>; probs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> , <span class=\"st0\">\"--------\"</span>, <span class=\"st0\">\"--------\"</span><br/><span class=\"kw1\">Print</span> , <span class=\"kw1\">Using</span> <span class=\"st0\">\"#.######\"</span>; sumActual; <br/><span class=\"kw1\">Print</span> , <span class=\"kw1\">Using</span> <span class=\"st0\">\"#.######\"</span>; <span class=\"nu0\">1.000000</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 63, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> mapping <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    item <span class=\"kw4\">string</span><br/>    pr   <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// input mapping</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>mapping<span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"aleph\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">5</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"beth\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">6</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"gimel\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">7</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"daleth\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">8</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"he\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"waw\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">10</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"zayin\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"nu0\">11</span><span class=\"sy3\">.</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"heth\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1759</span> <span class=\"sy3\">/</span> <span class=\"nu0\">27720</span><span class=\"sy3\">.</span><span class=\"sy1\">}}</span> <span class=\"co1\">// adjusted so that probabilities add to 1</span><br/>\u00a0<br/>    <span class=\"co1\">// cumulative probability</span><br/>    cpr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> c <span class=\"kw4\">float64</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">+=</span> m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>pr<br/>        cpr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// generate</span><br/>    <span class=\"kw1\">const</span> samples <span class=\"sy2\">=</span> <span class=\"nu1\">1e6</span><br/>    occ <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">))</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; samples<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> r &lt; cpr<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                occ<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> j <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>cpr<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                occ<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>cpr<span class=\"sy1\">)]</span><span class=\"sy2\">++</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// report</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  Item  Target   Generated\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> totalTarget<span class=\"sy1\">,</span> totalGenerated <span class=\"kw4\">float64</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        target <span class=\"sy2\">:=</span> m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>pr<br/>        generated <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>occ<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span> <span class=\"sy3\">/</span> samples<br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%6s \u00a0%8.6f \u00a0%8.6f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">[</span>i<span class=\"sy1\">]</span><span class=\"sy3\">.</span><span class=\"me1\">item</span><span class=\"sy1\">,</span> target<span class=\"sy1\">,</span> generated<span class=\"sy1\">)</span><br/>        totalTarget <span class=\"sy2\">+=</span> target<br/>        totalGenerated <span class=\"sy2\">+=</span> generated<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Totals \u00a0%8.6f \u00a0%8.6f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> totalTarget<span class=\"sy1\">,</span> totalGenerated<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>newStdGen<span class=\"sy0\">,</span> randomRs<span class=\"br0\">)</span><br/>\u00a0<br/>dataBinCounts <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>dataBinCounts thresholds range <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sampleSize <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> range<br/>      xs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> sampleSize <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> range <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> thresholds<br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>xs <span class=\"sy0\">++</span> <span class=\"br0\">[</span>sampleSize<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0: xs<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  g <span class=\"sy0\">&lt;-</span> newStdGen<br/>  <span class=\"kw1\">let</span> fractions <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:recip\"><span class=\"kw3\">recip</span></a> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">]</span><br/>      expected <span class=\"sy0\">=</span> fractions <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> fractions<span class=\"br0\">]</span><br/>      actual <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1000000.0</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>        dataBinCounts <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> expected<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1000000</span> <span class=\"br0\">(</span>randomRs <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      piv n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"       expected     actual\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith3\"><span class=\"kw3\">zipWith3</span></a><br/>      <span class=\"br0\">(</span>\\l s c <span class=\"sy0\">-&gt;</span> piv <span class=\"nu0\">7</span> l <span class=\"sy0\">++</span> piv <span class=\"nu0\">13</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> s<span class=\"br0\">)</span> <span class=\"sy0\">++</span> piv <span class=\"nu0\">12</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span><span class=\"st0\">\"aleph\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"beth\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gimel\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"daleth\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"he\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"waw\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"zayin\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"heth\"</span><span class=\"br0\">]</span><br/>      expected<br/>      actual</pre>"}, {"lang": "HicEst", "loc": 17, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> trials<span class=\"sy1\">=</span>1E6<span class=\"sy1\">,</span> n<span class=\"sy1\">=</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> map<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> limit<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> outcome<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>expected <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span><span class=\"sy2\">$</span> <span class=\"sy1\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>expected<span class=\"br0\">)</span> <span class=\"sy1\">+</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>map <span class=\"sy1\">=</span> expected<br/>map <span class=\"sy1\">=</span> map<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> map<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> trials<br/>   random <span class=\"sy1\">=</span> <span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   limit <span class=\"sy1\">=</span> random <span class=\"sy1\">&gt;</span> map<br/>   item <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>limit<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   outcome<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"sy1\">=</span> outcome<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">ENDDO</span><br/>outcome <span class=\"sy1\">=</span> outcome <span class=\"sy1\">/</span> trials<br/>\u00a0<br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>expected<span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>outcome<span class=\"sy1\">,</span> Y<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 52, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">record</span> Item<span class=\"br0\">(</span>value<span class=\"sy1\">,</span> probability<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> find_item <span class=\"br0\">(</span>items<span class=\"sy1\">,</span> v<span class=\"br0\">)</span><br/>  sum <span class=\"sy1\">:=</span> <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">every</span> item <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>items <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> v <span class=\"sy1\">&lt;</span> sum<span class=\"sy1\">+</span>item<span class=\"sy1\">.</span><span class=\"me1\">probability</span><br/>     <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> item<span class=\"sy1\">.</span><span class=\"me1\">value</span><br/>     <span class=\"kw1\">else</span> sum <span class=\"sy1\">+:=</span> item<span class=\"sy1\">.</span><span class=\"me1\">probability</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">fail</span> <span class=\"co1\"># v exceeded 1.0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># -- helper procedures</span><br/>\u00a0<br/><span class=\"co1\"># count the number of occurrences of i in list l,</span><br/><span class=\"co1\"># assuming the items are strings</span><br/><span class=\"kw1\">procedure</span> count <span class=\"br0\">(</span>l<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>l <span class=\"kw1\">do</span> <br/>    <span class=\"kw1\">if</span> x <span class=\"sy1\">==</span> i <span class=\"kw1\">then</span> result <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rand_float <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy1\">?</span><span class=\"nu0\">1000</span><span class=\"sy1\">/</span><span class=\"nu0\">1000.0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># -- test the procedure</span><br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  items <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"aleph\"</span><span class=\"sy1\">,</span>   <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"beth\"</span><span class=\"sy1\">,</span>    <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"gimel\"</span><span class=\"sy1\">,</span>   <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"daleth\"</span><span class=\"sy1\">,</span>  <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">8.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"he\"</span><span class=\"sy1\">,</span>      <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">9.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"waw\"</span><span class=\"sy1\">,</span>     <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"zayin\"</span><span class=\"sy1\">,</span>   <span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">11.0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Item<span class=\"br0\">(</span><span class=\"st0\">\"heth\"</span><span class=\"sy1\">,</span>    <span class=\"nu0\">1759</span><span class=\"sy1\">/</span><span class=\"nu0\">27720.0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\"># collect a sample of results</span><br/>  sample <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">push</span> <span class=\"br0\">(</span>sample<span class=\"sy1\">,</span> find_item<span class=\"br0\">(</span>items<span class=\"sy1\">,</span> rand_float <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># return comparison of expected vs actual probability</span><br/>  <span class=\"kw1\">every</span> item <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>items <span class=\"kw1\">do</span> <br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>item<span class=\"sy1\">.</span><span class=\"me1\">value</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <br/>           <span class=\"kw4\">left</span><span class=\"br0\">(</span>item<span class=\"sy1\">.</span><span class=\"me1\">probability</span><span class=\"sy1\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <br/>           <span class=\"kw4\">left</span><span class=\"br0\">(</span>count<span class=\"br0\">(</span>sample<span class=\"sy1\">,</span> item<span class=\"sy1\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy1\">/*</span>sample<span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 18, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>main=: verb define<br/>  hdr=.  <span class=\"st_h\">'       target   actual  '</span><br/>  lbls=.\u00a0; ,:&amp;.&gt;\u00a0;:<span class=\"st_h\">'aleph beth gimel daleth he waw zayin heth'</span><br/>  prtn=. +/\\ pt=. <span class=\"sy0\">(</span>, <span class=\"nu0\">1</span>-+/<span class=\"sy0\">)</span><span class=\"nu0\">1r1</span>%<span class=\"nu0\">5</span>+i.<span class=\"nu0\">7</span><br/>  da=.   prtn I.\u00a0?<span class=\"kw2\">y</span> # <span class=\"nu0\">0</span><br/>  pa=.   <span class=\"kw2\">y</span>%~ +/ da =/ i.<span class=\"nu0\">8</span><br/>  hdr, lbls,. <span class=\"nu0\">9j6</span> \": |: pt,:pa<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Note<span class=\"co2\"> 'named abbreviations'<br/>     hdr  (header)<br/>     lbls (labels)<br/>     pt   (target proportions)<br/>     prtn (partitions corresponding to target proportions)<br/>     da   (distribution of actual values among partitions)<br/>     pa   (actual proportions)<br/>)</span></pre>"}, {"lang": "Java", "loc": 67, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Prob<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">long</span> TRIALS<span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Expv<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> probcount<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">double</span> expect<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">double</span> mapping<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> Expv<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name, <span class=\"kw4\">int</span> probcount, <span class=\"kw4\">double</span> expect, <span class=\"kw4\">double</span> mapping<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">name</span><span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">probcount</span><span class=\"sy0\">=</span> probcount<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">expect</span><span class=\"sy0\">=</span> expect<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">mapping</span><span class=\"sy0\">=</span> mapping<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">static</span> Expv<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">=</span><br/>\t\t\t<span class=\"br0\">{</span><span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"aleph\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"beth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t\t\t\t\t<span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"gimel\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t\t\t\t\t<span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"daleth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t\t\t\t\t<span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"he\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"waw\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t\t\t\t\t<span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"zayin\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>\t\t\t\t\t<span class=\"kw1\">new</span> Expv<span class=\"br0\">(</span><span class=\"st0\">\"heth\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> i, j<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span> rnum, tsum<span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rnum<span class=\"sy0\">=</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span>, rnum<span class=\"sy0\">+=</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\titems<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">expect</span><span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> rnum<span class=\"sy0\">;</span><br/>\t\t\ttsum<span class=\"sy0\">+=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">expect</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\titems<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>.<span class=\"me1\">expect</span><span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> tsum<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\titems<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">mapping</span><span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\titems<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">mapping</span><span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">mapping</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\titems<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>.<span class=\"me1\">mapping</span><span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> TRIALS<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\trnum<span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rnum <span class=\"sy0\">&lt;</span> items<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">mapping</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\titems<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">probcount</span><span class=\"sy0\">++;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Trials:\u00a0%d<span class=\"es0\">\\n</span>\"</span>, TRIALS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Items:          \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-8s \"</span>, items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Target prob.:   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%8.6f \"</span>, items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">expect</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Attained prob.: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%8.6f \"</span>, <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">(</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">probcount</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>TRIALS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 32, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> probabilities <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    aleph<span class=\"sy0\">:</span>  <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><span class=\"sy0\">,</span><br/>    beth<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span><span class=\"sy0\">,</span><br/>    gimel<span class=\"sy0\">:</span>  <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span><span class=\"sy0\">,</span><br/>    daleth<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span><span class=\"sy0\">,</span><br/>    he<span class=\"sy0\">:</span>     <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span><span class=\"sy0\">,</span><br/>    waw<span class=\"sy0\">:</span>    <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span><br/>    zayin<span class=\"sy0\">:</span>  <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span><span class=\"sy0\">,</span><br/>    heth<span class=\"sy0\">:</span>   <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> iterations <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> cumulative <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> randomly <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> name <span class=\"kw1\">in</span> probabilities<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">+=</span> probabilities<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    cumulative<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>    randomly<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> iterations<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> name <span class=\"kw1\">in</span> cumulative<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;=</span> cumulative<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            randomly<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> name <span class=\"kw1\">in</span> probabilities<span class=\"br0\">)</span> <br/>    <span class=\"co1\">// using WSH</span><br/>    WScript.<span class=\"me1\">Echo</span><span class=\"br0\">(</span>name <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> probabilities<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> randomly<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"sy0\">/</span>iterations<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>p = [1/i for i in 5:11]<br/>plen = length(p)<br/>q = [0.0, [sum(p[1:i]) for i = 1:plen]]<br/>plab = [char(i) for i in 0x05d0:(0x05d0+plen)]<br/>hi = 10^6<br/>push!(p, 1.0 - sum(p))<br/>plen += 1<br/>\u00a0<br/>accum = zeros(Int, plen)<br/>\u00a0<br/>for i in 1:hi<br/>    accum[sum(rand() .&gt;= q)] += 1<br/>end<br/>\u00a0<br/>r = accum/hi<br/>\u00a0<br/>println(\"Rates at which items are selected (\", hi, \" trials).\")<br/>println(\" Item  Expected   Actual\")<br/>for i in 1:plen<br/>    println(@sprintf(\"   \\u2067%s  \u00a0%8.6f \u00a0%8.6f\", plab[i], p[i], r[i]))<br/>end<br/>\u00a0<br/>println()<br/>println(\"Rates at which items are selected (\", hi, \" trials).\")<br/>println(\" Item         Count   Expected   Actual\")<br/>for i in 1:plen<br/>    println(@sprintf(\"  \u00a0%s yields \u00a0%6d  \u00a0%8.6f \u00a0%8.6f\",<br/>                     plab[i], accum[i], p[i], r[i]))<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letters  <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"aleph\"</span>, <span class=\"st0\">\"beth\"</span>, <span class=\"st0\">\"gimel\"</span>, <span class=\"st0\">\"daleth\"</span>, <span class=\"st0\">\"he\"</span>, <span class=\"st0\">\"waw\"</span>, <span class=\"st0\">\"zayin\"</span>, <span class=\"st0\">\"heth\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> actual   <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> probs    <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"nu0\">5.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">6.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">7.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">8.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">9.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">10.0</span>, <span class=\"nu0\">1</span>/<span class=\"nu0\">11.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cumProbs <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>    cumProbs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> probs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> cumProbs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cumProbs<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + probs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    cumProbs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    probs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> - cumProbs<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        when <span class=\"br0\">{</span><br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>++<br/>             rand <span class=\"sy0\">&lt;=</span> cumProbs<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>++<br/>             <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>                -<span class=\"sy0\">&gt;</span> actual<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sumActual <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span> <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Letter<span class=\"es1\">\\t</span> Actual    Expected\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"------<span class=\"es1\">\\t</span>--------   --------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> generated <span class=\"sy0\">=</span> actual<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> / n  <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${letters[i]}<span class=\"es1\">\\t</span>${String.format(\"</span><span class=\"sy0\">%</span>8.6f   <span class=\"sy0\">%</span>8.6f<span class=\"st0\">\", generated, probs[i])}\"</span><span class=\"br0\">)</span><br/>        sumActual +<span class=\"sy0\">=</span> generated<br/>    <span class=\"br0\">}</span>  <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>--------   --------\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>${\"</span><span class=\"sy0\">%</span>8.6f<span class=\"st0\">\".format(sumActual)}   1.000000\"</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 26, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>names$<span class=\"sy0\">=</span><span class=\"st0\">\"aleph beth gimel daleth he waw zayin heth\"</span><br/><span class=\"kw1\">dim</span> sum<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> counter<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">7</span><br/>    s <span class=\"sy0\">=</span> s<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    sum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<br/><span class=\"kw1\">next</span><br/>\u00a0<br/>N <span class=\"sy0\">=</span><span class=\"nu0\">1000000</span>     <span class=\"co1\">'  number of throws</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    rand <span class=\"sy0\">=</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">7</span><br/>        <span class=\"kw1\">if</span> sum<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span> rand <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">next</span><br/>    counter<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>counter<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Observed\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Intended\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span><br/>    <span class=\"kw1\">print</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span>names$<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.#####\"</span><span class=\"sy0\">,</span> counter<span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <span class=\"sy0\">/</span>N<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.#####\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 34, "block": "<pre class=\"lua highlighted_source\">items <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"aleph\"</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"beth\"</span><span class=\"br0\">]</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"gimel\"</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"daleth\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"he\"</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"waw\"</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"zayin\"</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span><br/>items<span class=\"br0\">[</span><span class=\"st0\">\"heth\"</span><span class=\"br0\">]</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><br/>\u00a0<br/>num_trials <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/>samples <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> item<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span> items <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    samples<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> num_trials <span class=\"kw1\">do</span><br/>    z <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> item<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span> items <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> z <span class=\"sy0\">&lt;</span> items<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t    samples<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> samples<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/> \t    z <span class=\"sy0\">=</span> z <span class=\"sy0\">-</span> items<span class=\"br0\">[</span>item<span class=\"br0\">]</span>\t<br/>\t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> item<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span> items <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> item<span class=\"sy0\">,</span> samples<span class=\"br0\">[</span>item<span class=\"br0\">]</span><span class=\"sy0\">/</span>num_trials<span class=\"sy0\">,</span> items<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">choices={{\"aleph\", 1/5},{\"beth\", 1/6},{\"gimel\", 1/7},{\"daleth\", 1/8},{\"he\", 1/9},{\"waw\", 1/10},{\"zayin\", 1/11},{\"heth\", 1759/27720}};<br/>data=RandomChoice[choices[[All,2]]-&gt;choices[[All,1]],10^6];</pre>"}, {"lang": "MATLAB", "loc": 11, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> probChoice<br/>    choices = <span class=\"br0\">{</span><span class=\"co2\">'aleph'</span> <span class=\"co2\">'beth'</span> <span class=\"co2\">'gimel'</span> <span class=\"co2\">'daleth'</span> <span class=\"co2\">'he'</span> <span class=\"co2\">'waw'</span> <span class=\"co2\">'zayin'</span> <span class=\"co2\">'heth'</span><span class=\"br0\">}</span>;<br/>    w = <span class=\"br0\">[</span><span class=\"nu0\">1</span>/<span class=\"nu0\">5</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">6</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">7</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">8</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">9</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">10</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">11</span> <span class=\"nu0\">1759</span>/<span class=\"nu0\">27720</span><span class=\"br0\">]</span>;<br/>    R = randsample<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>w<span class=\"br0\">)</span>, 1e6, true, w<span class=\"br0\">)</span>;<br/>    T = tabulate<span class=\"br0\">(</span>R<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Value\\tCount\\tPercent\\tGoal\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>T, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%6s\\t%.f\\t%.2f%%\\t%.2f%%\\n'</span>, <span class=\"sy0\">...</span><br/>            <span class=\"me1\">choices</span><span class=\"br0\">{</span>k<span class=\"br0\">}</span>, T<span class=\"br0\">(</span>k, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, T<span class=\"br0\">(</span>k, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"nu0\">100</span>*w<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 47, "block": "<pre class=\"text highlighted_source\">import tables, math, strutils, times<br/>\u00a0<br/>const<br/>   num_trials = 1000000<br/>   precsn     = 6<br/>\u00a0<br/>var start = cpuTime()<br/>\u00a0<br/>var probs = initTable[string,float](16)<br/>probs.add(\"aleph\",  1/5.0)<br/>probs.add(\"beth\",   1/6.0)<br/>probs.add(\"gimel\",  1/7.0)<br/>probs.add(\"daleth\", 1/8.0)<br/>probs.add(\"he\",     1/9.0)<br/>probs.add(\"waw\",    1/10.0)<br/>probs.add(\"zayin\",  1/11.0)<br/>probs.add(\"heth\",   1759/27720)<br/>\u00a0<br/>var samples = initTable[string,int](16)<br/>for i, j in pairs(probs):<br/>    samples.add(i,0)<br/>\u00a0<br/>randomize()<br/>for i in 1 .. num_trials:<br/>    var z = random(1.0)<br/>\u00a0<br/>    for j,k in pairs(probs):<br/>        if z &lt; probs[j]:<br/>            samples[j] = samples[j] + 1<br/>            break<br/>        else:<br/>             z = z - probs[j]    <br/>\u00a0<br/>var s1, s2: float<br/>\u00a0<br/>echo(\"Item  \",\"\\t\",\"Target  \",\"\\t\",\"Results  \",\"\\t\",\"Difference\")<br/>echo(\"====  \",\"\\t\",\"======  \",\"\\t\",\"=======  \",\"\\t\",\"==========\")<br/>for i, j in pairs(probs):<br/>    s1 += samples[i]/num_trials*100.0<br/>    s2 += probs[i]*100.0<br/>    echo( i, <br/>             \"\\t\", formatFloat(probs[i],ffDecimal,precsn),<br/>             \"\\t\", formatFloat(samples[i]/num_trials,ffDecimal,precsn), <br/>             \"\\t\", formatFloat(100.0*(1.0-(samples[i]/num_trials)/probs[i]),ffDecimal,precsn),\"%\")<br/>echo(\"======\",\"\\t\",\"======= \",\"\\t\",\"======== \")<br/>echo(\"Total:\",\"\\t\",formatFloat(s2,ffDecimal,2),\"  \\t\",formatFloat(s1,ffDecimal,2))<br/>echo(\"\\n\",formatFloat(cpuTime()-start,ffDecimal,2),\" secs\")</pre>"}, {"lang": "OCaml", "loc": 30, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"Aleph\"</span>,   <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Beth\"</span>,    <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">6.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Gimel\"</span>,   <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">7.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Daleth\"</span>,  <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">8.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"He\"</span>,      <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">9.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Waw\"</span>,     <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">10.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Zayin\"</span>,   <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">11.0</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Heth\"</span>, <span class=\"nu0\">1759.0</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">27720.0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> take k <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">(</span>v, p<span class=\"br0\">)</span><span class=\"sy0\">::</span>tl <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> k <span class=\"sy0\">&lt;</span> p <span class=\"kw1\">then</span> v <span class=\"kw1\">else</span> take <span class=\"br0\">(</span>k <span class=\"sy0\">-.</span> p<span class=\"br0\">)</span> tl<br/>  <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinvalid_arg\"><span class=\"kw3\">invalid_arg</span></a> <span class=\"st0\">\"take\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">3</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>v, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h v <span class=\"nu0\">0</span><span class=\"br0\">)</span> p<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> tot <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc <span class=\"br0\">(</span>_, p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+.</span> p<span class=\"br0\">)</span> <span class=\"nu0\">0.0</span> p <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> sel <span class=\"sy0\">=</span> take <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> tot<span class=\"br0\">)</span> p <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h sel <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace h sel <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> n<span class=\"br0\">)</span>  <span class=\"co1\">(* count the number of each item *)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>v, p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h v <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%s \\t\u00a0%f\u00a0%f\\n\"</span> v p <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> d <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> p</pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">pc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">5544</span><span class=\"sy0\">,</span><span class=\"nu1\">10164</span><span class=\"sy0\">,</span><span class=\"nu1\">14124</span><span class=\"sy0\">,</span><span class=\"nu1\">17589</span><span class=\"sy0\">,</span><span class=\"nu1\">20669</span><span class=\"sy0\">,</span><span class=\"nu1\">23441</span><span class=\"sy0\">,</span><span class=\"nu1\">25961</span><span class=\"sy0\">,</span><span class=\"nu1\">27720</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu2\">1e6</span><span class=\"sy0\">,</span><br/>    my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">27720</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">&lt;</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">++;</span> <span class=\"kw1\">break</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  e<span class=\"sy0\">=</span><span class=\"kw1\">precision</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">11</span><span class=\"sy0\">,</span><span class=\"nu1\">1759</span><span class=\"sy0\">/</span><span class=\"nu1\">27720</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu2\">1e6</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ truncate to 9 decimal places</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Totals: \"</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Expected: \"</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Diff: \"</span><span class=\"sy0\">,</span>u<span class=\"sy0\">-</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"StDev: \"</span><span class=\"sy0\">,</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>e<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 38, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>first sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant TRIALS <span class=\"sy0\">=&gt;</span> 1e6<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> prob_choice_picker <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">%options</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span><span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%options</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$n</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span> first <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">&lt;=</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">@a</span> <span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%ps</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>aleph  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><br/>   beth   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>   gimel  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><br/>   daleth <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><br/>   he     <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><br/>   waw    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><br/>   zayin  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$ps</span><span class=\"br0\">{</span>heth<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> sum <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%ps</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$picker</span> <span class=\"sy0\">=</span> prob_choice_picker <span class=\"re0\">%ps</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%results</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> TRIALS <span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">++</span><span class=\"re0\">$results</span><span class=\"br0\">{</span><span class=\"re0\">$picker</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Event   Occurred  Expected  Difference<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span><span class=\"re0\">$results</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$results</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%results</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%-6s \u00a0%f \u00a0%f \u00a0%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$results</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">/</span>TRIALS<span class=\"sy0\">,</span> <span class=\"re0\">$ps</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$results</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">/</span>TRIALS <span class=\"sy0\">-</span> <span class=\"re0\">$ps</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> TRIALS <span class=\"sy0\">=</span> 1e6<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">@event</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>aleph beth gimel daleth he waw zayin heth<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">@P</span> <span class=\"sy0\">=</span> flat <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">X</span><span class=\"sy0\">/</span> <span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@cP</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>\\<span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@P</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@results</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@results</span><span class=\"br0\">[</span> <span class=\"re0\">@cP</span><span class=\"sy0\">.</span><span class=\"kw3\">first</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&gt;</span> once <span class=\"kw3\">rand</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>k <span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"kw1\">xx</span> TRIALS<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span>  <span class=\"st_h\">'Event    Occurred Expected  Difference'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@results</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$occurred</span><span class=\"sy0\">,</span> <span class=\"re0\">$expected</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@results</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@P</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> TRIALS<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%-9s%8.0f%9.1f%12.1f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">@event</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$occurred</span><span class=\"sy0\">,</span><br/>                     <span class=\"re0\">$expected</span><span class=\"sy0\">,</span><br/>                          <span class=\"kw3\">abs</span> <span class=\"re0\">$occurred</span> <span class=\"sy0\">-</span> <span class=\"re0\">$expected</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 28, "block": "<pre class=\"text highlighted_source\">constant {names, probs} = columnize({{\"aleph\",  1/5},<br/>                                     {\"beth\",   1/6},<br/>                                     {\"gimel\",  1/7},<br/>                                     {\"daleth\", 1/8},<br/>                                     {\"he\",     1/9},<br/>                                     {\"waw\",    1/10},<br/>                                     {\"zayin\",  1/11},<br/>                                     {\"heth\",   1759/27720}})<br/>\u00a0<br/>sequence results = repeat(0,length(names))<br/>\u00a0<br/>atom r<br/>constant lim = 1000000<br/>for j=1 to lim do<br/>    r = rnd()<br/>    for i=1 to length(probs) do<br/>        r -= probs[i]<br/>        if r&lt;=0 then<br/>            results[i]+=1<br/>            exit<br/>        end if<br/>    end for<br/>end for<br/>\u00a0<br/>printf(1,\"  Name   Actual Expected\\n\")<br/>for i=1 to length(probs) do<br/>    printf(1,\"%6s\u00a0%8.6f\u00a0%8.6f\\n\",{names[i],results[i]/lim,probs[i]})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(let (Count 1000000  Denom 27720  N Denom)<br/>   (let Probs<br/>      (mapcar<br/>         '((I S)<br/>            (prog1 (cons N (*/ Count I) 0 S)<br/>               (dec 'N (/ Denom I)) ) )<br/>         (range 5 12)<br/>         '(aleph beth gimel daleth he waw zayin heth) )<br/>      (do Count<br/>         (inc (cddr (rank (rand 1 Denom) Probs T))) )<br/>      (let Fmt (-6 12 12)<br/>         (tab Fmt NIL \"Probability\" \"Result\")<br/>         (for X Probs<br/>            (tab Fmt<br/>               (cdddr X)<br/>               (format (cadr X) 6)<br/>               (format (caddr X) 6) ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 45, "block": "<pre class=\"pli highlighted_source\"> probch<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> prob<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>      <span class=\"coMULTI\">/* aleph  */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>      <span class=\"coMULTI\">/* beth   */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>      <span class=\"coMULTI\">/* gimel  */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>      <span class=\"coMULTI\">/* daleth */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>      <span class=\"coMULTI\">/* he     */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>     <span class=\"coMULTI\">/* waw    */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>     <span class=\"coMULTI\">/* zayin  */</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"coMULTI\">/* heth   */</span><br/> <span class=\"kw1\">Dcl</span> what<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'aleph '</span><span class=\"sy0\">,</span><span class=\"st0\">'beth  '</span><span class=\"sy0\">,</span><span class=\"st0\">'gimel '</span><span class=\"sy0\">,</span><span class=\"st0\">'daleth'</span><span class=\"sy0\">,</span><br/>                          <span class=\"st0\">'he    '</span><span class=\"sy0\">,</span><span class=\"st0\">'waw   '</span><span class=\"sy0\">,</span><span class=\"st0\">'zayin '</span><span class=\"sy0\">,</span><span class=\"st0\">'heth  '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ulim<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ifloat <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> one    <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> num    <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1759</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> denom  <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">27720</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x      <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pr     <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>nn<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> cnt<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> nn<span class=\"sy0\">=</span><span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>   ifloat<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span> <span class=\"kw1\">Then</span><br/>     prob<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>one<span class=\"sy0\">/</span>ifloat<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span><br/>     prob<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>num<span class=\"sy0\">/</span>denom<span class=\"sy0\">;</span><br/>   Ulim<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>ulim<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>prob<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"coMULTI\">/* Put Skip list(i,prob(i),ulim(i));*/</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nn<span class=\"sy0\">;</span><br/>   x<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> x<span class=\"sy0\">&lt;</span>ulim<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   cnt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'letter    occurs    frequency  expected '</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'------    ------   ---------- ----------'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>   pr<span class=\"sy0\">=</span><span class=\"kw1\">float</span><span class=\"br0\">(</span>cnt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw1\">float</span><span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>what<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>cnt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>pr<span class=\"sy0\">,</span>prob<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 48, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$character</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>    aleph  <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>      \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d0\"</span><span class=\"br0\">}</span><br/>    beth   <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span>      \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d1\"</span><span class=\"br0\">}</span><br/>    gimel  <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span>      \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d2\"</span><span class=\"br0\">}</span><br/>    daleth <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span>      \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d3\"</span><span class=\"br0\">}</span><br/>    he     <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span>      \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d4\"</span><span class=\"br0\">}</span><br/>    waw    <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>     \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d5\"</span><span class=\"br0\">}</span><br/>    zayin  <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span>     \u00a0; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d6\"</span><span class=\"br0\">}</span><br/>    heth   <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>Expected<span class=\"sy0\">=</span><span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span>; Alpha<span class=\"sy0\">=</span><span class=\"st0\">\"\u05d7\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$sum</span>        <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"re0\">$iterations</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/><span class=\"re0\">$cumulative</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"re0\">$randomly</span>   <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$name</span> <span class=\"kw3\">in</span> <span class=\"re0\">$character</span>.PSObject.Properties.Name<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$character</span>.<span class=\"re0\">$name</span>.Expected<br/>    <span class=\"re0\">$cumulative</span>.<span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sum</span><br/>    <span class=\"re0\">$randomly</span>.<span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$iterations</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"re0\">$random</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0.0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">1.0</span><br/>\u00a0<br/>    <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$name</span> <span class=\"kw3\">in</span> <span class=\"re0\">$cumulative</span>.Keys<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$random</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$cumulative</span>.<span class=\"re0\">$name</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$randomly</span>.<span class=\"re0\">$name</span><span class=\"sy0\">++</span><br/>            <span class=\"kw3\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$name</span> <span class=\"kw3\">in</span> <span class=\"re0\">$character</span>.PSObject.Properties.Name<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        Name      <span class=\"sy0\">=</span> <span class=\"re0\">$name</span><br/>        Expected  <span class=\"sy0\">=</span> <span class=\"re0\">$character</span>.<span class=\"re0\">$name</span>.Expected<br/>        Actual    <span class=\"sy0\">=</span> <span class=\"re0\">$randomly</span>.<span class=\"re0\">$name</span> <span class=\"sy0\">/</span> <span class=\"re0\">$iterations</span><br/>        Character <span class=\"sy0\">=</span> <span class=\"re0\">$character</span>.<span class=\"re0\">$name</span>.Alpha<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 42, "block": "<pre class=\"purebasic highlighted_source\">#times<span class=\"sy0\">=</span><span class=\"nu0\">1000000</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> Item<br/>  name.s<br/>  prob.d<br/>  Amount.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, j, d.d, e.d, txt.s<br/>  <span class=\"kw1\">Dim</span> Mapps.Item<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"aleph\"</span>: Mapps<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"beth\"</span>:  Mapps<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span> <br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"gimel\"</span>: Mapps<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span> <br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"daleth\"</span>:Mapps<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span> <br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"he\"</span>:    Mapps<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span><br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"waw\"</span>:   Mapps<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span><br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"zayin\"</span>: Mapps<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span><br/>  Mapps<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">=</span><span class=\"st0\">\"heth\"</span>:  Mapps<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">=</span><span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720.0</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #times <br/>    d<span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>#MAXLONG<span class=\"br0\">)</span><span class=\"sy0\">/</span>#MAXLONG  <span class=\"co1\">; Get a random number</span><br/>    e<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>Mapps<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      e<span class=\"sy0\">+</span>Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob            <span class=\"co1\">; Get span for current itme</span><br/>      <span class=\"kw1\">If</span> d<span class=\"sy0\">&lt;=</span>e                    <span class=\"co1\">; Check if it is within this span?</span><br/>        Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Amount<span class=\"sy0\">+</span><span class=\"nu0\">1</span>        <span class=\"co1\">; If so, count it.</span><br/>        <span class=\"kw1\">Break</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Sample times: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>#times<span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>Mapps<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      d<span class=\"sy0\">=</span>Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Amount<span class=\"sy0\">/</span>#times<br/>      txt<span class=\"sy0\">=</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span>Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>name,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" should be \"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" is \"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>txt<span class=\"sy0\">+</span><span class=\"st0\">\" | Deviatation \"</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span><span class=\"sy0\">-</span><span class=\"nu0\">100.0</span><span class=\"sy0\">*</span>Mapps<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>prob<span class=\"sy0\">/</span>d,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"%\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>:<span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 64, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><span class=\"sy0\">,</span> <span class=\"kw3\">bisect</span><br/>\u00a0<br/><span class=\"kw1\">def</span> probchoice<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> probs<span class=\"br0\">)</span>:<br/>  <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>  Splits the interval 0.0-1.0 in proportion to probs<br/>  then finds where each random.random() choice lies<br/>  '''</span><br/>\u00a0<br/>  prob_accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  accumulator <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> probs:<br/>    prob_accumulator +<span class=\"sy0\">=</span> p<br/>    accumulator.<span class=\"me1\">append</span><span class=\"br0\">(</span>prob_accumulator<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>    r <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">yield</span> items<span class=\"br0\">[</span><span class=\"kw3\">bisect</span>.<span class=\"kw3\">bisect</span><span class=\"br0\">(</span>accumulator<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> probchoice2<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> probs<span class=\"sy0\">,</span> bincount<span class=\"sy0\">=</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>:<br/>  <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>  Puts items in bins in proportion to probs<br/>  then uses random.choice() to select items.<br/>\u00a0<br/>  Larger bincount for more memory use but<br/>  higher accuracy (on avarage).<br/>  '''</span><br/>\u00a0<br/>  bins <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> item<span class=\"sy0\">,</span>prob <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>items<span class=\"sy0\">,</span> probs<span class=\"br0\">)</span>:<br/>    bins +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>item<span class=\"br0\">]</span>*<span class=\"kw2\">int</span><span class=\"br0\">(</span>bincount*prob<span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>    <span class=\"kw1\">yield</span> <span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span>bins<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> tester<span class=\"br0\">(</span>func<span class=\"sy0\">=</span>probchoice<span class=\"sy0\">,</span> items<span class=\"sy0\">=</span><span class=\"st0\">'good bad ugly'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    probs<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    trials <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><br/>                    <span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">def</span> problist2string<span class=\"br0\">(</span>probs<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>    Turns a list of probabilities into a string<br/>    Also rounds FP values<br/>    '''</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\",\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%8.6f'</span>\u00a0% <span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> probs<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/>  counter <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">)</span><br/>  it <span class=\"sy0\">=</span> func<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> probs<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> dummy <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>trials<span class=\"br0\">)</span>:<br/>    counter<span class=\"br0\">[</span>it.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>##<span class=\"es0\">\\n</span>##\u00a0%s<span class=\"es0\">\\n</span>##\"</span>\u00a0% func.<span class=\"me1\">func_name</span>.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"Trials:              \"</span><span class=\"sy0\">,</span> trials<br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"Items:               \"</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>items<span class=\"br0\">)</span><br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"Target probability:  \"</span><span class=\"sy0\">,</span> problist2string<span class=\"br0\">(</span>probs<span class=\"br0\">)</span><br/>  <span class=\"kw1\">print</span> <span class=\"st0\">\"Attained probability:\"</span><span class=\"sy0\">,</span> problist2string<span class=\"br0\">(</span><br/>    counter<span class=\"br0\">[</span>x<span class=\"br0\">]</span>/<span class=\"kw2\">float</span><span class=\"br0\">(</span>trials<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> items<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>  items <span class=\"sy0\">=</span> <span class=\"st0\">'aleph beth gimel daleth he waw zayin heth'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  probs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>/<span class=\"br0\">(</span><span class=\"kw2\">float</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>+<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  probs<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>-<span class=\"kw2\">sum</span><span class=\"br0\">(</span>probs<span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  tester<span class=\"br0\">(</span>probchoice<span class=\"sy0\">,</span> items<span class=\"sy0\">,</span> probs<span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>  tester<span class=\"br0\">(</span>probchoice2<span class=\"sy0\">,</span> items<span class=\"sy0\">,</span> probs<span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 8, "block": "<pre class=\"text highlighted_source\">prob = c(aleph=1/5, beth=1/6, gimel=1/7, daleth=1/8, he=1/9, waw=1/10, zayin=1/11, heth=1759/27720)<br/>  # Note that R doesn't actually require the weights<br/>  # vector for rmultinom to sum to 1.<br/>hebrew = c(rmultinom(1, 1e6, prob))<br/>d = data.frame(<br/>    Requested = prob,<br/>    Obtained = hebrew/sum(hebrew))<br/>print(d)</pre>"}, {"lang": "Racket", "loc": 87, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;;; returns a probabalistic choice from the sequence choices<br/>;;; choices generates two values -- the chosen value and a<br/>;;; probability (weight) of the choice.<br/>;;;<br/>;;; Note that a hash where keys are choices and values are probabilities<br/>;;; is such a sequence.<br/>;;;<br/>;;; if the total probability &lt; 1 then choice could return #f<br/>;;; if the total probability &gt; 1 then some choices may be impossible<br/>(define (probabalistic-choice choices)<br/>  (let-values<br/>      (((_ choice)\u00a0;; the fold provides two values, we only need the second<br/>                  \u00a0;; the first will always be a negative number showing that<br/>                  \u00a0;; I've run out of random steam<br/>        (for/fold<br/>            ((rnd (random))<br/>             (choice #f))<br/>          (((v p) choices)<br/>           #:break (&lt;= rnd 0))<br/>          (values (- rnd p) v))))<br/>    choice))<br/>\u00a0<br/>;;; ditto, but all probabilities must be exact rationals<br/>;;; the optional lcd<br/>;;;<br/>;;; not the most efficient, since it provides a wrapper (and demo)<br/>;;; for p-c/i-w below<br/>(define (probabalistic-choice/exact<br/>         choices<br/>         #:gcd (GCD (/ (apply gcd (hash-values choices)))))  <br/>  (probabalistic-choice/integer-weights<br/>   (for/hash (((k v) choices))<br/>     (values k (* v GCD)))<br/>   #:sum-of-weights GCD))<br/>\u00a0<br/>;;; this proves useful in Rock-Paper-Scissors<br/>(define (probabalistic-choice/integer-weights<br/>         choices<br/>         #:sum-of-weights (sum-of-weights (apply + (hash-values choices))))<br/>  (let-values<br/>      (((_ choice)<br/>        (for/fold<br/>            ((rnd (random sum-of-weights))<br/>             (choice #f))<br/>          (((v p) choices)<br/>           #:break (&lt; rnd 0))<br/>          (values (- rnd p) v))))<br/>    choice))<br/>\u00a0<br/>(module+ test<br/>  (define test-samples (make-parameter 1000000))<br/>\u00a0<br/>  (define (test-p-c-function f w)<br/>    (define test-selection (make-hash))    <br/>    (for* ((i (in-range 0 (test-samples)))<br/>           (c (in-value (f w))))<br/>      (when (zero? (modulo i 100000)) (eprintf \"~a,\" (quotient i 100000)))<br/>      (hash-update! test-selection c add1 0))    <br/>    (printf \"~a~%choice\\tcount\\texpected\\tratio\\terror~%\" f)<br/>    (for* (((k v) (in-hash test-selection))<br/>           (e (in-value (* (test-samples) (hash-ref w k)))))<br/>      (printf \"~a\\t~a\\t~a\\t~a\\t~a%~%\"<br/>              k v e<br/>              (/ v (test-samples))<br/>              (real-&gt;decimal-string<br/>               (exact-&gt;inexact (* 100 (/ (- v e) e)))))))<br/>\u00a0<br/>  (define test-weightings/rosetta<br/>    (hash<br/>     'aleph 1/5<br/>     'beth 1/6<br/>     'gimel 1/7<br/>     'daleth 1/8<br/>     'he 1/9<br/>     'waw 1/10<br/>     'zayin 1/11<br/>     'heth 1759/27720; adjusted so that probabilities add to 1<br/>     ))<br/>\u00a0<br/>  (define test-weightings/50:50 (hash 'woo 1/2 'yay 1/2))<br/>  (define test-weightings/1:2:3 (hash 'woo 1 'yay 2 'foo 3))<br/>\u00a0<br/>  (test-p-c-function probabalistic-choice test-weightings/50:50)<br/>  (test-p-c-function probabalistic-choice/exact test-weightings/50:50)<br/>  (test-p-c-function probabalistic-choice test-weightings/rosetta)  <br/>  (test-p-c-function probabalistic-choice/exact test-weightings/rosetta))</pre>"}, {"lang": "REXX", "loc": 33, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays results of probabilistic choices, gen random #s per probability.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> trials digs seed <span class=\"sy0\">.</span>                     <span class=\"coMULTI\">/*obtain the optional arguments from CL*/</span><br/><span class=\"kw1\">if</span> trials==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> trials==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> trials=<span class=\"nu0\">1000000</span> <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span>   digs==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   digs==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>   digs=<span class=\"nu0\">15</span>      <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed  <span class=\"coMULTI\">/*allows repeatability for RANDOM nums.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> digs                              <span class=\"coMULTI\">/*use a specific number of decimal digs*/</span><br/>names= <span class=\"st0\">'aleph beth gimel daleth he waw zayin heth \u2500\u2500\u2500totals\u2500\u2500\u2500\u25ba'</span>   <span class=\"coMULTI\">/*names of the cells.*/</span><br/>HI=<span class=\"nu0\">100000</span>                                                          <span class=\"coMULTI\">/*max REXX RANDOM num*/</span><br/>z=<span class=\"kw6\">words</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span>;        #=z - <span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*#\u2261the number of actual/useable names.*/</span><br/>$=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*initialize sum of the probabilities. */</span><br/>           <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;   prob<span class=\"sy0\">.</span>n=<span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n+<span class=\"nu0\">4</span><span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> n==#  <span class=\"kw3\">then</span> prob<span class=\"sy0\">.</span>n= <span class=\"nu0\">1759</span> <span class=\"sy0\">/</span> <span class=\"nu0\">27720</span><br/>           $=$ + prob<span class=\"sy0\">.</span>n;   Hprob<span class=\"sy0\">.</span>n=prob<span class=\"sy0\">.</span>n <span class=\"sy0\">*</span> HI<br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>prob<span class=\"sy0\">.</span>z=$                                         <span class=\"coMULTI\">/*define the value of the \u2500\u2500\u2500totals\u2500\u2500\u2500.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*initialize all counters in the range.*/</span><br/>@<span class=\"sy0\">.</span>z=trials                                       <span class=\"coMULTI\">/*define the last counter of  \"    \"   */</span><br/>           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> trials;    r=<span class=\"kw6\">random</span><span class=\"br0\">(</span>HI<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*gen  TRIAL  number of random numbers.*/</span><br/>              <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                      <span class=\"coMULTI\">/*for each cell, compute  percentages. */</span><br/>              <span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;</span>=Hprob<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"771c4a37\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k + <span class=\"nu0\">1</span>    <span class=\"coMULTI\">/* \"    \"    \"  range, bump the counter*/</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>           <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span><br/>_= <span class=\"st0\">'\u2550'</span>                                           <span class=\"coMULTI\">/*_:  a literal used for CENTER BIF pad*/</span><br/>w=digs + <span class=\"nu0\">6</span>                                       <span class=\"coMULTI\">/*W:  display width for the percentages*/</span><br/>d=<span class=\"nu0\">4</span> + <span class=\"kw6\">max</span><span class=\"br0\">(</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>trials<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"st0\">'count'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/* [\u2193]  display a formatted top header.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'name'</span>,<span class=\"nu0\">15</span>,_<span class=\"br0\">)</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'count'</span>,d,_<span class=\"br0\">)</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'target\u00a0%'</span>,w,_<span class=\"br0\">)</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'actual\u00a0%'</span>,w,_<span class=\"br0\">)</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> cell=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> z                            <span class=\"coMULTI\">/*display each of the cells and totals.*/</span><br/>     <span class=\"kw1\">say</span>  <span class=\"st0\">' '</span>   <span class=\"kw6\">left</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>names, cell<span class=\"br0\">)</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>                    <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>cell, d-<span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"st0\">\" \"</span>,<br/>                <span class=\"kw6\">left</span><span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>   prob<span class=\"sy0\">.</span>cell   <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, d<span class=\"br0\">)</span>,   w-<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw6\">left</span><span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span> @<span class=\"sy0\">.</span>cell<span class=\"sy0\">/</span>trials <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, d<span class=\"br0\">)</span>,   w-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> cell==#  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span>_,<span class=\"nu0\">15</span>,_<span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>_,d,_<span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>_,w,_<span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>_,w,_<span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  display a formatted foot header*/</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we are all done.*/</span></pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Probabilistic choice<br/>\u00a0<br/>cnt = list(8)<br/>item = [\"aleph\",\"beth\",\"gimel\",\"daleth\",\"he\",\"waw\",\"zayin\",\"heth\"]<br/>prob  = [1/5.0, 1/6.0, 1/7.0, 1/8.0, 1/9.0, 1/10.0, 1/11.0, 1759/27720]<br/>\u00a0<br/>for trial = 1 to 1000000<br/>    r = random(10)/10<br/>    p = 0<br/>    for i = 1 to len(prob)<br/>        p = p + prob[i]<br/>        if r &lt; p <br/>           cnt[i] = cnt[i] + 1<br/>           loop<br/>        ok<br/>    next<br/>next<br/>\u00a0<br/>see \"item     actual    theoretical\" + nl<br/>for i = 1 to len(item)<br/>    see \"\" + item[i] + \"    \" + cnt[i]/1000000 + \"    \" + prob[i] + nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 37, "block": "<pre class=\"ruby highlighted_source\">probabilities = <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"aleph\"</span>  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span>,<br/>  <span class=\"st0\">\"beth\"</span>   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6.0</span>,<br/>  <span class=\"st0\">\"gimel\"</span>  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7.0</span>,<br/>  <span class=\"st0\">\"daleth\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8.0</span>,<br/>  <span class=\"st0\">\"he\"</span>     <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9.0</span>,<br/>  <span class=\"st0\">\"waw\"</span>    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10.0</span>,<br/>  <span class=\"st0\">\"zayin\"</span>  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11.0</span>,<br/><span class=\"br0\">}</span><br/>probabilities<span class=\"br0\">[</span><span class=\"st0\">\"heth\"</span><span class=\"br0\">]</span> = <span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> probabilities.<span class=\"me1\">each_value</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>ordered_keys = probabilities.<span class=\"me1\">keys</span><br/>\u00a0<br/>sum, sums = <span class=\"nu0\">0.0</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>ordered_keys.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>key<span class=\"sy0\">|</span><br/>  sum <span class=\"sy0\">+</span>= probabilities<span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>  sums<span class=\"br0\">[</span>key<span class=\"br0\">]</span> = sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>actual = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>samples = <span class=\"nu0\">1</span>_000_000<br/>samples.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>  r = <span class=\"kw3\">rand</span><br/>  <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> ordered_keys<br/>    <span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;</span> sums<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>      actual<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span>  <span class=\"st0\">\"key     expected    actual        diff\"</span><br/><span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> ordered_keys<br/>  act = <span class=\"kw3\">Float</span><span class=\"br0\">(</span>actual<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> samples<br/>  val = probabilities<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%-8s%.8f \u00a0%.8f \u00a0%6.3f\u00a0%%<span class=\"es0\">\\n</span>\"</span>, k, val, act, <span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>act<span class=\"sy0\">-</span>val<span class=\"br0\">)</span><span class=\"sy0\">/</span>val<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 127, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::distributions::{IndependentSample, Sample, Weighted, WeightedChoice};<br/>use rand::{weak_rng, Rng};<br/>\u00a0<br/>const DATA: [(&amp;str, f64); 8] = [<br/>    (\"aleph\", 1.0 / 5.0),<br/>    (\"beth\", 1.0 / 6.0),<br/>    (\"gimel\", 1.0 / 7.0),<br/>    (\"daleth\", 1.0 / 8.0),<br/>    (\"he\", 1.0 / 9.0),<br/>    (\"waw\", 1.0 / 10.0),<br/>    (\"zayin\", 1.0 / 11.0),<br/>    (\"heth\", 1759.0 / 27720.0),<br/>];<br/>\u00a0<br/>const SAMPLES: usize = 1_000_000;<br/>\u00a0<br/>/// Generate a mapping to be used by `WeightedChoice`<br/>fn gen_mapping() -&gt; Vec&lt;Weighted&lt;usize&gt;&gt; {<br/>    DATA.iter()<br/>        .enumerate()<br/>        .map(|(i, &amp;(_, p))| Weighted {<br/>            // `WeightedChoice` requires `u32` weights rather than raw probabilities.  For each<br/>            // probability, we convert it to a `u32` weight, and associate it with an index. We<br/>            // multiply by a constant because small numbers such as 0.2 when casted to `u32`<br/>            // become `0`.  This conversion decreases the accuracy of the mapping, which is why we<br/>            // provide an implementation which uses `f64`s for the best accuracy.<br/>            weight: (p * 1_000_000_000.0) as u32,<br/>            item: i,<br/>        })<br/>        .collect()<br/>}<br/>\u00a0<br/>/// Generate a mapping of the raw probabilities<br/>fn gen_mapping_float() -&gt; Vec&lt;f64&gt; {<br/>    // This does the work of `WeightedChoice::new`, splitting a number into various ranges.  The<br/>    // `item` of `Weighted` is represented here merely by the probability's position in the `Vec`.<br/>    let mut running_total = 0.0;<br/>    DATA.iter()<br/>        .map(|&amp;(_, p)| {<br/>            running_total += p;<br/>            running_total<br/>        })<br/>        .collect()<br/>}<br/>\u00a0<br/>/// An implementation of `WeightedChoice` which uses probabilities rather than weights.  Refer to<br/>/// the `WeightedChoice` source for serious usage.<br/>struct WcFloat {<br/>    mapping: Vec&lt;f64&gt;,<br/>}<br/>\u00a0<br/>impl WcFloat {<br/>    fn new(mapping: &amp;[f64]) -&gt; Self {<br/>        Self {<br/>            mapping: mapping.to_vec(),<br/>        }<br/>    }<br/>\u00a0<br/>    // This is roughly the same logic as `WeightedChoice::ind_sample` (though is likely slower)<br/>    fn search(&amp;self, sample_prob: f64) -&gt; usize {<br/>        let idx = self.mapping<br/>            .binary_search_by(|p| p.partial_cmp(&amp;sample_prob).unwrap());<br/>        match idx {<br/>            Ok(i) | Err(i) =&gt; i,<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>impl IndependentSample&lt;usize&gt; for WcFloat {<br/>    fn ind_sample&lt;R: Rng&gt;(&amp;self, rng: &amp;mut R) -&gt; usize {<br/>        // Because we know the total is exactly 1.0, we can merely use a raw float value.<br/>        // Otherwise caching `Range::new(0.0, running_total)` and sampling with<br/>        // `range.ind_sample(&amp;mut rng)` is recommended.<br/>        let sample_prob = rng.next_f64();<br/>        self.search(sample_prob)<br/>    }<br/>}<br/>\u00a0<br/>impl Sample&lt;usize&gt; for WcFloat {<br/>    fn sample&lt;R: Rng&gt;(&amp;mut self, rng: &amp;mut R) -&gt; usize {<br/>        self.ind_sample(rng)<br/>    }<br/>}<br/>\u00a0<br/>fn take_samples&lt;R: Rng, T&gt;(rng: &amp;mut R, wc: &amp;T) -&gt; [usize; 8]<br/>where<br/>    T: IndependentSample&lt;usize&gt;,<br/>{<br/>    let mut counts = [0; 8];<br/>    for _ in 0..SAMPLES {<br/>        let sample = wc.ind_sample(rng);<br/>        counts[sample] += 1;<br/>    }<br/>    counts<br/>}<br/>\u00a0<br/>fn print_mapping(counts: &amp;[usize]) {<br/>    println!(\"Item   | Expected | Actual   \");<br/>    println!(\"-------+----------+----------\");<br/>    for (&amp;(name, expected), &amp;count) in DATA.iter().zip(counts.iter()) {<br/>        let real = count as f64 / SAMPLES as f64;<br/>        println!(\"{:6} | {:.6} | {:.6}\", name, expected, real);<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut rng = weak_rng();<br/>\u00a0<br/>    println!(\"    ~~~ U32 METHOD ~~~\");<br/>    let mut mapping = gen_mapping();<br/>    let wc = WeightedChoice::new(&amp;mut mapping);<br/>\u00a0<br/>    let counts = take_samples(&amp;mut rng, &amp;wc);<br/>    print_mapping(&amp;counts);<br/>\u00a0<br/>    println!();<br/>\u00a0<br/>    println!(\"   ~~~ FLOAT METHOD ~~~\");<br/>    // initialize the float version of `WeightedChoice`<br/>    let mapping = gen_mapping_float();<br/>    let wc = WcFloat::new(&amp;mapping);<br/>\u00a0<br/>    let counts = take_samples(&amp;mut rng, &amp;wc);<br/>    print_mapping(&amp;counts);<br/>}</pre>"}, {"lang": "Scala", "loc": 64, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ProbabilisticChoice <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">LinkedHashMap</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> weightedProb<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>prob<span class=\"sy0\">:</span> LinkedHashMap<span class=\"br0\">[</span>A,Double<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> A <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>prob.<span class=\"me1\">forall</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    assume<span class=\"br0\">(</span>prob.<span class=\"me1\">values</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> weighted<span class=\"br0\">(</span>todo<span class=\"sy0\">:</span> Iterator<span class=\"br0\">[</span><span class=\"br0\">(</span>A,Double<span class=\"br0\">)</span><span class=\"br0\">]</span>, rand<span class=\"sy0\">:</span> Double, accum<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> A <span class=\"sy0\">=</span> todo.<span class=\"me1\">next</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>s, i<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> rand <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>accum + i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> weighted<span class=\"br0\">(</span>todo, rand, accum + i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    weighted<span class=\"br0\">(</span>prob.<span class=\"me1\">toIterator</span>, scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextDouble</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> weightedFreq<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>freq<span class=\"sy0\">:</span> LinkedHashMap<span class=\"br0\">[</span>A,Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> A <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>freq.<span class=\"me1\">forall</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, f<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    require<span class=\"br0\">(</span>freq.<span class=\"me1\">values</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> weighted<span class=\"br0\">(</span>todo<span class=\"sy0\">:</span> Iterator<span class=\"br0\">[</span><span class=\"br0\">(</span>A,Int<span class=\"br0\">)</span><span class=\"br0\">]</span>, rand<span class=\"sy0\">:</span> Int, accum<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> A <span class=\"sy0\">=</span> todo.<span class=\"me1\">next</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>s, i<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> rand <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>accum + i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> weighted<span class=\"br0\">(</span>todo, rand, accum + i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    weighted<span class=\"br0\">(</span>freq.<span class=\"me1\">toIterator</span>, scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>freq.<span class=\"me1\">values</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Tests:</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> probabilities <span class=\"sy0\">=</span> LinkedHashMap<span class=\"br0\">(</span><br/>    <span class=\"co2\">'aleph</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">5</span>,<br/>    <span class=\"co2\">'beth</span>   -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">6</span>,<br/>    <span class=\"co2\">'gimel</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">7</span>,<br/>    <span class=\"co2\">'daleth</span> -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">8</span>,<br/>    <span class=\"co2\">'he</span>     -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">9</span>,<br/>    <span class=\"co2\">'waw</span>    -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">10</span>,<br/>    <span class=\"co2\">'zayin</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.0</span>/<span class=\"nu0\">11</span>,<br/>    <span class=\"co2\">'heth</span>   -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1759.0</span>/<span class=\"nu0\">27720</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> frequencies <span class=\"sy0\">=</span> LinkedHashMap<span class=\"br0\">(</span><br/>    <span class=\"co2\">'aleph</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">200</span>,<br/>    <span class=\"co2\">'beth</span>   -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">167</span>,<br/>    <span class=\"co2\">'gimel</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">143</span>,<br/>    <span class=\"co2\">'daleth</span> -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">125</span>,<br/>    <span class=\"co2\">'he</span>     -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">111</span>,<br/>    <span class=\"co2\">'waw</span>    -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">100</span>,<br/>    <span class=\"co2\">'zayin</span>  -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">91</span>,<br/>    <span class=\"co2\">'heth</span>   -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">63</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>original<span class=\"sy0\">:</span> LinkedHashMap<span class=\"br0\">[</span>A,Double<span class=\"br0\">]</span>, results<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> freq <span class=\"sy0\">=</span> results.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span>.<span class=\"me1\">mapValues</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">size</span>.<span class=\"me1\">toDouble</span>/results.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    original.<span class=\"me1\">foreach</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>k, v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> v/original.<span class=\"me1\">values</span>.<span class=\"me1\">sum</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> freq<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a - b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.001</span><span class=\"br0\">)</span> <span class=\"st0\">\"ok\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"**\"</span><br/>      println<span class=\"br0\">(</span>f<span class=\"st0\">\"$k%10s  $a%.4f  $b%.4f  $c\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span> + f<span class=\"st0\">\"  ${1}%.4f  ${freq.values.sum}%.4f\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Checking weighted probabilities:\"</span><span class=\"br0\">)</span><br/>  check<span class=\"br0\">(</span>probabilities, <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> weightedProb<span class=\"br0\">(</span>probabilities<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Checking weighted frequencies:\"</span><span class=\"br0\">)</span><br/>  check<span class=\"br0\">(</span>frequencies.<span class=\"me1\">map</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a -<span class=\"sy0\">&gt;</span> b.<span class=\"me1\">toDouble</span><span class=\"br0\">}</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> weightedFreq<span class=\"br0\">(</span>frequencies<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 45, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const type: letter is new enum<br/>    aleph, beth, gimel, daleth, he, waw, zayin, heth<br/>  end enum;<br/>\u00a0<br/>const func string: str (in letter: aLetter) is<br/>    return [] (\"aleph\", \"beth\", \"gimel\", \"daleth\", \"he\", \"waw\", \"zayin\", \"heth\") [succ(ord(aLetter))];<br/>\u00a0<br/>enable_output(letter);<br/>\u00a0<br/>const array [letter] integer: table is [letter] (<br/>    5544, 4620, 3960, 3465, 3080, 2772, 2520, 1759);<br/>\u00a0<br/>const func letter: randomLetter is func<br/>  result<br/>    var letter: resultLetter is aleph;<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    number\u00a0:= rand(1, 27720);<br/>    while number &gt; table[resultLetter] do<br/>      number -:= table[resultLetter];<br/>      incr(resultLetter);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: count is 0;<br/>    var letter: aLetter is aleph;<br/>    var array [letter] integer: occurrence is letter times 0;<br/>  begin<br/>    for count range 1 to 1000000 do<br/>      aLetter\u00a0:= randomLetter;<br/>      incr(occurrence[aLetter]);<br/>    end for;<br/>    writeln(\"Name   Count  Ratio    Expected\");<br/>    for aLetter range letter.first to letter.last do<br/>      writeln(aLetter rpad 7 &lt;&amp; occurrence[aLetter] lpad 6 &lt;&amp;<br/>              flt(occurrence[aLetter]) / 10000.9 digits 4 lpad 8 &lt;&amp; \"%\" &lt;&amp;<br/>              100.0 * flt(table[aLetter]) / 27720.0 digits 4 lpad 8 &lt;&amp; \"%\");<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Scheme", "loc": 45, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use<span class=\"sy0\">-</span>modules <span class=\"br0\">(</span>ice<span class=\"sy0\">-</span><span class=\"nu0\">9</span> format<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>choice probs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> choice <span class=\"br0\">(</span>random <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>helper val prob<span class=\"sy0\">-</span>lis<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nval <span class=\"br0\">(</span><span class=\"sy0\">-</span> val <span class=\"br0\">(</span>cadar prob<span class=\"sy0\">-</span>lis<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> nval <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">caar</span> prob<span class=\"sy0\">-</span>lis<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>helper nval <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> prob<span class=\"sy0\">-</span>lis<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>helper choice probs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>result result delta table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> result delta<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> table<span class=\"br0\">)</span> result<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> result <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>cadar table<span class=\"br0\">)</span> delta<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>#t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>result result delta <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>choices trials probs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>helper trial<span class=\"sy0\">-</span>num freq<span class=\"sy0\">-</span>table<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">=</span> trial<span class=\"sy0\">-</span>num trials<span class=\"br0\">)</span><br/>     freq<span class=\"sy0\">-</span>table<br/>     <span class=\"br0\">(</span>helper<br/>      <span class=\"br0\">(</span><span class=\"sy0\">+</span> trial<span class=\"sy0\">-</span>num <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>result <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>choice probs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> trials<span class=\"br0\">)</span> freq<span class=\"sy0\">-</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>helper <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>format<span class=\"sy0\">-</span>results probs results<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>format<br/>      #t<br/>      <span class=\"st0\">\"~10a~10,5f~10,5f~%\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> results<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   probs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> probs<br/>  '<span class=\"br0\">(</span><span class=\"br0\">(</span>aleph <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>beth <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>gimel <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>daleth <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>he <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>waw <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>zayin <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>heth <span class=\"nu0\">1759</span><span class=\"sy0\">/</span><span class=\"nu0\">27720</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format<span class=\"sy0\">-</span>results probs <span class=\"br0\">(</span>choices <span class=\"nu0\">1000000</span> probs<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 41, "block": "<pre class=\"ruby highlighted_source\">define TRIALS = 1e4;<br/>\u00a0<br/>func prob_choice_picker<span class=\"br0\">(</span>options<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var n = <span class=\"nu0\">0</span>;<br/>    var a = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>    options.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span><br/>        n <span class=\"sy0\">+</span>= v;<br/>        a <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>n, k<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    func <span class=\"br0\">{</span><br/>        var r = <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span>;<br/>        a.<span class=\"me1\">first</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> r <span class=\"sy0\">&lt;</span>= e<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var ps = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><br/>   aleph  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">5</span>,<br/>   beth   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span>,<br/>   gimel  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span>,<br/>   daleth <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span>,<br/>   he     <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span>,<br/>   waw    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>,<br/>   zayin  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>ps<span class=\"br0\">{</span>:heth<span class=\"br0\">}</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> ps.<span class=\"me1\">values</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/>\u00a0<br/>var picker = prob_choice_picker<span class=\"br0\">(</span>ps<span class=\"br0\">)</span><br/>var results = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>TRIALS.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>    results<span class=\"br0\">{</span>picker<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"Event   Occurred  Expected  Difference\"</span>;<br/><span class=\"kw1\">for</span> k,v <span class=\"kw1\">in</span> <span class=\"br0\">(</span>results.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> results<span class=\"br0\">{</span>k<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">reverse</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-6s \u00a0%f \u00a0%f \u00a0%f<span class=\"es0\">\\n</span>\"</span>,<br/>        k, v<span class=\"sy0\">/</span>TRIALS, ps<span class=\"br0\">{</span>k<span class=\"br0\">}</span>,<br/>        abs<span class=\"br0\">(</span>v<span class=\"sy0\">/</span>TRIALS <span class=\"sy0\">-</span> ps<span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 8, "block": "<pre class=\"text highlighted_source\">clear<br/>mata<br/>letters=\"aleph\",\"beth\",\"gimel\",\"daleth\",\"he\",\"waw\",\"zayin\",\"heth\"<br/>a=letters[rdiscrete(10000,1,(1/5,1/6,1/7,1/8,1/9,1/10,1/11,1759/27720))]'<br/>st_addobs(10000)<br/>st_addvar(\"str10\",\"a\")<br/>st_sstore(.,.,a)<br/>end</pre>"}, {"lang": "Tcl", "loc": 37, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> map <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> sum <span class=\"nu0\">0.0</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> name <span class=\"br0\">{</span>aleph beth gimel daleth he waw zayin<span class=\"br0\">}</span> \\<br/>        prob <span class=\"br0\">{</span><span class=\"nu0\">1</span>/<span class=\"nu0\">5.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">6.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">7.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">8.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">9.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">10.0</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">11.0</span><span class=\"br0\">}</span> \\<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> prob <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$prob</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"re0\">$prob</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    dict <span class=\"kw1\">set</span> map <span class=\"re0\">$name</span> <span class=\"br0\">[</span>dict create probability <span class=\"re0\">$prob</span> limit <span class=\"re0\">$sum</span> count <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>dict <span class=\"kw1\">set</span> map heth <span class=\"br0\">[</span>dict create probability <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> - <span class=\"re0\">$sum</span><span class=\"br0\">}</span><span class=\"br0\">]</span> limit <span class=\"nu0\">1.0</span> count <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">set</span> samples <span class=\"nu0\">1000000</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$samples</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> name <span class=\"br0\">[</span>dict keys <span class=\"re0\">$map</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"br0\">[</span>dict get <span class=\"re0\">$map</span> <span class=\"re0\">$name</span> limit<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> count <span class=\"br0\">[</span>dict get <span class=\"re0\">$map</span> <span class=\"re0\">$name</span> count<span class=\"br0\">]</span><br/>            dict <span class=\"kw1\">set</span> map <span class=\"re0\">$name</span> count <span class=\"br0\">[</span><span class=\"kw2\">incr</span> count<span class=\"br0\">]</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"using $samples samples:\"</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s\u00a0%-21s\u00a0%-9s\u00a0%s\"</span> <span class=\"st0\">\"\"</span> expected actual difference<span class=\"br0\">]</span><br/>\u00a0<br/>dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>name submap<span class=\"br0\">}</span> <span class=\"re0\">$map</span> <span class=\"br0\">{</span><br/>    dict with submap <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> actual <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1.0</span> / <span class=\"re0\">$samples</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s\u00a0%-21s\u00a0%-9s\u00a0%4.2f%%\"</span> <span class=\"re0\">$name</span> <span class=\"re0\">$probability</span> <span class=\"re0\">$actual</span> \\<br/>                <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$actual</span> - <span class=\"re0\">$probability</span><span class=\"br0\">)</span>/<span class=\"re0\">$probability</span><span class=\"sy0\">*</span><span class=\"nu0\">100.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>             <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 18, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>outcomes = &lt;'aleph ','beth  ','gimel ','daleth','he    ','waw   ','zayin ','heth  '&gt;<br/>probabilities = ^lrNCT(~&amp;,minus/1.+ plus:-0) div/*1. float* skip/5 iota12<br/>\u00a0<br/>simulation = <br/>\u00a0<br/>^(~&amp;rn,div+ float~~rmPlX)^*D/~&amp; iota; ^A(~&amp;h,length)*K2+ * <a class=\"__cf_email__\" data-cfemail=\"d4a7a0bbb7bcb5a7b994a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/probabilities\u00a0!* outcomes<br/>\u00a0<br/>format =<br/>\u00a0<br/>:/'        frequency   probability'+  * ^lrlrTPT/~&amp;n (printf/'%12.8f')^~/~&amp;m <a class=\"__cf_email__\" data-cfemail=\"6d0218190e0200081e40491d1f020f0c0f0401041904081e2d03\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>#show+<br/>\u00a0<br/>results = format simulation 1000000</pre>"}, {"lang": "VBScript", "loc": 33, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>item = Array(<span class=\"st0\">\"aleph\"</span>,<span class=\"st0\">\"beth\"</span>,<span class=\"st0\">\"gimel\"</span>,<span class=\"st0\">\"daleth\"</span>,<span class=\"st0\">\"he\"</span>,<span class=\"st0\">\"waw\"</span>,<span class=\"st0\">\"zayin\"</span>,<span class=\"st0\">\"heth\"</span>)<br/>prob = Array(1/5.0, 1/6.0, 1/7.0, 1/8.0, 1/9.0, 1/10.0, 1/11.0, 1759/27720)<br/><span class=\"kw4\">Dim</span> cnt(7)<br/>\u00a0<br/><span class=\"co1\">'Terminate script if sum of probabilities &lt;&gt; 1.<br/></span>sum = 0<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(prob)<br/>\tsum = sum + prob(i)<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw3\">If</span> sum &lt;&gt; 1 <span class=\"kw3\">Then</span><br/>\tWScript.Quit<br/><span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"kw3\">For</span> trial = 1 <span class=\"kw3\">To</span> 1000000<br/>\tr = Rnd(1)<br/>\tp = 0<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(prob)<br/>\t\tp = p + prob(i)<br/>\t\t<span class=\"kw3\">If</span> r &lt; p <span class=\"kw3\">Then</span><br/>\t\t\tcnt(i) = cnt(i) + 1<br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"item\"</span> &amp; vbTab &amp; <span class=\"st0\">\"actual\"</span> &amp; vbTab &amp; vbTab &amp; <span class=\"st0\">\"theoretical\"</span><br/>WScript.StdOut.WriteLine<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(item)<br/>\tWScript.StdOut.Write item(i) &amp; vbTab &amp; FormatNumber(cnt(i)/1000000,6) &amp; vbTab &amp; FormatNumber(prob(i),6)<br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span></pre>"}, {"lang": "XPL0", "loc": 27, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>def Size = 10_000_000;<br/>int Tbl(12+1);<br/>int I, J, N;<br/>real X, S0, S1;<br/>[for J:= 5 to 12 do Tbl(J):= 0;<br/> for I:= 0 to 1_000_000-1 do                    \\generate one million items<br/>        [N:= Ran(Size);<br/>        for J:= 5 to 11 do<br/>                [N:= N - Size/J;<br/>                if N &lt; 0 then [Tbl(J):= Tbl(J)+1;  J:= 100];<br/>                ];<br/>        if J=12 then Tbl(12):= Tbl(12)+1;<br/>        ];<br/>S0:= 0.0;  S1:= 0.0;<br/>for J:= 5 to 11 do<br/>        [X:= 1.0/float(J);                      RlOut(0, X);  S0:= S0+X;<br/>         X:= float(Tbl(J)) / 1_000_000.0;       RlOut(0, X);  S1:= S1+X;<br/>        CrLf(0);<br/>        ];<br/>X:= 1759.0 / 27720.0;                           RlOut(0, X);  S0:= S0+X;<br/>X:= float(Tbl(12)) / 1_000_000.0;               RlOut(0, X);  S1:= S1+X;<br/>CrLf(0);<br/>Text(0, \"    -------    -------<br/>\");<br/>RlOut(0, S0);  RlOut(0, S1);<br/>]</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">var names=T(\"aleph\", \"beth\", \"gimel\", \"daleth\",<br/>\t\t\t  \"he\", \"waw\", \"zayin\", \"heth\");<br/>var ptable=T(5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0).apply('/.fp(1.0));<br/>ptable=ptable.append(1.0-ptable.sum(0.0)); // add last weight to sum to 1.0<br/>var [const] N=ptable.len();<br/>\u00a0<br/>fcn ridx{ i:=0; s:=(0.0).random(1);<br/>   while((s-=ptable[i]) &gt; 0) { i+=1 }<br/>   i<br/>}<br/>\u00a0<br/>const M=0d1_000_000;<br/>var r=(0).pump(N,List,T(Ref,0));  // list of references to int 0<br/>(0).pump(M,Void,fcn{r[ridx()].inc()}); // 1,000,000 weighted random #s<br/>\u00a0<br/>r=r.apply(\"value\").apply(\"toFloat\"); // (reference to int)--&gt;int--&gt;float<br/>\u00a0<br/>println(\"  Name  Count    Ratio Expected\");<br/>foreach i in (N){<br/>   \"%6s%7d\u00a0%7.4f%%\u00a0%7.4f%%\".fmt(names[i], r[i], r[i]/M*100,<br/>\t\tptable[i]*100).println();<br/>}</pre>"}]}