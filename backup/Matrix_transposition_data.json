{"task": "Matrix_transposition", "blocks": [{"lang": "360 Assembly", "loc": 39, "block": "<pre class=\"text highlighted_source\">...          <br/>KN       EQU    3<br/>KM       EQU    5<br/>N        DC     AL2(KN)<br/>M        DC     AL2(KM)<br/>A        DS     (KN*KM)F           matrix a(n,m)<br/>B        DS     (KM*KN)F           matrix b(m,n)<br/>... <br/>*        b(j,i)=a(i,j)<br/>*        transposition using Horner's formula<br/>         LA     R4,0               i,from 1<br/>         LA     R7,KN              to n<br/>         LA     R6,1               step 1<br/>LOOPI    BXH    R4,R6,ELOOPI       do i=1 to n<br/>         LA     R5,0               j,from 1<br/>         LA     R9,KM              to m<br/>         LA     R8,1               step 1<br/>LOOPJ    BXH    R5,R8,ELOOPJ       do j=1 to m<br/>         LR     R1,R4              i<br/>         BCTR   R1,0               i-1<br/>         MH     R1,M               (i-1)*m<br/>         LR     R2,R5              j<br/>         BCTR   R2,0               j-1<br/>         AR     R1,R2              r1=(i-1)*m+(j-1)<br/>         SLA    R1,2               r1=((i-1)*m+(j-1))*itemlen<br/>         L      R0,A(R1)           r0=a(i,j)<br/>         LR     R1,R5              j<br/>         BCTR   R1,0               j-1<br/>         MH     R1,N               (j-1)*n<br/>         LR     R2,R4              i<br/>         BCTR   R2,0               i-1<br/>         AR     R1,R2              r1=(j-1)*n+(i-1)<br/>         SLA    R1,2               r1=((j-1)*n+(i-1))*itemlen<br/>         ST     R0,B(R1)           b(j,i)=r0<br/>         B      LOOPJ              next j<br/>ELOOPJ   EQU    *                  out of loop j<br/>         B      LOOPI              next i<br/>ELOOPI   EQU    *                  out of loop i<br/>...</pre>"}, {"lang": "ACL2", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cons-each <span class=\"br0\">(</span>xs xss<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>first xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>cons-each <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest xss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> list-each <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>list-each <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> transpose-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>list-each <span class=\"br0\">(</span>first xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cons-each <span class=\"br0\">(</span>first xss<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>transpose-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>rest xss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 23, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> transpose<span class=\"br0\">(</span> m:<span class=\"kw3\">Array</span><span class=\"br0\">)</span>:<span class=\"kw3\">Array</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">//Assume each element in m is an array. (If this were production code, use typeof to be sure)</span><br/>\u00a0<br/>\t<span class=\"co1\">//Each element in m is a row, so this gets the length of a row in m, </span><br/>\t<span class=\"co1\">//which is the same as the number of rows in m transpose.</span><br/>\t<span class=\"kw2\">var</span> mTranspose = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"kw3\">length</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> mTranspose.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>                <span class=\"co1\">//create a row</span><br/>\t\tmTranspose<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span>m.<span class=\"kw3\">length</span><span class=\"br0\">)</span>;<br/>                <span class=\"co1\">//set the row to the appropriate values</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> j:uint = <span class=\"nu0\">0</span>; j <span class=\"sy0\">&lt;</span> mTranspose<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw3\">length</span>; j++<span class=\"br0\">)</span><br/>\t\t\tmTranspose<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = m<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> mTranspose;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">var</span> m:<span class=\"kw3\">Array</span> = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span>,<br/>\t       <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">11</span><span class=\"br0\">]</span>,<br/>\t       <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/><span class=\"kw2\">var</span> M:<span class=\"kw3\">Array</span> = transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> M.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;               <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>; <br/>\u00a0<br/><span class=\"kw3\">procedure</span> Matrix_Transpose <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>X\u00a0: Real_Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Fixed <span class=\"kw1\">is</span> <span class=\"kw3\">delta</span> <span class=\"nu0\">0.01</span> <span class=\"kw3\">range</span> -<span class=\"nu0\">500.0</span>..500.0;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> X'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> X'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Put <span class=\"br0\">(</span>Fixed'Image <span class=\"br0\">(</span>Fixed <span class=\"br0\">(</span>X <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   Matrix\u00a0: <span class=\"kw3\">constant</span> Real_Matrix\u00a0:=<br/>            <span class=\"br0\">(</span>  <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.1</span>, <span class=\"nu0\">0.2</span>, <span class=\"nu0\">0.3</span><span class=\"br0\">)</span>,<br/>               <span class=\"br0\">(</span><span class=\"nu0\">0.4</span>, <span class=\"nu0\">0.5</span>, <span class=\"nu0\">0.6</span>, <span class=\"nu0\">0.7</span><span class=\"br0\">)</span>,<br/>               <span class=\"br0\">(</span><span class=\"nu0\">0.8</span>, <span class=\"nu0\">0.9</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Before Transposition:\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>Matrix<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"After Transposition:\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>Transpose <span class=\"br0\">(</span>Matrix<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Matrix_Transpose;</pre>"}, {"lang": "Agda", "loc": 14, "block": "<pre class=\"text highlighted_source\">module Matrix where<br/>\u00a0<br/>open import Data.Nat<br/>open import Data.Vec<br/>\u00a0<br/>Matrix\u00a0: (A\u00a0: Set) \u2192 \u2115 \u2192 \u2115 \u2192 Set<br/>Matrix A m n = Vec (Vec A m) n<br/>\u00a0<br/>transpose\u00a0: \u2200 {A m n} \u2192 Matrix A m n \u2192 Matrix A n m<br/>transpose [] = replicate []<br/>transpose (xs \u2237 xss) = zipWith _\u2237_ xs (transpose xss)<br/>\u00a0<br/>a = (1 \u2237 2 \u2237 3 \u2237 []) \u2237 (4 \u2237 5 \u2237 6 \u2237 []) \u2237 []<br/>b = transpose a</pre>"}, {"lang": "ALGOL 68", "loc": 27, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span> m<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>1<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span>   1<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">(</span>2<span class=\"sy1\">,</span>  4<span class=\"sy1\">,</span>  8<span class=\"sy1\">,</span>  16<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">(</span>3<span class=\"sy1\">,</span>  9<span class=\"sy1\">,</span> 27<span class=\"sy1\">,</span>  81<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">(</span>4<span class=\"sy1\">,</span> 16<span class=\"sy1\">,</span> 64<span class=\"sy1\">,</span> 256<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">(</span>5<span class=\"sy1\">,</span> 25<span class=\"sy1\">,</span>125<span class=\"sy1\">,</span> 625<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">OP</span> ZIP <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span> in<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span>2 <span class=\"kw8\">LWB</span> in<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> in<span class=\"sy1\">,</span>1 <span class=\"kw8\">LWB</span> in<span class=\"sy1\">:</span>1UPB in<span class=\"br0\">]</span><span class=\"kw3\">REAL</span> out<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> in <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> in <span class=\"kw2\">DO</span><br/>       out<span class=\"br0\">[</span><span class=\"sy1\">,</span>i<span class=\"br0\">]</span><span class=\"sy1\">:=</span>in<span class=\"br0\">[</span>i<span class=\"sy1\">,</span><span class=\"br0\">]</span> <br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> pprint <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span> m<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> <span class=\"kw26\">real</span> fmt <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>2<span class=\"br0\">)</span>$<span class=\"sy1\">;</span> <span class=\"coMULTI\"># width of 6, with no '+' sign, 2 decimals #</span><br/>     <span class=\"kw6\">FORMAT</span> vec fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>2 <span class=\"kw8\">UPB</span> m<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"kw26\">real</span> fmt<span class=\"br0\">)</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span><span class=\"kw26\">real</span> fmt<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw6\">FORMAT</span> matrix fmt <span class=\"sy1\">=</span> $x<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span><span class=\"kw8\">UPB</span> m<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>vec fmt<span class=\"br0\">)</span><span class=\"st0\">\",\"</span>lxx<span class=\"br0\">)</span>f<span class=\"br0\">(</span>vec fmt<span class=\"br0\">)</span><span class=\"st0\">\");\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># finally print the result #</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matrix fmt<span class=\"sy1\">,</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$x<span class=\"st0\">\"Transpose:\"</span>l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  pprint<span class=\"br0\">(</span><span class=\"br0\">(</span>ZIP m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      3 3\u2374\u237310<br/>1 2 3<br/>4 5 6<br/>7 8 9<br/>      \u2349 3 3\u2374\u237310<br/>1 4 7<br/>2 5 8<br/>3 6 9<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 21, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    transpose<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">10</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{1, 4, 7, 10}, {2, 5, 8, 11}, {3, 6, 9, 12}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lstTrans <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> iCol <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<br/>        <span class=\"kw3\">set</span> lstCol <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> iRow <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xss<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lstCol <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> iRow <span class=\"kw3\">of</span> xss<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lstTrans <span class=\"kw3\">to</span> lstCol<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> lstTrans<br/><span class=\"kw3\">end</span> transpose</pre>"}, {"lang": "AutoHotkey", "loc": 59, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">=</span> a<br/>m <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/><span class=\"br0\">{</span><br/>  i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>  <span class=\"br0\">{</span><br/>    j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">%a%</span><span class=\"re0\">%i%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> i <span class=\"sy0\">-</span> j<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>before <span class=\"sy0\">:=</span> matrix_print<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>transpose<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>after <span class=\"sy0\">:=</span> matrix_print<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>  <br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% before <span class=\"sy0\">.</span> <span class=\"st0\">\"`ntransposed:`n\"</span> <span class=\"sy0\">.</span> after<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>transpose<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Local i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> matrix<br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% m <br/>  <span class=\"br0\">{</span><br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n <br/>    <span class=\"br0\">{</span><br/>      j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      temp<span class=\"re0\">%i%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> <span class=\"re0\">%a%</span><span class=\"re0\">%j%</span><span class=\"re0\">%i%</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% m <br/>  <span class=\"br0\">{</span><br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n <br/>    <span class=\"br0\">{</span><br/>      j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"re0\">%a%</span><span class=\"re0\">%i%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> temp<span class=\"re0\">%i%</span><span class=\"re0\">%j%</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>matrix_print<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Local i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> matrix<br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% m <br/>  <span class=\"br0\">{</span><br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    row <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n <br/>    <span class=\"br0\">{</span><br/>      j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      row <span class=\"sy0\">.=</span> <span class=\"re0\">%a%</span><span class=\"re0\">%i%</span><span class=\"re0\">%j%</span> <span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringTrimRight.htm\"><span class=\"kw3\">StringTrimRight</span></a><span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    matrix <span class=\"sy0\">.=</span> row <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">Return</span> matrix<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MATRIX_TRANSPOSITION.AWK filename</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">NF</span> <span class=\"sy2\">&gt;</span> <span class=\"kw3\">nf</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">nf</span> = <span class=\"kw3\">NF</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">nf</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"re0\">$i</span> <span class=\"st0\">\" \"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">nf</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre>CLS\nDIM m(1 TO 5, 1 TO 4) 'any dimensions you want\n\n'set up the values in the array\nFOR rows = LBOUND(m, 1) TO UBOUND(m, 1) 'LBOUND and UBOUND can take a dimension as their second argument\n       FOR cols = LBOUND(m, 2) TO UBOUND(m, 2)\n       m(rows, cols) = rows ^ cols 'any formula you want\n       NEXT cols\nNEXT rows\n\n'declare the new matrix\nDIM trans(LBOUND(m, 2) TO UBOUND(m, 2), LBOUND(m, 1) TO UBOUND(m, 1))\n\n'copy the values\nFOR rows = LBOUND(m, 1) TO UBOUND(m, 1)\n       FOR cols = LBOUND(m, 2) TO UBOUND(m, 2)\n       trans(cols, rows) = m(rows, cols)\n       NEXT cols\nNEXT rows\n\n'print the new matrix\nFOR rows = LBOUND(trans, 1) TO UBOUND(trans, 1)\n       FOR cols = LBOUND(trans, 2) TO UBOUND(trans, 2)\n       PRINT trans(rows, cols);\n       NEXT cols\nPRINT\nNEXT rows\n</pre>"}, {"lang": "BBC BASIC", "loc": 22, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"ARRAYLIB\"<br/>\u00a0<br/>      DIM matrix(3,4), transpose(4,3)<br/>      matrix() = 78,19,30,12,36,49,10,65,42,50,30,93,24,78,10,39,68,27,64,29<br/>\u00a0<br/>      PROC_transpose(matrix(), transpose())<br/>\u00a0<br/>      FOR row% = 0 TO DIM(matrix(),1)<br/>        FOR col% = 0 TO DIM(matrix(),2)<br/>          PRINT\u00a0;matrix(row%,col%) \" \";<br/>        NEXT<br/>        PRINT<br/>      NEXT row%<br/>\u00a0<br/>      PRINT<br/>\u00a0<br/>      FOR row% = 0 TO DIM(transpose(),1)<br/>        FOR col% = 0 TO DIM(transpose(),2)<br/>          PRINT\u00a0;transpose(row%,col%) \" \";<br/>        NEXT<br/>        PRINT<br/>      NEXT row%</pre>"}, {"lang": "Burlesque", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {{78 19 30 12 36}{49 10 65 42 50}{30 93 24 78 10}{39 68 27 64 29}}tpsp<br/>78 49 30 39<br/>19 10 93 68<br/>30 65 24 27<br/>12 42 78 64<br/>36 50 10 29<br/>\u00a0</pre>"}, {"lang": "C", "loc": 25, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> transpose<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>dest<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>src<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> src_h<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> src_w<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>d<span class=\"br0\">)</span><span class=\"br0\">[</span>src_h<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dest<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"br0\">[</span>src_w<span class=\"br0\">]</span> <span class=\"sy0\">=</span> src<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> src_h<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> src_w<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\td<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t\t  <span class=\"br0\">{</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t\t  <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> b<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\ttranspose<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%g%c\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 15, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;boost/numeric/ublas/matrix.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/numeric/ublas/io.hpp&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> boost<span class=\"sy4\">::</span><span class=\"me2\">numeric</span><span class=\"sy4\">::</span><span class=\"me2\">ublas</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  matrix<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> m<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy3\">!</span><span class=\"sy1\">=</span>m.<span class=\"me1\">size1</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> j<span class=\"sy3\">!</span><span class=\"sy1\">=</span>m.<span class=\"me1\">size2</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span><br/>      m<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span>i<span class=\"sy2\">+</span>j<span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> trans<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 32, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> prog<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> MainClass<br/>\t<span class=\"br0\">{</span>\t\t\t\t\t\t<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> t <span class=\"sy0\">=</span> Transpose<span class=\"br0\">(</span> m <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>t<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>t<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span>\t\t<br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> t<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"  \"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> Transpose<span class=\"br0\">(</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> t <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t\tt<span class=\"br0\">[</span>j,i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span><span class=\"sy0\">;</span>\t\t\t<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> t<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defmulti matrix-transpose<br/>  <span class=\"st0\">\"Switch rows with columns.\"</span><br/>  class<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod matrix-transpose clojure<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>PersistentList<br/>  <span class=\"br0\">[</span>mtx<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> map <span class=\"kw1\">list</span> mtx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod matrix-transpose clojure<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>PersistentVector<br/>  <span class=\"br0\">[</span>mtx<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> mapv vector mtx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 2, "block": "<pre class=\"coffeescript highlighted_source\">transpose = <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> matrix<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">matrix</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> transpose <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">list</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*immutable*/</span> <span class=\"kw4\">auto</span> M <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                            <span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                            <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> M.<span class=\"me1\">transposed</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'matrix<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> M <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span>array <span class=\"br0\">(</span>iota <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>array<span class=\"sy0\">-</span>print M<span class=\"br0\">)</span><br/>  <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span> <br/>  <span class=\"nu0\">2</span>   <span class=\"nu0\">3</span> <br/>  <span class=\"nu0\">4</span>   <span class=\"nu0\">5</span> <br/><span class=\"br0\">(</span>array<span class=\"sy0\">-</span>print <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span>transpose M<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"nu0\">0</span>   <span class=\"nu0\">2</span>   <span class=\"nu0\">4</span> <br/>  <span class=\"nu0\">1</span>   <span class=\"nu0\">3</span>   <span class=\"nu0\">5</span> <br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">m = [[1,  1,  1,   1],<br/>     [2,  4,  8,  16],<br/>     [3,  9, 27,  81],<br/>     [4, 16, 64, 256],<br/>     [5, 25,125, 625]]<br/>\u00a0<br/>transpose = fn(m)-&gt; List.zip(m) |&gt; Enum.map(&amp;Tuple.to_list(&amp;1)) end<br/>\u00a0<br/>IO.inspect transpose.(m)</pre>"}, {"lang": "ELLA", "loc": 2, "block": "<pre class=\"text highlighted_source\">MAC TRANSPOSE = ([INT n][INT m]TYPE t: matrix) -&gt; [m][n]t:<br/>  [INT i = 1..m] [INT j = 1..n] matrix[j][i].</pre>"}, {"lang": "Euphoria", "loc": 19, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> transpose<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> in<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    out <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> m <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            out<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">=</span> in<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> out<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> m<br/>m <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy2\">,</span><span class=\"nu0\">6</span><span class=\"sy2\">,</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span><span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"sy2\">,</span><span class=\"nu0\">11</span><span class=\"sy2\">,</span><span class=\"nu0\">12</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy2\">?</span> transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">( scratchpad ) { { 1 2 3 } { 4 5 6 } } flip .<br/> { { 1 4 } { 2 5 } { 3 6 } }</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">S\" fsl-util.fs\" REQUIRED<br/>S\" fsl/dynmem.seq\" REQUIRED<br/>: F+! ( addr -- ) ( F: r -- )  DUP <a class=\"__cf_email__\" data-cfemail=\"bdfbfd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> F+ F!\u00a0;<br/>: FSQR ( F: r1 -- r2 ) FDUP F*\u00a0;<br/>S\" fsl/gaussj.seq\" REQUIRED<br/>\u00a0<br/>5 3 float matrix a{{<br/>1e 2e 3e  4e 5e 6e  7e 8e 9e  10e 11e 12e  13e 14e 15e  5 3 a{{ }}fput<br/>float dmatrix b{{<br/>\u00a0<br/>a{{ 5 3 &amp; b{{ transpose<br/>3 5 b{{ }}fprint</pre>"}, {"lang": "Fortran", "loc": 13, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>   <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, m <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n,m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<span class=\"sy0\">*</span>m<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"sy0\">/</span> n, m <span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>m,n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><br/>\u00a0<br/>b <span class=\"sy0\">=</span> <span class=\"kw4\">transpose</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>    print <span class=\"sy0\">*</span>, a<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, m<br/>    print <span class=\"sy0\">*</span>, b<span class=\"br0\">(</span>j,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> transpose <span class=\"br0\">(</span>mtx\u00a0: _ <span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">init</span> <span class=\"br0\">(</span>mtx.<span class=\"me1\">GetLength</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mtx.<span class=\"me1\">GetLength</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x y <span class=\"sy0\">-&gt;</span> mtx.<span class=\"br0\">[</span>y,x<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "GAP", "loc": 6, "block": "<pre class=\"text highlighted_source\">originalMatrix\u00a0:= [[1, 1, 1, 1],<br/>                   [2, 4, 8, 16],<br/>                   [3, 9, 27, 81],<br/>                   [4, 16, 64, 256],<br/>                   [5, 25, 125, 625]];<br/>transposedMatrix\u00a0:= TransposedMat(originalMatrix);</pre>"}, {"lang": "Go", "loc": 17, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"gonum.org/v1/gonum/mat\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> mat<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">})</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>mat<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>m<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>mat<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>T<span class=\"sy1\">()))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> matrix <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> <span class=\"br0\">]</span>,<br/>               <span class=\"br0\">[</span> <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>matrix.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> transpose <span class=\"sy0\">=</span> matrix.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>transpose.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"sy0\">*</span>Main<span class=\"sy0\">&gt;</span> transpose <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 17, "block": "<pre class=\"text highlighted_source\">class Matrix {<br/>    static function main() {<br/>        var m = [ [1,  1,   1,   1],<br/>                  [2,  4,   8,  16],<br/>                  [3,  9,  27,  81],<br/>                  [4, 16,  64, 256],<br/>                  [5, 25, 125, 625] ];<br/>        var t = [ for (i in 0...m[0].length)<br/>                      [ for (j in 0...m.length) 0 ] ];<br/>        for(i in 0...m.length)<br/>            for(j in 0...m[0].length)<br/>                t[j][i] = m[i][j];<br/>\u00a0<br/>        for(aa in [m, t])<br/>            for(a in aa) Sys.println(a);<br/>    }<br/>}</pre>"}, {"lang": "Hope", "loc": 4, "block": "<pre class=\"text highlighted_source\">uses lists;<br/>dec transpose\u00a0: list (list alpha) -&gt; list (list alpha);<br/>--- transpose ([]::_) &lt;= [];<br/>--- transpose n &lt;= map head n\u00a0:: transpose (map tail n);</pre>"}, {"lang": "HicEst", "loc": 7, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> mtx<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>mtx <span class=\"sy1\">=</span> <span class=\"nu0\">1.1</span> <span class=\"sy1\">*</span> <span class=\"sy2\">$</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> mtx<br/>\u00a0<br/><span class=\"kw1\">SOLVE</span><span class=\"br0\">(</span>Matrix<span class=\"sy1\">=</span>mtx<span class=\"sy1\">,</span> Transpose<span class=\"sy1\">=</span>mtx<span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> mtx</pre>"}, {"lang": "Icon and Unicon", "loc": 28, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> transpose_matrix <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  result <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"co1\"># for each column</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>matrix<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    col <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># extract the number in each row for that column</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>row <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">put</span> <span class=\"br0\">(</span>col<span class=\"sy1\">,</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>    <span class=\"co1\"># and push that column as a row in the result matrix</span><br/>    <span class=\"kw4\">put</span> <span class=\"br0\">(</span>result<span class=\"sy1\">,</span> col<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> print_matrix <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>row <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>row <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  matrix <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Start:\"</span><span class=\"br0\">)</span><br/>  print_matrix <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  transposed <span class=\"sy1\">:=</span> transpose_matrix <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Transposed:\"</span><span class=\"br0\">)</span><br/>  print_matrix <span class=\"br0\">(</span>transposed<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 2, "block": "<pre class=\"idl highlighted_source\">m<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">16</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">9</span>,<span class=\"nu0\">27</span>, <span class=\"nu0\">81</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">25</span>,<span class=\"nu0\">125</span>, <span class=\"nu0\">625</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>print,transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span></pre>"}, {"lang": "Idris", "loc": 2, "block": "<pre class=\"text highlighted_source\">Idris&gt; transpose [[1,2],[3,4],[5,6]]<br/>[[1, 3, 5], [2, 4, 6]]\u00a0: List (List Integer)</pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">   ]matrix=: <span class=\"sy0\">(</span>^/ }:<span class=\"sy0\">)</span> &gt;:i.<span class=\"nu0\">5</span>    <span class=\"co1\">NB. make and show example matrix</span><br/><span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span><br/><span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>   <span class=\"nu0\">8</span>  <span class=\"nu0\">16</span><br/><span class=\"nu0\">3</span>  <span class=\"nu0\">9</span>  <span class=\"nu0\">27</span>  <span class=\"nu0\">81</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">16</span>  <span class=\"nu0\">64</span> <span class=\"nu0\">256</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">25</span> <span class=\"nu0\">125</span> <span class=\"nu0\">625</span><br/>   |: matrix<br/><span class=\"nu0\">1</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span>   <span class=\"nu0\">4</span>   <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">9</span>  <span class=\"nu0\">16</span>  <span class=\"nu0\">25</span><br/><span class=\"nu0\">1</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">27</span>  <span class=\"nu0\">64</span> <span class=\"nu0\">125</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">16</span> <span class=\"nu0\">81</span> <span class=\"nu0\">256</span> <span class=\"nu0\">625</span></pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Transpose<span class=\"br0\">{</span><br/>       <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>               <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>                               <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">16</span><span class=\"br0\">}</span>,<br/>                               <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">27</span>, <span class=\"nu0\">81</span><span class=\"br0\">}</span>,<br/>                               <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">64</span>, <span class=\"nu0\">256</span><span class=\"br0\">}</span>,<br/>                               <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">125</span>, <span class=\"nu0\">625</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>               <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ans <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>m.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> rows <span class=\"sy0\">&lt;</span> m.<span class=\"me1\">length</span><span class=\"sy0\">;</span> rows<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                       <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> cols <span class=\"sy0\">&lt;</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> cols<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                               ans<span class=\"br0\">[</span>cols<span class=\"br0\">]</span><span class=\"br0\">[</span>rows<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"br0\">[</span>rows<span class=\"br0\">]</span><span class=\"br0\">[</span>cols<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                       <span class=\"br0\">}</span><br/>               <span class=\"br0\">}</span><br/>               <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> i<span class=\"sy0\">:</span>ans<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//2D arrays are arrays of arrays</span><br/>                       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"br0\">}</span><br/>       <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 29, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Matrix<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span> <span class=\"sy0\">=</span> ary<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> ary<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">toString</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        s.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// returns a new matrix</span><br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">transpose</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> transposed <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">width</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        transposed<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            transposed<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span>transposed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span><span class=\"nu0\">125</span><span class=\"sy0\">,</span><span class=\"nu0\">625</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>m.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 5, "block": "<pre class=\"text highlighted_source\">DEFINE transpose == [ [null] [true] [[null] some] ifte ]<br/>                    [ pop [] ]<br/>                    [ [[first] map] [[rest] map] cleave ]<br/>                    [ cons ]<br/>                    linrec .</pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">def transpose:<br/>  if (.[0] | length) == 0 then []<br/>  else [map(.[0])] + (map(.[1:]) | transpose)<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">julia&gt; [1 2 3\u00a0; 4 5 6]  # a 2x3 matrix<br/>2x3 Array{Int64,2}:<br/> 1  2  3<br/> 4  5  6<br/>\u00a0<br/>julia&gt; [1 2 3\u00a0; 4 5 6]'  # note the quote<br/>3x2 Array{Int64,2}:<br/> 1  4<br/> 2  5<br/> 3  6</pre>"}, {"lang": "K", "loc": 12, "block": "<pre class=\"text highlighted_source\">  {x^\\:-1_ x}1+!:5<br/>(1 1 1 1.0<br/> 2 4 8 16.0<br/> 3 9 27 81.0<br/> 4 16 64 256.0<br/> 5 25 125 625.0)<br/>\u00a0<br/>  +{x^\\:-1_ x}1+!:5<br/>(1 2 3 4 5.0<br/> 1 4 9 16 25.0<br/> 1 8 27 64 125.0<br/> 1 16 81 256 625.0)</pre>"}, {"lang": "Klong", "loc": 13, "block": "<pre class=\"text highlighted_source\">    [5 5]:^!25<br/>[[0 1 2 3 4]<br/> [5 6 7 8 9]<br/> [10 11 12 13 14]<br/> [15 16 17 18 19]<br/> [20 21 22 23 24]]<br/>\u00a0<br/>    +[5 5]:^!25<br/>[[0 5 10 15 20]<br/> [1 6 11 16 21]<br/> [2 7 12 17 22]<br/> [3 8 13 18 23]<br/> [4 9 14 19 24]]</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> DoubleArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trans <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>cols<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until rows<span class=\"br0\">)</span> trans<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> trans<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">2.0</span>,  <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">4.0</span>,  <span class=\"nu0\">5.0</span>,  <span class=\"nu0\">6.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">7.0</span>,  <span class=\"nu0\">8.0</span>,  <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">10.0</span>, <span class=\"nu0\">11.0</span>, <span class=\"nu0\">12.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span>m.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">12 iota [3 4] reshape 1 + dup .<br/>1 transpose .</pre>"}, {"lang": "LFE", "loc": 15, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> transpose <span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>transpose matrix '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> transpose <span class=\"br0\">(</span>matrix acc<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">any</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> x '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        matrix<span class=\"br0\">)</span><br/>     acc<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>'true<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>heads <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">map</span> #'<span class=\"kw1\">car</span>/<span class=\"nu0\">1</span> matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>tails <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">map</span> #'<span class=\"kw1\">cdr</span>/<span class=\"nu0\">1</span> matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>transpose tails <span class=\"br0\">(</span>++ acc `<span class=\"br0\">(</span><span class=\"sy0\">,</span>heads<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 7, "block": "<pre class=\"lb highlighted_source\">MatrixC$ <span class=\"sy0\">=</span><span class=\"st0\">\"4, 3,          0, 0.10, 0.20, 0.30,       0.40, 0.50, 0.60, 0.70,      0.80, 0.90, 1.00, 1.10\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Transpose of matrix\"</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixC$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"         =\"</span><br/>MatrixT$ <span class=\"sy0\">=</span>MatrixTranspose$<span class=\"br0\">(</span> MatrixC$<span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixT$</pre>"}, {"lang": "Lua", "loc": 23, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Transpose<span class=\"br0\">(</span> m <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> res <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m <span class=\"kw1\">do</span><br/>            res<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> res<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- a test for Transpose(m)</span><br/>mat <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>erg <span class=\"sy0\">=</span> Transpose<span class=\"br0\">(</span> mat <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>erg <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>erg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> erg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"  \"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>M\u00a0:= &lt;&lt;2,3&gt;|&lt;3,4&gt;|&lt;5,6&gt;&gt;;<br/>\u00a0<br/>M^%T;<br/>\u00a0<br/>with(LinearAlgebra):<br/>Transpose(M);<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">originalMatrix = {{1, 1, 1, 1},<br/>                  {2, 4, 8, 16},<br/>                  {3, 9, 27, 81},<br/>                  {4, 16, 64, 256},<br/>                  {5, 25, 125, 625}}<br/>transposedMatrix = Transpose[originalMatrix]</pre>"}, {"lang": "MATLAB", "loc": 13, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; transpose<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>;<span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">3</span><br/>     <span class=\"nu0\">2</span>     <span class=\"nu0\">4</span><br/>\u00a0<br/>&gt;&gt; <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>;<span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>.'<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">3</span><br/>     <span class=\"nu0\">2</span>     <span class=\"nu0\">4</span></pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">originalMatrix\u00a0: matrix([1, 1, 1, 1],<br/>                        [2, 4, 8, 16],<br/>                        [3, 9, 27, 81],<br/>                        [4, 16, 64, 256],<br/>                        [5, 25, 125, 625]);<br/>transposedMatrix\u00a0: transpose(originalMatrix);</pre>"}, {"lang": "MAXScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">m = bigMatrix 5 4<br/>for i in 1 to 5 do for j in 1 to 4 do m[i][j] = pow i j<br/>m = transpose m</pre>"}, {"lang": "Nial", "loc": 3, "block": "<pre class=\"text highlighted_source\">|a\u00a0:= 2 3 reshape count 6<br/>=1 2 3<br/>=4 5 6</pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">proc transpose[X, Y; T](s: array[Y, array[X, T]]): array[X, array[Y, T]] =<br/>  for i in low(X)..high(X):<br/>    for j in low(Y)..high(Y):<br/>      result[i][j] = s[j][i]<br/>\u00a0<br/>let b = [[ 0, 1, 2, 3, 4],<br/>         [ 5, 6, 7, 8, 9],<br/>         [ 1, 0, 0, 0,42]]<br/>let c = transpose(b)<br/>for r in c:<br/>  for i in r:<br/>    stdout.write i, \" \"<br/>  echo \"\"</pre>"}, {"lang": "Objeck", "loc": 33, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Transpose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      input <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">125</span><span class=\"sy0\">,</span> <span class=\"nu0\">625</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      dim <span class=\"sy0\">:=</span> input<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      output <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span>dim<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>dim<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dim<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> dim<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          output<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> input<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      Print<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Print<span class=\"br0\">(</span>matrix <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      dim <span class=\"sy0\">:=</span> matrix<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dim<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> dim<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>'\\t'<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        '\\n'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> transpose b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> dim1 <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>dim1 b<br/>  <span class=\"kw1\">and</span> dim2 <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>dim2 b <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> kind <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>kind b<br/>  <span class=\"kw1\">and</span> layout <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>layout b <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> b<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>create kind layout dim2 dim1 <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> dim1 <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> dim2 <span class=\"kw1\">do</span><br/>      b<span class=\"sy0\">'.</span><span class=\"br0\">{</span>j,i<span class=\"br0\">}</span> <span class=\"sy0\">&lt;-</span> b<span class=\"sy0\">.</span><span class=\"br0\">{</span>i,j<span class=\"br0\">}</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>b<span class=\"sy0\">'</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> array2_display print newline b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Array2<span class=\"sy0\">.</span>dim1 b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Array2<span class=\"sy0\">.</span>dim2 b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      print b<span class=\"sy0\">.</span><span class=\"br0\">{</span>i,j<span class=\"br0\">}</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    newline<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> Array2<span class=\"sy0\">.</span>of_array <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> c_layout <span class=\"br0\">[</span><span class=\"sy0\">|</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">|</span><span class=\"br0\">]</span><br/>\u00a0<br/>array2_display <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span>transpose a<span class=\"br0\">)</span> <span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 7, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">;</span><br/>      <span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"nu0\">8</span><span class=\"sy5\">,</span> <span class=\"nu0\">16</span> <span class=\"sy5\">;</span><br/>      <span class=\"nu0\">3</span><span class=\"sy5\">,</span> <span class=\"nu0\">9</span><span class=\"sy5\">,</span> <span class=\"nu0\">27</span><span class=\"sy5\">,</span> <span class=\"nu0\">81</span> <span class=\"sy5\">;</span><br/>      <span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"nu0\">16</span><span class=\"sy5\">,</span> <span class=\"nu0\">64</span><span class=\"sy5\">,</span> <span class=\"nu0\">256</span> <span class=\"sy5\">;</span><br/>      <span class=\"nu0\">5</span><span class=\"sy5\">,</span> <span class=\"nu0\">25</span><span class=\"sy5\">,</span> <span class=\"nu0\">125</span><span class=\"sy5\">,</span> <span class=\"nu0\">625</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>tranposed <span class=\"sy3\">=</span> a<span class=\"sy2\">.'</span><span class=\"sy5\">;</span> <span class=\"co2\">% tranpose</span><br/>ctransp <span class=\"sy3\">=</span> a<span class=\"sy1\">'</span><span class=\"sy5\">;</span> <span class=\"co2\">% conjugate transpose</span></pre>"}, {"lang": "OxygenBasic", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function Transpose(double *A,*B, sys nx,ny)<br/>'==========================================<br/>  sys x,y<br/>  indexbase 0<br/>  for x=0 to &lt;nx<br/>    for y=0 to &lt;ny<br/>      B[y*nx+x]=A[x*ny+y]<br/>    next<br/>  next<br/>end function<br/>\u00a0<br/>function MatrixShow(double*A, sys nx,ny) as string<br/>'=================================================<br/>  sys x,y<br/>  indexbase 0<br/>  string pr=\"\",tab=chr(9),cr=chr(13)+chr(10)<br/>  for y=0 to &lt;ny<br/>    for x=0 to &lt;nx<br/>      pr+=tab A[x*ny+y]<br/>    next<br/>    pr+=cr<br/>  next<br/>  return pr<br/>end function<br/>\u00a0<br/>'====<br/>'DEMO<br/>'====<br/>\u00a0<br/>double A[5*4],B[4*5]<br/>'columns x<br/>'rows    y<br/>\u00a0<br/>A &lt;= 'y minor, x major<br/>11,12,13,14,15,<br/>21,22,23,24,25,<br/>31,32,33,34,35,<br/>41,42,43,44,45<br/>\u00a0<br/>print MatrixShow A,5,4<br/>Transpose        A,B,5,4<br/>print MatrixShow B,4,5<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">M~</pre>"}, {"lang": "Pascal", "loc": 32, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Transpose<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  A<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">,</span>  <span class=\"nu0\">3</span><span class=\"sy1\">,</span>  <span class=\"nu0\">4</span><span class=\"sy1\">,</span>  <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>                                    <span class=\"br0\">(</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span>  <span class=\"nu0\">7</span><span class=\"sy1\">,</span>  <span class=\"nu0\">8</span><span class=\"sy1\">,</span>  <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t\t    <span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"sy1\">,</span> <span class=\"nu0\">14</span><span class=\"sy1\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\t\t\t\t   <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  B<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      B<span class=\"br0\">[</span>j<span class=\"sy1\">,</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'A:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'B:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span>B<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Matrix</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Matrix</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">125</span><span class=\"sy0\">,</span> <span class=\"nu0\">625</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">transpose</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 22, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># Transposition can be done with the reduced zip meta-operator</span><br/><span class=\"co1\"># on list-of-lists data structures</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw1\">Z</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>A B C D<span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span>E F G H<span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span><span class=\"kw3\">I</span> J K L<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># For native shaped arrays, a more traditional procedure of copying item-by-item</span><br/><span class=\"co1\"># Here the resulting matrix is also a native shaped array</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>A B C D<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>E F G H<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"kw3\">I</span> J K L<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span><span class=\"sy0\">.</span><span class=\"kw3\">shape</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$m</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$m</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\<span class=\"kw3\">i</span><span class=\"sy0\">,</span> \\j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"kw3\">i</span><span class=\"sy0\">;</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span>j<span class=\"sy0\">;</span><span class=\"kw3\">i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@b</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">function transpose(sequence in)<br/>sequence out = repeat(repeat(0,length(in)),length(in[1]))<br/>    for n=1 to length(in) do<br/>        for m=1 to length(in[1]) do<br/>            out[m][n] = in[n][m]<br/>        end for<br/>    end for<br/>    return out<br/>end function</pre>"}, {"lang": "PHP", "loc": 10, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> transpose<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">// special case: empty matrix</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// special case: row matrix</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/array_chunk\"><span class=\"kw3\">array_chunk</span></a><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// array_map(NULL, m[0], m[1], ..)</span><br/>  <a href=\"http://www.php.net/array_unshift\"><span class=\"kw3\">array_unshift</span></a><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"kw4\">NULL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// the original matrix is not modified because it was passed by value</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.php.net/call_user_func_array\"><span class=\"kw3\">call_user_func_array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'array_map'</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de matTrans (Mat)<br/>   (apply mapcar Mat list) )<br/>\u00a0<br/>(matTrans '((1 2 3) (4 5 6)))</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">/* The short method: */<br/>declare A(m, n) float, B (n,m) float defined (A(2sub, 1sub));<br/>/* Any reference to B gives the transpose of matrix A. */</pre>"}, {"lang": "Pop11", "loc": 14, "block": "<pre class=\"text highlighted_source\">define transpose(m) -&gt; res;<br/>    lvars bl = boundslist(m);<br/>    if length(bl) /= 4 then<br/>        throw([need_2d_array ^a])<br/>    endif;<br/>    lvars i, i0 = bl(1), i1 = bl(2);<br/>    lvars j, j0 = bl(3), j1 = bl(4);<br/>    newarray([^j0 ^j1 ^i0 ^i1], 0) -&gt; res;<br/>    for i from i0 to i1 do<br/>        for j from j0 to j1 do<br/>            m(i, j) -&gt; res(j, i);<br/>        endfor;<br/>    endfor;<br/>enddefine;</pre>"}, {"lang": "PostScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">/transpose {<br/>    [ exch {<br/>        { {empty? exch pop} map all?} {pop exit} ift<br/>        [ exch {} {uncons {exch cons} dip exch} fold counttomark 1 roll] uncons<br/>    } loop ] {reverse} map<br/>}.</pre>"}, {"lang": "PowerShell", "loc": 60, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> transpose<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.count<span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">measure-object</span> <span class=\"kw5\">-Minimum</span><span class=\"br0\">)</span>.Minimum <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$arr</span> <span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"5f621f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span>    <br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$row</span> <span class=\"kw3\">in</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$row</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$arr</span><br/><span class=\"br0\">}</span> <br/><span class=\"kw3\">function</span> show<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$a</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"st0\">\"$($a[$_])\"</span><span class=\"br0\">}</span><span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"transpose <span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"br0\">(</span>transpose <span class=\"re0\">$a</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"transpose <span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"br0\">(</span>transpose <span class=\"re0\">$a</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"transpose <span class=\"es0\">`$</span>a =\"</span><br/><span class=\"st0\">\"$(transpose $a)\"</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"transpose <span class=\"es0\">`$</span>a =\"</span><br/><span class=\"st0\">\"$(transpose $a)\"</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"transpose <span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"br0\">(</span>transpose <span class=\"re0\">$a</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 27, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% transposition of a rectangular matrix</span><br/><span class=\"co1\">% e.g.   [[1,2,3,4], [5,6,7,8]]</span><br/><span class=\"co1\">% give [[1,5],[2,6],[3,7],[4,8]]</span><br/>\u00a0<br/>transpose<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    In <span class=\"sy6\">=</span> <span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    maplist<span class=\"br0\">(</span>initdl<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    work<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> In<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% we use the difference list to make \"quick\" appends (one inference)</span><br/>initdl<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V <span class=\"sy5\">|</span> X<span class=\"br0\">]</span> <span class=\"sy3\">-</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>work<span class=\"br0\">(</span>Lst<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>my_append_last<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>work<span class=\"br0\">(</span>Lst<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    maplist<span class=\"br0\">(</span>my_append<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> Lst1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    work<span class=\"br0\">(</span>Lst1<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_append<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> X1<span class=\"sy3\">-</span>Y1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    append_dl<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> <span class=\"br0\">[</span>C <span class=\"sy5\">|</span> U<span class=\"br0\">]</span><span class=\"sy3\">-</span> U<span class=\"sy4\">,</span> X1<span class=\"sy3\">-</span>Y1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_append_last<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> X1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tappend_dl<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> <span class=\"br0\">[</span>C <span class=\"sy5\">|</span> U<span class=\"br0\">]</span><span class=\"sy3\">-</span> U<span class=\"sy4\">,</span> X1<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% \"quick\" append</span><br/>append_dl<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> Y<span class=\"sy3\">-</span>Z<span class=\"sy4\">,</span> X<span class=\"sy3\">-</span>Z<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 52, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> transposeMatrix<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Array trans<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> rows, cols<br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> ar <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;rows in original matrix</span><br/>  <span class=\"kw1\">Protected</span> ac <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;cols in original matrix</span><br/>\u00a0<br/>  <span class=\"co1\">;size the matrix receiving the transposition</span><br/>  <span class=\"kw1\">Dim</span> trans<span class=\"br0\">(</span>ac, ar<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;copy the values</span><br/>  <span class=\"kw1\">For</span> rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ar<br/>    <span class=\"kw1\">For</span> cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ac<br/>      trans<span class=\"br0\">(</span>cols, rows<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displayMatrix<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, text.s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j <br/>  <span class=\"kw1\">Protected</span> cols <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, rows <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>text <span class=\"sy0\">+</span> <span class=\"st0\">\": (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>cols <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> rows<br/>    <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> cols<br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;setup a matrix of arbitrary size</span><br/><span class=\"kw1\">Dim</span> m<span class=\"br0\">(</span><span class=\"kw2\">random</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>, <span class=\"kw2\">random</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> rows, cols<br/><span class=\"co1\">;fill matrix with 'random' data</span><br/><span class=\"kw1\">For</span> rows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>m<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>      <span class=\"co1\">;ArraySize() can take a dimension as its second argument</span><br/>  <span class=\"kw1\">For</span> cols <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>m<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    m<span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">random</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> t<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">;this will be resized during transposition</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  displayMatrix<span class=\"br0\">(</span>m<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"matrix before transposition\"</span><span class=\"br0\">)</span><br/>  transposeMatrix<span class=\"br0\">(</span>m<span class=\"br0\">(</span><span class=\"br0\">)</span>, t<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  displayMatrix<span class=\"br0\">(</span>t<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"matrix after transposition\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\">m<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span>  <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span><span class=\"nu0\">125</span><span class=\"sy0\">,</span> <span class=\"nu0\">625</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span>*m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\"># in Python 3.x, you would do:</span><br/><span class=\"co1\"># print(list(zip(*m)))</span></pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\">b &lt;- 1:5<br/>m &lt;- matrix(c(b, b^2, b^3, b^4), 5, 4)<br/>print(m)<br/>tm &lt;- t(m)<br/>print(tm)</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(matrix-transpose (matrix [[1 2] [3 4]]))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 10, "block": "<pre class=\"text highlighted_source\">public rel[real, real, real] matrixTranspose(rel[real x, real y, real v] matrix){<br/>    return {&lt;y, x, v&gt; | &lt;x, y, v&gt; &lt;- matrix};<br/>}<br/>\u00a0<br/>//a matrix<br/>public rel[real x, real y, real v] matrixA = {<br/>&lt;0.0,0.0,12.0&gt;, &lt;0.0,1.0, 6.0&gt;, &lt;0.0,2.0,-4.0&gt;, <br/>&lt;1.0,0.0,-51.0&gt;, &lt;1.0,1.0,167.0&gt;, &lt;1.0,2.0,24.0&gt;, <br/>&lt;2.0,0.0,4.0&gt;, &lt;2.0,1.0,-68.0&gt;, &lt;2.0,2.0,-41.0&gt;<br/>};</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program transposes any sized rectangular matrix, displays before &amp; after matrices*/</span><br/>@<span class=\"sy0\">.</span>=;     @<span class=\"sy0\">.</span>1 =   <span class=\"nu0\">1.02</span>     <span class=\"nu0\">2.03</span>      <span class=\"nu0\">3.04</span>       <span class=\"nu0\">4.05</span>        <span class=\"nu0\">5.06</span>         <span class=\"nu0\">6.07</span>          <span class=\"nu0\">7.08</span><br/>         @<span class=\"sy0\">.</span>2 = <span class=\"nu0\">111</span>     <span class=\"nu0\">2222</span>     <span class=\"nu0\">33333</span>     <span class=\"nu0\">444444</span>     <span class=\"nu0\">5555555</span>     <span class=\"nu0\">66666666</span>     <span class=\"nu0\">777777777</span><br/>w=<span class=\"nu0\">0</span><br/>                             <span class=\"kw1\">do</span>    row=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>row<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><br/>                                <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>row==<span class=\"st0\">''</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> @<span class=\"sy0\">.</span>row A<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col @<span class=\"sy0\">.</span>row<br/>                                w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col<span class=\"br0\">)</span> <span class=\"br0\">)</span>    <span class=\"coMULTI\">/*max width for elements*/</span><br/>                                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                   <span class=\"coMULTI\">/*(used to align ouput).*/</span><br/>                             <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*row*/</span>    <span class=\"coMULTI\">/* [\u2191]  build matrix A from the @ lists*/</span><br/>row= row-<span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*adjust for  DO  loop index increment.*/</span><br/>                             <span class=\"kw1\">do</span>    j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> row  <span class=\"coMULTI\">/*process each    row    of the matrix.*/</span><br/>                                <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> col  <span class=\"coMULTI\">/*   \"      \"    column   \"  \"     \"   */</span><br/>                                B<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j= A<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k     <span class=\"coMULTI\">/*transpose the  A  matrix  (into  B). */</span><br/>                                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                             <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">call</span> showMat  <span class=\"st0\">'A'</span>, row, col                      <span class=\"coMULTI\">/*display the   A   matrix to terminal.*/</span><br/><span class=\"kw1\">call</span> showMat  <span class=\"st0\">'B'</span>, col, row                      <span class=\"coMULTI\">/*   \"     \"    B      \"    \"     \"    */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMat: <span class=\"kw1\">arg</span> mat,rows,cols;     <span class=\"kw1\">say</span>;       <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span> mat  <span class=\"st0\">'matrix'</span>,  <span class=\"br0\">(</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>cols +<span class=\"nu0\">4</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">do</span>      r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;    _=                                  <span class=\"coMULTI\">/*newLine*/</span><br/>                      <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;    _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span> mat<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>, w<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*append.*/</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw1\">say</span> _                                                         <span class=\"coMULTI\">/*1 line.*/</span><br/>                 <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*r*/</span>;         <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"stdlib.ring\"<br/>transpose = newlist(5,4)<br/>matrix = [[78,19,30,12,36], [49,10,65,42,50], [30,93,24,78,10], [39,68,27,64,29]]<br/>for i = 1 to 5<br/>    for j = 1 to 4<br/>        transpose[i][j] = matrix[j][i]<br/>        see \"\" + transpose[i][j] + \" \"<br/>    next<br/>    see nl<br/>next<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 10, "block": "<pre class=\"text highlighted_source\"> &gt;&gt; m = rand(3,5)<br/>  0.41844289   0.476591435    0.75054022   0.226388925   0.963880314<br/>  0.91267171   0.941762397   0.464227895   0.693482786   0.203839405<br/> 0.261512966   0.157981873    0.26582235    0.11557427  0.0442493069<br/>&gt;&gt; m'<br/>  0.41844289    0.91267171   0.261512966<br/> 0.476591435   0.941762397   0.157981873<br/>  0.75054022   0.464227895    0.26582235<br/> 0.226388925   0.693482786    0.11557427<br/> 0.963880314   0.203839405  0.0442493069</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">m=<span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span>,   <span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>   <span class=\"br0\">[</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">4</span>,  <span class=\"nu0\">8</span>,  <span class=\"nu0\">16</span><span class=\"br0\">]</span>,<br/>   <span class=\"br0\">[</span><span class=\"nu0\">3</span>,  <span class=\"nu0\">9</span>, <span class=\"nu0\">27</span>,  <span class=\"nu0\">81</span><span class=\"br0\">]</span>,<br/>   <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">64</span>, <span class=\"nu0\">256</span><span class=\"br0\">]</span>,<br/>   <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">25</span>,<span class=\"nu0\">125</span>, <span class=\"nu0\">625</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw3\">puts</span> m.<span class=\"me1\">transpose</span></pre>"}, {"lang": "Run BASIC", "loc": 36, "block": "<pre class=\"text highlighted_source\">mtrx$ =\"4, 3,   0, 0.10, 0.20, 0.30,   0.40, 0.50, 0.60, 0.70,  0.80, 0.90, 1.00, 1.10\"<br/>\u00a0<br/>print \"Transpose of matrix\"<br/>call DisplayMatrix mtrx$<br/>print \"         =\"<br/>MatrixT$ =MatrixTranspose$(mtrx$)<br/>call DisplayMatrix MatrixT$<br/>\u00a0<br/>end<br/>\u00a0<br/>function MatrixTranspose$(in$)<br/>  w\t= val(word$(in$, 1, \",\"))    '   swap w and h parameters<br/>  h\t= val(word$(in$, 2, \",\"))<br/>  t$\t= str$(h); \",\"; str$(w); \",\"<br/>  for i =1 to w<br/>    for j =1 to h<br/>      t$ = t$ +word$(in$, 2 +i +(j -1) *w, \",\") +\",\"<br/>    next j<br/>  next i<br/>MatrixTranspose$ =left$(t$, len(t$) -1)<br/>end function<br/>\u00a0<br/>sub DisplayMatrix in$   '   Display looking like a matrix!<br/>html \"&lt;table border=2&gt;\"<br/>  w\t= val(word$(in$, 1, \",\"))<br/>  h\t= val(word$(in$, 2, \",\"))<br/>  for i =0 to h -1<br/>   html \"&lt;tr align=right&gt;\"<br/>   for j =1 to w<br/>      term$\t= word$(in$, j +2 +i *w, \",\")<br/>      html \"&lt;td&gt;\";val(term$);\"&lt;/td&gt;\"<br/>    next j<br/>html \"&lt;/tr&gt;\"<br/>next i<br/>html \"&lt;/table&gt;\"<br/>end sub</pre>"}, {"lang": "Rust", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>struct Matrix {<br/>    dat: [[i32; 3]; 3]<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>impl Matrix {<br/>    pub fn transpose_m(a: Matrix) -&gt; Matrix<br/>    {<br/>        let mut out = Matrix {<br/>            dat: [[0, 0, 0],<br/>                  [0, 0, 0],<br/>                  [0, 0, 0]<br/>                  ]<br/>        };<br/>\u00a0<br/>        for i in 0..3{<br/>            for j in 0..3{<br/>\u00a0<br/>                    out.dat[i][j] = a.dat[j][i];<br/>            }<br/>        }<br/>\u00a0<br/>        out<br/>    }<br/>\u00a0<br/>    pub fn print(self)<br/>    {<br/>        for i in 0..3 {<br/>            for j in 0..3 {<br/>                print!(\"{} \", self.dat[i][j]);<br/>            }<br/>            print!(\"\\n\");<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main()<br/>{<br/>    let  a = Matrix {<br/>        dat: [[1, 2, 3],<br/>              [4, 5, 6],<br/>              [7, 8, 9] ]<br/>    };<br/>\u00a0<br/>let c = Matrix::transpose_m(a);<br/>    c.print();<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">(</span>j <span class=\"sy0\">=&gt;</span> i<span class=\"sy0\">*</span><span class=\"nu0\">4</span> + j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>res12<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> res12.<span class=\"me1\">transpose</span><br/>res13<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">14</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> res12 map <span class=\"br0\">(</span><span class=\"sy0\">_</span> map <span class=\"br0\">(</span><span class=\"st0\">\"%2d\"</span> format <span class=\"sy0\">_</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>res16<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span><br/> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span><br/> <span class=\"nu0\">4</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">7</span><br/> <span class=\"nu0\">8</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span><br/><span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> res13 map <span class=\"br0\">(</span><span class=\"sy0\">_</span> map <span class=\"br0\">(</span><span class=\"st0\">\"%2d\"</span> format <span class=\"sy0\">_</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>res17<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span><br/> <span class=\"nu0\">0</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">12</span><br/> <span class=\"nu0\">1</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">13</span><br/> <span class=\"nu0\">2</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span><br/> <span class=\"nu0\">3</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">15</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>transpose m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"kw1\">map</span> <span class=\"kw1\">list</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 46, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const type: matrix is array array float;<br/>\u00a0<br/>const func matrix: transpose (in matrix: aMatrix) is func<br/>  result<br/>    var matrix: transposedMatrix is matrix.value;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>  begin<br/>    transposedMatrix\u00a0:= length(aMatrix[1]) times length(aMatrix) times 0.0;<br/>    for i range 1 to length(aMatrix) do<br/>      for j range 1 to length(aMatrix[1]) do<br/>        transposedMatrix[j][i]\u00a0:= aMatrix[i][j];<br/>      end for;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: write (in matrix: aMatrix) is func<br/>  local<br/>    var integer: line is 0;<br/>    var integer: column is 0;<br/>  begin<br/>    for line range 1 to length(aMatrix) do<br/>      for column range 1 to length(aMatrix[line]) do<br/>        write(\" \" &lt;&amp; aMatrix[line][column] digits 2);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const matrix: testMatrix is [] (<br/>    [] (0.0, 0.1, 0.2, 0.3),<br/>    [] (0.4, 0.5, 0.6, 0.7),<br/>    [] (0.8, 0.9, 1.0, 1.1));<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Before Transposition:\");<br/>    write(testMatrix);<br/>    writeln;<br/>    writeln(\"After Transposition:\");<br/>    write(transpose(testMatrix));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func transpose<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    matrix<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">range</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> matrix.<span class=\"me1\">map</span><span class=\"br0\">{</span>_<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span>;<br/>\u00a0<br/>var m = <span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span>,   <span class=\"nu0\">1</span>,   <span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">4</span>,   <span class=\"nu0\">8</span>,  <span class=\"nu0\">16</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">3</span>,  <span class=\"nu0\">9</span>,  <span class=\"nu0\">27</span>,  <span class=\"nu0\">81</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">16</span>,  <span class=\"nu0\">64</span>, <span class=\"nu0\">256</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">125</span>, <span class=\"nu0\">625</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span>;<br/>\u00a0<br/>transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>    <span class=\"st0\">\"%5d\"</span> <span class=\"sy0\">*</span> row.<span class=\"me1\">len</span> <span class=\"sy0\">-&gt;</span> printlnf<span class=\"br0\">(</span>row...<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPAD", "loc": 24, "block": "<pre class=\"text highlighted_source\">(1) -&gt; originalMatrix\u00a0:= matrix [[1, 1, 1, 1],[2, 4, 8, 16], _<br/>                                 [3, 9, 27, 81],[4, 16, 64, 256], _<br/>                                 [5, 25, 125, 625]]<br/>\u00a0<br/>        +1  1    1    1 +<br/>        |               |<br/>        |2  4    8   16 |<br/>        |               |<br/>   (1)  |3  9   27   81 |<br/>        |               |<br/>        |4  16  64   256|<br/>        |               |<br/>        +5  25  125  625+<br/>                                                        Type: Matrix(Integer)<br/>(2) -&gt; transposedMatrix\u00a0:= transpose(originalMatrix)<br/>\u00a0<br/>        +1  2   3    4    5 +<br/>        |                   |<br/>        |1  4   9   16   25 |<br/>   (2)  |                   |<br/>        |1  8   27  64   125|<br/>        |                   |<br/>        +1  16  81  256  625+<br/>                                                        Type: Matrix(Integer)</pre>"}, {"lang": "Sparkling", "loc": 7, "block": "<pre class=\"text highlighted_source\">function transpose(A) {<br/>    return map(range(sizeof A), function(k, idx) {<br/>        return map(A, function(k, row) {<br/>            return row[idx];<br/>        });<br/>    });<br/>}</pre>"}, {"lang": "Stata", "loc": 16, "block": "<pre class=\"text highlighted_source\">. mat a=1,2,3\\4,5,6<br/>. mat b=a'<br/>. mat list a<br/>\u00a0<br/>a[2,3]<br/>    c1  c2  c3<br/>r1   1   2   3<br/>r2   4   5   6<br/>\u00a0<br/>. mat list b<br/>\u00a0<br/>b[3,2]<br/>    r1  r2<br/>c1   1   4<br/>c2   2   5<br/>c3   3   6</pre>"}, {"lang": "Tcl", "loc": 44, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> size <span class=\"br0\">{</span>m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> rows <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cols <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$rows</span> <span class=\"re0\">$cols</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> transpose <span class=\"br0\">{</span>m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$m</span><span class=\"br0\">]</span> rows cols <br/>    <span class=\"kw1\">set</span> new <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$cols</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$rows</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rows</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$cols</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lset</span> new <span class=\"re0\">$j</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> print_matrix <span class=\"br0\">{</span>m <span class=\"br0\">{</span>fmt <span class=\"st0\">\"%.17g\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> max <span class=\"br0\">[</span>widest <span class=\"re0\">$m</span> <span class=\"re0\">$fmt</span><span class=\"br0\">]</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$m</span><span class=\"br0\">]</span> rows cols <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rows</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$cols</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"re0\">$fmt</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*s \"</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$max</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> widest <span class=\"br0\">{</span>m <span class=\"br0\">{</span>fmt <span class=\"st0\">\"%.17g\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$m</span><span class=\"br0\">]</span> rows cols <br/>    <span class=\"kw1\">set</span> max <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$cols</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rows</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$cols</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"re0\">$fmt</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">lset</span> max <span class=\"re0\">$j</span> <span class=\"br0\">[</span>max <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$max</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$max</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> m <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">9</span> <span class=\"nu0\">27</span> <span class=\"nu0\">81</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span> <span class=\"nu0\">16</span> <span class=\"nu0\">64</span> <span class=\"nu0\">256</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span> <span class=\"nu0\">25</span> <span class=\"nu0\">125</span> <span class=\"nu0\">625</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>print_matrix <span class=\"re0\">$m</span> <span class=\"st0\">\"%d\"</span><br/>print_matrix <span class=\"br0\">[</span>transpose <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"st0\">\"%d\"</span></pre>"}, {"lang": "TI-83 BASIC, TI-89 BASIC", "loc": 1, "block": "<pre>[A]<sup>T</sup>-&gt;[B]\n</pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#cast\u00a0%eLL<br/>\u00a0<br/>example = <br/>\u00a0<br/>~&amp;K7 &lt;<br/>   &lt;1.,2.,3.,4.&gt;,<br/>   &lt;5.,6.,7.,8.&gt;,<br/>   &lt;9.,10.,11.,12.&gt;&gt;</pre>"}, {"lang": "VBScript", "loc": 33, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'create and display the initial matrix<br/></span>WScript.StdOut.WriteLine <span class=\"st0\">\"Initial Matrix:\"</span><br/>x = 4\u00a0: y = 6\u00a0: n = 1<br/><span class=\"kw4\">Dim</span> matrix()<br/><span class=\"kw4\">ReDim</span> matrix(x,y)<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> y<br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> x<br/>\t\tmatrix(j,i) = n<br/>\t\t<span class=\"kw3\">If</span> j &lt; x <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.Write n &amp; vbTab<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.StdOut.Write n<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\tn = n + 1<br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"co1\">'display the trasposed matrix<br/></span>WScript.StdOut.WriteBlankLines(1)<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Transposed Matrix:\"</span><br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> x<br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> y<br/>\t\t<span class=\"kw3\">If</span> j &lt; y <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.Write matrix(i,j) &amp; vbTab<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.StdOut.Write matrix(i,j)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@zipm [[1 2 3] [4 5 6] [7 8 9]]</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>GSL.Matrix(2,3).set(1,2,3, 4,5,6).transpose().format(5).println();  // in place<br/>println(\"---\");<br/>GSL.Matrix(2,2).set(1,2, 3,4).transpose().format(5).println();  // in place<br/>println(\"---\");<br/>GSL.Matrix(3,1).set(1,2,3).transpose().format(5).println();  // in place</pre>"}, {"lang": "zonnon", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module MatrixOps;<br/>type<br/>\tMatrix = array {math} *,* of integer;<br/>\u00a0<br/>\u00a0<br/>\tprocedure WriteMatrix(x: array {math} *,* of integer);<br/>\tvar<br/>\t\ti,j: integer;<br/>\tbegin<br/>\t\tfor i\u00a0:= 0 to len(x,0) - 1 do<br/>\t\t\tfor j\u00a0:= 0 to len(x,1) - 1 do<br/>\t\t\t\twrite(x[i,j]);<br/>\t\t\tend;<br/>\t\t\twriteln;<br/>\t\tend\t<br/>\tend WriteMatrix;<br/>\u00a0<br/>\tprocedure Transposition;<br/>\tvar<br/>\t\tm,x: Matrix;<br/>\tbegin<br/>\t\tm\u00a0:= [[1,2,3],[3,4,5]]; (* matrix initialization *)<br/>\t\tx\u00a0:=\u00a0!m; (* matrix trasposition *)<br/>\t\tWriteMatrix(x);<br/>\tend Transposition;<br/>\u00a0<br/>begin<br/>\tTransposition;<br/>end MatrixOps.<br/>\u00a0</pre>"}]}