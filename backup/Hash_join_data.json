{"task": "Hash_join", "blocks": [{"lang": "AppleScript", "loc": 132, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span> <span class=\"co1\">-- Yosemite onwards, for record-handling functions</span><br/>\u00a0<br/><span class=\"co1\">-- HASH JOIN -----------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- hashJoin\u00a0:: [Record] -&gt; [Record] -&gt; String -&gt; [Record]</span><br/><span class=\"kw3\">on</span> hashJoin<span class=\"br0\">(</span>tblA, tblB, strJoin<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>jA, jB<span class=\"br0\">}</span> <span class=\"kw3\">to</span> splitOn<span class=\"br0\">(</span><span class=\"st0\">\"=\"</span>, strJoin<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> instanceOfjB<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strID <span class=\"kw3\">to</span> keyValue<span class=\"br0\">(</span>x, jB<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw3\">set</span> maybeInstances <span class=\"kw3\">to</span> keyValue<span class=\"br0\">(</span>a, strID<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> maybeInstances <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>                updatedRecord<span class=\"br0\">(</span>a, strID, maybeInstances <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                updatedRecord<span class=\"br0\">(</span>a, strID, <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> M <span class=\"kw3\">to</span> foldl<span class=\"br0\">(</span>instanceOfjB, <span class=\"br0\">{</span><span class=\"kw1\">name</span>:<span class=\"st0\">\"multiMap\"</span><span class=\"br0\">}</span>, tblB<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> joins<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> matches <span class=\"kw3\">to</span> keyValue<span class=\"br0\">(</span>M, keyValue<span class=\"br0\">(</span>x, jA<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> matches <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">script</span> concat<br/>                    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>                        x <span class=\"sy0\">&amp;</span> row<br/>                    <span class=\"kw3\">end</span> |\u03bb|<br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>                a <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>concat, matches<span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>joins, <span class=\"br0\">{</span><span class=\"br0\">}</span>, tblA<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> hashJoin<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> lstA <span class=\"kw3\">to</span> <span class=\"br0\">[</span>\u00ac<br/>        <span class=\"br0\">{</span>age:<span class=\"nu0\">27</span>, |<span class=\"kw1\">name</span>|:<span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>age:<span class=\"nu0\">18</span>, |<span class=\"kw1\">name</span>|:<span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>age:<span class=\"nu0\">28</span>, |<span class=\"kw1\">name</span>|:<span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>age:<span class=\"nu0\">18</span>, |<span class=\"kw1\">name</span>|:<span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>age:<span class=\"nu0\">28</span>, |<span class=\"kw1\">name</span>|:<span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> lstB <span class=\"kw3\">to</span> <span class=\"br0\">[</span>\u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Jonah\"</span>, nemesis:<span class=\"st0\">\"Whales\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Jonah\"</span>, nemesis:<span class=\"st0\">\"Spiders\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Alan\"</span>, nemesis:<span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Alan\"</span>, nemesis:<span class=\"st0\">\"Zombies\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Glory\"</span>, nemesis:<span class=\"st0\">\"Buffy\"</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span>|character|:<span class=\"st0\">\"Bob\"</span>, nemesis:<span class=\"st0\">\"foo\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    hashJoin<span class=\"br0\">(</span>lstA, lstB, <span class=\"st0\">\"name=character\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- RECORD FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- keyValue\u00a0:: String -&gt; Record -&gt; Maybe a</span><br/><span class=\"kw3\">on</span> keyValue<span class=\"br0\">(</span>rec, strKey<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSDictionary<span class=\"co2\">'</span>s dictionaryWithDictionary:rec<span class=\"br0\">)</span>'s \u00ac<br/>        objectForKey:strKey<br/>    <span class=\"kw3\">if</span> v <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithObject:v<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> keyValue<br/>\u00a0<br/><span class=\"co1\">-- updatedRecord\u00a0:: Record -&gt; String -&gt; a -&gt; Record</span><br/><span class=\"kw3\">on</span> updatedRecord<span class=\"br0\">(</span>rec, strKey, varValue<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"kw3\">set</span> nsDct <span class=\"kw3\">to</span> <span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSMutableDictionary<span class=\"co2\">'</span>s dictionaryWithDictionary:rec<span class=\"br0\">)</span><br/>    nsDct<span class=\"co2\">'</span>s setValue:varValue forKey:strKey<br/>    <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithObject:nsDct<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> updatedRecord<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: Text -&gt; Text -&gt; [Text]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> lstParts <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> lstParts<br/><span class=\"kw3\">end</span> splitOn</pre>"}, {"lang": "AWK", "loc": 63, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f HASH_JOIN.AWK [-v debug={0|1}] TABLE_A TABLE_B</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># sorting:</span><br/><span class=\"co1\">#   PROCINFO[\"sorted_in\"] is used by GAWK</span><br/><span class=\"co1\">#   SORTTYPE is used by Thompson Automation's TAWK</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">FS</span> = <span class=\"st0\">\",\"</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ARGC<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"error: incorrect number of arguments\"</span><span class=\"br0\">)</span>\u00a0; errors<span class=\"sy3\">++</span><br/>      exit <span class=\"co1\"># go to END</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">NR</span> <span class=\"sy2\">==</span> <span class=\"kw3\">FNR</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># table A</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">FNR</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        a_head = prefix_column_names<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        next<br/>      <span class=\"br0\">}</span><br/>      a_arr<span class=\"br0\">[</span><span class=\"re0\">$2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$1</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span> <span class=\"co1\"># [name][age]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">NR</span> <span class=\"sy2\">!=</span> <span class=\"kw3\">FNR</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># table B</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">FNR</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        b_head = prefix_column_names<span class=\"br0\">(</span><span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><br/>        next<br/>      <span class=\"br0\">}</span><br/>      b_arr<span class=\"br0\">[</span><span class=\"re0\">$1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$2</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span> <span class=\"co1\"># [character][nemesis]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errors <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>debug <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dump_table<span class=\"br0\">(</span>a_arr,a_head<span class=\"br0\">)</span><br/>      dump_table<span class=\"br0\">(</span>b_arr,b_head<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%s%s<span class=\"es0\">\\n</span>\"</span>,a_head,<span class=\"kw3\">FS</span>,b_head<span class=\"br0\">)</span> <span class=\"co1\"># table heading</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a_arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> b_arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> a_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> b_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw5\">print</span><span class=\"br0\">(</span>a_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw3\">FS</span> b_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># join table A &amp; table B</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> dump_table<span class=\"br0\">(</span>arr,heading,  i,j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,heading<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> prefix_column_names<span class=\"br0\">(</span>p,  tmp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    tmp = p <span class=\"st0\">\".\"</span> <span class=\"re0\">$0</span><br/>    <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>,<span class=\"sy3\">/</span>,<span class=\"st0\">\"&amp;\"</span> p <span class=\"st0\">\".\"</span>,tmp<span class=\"br0\">)</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 57, "block": "<pre class=\"text highlighted_source\">(     (27.Jonah)<br/>      (18.Alan)<br/>      (28.Glory)<br/>      (18.Popeye)<br/>      (28.Alan)<br/> \u00a0:\u00a0?table-A<br/>&amp;     (Jonah.Whales)<br/>      (Jonah.Spiders)<br/>      (Alan.Ghosts)<br/>      (Alan.Zombies)<br/>      (Glory.Buffy)<br/> \u00a0:\u00a0?table-B<br/>&amp; new$hash:?H<br/>&amp;\u00a0!table-A:? [?lenA<br/>&amp;\u00a0!table-B:? [?lenB<br/>&amp; ( join<br/>  =     smalltab bigtab smallschema bigschema joinschema<br/>      , key val val2 keyval2<br/>    .    \u00a0!arg<br/>       \u00a0: (?smalltab.?bigtab.(=?smallschema.?bigschema.?joinschema))<br/>      &amp;\u00a0:?rel<br/>      &amp;\u00a0!(<br/>         ' (   whl<br/>             ' (\u00a0!smalltab:$smallschema\u00a0?smalltab<br/>               &amp; (H..insert)$(!key.!val)<br/>               )<br/>           &amp;   whl<br/>             ' (\u00a0!bigtab:$bigschema\u00a0?bigtab<br/>               &amp; (   (H..find)$!key:?keyval2<br/>                   &amp;   whl<br/>                     ' (\u00a0!keyval2:(?key.?val2)\u00a0?keyval2<br/>                       &amp; $joinschema\u00a0!rel:?rel<br/>                       )<br/>                 |<br/>                 )<br/>               )<br/>           )<br/>         )<br/>      &amp;\u00a0!rel<br/>  )<br/>&amp;   out<br/>  $ ( join<br/>    $ (  \u00a0!lenA:~&lt;!lenB<br/>        &amp; (\u00a0!table-B<br/>          .\u00a0!table-A<br/>          . (<br/>            = (?key.?val).(?val.?key).!val.!key.!val2<br/>            )<br/>          )<br/>      | (\u00a0!table-A<br/>        .\u00a0!table-B<br/>        . (=(?val.?key).(?key.?val).!val2.!key.!val)<br/>        )<br/>      )<br/>    )<br/>&amp;<br/>);</pre>"}, {"lang": "C++", "loc": 66, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;unordered_map&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> tab_t <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;&gt;</span><span class=\"sy4\">;</span><br/>tab_t tab1 <span class=\"br0\">{</span><br/><span class=\"co1\">// Age  Name</span><br/>  <span class=\"br0\">{</span><span class=\"st0\">\"27\"</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>tab_t tab2 <span class=\"br0\">{</span><br/><span class=\"co1\">// Character  Nemesis</span><br/>  <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">}</span><br/>, <span class=\"br0\">{</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> o, <span class=\"kw4\">const</span> tab_t<span class=\"sy3\">&amp;</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> t.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    o <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\":\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> e <span class=\"sy4\">:</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>      o <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\t</span>'</span> <span class=\"sy1\">&lt;&lt;</span> e<span class=\"sy4\">;</span><br/>    o <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> o<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tab_t Join<span class=\"br0\">(</span><span class=\"kw4\">const</span> tab_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">size_t</span> columna, <span class=\"kw4\">const</span> tab_t<span class=\"sy3\">&amp;</span> b, <span class=\"kw4\">size_t</span> columnb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">unordered_multimap</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span>, <span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> hashmap<span class=\"sy4\">;</span><br/>  <span class=\"co1\">// hash</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> a.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hashmap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>columna<span class=\"br0\">]</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// map</span><br/>  tab_t result<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> range <span class=\"sy1\">=</span> hashmap.<span class=\"me1\">equal_range</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>columnb<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> range.<span class=\"me1\">first</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> range.<span class=\"me1\">second</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tab_t<span class=\"sy4\">::</span><span class=\"me2\">value_type</span> row<span class=\"sy4\">;</span><br/>      row.<span class=\"me1\">insert</span><span class=\"br0\">(</span>row.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> , a<span class=\"br0\">[</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"br0\">]</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> , a<span class=\"br0\">[</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"br0\">]</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      row.<span class=\"me1\">insert</span><span class=\"br0\">(</span>row.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> , b<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>          , b<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      result.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> ret <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Table A: \"</span>       <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> tab1 <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Table B: \"</span>       <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> tab2 <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">auto</span> tab3 <span class=\"sy1\">=</span> Join<span class=\"br0\">(</span>tab1, <span class=\"nu0\">1</span>, tab2, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Joined tables: \"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> tab3 <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> ret<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 100, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> HashJoin<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> AgeName<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> AgeName<span class=\"br0\">(</span><span class=\"kw4\">byte</span> age, <span class=\"kw4\">string</span> name<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Age <span class=\"sy0\">=</span> age<span class=\"sy0\">;</span><br/>            Name <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">byte</span> Age <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> NameNemesis<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> NameNemesis<span class=\"br0\">(</span><span class=\"kw4\">string</span> name, <span class=\"kw4\">string</span> nemesis<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Name <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>            Nemesis <span class=\"sy0\">=</span> nemesis<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Nemesis <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> DataContext<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> DataContext<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            AgeName <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>AgeName<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            NameNemesis <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>NameNemesis<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>AgeName<span class=\"sy0\">&gt;</span> AgeName <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>NameNemesis<span class=\"sy0\">&gt;</span> NameNemesis <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> AgeNameNemesis<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> AgeNameNemesis<span class=\"br0\">(</span><span class=\"kw4\">byte</span> age, <span class=\"kw4\">string</span> name, <span class=\"kw4\">string</span> nemesis<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Age <span class=\"sy0\">=</span> age<span class=\"sy0\">;</span><br/>            Name <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>            Nemesis <span class=\"sy0\">=</span> nemesis<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">byte</span> Age <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Nemesis <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> GetData<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> ExecuteHashJoin<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            WriteResultToConsole<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> WriteResultToConsole<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>AgeNameNemesis<span class=\"sy0\">&gt;</span> result<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            result<span class=\"sy0\">.</span><span class=\"kw1\">ForEach</span><span class=\"br0\">(</span>ageNameNemesis <span class=\"sy0\">=&gt;</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Age: {0}, Name: {1}, Nemesis: {2}\"</span>,<br/>                ageNameNemesis<span class=\"sy0\">.</span><span class=\"me1\">Age</span>, ageNameNemesis<span class=\"sy0\">.</span><span class=\"me1\">Name</span>, ageNameNemesis<span class=\"sy0\">.</span><span class=\"me1\">Nemesis</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>AgeNameNemesis<span class=\"sy0\">&gt;</span> ExecuteHashJoin<span class=\"br0\">(</span>DataContext data<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>data<span class=\"sy0\">.</span><span class=\"me1\">AgeName</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>data<span class=\"sy0\">.</span><span class=\"me1\">NameNemesis</span>, <br/>                ageName <span class=\"sy0\">=&gt;</span> ageName<span class=\"sy0\">.</span><span class=\"me1\">Name</span>, nameNemesis <span class=\"sy0\">=&gt;</span> nameNemesis<span class=\"sy0\">.</span><span class=\"me1\">Name</span>,<br/>                <span class=\"br0\">(</span>ageName, nameNemesis<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeNameNemesis<span class=\"br0\">(</span>ageName<span class=\"sy0\">.</span><span class=\"me1\">Age</span>, ageName<span class=\"sy0\">.</span><span class=\"me1\">Name</span>, nameNemesis<span class=\"sy0\">.</span><span class=\"me1\">Nemesis</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> DataContext GetData<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> context <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DataContext<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            context<span class=\"sy0\">.</span><span class=\"me1\">AgeName</span><span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeName<span class=\"br0\">(</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span>, <br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeName<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>, <br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeName<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span>, <br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeName<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span>, <br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AgeName<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            context<span class=\"sy0\">.</span><span class=\"me1\">NameNemesis</span><span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NameNemesis<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NameNemesis<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NameNemesis<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NameNemesis<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NameNemesis<span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> context<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 22, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> hash<span class=\"sy0\">-</span>join <span class=\"br0\">[</span>table1 col1 table2 col2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>hashed <span class=\"br0\">(</span>group<span class=\"sy0\">-</span>by col1 table1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>flatten<br/>      <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>r table2<span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span>hashed <span class=\"br0\">(</span>col2 r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">merge</span> s r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> s '<span class=\"br0\">(</span><span class=\"br0\">{</span>:<span class=\"me1\">age</span> <span class=\"nu0\">27</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">age</span> <span class=\"nu0\">18</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">age</span> <span class=\"nu0\">28</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">age</span> <span class=\"nu0\">18</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">age</span> <span class=\"nu0\">28</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> r '<span class=\"br0\">(</span><span class=\"br0\">{</span>:<span class=\"me1\">nemesis</span> <span class=\"st0\">\"Whales\"</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">nemesis</span> <span class=\"st0\">\"Spiders\"</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">nemesis</span> <span class=\"st0\">\"Ghosts\"</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">nemesis</span> <span class=\"st0\">\"Zombies\"</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>:<span class=\"me1\">nemesis</span> <span class=\"st0\">\"Buffy\"</span>\u00a0:<span class=\"me1\">name</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>pprint <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span>\u00a0:<span class=\"me1\">name</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>join s\u00a0:<span class=\"me1\">name</span> r\u00a0:<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *table-A* '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">27</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *table-B* '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Hash phase</span><br/><span class=\"br0\">(</span>defparameter *hash-table* <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> #'<span class=\"kw1\">equal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>i r<span class=\"br0\">)</span> in *table-A* <br/>   for <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>gethash r *hash-table* <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"kw1\">do</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash r *hash-table*<span class=\"br0\">)</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">list</span> i r<span class=\"br0\">)</span> <span class=\"br0\">(</span>first <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Join phase     </span><br/><span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>i r<span class=\"br0\">)</span> in *table-B* <span class=\"kw1\">do</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>val <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>gethash i *hash-table*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> in val <span class=\"kw1\">do</span> <br/>\t    <span class=\"br0\">(</span>format t <span class=\"st0\">\"{~a ~a} {~a ~a}~%\"</span>  a b i r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 35, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> hashJoin<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> index1<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> index2<span class=\"sy0\">,</span> T1<span class=\"sy0\">,</span> T2<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw2\">in</span> T1<span class=\"br0\">[</span><span class=\"br0\">]</span> table1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T2<span class=\"br0\">[</span><span class=\"br0\">]</span> table2<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T1.<span class=\"me1\">init</span><span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T2.<span class=\"me1\">init</span><span class=\"br0\">[</span>index2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Hash phase.</span><br/>    T1<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T1.<span class=\"me1\">init</span><span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> h<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> s<span class=\"sy0\">;</span> table1<span class=\"br0\">)</span><br/>        h<span class=\"br0\">[</span>s<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Join phase.</span><br/>    Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> T1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> T2<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> r<span class=\"sy0\">;</span> table2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> s<span class=\"sy0\">;</span> h.<span class=\"me1\">get</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>index2<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Not nothrow.</span><br/>            result <span class=\"sy0\">~=</span> tuple<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> T <span class=\"sy0\">=</span> tuple<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> table1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>T<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> table2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>T<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        T<span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> hashJoin<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span>table1<span class=\"sy0\">,</span> table2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"(%s,\u00a0%5s) (%5s,\u00a0%7s)\"</span><span class=\"sy0\">,</span> row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> row<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 19, "block": "<pre class=\"text highlighted_source\">hashJoin table1 index1 table2 index2:<br/>    local\u00a0:h {}<br/>    # hash phase<br/>    for s in table1:<br/>        local\u00a0:key s! index1<br/>        if not has h key:<br/>            set-to h key []<br/>        push-to h! key s<br/>    # join phase<br/>    []<br/>    for r in table2:<br/>        for s in copy h! r! index2:<br/>            push-through swap [ s r ]<br/>\u00a0<br/>local\u00a0:table1 [ [ 27 \"Jonah\" ] [ 18 \"Alan\" ] [ 28 \"Glory\" ] [ 18 \"Popeye\" ] [ 28 \"Alan\" ] ]<br/>local\u00a0:table2 [ [ \"Jonah\" \"Whales\" ] [ \"Jonah\" \"Spiders\" ] [ \"Alan\" \"Ghosts\" ] [ \"Alan\" \"Zombies\" ] [ \"Glory\" \"Buffy\" ] ]<br/>\u00a0<br/>for row in hashJoin table1 1 table2 0:<br/>   \u00a0!. row</pre>"}, {"lang": "EchoLisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define ages '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">27</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define nemesis '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; table: table name</span><br/><span class=\"co1\">;; source\u00a0: input list</span><br/><span class=\"co1\">;; key-proc\u00a0: procedure returning the join value ('name' in this task)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>table-<span class=\"kw1\">hash</span> table source key-proc <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>local-make-store table<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>r source<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>local-put-<span class=\"kw1\">value</span> <br/>\t\t<span class=\"br0\">(</span>key-proc r<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span>local-get-<span class=\"kw1\">value</span> <span class=\"br0\">(</span>key-proc r<span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; build the two tables</span><br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>second record<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> record<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>key-name-age record<span class=\"br0\">)</span> <span class=\"br0\">(</span>second record<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>table-<span class=\"kw1\">hash</span> 'AGES ages key-name-age<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>key-nemesis-<span class=\"kw1\">name</span> record<span class=\"br0\">)</span> <span class=\"br0\">(</span>first record<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>table-<span class=\"kw1\">hash</span> 'NEMESIS nemesis key-nemesis-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; join</span><br/><span class=\"br0\">(</span>for* <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"br0\">(</span>local-keys 'AGES<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t  <span class=\"br0\">(</span>a <span class=\"br0\">(</span>local-get-<span class=\"kw1\">value</span> k 'AGES<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>n <span class=\"br0\">(</span>local-get-<span class=\"kw1\">value</span> k 'NEMESIS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>writeln a n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LeftRec\u00a0:= RECORD<br/>  UNSIGNED1 Age;<br/>  STRING6   Name;<br/>END;<br/>\u00a0<br/>LeftFile\u00a0:= DATASET([{27,'Jonah'},{18,'Alan'},{28,'Glory'},{18,'Popeye'},{28,'Alan'}],LeftRec);<br/>\u00a0<br/>RightRec\u00a0:= RECORD<br/>  STRING6   Name;<br/>  STRING7   Nemesis;<br/>END;<br/>\u00a0<br/>RightFile\u00a0:= DATASET([{'Jonah','Whales'},{'Jonah','Spiders'},{'Alan','Ghosts'},{'Alan','Zombies'},{'Glory','Buffy'}],<br/>                     RightRec);<br/>\u00a0<br/>HashJoin\u00a0:= JOIN(LeftFile,RightFile,Left.Name = RIGHT.Name,HASH);<br/>\u00a0<br/>HashJoin;<br/>\u00a0<br/>\u00a0<br/>//The HASH JOIN is built-in to the ECL JOIN by using the HASH JOIN Flag<br/>\u00a0<br/>/*<br/>OUTPUT:<br/>Age Name  Nemesis<br/>18  Alan  Ghosts <br/>18  Alan  Zombies<br/>28  Alan  Ghosts <br/>28  Alan  Zombies<br/>28  Glory Buffy  <br/>27  Jonah Whales <br/>27  Jonah Spiders<br/>*/<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule Hash do<br/>  def join(table1, index1, table2, index2) do<br/>    h = Enum.group_by(table1, fn s -&gt; elem(s, index1) end)<br/>    Enum.flat_map(table2, fn r -&gt;<br/>      Enum.map(h[elem(r, index2)], fn s -&gt; {s, r} end)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>table1 = [{27, \"Jonah\"},<br/>          {18, \"Alan\"},<br/>          {28, \"Glory\"},<br/>          {18, \"Popeye\"},<br/>          {28, \"Alan\"}]<br/>table2 = [{\"Jonah\", \"Whales\"},<br/>          {\"Jonah\", \"Spiders\"},<br/>          {\"Alan\",  \"Ghosts\"},<br/>          {\"Alan\",  \"Zombies\"},<br/>          {\"Glory\", \"Buffy\"}]<br/>Hash.join(table1, 1, table2, 0) |&gt; Enum.each(&amp;IO.inspect &amp;1)</pre>"}, {"lang": "Erlang", "loc": 19, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> hash_join <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Table_1</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">27</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Table_2</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Glory\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> dict_append<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Table_1</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">dict_find</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Table_2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">dict_append</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dict_find</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dict_find</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dict_find</span><span class=\"br0\">(</span> error<span class=\"sy1\">,</span> <span class=\"re5\">_Key</span><span class=\"sy1\">,</span> <span class=\"re5\">_Value</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dict_find</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span>\t<span class=\"re5\">Values</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> table1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">;</span><br/>                <span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"sy0\">;</span><br/>                <span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"sy0\">;</span><br/>                <span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"sy0\">;</span><br/>                <span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> table2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"sy0\">;</span><br/>                <span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"sy0\">;</span><br/>                <span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"sy0\">;</span><br/>                <span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"sy0\">;</span><br/>                <span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw8\">hash</span> <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> r <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">snd</span> r<span class=\"br0\">)</span> table1<br/>    table2 <br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> r <span class=\"sy0\">-&gt;</span> <br/>        <span class=\"kw8\">hash</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> kv <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> kv<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> kv<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>    <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%A\"</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Forth", "loc": 87, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>\\ Since the same join attribute, Name, occurs more than once<br/>\\ in both tables for this problem we need a hash table that<br/>\\ will accept and retrieve multiple identical keys if we want<br/>\\ an efficient solution for large tables. We make use<br/>\\ of the hash collision handling feature of class hash-table.<br/>\u00a0<br/>\\ Subclass hash-table-m allows multiple entries with the same key.<br/>\\ After a get: hit one can inspect for additional entries with<br/>\\ the same key by using next: until false is returned.<br/>\u00a0<br/>:class hash-table-m &lt;super hash-table<br/>\u00a0<br/>\\ called within insert: method in superclass<br/>\u00a0:m (do-search): ( node hash -- idx hash false )<br/>      swap drop idx @ swap false\u00a0;m<br/>\u00a0:m next: ( -- val true | false )<br/>    last-node @ dup<br/>    if<br/>      begin<br/>       ( node ) next: dup<br/>      while<br/>        dup <a class=\"__cf_email__\" data-cfemail=\"5b303e221b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: @: key-addr @ key-len @ compare 0=<br/>             if dup last-node\u00a0! <a class=\"__cf_email__\" data-cfemail=\"7600171a36\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: true exit then<br/>      repeat <br/>    then\u00a0;m<br/>;class<br/>\u00a0<br/>\\ begin hash phase <br/>: obj ( addr len -- obj )<br/>  heap&gt; string+ dup &gt;r\u00a0!: r&gt;\u00a0;<br/>\u00a0<br/>hash-table-m R   1 r init <br/>s\" Whales \"   obj s\" Jonah\" r insert:<br/>s\" Spiders \"  obj s\" Jonah\" r insert:<br/>s\" Ghosts \"   obj s\" Alan\"  r insert:<br/>s\" Buffy \"    obj s\" Glory\" r insert: <br/>s\" Zombies \"  obj s\" Alan\"  r insert:<br/>s\" Vampires \" obj s\" Jonah\" r insert:<br/>\\ end hash phase<br/>\u00a0<br/>\\ create Age Name table S<br/>o{ o{ 27 'Jonah' }<br/>   o{ 18 'Alan' }<br/>   o{ 28 'Glory' }<br/>   o{ 18 'Popeye' }<br/>   o{ 28 'Alan' } } value s  <br/>\u00a0<br/>\\ Q is a place to store the relation<br/>object-list2 Q<br/>\u00a0<br/>\\ join phase<br/>: join \\ { obj | list -- }<br/>  0 locals| list obj |<br/>  1 obj at: @: r get: \\ hash the join-attribute and search table r<br/>  if \\ we have a match, so concatenate and save in q<br/>    heap&gt; object-list2 to list list q add: \\ start a new sub-list in q<br/>    0 obj at: copy: list add: \\ place age from list s in q<br/>    1 obj at: copy: list add: \\ place join-attribute (name) from list s in q<br/>    ( str-obj ) copy: list add: \\ place first nemesis in q<br/>    begin<br/>      r next: \\ check for more nemeses<br/>    while<br/>       ( str-obj ) copy: list add: \\ place next nemesis in q<br/>    repeat<br/>  then\u00a0;<br/>\u00a0<br/>: probe<br/>  begin<br/>    s each: \\ for each tuple object in s<br/>  while<br/>    ( obj ) join \\ pass the object to function join<br/>  repeat\u00a0;<br/>\u00a0<br/>probe \\ execute the probe function<br/>\u00a0<br/>q p: \\ print the saved relation<br/>\u00a0<br/>\\ free allocated memory<br/>s &lt;free <br/>r free2:<br/>q free:<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    tableA <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        value <span class=\"kw4\">int</span><br/>        key   <span class=\"kw4\">string</span><br/>    <span class=\"sy1\">}{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">27</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">}</span><br/>    tableB <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        key   <span class=\"kw4\">string</span><br/>        value <span class=\"kw4\">string</span><br/>    <span class=\"sy1\">}{</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"Alan\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"st0\">\"Alan\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"st0\">\"Glory\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// hash phase</span><br/>    h <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">][]</span><span class=\"kw4\">int</span><span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> tableA <span class=\"sy1\">{</span><br/>        h<span class=\"sy1\">[</span>r<span class=\"sy3\">.</span>key<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>h<span class=\"sy1\">[</span>r<span class=\"sy3\">.</span>key<span class=\"sy1\">],</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// join phase</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> tableB <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h<span class=\"sy1\">[</span>x<span class=\"sy3\">.</span>key<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>tableA<span class=\"sy1\">[</span>a<span class=\"sy1\">],</span> x<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 17, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> hashJoin<span class=\"br0\">(</span>table1, col1, table2, col2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> hashed <span class=\"sy0\">=</span> table1.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> s <span class=\"sy0\">-&gt;</span> s<span class=\"br0\">[</span>col1<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/>\u00a0<br/>    table2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> r <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a> <span class=\"sy0\">=</span> hashed<span class=\"br0\">[</span>r<span class=\"br0\">[</span>col2<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> s <span class=\"sy0\">-&gt;</span><br/>            q <span class=\"sy0\">&lt;&lt;</span> s.<span class=\"me1\">plus</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    q<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 29, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE LambdaCase, TupleSections #-}</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>HashTable<span class=\"sy0\">.</span>ST<span class=\"sy0\">.</span>Basic <span class=\"kw1\">as</span> H<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Hashable<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>STRef<br/>\u00a0<br/>hashJoin <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> k<span class=\"sy0\">,</span> Hashable k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            <span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>t <span class=\"sy0\">-&gt;</span> k<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> k<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>hashJoin xs fx ys fy <span class=\"sy0\">=</span> runST <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>  l <span class=\"sy0\">&lt;-</span> newSTRef <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  ht <span class=\"sy0\">&lt;-</span> H<span class=\"sy0\">.</span>new<br/>  forM<span class=\"sy0\">_</span> ys <span class=\"sy0\">$</span> \\y <span class=\"sy0\">-&gt;</span> H<span class=\"sy0\">.</span>insert ht <span class=\"br0\">(</span>fy y<span class=\"br0\">)</span> <span class=\"sy0\">=&lt;&lt;</span> <br/>    <span class=\"br0\">(</span>H<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> ht <span class=\"br0\">(</span>fy y<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;=</span> \\<span class=\"kw1\">case</span><br/>      Nothing <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span>y<span class=\"br0\">]</span><br/>      Just v <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>y:v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  forM<span class=\"sy0\">_</span> xs <span class=\"sy0\">$</span> \\x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>    H<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> ht <span class=\"br0\">(</span>fx x<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;=</span> \\<span class=\"kw1\">case</span><br/>      Nothing <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      Just v <span class=\"sy0\">-&gt;</span> modifySTRef<span class=\"st0\">' l ((map (x,)  v) ++) <br/>  readSTRef l<br/>\u00a0<br/>main = mapM_ print $ hashJoin <br/>    [(1, \"Jonah\"), (2, \"Alan\"), (3, \"Glory\"), (4, \"Popeye\")]<br/>        snd<br/>    [(\"Jonah\", \"Whales\"), (\"Jonah\", \"Spiders\"), <br/>      (\"Alan\", \"Ghosts\"), (\"Alan\", \"Zombies\"), (\"Glory\", \"Buffy\")]<br/>        fst<br/></span></pre>"}, {"lang": "J", "loc": 15, "block": "<pre class=\"j highlighted_source\">table1=:\u00a0;:;.<span class=\"nu0\">_2</span><span class=\"sy0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><span class=\"sy0\">)</span><br/>  <span class=\"nu0\">27</span> Jonah<br/>  <span class=\"nu0\">18</span> Alan<br/>  <span class=\"nu0\">28</span> Glory<br/>  <span class=\"nu0\">18</span> Popeye<br/>  <span class=\"nu0\">28</span> Alan<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>table2=:\u00a0;:;.<span class=\"nu0\">_2</span><span class=\"sy0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><span class=\"sy0\">)</span><br/>  Jonah Whales<br/>  Jonah Spiders<br/>  Alan Ghosts<br/>  Alan Zombies<br/>  Glory Buffy<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 40, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HashJoin <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> table1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"27\"</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> table2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"Bob\"</span>, <span class=\"st0\">\"foo\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        hashJoin<span class=\"br0\">(</span>table1, <span class=\"nu0\">1</span>, table2, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>r <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">deepToString</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> hashJoin<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> records1, <span class=\"kw4\">int</span> idx1,<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> records2, <span class=\"kw4\">int</span> idx2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span> map <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> record <span class=\"sy0\">:</span> records1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> v <span class=\"sy0\">=</span> map.<span class=\"me1\">getOrDefault</span><span class=\"br0\">(</span>record<span class=\"br0\">[</span>idx1<span class=\"br0\">]</span>, <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            v.<span class=\"me1\">add</span><span class=\"br0\">(</span>record<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            map.<span class=\"me1\">put</span><span class=\"br0\">(</span>record<span class=\"br0\">[</span>idx1<span class=\"br0\">]</span>, v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> record <span class=\"sy0\">:</span> records2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> lst <span class=\"sy0\">=</span> map.<span class=\"me1\">get</span><span class=\"br0\">(</span>record<span class=\"br0\">[</span>idx2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lst <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                lst.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>r <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>r, record<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 56, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// hashJoin\u00a0:: [Dict] -&gt; [Dict] -&gt; String -&gt; [Dict]</span><br/>    let hashJoin <span class=\"sy0\">=</span> <span class=\"br0\">(</span>tblA<span class=\"sy0\">,</span> tblB<span class=\"sy0\">,</span> strJoin<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        let <span class=\"br0\">[</span>jA<span class=\"sy0\">,</span> jB<span class=\"br0\">]</span> <span class=\"sy0\">=</span> strJoin.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'='</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            M <span class=\"sy0\">=</span> tblB.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                let id <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>jB<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>                    a<span class=\"br0\">[</span>id<span class=\"br0\">]</span> <span class=\"sy0\">?</span> a<span class=\"br0\">[</span>id<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"br0\">[</span>id<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    a<br/>                <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> tblA.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            let match <span class=\"sy0\">=</span> M<span class=\"br0\">[</span>x<span class=\"br0\">[</span>jA<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> match <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                a.<span class=\"me1\">concat</span><span class=\"br0\">(</span>match.<span class=\"me1\">map</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> dictConcat<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    <span class=\"co1\">// dictConcat\u00a0:: Dict -&gt; Dict -&gt; Dict</span><br/>    dictConcat <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dctA<span class=\"sy0\">,</span> dctB<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let ok <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">keys</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> ok<span class=\"br0\">(</span>dctB<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"st0\">'B_'</span> <span class=\"sy0\">+</span> k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dctB<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"sy0\">,</span><br/>            ok<span class=\"br0\">(</span>dctA<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"st0\">'A_'</span> <span class=\"sy0\">+</span> k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dctA<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// TEST</span><br/>    let lstA <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">{</span> age<span class=\"sy0\">:</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span> <span class=\"st0\">'Jonah'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> age<span class=\"sy0\">:</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span> <span class=\"st0\">'Alan'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> age<span class=\"sy0\">:</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span> <span class=\"st0\">'Glory'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> age<span class=\"sy0\">:</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span> <span class=\"st0\">'Popeye'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> age<span class=\"sy0\">:</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span> <span class=\"st0\">'Alan'</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    lstB <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span> <span class=\"st0\">'Jonah'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'Whales'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span> <span class=\"st0\">'Jonah'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'Spiders'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span> <span class=\"st0\">'Alan'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'Ghosts'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span><span class=\"st0\">'Alan'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'Zombies'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span> <span class=\"st0\">'Glory'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'Buffy'</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> character<span class=\"sy0\">:</span> <span class=\"st0\">'Bob'</span><span class=\"sy0\">,</span> nemesis<span class=\"sy0\">:</span> <span class=\"st0\">'foo'</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> hashJoin<span class=\"br0\">(</span>lstA<span class=\"sy0\">,</span> lstB<span class=\"sy0\">,</span> <span class=\"st0\">'name=character'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 35, "block": "<pre class=\"text highlighted_source\"># hashJoin(table1; key1; table2; key2) expects the two tables to be<br/># arrays, either of JSON objects, or of arrays.<br/>\u00a0<br/># In the first case, that is, if the table's rows are represented as<br/># objects, then key1 should be the key of the join column of table1,<br/># and similarly for key2; if the join columns have different names,<br/># then they will both be included in the resultant objects.<br/>\u00a0<br/># In the second case, that is, if the rows are arrays, then the<br/># 0-based indices of the join columns should be specified, and the<br/># rows are simply pasted together, resulting in duplication of the<br/># join columns.<br/>#<br/>def hashJoin(table1; key1; table2; key2):<br/>  # collision-free hash function:<br/>  def h:<br/>    if type == \"object\" then with_entries(.value = (.value|h)) | tostring<br/>    elif type == \"array\" then map(h)|tostring<br/>    else (type[0:1]+tostring)<br/>    end;<br/>\u00a0<br/>  # hash phase:<br/>  reduce table1[] as $row<br/>    ({};<br/>     ($row[key1]|h) as $key<br/>     | . + { ($key): (.[$key] + [$row]) } )<br/>  | . as $hash<br/>  # join phase<br/>  | reduce table2[] as $row<br/>      ([];<br/>       ($row[key2]|h) as $key<br/>       | if $hash|has($key) then<br/>           reduce $hash[$key][] as $r (.; . +  [ $row + $r ] )<br/>  \t else . end)<br/>;</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">using DataFrames<br/>\u00a0<br/>A = DataFrame(Age = [27, 18, 28, 18, 28], Name = [\"Jonah\", \"Alan\", \"Glory\", \"Popeye\", \"Alan\"])<br/>B = DataFrame(Name = [\"Jonah\", \"Jonah\", \"Alan\", \"Alan\", \"Glory\"],<br/>    Nemesis = [\"Whales\", \"Spiders\", \"Ghosts\", \"Zombies\", \"Buffy\"])<br/>AB = join(A, B, on =\u00a0:Name)<br/>\u00a0<br/>@show A B AB</pre>"}, {"lang": "Kotlin", "loc": 39, "block": "<pre class=\"scala highlighted_source\">data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> A<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> age<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> B<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> character<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nemesis<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> C<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rowA<span class=\"sy0\">:</span> A, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rowB<span class=\"sy0\">:</span> B<span class=\"br0\">)</span><br/>\u00a0<br/>fun hashJoin<span class=\"br0\">(</span>tableA<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>A<span class=\"sy0\">&gt;</span>, tableB<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>B<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>C<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mm <span class=\"sy0\">=</span> tableB.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">character</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tableC <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>C<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in tableA<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> mm<span class=\"br0\">[</span>a.<span class=\"me1\">name</span><span class=\"br0\">]</span> <span class=\"sy0\">?:</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b in value<span class=\"br0\">)</span> tableC.<span class=\"me1\">add</span><span class=\"br0\">(</span>C<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> tableC.<span class=\"me1\">toList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tableA <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        A<span class=\"br0\">(</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span>,<br/>        A<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>,<br/>        A<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span>,<br/>        A<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span>,<br/>        A<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tableB <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        B<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span>,<br/>        B<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span>,<br/>        B<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span>,<br/>        B<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span>,<br/>        B<span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tableC <span class=\"sy0\">=</span> hashJoin<span class=\"br0\">(</span>tableA, tableB<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"A.Age A.Name B.Character B.Nemesis\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"----- ------ ----------- ---------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in tableC<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${c.rowA.age}    ${c.rowA.name.padEnd(6)} \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${c.rowB.character.padEnd(6)}      ${c.rowB.nemesis}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 25, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">hash</span> <span class=\"br0\">(</span>column table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">foldl</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x acc<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>orddict<span class=\"sy0\">:</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>proplists<span class=\"sy0\">:</span><span class=\"me1\">get_value</span> column x<span class=\"br0\">)</span> x acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-<span class=\"kw1\">hash</span> <span class=\"br0\">(</span>col hash-table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>proplists<span class=\"sy0\">:</span><span class=\"me1\">get_value</span><br/>     <span class=\"br0\">(</span>proplists<span class=\"sy0\">:</span><span class=\"me1\">get_value</span> col r<span class=\"br0\">)</span><br/>     hashed<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> merge <span class=\"br0\">(</span>row-<span class=\"nu0\">1</span> row-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>orddict<span class=\"sy0\">:</span><span class=\"me1\">merge</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k v1 v2<span class=\"br0\">)</span> v2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">sort</span> row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">sort</span> row-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> hash-join <span class=\"br0\">(</span>table-<span class=\"nu0\">1</span> col-<span class=\"nu0\">1</span> table-<span class=\"nu0\">2</span> col-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hashed <span class=\"br0\">(</span><span class=\"kw1\">hash</span> col-<span class=\"nu0\">1</span> table-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lc <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- r table-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>lc <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- s <span class=\"br0\">(</span>get-<span class=\"kw1\">hash</span> col-<span class=\"nu0\">2</span> hashed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>merge r s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 80, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module HashJoin {<br/>      \\\\ normally we define variables when we put values to names<br/>      \\\\ so we can remove these two lines<br/>      Def Name$, Nemesis$<br/>      Def Long m, mc, items_size, A<br/>\u00a0<br/>      \\\\ Lets make a container which use keys with hash function<br/>      Inventory A      <br/>      \\\\ A now is a pointer to an Inventory, with Len(A)=0<br/>      \\\\ Print Type$(A)=\"Inventory\"<br/>\u00a0<br/>      \\\\ empty stack. We use current stack to place data<br/>      Flush<br/>      \\Input B<br/>      data \"Jonah\", \"Whales\"<br/>      data \"Jonah\", \"Spiders\"<br/>      data \"Alan\", \"Ghosts\"<br/>      data \"Alan\", \"Zombies\"<br/>      data \"Glory\", \"Buffy\"<br/>      \\\\ Keys are unique, This is the HASH PHASE<br/>      While not empty { <br/>            Read Name$, Nemesis$<br/>            If Exist(A, Name$) Then {<br/>                  m=Eval(A)  ' get a pointer to array<br/>                  Stack m {Data Nemesis$}<br/>            } Else Append A, Name$:=Stack:=Nemesis$  ' a stack object with one item<br/>      }<br/>      \\\\ Input A, this is the Long Table<br/>      data 27, \"Jonah\"<br/>      data 18, \"Alan\"<br/>      data 28, \"Glory\"<br/>      data 18, \"Popeye\"<br/>      data 28, \"Alan\"<br/>\u00a0<br/>      \\\\ This is the JOIN PHASE<br/>\u00a0<br/>      items_size=stack.size/2<br/>      \\\\ using items_size we can append data (using data) to stack<br/>      \\\\ $(0) is the default handler for columns.<br/>      \\\\ Letters justify to left, numbers to right.<br/>      \\\\ Letters can use more columns, and maybe wrap to more lines.<br/>\u00a0<br/>      Print $(0), \"Output during join\"<br/>      Print \"A.Age\", \"A.Name\",\"B.Character\", \"B.Nemesis\"<br/>      While items_size&gt;0 {<br/>            Read Age, Name$<br/>            If exist(A, Name$) Then {<br/>                  m=Eval(A)   ' extract a pointer, this is for a stack object<br/>                  mc=Each(m)  ' make an iterator<br/>                  While mc {<br/>                        \\\\ we use $(1) for left justify numbers too<br/>                        \\\\ normal StackItem$(stackobject) return top only<br/>                        \\\\ we have to use StackItem$(stackobject, 3) to get 3rd<br/>                        \\\\ or StackItem(stackobject, 3) if it is numeric.<br/>                        \\\\ but here mc is iterator, and place the cursor value to it<br/>                       Print $(1), Age, Name$,Name$, StackItem$(mc)<br/>                        \\\\ so now we place at the end of current stack the same output<br/>                       Data Age, Name$,Name$, StackItem$(mc)<br/>                  }   <br/>            } <br/>            items_size--<br/>      }<br/>      \\\\ split rem line after\u00a0: to use second way<br/>      rem\u00a0: goto secondway<br/>      Print $(0), \"Output after join\"<br/>      Print \"A.Age\", \"A.Name\",\"B.Character\", \"B.Nemesis\"<br/>      While not Empty {<br/>            Print $(1), Number, Letter$, Letter$, Letter$<br/>      }<br/>      Exit<br/>secondway:<br/>      Print $(0), \"Output after join using format$()\"<br/>      Print Format$(\"{0:5} {1:10} {2:10} {3:20}\",\"A.Age\", \"A.Name\",\"B.Character\", \"B.Nemesis\")<br/>      While not Empty {<br/>            Print format$(\"{0::5} {1:10} {2:10} {3:20}\", Number, Letter$, Letter$, Letter$)<br/>      }<br/>}<br/>HashJoin<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 10, "block": "<pre class=\"text highlighted_source\">hashJoin[table1_List,table1colindex_Integer,table2_List,table2colindex_Integer]:=Module[{h,f,t1,t2,tmp},<br/>t1=If[table1colindex\u00a0!= 1,table1[[All,Prepend[Delete[<a class=\"__cf_email__\" data-cfemail=\"85d7e4ebe2e0c5c9e0ebe2f1ed\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@table1[[1]],table1colindex],table1colindex]]],table1];<br/>t2=If[table2colindex\u00a0!= 1, table2[[All,Prepend[Delete[<a class=\"__cf_email__\" data-cfemail=\"2270434c4547626e474c45564a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@table2[[1]],table2colindex],table2colindex]]],table2];<br/>\u00a0<br/>If[Length[t1]&gt;Length[t2],tmp=t1;t1=t2;t2=tmp;];<br/>h= GroupBy[t1,First];<br/>f[{a_,b_List}]:={a,#}&amp;/@b;<br/>Partition[Flatten[Map[f,{#[[2;;]],h[#[[1]]]}&amp;/@t2<br/>]],Length[t1[[1]]]+Length[t2[[1]]]-1]<br/>];</pre>"}, {"lang": "Oberon-2", "loc": 96, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> HashJoin;<br/><span class=\"kw1\">IMPORT</span> <br/>  ADT<span class=\"sy0\">:</span>Dictionary<span class=\"sy0\">,</span><br/>  ADT<span class=\"sy0\">:</span>LinkedList<span class=\"sy0\">,</span><br/>  NPCT<span class=\"sy0\">:</span>Tools<span class=\"sy0\">,</span><br/>  Object<span class=\"sy0\">,</span><br/>  Object<span class=\"sy0\">:</span>Boxed<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">TYPE</span><br/>  <span class=\"coMULTI\">(* Some Aliases *)</span><br/>  Age<span class=\"sy0\">=</span> Boxed.<span class=\"me1\">LongInt</span>;<br/>  Name<span class=\"sy0\">=</span> STRING;<br/>  Nemesis<span class=\"sy0\">=</span> STRING;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Generic Tuple *)</span><br/>  Tuple<span class=\"br0\">(</span>E1<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span>; E2<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> TupleDesc<span class=\"br0\">(</span>E1<span class=\"sy0\">,</span>E2<span class=\"br0\">)</span>;<br/>  TupleDesc<span class=\"br0\">(</span>E1<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span>; E2<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>    <span class=\"br0\">(</span>Object.<span class=\"me1\">ObjectDesc</span><span class=\"br0\">)</span><br/>    _1<span class=\"sy0\">:</span> E1;<br/>    _2<span class=\"sy0\">:</span> E2;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Relations *)</span><br/>  RelationA <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">5</span> <span class=\"kw1\">OF</span> Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span>;<br/>  RelationB <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">5</span> <span class=\"kw1\">OF</span> Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  tableA<span class=\"sy0\">:</span> RelationA;<br/>  tableB<span class=\"sy0\">:</span> RelationB;<br/>  dict<span class=\"sy0\">:</span> Dictionary.<span class=\"me1\">Dictionary</span><span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  ll<span class=\"sy0\">:</span> LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>t<span class=\"sy0\">:</span> Tuple<span class=\"br0\">(</span>E1<span class=\"sy0\">,</span> E2<span class=\"br0\">)</span><span class=\"br0\">)</span> INIT<span class=\"sy0\">*</span><span class=\"br0\">(</span>e1<span class=\"sy0\">:</span> E1; e2<span class=\"sy0\">:</span> E2<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    t._1 <span class=\"sy0\">:=</span> e1;<br/>    t._2 <span class=\"sy0\">:=</span> e2;<br/>  <span class=\"kw1\">END</span> INIT;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> DoHashPhase<span class=\"br0\">(</span>t<span class=\"sy0\">:</span> RelationA;<span class=\"kw1\">VAR</span> dict<span class=\"sy0\">:</span> Dictionary.<span class=\"me1\">Dictionary</span><span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    ll<span class=\"sy0\">:</span> LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>dict.<span class=\"me1\">HasKey</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        ll <span class=\"sy0\">:=</span> dict.<span class=\"me1\">Get</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._2<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">ELSE</span><br/>        ll <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        dict.<span class=\"me1\">Set</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._2<span class=\"sy0\">,</span>ll<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span>;<br/>      ll.<span class=\"me1\">Append</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._1<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> DoHashPhase;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> DoJoinPhase<span class=\"br0\">(</span>t<span class=\"sy0\">:</span> RelationB; dict<span class=\"sy0\">:</span> Dictionary.<span class=\"me1\">Dictionary</span><span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    age<span class=\"sy0\">:</span> Age;<br/>    iterll<span class=\"sy0\">:</span> LinkedList.<span class=\"me1\">Iterator</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    ll <span class=\"sy0\">:=</span> dict.<span class=\"me1\">Get</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._1<span class=\"br0\">)</span>;<br/>    iterll <span class=\"sy0\">:=</span> ll.<span class=\"me1\">GetIterator</span><span class=\"br0\">(</span><span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">WHILE</span> iterll.<span class=\"me1\">HasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      age <span class=\"sy0\">:=</span> iterll.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>      Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>age.<span class=\"me1\">value</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>Tools.<span class=\"me1\">AdjustRight</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._1<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;      <br/>      Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>Tools.<span class=\"me1\">AdjustRight</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._2<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> DoJoinPhase;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"coMULTI\">(* tableA initialization *)</span><br/>  tableA<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Age<span class=\"sy0\">,</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span>;<br/>  tableA<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Age<span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>;<br/>  tableA<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Age<span class=\"sy0\">,</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span>;<br/>  tableA<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Age<span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span>;<br/>  tableA<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Age<span class=\"sy0\">,</span>Name<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Age<span class=\"sy0\">,</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* tableB initialization *)</span><br/>  tableB<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span>;<br/>  tableB<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span>;<br/>  tableB<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Ghost\"</span><span class=\"br0\">)</span>;<br/>  tableB<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span>;<br/>  tableB<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Tuple<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>Nemesis<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span>;  <br/>\u00a0<br/>  dict <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Dictionary.<span class=\"me1\">Dictionary</span><span class=\"br0\">(</span>Name<span class=\"sy0\">,</span>LinkedList.<span class=\"me1\">LinkedList</span><span class=\"br0\">(</span>Age<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  DoHashPhase<span class=\"br0\">(</span>tableA<span class=\"sy0\">,</span>dict<span class=\"br0\">)</span>;<br/>  DoJoinPhase<span class=\"br0\">(</span>tableB<span class=\"sy0\">,</span>dict<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> HashJoin.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> hash_join table1 f1 table2 f2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">42</span> <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* hash phase *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h <span class=\"br0\">(</span>f1 s<span class=\"br0\">)</span> s<span class=\"br0\">)</span> table1<span class=\"sy0\">;</span><br/>  <span class=\"co1\">(* join phase *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>concat <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> r <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s <span class=\"sy0\">-&gt;</span> s, r<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_all h <span class=\"br0\">(</span>f2 r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> table2<span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 30, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Data<span class=\"sy0\">::</span><span class=\"me2\">Dumper</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Dumper<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> hashJoin <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$table1</span><span class=\"sy0\">,</span> <span class=\"re0\">$index1</span><span class=\"sy0\">,</span> <span class=\"re0\">$table2</span><span class=\"sy0\">,</span> <span class=\"re0\">$index2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%h</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># hash phase</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"br0\">(</span><span class=\"re0\">@$table1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$h</span><span class=\"br0\">{</span><span class=\"re0\">$s</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$index1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># join phase</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t  <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$h</span><span class=\"br0\">{</span><span class=\"re0\">$r</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$index2</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"re0\">@$table2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">@table1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@table2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$Data</span><span class=\"sy0\">::</span><span class=\"me2\">Dumper</span><span class=\"sy0\">::</span><span class=\"me2\">Indent</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"br0\">(</span>hashJoin<span class=\"br0\">(</span><span class=\"re0\">\\@table1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@table2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> Dumper<span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 27, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> hash<span class=\"sy0\">-</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%hash</span> <span class=\"sy0\">:=</span> <span class=\"re0\">@b</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"re0\">&amp;b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@a</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">%hash</span><span class=\"br0\">{</span>a <span class=\"re0\">$a</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@A</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@B</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> hash<span class=\"sy0\">-</span><span class=\"kw3\">join</span> <span class=\"re0\">@A</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@B</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 34, "block": "<pre class=\"text highlighted_source\">constant A = {{27,\"Jonah\"},<br/>              {18,\"Alan\"},<br/>              {28,\"Glory\"},<br/>              {18,\"Popeye\"},<br/>              {28,\"Alan\"}},<br/>         B = {{\"Jonah\",\"Whales\"},<br/>              {\"Jonah\",\"Spiders\"},<br/>              {\"Alan\", \"Ghosts\"},<br/>              {\"Alan\", \"Zombies\"},<br/>              {\"Glory\",\"Buffy\"}},<br/>        jA = 2,<br/>        jB = 1,<br/>        MB = new_dict()<br/>sequence C = {}<br/>for i=1 to length(B) do<br/>    object key = B[i][jB]<br/>    object data = getd(key,MB)<br/>    if data=0 then<br/>        data = {B[i]}<br/>    else<br/>        data = append(data,B[i])<br/>    end if<br/>    putd(key,data,MB)<br/>end for<br/>for i=1 to length(A) do<br/>    object data = getd(A[i][jA],MB)<br/>    if sequence(data) then<br/>        for j=1 to length(data) do<br/>            C = append(C,{A[i],data[j]})<br/>        end for<br/>    end if<br/>end for<br/>destroy_dict(MB)<br/>pp(C,{pp_Nest,1})</pre>"}, {"lang": "PHP", "loc": 27, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> hashJoin<span class=\"br0\">(</span><span class=\"re0\">$table1</span><span class=\"sy0\">,</span> <span class=\"re0\">$index1</span><span class=\"sy0\">,</span> <span class=\"re0\">$table2</span><span class=\"sy0\">,</span> <span class=\"re0\">$index2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// hash phase</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$table1</span> <span class=\"kw1\">as</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$h</span><span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$index1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// join phase</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$table2</span> <span class=\"kw1\">as</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span><br/>    \t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"re0\">$index2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><br/>\t    <span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$table1</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$table2</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>           <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>hashJoin<span class=\"br0\">(</span><span class=\"re0\">$table1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$table2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$row</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 24, "block": "<pre class=\"text highlighted_source\">(de A<br/>   (27 . Jonah)<br/>   (18 . Alan)<br/>   (28 . Glory)<br/>   (18 . Popeye)<br/>   (28 . Alan) )<br/>\u00a0<br/>(de B<br/>   (Jonah . Whales)<br/>   (Jonah . Spiders)<br/>   (Alan . Ghosts)<br/>   (Alan . Zombies)<br/>   (Glory . Buffy) )<br/>\u00a0<br/>(for X B<br/>   (let K (cons (char (hash (car X))) (car X))<br/>      (if (idx 'M K T)<br/>         (push (caar @) (cdr X))<br/>         (set (car K) (list (cdr X))) ) ) )<br/>\u00a0<br/>(for X A<br/>   (let? Y (car (idx 'M (cons (char (hash (cdr X))) (cdr X))))<br/>      (for Z (caar Y)<br/>         (println (car X) (cdr X) (cdr Y) Z) ) ) )</pre>"}, {"lang": "Plain TeX", "loc": 20, "block": "<pre class=\"text highlighted_source\">\\newtoks\\tabjoin<br/>\\def\\quark{\\quark}<br/>\\def\\tabA{27:Jonah,18:Alan,28:Glory,18:Popeye,28:Alan}<br/>\\def\\tabB{Jonah:Whales,Jonah:Spiders,Alan:Ghosts,Alan:Zombies,Glory:Buffy}<br/>\\def\\mergejoin{\\tabjoin{}\\expandafter\\mergejoini\\tabA,\\quark:\\quark,}<br/>\\def\\mergejoini#1:#2,{%<br/>\t\\ifx\\quark#1\\the\\tabjoin<br/>\t\\else<br/>\t\t\\def\\mergejoinii##1,#2:##2,{%<br/>\t\t\t\\ifx\\quark##2\\else<br/>\t\t\t\t\\tabjoin\\expandafter{\\the\\tabjoin#1\u00a0: #2\u00a0: ##2\\par}%<br/>\t\t\t\t\\expandafter\\mergejoinii\\expandafter,%<br/>\t\t\t\\fi<br/>\t\t}%<br/>\t\t\\expandafter\\mergejoinii\\expandafter,\\tabB,#2:\\quark,%<br/>\t\t\\expandafter\\mergejoini<br/>\t\\fi<br/>}<br/>\\mergejoin<br/>\\bye</pre>"}, {"lang": "PureBasic", "loc": 47, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> tabA<br/>  age.i<br/>  name.s  <br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> tabB<br/>  char_name.s<br/>  nemesis.s<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> listA.tabA<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NewList</span> listB.tabB<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> SetListA<span class=\"br0\">(</span>c_age, c_name<span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>age <span class=\"sy0\">=</span> c_age\u00a0: listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name <span class=\"sy0\">=</span> c_name  <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> SetListB<span class=\"br0\">(</span>c_char, c_nem<span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>char_name <span class=\"sy0\">=</span> c_char\u00a0: listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>nemesis <span class=\"sy0\">=</span> c_nem<br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/>SetListA<span class=\"br0\">(</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span>  \u00a0: SetListA<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>\u00a0: SetListA<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span><br/>SetListA<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span> \u00a0: SetListA<span class=\"br0\">(</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>SetListB<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span>\u00a0: SetListB<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span><br/>SetListB<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span> \u00a0: SetListB<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span><br/>SetListB<span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Hash_join\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> listA<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Input A = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>age<span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span>listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> listB<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Input B = \"</span><span class=\"sy0\">+</span>listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>char_name<span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span>listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>nemesis<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nOutput\\nA.Age\\tA.Name\\tB.Char.\\tB.Nemesis\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> listA<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ForEach</span> listB<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name <span class=\"sy0\">=</span> listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>char_name<br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>age<span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span>listA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>name<span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span><br/>               listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>char_name<span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span>listB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>nemesis<span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 23, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/><span class=\"kw1\">def</span> hashJoin<span class=\"br0\">(</span>table1<span class=\"sy0\">,</span> index1<span class=\"sy0\">,</span> table2<span class=\"sy0\">,</span> index2<span class=\"br0\">)</span>:<br/>    h <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># hash phase</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> table1:<br/>        h<span class=\"br0\">[</span>s<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"co1\"># join phase</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> table2 <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> h<span class=\"br0\">[</span>r<span class=\"br0\">[</span>index2<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>table1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>table2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> hashJoin<span class=\"br0\">(</span>table1<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> table2<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 29, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(struct A  (age name))<br/>(struct B  (name nemesis))<br/>(struct AB (name age nemesis) #:transparent)<br/>\u00a0<br/>(define Ages-table<br/>  (list (A 27 \"Jonah\") (A 18 \"Alan\")<br/>        (A 28 \"Glory\") (A 18 \"Popeye\")<br/>        (A 28 \"Alan\")))<br/>\u00a0<br/>(define Nemeses-table<br/>  (list<br/>   (B \"Jonah\" \"Whales\") (B \"Jonah\" \"Spiders\")<br/>   (B \"Alan\" \"Ghosts\") (B \"Alan\" \"Zombies\")<br/>   (B \"Glory\" \"Buffy\")))<br/>\u00a0<br/>;; Hash phase<br/>(define name-&gt;ages#<br/>  (for/fold ((rv (hash)))<br/>    ((a (in-list Ages-table)))<br/>    (match-define (A age name) a)<br/>    (hash-update rv name (\u03bb (ages) (append ages (list age))) null)))<br/>\u00a0<br/>;; Join phase     <br/>(for*/list<br/>    ((b (in-list Nemeses-table))<br/>     (key (in-value (B-name b)))<br/>     (age (in-list (hash-ref name-&gt;ages# key))))<br/>  (AB key age (B-nemesis b)))</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates the  classic hash join algorithm  for two relations.        */</span><br/>                     S<span class=\"sy0\">.</span>  =                  \u00a0;         R<span class=\"sy0\">.</span>  =<br/>                     S<span class=\"sy0\">.</span>1 = <span class=\"nu0\">27</span> <span class=\"st0\">'Jonah'</span>       \u00a0;         R<span class=\"sy0\">.</span>1 = <span class=\"st0\">\"Jonah Whales\"</span><br/>                     S<span class=\"sy0\">.</span>2 = <span class=\"nu0\">18</span> <span class=\"st0\">'Alan'</span>        \u00a0;         R<span class=\"sy0\">.</span>2 = <span class=\"st0\">\"Jonah Spiders\"</span><br/>                     S<span class=\"sy0\">.</span>3 = <span class=\"nu0\">28</span> <span class=\"st0\">'Glory'</span>       \u00a0;         R<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"Alan Ghosts\"</span><br/>                     S<span class=\"sy0\">.</span>4 = <span class=\"nu0\">18</span> <span class=\"st0\">'Popeye'</span>      \u00a0;         R<span class=\"sy0\">.</span>4 = <span class=\"st0\">\"Alan Zombies\"</span><br/>                     S<span class=\"sy0\">.</span>5 = <span class=\"nu0\">28</span> <span class=\"st0\">'Alan'</span>        \u00a0;         R<span class=\"sy0\">.</span>5 = <span class=\"st0\">\"Glory Buffy\"</span><br/>hash<span class=\"sy0\">.</span>=                                           <span class=\"coMULTI\">/*initialize the  hash  table (array). */</span><br/>      <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> S<span class=\"sy0\">.</span>#<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  S<span class=\"sy0\">.</span>#  age  <span class=\"kw2\">name</span>          <span class=\"coMULTI\">/*extract information*/</span><br/>      hash<span class=\"sy0\">.</span><span class=\"kw2\">name</span>=hash<span class=\"sy0\">.</span><span class=\"kw2\">name</span> #                      <span class=\"coMULTI\">/*build a hash table entry with its idx*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span>                                <span class=\"coMULTI\">/* [\u2191]  REXX does the heavy work here. */</span><br/>#=#-<span class=\"nu0\">1</span>                                            <span class=\"coMULTI\">/*adjust for the DO loop  (#)  overage.*/</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> R<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>                     <span class=\"coMULTI\">/*process a nemesis for a name element.*/</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  R<span class=\"sy0\">.</span>j  x  nemesis                 <span class=\"coMULTI\">/*extract the name  and  its nemesis.  */</span><br/>      <span class=\"kw1\">if</span> hash<span class=\"sy0\">.</span>x==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   #=# + <span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*Not in hash?  Then a new name; bump #*/</span><br/>                                S<span class=\"sy0\">.</span>#=<span class=\"st0\">','</span>  x       <span class=\"coMULTI\">/*add a new name to the    S   table.  */</span><br/>                                hash<span class=\"sy0\">.</span>x=#         <span class=\"coMULTI\">/* \"  \"  \"    \"   \"  \"   hash    \"     */</span><br/>                          <span class=\"kw3\">end</span>                    <span class=\"coMULTI\">/* [\u2191]  this  DO  isn't used today.    */</span><br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>hash<span class=\"sy0\">.</span>x<span class=\"br0\">)</span>;   _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>hash<span class=\"sy0\">.</span>x, k<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*obtain the pointer.*/</span><br/>           S<span class=\"sy0\">.</span>_=S<span class=\"sy0\">.</span>_  nemesis                      <span class=\"coMULTI\">/*add the nemesis \u2500\u2500\u25ba applicable hash. */</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*j*/</span><br/>_=<span class=\"st0\">'\u2500'</span>                                            <span class=\"coMULTI\">/*the character used for the separator.*/</span><br/>pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*spacing used in header and the output*/</span><br/><span class=\"kw1\">say</span>  pad  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'age'</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>   pad   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"name\"</span>, <span class=\"nu0\">20</span>   <span class=\"br0\">)</span>   pad    <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'nemesis'</span>, <span class=\"nu0\">30</span>   <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span>  pad  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500\u2500\u2500'</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>   pad   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>    , <span class=\"nu0\">20</span>, _<span class=\"br0\">)</span>   pad    <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">''</span>       , <span class=\"nu0\">30</span>, _<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;      <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  S<span class=\"sy0\">.</span>n    age  <span class=\"kw2\">name</span>  nems       <span class=\"coMULTI\">/*obtain information.*/</span><br/>      <span class=\"kw1\">if</span> nems==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                                    <span class=\"coMULTI\">/*No nemesis?  Skip. */</span><br/>      <span class=\"kw1\">say</span> pad <span class=\"kw6\">right</span><span class=\"br0\">(</span>age,<span class=\"nu0\">3</span><span class=\"br0\">)</span> pad <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"kw2\">name</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span> pad <span class=\"kw6\">center</span><span class=\"br0\">(</span>nems,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*display an  \"S\".   */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>                                <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 42, "block": "<pre class=\"text highlighted_source\">Table1 = [[27, \"Jonah\"], [18, \"Alan\"], [28, \"Glory\"], [18, \"Popeye\"], [28, \"Alan\"]]<br/>Table2 = [[\"Jonah\", \"Whales\"], [\"Jonah\", \"Spiders\"], [\"Alan\", \"Ghosts\"], [\"Alan\", \"Zombies\"], [\"Glory\", \"Buffy\"]]<br/>hTable = []<br/>Qtable = []<br/>\u00a0<br/>for a in table1<br/>\th = hashing(a[2])<br/>\tadd(htable,[h , a])<br/>next<br/>\u00a0<br/>for b in table2<br/>\th = hashing(b[1])<br/>\tfor sh in htable<br/>\t\tif sh[1] = h <br/>\t\t\t add(qtable, sh[2] + b[2])  <br/>\t\tok<br/>\tnext<br/>next<br/>\u00a0<br/>print(qtable)<br/>\u00a0<br/>#===============End of Execution=========<br/>\u00a0<br/>func print lst<br/>see \"---------------------------------------------------<br/>Age\t| Name\t\t|| Name\t\t| Nemesis<br/>---------------------------------------------------<br/>\"<br/>for l in lst<br/>\tsee string(l[1]) + char(9) + \"| \" + l[2] + copy(char(9),2) + \"|| \" + l[2] + \"    \" + char(9) +  \"| \" + l[3] + nl <br/>next <br/>\u00a0<br/>func Hashing str<br/>r = 0<br/>if len(str) &gt; 4<br/>\tr = (ascii(str[1]) + ascii(str[len(str)]) + ascii(str[ceil(len(str) * 0.25)]) + ascii(str[ceil(len(str) * 0.75)])) <br/>else<br/>\tfor s in str <br/>\t\tr += ascii(s) <br/>\tnext<br/>ok<br/>return r</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> hashJoin<span class=\"br0\">(</span>table1, index1, table2, index2<span class=\"br0\">)</span><br/>  <span class=\"co1\"># hash phase</span><br/>  h = table1.<span class=\"me1\">group_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> s<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  h.<span class=\"me1\">default</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"co1\"># join phase</span><br/>  table2.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>    h<span class=\"br0\">[</span>r<span class=\"br0\">[</span>index2<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> <span class=\"br0\">[</span>s, r<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span>.<span class=\"me1\">flatten</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>table1 = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>table2 = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>hashJoin<span class=\"br0\">(</span>table1, <span class=\"nu0\">1</span>, table2, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">p</span> row <span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"<br/>\u00a0<br/>#mem execute(\"CREATE TABLE t_age(age,name)\")<br/>#mem execute(\"CREATE TABLE t_name(name,nemesis)\")<br/>\u00a0<br/>#mem execute(\"INSERT INTO t_age VALUES(27,'Jonah')\")<br/>#mem execute(\"INSERT INTO t_age VALUES(18,'Alan')\")<br/>#mem execute(\"INSERT INTO t_age VALUES(28,'Glory')\")<br/>#mem execute(\"INSERT INTO t_age VALUES(18,'Popeye')\")<br/>#mem execute(\"INSERT INTO t_age VALUES(28,'Alan')\")<br/>\u00a0<br/>#mem execute(\"INSERT INTO t_name VALUES('Jonah','Whales')\")<br/>#mem execute(\"INSERT INTO t_name VALUES('Jonah','Spiders')\")<br/>#mem execute(\"INSERT INTO t_name VALUES('Alan','Ghosts')\")<br/>#mem execute(\"INSERT INTO t_name VALUES('Alan','Zombies')\")<br/>#mem execute(\"INSERT INTO t_name VALUES('Glory','Buffy')\")<br/>\u00a0<br/>#mem execute(\"SELECT *,t_age.name FROM t_age LEFT JOIN t_name ON t_name.name = t_age.name\")<br/>WHILE  #mem hasanswer()<br/>\t#row\t\t= #mem #nextrow()<br/>\tage\t\t= #row age()<br/>\tname$\t\t= #row name$()<br/>\tnemesis$\t= #row nemesis$()<br/>print age;\" \";name$;\" \";nemesis$<br/>WEND</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">use std::collections::HashMap;<br/>use std::hash::Hash;<br/>\u00a0<br/>// If you know one of the tables is smaller, it is best to make it the second parameter.<br/>fn hash_join&lt;A, B, K&gt;(first: &amp;[(K, A)], second: &amp;[(K, B)]) -&gt; Vec&lt;(A, K, B)&gt;<br/>where<br/>    K: Hash + Eq + Copy,<br/>    A: Copy,<br/>    B: Copy,<br/>{<br/>    let mut hash_map = HashMap::new();<br/>\u00a0<br/>    // hash phase<br/>    for &amp;(key, val_a) in second {<br/>        // collect all values by their keys, appending new ones to each existing entry<br/>        hash_map.entry(key).or_insert_with(Vec::new).push(val_a);<br/>    }<br/>\u00a0<br/>    let mut result = Vec::new();<br/>    // join phase<br/>    for &amp;(key, val_b) in first {<br/>        if let Some(vals) = hash_map.get(&amp;key) {<br/>            let tuples = vals.iter().map(|&amp;val_a| (val_b, key, val_a));<br/>            result.extend(tuples);<br/>        }<br/>    }<br/>\u00a0<br/>    result<br/>}<br/>\u00a0<br/>fn main() {<br/>    let table1 = [(\"Jonah\", 27), (\"Alan\", 18), (\"Glory\", 28), (\"Popeye\", 18), (\"Alan\", 28)];<br/>    let table2 = [<br/>        (\"Jonah\", \"Whales\"), (\"Jonah\", \"Spiders\"), (\"Alan\", \"Ghosts\"),<br/>        (\"Alan\", \"Zombies\"), (\"Glory\", \"Buffy\")<br/>    ];<br/>    let result = hash_join(&amp;table1, &amp;table2);<br/>    println!(\"Age | Character Name | Nemesis\");<br/>    println!(\"----|----------------|--------\");<br/>    for (age, name, nemesis) in result {<br/>        println!(\"{:&lt;3} | {:^14} | {}\", age, name, nemesis);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> join<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">(</span>left<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Seq<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">]</span>, right<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Seq<span class=\"br0\">[</span>Type<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hash <span class=\"sy0\">=</span> right.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">head</span><span class=\"br0\">)</span> withDefaultValue Seq<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    left.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>cols <span class=\"sy0\">=&gt;</span> hash<span class=\"br0\">(</span>cols.<span class=\"me1\">last</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>cols ++ <span class=\"sy0\">_</span>.<span class=\"me1\">tail</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Example:</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> table1 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"st0\">\"27\"</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"18\"</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"28\"</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> table2 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">)</span>,<br/>                  List<span class=\"br0\">(</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>join<span class=\"br0\">(</span>table1, table2<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use srfi<span class=\"sy0\">-</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> ages '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">27</span> Jonah<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> Alan<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> Glory<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span> Popeye<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span> Alan<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> nemeses '<span class=\"br0\">(</span><span class=\"br0\">(</span>Jonah Whales<span class=\"br0\">)</span> <span class=\"br0\">(</span>Jonah Spiders<span class=\"br0\">)</span> <span class=\"br0\">(</span>Alan Ghosts<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>Alan Zombies<span class=\"br0\">)</span> <span class=\"br0\">(</span>Glory Buffy<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>unknown nothing<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> hash <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"sy0\">-</span>table '<span class=\"kw1\">equal?</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>dolist <span class=\"br0\">(</span>item ages<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>push<span class=\"sy0\">!</span> hash <span class=\"br0\">(</span>last item<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> item<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>do<span class=\"sy0\">-</span>ec<br/>  <span class=\"br0\">(</span>: person nemeses<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">let</span> name <span class=\"br0\">(</span><span class=\"kw1\">car</span> person<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>exists? hash name<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>: age <span class=\"br0\">(</span>~ hash name<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> age name<span class=\"br0\">)</span><br/>               person<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 30, "block": "<pre class=\"ruby highlighted_source\">func hashJoin<span class=\"br0\">(</span>table1, index1, table2, index2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var a = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var h = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># hash phase</span><br/>    table1.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>        h<span class=\"br0\">{</span>s<span class=\"br0\">[</span>index1<span class=\"br0\">]</span><span class=\"br0\">}</span>\u00a0:= <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> s<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># join phase</span><br/>    table2.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>        a <span class=\"sy0\">+</span>= h<span class=\"br0\">{</span>r<span class=\"br0\">[</span>index2<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"br0\">[</span>_,r<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> a<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var t1  = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">27</span>, <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Glory\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"nu0\">18</span>, <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"nu0\">28</span>, <span class=\"st0\">\"Alan\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>var t2  = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Whales\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Jonah\"</span>, <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Alan\"</span>, <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">]</span>,<br/>           <span class=\"br0\">[</span><span class=\"st0\">\"Glory\"</span>, <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>hashJoin<span class=\"br0\">(</span>t1, <span class=\"nu0\">1</span>, t2, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "SQL", "loc": 13, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> people <span class=\"br0\">(</span>age <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> name <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> people <span class=\"br0\">(</span>age<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"st0\">'Jonah'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> people <span class=\"br0\">(</span>age<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">'Alan'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> people <span class=\"br0\">(</span>age<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">'Glory'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> people <span class=\"br0\">(</span>age<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"st0\">'Popeye'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> people <span class=\"br0\">(</span>age<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"st0\">'Alan'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> nemesises <span class=\"br0\">(</span>name <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> nemesis <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> nemesises <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> nemesis<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'Jonah'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Whales'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> nemesises <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> nemesis<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'Jonah'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Spiders'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> nemesises <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> nemesis<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'Alan'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Ghosts'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> nemesises <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> nemesis<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'Alan'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Zombies'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> nemesises <span class=\"br0\">(</span>name<span class=\"sy0\">,</span> nemesis<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'Glory'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Buffy'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 39, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"co1\"># Only for lmap, which can be replaced with foreach</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> joinTables <span class=\"br0\">{</span>tableA a tableB b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Optimisation: if the first table is longer, do in reverse order</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$tableB</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$tableA</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>lmap pair <span class=\"br0\">[</span>joinTables <span class=\"re0\">$tableB</span> <span class=\"re0\">$b</span> <span class=\"re0\">$tableA</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    lreverse <span class=\"re0\">$pair</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> value <span class=\"re0\">$tableA</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> hashmap<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$value</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$value</span> <span class=\"re0\">$a</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>\t<span class=\"co1\">#dict version# dict lappend hashmap [lindex $value $a] [lreplace $value $a $a]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> value <span class=\"re0\">$tableB</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> key <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$value</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists hashmap<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"co1\">#dict version# if {![dict exists $hashmap $key]} continue</span><br/>\t<span class=\"kw1\">foreach</span> first <span class=\"re0\">$hashmap</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\">#dict version# foreach first [dict get $hashmap $key]</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$first</span> <span class=\"re0\">$key</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$value</span> <span class=\"re0\">$b</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> tableA <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">27</span> <span class=\"st0\">\"Jonah\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Glory\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">18</span> <span class=\"st0\">\"Popeye\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">28</span> <span class=\"st0\">\"Alan\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> tableB <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Whales\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"Jonah\"</span> <span class=\"st0\">\"Spiders\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Ghosts\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"st0\">\"Alan\"</span> <span class=\"st0\">\"Zombies\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Glory\"</span> <span class=\"st0\">\"Buffy\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> joined <span class=\"br0\">[</span>joinTables <span class=\"re0\">$tableA</span> <span class=\"nu0\">1</span> <span class=\"re0\">$tableB</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> row <span class=\"re0\">$joined</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$row</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 19, "block": "<pre class=\"text highlighted_source\">(defvar age-name '((27 Jonah)<br/>                   (18 Alan)<br/>                   (28 Glory)<br/>                   (18 Popeye)<br/>                   (28 Alan)))<br/>\u00a0<br/>(defvar nemesis-name '((Jonah Whales)<br/>                       (Jonah Spiders)<br/>                       (Alan Ghosts)<br/>                       (Alan Zombies)<br/>                       (Glory Buffy)))<br/>\u00a0<br/>(defun hash-join (left left-key right right-key)<br/>  (let ((join-hash [group-by left-key left]))\u00a0;; hash phase<br/>    (append-each ((r-entry right))           \u00a0;; join phase<br/>      (collect-each ((l-entry [join-hash [right-key r-entry]]))<br/>        ^(,l-entry ,r-entry)))))<br/>\u00a0<br/>(format t \"~s\\n\" [hash-join age-name second nemesis-name first])</pre>"}, {"lang": "VBScript", "loc": 32, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Dim</span> t_age(4,1)<br/>t_age(0,0) = 27\u00a0: t_age(0,1) = <span class=\"st0\">\"Jonah\"</span><br/>t_age(1,0) = 18\u00a0: t_age(1,1) = <span class=\"st0\">\"Alan\"</span><br/>t_age(2,0) = 28\u00a0: t_age(2,1) = <span class=\"st0\">\"Glory\"</span><br/>t_age(3,0) = 18\u00a0: t_age(3,1) = <span class=\"st0\">\"Popeye\"</span><br/>t_age(4,0) = 28\u00a0: t_age(4,1) = <span class=\"st0\">\"Alan\"</span><br/>\u00a0<br/><span class=\"kw4\">Dim</span> t_nemesis(4,1)<br/>t_nemesis(0,0) = <span class=\"st0\">\"Jonah\"</span>\u00a0: t_nemesis(0,1) = <span class=\"st0\">\"Whales\"</span><br/>t_nemesis(1,0) = <span class=\"st0\">\"Jonah\"</span>\u00a0: t_nemesis(1,1) = <span class=\"st0\">\"Spiders\"</span><br/>t_nemesis(2,0) = <span class=\"st0\">\"Alan\"</span>\u00a0: t_nemesis(2,1) = <span class=\"st0\">\"Ghosts\"</span><br/>t_nemesis(3,0) = <span class=\"st0\">\"Alan\"</span>\u00a0: t_nemesis(3,1) = <span class=\"st0\">\"Zombies\"</span><br/>t_nemesis(4,0) = <span class=\"st0\">\"Glory\"</span>\u00a0: t_nemesis(4,1) = <span class=\"st0\">\"Buffy\"</span><br/>\u00a0<br/><span class=\"kw2\">Call</span> hash_join(t_age,1,t_nemesis,0)<br/>\u00a0<br/><span class=\"kw2\">Sub</span> hash_join(table_1,index_1,table_2,index_2)<br/>\t<span class=\"kw4\">Set</span> hash = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(table_1)<br/>\t\thash.Add i,Array(table_1(i,0),table_1(i,1))<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(table_2)<br/>\t\t<span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> key <span class=\"kw3\">In</span> hash.Keys<br/>\t\t\t<span class=\"kw3\">If</span> hash(key)(index_1) = table_2(j,index_2) <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.WriteLine hash(key)(0) &amp; <span class=\"st0\">\",\"</span> &amp; hash(key)(1) &amp;_<br/>\t\t\t\t\t<span class=\"st0\">\" = \"</span> &amp; table_2(j,0) &amp; <span class=\"st0\">\",\"</span> &amp; table_2(j,1)<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL i As Integer, n As Integer<br/>CLOSE DATABASES ALL<br/>*!* Create and populate the hash tables<br/>CREATE CURSOR people_ids(id I, used L DEFAULT .F.)<br/>INDEX ON id TAG id COLLATE \"Machine\"<br/>INDEX ON used TAG used BINARY COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>CREATE CURSOR nem_ids(id I, used L DEFAULT .F.)<br/>INDEX ON id TAG id COLLATE \"Machine\"<br/>INDEX ON used TAG used BINARY COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>n = 100<br/>FOR i = 1 TO n<br/>    INSERT INTO people_ids (id) VALUES (i)<br/>    INSERT INTO nem_ids (id) VALUES (i)<br/>ENDFOR\t<br/>\u00a0<br/>CREATE CURSOR people (age I, name V(16), id I)<br/>INDEX ON id TAG id COLLATE \"Machine\"<br/>INDEX ON name TAG name COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>INSERT INTO people (age, name) VALUES (27, \"Jonah\")<br/>INSERT INTO people (age, name) VALUES (18, \"Alan\")<br/>INSERT INTO people (age, name) VALUES (28, \"Glory\")<br/>INSERT INTO people (age, name) VALUES (18, \"Popeye\")<br/>INSERT INTO people (age, name) VALUES (28, \"Alan\")<br/>REPLACE id WITH HashMe(\"people_ids\") ALL<br/>\u00a0<br/>*!* The plural of nemesis is nemeses<br/>CREATE CURSOR nemeses (name V(16), nemesis V(16), p_id I, id I)<br/>INDEX ON id TAG id COLLATE \"Machine\"<br/>INDEX ON p_id TAG p_id COLLATE \"Machine\"<br/>INDEX ON name TAG name COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>\u00a0<br/>INSERT INTO nemeses (name, nemesis) VALUES (\"Jonah\", \"Whales\")<br/>INSERT INTO nemeses (name, nemesis) VALUES (\"Jonah\", \"Spiders\")<br/>INSERT INTO nemeses (name, nemesis) VALUES (\"Alan\", \"Ghosts\")<br/>INSERT INTO nemeses (name, nemesis) VALUES (\"Alan\", \"Zombies\")<br/>INSERT INTO nemeses (name, nemesis) VALUES (\"Glory\", \"Buffy\")<br/>REPLACE id WITH HashMe(\"nem_ids\") ALL <br/>UPDATE nemeses SET p_id = people.id FROM people\u00a0;<br/>WHERE nemeses.name = people.name<br/>\u00a0<br/>*!* Show the join<br/>SELECT pe.age, pe.name, ne.nemesis FROM people pe\u00a0;<br/>JOIN nemeses ne ON pe.id = ne.p_id TO FILE \"hashjoin.txt\"<br/>\u00a0<br/>FUNCTION HashMe(cTable As String) As Integer<br/>LOCAL ARRAY a[1]<br/>SELECT MIN(id) FROM (cTable) WHERE NOT used INTO ARRAY a<br/>UPDATE (cTable) SET used = .T. WHERE id = a[1]<br/>RETURN a[1]<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">ageName:=T(27,\"Jonah\", 18,\"Alan\", 28,\"Glory\", 18,\"Popeye\", 28,\"Alan\");<br/>nameNemesis:=T(\"Jonah\",\"Whales\", \"Jonah\",\"Spiders\", \"Alan\",\"Ghosts\", <br/>      \"Alan\",\"Zombies\", \"Glory\",\"Buffy\");<br/>\u00a0<br/>fcn addAN(age,name,d){  // keys are names, values are ( (age,...),() )<br/>   if (r:=d.find(name)) d[name] = T(r[0].append(age),r[1]);<br/>   else d.add(name,T(T(age),T));<br/>   d\t// return d so pump will use that as result for assignment<br/>}<br/>fcn addNN(name,nemesis,d){ // values--&gt;( (age,age...), (nemesis,...) )<br/>   if (r:=d.find(name)){<br/>      ages,nemesises\u00a0:= r;<br/>      d[name] = T(ages,nemesises.append(nemesis));<br/>   }<br/>}<br/>    // Void.Read --&gt; take existing i, read next one, pass both to next function<br/>var d=ageName.pump(Void,Void.Read,T(addAN,Dictionary()));<br/>nameNemesis.pump(Void,Void.Read,T(addNN,d));<br/>\u00a0<br/>d.println();  // the union of the two tables<br/>d.keys.sort().pump(Console.println,'wrap(name){  //pretty print the join<br/>   val:=d[name]; if (not val[1])return(Void.Skip);<br/>   String(name,\":\",d[name][1].concat(\",\"));<br/>})</pre>"}]}