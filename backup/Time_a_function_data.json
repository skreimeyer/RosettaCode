{"task": "Time_a_function", "blocks": [{"lang": "8051 Assembly", "loc": 106, "block": "<pre class=\"asm highlighted_source\">TC\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">8</span> <span class=\"co1\">; number of counter registers</span><br/>TSTART\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">08h</span> <span class=\"co1\">; first register of timer counter</span><br/>TEND\t<span class=\"kw5\">EQU</span>\tTSTART <span class=\"sy1\">+</span> TC <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"co1\">; end register of timer counter</span><br/><span class=\"co1\">; Note: The multi-byte value is stored in Big-endian</span><br/>\u00a0<br/><span class=\"co1\">; Some timer reloads</span><br/>_6H\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">085h</span> <span class=\"co1\">; 6MHz</span><br/>_6L\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">0edh</span><br/>_12H\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">00bh</span> <span class=\"co1\">; 12MHz</span><br/>_12L\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">0dbh</span><br/>_110592H\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">01eh</span> <span class=\"co1\">; 11.0592MHz</span><br/>_110592L\t<span class=\"kw5\">EQU</span>\t<span class=\"nu0\">0ffh</span><br/>\u00a0<br/><span class=\"co1\">; How to calculate timer reload (e.g. for 11.0592MHz):</span><br/><span class=\"co1\">; Note: 1 machine cycle takes 12 oscillator periods</span><br/><span class=\"co1\">; 11.0592MHz / 12 * 0.0625 seconds = 57,600 cycles = e100h</span><br/><span class=\"co1\">; ffffh - e100h = NOT e100h = 1effh</span><br/>\u00a0<br/><span class=\"co1\">; assuming a 11.0592MHz crystal</span><br/>TIMERH\t<span class=\"kw5\">EQU</span>\t_110592H<br/>TIMERL\t<span class=\"kw5\">EQU</span>\t_110592L<br/>\u00a0<br/><span class=\"co1\">;; some timer macros (using timer0)</span><br/>start_timer macro<br/>\t<span class=\"kw1\">setb</span> tr0<br/>endm<br/>stop_timer macro<br/>\tclr tr0<br/>endm<br/>reset_timer macro<br/>\t<span class=\"kw1\">mov</span> tl0<span class=\"sy1\">,</span> #TIMERL<br/>\t<span class=\"kw1\">mov</span> th0<span class=\"sy1\">,</span> #TIMERH<br/>endm<br/>\u00a0<br/>increment_counter macro <span class=\"co1\">;; increment counter (multi-byte increment)</span><br/>\t<span class=\"kw1\">push</span> psw<br/>\t<span class=\"kw1\">push</span> acc<br/>\t<span class=\"kw1\">push</span> <span class=\"nu0\">0</span> <span class=\"co1\">; r0</span><br/>\t<span class=\"kw1\">mov</span> r0<span class=\"sy1\">,</span> #TEND<span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">setb</span> c<br/>inc_reg<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">dec</span> r0<br/>\tclr a<br/>\taddc a<span class=\"sy1\">,</span> @r0<br/>\t<span class=\"kw1\">mov</span> @r0<span class=\"sy1\">,</span> a<br/>\t<span class=\"kw1\">jnc</span> inc_reg_\t<span class=\"co1\">; end prematurally if the higher bytes are unchanged</span><br/>\tcjne r0<span class=\"sy1\">,</span> #TSTART<span class=\"sy1\">,</span> inc_reg<br/>inc_reg_<span class=\"sy1\">:</span><br/>\t<span class=\"co1\">; if the carry is set here then the multi byte value has overflowed</span><br/>\t<span class=\"kw1\">pop</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">pop</span> acc<br/>\t<span class=\"kw1\">pop</span> psw<br/>endm\t<br/>\u00a0<br/>ORG RESET<br/>\t<span class=\"kw1\">jmp</span> init<br/>ORG TIMER0<br/>\t<span class=\"kw1\">jmp</span> timer_0<br/>\u00a0<br/>timer_0<span class=\"sy1\">:</span> <span class=\"co1\">; interrupt every 6.25ms</span><br/>\tstop_timer\t\t<span class=\"co1\">; we only want to time the function</span><br/>\treset_timer<br/>\tincrement_counter<br/>\tstart_timer<br/>\treti<br/>\u00a0<br/>init<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">sp</span><span class=\"sy1\">,</span> #TEND<br/>\t<span class=\"kw1\">setb</span> ea\t\t\t<span class=\"co1\">; enable interrupts</span><br/>\t<span class=\"kw1\">setb</span> et0\t\t<span class=\"co1\">; enable timer0 interrupt</span><br/>\t<span class=\"kw1\">mov</span> tmod<span class=\"sy1\">,</span> #<span class=\"nu0\">01h</span>\t\t<span class=\"co1\">; timer0 16-bit mode</span><br/>\treset_timer<br/>\u00a0<br/>\t<span class=\"co1\">; reset timer counter registers</span><br/>\tclr a<br/>\t<span class=\"kw1\">mov</span> r0<span class=\"sy1\">,</span> #TSTART<br/>clear<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">mov</span> @r0<span class=\"sy1\">,</span> a<br/>\t<span class=\"kw1\">inc</span> r0<br/>\tcjne r0<span class=\"sy1\">,</span> #TEND<span class=\"sy1\">,</span> clear<br/>\u00a0<br/>\tstart_timer<br/>\t<span class=\"kw1\">call</span> function\t\t<span class=\"co1\">; the function to time</span><br/>\tstop_timer<br/>\u00a0<br/>\t<span class=\"co1\">; at this point the registers from TSTART</span><br/>\t<span class=\"co1\">; through TEND indicate the current time</span><br/>\t<span class=\"co1\">; multiplying the 8/16/24/etc length value by 0.0625 (2^-4) gives </span><br/>\t<span class=\"co1\">; the elapsed number of seconds</span><br/>\t<span class=\"co1\">; e.g. if the three registers were 02a0f2h then the elapsed time is:</span><br/>\t<span class=\"co1\">; 02a0f2h = 172,274 and 172,274 * 0.0625 = 10,767.125 seconds</span><br/>\t<span class=\"co1\">;</span><br/>\t<span class=\"co1\">; Or alternatively:</span><br/>\t<span class=\"co1\">; (high byte) 02h = 2 and 2 * 2^(16-4) = 8192</span><br/>\t<span class=\"co1\">; (mid byte) a0h = 160 and 160 * 2^(8-4) = 2560</span><br/>\t<span class=\"co1\">; (low byte) f2h = 242 and 242 * 2^(0-4) = 15.125</span><br/>\t<span class=\"co1\">; 8192 + 2560 + 15.125 = 10,767.125 seconds</span><br/>\u00a0<br/>\t<span class=\"kw1\">jmp</span> <span class=\"sy2\">$</span><br/>\u00a0<br/>function<span class=\"sy1\">:</span><br/>\t<span class=\"co1\">; do whatever here</span><br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>time$ <span class=\"br0\">(</span><span class=\"kw1\">nthcdr</span> <span class=\"nu0\">9999999</span> <span class=\"br0\">(</span>take <span class=\"nu0\">10000000</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 31, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Calendar</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Calendar</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Query_Performance <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Proc_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">procedure</span><span class=\"br0\">(</span>X\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Integer<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Time_It<span class=\"br0\">(</span>Action\u00a0: Proc_Access; Arg\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Duration <span class=\"kw1\">is</span><br/>      Start_Time\u00a0: Time\u00a0:= Clock;<br/>      Finis_Time\u00a0: Time;<br/>      Func_Arg\u00a0: Integer\u00a0:= Arg;<br/>   <span class=\"kw1\">begin</span><br/>      Action<span class=\"br0\">(</span>Func_Arg<span class=\"br0\">)</span>;<br/>      Finis_Time\u00a0:= Clock;<br/>      <span class=\"kw1\">return</span> Finis_Time - Start_Time;<br/>   <span class=\"kw1\">end</span> Time_It;<br/>   <span class=\"kw3\">procedure</span> Identity<span class=\"br0\">(</span>X\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      X\u00a0:= X;<br/>   <span class=\"kw1\">end</span> Identity;<br/>   <span class=\"kw3\">procedure</span> Sum <span class=\"br0\">(</span>Num\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> <span class=\"kw1\">loop</span><br/>         Num\u00a0:= Num + I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Sum;<br/>   Id_Access\u00a0: Proc_Access\u00a0:= Identity'<span class=\"kw3\">access</span>;<br/>   Sum_Access\u00a0: Proc_Access\u00a0:= Sum'<span class=\"kw3\">access</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Identity(4) takes\"</span> &amp; Duration'Image<span class=\"br0\">(</span>Time_It<span class=\"br0\">(</span>Id_Access, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" seconds.\"</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Sum(4) takes:\"</span> &amp; Duration'Image<span class=\"br0\">(</span>Time_It<span class=\"br0\">(</span>Sum_Access, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" seconds.\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Query_Performance;</pre>"}, {"lang": "Aime", "loc": 50, "block": "<pre class=\"text highlighted_source\">integer<br/>identity(integer x)<br/>{<br/>    return x;<br/>}<br/>\u00a0<br/>\u00a0<br/>integer<br/>sum(integer c)<br/>{<br/>    integer s;<br/>\u00a0<br/>    s = 0;<br/>    while (c) {<br/>\ts += c;<br/>\tc -= 1;<br/>    }<br/>\u00a0<br/>    return s;<br/>}<br/>\u00a0<br/>\u00a0<br/>real<br/>time_f(integer (*fp) (integer), integer fa)<br/>{<br/>    date f, s;<br/>    time t;<br/>\u00a0<br/>    d_now(s);<br/>\u00a0<br/>    fp(fa);<br/>\u00a0<br/>    d_now(f);<br/>\u00a0<br/>    t_ddiff(t, f, s);<br/>\u00a0<br/>    return t_microsecond(t) / 1000000r;<br/>}<br/>\u00a0<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    o_real(6, time_f(identity, 1));<br/>    o_text(\" seconds\\n\");<br/>    o_real(6, time_f(sum, 1000000));<br/>    o_text(\" seconds\\n\");<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% time<span class=\"br0\">(</span><span class=\"st0\">\"fx\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>fx<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>time<span class=\"br0\">(</span>function<span class=\"sy0\">,</span> parameter<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"co1\">; don't sleep for other green threads</span><br/>  StartTime <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a><br/>  <span class=\"re0\">%function%</span><span class=\"br0\">(</span>parameter<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> ElapsedTime <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a> <span class=\"sy0\">-</span> StartTime <span class=\"sy0\">.</span> <span class=\"st0\">\" milliseconds\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Time a function</span><br/><span class=\"kw1\">SUB</span> timed<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">SLEEP</span> <span class=\"nu0\">7000</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">SUB</span><br/>\u00a0<br/>st = <span class=\"kw1\">TIMER</span><br/>timed<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>et = <span class=\"kw1\">TIMER</span><br/><span class=\"kw1\">PRINT</span> st, <span class=\"st0\">\", \"</span>, et</pre>"}, {"lang": "BASIC", "loc": 9, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> timestart <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><span class=\"sy0\">,</span> timedone <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><span class=\"sy0\">,</span> timeelapsed <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><br/>\u00a0<br/>timestart <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qcksleep.shtml\"><span class=\"kw3\">SLEEP</span></a> <span class=\"nu0\">1</span> <span class=\"co1\">'code or function to execute goes here</span><br/>timedone <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/>\u00a0<br/><span class=\"co1\">'midnight check:</span><br/><span class=\"kw1\">IF</span> timedone <span class=\"sy0\">&lt;</span> timestart <span class=\"kw1\">THEN</span> timedone <span class=\"sy0\">=</span> timedone <span class=\"sy0\">+</span> <span class=\"nu0\">86400</span><br/>timeelapsed <span class=\"sy0\">=</span> timedone <span class=\"sy0\">-</span> timestart</pre>"}, {"lang": "Batch File", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>Setlocal EnableDelayedExpansion<br/>\u00a0<br/>call\u00a0:clock<br/>\u00a0<br/>::timed function:fibonacci series.....................................<br/>set /a a=0 ,b=1,c=1<br/>:loop<br/>if\u00a0%c% lss 2000000000 echo\u00a0%c% &amp; set /a c=a+b,a=b, b=c &amp; goto loop<br/>::....................................................................<br/>\u00a0<br/>call\u00a0:clock<br/>\u00a0<br/>echo  Function executed in\u00a0%timed% hundredths of second<br/>goto:eof<br/>\u00a0<br/>:clock<br/>if not defined timed set timed=0<br/>for /F \"tokens=1-4 delims=:.,\"\u00a0%%a in (\"%time%\") do ( <br/>set /A timed = \"(((1%%a - 100) * 60 + (1%%b - 100)) * 60 + (1%%c - 100))  * 100 + (1%%d - 100)-\u00a0%timed%\"<br/>)<br/>goto:eof<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">start%=TIME:REM centi-second timer<br/>REM perform processing<br/>lapsed%=TIME-start%</pre>"}, {"lang": "Bracmat", "loc": 14, "block": "<pre class=\"text highlighted_source\">( ( time<br/>  =   fun funarg t0 ret<br/>    .  \u00a0!arg:(?fun.?funarg)<br/>      &amp; clk$:?t0<br/>      &amp;\u00a0!fun$!funarg:?ret<br/>      &amp; (!ret.flt$(clk$+-1*!t0,3) s)<br/>  )<br/>&amp; ( fib<br/>  =<br/>    .  \u00a0!arg:&lt;2&amp;1<br/>      | fib$(!arg+-1)+fib$(!arg+-2)<br/>  )<br/>&amp; time$(fib.30)<br/>)</pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> identity<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> s <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#ifdef CLOCK_PROCESS_CPUTIME_ID</span><br/><span class=\"coMULTI\">/* cpu time in the current process */</span><br/><span class=\"co2\">#define CLOCKTYPE  CLOCK_PROCESS_CPUTIME_ID</span><br/><span class=\"co2\">#else</span><br/><span class=\"coMULTI\">/* this one should be appropriate to avoid errors on multiprocessors systems */</span><br/><span class=\"co2\">#define CLOCKTYPE  CLOCK_MONOTONIC</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">double</span> time_it<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>action<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> arg<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">struct</span> timespec tsi<span class=\"sy0\">,</span> tsf<span class=\"sy0\">;</span><br/>\u00a0<br/>  clock_gettime<span class=\"br0\">(</span>CLOCKTYPE<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tsi<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  action<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  clock_gettime<span class=\"br0\">(</span>CLOCKTYPE<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tsf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">double</span> elaps_s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/difftime.html\"><span class=\"kw3\">difftime</span></a><span class=\"br0\">(</span>tsf.<span class=\"me1\">tv_sec</span><span class=\"sy0\">,</span> tsi.<span class=\"me1\">tv_sec</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">long</span> elaps_ns <span class=\"sy0\">=</span> tsf.<span class=\"me1\">tv_nsec</span> <span class=\"sy0\">-</span> tsi.<span class=\"me1\">tv_nsec</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> elaps_s <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>elaps_ns<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu19\">1.0e9</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"identity (4) takes\u00a0%lf s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> time_it<span class=\"br0\">(</span>identity<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"sum      (4) takes\u00a0%lf s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> time_it<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> identity<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    num <span class=\"sy2\">+</span><span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> num<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> time_it<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>action<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>, <span class=\"kw4\">int</span> arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">clock_t</span> start_time <span class=\"sy1\">=</span> <span class=\"kw3\">clock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  action<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">clock_t</span> finis_time <span class=\"sy1\">=</span> <span class=\"kw3\">clock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>finis_time <span class=\"sy2\">-</span> start_time<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw2\">CLOCKS_PER_SEC</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Identity(4) takes \"</span> <span class=\"sy1\">&lt;&lt;</span> time_it<span class=\"br0\">(</span>identity, <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" seconds.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Sum(4) takes \"</span> <span class=\"sy1\">&lt;&lt;</span> time_it<span class=\"br0\">(</span>sum, <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" seconds.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Stopwatch sw <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Stopwatch<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        sw<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        DoSomething<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sw<span class=\"sy0\">.</span><span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"DoSomething() took {0}ms.\"</span>, sw<span class=\"sy0\">.</span><span class=\"me1\">Elapsed</span><span class=\"sy0\">.</span><span class=\"me1\">TotalMilliseconds</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DoSomething<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Sum even numers from 1 to 10000</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">defn</span> fib <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a b<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>b <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">time</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">100</span> <span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>time <span class=\"br0\">(</span>reduce #'+ <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> <span class=\"nu0\">100000</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Evaluation took<span class=\"sy0\">:</span><br/>  <span class=\"nu0\">0.151</span> seconds of real time<br/>  <span class=\"nu0\">0.019035</span> seconds of user run time<br/>  <span class=\"nu0\">0.01807</span> seconds of system run time<br/>  <span class=\"nu0\">0</span> calls to <span class=\"sy0\">%</span><span class=\"kw1\">EVAL</span><br/>  <span class=\"nu0\">0</span> page faults <span class=\"kw1\">and</span><br/>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">400</span><span class=\"sy0\">,</span><span class=\"nu0\">256</span> bytes consed<span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">datetime</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> identity<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span><br/>        num <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> num<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> timeIt<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> func<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    StopWatch sw<span class=\"sy0\">;</span><br/>    sw.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    func<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sw.<span class=\"me1\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sw.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">usecs</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>_000_000.0<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"identity(4) takes\u00a0%f6 seconds.\"</span><span class=\"sy0\">,</span> timeIt<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>identity<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"sum(4) takes\u00a0%f seconds.\"</span><span class=\"sy0\">,</span> timeIt<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sum<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 17, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> countTo<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Counting...\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">x</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Done!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> MX <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>unsafe<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">management</span>.<span class=\"me1\">makeManagementFactory</span><span class=\"sy0\">&gt;</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> threadMX <span class=\"sy0\">:=</span> MX.<span class=\"me1\">getThreadMXBean</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/require\"><span class=\"kw6\">require</span></a><span class=\"br0\">(</span>threadMX.<span class=\"me1\">isCurrentThreadCpuTimeSupported</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>threadMX.<span class=\"me1\">setThreadCpuTimeEnabled</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> count <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"nu0\">100000</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> start <span class=\"sy0\">:=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tcountTo<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>\t<a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> finish <span class=\"sy0\">:=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`Counting to $count takes ${(finish-start)//1000000}ms`</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 23, "block": "<pre class=\"text highlighted_source\">import system'calendar.<br/>import system'routines.<br/>import system'threading.<br/>import system'math.<br/>import extensions.<br/>\u00a0<br/>someProcess =<br/>[<br/>    thread sleep(1000).<br/>\u00a0<br/>    Range new(0,10000); filterBy(:x)(x mod:2 == 0); summarize.<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    var start\u00a0:= now.<br/>\u00a0<br/>    someProcess eval.<br/>\u00a0<br/>    var end\u00a0:= now.<br/>\u00a0<br/>    console printLine(\"Time elapsed in msec:\",(end - start) milliseconds).<br/>].</pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(10)&gt;\u00a0:timer.tc(fn -&gt; Enum.each(1..100000, fn x -&gt; x*x end) end)<br/>{236000,\u00a0:ok}</pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"nu0\">5</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Time</span><span class=\"sy1\">,</span><span class=\"re5\">Result</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"kw3\">time</span>r:<span class=\"re3\">tc</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"sy3\">*</span><span class=\"re5\">X</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"br0\">{</span><span class=\"nu0\">226391</span><span class=\"sy1\">,</span>ok<span class=\"br0\">}</span><br/><span class=\"nu0\">6</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">Time</span><span class=\"sy3\">/</span><span class=\"nu0\">1000000</span><span class=\"sy1\">.</span> <span class=\"co1\">% Time is in microseconds.</span><br/><span class=\"nu0\">0.226391</span><br/><span class=\"nu0\">7</span><span class=\"sy3\">&gt;</span> <span class=\"co1\">% Time is in microseconds.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 5, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">atom</span> t<br/>t <span class=\"sy1\">=</span> <span class=\"kw2\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>some_procedure<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>t <span class=\"sy1\">=</span> <span class=\"kw2\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> t<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Elapsed\u00a0%f seconds.<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>t<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Diagnostics</span><br/><span class=\"kw1\">let</span> myfunc data <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> timer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stopwatch<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    timer.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> data <span class=\"sy0\">|&gt;</span> expensive_processing<br/>    timer.<span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    printf <span class=\"st0\">\"elapsed\u00a0%d ms\"</span> timer.<span class=\"me1\">ElapsedMilliseconds</span><br/>    result<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 10000 iota sum drop ] time</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: time: ( \"word\" -- )<br/>  utime 2&gt;R ' EXECUTE<br/>  utime 2R&gt; D-<br/>  &lt;# # # # # # # [CHAR] . HOLD #S #&gt; TYPE .\"  seconds\"\u00a0;<br/>\u00a0<br/>1000 time: MS  \\ 1.000081 seconds ok</pre>"}, {"lang": "Fortran", "loc": 20, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">c The subroutine to analyze</span><br/>      <span class=\"kw1\">subroutine</span> do_something<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">c For testing we just do nothing for 3 seconds</span><br/>      <span class=\"kw1\">call</span> sleep<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">c Main Program</span><br/>      <span class=\"kw1\">program</span> timing<br/>      <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> start,finish,rate<br/>      <span class=\"kw1\">call</span> <span class=\"kw4\">system_clock</span><span class=\"br0\">(</span>count_rate<span class=\"sy0\">=</span>rate<span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> <span class=\"kw4\">system_clock</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span>         <br/><span class=\"co1\">c Here comes the function we want to time</span><br/>      <span class=\"kw1\">call</span> do_something<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> <span class=\"kw4\">system_clock</span><span class=\"br0\">(</span>finish<span class=\"br0\">)</span>         <br/>      write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Elapsed Time in seconds:'</span>,float<span class=\"br0\">(</span>finish<span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">/</span>rate<br/>      <span class=\"kw1\">return</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 19, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> sumToLimit<span class=\"br0\">(</span>limit <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> limit<br/>    sum += i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> start = <span class=\"kw1\">timer</span><br/><span class=\"kw1\">Dim</span> limit <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">100000000</span><br/><span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = sumToLimit<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> ms <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span> * <span class=\"br0\">(</span><span class=\"kw1\">timer</span> - start<span class=\"br0\">)</span> + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"sumToLimit(\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span>; <span class=\"st0\">\") = \"</span>; result<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"took \"</span>;  ms; <span class=\"st0\">\" milliseconds to calculate\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\"># Return the time passed in last function<br/>time;</pre>"}, {"lang": "Go", "loc": 9, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> empty<br/>\u00a0<br/><span class=\"kw4\">func</span> Empty<span class=\"sy1\">()</span> <span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Count<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// count to a million</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu1\">1e6</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 12, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">java.lang.management.ManagementFactory</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">java.lang.management.ThreadMXBean</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> threadMX <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">threadMXBean</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> threadMX.<span class=\"me1\">currentThreadCpuTimeSupported</span><br/>threadMX.<span class=\"me1\">threadCpuTimeEnabled</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> clockCpuTime <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Closure c <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a> <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">currentThreadCpuTime</span><br/>    c.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call\"><span class=\"kw9\">call</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>threadMX.<span class=\"me1\">currentThreadCpuTime</span> <span class=\"sy0\">-</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a><span class=\"br0\">)</span>/<span class=\"nu0\">1000000</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Halon", "loc": 5, "block": "<pre class=\"text highlighted_source\">$t = uptime();<br/>\u00a0<br/>sleep(1);<br/>\u00a0<br/>echo uptime() - $t;</pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>CPUTime <span class=\"br0\">(</span>getCPUTime<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- We assume the function we are timing is an IO monad computation</span><br/>timeIt <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> c<br/>timeIt action arg <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  startTime <span class=\"sy0\">&lt;-</span> getCPUTime<br/>  action arg<br/>  finishTime <span class=\"sy0\">&lt;-</span> getCPUTime<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"br0\">(</span>finishTime <span class=\"sy0\">-</span> startTime<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000000000</span><br/>\u00a0<br/><span class=\"co1\">-- Version for use with evaluating regular non-monadic functions</span><br/>timeIt<span class=\"sy0\">_</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> c<br/>timeIt<span class=\"sy0\">_</span> f <span class=\"sy0\">=</span> timeIt <span class=\"br0\">(</span><span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:seq\"><span class=\"kw3\">seq</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> f<span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 5, "block": "<pre class=\"hicest highlighted_source\">t_start <span class=\"sy1\">=</span> <span class=\"kw1\">TIME</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\">! returns seconds since midnight</span><br/><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>WAIT <span class=\"sy1\">=</span> <span class=\"nu0\">1234</span><span class=\"br0\">)</span> <span class=\"co1\">! wait 1234 milliseconds</span><br/>t_end <span class=\"sy1\">=</span> <span class=\"kw1\">TIME</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>StatusBar<span class=\"br0\">)</span> t_end <span class=\"sy1\">-</span> t_start<span class=\"sy1\">,</span> <span class=\"st0\">\" seconds\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 35, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> timef<span class=\"br0\">(</span>f<span class=\"br0\">)</span>                               <span class=\"co1\">#: time a function f</span><br/><span class=\"kw2\">local</span> gcol<span class=\"sy1\">,</span>alloc<span class=\"sy1\">,</span>used<span class=\"sy1\">,</span>size<span class=\"sy1\">,</span>runtime<span class=\"sy1\">,</span>header<span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>i<br/>\u00a0<br/>title <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"total\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"static\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"string\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"block\"</span><span class=\"br0\">]</span>  <span class=\"co1\"># headings</span><br/><span class=\"kw4\">collect</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                        <span class=\"co1\"># start with collected memory (before baseline)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>gcol  <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-&amp;</span><span class=\"kw3\">collections</span><span class=\"br0\">)</span>            <span class=\"co1\"># baseline collections count</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>alloc <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-&amp;</span><span class=\"kw3\">allocated</span><span class=\"br0\">)</span>              <span class=\"co1\"># . total allocated space by region</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>used  <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-&amp;</span><span class=\"kw3\">storage</span><span class=\"br0\">)</span>                <span class=\"co1\"># . currently used space by region - no total</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>size  <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-&amp;</span><span class=\"kw3\">regions</span><span class=\"br0\">)</span>                <span class=\"co1\"># . current size of regions        - no total</span><br/>\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Performance and Timing measurement for \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span>  <br/>runtime <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">time</span>                                 <span class=\"co1\"># base time  </span><br/>f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Execution time=\"</span><span class=\"sy1\">,&amp;</span>time<span class=\"sy1\">-</span>runtime<span class=\"sy1\">,</span><span class=\"st0\">\" ms.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">collections</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span>  gcol<span class=\"br0\">[</span>i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> x<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">allocated</span>  <span class=\"br0\">)</span> <span class=\"kw1\">do</span> alloc<span class=\"br0\">[</span>i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> x<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">storage</span>    <span class=\"br0\">)</span> <span class=\"kw1\">do</span>  used<span class=\"br0\">[</span>i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> x<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">regions</span>    <span class=\"br0\">)</span> <span class=\"kw1\">do</span>  size<span class=\"br0\">[</span>i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> x<br/>\u00a0<br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>gcol<span class=\"sy1\">,</span><span class=\"st0\">\"garbage collections:\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>alloc<span class=\"sy1\">,</span><span class=\"st0\">\"memory allocated:\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>used<span class=\"sy1\">,</span><span class=\"st0\">\"N/A\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"currently used:\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>size<span class=\"sy1\">,</span><span class=\"st0\">\"N/A\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"current size:\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Memory Region and Garbage Collection Summary (delta):\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;:=</span> <span class=\"sy1\">*!</span><span class=\"br0\">(</span>title<span class=\"sy1\">|</span>gcol<span class=\"sy1\">|</span>alloc<span class=\"sy1\">|</span>used<span class=\"sy1\">|</span>size<span class=\"br0\">)</span>   <br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>title<span class=\"sy1\">|</span>gcol<span class=\"sy1\">|</span>alloc<span class=\"sy1\">|</span>used<span class=\"sy1\">|</span>size<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   f <span class=\"sy1\">:=</span> <span class=\"kw4\">left</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"sy1\">!</span>x<span class=\"sy1\">,</span>i <span class=\"sy1\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> f <span class=\"sy1\">:=</span> <span class=\"kw4\">right</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Note: static region values should be zero and may not be meaningful.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Ioke", "loc": 5, "block": "<pre class=\"text highlighted_source\">use(\"benchmark\")<br/>\u00a0<br/>func = method((1..50000) reduce(+))<br/>\u00a0<br/>Benchmark report(1, 1, func)</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span><span class=\"nu0\">6</span>!:<span class=\"nu0\">2</span> , <span class=\"nu0\">7</span>!:<span class=\"nu0\">2</span><span class=\"sy0\">)</span> <span class=\"st_h\">'|: 50 50 50 $ i. 50^3'</span><br/><span class=\"nu0\">0.00488008</span> <span class=\"nu0\">3.14829e6</span><br/>   timespacex <span class=\"st_h\">'|: 50 50 50 $ i. 50^3'</span><br/><span class=\"nu0\">0.00388519</span> <span class=\"nu0\">3.14829e6</span></pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.management.ManagementFactory</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.management.ThreadMXBean</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TimeIt <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">final</span> ThreadMXBean threadMX <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">getThreadMXBean</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">assert</span> threadMX.<span class=\"me1\">isCurrentThreadCpuTimeSupported</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tthreadMX.<span class=\"me1\">setThreadCpuTimeEnabled</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">long</span> start, end<span class=\"sy0\">;</span><br/>\t\tstart <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcountTo<span class=\"br0\">(</span><span class=\"nu0\">100000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tend <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Counting to 100000000 takes \"</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>end<span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000000</span><span class=\"sy0\">+</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstart <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcountTo<span class=\"br0\">(</span>1000000000L<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tend <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">getCurrentThreadCpuTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Counting to 1000000000 takes \"</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>end<span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000000</span><span class=\"sy0\">+</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> countTo<span class=\"br0\">(</span><span class=\"kw4\">long</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Counting...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Done!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>\u00a0<br/>function countto(n::Integer)<br/>    i = zero(n)<br/>    println(\"Counting...\")<br/>    while i &lt; n<br/>        i += 1<br/>    end<br/>    println(\"Done!\")<br/>end<br/>\u00a0<br/>@time countto(10 ^ 5)<br/>@time countto(10 ^ 10)</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/><span class=\"co1\">// need to enable runtime assertions with JVM -ea option</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">management</span>.<span class=\"me1\">ManagementFactory</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">management</span>.<span class=\"me1\">ThreadMXBean</span><br/>\u00a0<br/>fun countTo<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Counting...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">x</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Done!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> counts <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000, <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> threadMX <span class=\"sy0\">=</span> ManagementFactory.<span class=\"me1\">getThreadMXBean</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    assert<span class=\"br0\">(</span>threadMX.<span class=\"me1\">isCurrentThreadCpuTimeSupported</span><span class=\"br0\">)</span><br/>    threadMX.<span class=\"me1\">isThreadCpuTimeEnabled</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>count in counts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> start <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">currentThreadCpuTime</span><br/>        countTo<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> threadMX.<span class=\"me1\">currentThreadCpuTime</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Counting to $count takes ${(end-start)/1000000}ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 5, "block": "<pre class=\"text highlighted_source\">local(start = micros)<br/>loop(100000) =&gt; {<br/>\t'nothing is outout because no autocollect'<br/>}<br/>'time for 100,000 loop repititions: '+(micros - #start)+' microseconds'</pre>"}, {"lang": "Lingo", "loc": 5, "block": "<pre class=\"text highlighted_source\">on testFunc ()<br/>  repeat with i = 1 to 1000000<br/>    x = sqrt(log(i))<br/>  end repeat<br/>end</pre>"}, {"lang": "Logo", "loc": 10, "block": "<pre class=\"text highlighted_source\">to time<br/>  output first first shell \"|date +%s|<br/>end<br/>to elapsed\u00a0:block<br/>  localmake \"start time<br/>  run\u00a0:block<br/>  (print time -\u00a0:start [seconds elapsed])<br/>end<br/>\u00a0<br/>elapsed [wait 300]  \u00a0; 5 seconds elapsed</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Test_Function<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000000</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span><br/>        s <span class=\"sy0\">=</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>t1 <span class=\"sy0\">=</span> <span class=\"kw3\">os.clock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Test_Function<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>t2 <span class=\"sy0\">=</span> <span class=\"kw3\">os.clock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">os.difftime</span><span class=\"br0\">(</span> t2<span class=\"sy0\">,</span> t1 <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Module sumtolimit (limit) {<br/>           sum=limit-limit<br/>           n=sum<br/>           n++<br/>           while limit {sum+=limit*n:limit--:n-!}<br/>      }<br/>      Cls ' clear screen<br/>      Profiler<br/>      sumtolimit 10000%<br/>      Print TimeCount<br/>      Profiler<br/>      sumtolimit 10000&amp;<br/>      Print TimeCount<br/>      Profiler<br/>      sumtolimit 10000#<br/>      Print TimeCount<br/>      Profiler<br/>      sumtolimit <a class=\"__cf_email__\" data-cfemail=\"f8c9c8c8c8c8b8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      Print TimeCount<br/>      Profiler<br/>      sumtolimit 10000~<br/>      Print TimeCount<br/>      Profiler<br/>      sumtolimit 10000<br/>      Print TimeCount<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">CodeTools:-Usage(ifactor(32!+1), output = realtime, quiet);</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">AbsoluteTiming[x];</pre>"}, {"lang": "Maxima", "loc": 16, "block": "<pre class=\"text highlighted_source\">f(n)\u00a0:= if n &lt; 2 then n else f(n - 1) + f(n - 2)$<br/>\u00a0<br/>/* First solution, call the time function with an output line number, it gives the time taken to compute that line.<br/>   Here it's assumed to be\u00a0%o2 */<br/>f(24);<br/>46368<br/>\u00a0<br/>time(%o2);<br/>[0.99]<br/>\u00a0<br/>/* Second solution, change a system flag to print timings for all following lines */<br/>showtime: true$<br/>\u00a0<br/>f(24);<br/>Evaluation took 0.9400 seconds (0.9400 elapsed)<br/>46368</pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import times, os<br/>\u00a0<br/>proc doWork(x) =<br/>  var n = x<br/>  for i in 0..10000000:<br/>    n += i<br/>  echo n<br/>\u00a0<br/>template time(s: stmt): expr =<br/>  let t0 = cpuTime()<br/>  s<br/>  cpuTime() - t0<br/>\u00a0<br/>echo time(doWork(100))</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> time_it action arg <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> start_time <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span>action arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> finish_time <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  finish_time <span class=\"sy0\">-.</span> start_time</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre>&gt;#[ 0 1000 seq apply(#+) ] bench .\n267\n500500 ok\n</pre>"}, {"lang": "Oz", "loc": 19, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% returns milliseconds</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">TimeIt</span> Proc<span class=\"br0\">}</span><br/>     Before = <span class=\"br0\">{</span>Now<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Proc<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Now<span class=\"br0\">}</span> <span class=\"sy0\">-</span> Before<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Now</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Property<span class=\"sy0\">.</span>get <span class=\"st0\">'time.total'</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show<br/>   <span class=\"br0\">{</span>TimeIt<br/>    <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span><br/>       <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 1000000 1<span class=\"br0\">}</span> Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 4 _<span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">time<span class=\"br0\">(</span>foo<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">gettime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 18, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Benchmark<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Memoize<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fac1 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> fac1<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> fac2 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> fac2<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>memoize<span class=\"br0\">(</span><span class=\"st_h\">'fac2'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> timethese<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>    <span class=\"st_h\">'fac1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> fac1<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'fac2'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> fac2<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Benchmark<span class=\"sy0\">::</span><span class=\"me2\">cmpthese</span><span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/><span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> now <span class=\"sy0\">-</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">atom t0 = time()<br/>some_procedure()<br/>printf(1,\"%3.2fs.\\n\",time()-t0)</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">: (bench (do 1000000 (* 3 4)))<br/>0.080 sec<br/>-&gt; 12</pre>"}, {"lang": "PL/I", "loc": 15, "block": "<pre class=\"text highlighted_source\">declare (start_time, finish_time) float (18);<br/>\u00a0<br/>start_time = secs();<br/>\u00a0<br/>do i = 1 to 10000000;<br/>   /* something to be repeated goes here. */<br/>end;<br/>finish_time = secs();<br/>\u00a0<br/>put skip edit ('elapsed time=', finish_time - start_time, ' seconds')<br/>   (A, F(10,3), A);<br/>   /* gives the result to thousandths of a second. */<br/>\u00a0<br/>/* Note: using the SECS function takes into account the clock */<br/>/* going past midnight. */</pre>"}, {"lang": "PowerShell", "loc": 14, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> fun<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$res</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><br/>            <span class=\"re0\">$res</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$res</span>   <br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$((Measure-Command {fun 10000}).TotalSeconds) Seconds\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 22, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Foo<span class=\"br0\">(</span>Limit<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, palindromic, String$<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> Limit<br/>    String$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> String$<span class=\"sy0\">=</span>ReverseString<span class=\"br0\">(</span>String$<span class=\"br0\">)</span><br/>      palindromic<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> palindromic<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Start, Stop, cnt<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Starting timing of a calculation,\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"for this we test how many of 0-1000000 are palindromic.\"</span><span class=\"br0\">)</span><br/>  Start<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  cnt<span class=\"sy0\">=</span>Foo<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>  Stop<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The function need \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" msec,\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"and \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" are palindromic.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit.\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><span class=\"sy0\">,</span> <span class=\"kw3\">timeit</span><br/><span class=\"kw1\">def</span> usec<span class=\"br0\">(</span>function<span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span>:<br/>    modname<span class=\"sy0\">,</span> funcname <span class=\"sy0\">=</span> __name__<span class=\"sy0\">,</span> function.__name__<br/>    timer <span class=\"sy0\">=</span> <span class=\"kw3\">timeit</span>.<span class=\"me1\">Timer</span><span class=\"br0\">(</span>stmt<span class=\"sy0\">=</span><span class=\"st0\">'%(funcname)s(*args)'</span>\u00a0% <span class=\"kw2\">vars</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         setup<span class=\"sy0\">=</span><span class=\"st0\">'from\u00a0%(modname)s import\u00a0%(funcname)s; args=%(arguments)r'</span>\u00a0% <span class=\"kw2\">vars</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span>:<br/>        t<span class=\"sy0\">,</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">while</span> t <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.2</span>:            <br/>            t <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span>timer.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>repeat<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> number<span class=\"sy0\">=</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>            <br/>            N *<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>        microseconds <span class=\"sy0\">=</span> <span class=\"kw2\">round</span><span class=\"br0\">(</span><span class=\"nu0\">10000000</span> * t / N<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"># per loop</span><br/>        <span class=\"kw1\">return</span> microseconds <br/>    <span class=\"kw1\">except</span>:<br/>        timer.<span class=\"me1\">print_exc</span><span class=\"br0\">(</span><span class=\"kw2\">file</span><span class=\"sy0\">=</span><span class=\"kw3\">sys</span>.<span class=\"me1\">stderr</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">raise</span><br/>\u00a0<br/> <span class=\"kw1\">def</span> nothing<span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw1\">pass</span><br/> <span class=\"kw1\">def</span> identity<span class=\"br0\">(</span>x<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> x</pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\"># A task<br/>foo &lt;- function()<br/>{<br/>   for(i in 1:10)<br/>   {<br/>      mat &lt;- matrix(rnorm(1e6), nrow=1e3)<br/>      mat^-0.5<br/>   }<br/>}<br/># Time the task<br/>timer &lt;- system.time(foo())<br/># Extract the processing time<br/>timer[\"user.self\"]</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (fact n) (if (zero? n) 1 (* n (fact (sub1 n)))))<br/>(time (fact 5000))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 21, "block": "<pre class=\"text highlighted_source\">define doId use $x<br/>   $x dup * $x /<br/>\u00a0<br/>define doPower use $v, $p<br/>   $v $p pow<br/>\u00a0<br/>define doSort<br/>   group<br/>      20000 each choose<br/>   list sort reverse<br/>\u00a0<br/>define timeFunc use $fName<br/>   time as $t1<br/>   $fName \"\" prefer call<br/>   time as $t2<br/>   $fName $t2 $t1 -\"%.4g secs for\u00a0%s\\n\" print<br/>\u00a0<br/>\"NULL\" timeFunc<br/>42 \"doId\" timeFunc<br/>12 2 \"doPower\" timeFunc<br/>\"doSort\" timeFunc</pre>"}, {"lang": "Retro", "loc": 4, "block": "<pre class=\"text highlighted_source\">: .runtime ( a- ) time [ do time ] dip - \"\\n%d\\n\" puts\u00a0;<br/>\u00a0<br/>: test 20000 [ putn space ] iterd\u00a0;<br/>&amp;test .runtime</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the elapsed time for a REXX function (or subroutine). */</span><br/><span class=\"kw1\">arg</span> reps <span class=\"sy0\">.</span>                             <span class=\"coMULTI\">/*obtain an optional argument from C.L.*/</span><br/><span class=\"kw1\">if</span> reps==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> reps=<span class=\"nu0\">100000</span>          <span class=\"coMULTI\">/*Not specified?  No, then use default.*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                      <span class=\"coMULTI\">/*only the 1st character is examined.  */</span><br/>junk = silly<span class=\"br0\">(</span>reps<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*invoke the  SILLY  function (below). */</span><br/>                                       <span class=\"coMULTI\">/*\u2500\u2500\u2500\u25ba   CALL SILLY REPS    also works.*/</span><br/>\u00a0<br/>             <span class=\"coMULTI\">/*                          The    E   is for    elapsed    time.*/</span><br/>             <span class=\"coMULTI\">/*                                 \u2502             \u2500               */</span><br/>             <span class=\"coMULTI\">/*                        \u250c\u2500\u2500\u2500\u2500\u25c4\u2500\u2500\u2500\u2518                             */</span><br/>             <span class=\"coMULTI\">/*                        \u2502                                      */</span><br/>             <span class=\"coMULTI\">/*                        \u2193                                      */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'function SILLY took'</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">\"E\"</span><span class=\"br0\">)</span>,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"st0\">'seconds for'</span> reps <span class=\"st0\">\"iterations.\"</span><br/>             <span class=\"coMULTI\">/*                             \u2191                                 */</span><br/>             <span class=\"coMULTI\">/*                             \u2502                                 */</span><br/>             <span class=\"coMULTI\">/*            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                 */</span><br/>             <span class=\"coMULTI\">/*            \u2502                                                  */</span><br/>             <span class=\"coMULTI\">/* The above  2  for the  FORMAT  function displays the time with*/</span><br/>             <span class=\"coMULTI\">/* two decimal digits (rounded)  past the decimal point).  Using */</span><br/>             <span class=\"coMULTI\">/* a   0  (zero)    would round the  time  to whole seconds.     */</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>silly: <span class=\"kw1\">procedure</span>               <span class=\"coMULTI\">/*chew up some CPU time doing some silly stuff.*/</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*wash,  apply,  lather,  rinse,  repeat.  \u00b7\u00b7\u00b7 */</span><br/>            @<span class=\"sy0\">.</span>j=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw6\">date</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">fuzz</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">form</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw6\">xrange</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw6\">queued</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/> <span class=\"kw1\">return</span> j-<span class=\"nu0\">1</span></pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>beginTime = TimeList()[13]<br/>for n = 1 to 10000000<br/>    n = n + 1<br/>next<br/>endTime = TimeList()[13]<br/>elapsedTime = endTime - beginTime<br/>see \"Elapsed time = \" + elapsedTime + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'benchmark'</span><br/>\u00a0<br/><span class=\"kw4\">Benchmark</span>.<span class=\"me1\">bm</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">\"nothing:\"</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span>  <span class=\"br0\">}</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">\"sum:\"</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, x<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> x<span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> time<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><br/>\tf<br/>\tSystem.<span class=\"me1\">currentTimeMillis</span> - s<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>time <span class=\"br0\">(</span>some<span class=\"sy0\">-</span>function<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 35, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"time.s7i\";<br/>  include \"duration.s7i\";<br/>\u00a0<br/>const func integer: identity (in integer: x) is<br/>  return x;<br/>\u00a0<br/>const func integer: sum (in integer: num) is func<br/>  result<br/>    var integer: result is 0;<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    result\u00a0:= num;<br/>    for number range 1 to 1000000 do<br/>      result +:= number;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func duration: timeIt (ref func integer: aFunction) is func<br/>  result<br/>    var duration: result is duration.value;<br/>  local<br/>    var time: before is time.value;<br/>  begin<br/>    before\u00a0:= time(NOW);<br/>    ignore(aFunction);<br/>    result\u00a0:= time(NOW) - before;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Identity(4) takes \" &lt;&amp; timeIt(identity(4)));<br/>    writeln(\"Sum(4)      takes \" &lt;&amp; timeIt(sum(4)));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 20, "block": "<pre class=\"ruby highlighted_source\">var benchmark = frequire<span class=\"br0\">(</span><span class=\"st0\">'Benchmark'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func fac_rec<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n == <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> __FUNC__<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func fac_iter<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var prod = <span class=\"nu0\">1</span><br/>    n.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        prod <span class=\"sy0\">*</span>= i<br/>    <span class=\"br0\">}</span><br/>    prod<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var result = benchmark.<span class=\"me1\">timethese</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">'fac_rec'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> fac_rec<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>  <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'fac_iter'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> fac_iter<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>benchmark.<span class=\"me1\">cmpthese</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span></pre>"}, {"lang": "Slate", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[inform: 2000 factorial] timeToRun.<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re0\">Time</span> millisecondsToRun: <span class=\"br0\">[</span> <br/>\t<span class=\"re0\">Transcript</span> show: <span class=\"re5\">2000</span> factorial <span class=\"br0\">]</span>.<br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">fun time_it (action, arg) = let<br/>  val timer = Timer.startCPUTimer ()<br/>  val _ = action arg<br/>  val times = Timer.checkCPUTimer timer<br/>in<br/>  Time.+ (#usr times, #sys times)<br/>end</pre>"}, {"lang": "Stata", "loc": 10, "block": "<pre class=\"text highlighted_source\">program timer_test<br/>\ttimer clear 1<br/>\ttimer on 1<br/>\tsleep `0'<br/>\ttimer off 1<br/>\ttimer list 1<br/>end<br/>\u00a0<br/>. timer_test 1000<br/>   1:      1.01 /        1 =       1.0140</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> sum_n <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> sum <span class=\"nu0\">0.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>wide<span class=\"br0\">(</span><span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">time</span> <span class=\"br0\">{</span>sum_n 1e6<span class=\"br0\">}</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">time</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span></pre>"}, {"lang": "TorqueScript", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function benchmark(%times,%function,%a,%b,%c,%d,%e,%f,%g,%h,%i,%j,%k,%l,%m,%n,%o)<br/>{<br/>\tif(!isFunction(%function))<br/>\t{<br/>\t\twarn(\"BENCHMARKING RESULT FOR\" SPC\u00a0%function @ \":\" NL \"Function does not exist.\");<br/>\t\treturn -1;<br/>\t}<br/>\u00a0<br/>\t%start = getRealTime();<br/>\u00a0<br/>\tfor(%i=0;\u00a0%i &lt;\u00a0%times;\u00a0%i++)<br/>\t{<br/>\t\tcall(%function,%a,%b,%c,%d,%e,%f,%g,%h,%i,%j,%k,%l,%m,%n,%o);<br/>\t}<br/>\u00a0<br/>\t%end = getRealTime();<br/>\u00a0<br/>\t%result = (%end-%start) /\u00a0%times;<br/>\u00a0<br/>\twarn(\"BENCHMARKING RESULT FOR\" SPC\u00a0%function @ \":\" NL\u00a0%result);<br/>\u00a0<br/>\treturn\u00a0%result;<br/>}<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>SECTION test<br/>LOOP n=1,999999<br/>rest=MOD (n,1000)<br/>IF (rest==0) Print n<br/>ENDLOOP<br/>ENDSECTION<br/>time_beg=TIME ()<br/>DO test<br/>time_end=TIME ()<br/>interval=TIME_INTERVAL (seconds,time_beg,time_end)<br/>PRINT \"'test' start at \",time_beg<br/>PRINT \"'test' ends  at \",time_end<br/>PRINT \"'test' takes \",interval,\" seconds\"<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"co4\">$ </span><span class=\"kw1\">time</span> <span class=\"kw2\">sleep</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Wart", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw3\">time</span> <span class=\"nu0\">1</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">30000</span>/<span class=\"nu0\">1000000</span>  <span class=\"co1\"># in microseconds</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span></pre>"}, {"lang": "XPL0", "loc": 7, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int T0, T1, I;<br/>[T0:= GetTime;<br/>for I:= 1, 1_000_000 do [];<br/>T1:= GetTime;<br/>IntOut(0, T1-T0); Text(0, \" microseconds^M^J\");<br/>]</pre>"}, {"lang": "Yabasic", "loc": 14, "block": "<pre class=\"text highlighted_source\">sub count(n)<br/>\tlocal i<br/>\u00a0<br/>\tfor i = 1 to n<br/>\tnext i<br/>end sub<br/>\u00a0<br/>count(1000000)<br/>\u00a0<br/>print peek(\"millisrunning\"), \" milliseconds\"<br/>\u00a0<br/>t0 = peek(\"millisrunning\")<br/>count(10000000)<br/>print peek(\"millisrunning\")-t0, \" milliseconds\"</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">t:=Time.Clock.time; Atomic.sleep(3); (Time.Clock.time - t).println();</pre>"}]}