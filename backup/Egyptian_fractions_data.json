{"task": "Egyptian_fractions", "blocks": [{"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> egyption-fractions <span class=\"br0\">(</span>x y <span class=\"sy0\">&amp;</span>optional acc<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span>/ x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>numerator a<span class=\"br0\">)</span> <span class=\"br0\">(</span>denominator a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>q r<span class=\"br0\">)</span> <span class=\"br0\">(</span>floor x y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> r<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> q acc<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>egyption-fractions r y <span class=\"br0\">(</span><span class=\"kw1\">cons</span> q acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>numerator a<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> a acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"br0\">(</span>ceiling y x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>egyption-fractions <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>- y<span class=\"br0\">)</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>* y b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>/ b<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> test <span class=\"br0\">(</span>n fn<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to n <span class=\"kw1\">append</span><br/>\t\t   <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">2</span> to n collect<br/>\t\t\t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>/ i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fn <span class=\"br0\">(</span>egyption-fractions i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     #'<span class=\"sy0\">&gt;</span><br/>\t     <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'<span class=\"kw1\">cdr</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 48, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span><br/>       arithmetic_rational<span class=\"sy0\">:</span> Rat <span class=\"sy0\">=</span> Rational<span class=\"sy0\">;</span><br/>\u00a0<br/>Rat<span class=\"br0\">[</span><span class=\"br0\">]</span> egyptian<span class=\"br0\">(</span>Rat r<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r.<span class=\"me1\">denominator</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>r<span class=\"sy0\">,</span> Rat<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        result <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Rat<span class=\"br0\">(</span>r.<span class=\"me1\">numerator</span> <span class=\"sy0\">/</span> r.<span class=\"me1\">denominator</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">-=</span> result<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> BigInt m<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> BigInt n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>r.<span class=\"me1\">numerator</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r.<span class=\"me1\">denominator</span> <span class=\"sy0\">+</span> r.<span class=\"me1\">numerator</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> r.<span class=\"me1\">numerator</span><span class=\"sy0\">;</span><br/>        result <span class=\"sy0\">~=</span> Rat<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> Rat<span class=\"br0\">(</span>mod<span class=\"br0\">(</span><span class=\"sy0\">-</span>r.<span class=\"me1\">denominator</span><span class=\"sy0\">,</span> r.<span class=\"me1\">numerator</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> r.<span class=\"me1\">denominator</span> <span class=\"sy0\">*</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    result <span class=\"sy0\">~=</span> r<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"br0\">[</span>Rat<span class=\"br0\">(</span><span class=\"nu0\">43</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Rat<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Rat<span class=\"br0\">(</span><span class=\"nu0\">2014</span><span class=\"sy0\">,</span> <span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s =&gt;\u00a0%(%s\u00a0%)\"</span><span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> r.<span class=\"me1\">egyptian</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span><span class=\"sy0\">,</span> Rat<span class=\"br0\">)</span> lenMax<span class=\"sy0\">;</span><br/>    Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>BigInt<span class=\"sy0\">,</span> Rat<span class=\"br0\">)</span> denomMax<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">cartesianProduct</span><span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>nd <span class=\"sy0\">=&gt;</span> nd<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">Rat</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> e <span class=\"sy0\">=</span> r.<span class=\"me1\">egyptian</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> eLen <span class=\"sy0\">=</span> e.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> eDenom <span class=\"sy0\">=</span> e.<span class=\"me1\">back</span>.<span class=\"me1\">denominator</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>eLen <span class=\"sy0\">&gt;</span> lenMax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            lenMax <span class=\"sy0\">=</span> tuple<span class=\"br0\">(</span>eLen<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>eDenom <span class=\"sy0\">&gt;</span> denomMax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            denomMax <span class=\"sy0\">=</span> tuple<span class=\"br0\">(</span>eDenom<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Term max is\u00a0%s with\u00a0%d terms\"</span><span class=\"sy0\">,</span> lenMax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lenMax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dStr <span class=\"sy0\">=</span> denomMax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Denominator max is\u00a0%s with\u00a0%d digits\u00a0%s...%s\"</span><span class=\"sy0\">,</span><br/>             denomMax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dStr.<span class=\"me1\">length</span><span class=\"sy0\">,</span> dStr<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dStr<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">5</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 169, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 16-01-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define max 30</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> Mpz_ptr num<span class=\"br0\">(</span>max<span class=\"br0\">)</span>, den<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Egyptian_fraction<span class=\"br0\">(</span>fraction <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, <span class=\"kw1\">ByRef</span> whole <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, range <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">InStr</span><span class=\"br0\">(</span>fraction,<span class=\"st0\">\"/\"</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Not a fraction, program will end\"</span><br/>        <span class=\"kw1\">Sleep</span> <span class=\"nu0\">5000</span>, <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, count<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Mpz_ptr tmp_num, tmp_den, x, y, q<br/>    tmp_num = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>tmp_num<span class=\"br0\">)</span><br/>    tmp_den = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>tmp_den<span class=\"br0\">)</span><br/>    x = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    y = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    q = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max <span class=\"co1\">' clear the list</span><br/>        Mpz_set_ui<span class=\"br0\">(</span>num<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        Mpz_set_ui<span class=\"br0\">(</span>den<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    i = <span class=\"kw1\">InStr</span><span class=\"br0\">(</span>fraction,<span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><br/>    Mpz_set_str<span class=\"br0\">(</span>x, <span class=\"kw1\">Left</span><span class=\"br0\">(</span>fraction, i -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    Mpz_set_str<span class=\"br0\">(</span>y, <span class=\"kw1\">Right</span><span class=\"br0\">(</span>fraction, <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fraction<span class=\"br0\">)</span> - i<span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' if it's a improper fraction make it proper fraction</span><br/>    <span class=\"kw1\">If</span> Mpz_cmp<span class=\"br0\">(</span>x , y<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span>  <span class=\"kw1\">Then</span><br/>        Mpz_fdiv_q<span class=\"br0\">(</span>q, x, y<span class=\"br0\">)</span><br/>        whole = Mpz_get_ui<span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>        Mpz_fdiv_r<span class=\"br0\">(</span>x, x, q<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>        whole = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    Mpz_gcd<span class=\"br0\">(</span>q, x, y<span class=\"br0\">)</span> <span class=\"co1\">' check if reduction is possible</span><br/>    <span class=\"kw1\">If</span> Mpz_cmp_ui<span class=\"br0\">(</span>q, <span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">If</span> range &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"co1\">' return if we do a range test</span><br/>            <span class=\"kw1\">Return</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Else</span><br/>            Mpz_fdiv_q<span class=\"br0\">(</span>x, x, q<span class=\"br0\">)</span><br/>            Mpz_fdiv_q<span class=\"br0\">(</span>y, y, q<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    Mpz_set<span class=\"br0\">(</span>num<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, x<span class=\"br0\">)</span><br/>    Mpz_set<span class=\"br0\">(</span>den<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, y<span class=\"br0\">)</span><br/>    <span class=\"co1\">' Fibonacci's Greedy algorithm for Egyptian fractions</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">If</span> Mpz_cmp_ui<span class=\"br0\">(</span>num<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>        Mpz_set<span class=\"br0\">(</span>x, num<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        Mpz_set<span class=\"br0\">(</span>y, den<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        Mpz_cdiv_q<span class=\"br0\">(</span>q, y, x<span class=\"br0\">)</span><br/>        Mpz_set_ui<span class=\"br0\">(</span>num<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        Mpz_set<span class=\"br0\">(</span>den<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, q<span class=\"br0\">)</span><br/>        Mpz_mul<span class=\"br0\">(</span>tmp_den, y, q<span class=\"br0\">)</span><br/>        Mpz_neg<span class=\"br0\">(</span>y, y<span class=\"br0\">)</span><br/>        Mpz_mod<span class=\"br0\">(</span>tmp_num, y, x<span class=\"br0\">)</span><br/>        count += <span class=\"nu0\">1</span><br/>        Mpz_gcd<span class=\"br0\">(</span>q, tmp_num, tmp_den<span class=\"br0\">)</span> <span class=\"co1\">' check if reduction is possible</span><br/>        <span class=\"kw1\">If</span> Mpz_cmp_ui<span class=\"br0\">(</span>q, <span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            Mpz_fdiv_q<span class=\"br0\">(</span>tmp_num, tmp_num, q<span class=\"br0\">)</span><br/>            Mpz_fdiv_q<span class=\"br0\">(</span>tmp_den, tmp_den, q<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        Mpz_set<span class=\"br0\">(</span>num<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, tmp_num<span class=\"br0\">)</span><br/>        Mpz_set<span class=\"br0\">(</span>den<span class=\"br0\">(</span>count<span class=\"br0\">)</span>, tmp_den<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Loop</span><br/>\u00a0<br/>    Mpz_clear<span class=\"br0\">(</span>tmp_num<span class=\"br0\">)</span>\u00a0: Mpz_clear<span class=\"br0\">(</span>tmp_den<span class=\"br0\">)</span><br/>    Mpz_clear<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\u00a0: Mpz_clear<span class=\"br0\">(</span>y<span class=\"br0\">)</span>\u00a0:Mpz_clear<span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> count<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> prt_solution<span class=\"br0\">(</span>fraction <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, whole <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> fraction; <span class=\"st0\">\" = \"</span>;<br/>\u00a0<br/>    <span class=\"kw1\">If</span> whole &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"[\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>whole<span class=\"br0\">)</span>; <span class=\"st0\">\"] + \"</span>;<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> count<br/>        Gmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"%Zd/%Zd \"</span>, num<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, den<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> i &lt;&gt; count <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"+ \"</span>;<br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n, d, number, improper, max_term,  max_size<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> str_in, max_term_str, max_size_str, m_str<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span> gmp_str\u00a0: gmp_str = Allocate<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> max<br/>    num<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>num<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    den<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>den<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"43/48\"</span>, <span class=\"st0\">\"5/121\"</span>, <span class=\"st0\">\"2014/59\"</span><br/><span class=\"co1\">' 4/121 = 12/363 = 11/363 + 1/363 = 1/33 + 1/363</span><br/><span class=\"co1\">' 5/121 = 4/121 + 1/121 = 1/33 + 1/121 + 1/363</span><br/><span class=\"co1\">' 2014/59 = 34 + 8/59</span><br/><span class=\"co1\">' 8/59 = 1/8 + 5/472 = 1/8 + 4/472 + 1/472 = 1/8 + 1/118 + 1/472</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">Read</span> str_in<br/>    number = Egyptian_fraction<span class=\"br0\">(</span>str_in, improper<span class=\"br0\">)</span><br/>    prt_solution<span class=\"br0\">(</span>str_in, improper, number<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> a = <span class=\"nu0\">1</span> , b = <span class=\"nu0\">99</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">For</span> d = a <span class=\"kw1\">To</span> b<br/>        <span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> d -<span class=\"nu0\">1</span><br/>            str_in = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> + <span class=\"st0\">\"/\"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>            number = Egyptian_fraction<span class=\"br0\">(</span>str_in, improper,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> number = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span> <span class=\"co1\">' skip</span><br/>            <span class=\"kw1\">If</span> number &gt; max_term <span class=\"kw1\">Then</span><br/>                max_term = number<br/>                max_term_str = str_in<br/>            <span class=\"kw1\">ElseIf</span> number = max_term <span class=\"kw1\">Then</span><br/>                max_term_str += <span class=\"st0\">\", \"</span> &amp; str_in<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            Mpz_get_str<span class=\"br0\">(</span>gmp_str, <span class=\"nu0\">10</span>, den<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>*gmp_str<span class=\"br0\">)</span> &gt; max_size <span class=\"kw1\">Then</span><br/>                max_size = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>*gmp_str<span class=\"br0\">)</span><br/>                max_size_str = str_in<br/>                m_str = *gmp_str<br/>            <span class=\"kw1\">ElseIf</span> max_size = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>*gmp_str<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                max_size_str += <span class=\"st0\">\", \"</span> &amp; str_in<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"for 1 to\"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" digits\"</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Largest number of terms is\"</span>; max_term +<span class=\"nu0\">1</span>; <span class=\"st0\">\" for \"</span>; max_term_str<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Largest size for denominator is\"</span>; max_size; <span class=\"st0\">\" for \"</span>; max_size_str<br/>\u00a0<br/>    <span class=\"kw1\">If</span> b = <span class=\"nu0\">999</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    a = b +<span class=\"nu0\">1</span>\u00a0: b = b * <span class=\"nu0\">10</span> +<span class=\"nu0\">9</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> max<br/>    Mpz_clear<span class=\"br0\">(</span>num<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Mpz_clear<span class=\"br0\">(</span>den<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">DeAllocate</span><span class=\"br0\">(</span>gmp_str<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 137, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> zero <span class=\"sy2\">=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> one <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> toEgyptianRecursive<span class=\"sy1\">(</span>br <span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">,</span> fracs <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> br<span class=\"sy3\">.</span>Num<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>zero<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> fracs<br/>    <span class=\"sy1\">}</span><br/>    iquo <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    irem <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    iquo<span class=\"sy3\">.</span>QuoRem<span class=\"sy1\">(</span>br<span class=\"sy3\">.</span>Denom<span class=\"sy1\">(),</span> br<span class=\"sy3\">.</span>Num<span class=\"sy1\">(),</span> irem<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> irem<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>zero<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        iquo<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>iquo<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    rquo <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetFrac<span class=\"sy1\">(</span>one<span class=\"sy1\">,</span> iquo<span class=\"sy1\">)</span><br/>    fracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>fracs<span class=\"sy1\">,</span> rquo<span class=\"sy1\">)</span><br/>    num2 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Neg<span class=\"sy1\">(</span>br<span class=\"sy3\">.</span>Denom<span class=\"sy1\">())</span><br/>    num2<span class=\"sy3\">.</span>Rem<span class=\"sy1\">(</span>num2<span class=\"sy1\">,</span> br<span class=\"sy3\">.</span>Num<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">if</span> num2<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>zero<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        num2<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>num2<span class=\"sy1\">,</span> br<span class=\"sy3\">.</span>Num<span class=\"sy1\">())</span><br/>    <span class=\"sy1\">}</span><br/>    denom2 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    denom2<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>br<span class=\"sy3\">.</span>Denom<span class=\"sy1\">(),</span> iquo<span class=\"sy1\">)</span><br/>    f <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetFrac<span class=\"sy1\">(</span>num2<span class=\"sy1\">,</span> denom2<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> f<span class=\"sy3\">.</span>Num<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>one<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        fracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>fracs<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> fracs<br/>    <span class=\"sy1\">}</span><br/>    fracs <span class=\"sy2\">=</span> toEgyptianRecursive<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> fracs<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> fracs<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> toEgyptian<span class=\"sy1\">(</span>rat <span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> rat<span class=\"sy3\">.</span>Num<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>zero<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">{</span>rat<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> fracs <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<br/>    <span class=\"kw1\">if</span> rat<span class=\"sy3\">.</span>Num<span class=\"sy1\">()</span><span class=\"sy3\">.</span>CmpAbs<span class=\"sy1\">(</span>rat<span class=\"sy3\">.</span>Denom<span class=\"sy1\">())</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        iquo <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>        iquo<span class=\"sy3\">.</span>Quo<span class=\"sy1\">(</span>rat<span class=\"sy3\">.</span>Num<span class=\"sy1\">(),</span> rat<span class=\"sy3\">.</span>Denom<span class=\"sy1\">())</span><br/>        rquo <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetFrac<span class=\"sy1\">(</span>iquo<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span><br/>        rrem <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><br/>        rrem<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>rat<span class=\"sy1\">,</span> rquo<span class=\"sy1\">)</span><br/>        fracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>fracs<span class=\"sy1\">,</span> rquo<span class=\"sy1\">)</span><br/>        fracs <span class=\"sy2\">=</span> toEgyptianRecursive<span class=\"sy1\">(</span>rrem<span class=\"sy1\">,</span> fracs<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fracs <span class=\"sy2\">=</span> toEgyptianRecursive<span class=\"sy1\">(</span>rat<span class=\"sy1\">,</span> fracs<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> fracs<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fracs <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">{</span>big<span class=\"sy3\">.</span>NewRat<span class=\"sy1\">(</span><span class=\"nu0\">43</span><span class=\"sy1\">,</span> <span class=\"nu0\">48</span><span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewRat<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">121</span><span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewRat<span class=\"sy1\">(</span><span class=\"nu0\">2014</span><span class=\"sy1\">,</span> <span class=\"nu0\">59</span><span class=\"sy1\">)}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> frac <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> fracs <span class=\"sy1\">{</span><br/>        list <span class=\"sy2\">:=</span> toEgyptian<span class=\"sy1\">(</span>frac<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> list<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Denom<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>one<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            first <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"[%v]\"</span><span class=\"sy1\">,</span> list<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Num<span class=\"sy1\">())</span><br/>            temp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                temp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/>            <span class=\"sy1\">}</span><br/>            rest <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>temp<span class=\"sy1\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy1\">)</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%v -&gt;\u00a0%v +\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> frac<span class=\"sy1\">,</span> first<span class=\"sy1\">,</span> rest<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            temp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">))</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                temp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/>            <span class=\"sy1\">}</span><br/>            all <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>temp<span class=\"sy1\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy1\">)</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%v -&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> frac<span class=\"sy1\">,</span> all<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">98</span><span class=\"sy1\">,</span> <span class=\"nu0\">998</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">98</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>For proper fractions with 1 or 2 digits:\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>For proper fractions with 1, 2 or 3 digits:\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        maxSize <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">var</span> maxSizeFracs <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<br/>        maxDen <span class=\"sy2\">:=</span> zero<br/>        <span class=\"kw1\">var</span> maxDenFracs <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat<br/>        <span class=\"kw1\">var</span> sieve <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// to eliminate duplicates</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> r<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            sieve<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> r<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> r<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> sieve<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                f <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewRat<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">),</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>j<span class=\"sy1\">))</span><br/>                list <span class=\"sy2\">:=</span> toEgyptian<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>                listSize <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> listSize &gt; maxSize <span class=\"sy1\">{</span><br/>                    maxSize <span class=\"sy2\">=</span> listSize<br/>                    maxSizeFracs <span class=\"sy2\">=</span> maxSizeFracs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                    maxSizeFracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>maxSizeFracs<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> listSize <span class=\"sy3\">==</span> maxSize <span class=\"sy1\">{</span><br/>                    maxSizeFracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>maxSizeFracs<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                listDen <span class=\"sy2\">:=</span> list<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Denom<span class=\"sy1\">()</span><br/>                <span class=\"kw1\">if</span> listDen<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>maxDen<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    maxDen <span class=\"sy2\">=</span> listDen<br/>                    maxDenFracs <span class=\"sy2\">=</span> maxDenFracs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                    maxDenFracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>maxDenFracs<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> listDen<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>maxDen<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    maxDenFracs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>maxDenFracs<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; r<span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>                    k <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><br/>                    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy3\">*</span>k &gt; r<span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                            <span class=\"kw1\">break</span><br/>                        <span class=\"sy1\">}</span><br/>                        sieve<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>k<span class=\"sy1\">][</span>j<span class=\"sy3\">*</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>                        k<span class=\"sy2\">++</span><br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  largest number of items =\"</span><span class=\"sy1\">,</span> maxSize<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  fraction(s) with this number\u00a0:\"</span><span class=\"sy1\">,</span> maxSizeFracs<span class=\"sy1\">)</span><br/>        md <span class=\"sy2\">:=</span> maxDen<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">()</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"  largest denominator = \"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>md<span class=\"sy1\">),</span> <span class=\"st0\">\" digits, \"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>md<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">20</span><span class=\"sy1\">],</span> <span class=\"st0\">\"...\"</span><span class=\"sy1\">,</span> md<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>md<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">20</span><span class=\"sy1\">:],</span> <span class=\"st0\">\"<span class=\"es1\">\\b</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  fraction(s) with this denominator\u00a0:\"</span><span class=\"sy1\">,</span> maxDenFracs<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Ratio<br/>\u00a0<br/>egiptianFraction <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> Ratio a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Ratio a<span class=\"br0\">]</span><br/>egiptianFraction n<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> <span class=\"br0\">(</span>egiptianFraction <span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> x <span class=\"sy0\">&gt;</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` y <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: egiptianFraction <span class=\"br0\">(</span>x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` y <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">%</span> r<span class=\"br0\">)</span>\u00a0: egiptianFraction <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>y<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` x <span class=\"sy0\">%</span> <span class=\"br0\">(</span>y<span class=\"sy0\">*</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> x <span class=\"sy0\">=</span> numerator n<br/>        y <span class=\"sy0\">=</span> denominator n<br/>        r <span class=\"sy0\">=</span> y `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   ef   =: [: <span class=\"sy0\">(</span>}.~ <span class=\"nu0\">0</span>={.<span class=\"sy0\">)</span> [: <span class=\"sy0\">(</span>, r2ef<span class=\"sy0\">)</span>/ <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> #: x: <br/>   r2ef =: <span class=\"sy0\">(</span>&lt;<span class=\"sy0\">(</span>&lt;<span class=\"nu0\">0</span><span class=\"sy0\">)</span>;<span class=\"nu0\">0</span><span class=\"sy0\">)</span> { <span class=\"sy0\">((</span>] , -<span class=\"sy0\">)</span> &gt;:@:&lt;.&amp;.%<span class=\"sy0\">)</span>^:<span class=\"sy0\">((</span>~:&lt;.<span class=\"sy0\">)</span>@:%<span class=\"sy0\">)</span>@:{:^:a:</pre>"}, {"lang": "Java", "loc": 211, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigDecimal</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.math.MathContext</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> EgyptianFractions <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> gcd<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> gcd<span class=\"br0\">(</span>b, a.<span class=\"me1\">mod</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Frac <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> num, denom<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Frac<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Parameter d may not be zero.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> dd <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nn.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dd.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nn <span class=\"sy0\">=</span> nn.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                dd <span class=\"sy0\">=</span> dd.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> g <span class=\"sy0\">=</span> gcd<span class=\"br0\">(</span>nn, dd<span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nn <span class=\"sy0\">=</span> nn.<span class=\"me1\">divide</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                dd <span class=\"sy0\">=</span> dd.<span class=\"me1\">divide</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            num <span class=\"sy0\">=</span> nn<span class=\"sy0\">;</span><br/>            denom <span class=\"sy0\">=</span> dd<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Frac<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Frac plus<span class=\"br0\">(</span>Frac rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span><br/>                num.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">denom</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>denom.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">num</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                rhs.<span class=\"me1\">denom</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>denom<span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Frac unaryMinus<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span>num.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, denom<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Frac minus<span class=\"br0\">(</span>Frac rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> plus<span class=\"br0\">(</span>rhs.<span class=\"me1\">unaryMinus</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>Frac rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> diff <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>rhs.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>diff.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a>.<span class=\"me1\">ZERO</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>diff<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> equals<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">null</span> <span class=\"sy0\">==</span> obj <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>obj <span class=\"kw1\">instanceof</span> Frac<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Frac rhs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Frac<span class=\"br0\">)</span> obj<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> compareTo<span class=\"br0\">(</span>rhs<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>denom.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> num.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s/%s\"</span>, num, denom<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> toBigDecimal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> bdn <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> bdd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">(</span>denom<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> bdn.<span class=\"me1\">divide</span><span class=\"br0\">(</span>bdd, MathContext.<span class=\"me1\">DECIMAL128</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> toEgyptian<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">singletonList</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> fracs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>denom.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Frac div <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span>num.<span class=\"me1\">divide</span><span class=\"br0\">(</span>denom<span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Frac rem <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">minus</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                toEgyptian<span class=\"br0\">(</span>rem.<span class=\"me1\">num</span>, rem.<span class=\"me1\">denom</span>, fracs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                toEgyptian<span class=\"br0\">(</span>num, denom, fracs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> fracs<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> toEgyptian<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> d, List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> fracs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> n2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> d2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> divRem <span class=\"sy0\">=</span> d2.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>n2, MathContext.<span class=\"me1\">UNLIMITED</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> div <span class=\"sy0\">=</span> divRem<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divRem<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                div <span class=\"sy0\">=</span> div.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span>, div<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n3 <span class=\"sy0\">=</span> d.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">mod</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n3.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                n3 <span class=\"sy0\">=</span> n3.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> d3 <span class=\"sy0\">=</span> d.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Frac f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span>n3, d3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">num</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            toEgyptian<span class=\"br0\">(</span>f.<span class=\"me1\">num</span>, f.<span class=\"me1\">denom</span>, fracs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> fracs <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><br/>            <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">43</span>, <span class=\"nu0\">48</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">121</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span><span class=\"nu0\">2014</span>, <span class=\"nu0\">59</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Frac frac <span class=\"sy0\">:</span> fracs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> frac.<span class=\"me1\">toEgyptian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Frac first <span class=\"sy0\">=</span> list.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first.<span class=\"me1\">denom</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -&gt; [%s] + \"</span>, frac, first<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -&gt;\u00a0%s\"</span>, frac, first<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" +\u00a0%s\"</span>, list.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> r <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">98</span>, <span class=\"nu0\">998</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">98</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>For proper fractions with 1 or 2 digits:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>For proper fractions with 1, 2 or 3 digits:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> maxSize <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> maxSizeFracs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> maxDen <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> maxDenFracs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sieve <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> r<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    Frac f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Frac<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> f.<span class=\"me1\">toEgyptian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> listSize <span class=\"sy0\">=</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>listSize <span class=\"sy0\">&gt;</span> maxSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        maxSize <span class=\"sy0\">=</span> listSize<span class=\"sy0\">;</span><br/>                        maxSizeFracs.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        maxSizeFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>listSize <span class=\"sy0\">==</span> maxSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        maxSizeFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> listDen <span class=\"sy0\">=</span> list.<span class=\"me1\">get</span><span class=\"br0\">(</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">denom</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>listDen.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>maxDen<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        maxDen <span class=\"sy0\">=</span> listDen<span class=\"sy0\">;</span><br/>                        maxDenFracs.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        maxDenFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>listDen.<span class=\"me1\">equals</span><span class=\"br0\">(</span>maxDen<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        maxDenFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> r <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">*</span> k <span class=\"sy0\">&gt;</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                            sieve<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> k<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">*</span> k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                            k<span class=\"sy0\">++;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"  largest number of items =\u00a0%s<span class=\"es0\">\\n</span>\"</span>, maxSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"fraction(s) with this number\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, maxSizeFracs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> md <span class=\"sy0\">=</span> maxDen.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"  largest denominator =\u00a0%s digits, \"</span>, md.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s...%s<span class=\"es0\">\\n</span>\"</span>, md.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>, md.<span class=\"me1\">substring</span><span class=\"br0\">(</span>md.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">20</span>, md.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"fraction(s) with this denominator\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, maxDenFracs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 66, "block": "<pre class=\"text highlighted_source\">struct EgyptianFraction{T&lt;:Integer} &lt;: Real<br/>    int::T<br/>    frac::NTuple{N,Rational{T}} where N<br/>end<br/>\u00a0<br/>Base.show(io::IO, ef::EgyptianFraction) = println(io, \"[\", ef.int, \"] \", join(ef.frac, \" + \"))<br/>Base.length(ef::EgyptianFraction) =\u00a0!iszero(ef.int) + length(ef.frac)<br/>function Base.convert(::Type{EgyptianFraction{T}}, fr::Rational) where T<br/>    fr, int::T = modf(fr)<br/>    fractions = Vector{Rational{T}}(0)<br/>    x::T, y::T = numerator(fr), denominator(fr)<br/>    iszero(x) &amp;&amp; return EgyptianFraction{T}(int, (x // y,))<br/>    while x\u00a0!= one(x)<br/>        push!(fractions, one(T) // cld(y, x))<br/>        x, y = mod1(-y, x), y * cld(y, x)<br/>        d = gcd(x, y)<br/>        x \u00f7= d<br/>        y \u00f7= d<br/>    end<br/>    push!(fractions, x // y)<br/>    return EgyptianFraction{T}(int, tuple(fractions...))<br/>end<br/>Base.convert(::Type{EgyptianFraction}, fr::Rational{T}) where T = convert(EgyptianFraction{T}, fr)<br/>Base.convert(::Type{EgyptianFraction{T}}, fr::EgyptianFraction) where T = EgyptianFraction{T}(convert(T, fr.int), convert.(Rational{T}, fr.frac))<br/>Base.convert(::Type{Rational{T}}, fr::EgyptianFraction) where T = T(fr.int) + sum(convert.(Rational{T}, fr.frac))<br/>Base.convert(::Type{Rational}, fr::EgyptianFraction{T}) where T = convert(Rational{T}, fr)<br/>\u00a0<br/>@show EgyptianFraction(43 // 48)<br/>@show EgyptianFraction{BigInt}(5 // 121)<br/>@show EgyptianFraction(2014 // 59)<br/>\u00a0<br/>function task(fractions::AbstractVector)<br/>    fracs = convert(Vector{EgyptianFraction{BigInt}}, fractions)<br/>    local frlenmax::EgyptianFraction{BigInt}<br/>    local lenmax = 0<br/>    local frdenmax::EgyptianFraction{BigInt}<br/>    local denmax = 0<br/>    for f in fracs<br/>        if length(f) \u2265 lenmax<br/>            lenmax = length(f)<br/>            frlenmax = f<br/>        end<br/>        if denominator(last(f.frac)) \u2265 denmax<br/>            denmax = denominator(last(f.frac))<br/>            frdenmax = f<br/>        end<br/>    end<br/>    return frlenmax, lenmax, frdenmax, denmax<br/>end<br/>\u00a0<br/>fr = collect((x // y) for x in 1:100 for y in 1:100 if x\u00a0!= y) |&gt; unique<br/>frlenmax, lenmax, frdenmax, denmax = task(fr)<br/>println(\"Longest fraction, with length $lenmax: \\n\", Rational(frlenmax), \"\\n = \", frlenmax)<br/>println(\"Fraction with greatest denominator\\n(that is $denmax):\\n\", Rational(frdenmax), \"\\n = \", frdenmax)<br/>\u00a0<br/>println(\"\\n# For 1 digit-integers:\")<br/>fr = collect((x // y) for x in 1:10 for y in 1:10 if x\u00a0!= y) |&gt; unique<br/>frlenmax, lenmax, frdenmax, denmax = task(fr)<br/>println(\"Longest fraction, with length $lenmax: \\n\", Rational(frlenmax), \"\\n = \", frlenmax)<br/>println(\"Fraction with greatest denominator\\n(that is $denmax):\\n\", Rational(frdenmax), \"\\n = \", frdenmax)<br/>\u00a0<br/>println(\"# For 3 digit-integers:\")<br/>fr = collect((x // y) for x in 1:1000 for y in 1:1000 if x\u00a0!= y) |&gt; unique<br/>frlenmax, lenmax, frdenmax, denmax = task(fr)<br/>println(\"Longest fraction, with length $lenmax: \\n\", Rational(frlenmax), \"\\n = \", frlenmax)<br/>println(\"Fraction with greatest denominator\\n(that is $denmax):\\n\", Rational(frdenmax), \"\\n = \", frdenmax)</pre>"}, {"lang": "Kotlin", "loc": 168, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigDecimal</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">MathContext</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigZero <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ZERO</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigOne  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ONE</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bdZero  <span class=\"sy0\">=</span> BigDecimal.<span class=\"me1\">ZERO</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> context <span class=\"sy0\">=</span> MathContext.<span class=\"me1\">UNLIMITED</span><br/>\u00a0<br/>fun gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> BigInteger, b<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInteger<br/>    <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> bigZero<span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> gcd<span class=\"br0\">(</span>b, a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Frac <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num<span class=\"sy0\">:</span> BigInteger<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom<span class=\"sy0\">:</span> BigInteger<br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger, d<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        require<span class=\"br0\">(</span>d <span class=\"sy0\">!=</span> bigZero<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dd <span class=\"sy0\">=</span> d<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> bigZero<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dd <span class=\"sy0\">=</span> bigOne<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dd <span class=\"sy0\">&lt;</span> bigZero<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn <span class=\"sy0\">=</span> -nn<br/>            dd <span class=\"sy0\">=</span> -dd<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gcd<span class=\"br0\">(</span>nn, dd<span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>g <span class=\"sy0\">&gt;</span> bigOne<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn /<span class=\"sy0\">=</span> g<br/>            dd /<span class=\"sy0\">=</span> g<br/>        <span class=\"br0\">}</span><br/>        num <span class=\"sy0\">=</span> nn<br/>        denom <span class=\"sy0\">=</span> dd<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>n.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, d.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun plus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Frac<span class=\"br0\">(</span>num <span class=\"sy0\">*</span> other.<span class=\"me1\">denom</span> + denom <span class=\"sy0\">*</span> other.<span class=\"me1\">num</span>, other.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> denom<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun unaryMinus<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span>-num, denom<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun minus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + <span class=\"br0\">(</span>-other<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Frac<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - other.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> when <span class=\"br0\">{</span><br/>            diff <span class=\"sy0\">&lt;</span> bdZero  -<span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span><br/>            diff <span class=\"sy0\">&gt;</span> bdZero  -<span class=\"sy0\">&gt;</span> +<span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>           -<span class=\"sy0\">&gt;</span>  <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun equals<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Any<span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>other <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || other <span class=\"sy0\">!</span>is Frac<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>denom <span class=\"sy0\">==</span> bigOne<span class=\"br0\">)</span> <span class=\"st0\">\"$num\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"$num/$denom\"</span><br/>\u00a0<br/>    fun toBigDecimal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> / denom.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun toEgyptian<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num <span class=\"sy0\">==</span> bigZero<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> listOf<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fracs <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> denom.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> div <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span>num / denom, bigOne<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rem <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - div<br/>            fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><br/>            toEgyptian<span class=\"br0\">(</span>rem.<span class=\"me1\">num</span>, rem.<span class=\"me1\">denom</span>, fracs<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            toEgyptian<span class=\"br0\">(</span>num, denom, fracs<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fracs     <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> tailrec fun toEgyptian<span class=\"br0\">(</span><br/>        n<span class=\"sy0\">:</span> BigInteger, <br/>        d<span class=\"sy0\">:</span> BigInteger,<br/>        fracs<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> bigZero<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n2 <span class=\"sy0\">=</span> n.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d2 <span class=\"sy0\">=</span> d.<span class=\"me1\">toBigDecimal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> divRem <span class=\"sy0\">=</span> d2.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>n2, context<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> div <span class=\"sy0\">=</span> divRem<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>divRem<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> bdZero<span class=\"br0\">)</span> div++<br/>        fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>Frac<span class=\"br0\">(</span>bigOne, div<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>-d<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n3 <span class=\"sy0\">&lt;</span> bigZero<span class=\"br0\">)</span> n3 +<span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d3 <span class=\"sy0\">=</span> d <span class=\"sy0\">*</span> div<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span>n3, d3<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>f.<span class=\"me1\">num</span> <span class=\"sy0\">==</span> bigOne<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        toEgyptian<span class=\"br0\">(</span>f.<span class=\"me1\">num</span>, f.<span class=\"me1\">denom</span>, fracs<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fracs <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Frac<span class=\"br0\">(</span><span class=\"nu0\">43</span>, <span class=\"nu0\">48</span><span class=\"br0\">)</span>, Frac<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">121</span><span class=\"br0\">)</span>, Frac<span class=\"br0\">(</span><span class=\"nu0\">2014</span>,<span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>frac in fracs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> frac.<span class=\"me1\">toEgyptian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>list<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">denom</span> <span class=\"sy0\">==</span> bigOne<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> first <span class=\"sy0\">=</span> <span class=\"st0\">\"[${list[0]}]\"</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$frac -&gt; $first + ${list.drop(1).joinToString(\"</span> + <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$frac -&gt; ${list.joinToString(\"</span> + <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in listOf<span class=\"br0\">(</span><span class=\"nu0\">98</span>, <span class=\"nu0\">998</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">98</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>For proper fractions with 1 or 2 digits:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>For proper fractions with 1, 2 or 3 digits:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxSize <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxSizeFracs <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxDen <span class=\"sy0\">=</span> bigZero<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxDenFracs <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Frac<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sieve <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>r + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> BooleanArray<span class=\"br0\">(</span>r + <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>  <span class=\"co1\">// to eliminate duplicates</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>r + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> continue<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> Frac<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> f.<span class=\"me1\">toEgyptian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> listSize <span class=\"sy0\">=</span> list.<span class=\"me1\">size</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>listSize <span class=\"sy0\">&gt;</span> maxSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    maxSize <span class=\"sy0\">=</span> listSize<br/>                    maxSizeFracs.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    maxSizeFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>listSize <span class=\"sy0\">==</span> maxSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    maxSizeFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> listDen <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>list.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span>.<span class=\"me1\">denom</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>listDen <span class=\"sy0\">&gt;</span> maxDen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    maxDen <span class=\"sy0\">=</span> listDen<br/>                    maxDenFracs.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    maxDenFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>listDen <span class=\"sy0\">==</span> maxDen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    maxDenFracs.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> r / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>                   <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">*</span> k <span class=\"sy0\">&gt;</span> r + <span class=\"nu0\">1</span><span class=\"br0\">)</span> break<br/>                       sieve<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> k<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">*</span> k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                       k++<br/>                   <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span>            <br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  largest number of items = $maxSize\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  fraction(s) with this number\u00a0: $maxSizeFracs\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md <span class=\"sy0\">=</span> maxDen.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"  largest denominator = ${md.length} digits, \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${md.take(20)}...${md.takeLast(20)}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  fraction(s) with this denominator\u00a0: $maxDenFracs\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 22, "block": "<pre class=\"text highlighted_source\">frac[n_] /; IntegerQ[1/n]\u00a0:= frac[n] = {n};<br/>frac[n_]\u00a0:= <br/>  frac[n] = <br/>   With[{p = Numerator[n], q = Denominator[n]}, <br/>    Prepend[frac[Mod[-q, p]/(q Ceiling[1/n])], 1/Ceiling[1/n]]];<br/>disp[f_]\u00a0:= <br/>  StringRiffle[<br/>    SequenceCases[f, <br/>     l\u00a0: {_, 1 ...}\u00a0:&gt; <br/>      If[Length[l] == 1 &amp;&amp; l[[1]] &lt; 1, ToString[l[[1]], InputForm], <br/>       \"[\" &lt;&gt; ToString[Length[l]] &lt;&gt; \"]\"]], \" + \"] &lt;&gt; \" = \" &lt;&gt; <br/>   ToString[Numerator[Total[f]]] &lt;&gt; \"/\" &lt;&gt; <br/>   ToString[Denominator[Total[f]]];<br/>Print[disp[frac[43/48]]];<br/>Print[disp[frac[5/121]]];<br/>Print[disp[frac[2014/59]]];<br/>fracs = Flatten[Table[frac[p/q], {q, 99}, {p, q}], 1];<br/>Print[disp[MaximalBy[fracs, <a class=\"__cf_email__\" data-cfemail=\"1f537a71786b775f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*Union][[1]]]];<br/>Print[disp[MaximalBy[fracs, <a class=\"__cf_email__\" data-cfemail=\"387c5d5657555156594c574a78\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*Last][[1]]]];<br/>fracs = Flatten[Table[frac[p/q], {q, 999}, {p, q}], 1];<br/>Print[disp[MaximalBy[fracs, <a class=\"__cf_email__\" data-cfemail=\"4408212a23302c04\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*Union][[1]]]];<br/>Print[disp[MaximalBy[fracs, <a class=\"__cf_email__\" data-cfemail=\"9fdbfaf1f0f2f6f1feebf0eddf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*Last][[1]]]];</pre>"}, {"lang": "Microsoft Small Basic", "loc": 54, "block": "<pre class=\"text highlighted_source\">'Egyptian fractions - 26/07/2018<br/>  xx=2014<br/>  yy=59<br/>  x=xx<br/>  y=yy<br/>  If x&gt;=y Then<br/>    q=Math.Floor(x/y)<br/>    tt=\"+(\"+q+\")\"<br/>    x=Math.Remainder(x,y)<br/>  EndIf<br/>  If x&lt;&gt;0 Then<br/>    While x&lt;&gt;1<br/>      'i=modulo(-y,x)<br/>      u=-y<br/>      v=x<br/>      modulo()<br/>      i=ret<br/>      k=Math.Ceiling(y/x)<br/>      m=m+1<br/>      tt=tt+\"+1/\"+k<br/>      j=y*k<br/>      If i=1 Then<br/>        tt=tt+\"+1/\"+j<br/>      EndIf<br/>      'n=gcd(i,j)<br/>      x=i<br/>      y=j<br/>      gcd()<br/>      n=ret<br/>      x=i/n<br/>      y=j/n<br/>    EndWhile <br/>  EndIf<br/>  TextWindow.WriteLine(xx+\"/\"+yy+\"=\"+Text.GetSubTextToEnd(tt,2))<br/>\u00a0<br/>Sub modulo<br/>  wr=Math.Remainder(u,v)<br/>  While wr&lt;0<br/>    wr=wr+v<br/>  EndWhile<br/>  ret=wr<br/>EndSub <br/>\u00a0<br/>Sub gcd<br/>  wx=i<br/>  wy=j<br/>  wr=1<br/>  While wr&lt;&gt;0<br/>    wr=Math.Remainder(wx,wy)<br/>    wx=wy<br/>    wy=wr<br/>  EndWhile <br/>  ret=wx<br/>EndSub </pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/>efrac<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span>my<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"kw1\">numerator</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span>y<span class=\"sy0\">=</span><span class=\"kw1\">denominator</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"kw1\">ceil</span><span class=\"br0\">(</span>y<span class=\"sy0\">/</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>f<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>y<span class=\"br0\">)</span><span class=\"sy0\">%</span>x<span class=\"sy0\">/</span>y<span class=\"sy0\">/</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>show<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>n<span class=\"sy0\">=</span>f<span class=\"sy0\">\\</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>v<span class=\"sy0\">=</span>efrac<span class=\"br0\">(</span>f<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print1</span><span class=\"br0\">(</span>f<span class=\"st0\">\" = [\"</span>n<span class=\"st0\">\"; \"</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>best<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>denom<span class=\"sy0\">,</span>denomAt<span class=\"sy0\">,</span>term<span class=\"sy0\">,</span>termAt<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>b<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> v<span class=\"sy0\">=</span>efrac<span class=\"br0\">(</span>a<span class=\"sy0\">/</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">&gt;</span>term<span class=\"sy0\">,</span> termAt<span class=\"sy0\">=</span>a<span class=\"sy0\">/</span>b<span class=\"sy0\">;</span> term<span class=\"sy0\">=</span>#v<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>denom<span class=\"sy0\">,</span> denomAt<span class=\"sy0\">=</span>a<span class=\"sy0\">/</span>b<span class=\"sy0\">;</span> denom<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Most terms is \"</span>termAt<span class=\"st0\">\" with \"</span>term<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Biggest denominator is \"</span>denomAt<span class=\"st0\">\" with \"</span>denom<span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>show<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">43</span><span class=\"sy0\">/</span><span class=\"nu1\">48</span><span class=\"sy0\">,</span> <span class=\"nu1\">5</span><span class=\"sy0\">/</span><span class=\"nu1\">121</span><span class=\"sy0\">,</span> <span class=\"nu1\">2014</span><span class=\"sy0\">/</span><span class=\"nu1\">59</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>best<span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"br0\">)</span><br/>best<span class=\"br0\">(</span><span class=\"nu1\">99</span><span class=\"br0\">)</span><br/>best<span class=\"br0\">(</span><span class=\"nu1\">999</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 30, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">role</span> Egyptian <span class=\"br0\">{</span><br/>    <span class=\"kw2\">method</span> gist <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">join</span> <span class=\"st_h\">' + '</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span><span class=\"st0\">\"[{self.floor}]\"</span> <span class=\"kw1\">if</span> self<span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"kw3\">map</span> <span class=\"br0\">{</span><span class=\"st0\">\"1/$_\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> self<span class=\"sy0\">.</span><span class=\"me1\">denominators</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> denominators <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span><span class=\"kw3\">nude</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$x</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@denom</span> <span class=\"sy0\">=</span> gather <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$y</span> <span class=\"sy0\">%</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> take <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">/</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">ceiling</span><br/>\t    <span class=\"kw1\">while</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"kw3\">nude</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'/'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"kw1\">but</span> Egyptian <span class=\"kw1\">for</span> <span class=\"nu0\">43</span><span class=\"sy0\">/</span><span class=\"nu0\">48</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">121</span><span class=\"sy0\">,</span> <span class=\"nu0\">2014</span><span class=\"sy0\">/</span><span class=\"nu0\">59</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@sample</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">.</span><span class=\"me1\">denominators</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"kw3\">grep</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <br/>        <span class=\"kw3\">map</span> <span class=\"br0\">{</span><span class=\"re0\">$_</span> <span class=\"kw1\">but</span> Egyptian<span class=\"br0\">}</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">99</span> <span class=\"kw1\">X</span><span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">.</span><span class=\"kw3\">nude</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\" has max denominator, namely \"</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><br/>        <span class=\"kw1\">given</span> <span class=\"kw3\">max</span> <span class=\"sy0\">:</span>by<span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@sample</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">.</span><span class=\"kw3\">nude</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\" has max number of denominators, namely \"</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><br/>        <span class=\"kw1\">given</span> <span class=\"kw3\">max</span> <span class=\"sy0\">:</span>by<span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@sample</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 75, "block": "<pre class=\"text highlighted_source\">include builtins\\bigatom.e <br/>\u00a0<br/>function egyptian(integer num, denom)<br/>    bigatom n = ba_new(num),<br/>            d = ba_new(denom)<br/>    sequence result = {}<br/>    while n!=BA_ZERO do<br/>        bigatom t = ba_ceil(ba_divide(d,n))<br/>        result = append(result,t)<br/>        n = ba_mod(ba_sub(BA_ZERO,d),n)<br/>        d = ba_multiply(d,t)<br/>    end while<br/>    return result<br/>end function<br/>\u00a0<br/>procedure efrac(integer num, denom)<br/>    string prefix = \"\"<br/>    if num&gt;=denom then<br/>        integer whole = floor(num/denom)<br/>        num -= whole*denom<br/>        prefix = sprintf(\"[%d] + \",whole)<br/>    end if<br/>    sequence s = egyptian(num, denom)<br/>    for i=1 to length(s) do s[i] = ba_sprintf(\"1/%B\",s[i]) end for<br/>    printf(1,\"%d/%d -&gt;\u00a0%s\\n\",{num, denom, prefix &amp; join(s,\" + \")})<br/>end procedure<br/>\u00a0<br/>efrac(43,48)<br/>efrac(5,121)<br/>efrac(2014,59)<br/>\u00a0<br/>integer maxt = 0<br/>string maxts = \"\"<br/>integer maxd = 0<br/>string maxds = \"\"<br/>bigatom maxda<br/>\u00a0<br/>for r=98 to 998 by 900 do   -- (iterates just twice!)<br/>    sequence sieve = repeat(repeat(false,r+1),r) -- to eliminate duplicates<br/>    for n=1 to r do<br/>        for d=n+1 to r+1 do<br/>            if sieve[n][d]=false then<br/>                string term = sprintf(\"%d/%d\",{n,d})<br/>                sequence terms = egyptian(n,d)<br/>                integer nterms = length(terms)<br/>                if nterms&gt;maxt then<br/>                    maxt = nterms<br/>                    maxts = term<br/>                elsif nterms=maxt then<br/>                    maxts &amp;= \", \" &amp; term<br/>                end if<br/>                integer mlen = length(ba_sprintf(\"%B\",terms[$]))<br/>                if mlen&gt;maxd then<br/>                    maxd = mlen<br/>                    maxds = term<br/>                    maxda = terms[$]<br/>                elsif mlen=maxd then<br/>                    maxds &amp;= \", \" &amp; term<br/>                end if<br/>                if n &lt; r/2 then<br/>                    for k=2 to 9999 do<br/>                        if d*k &gt; r+1 then exit end if<br/>                        sieve[n*k][d*k] = true<br/>                    end for<br/>                end if<br/>            end if<br/>        end for<br/>    end for<br/>    printf(1,\"\\n\")<br/>    printf(1,\"for proper fractions with 1 to\u00a0%d digits\\n\",{length(sprint(r))})<br/>    printf(1,\"Largest number of terms is\u00a0%d for\u00a0%s\\n\",{maxt,maxts})<br/>    string m_str = ba_sprintf(\"%B\",maxda)<br/>    m_str[6..-6]=\"...\"<br/>    printf(1,\"Largest size for denominator is\u00a0%d digits (%s) for\u00a0%s\\n\",{maxd,m_str,maxds})<br/>end for</pre>"}, {"lang": "Python", "loc": 38, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> ceil<br/>\u00a0<br/><span class=\"kw1\">class</span> Fr<span class=\"br0\">(</span>Fraction<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'%s/%s'</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">numerator</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">denominator</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span>:<br/>    ans <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> fr <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">if</span> fr.<span class=\"me1\">denominator</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>fr<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Fr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        intfr <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>        ans<span class=\"sy0\">,</span> fr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>intfr<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> fr - intfr<br/>    x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> fr.<span class=\"me1\">numerator</span><span class=\"sy0\">,</span> fr.<span class=\"me1\">denominator</span><br/>    <span class=\"kw1\">while</span> x <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:<br/>        ans.<span class=\"me1\">append</span><span class=\"br0\">(</span>Fr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> ceil<span class=\"br0\">(</span><span class=\"nu0\">1</span>/fr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        fr <span class=\"sy0\">=</span> Fr<span class=\"br0\">(</span>-y\u00a0% x<span class=\"sy0\">,</span> y* ceil<span class=\"br0\">(</span><span class=\"nu0\">1</span>/fr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> fr.<span class=\"me1\">numerator</span><span class=\"sy0\">,</span> fr.<span class=\"me1\">denominator</span><br/>    ans.<span class=\"me1\">append</span><span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> ans<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> fr <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Fr<span class=\"br0\">(</span><span class=\"nu0\">43</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Fr<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Fr<span class=\"br0\">(</span><span class=\"nu0\">2014</span><span class=\"sy0\">,</span> <span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%r \u2500\u25ba\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>fr<span class=\"sy0\">,</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    lenmax <span class=\"sy0\">=</span> denommax <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">for</span> fr <span class=\"kw1\">in</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>Fr<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        e <span class=\"sy0\">=</span> ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>        <span class=\"co1\">#assert sum((f[0] if type(f) is list else f) for f in e) == fr, 'Whoops!'</span><br/>        elen<span class=\"sy0\">,</span> edenom <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">,</span> e<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">denominator</span><br/>        <span class=\"kw1\">if</span> elen <span class=\"sy0\">&gt;</span> lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>            lenmax <span class=\"sy0\">=</span> <span class=\"br0\">(</span>elen<span class=\"sy0\">,</span> fr<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> edenom <span class=\"sy0\">&gt;</span> denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>            denommax <span class=\"sy0\">=</span> <span class=\"br0\">(</span>edenom<span class=\"sy0\">,</span> fr<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Term max is\u00a0%r with\u00a0%i terms'</span>\u00a0% <span class=\"br0\">(</span>lenmax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    dstr <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Denominator max is\u00a0%r with\u00a0%i digits\u00a0%s...%s'</span>\u00a0%<br/>          <span class=\"br0\">(</span>denommax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>dstr<span class=\"br0\">)</span><span class=\"sy0\">,</span> dstr<span class=\"br0\">[</span>:<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dstr<span class=\"br0\">[</span>-<span class=\"nu0\">5</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 49, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (real-&gt;egyptian-list R)<br/>  (define (inr r rv)<br/>    (match* ((exact-floor r) (numerator r) (denominator r))<br/>      [(0 0 1) (reverse rv)]<br/>      [(0 1 d) (reverse (cons (/ d) rv))]<br/>      [(0 x y) (let ((^y/x (exact-ceiling (/ y x))))<br/>                 (inr (/ (modulo (- y) x) (* y ^y/x)) (cons (/ ^y/x) rv)))]<br/>      [(flr _ _) (inr (- r flr) (cons flr rv))]))<br/>  (inr R null))<br/>\u00a0<br/>(define (real-&gt;egyptian-string f)<br/>  (define e.f.-list (real-&gt;egyptian-list f))<br/>  (define fmt-part<br/>    (match-lambda<br/>      [(? integer? (app number-&gt;string s)) s]<br/>      [(app (compose number-&gt;string /) s) (format \"/~a\"s)]))<br/>  (string-join (map fmt-part e.f.-list) \" + \"))<br/>\u00a0<br/>(define (stat-egyptian-fractions max-b+1)<br/>  (define-values (max-l max-l-f max-d max-d-f)<br/>    (for*/fold ((max-l 0) (max-l-f #f) (max-d 0) (max-d-f #f))<br/>               ((b (in-range 1 max-b+1)) (a (in-range 1 b)) #:when (= 1 (gcd a b)))<br/>      (define f (/ a b))<br/>      (define e.f (real-&gt;egyptian-list (/ a b)))<br/>      (define l (length e.f))<br/>      (define d (denominator (last e.f)))<br/>      (values (max max-l l) (if (&gt; l max-l) f max-l-f)<br/>              (max max-d d) (if (&gt; d max-d) f max-d-f))))  <br/>  (printf #&lt;&lt;EOS<br/>max #terms: ~a has ~a<br/>[~.a]<br/>max denominator: ~a has ~a<br/>[~.a]<br/>\u00a0<br/>EOS<br/>          max-l-f max-l (real-&gt;egyptian-string max-l-f)<br/>          max-d-f max-d (real-&gt;egyptian-string max-d-f)))<br/>\u00a0<br/>(displayln (real-&gt;egyptian-string 43/48))<br/>(displayln (real-&gt;egyptian-string 5/121))<br/>(displayln (real-&gt;egyptian-string 2014/59))<br/>(newline)<br/>(stat-egyptian-fractions 100)<br/>(newline)<br/>(stat-egyptian-fractions 1000)<br/>\u00a0<br/>(module+ test (require tests/eli-tester)<br/>  (test (real-&gt;egyptian-list 43/48) =&gt; '(1/2 1/3 1/16)))</pre>"}, {"lang": "REXX", "loc": 53, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program converts a fraction (can be improper) to an Egyptian fraction. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> fract <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> t;  z=$egyptF<span class=\"br0\">(</span>fract<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*compute the Egyptian fraction.  */</span><br/><span class=\"kw1\">if</span> t<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  fract   <span class=\"st0\">' \u2500\u2500\u2500\u25ba '</span>   z    <span class=\"coMULTI\">/*show Egyptian fraction from C.L.*/</span><br/><span class=\"kw1\">return</span> z                                    <span class=\"coMULTI\">/*stick a fork in it,  we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500$EGYPTF subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>$egyptF: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> zn <span class=\"st0\">'/'</span> zd,,$;   <span class=\"kw1\">if</span> zd==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> zd=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*whole number\u00a0?*/</span><br/><span class=\"kw1\">if</span> z=<span class=\"st0\">''</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"no fraction was specified.\"</span><br/><span class=\"kw1\">if</span> zd==<span class=\"nu0\">0</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"denominator can't be zero:\"</span>       zd<br/><span class=\"kw1\">if</span> zn==<span class=\"nu0\">0</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"numerator can't be zero:\"</span>         zn<br/><span class=\"kw1\">if</span> zd<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">|</span> zn<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>        <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"fraction can't be negative\"</span>       z<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>zn,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"numerator must be an integer:\"</span>    zn<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>zd,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"denominator must be an integer:\"</span>  zd<br/>_=zn%zd                                <span class=\"coMULTI\">/*check if it's an improper fraction.  */</span><br/><span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                       <span class=\"coMULTI\">/*if improper fraction, then append it.*/</span><br/>              $=<span class=\"st0\">'['</span>_<span class=\"st0\">\"]\"</span>                <span class=\"coMULTI\">/*append the whole # part of fraction. */</span><br/>              zn=zn-_<span class=\"sy0\">*</span>zd               <span class=\"coMULTI\">/*now, just use the proper fraction.   */</span><br/>              <span class=\"kw1\">if</span> zn==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> $  <span class=\"coMULTI\">/*Is there no fraction? Then we're done*/</span><br/>              <span class=\"kw3\">end</span><br/><span class=\"kw1\">if</span> zd<span class=\"sy0\">//</span>zn==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  zd=zd%zn;  zn=<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">do</span>  <span class=\"kw2\">forever</span><br/>  <span class=\"kw1\">if</span> zn==<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>zd,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> $ <span class=\"st0\">\"1/\"</span>zd   <span class=\"coMULTI\">/*append Egyptian fract.*/</span><br/>  nd=zd%zn+<span class=\"nu0\">1</span>;      $=$ <span class=\"st0\">'1/'</span>nd          <span class=\"coMULTI\">/*add unity to integer fraction, append*/</span><br/>  z=$fractSub<span class=\"br0\">(</span>zn<span class=\"st0\">'/'</span>zd,  <span class=\"st0\">\"-\"</span>,  <span class=\"nu0\">1</span><span class=\"st0\">'/'</span>nd<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*go and subtract the two fractions.   */</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> z zn <span class=\"st0\">'/'</span> zd                <span class=\"coMULTI\">/*extract the numerator and denominator*/</span><br/>  L=<span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>zn<span class=\"br0\">)</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>zd<span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*calculate if need more decimal digits*/</span><br/>  <span class=\"kw1\">if</span> L<span class=\"sy0\">&gt;</span>=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> L+L  <span class=\"coMULTI\">/*yes, then bump the decimal digits*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span>                    <span class=\"coMULTI\">/* [\u2191]  the DO forever ends when zn==1.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500$FRACTSUB subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>$fractSub: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z<span class=\"sy0\">.</span>1,,z<span class=\"sy0\">.</span>2 <span class=\"nu0\">1</span> zz<span class=\"sy0\">.</span>2;  <span class=\"kw1\">arg</span> ,op<br/>                             <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;    z<span class=\"sy0\">.</span>j=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>z<span class=\"sy0\">.</span>j,<span class=\"st0\">'/'</span>,<span class=\"st0\">\"_\"</span><span class=\"br0\">)</span>;   <span class=\"kw3\">end</span><br/><span class=\"kw1\">if</span> z<span class=\"sy0\">.</span>1==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> z<span class=\"sy0\">.</span>1=<span class=\"br0\">(</span>op<span class=\"sy0\">\\</span>==<span class=\"st0\">\"+\"</span> <span class=\"sy0\">&amp;</span> op<span class=\"sy0\">\\</span>==<span class=\"st0\">'-'</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*unary +,-     first fraction.*/</span><br/><span class=\"kw1\">if</span> z<span class=\"sy0\">.</span>2==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> z<span class=\"sy0\">.</span>2=<span class=\"br0\">(</span>op<span class=\"sy0\">\\</span>==<span class=\"st0\">\"+\"</span> <span class=\"sy0\">&amp;</span> op<span class=\"sy0\">\\</span>==<span class=\"st0\">'-'</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*unary +.-    second fraction.*/</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>                                <span class=\"coMULTI\">/*process both of the fractions*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span>,z<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>     <span class=\"kw3\">then</span> z<span class=\"sy0\">.</span>j=z<span class=\"sy0\">.</span>j<span class=\"st0\">\"/1\"</span>;     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  z<span class=\"sy0\">.</span>j  n<span class=\"sy0\">.</span>j  <span class=\"st0\">'/'</span>  d<span class=\"sy0\">.</span>j<br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>n<span class=\"sy0\">.</span>j,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"numerator isn't an integer:\"</span>    n<span class=\"sy0\">.</span>j<br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>d<span class=\"sy0\">.</span>j,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"denominator isn't an integer:\"</span>  d<span class=\"sy0\">.</span>j<br/>  n<span class=\"sy0\">.</span>j=n<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span><span class=\"nu0\">1</span>;   d<span class=\"sy0\">.</span>j=d<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/*normalize numerator/denominator.*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>n<span class=\"sy0\">.</span>j,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>;  n<span class=\"sy0\">.</span>j=n<span class=\"sy0\">.</span>j<span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>;  d<span class=\"sy0\">.</span>j=d<span class=\"sy0\">.</span>j<span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*while*/</span><br/>                                            <span class=\"coMULTI\">/* [\u2191]  normalize both numbers.   */</span><br/>  <span class=\"kw1\">if</span> d<span class=\"sy0\">.</span>j=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> erx  <span class=\"st0\">\"denominator can't be zero:\"</span>   z<span class=\"sy0\">.</span>j<br/>  g=gcd<span class=\"br0\">(</span>n<span class=\"sy0\">.</span>j,d<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> g=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;     n<span class=\"sy0\">.</span>j=n<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span>g;         d<span class=\"sy0\">.</span>j=d<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span>g<br/>  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*j*/</span><br/>l=lcm<span class=\"br0\">(</span>d<span class=\"sy0\">.</span>1 d<span class=\"sy0\">.</span>2<span class=\"br0\">)</span>;             <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;  n<span class=\"sy0\">.</span>j=l<span class=\"sy0\">*</span>n<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span>d<span class=\"sy0\">.</span>j;  d<span class=\"sy0\">.</span>j=l;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">if</span> op==<span class=\"st0\">'-'</span>  <span class=\"kw3\">then</span> n<span class=\"sy0\">.</span>2=-n<span class=\"sy0\">.</span>2<br/>t=n<span class=\"sy0\">.</span>1+n<span class=\"sy0\">.</span>2;       u=l;                  <span class=\"kw1\">if</span> t==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>g=gcd<span class=\"br0\">(</span>t,u<span class=\"br0\">)</span>;      t=t<span class=\"sy0\">/</span>g;     u=u<span class=\"sy0\">/</span>g;     <span class=\"kw1\">if</span> u==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> t<br/>                                                     <span class=\"kw1\">return</span> t<span class=\"st0\">'/'</span>u<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500general 1\u2500line subs\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>erx:  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'***error!***'</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;       <span class=\"kw1\">say</span>;          <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/>gcd:<span class=\"kw1\">procedure</span>;$=;<span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;$=$ <span class=\"kw1\">arg</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"kw3\">end</span>;<span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $ x z <span class=\"sy0\">.</span>;<span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> x=z;x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;y=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$,j<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw1\">if</span> y=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;<span class=\"kw1\">do</span> <span class=\"kw2\">until</span> _==<span class=\"nu0\">0</span>;_=x<span class=\"sy0\">//</span>y;x=y;y=_;<span class=\"kw3\">end</span>;<span class=\"kw3\">end</span>;<span class=\"kw1\">return</span> x<br/>lcm:<span class=\"kw1\">procedure</span>;y=;<span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;y=y <span class=\"kw1\">arg</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<span class=\"kw3\">end</span>;x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>y,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>;!=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>y,k<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw1\">if</span>\u00a0!=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;x=x<span class=\"sy0\">*</span>!<span class=\"sy0\">/</span>gcd<span class=\"br0\">(</span>x,!<span class=\"br0\">)</span>;<span class=\"kw3\">end</span>;<span class=\"kw1\">return</span> x<br/>p:  <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 33, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>  ans = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">if</span> fr <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>fr.<span class=\"me1\">to_i</span><span class=\"br0\">]</span>, <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"kw1\">if</span> fr.<span class=\"me1\">denominator</span> == <span class=\"nu0\">1</span><br/>    intfr = fr.<span class=\"me1\">to_i</span><br/>    ans, fr = <span class=\"br0\">[</span>intfr<span class=\"br0\">]</span>, fr <span class=\"sy0\">-</span> intfr<br/>  <span class=\"kw1\">end</span><br/>  x, y = fr.<span class=\"me1\">numerator</span>, fr.<span class=\"me1\">denominator</span><br/>  <span class=\"kw1\">while</span> x\u00a0!= <span class=\"nu0\">1</span><br/>    ans <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>fr<span class=\"br0\">)</span>.<span class=\"me1\">ceil</span><span class=\"br0\">)</span><br/>    fr = <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>y <span class=\"sy0\">%</span> x, y <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>fr<span class=\"br0\">)</span>.<span class=\"me1\">ceil</span><span class=\"br0\">)</span><br/>    x, y = fr.<span class=\"me1\">numerator</span>, fr.<span class=\"me1\">denominator</span><br/>  <span class=\"kw1\">end</span><br/>  ans <span class=\"sy0\">&lt;&lt;</span> fr<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> fr <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">43</span>, <span class=\"nu0\">48</span><span class=\"br0\">)</span>, <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">121</span><span class=\"br0\">)</span>, <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">2014</span>, <span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">'%s =&gt;\u00a0%s'</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>fr, ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' + '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>lenmax = denommax = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"nu0\">2</span>..<span class=\"nu0\">99</span><br/>  <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>...<span class=\"me1\">b</span><br/>    fr = <span class=\"kw4\">Rational</span><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>    e = ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>    elen, edenom = e.<span class=\"me1\">length</span>, e<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">denominator</span><br/>    lenmax = <span class=\"br0\">[</span>elen, fr<span class=\"br0\">]</span> <span class=\"kw1\">if</span> elen <span class=\"sy0\">&gt;</span> lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    denommax = <span class=\"br0\">[</span>edenom, fr<span class=\"br0\">]</span> <span class=\"kw1\">if</span> edenom <span class=\"sy0\">&gt;</span> denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">'Term max is\u00a0%s with\u00a0%i terms'</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>lenmax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>dstr = denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">to_s</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">'Denominator max is\u00a0%s with\u00a0%i digits'</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>denommax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, dstr.<span class=\"me1\">size</span><span class=\"br0\">]</span>, dstr</pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">func ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var ans = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fr <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span>fr<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fr.<span class=\"me1\">is_int</span><span class=\"br0\">)</span><br/>    var intfr = fr.<span class=\"me1\">int</span><br/>    ans <span class=\"sy0\">&lt;&lt;</span> intfr<br/>    fr <span class=\"sy0\">-</span>= intfr<br/>  <span class=\"br0\">}</span><br/>  var <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = fr.<span class=\"me1\">nude</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x\u00a0!= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ans <span class=\"sy0\">&lt;&lt;</span> fr.<span class=\"me1\">inv</span>.<span class=\"me1\">ceil</span>.<span class=\"me1\">inv</span><br/>    fr = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>y <span class=\"sy0\">%</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> y<span class=\"sy0\">*</span>fr.<span class=\"me1\">inv</span>.<span class=\"me1\">ceil</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = fr.<span class=\"me1\">nude</span><br/>  <span class=\"br0\">}</span><br/>  ans <span class=\"sy0\">&lt;&lt;</span> fr<br/>  <span class=\"kw2\">return</span> ans<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> fr <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">43</span><span class=\"sy0\">/</span><span class=\"nu0\">48</span>, <span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">121</span>, <span class=\"nu0\">2014</span><span class=\"sy0\">/</span><span class=\"nu0\">59</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"%s =&gt;\u00a0%s<span class=\"es0\">\\n</span>\"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>fr.<span class=\"me1\">as_rat</span>, ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">as_rat</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' + '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var lenmax = <span class=\"br0\">(</span>var denommax = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> range<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, b<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var fr = a<span class=\"sy0\">/</span>b<br/>    var e = ef<span class=\"br0\">(</span>fr<span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>elen, edenom<span class=\"br0\">)</span> = <span class=\"br0\">(</span>e.<span class=\"me1\">length</span>, e<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">denominator</span><span class=\"br0\">)</span><br/>    lenmax = <span class=\"br0\">[</span>elen, fr<span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>elen <span class=\"sy0\">&gt;</span> lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    denommax = <span class=\"br0\">[</span>edenom, fr<span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>edenom <span class=\"sy0\">&gt;</span> denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"st0\">\"Term max is\u00a0%s with\u00a0%i terms<span class=\"es0\">\\n</span>\"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>lenmax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">as_rat</span>, lenmax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"Denominator max is\u00a0%s with\u00a0%i digits<span class=\"es0\">\\n</span>\"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>denommax<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">as_rat</span>, denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>say denommax<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "Tcl", "loc": 12, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Just compute the denominator terms, as the numerators are always 1</span><br/><span class=\"kw1\">proc</span> egyptian <span class=\"br0\">{</span>num denom<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Compute ceil($denom/$num) without floating point inaccuracy</span><br/>\t<span class=\"kw1\">set</span> term <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$denom</span> / <span class=\"re0\">$num</span> + <span class=\"br0\">(</span><span class=\"re0\">$denom</span>/<span class=\"re0\">$num</span><span class=\"sy0\">*</span><span class=\"re0\">$num</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$denom</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> result <span class=\"re0\">$term</span><br/>\t<span class=\"kw1\">set</span> num <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$denom</span> <span class=\"sy0\">%</span> <span class=\"re0\">$num</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> denom <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$denom</span> <span class=\"sy0\">*</span> <span class=\"re0\">$term</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\"># Just compute the denominator terms, as the numerators are always 1<br/>fcn egyptian(num,denom){<br/>   result,t\u00a0:= List(),Void;<br/>   t,num=num.divr(denom);      // reduce fraction<br/>   if(t) result.append(T(t));  // signal t isn't a denominator<br/>   while(num){<br/>      # Compute ceil($denom/$num) without floating point inaccuracy<br/>      term:=denom/num + (denom/num*num &lt; denom);<br/>      result.append(term);<br/>      z:=denom%num;<br/>      num=(if(z) num-z else 0);<br/>      denom*=term;<br/>   }<br/>   result<br/>}<br/>fcn efrac(fraction){  // list to string, format list of denominators<br/>   fraction.pump(List,fcn(denom){<br/>      if(denom.isType(List)) denom[0]<br/>      else \t\t     String(\"1/\",denom);<br/>   }).concat(\" + \")<br/>}</pre>"}]}