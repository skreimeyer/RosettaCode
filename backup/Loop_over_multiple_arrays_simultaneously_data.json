{"task": "Loop_over_multiple_arrays_simultaneously", "blocks": [{"lang": "360 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">*        Loop over multiple arrays simultaneously  09/03/2017<br/>LOOPSIM  CSECT<br/>         USING  LOOPSIM,R12        base register<br/>         LR     R12,R15<br/>         LA     R6,1               i=1<br/>         LA     R7,3               counter=3<br/>LOOP     LR     R1,R6              i<br/>         SLA    R1,1               *2<br/>         LH     R2,R-2(R1)         r(i)<br/>         XDECO  R2,PG              edit r(i)<br/>         LA     R1,S-1(R6)         @s(i) <br/>         MVC    PG+3(1),0(R1)      output s(i)<br/>         LA     R1,Q-1(R6)         @q(i)<br/>         MVC    PG+7(1),0(R1)      output q(i)<br/>         XPRNT  PG,80              print s(i),q(i),r(i)<br/>         LA     R6,1(R6)           i++<br/>         BCT    R7,LOOP            decrement and loop<br/>         BR     R14                exit<br/>S        DC     C'a',C'b',C'c'<br/>Q        DC     C'A',C'B',C'C'<br/>R        DC     H'1',H'2',H'3'<br/>PG       DC     CL80' '            buffer<br/>         YREGS<br/>         END    LOOPSIM</pre>"}, {"lang": "ACL2", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-lists <span class=\"br0\">(</span>xs ys zs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp ys<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp zs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">progn</span>$ <span class=\"br0\">(</span>cw <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>cw <span class=\"st0\">\"~x0~x1~%\"</span><br/>                   <span class=\"br0\">(</span>first ys<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>first zs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-lists <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>rest ys<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>rest zs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>print-lists '<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span> <span class=\"st0\">\"b\"</span> <span class=\"st0\">\"c\"</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span>A B C<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 13, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Array_Loop_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Array_Index <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">3</span>;<br/>   A1\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Array_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character\u00a0:= <span class=\"st0\">\"abc\"</span>;<br/>   A2\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Array_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character\u00a0:= <span class=\"st0\">\"ABC\"</span>;<br/>   A3\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Array_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer  \u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> Array_Index'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Put_Line <span class=\"br0\">(</span>A1 <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> &amp; A2 <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> &amp; Integer'Image <span class=\"br0\">(</span>A3 <br/><span class=\"br0\">(</span>Index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Array_Loop_Test;</pre>"}, {"lang": "ALGOL 68", "loc": 5, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">,</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span> x<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> y<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <br/>z<span class=\"sy1\">=</span><span class=\"br0\">(</span>1<span class=\"sy1\">,</span>2<span class=\"sy1\">,</span>3<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> x <span class=\"kw2\">DO</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$ggd$<span class=\"sy1\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> z<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 11, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% declare the three arrays                                              \u00a0%<br/>    string(1) array a, b ( 1\u00a0:: 3 );<br/>    integer   array c    ( 1\u00a0:: 3 );<br/>   \u00a0% initialise the arrays - have to do this element by element in Algol W \u00a0%<br/>    a(1)\u00a0:= \"a\"; a(2)\u00a0:= \"b\"; a(3)\u00a0:= \"c\";<br/>    b(1)\u00a0:= \"A\"; b(2)\u00a0:= \"B\"; b(3)\u00a0:= \"C\";<br/>    c(1)\u00a0:=  1;  c(2)\u00a0:=  2;  c(3)\u00a0:=  3;<br/>   \u00a0% loop over the arrays                                                  \u00a0%<br/>    for i\u00a0:= 1 until 3 do write( i_w\u00a0:= 1, s_w\u00a0:= 0, a(i), b(i), c(i) );<br/>end. </pre>"}, {"lang": "AppleScript", "loc": 91, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- ZIP LISTS WITH FUNCTION ---------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- zipListsWith\u00a0:: ([a] -&gt; b) -&gt; [[a]] -&gt; [[b]]</span><br/><span class=\"kw3\">on</span> zipListsWith<span class=\"br0\">(</span>f, xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xss<br/>\u00a0<br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> i \u2264 n <span class=\"kw3\">then</span><br/>                apply<span class=\"br0\">(</span>f, <span class=\"br0\">(</span>map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> zipListsWith<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST  ( zip lists with concat ) -------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed, \u00ac<br/>        zipListsWith<span class=\"br0\">(</span>concat, \u00ac<br/>            <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- apply (a -&gt; b) -&gt; a -&gt; b</span><br/><span class=\"kw3\">on</span> apply<span class=\"br0\">(</span>f, a<span class=\"br0\">)</span><br/>    mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> apply<br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    acc<br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 26, "block": "<pre class=\"autohotkey highlighted_source\">List1 <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<br/>List2 <span class=\"sy0\">=</span> A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<br/>List3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% LoopMultiArrays<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>List1 <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<br/>List2 <span class=\"sy0\">=</span> A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<br/>List3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% LoopMultiArrays<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>LoopMultiArrays<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"br0\">{</span> <span class=\"co1\">; print the ith element of each</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>\u00a0<br/>\u00a0<br/>    local Result<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> List1_<span class=\"sy0\">,</span> List1<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> List2_<span class=\"sy0\">,</span> List2<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> List3_<span class=\"sy0\">,</span> List3<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% List1_0<br/>        Result <span class=\"sy0\">.=</span> List1_<span class=\"re0\">%A_Index%</span> List2_<span class=\"re0\">%A_Index%</span> List3_<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\"`n\"</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Result<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 9, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"a,b,c\"</span>, a, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"A,B,C\"</span>, b, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"1,2,3\"</span>, c, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 12, "block": "<pre class=\"text highlighted_source\">'a'\u2192{L\u2081}<br/>'b'\u2192{L\u2081+1}<br/>'c'\u2192{L\u2081+2}<br/>'A'\u2192{L\u2082}<br/>'B'\u2192{L\u2082+1}<br/>'C'\u2192{L\u2082+2}<br/>1\u2192{L\u2083}<br/>2\u2192{L\u2083+1}<br/>3\u2192{L\u2083+2}<br/>For(I,0,2)<br/>Disp {L\u2081+I}\u25baChar,{L\u2082+I}\u25baChar,{L\u2083+I}\u25baDec,i<br/>End</pre>"}, {"lang": "Babel", "loc": 6, "block": "<pre class=\"text highlighted_source\">main: { (('a' 'b' 'c')('A' 'B' 'C')('1' '2' '3')) <br/>simul_array }<br/>\u00a0<br/>simul_array!:<br/>    { trans<br/>    { { &lt;&lt; } each \"\\n\" &lt;&lt; } each }</pre>"}, {"lang": "BBC BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      DIM array1$(2), array2$(2), array3%(2)<br/>      array1$() = \"a\", \"b\", \"c\"<br/>      array2$() = \"A\", \"B\", \"C\"<br/>      array3%() = 1, 2, 3<br/>\u00a0<br/>      FOR index% = 0 TO 2<br/>        PRINT array1$(index%)\u00a0; array2$(index%)\u00a0; array3%(index%)<br/>      NEXT</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">0 &gt;:2g,:3g,:4gv<br/>@_^#`2:+1,+55,&lt;<br/>abc<br/>ABC<br/>123</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> a1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span><span class=\"st0\">'b'</span><span class=\"sy0\">,</span><span class=\"st0\">'c'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">char</span> a2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"sy0\">,</span><span class=\"st0\">'C'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> a3<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c%c%i<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> min <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span><span class=\"me1\">Length</span>, b<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        min <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>min, c<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> min<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}{1}{2}\"</span>, a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, b<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>             <br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 19, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> ls<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> ls<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span> ls<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'b'</span><span class=\"sy4\">;</span> ls<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'c'</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> us<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> us<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'A'</span><span class=\"sy4\">;</span> us<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'B'</span><span class=\"sy4\">;</span> us<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'C'</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ns<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  ns<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>   ns<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span>   ns<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> lIt <span class=\"sy1\">=</span> ls.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> uIt <span class=\"sy1\">=</span> us.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> nIt <span class=\"sy1\">=</span> ns.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"sy4\">;</span> lIt <span class=\"sy3\">!</span><span class=\"sy1\">=</span> ls.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> uIt <span class=\"sy3\">!</span><span class=\"sy1\">=</span> us.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> nIt <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <br/>ns.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       <span class=\"sy2\">++</span>lIt, <span class=\"sy2\">++</span>uIt, <span class=\"sy2\">++</span>nIt<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>lIt <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>uIt <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>nIt <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Chapel", "loc": 6, "block": "<pre class=\"text highlighted_source\">var a1 = [ \"a\", \"b\", \"c\" ];<br/>var a2 = [ \"A\", \"B\", \"C\" ];<br/>var a3 = [  1,   2,   3  ];<br/>\u00a0<br/>for (x,y,z) in zip(a1, a2, a3) do<br/>    writeln(x,y,z);</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"sy0\">%</span>1 <span class=\"sy0\">%</span>2 <span class=\"sy0\">%</span>3<span class=\"br0\">)</span> <span class=\"st0\">\"abc\"</span> <span class=\"st0\">\"ABC\"</span> <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span>println s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 23, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> Loop-Over-Multiple-Tables<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  A <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"abc\"</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  A-Vals <span class=\"kw3\">PIC</span> X <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">3</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  B <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"ABC\"</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  B-Vals <span class=\"kw3\">PIC</span> X <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">3</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  C <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"123\"</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  C-Vals <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">3</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  I <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> I <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> <span class=\"nu0\">3</span> &lt; I<br/>               <span class=\"kw2\">DISPLAY</span> A-Vals <span class=\"br0\">(</span>I<span class=\"br0\">)</span> B-Vals <span class=\"br0\">(</span>I<span class=\"br0\">)</span> C-Vals <span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">mapc</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>format t <span class=\"st0\">\"~{~A~}~%\"</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span> zip<span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ABC\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> LoopOverArrays<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  ARRAY1<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy1\">,</span> <span class=\"st0\">'b'</span><span class=\"sy1\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ARRAY2<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"sy1\">,</span> <span class=\"st0\">'C'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ARRAY3<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%s%s%d'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>ARRAY1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> ARRAY2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> ARRAY3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 7, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span> a1 <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy1\">,</span> <span class=\"st0\">'b'</span><span class=\"sy1\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span> a2 <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"sy1\">,</span> <span class=\"st0\">'C'</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span> a3 <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%s%s%d'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>a1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> a2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> a3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 7, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> a1 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> a2 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> a3 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"3\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">=&gt;</span> v1 <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> a1 <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> a2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; looping over different sequences\u00a0: infinite stream, string, list and vector</span><br/><span class=\"co1\">;; loop stops as soon a one sequence ends. </span><br/><span class=\"co1\">;; the (iota 6) = ( 0 1 2 3 4 5) sequence will stop first.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>j <span class=\"st0\">\"ABCDEFGHIJK\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"br0\">(</span>iota <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>m #<span class=\"br0\">(</span>o p q r <span class=\"kw1\">s</span> <span class=\"kw1\">t</span> u v w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>writeln i j k m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">1000</span>     <span class=\"st0\">\"A\"</span>     <span class=\"nu0\">0</span>     o    <br/><span class=\"nu0\">1001</span>     <span class=\"st0\">\"B\"</span>     <span class=\"nu0\">1</span>     p    <br/><span class=\"nu0\">1002</span>     <span class=\"st0\">\"C\"</span>     <span class=\"nu0\">2</span>     q    <br/><span class=\"nu0\">1003</span>     <span class=\"st0\">\"D\"</span>     <span class=\"nu0\">3</span>     r    <br/><span class=\"nu0\">1004</span>     <span class=\"st0\">\"E\"</span>     <span class=\"nu0\">4</span>     <span class=\"kw1\">s</span>    <br/><span class=\"nu0\">1005</span>     <span class=\"st0\">\"F\"</span>     <span class=\"nu0\">5</span>     <span class=\"kw1\">t</span>    <br/>\u00a0</pre>"}, {"lang": "Efene", "loc": 6, "block": "<pre class=\"text highlighted_source\">@public <br/>run = fn () {<br/>    lists.foreach(fn ((A, B, C)) { io.format(\"~s~n\", [[A, B, C]]) }, <br/>lists.zip3(\"abc\", \"ABC\", \"123\"))<br/>}<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 12, "block": "<pre class=\"text highlighted_source\">open monad io list imperative<br/>\u00a0<br/>xs = zipWith3 (\\x y z -&gt; show x ++ show y ++ show z) ['a','b','c'] <br/>  ['A','B','C'] [1,2,3]<br/>\u00a0<br/>print x = do putStrLn x<br/>\u00a0<br/>print_and_calc xs = do<br/>  xss &lt;- return xs<br/>  return $ each print xss<br/>\u00a0<br/>print_and_calc xs\u00a0::: IO</pre>"}, {"lang": "Elixir", "loc": 5, "block": "<pre class=\"text highlighted_source\">l1 = [\"a\", \"b\", \"c\"]<br/>l2 = [\"A\", \"B\", \"C\"]<br/>l3 = [\"1\", \"2\", \"3\"]<br/>IO.inspect List.zip([l1,l2,l3]) |&gt; Enum.map(fn x-&gt; Tuple.to_list(x) |&gt; Enum.join end)<br/>#=&gt; [\"aA1\", \"bB2\", \"cC3\"]</pre>"}, {"lang": "Elena", "loc": 16, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program = <br/>[  <br/>    var a1\u00a0:= (\"a\",\"b\",\"c\").<br/>    var a2\u00a0:= (\"A\",\"B\",\"C\").<br/>    var a3\u00a0:= (1,2,3).<br/>\u00a0<br/>    0 till(a1 length) do(:i)<br/>    [<br/>        console printLine(a1[i], a2[i], a3[i]).<br/>    ].<br/>\u00a0<br/>    console readChar.    <br/>].<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zipwith3</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <br/><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abc\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ABC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 1, "block": "<pre>are.\n</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">for</span> c1,c2,n <span class=\"kw1\">in</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">zip3</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">;</span><span class=\"st0\">'b'</span><span class=\"sy0\">;</span><span class=\"st0\">'c'</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">;</span><span class=\"st0\">'B'</span><span class=\"sy0\">;</span><span class=\"st0\">'C'</span><span class=\"br0\">]</span> <br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>  printfn <span class=\"st0\">\"%c%c%d\"</span> c1 c2 n</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"abc\" \"ABC\" \"123\" [ [ write1 ] <a class=\"__cf_email__\" data-cfemail=\"a3d7d1cae3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> nl ] <br/>3each</pre>"}, {"lang": "Fantom", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class LoopMultiple<br/>{<br/>  public static Void main ()<br/>  {<br/>    List arr1\u00a0:= [\"a\", \"b\", \"c\"]<br/>    List arr2\u00a0:= [\"A\", \"B\", \"C\"]<br/>    List arr3\u00a0:= [1, 2, 3]<br/>    [arr1.size, arr2.size, arr3.size].min.times |Int i|<br/>    {<br/>      echo (\"${arr1[i]}${arr2[i]}${arr3[i]}\")<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 19, "block": "<pre class=\"text highlighted_source\">create a  char a , char b , char c ,<br/>create b  char A , char B , char C ,<br/>create c  char 1 , char 2 , char 3 ,<br/>\u00a0<br/>: main<br/>  3 0 do cr<br/>    a i cells + @ emit<br/>    b i cells + @ emit<br/>    c i cells + @ emit<br/>  loop<br/>  cr<br/>  a b c<br/>  3 0 do cr<br/>    3 0 do<br/>      rot dup @ emit cell+<br/>    loop<br/>  loop<br/>  drop drop drop<br/>;</pre>"}, {"lang": "Fortran", "loc": 16, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> main<br/> <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/> <span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">n_vals</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/> <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n_vals<span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">ls</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span>,<span class=\"st0\">'b'</span>,<span class=\"st0\">'c'</span><span class=\"br0\">]</span><br/> <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n_vals<span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">us</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'C'</span><span class=\"br0\">]</span><br/> <span class=\"kw3\">integer</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n_vals<span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span>          <span class=\"sy0\">::</span> <span class=\"me2\">ns</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/> <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>  <span class=\"co1\">!counter</span><br/>\u00a0<br/> <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n_vals<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A1,A1,I1)'</span><span class=\"br0\">)</span> ls<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,us<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,ns<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 29, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> min<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>x &lt; y, x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> arr1<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> arr2<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> arr3<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Print</span> arr1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; arr2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; arr3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' For arrays of different lengths we would need to iterate up to the mimimm length of all 3 in order</span><br/><span class=\"co1\">' to  get a contribution from each one. For example:</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> arr4<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> arr5<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = min<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>arr1<span class=\"br0\">)</span>, min<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>arr4<span class=\"br0\">)</span>, <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>arr5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<br/>  <span class=\"kw1\">Print</span> arr1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; arr2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; arr3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 4, "block": "<pre class=\"text highlighted_source\">import lists.zip3<br/>\u00a0<br/>for x &lt;- zip3( ['a', 'b', 'c'], ['A', 'B', 'C'], [1, 2, 3] )<br/>    println( x.mkString() )</pre>"}, {"lang": "Gambas", "loc": 11, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> a1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> a2 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> a3 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"2\"</span>, <span class=\"st0\">\"3\"</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siC <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siC <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> a1.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> a1<span class=\"br0\">[</span>siC<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> a2<span class=\"br0\">[</span>siC<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> a3<span class=\"br0\">[</span>siC<span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># The Loop function will apply some function to every tuple built by <br/>taking<br/># the i-th element of each list. If one of them is exhausted before the <br/>others,<br/># the loop continues at its begining. Only the longests lists will be <br/>precessed only once.<br/>Loop\u00a0:= function(a, f)<br/>    local i, j, m, n, v;<br/>    n\u00a0:= Length(a);<br/>    v\u00a0:= List(a, Length);<br/>    m\u00a0:= Maximum(v);<br/>    for j in [1 .. m] do<br/>        f(List([1 .. n], i -&gt; a[i][1 + RemInt(j - 1, v[i])]));<br/>    od;<br/>end;<br/>\u00a0<br/># Here we simply print each \"row\"<br/>f\u00a0:= function(u)<br/>    Perform(u, Print);<br/>    Print(\"\\n\");<br/>end;<br/>\u00a0<br/>Loop([[\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3]], f);<br/>\u00a0<br/>aA1<br/>bB2<br/>cC3<br/>\u00a0<br/>Loop([[\"a\", \"b\"], [\"A\", \"B\", \"C\", \"D\", \"E\"], [1, 2, 3]], f);<br/>\u00a0<br/>aA1<br/>bB2<br/>aC3<br/>bD1<br/>aE2</pre>"}, {"lang": "Go", "loc": 13, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a1 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> a2 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">'B'</span><span class=\"sy1\">,</span> <span class=\"st0\">'C'</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> a3 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a1 <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%v%c%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> a1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> a2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> a3<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 4, "block": "<pre class=\"text highlighted_source\">[\"a\" \"b\" \"c\"]:a;<br/>[\"A\" \"B\" \"C\"]:b;<br/>[\"1\" \"2\" \"3\"]:c;<br/>[a b c]zip{puts}/</pre>"}, {"lang": "Groovy", "loc": 6, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> synchedConcat <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a1, a2, a3 <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> a1 <span class=\"sy0\">&amp;&amp;</span> a2 <span class=\"sy0\">&amp;&amp;</span> a3<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> a1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> a2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> a2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> a3.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>a1, a2, a3<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"st0\">\"${it[0]}${it[1]}${it[2]}\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE ParallelListComp #-}</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sequence\"><span class=\"kw3\">sequence</span></a> <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"abd\"</span> <span class=\"sy0\">|</span> y <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"ABC\"</span> <span class=\"sy0\">|</span> z <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"123\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 22, "block": "<pre class=\"text highlighted_source\">using Lambda;<br/>using Std;<br/>\u00a0<br/>class Main <br/>{<br/>\u00a0<br/>\tstatic function main() <br/>\t{<br/>\t\tvar a = ['a', 'b', 'c'];<br/>\t\tvar b = ['A', 'B', 'C'];<br/>\t\tvar c = [1, 2, 3];<br/>\u00a0<br/>\t\t//Find smallest array<br/>\t\tvar len = [a, b, c]<br/>\t\t\t.map(function(a) return a.length)<br/>\t\t\t.fold(Math.min, 0x0FFFFFFF)<br/>\t\t\t.int();<br/>\u00a0<br/>\t\tfor (i in 0...len)<br/>\t\t\tSys.println(a[i] + b[i] + c[i].string());<br/>\t}<br/>}</pre>"}, {"lang": "HicEst", "loc": 8, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> <span class=\"sy1\">::</span> A <span class=\"sy1\">=</span> <span class=\"st0\">\"abc\"</span><br/><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span>  C<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>C <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"co1\">! 1, 2, 3</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> A<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ABC\"</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span> C<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">ENDDO</span></pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>a <span class=\"sy1\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><br/>b <span class=\"sy1\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>c <span class=\"sy1\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"3\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">while</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">@</span>a<span class=\"sy1\">,@</span>b<span class=\"sy1\">,@</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   ,.&amp;:<span class=\"sy0\">(</span>\":\"<span class=\"nu0\">0</span>@&gt;<span class=\"sy0\">)</span>/ <span class=\"st_h\">'abc'</span>\u00a0; <span class=\"st_h\">'ABC'</span>\u00a0; <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/>aA1<br/>bB2<br/>cC3</pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"a\"</span>,<span class=\"st0\">\"b\"</span>,<span class=\"st0\">\"c\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span>,<span class=\"st0\">\"B\"</span>,<span class=\"st0\">\"C\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    c <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    output <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br/>    i<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    output <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\"># zip/0 emits [] if input is [].<br/>\u00a0<br/>def zip:<br/>  . as $in<br/>  | [range(0; $in[0]|length) as $i | $in | map( .[$i] ) ];</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">foreach(println, ('a', 'b', 'c'), ('A', 'B', 'C'), (1, 2, 3))</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">{,/$x}'+(\"abc\";\"ABC\";1 2 3)</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2 <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a3 <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${a1[i]}${a2[i]}${a3[i]}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// For arrays of different sizes we would need to iterate up to the mimimm size of all 3 in order</span><br/>    <span class=\"co1\">// to  get a contribution from each one.</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a4 <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a5 <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'d'</span>, <span class=\"st0\">'e'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> minSize <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>a2.<span class=\"me1\">size</span>, Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>a4.<span class=\"me1\">size</span>, a5.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// minimum size of a2, a4 and a5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until minSize<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${a2[i]}${a4[i]}${a5[i]}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">zipwith3</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i j k<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>io<span class=\"sy0\">:</span><span class=\"me1\">format</span> <span class=\"st0\">\"~s~s~p~n\"</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>i <span class=\"sy0\">,</span>j <span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span>A B C<span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 8, "block": "<pre class=\"lb highlighted_source\">a$<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"a\"</span> <span class=\"sy0\">:</span> a$<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"b\"</span> <span class=\"sy0\">:</span> a$<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"c\"</span><br/>b$<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"A\"</span> <span class=\"sy0\">:</span> b$<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"B\"</span> <span class=\"sy0\">:</span> b$<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"C\"</span><br/>c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> c<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"sy0\">:</span> c<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">print</span> a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;b$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;c<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span></pre>"}, {"lang": "Lisaac", "loc": 27, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= ARRAY_LOOP_TEST;<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- main &lt;- (<br/>  + a1, a2\u00a0: ARRAY[CHARACTER];<br/>  + a3\u00a0: ARRAY[INTEGER];<br/>\u00a0<br/>  a1\u00a0:= ARRAY[CHARACTER].create 1 to 3;<br/>  a2\u00a0:= ARRAY[CHARACTER].create 1 to 3;<br/>  a3\u00a0:= ARRAY[INTEGER].create 1 to 3;<br/>\u00a0<br/>  1.to 3 do { i\u00a0: INTEGER;<br/>    a1.put ((i - 1 + 'a'.code).to_character) to i;<br/>    a2.put ((i - 1 + 'A'.code).to_character) to i;<br/>    a3.put i to i;<br/>  };<br/>\u00a0<br/>  1.to 3 do { i\u00a0: INTEGER;<br/>    a1.item(i).print;<br/>    a2.item(i).print;<br/>    a3.item(i).print;<br/>    '\\n'.print;<br/>  };<br/>);</pre>"}, {"lang": "LiveCode", "loc": 16, "block": "<pre class=\"text highlighted_source\">command loopArrays<br/>    local lowA, uppA, nums, z<br/>    put \"a,b,c\" into lowA<br/>    put \"A,B,C\" into uppA<br/>    put \"1,2,3\" into nums<br/>\u00a0<br/>    split lowA by comma<br/>    split uppA by comma<br/>    split nums by comma<br/>\u00a0<br/>    repeat with n = 1 to the number of elements of lowA<br/>        put lowA[n] &amp; uppA[n] &amp; nums[n] &amp; return after z<br/>    end repeat<br/>    put z<br/>\u00a0<br/>end loopArrays</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">show (map [(word\u00a0?1\u00a0?2\u00a0?3)] [a b c] [A B C] [1 2 3])   <br/>\u00a0; [aA1 bB2 cC3]<br/>\u00a0<br/>(foreach [a b c] [A B C] [1 2 3] [print (word\u00a0?1\u00a0?2\u00a0?3)]) \u00a0; as above, <br/>one per line</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> a3 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'a'</span> <span class=\"sy0\">,</span> <span class=\"st0\">'b'</span> <span class=\"sy0\">,</span> <span class=\"st0\">'c'</span> <span class=\"br0\">}</span> <span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">,</span> <span class=\"st0\">'B'</span> <span class=\"sy0\">,</span> <span class=\"st0\">'C'</span> <span class=\"br0\">}</span> <span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>a1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">..</span>a2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">..</span>a3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MapThread[Print, {{\"a\", \"b\", \"c\"}, {\"A\", \"B\", \"C\"}, {1, 2, 3}}];<br/>\u00a0</pre>"}, {"lang": "Mercury", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module multi_array_loop.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module char, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    A = ['a', 'b', 'c'],<br/>    B = ['A', 'B', 'C'],<br/>    C = [1, 2, 3],<br/>    list.foldl_corresponding3(print_elems, A, B, C,\u00a0!IO).<br/>\u00a0<br/>:- pred print_elems(char::in, char::in, int::in, io::di, io::uo) is det.<br/>\u00a0<br/>print_elems(A, B, C,\u00a0!IO)\u00a0:-<br/>    io.format(\"%c%c%i\\n\", [c(A), c(B), i(C)],\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "Modula-3", "loc": 17, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> MultiArray <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> ArrIdx <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> <br/>  arr1 <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> ArrIdx <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span> <span class=\"br0\">{</span><span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"br0\">}</span>;<br/>  arr2 <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> ArrIdx <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span> <span class=\"br0\">{</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'C'</span><span class=\"br0\">}</span>;<br/>  arr3 <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> ArrIdx <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>ArrIdx<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>ArrIdx<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">Char</span><span class=\"br0\">(</span>arr1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> &amp; Fmt.<span class=\"me1\">Char</span><span class=\"br0\">(</span>arr2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> &amp; <br/>Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>arr3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> MultiArray.</pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOOPMULT<br/> N A,B,C,D,%<br/> S A=\"a,b,c,d\"<br/> S B=\"A,B,C,D\"<br/> S C=\"1,2,3\"<br/> S D=\",\"<br/> F\u00a0%=1:1:$L(A,\",\") W\u00a0!,$P(A,D,%),$P(B,D,%),$P(C,D,%)<br/> K A,B,C,D,%<br/> Q<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 25, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module LoopMultiple<br/>{<br/>    Zip3[T1, T2, T3] (x\u00a0: list[T1], y\u00a0: list[T2], z\u00a0: list[T3])\u00a0: <br/>list[T1 * T2 * T3]<br/>    {<br/>        |(x::xs, y::ys, z::zs) =&gt; (x, y, z)::Zip3(xs, ys, zs)<br/>        |([], [], [])          =&gt; []<br/>        |(_, _, [])            =&gt; throw ArgumentNullException()<br/>        |(_, [], _)            =&gt; throw ArgumentNullException()<br/>        |([], _, _)            =&gt; throw ArgumentNullException()<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def first  = ['a', 'b', 'c'];<br/>        def second = [\"A\", \"B\", \"C\"];<br/>        def third  = [1, 2, 3];<br/>\u00a0<br/>        foreach ((x, y, z) in Zip3(first, second, third))<br/>            WriteLine($\"$x$y$z\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 46, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Using arrays'</span><br/>aa = <span class=\"br0\">[</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span><span class=\"br0\">]</span><br/>bb = <span class=\"br0\">[</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span><span class=\"br0\">]</span><br/>cc = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> x_ = <span class=\"nu0\">0</span> for aa.<span class=\"me0\">length</span><br/>  <span class=\"kw1\">do</span><br/>    ax = aa<span class=\"br0\">[</span>x_<span class=\"br0\">]</span><br/>  <span class=\"kw3\">catch</span> ArrayIndexOutOfBoundsException<br/>    ax = <span class=\"st0\">' '</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">do</span><br/>    bx = bb<span class=\"br0\">[</span>x_<span class=\"br0\">]</span><br/>  <span class=\"kw3\">catch</span> ArrayIndexOutOfBoundsException<br/>    bx = <span class=\"st0\">' '</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">do</span><br/>    cx = cc<span class=\"br0\">[</span>x_<span class=\"br0\">]</span><br/>  <span class=\"kw3\">catch</span> ArrayIndexOutOfBoundsException<br/>    cx = <span class=\"st0\">' '</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> ax <span class=\"sy0\">||</span> bx <span class=\"sy0\">||</span> cx<br/>  <span class=\"kw3\">end</span> x_<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Using indexed strings (associative arrays)'</span><br/>ai = sampleData<span class=\"br0\">(</span><span class=\"st0\">'a b c d'</span><span class=\"br0\">)</span><br/>bi = sampleData<span class=\"br0\">(</span><span class=\"st0\">'A B C'</span><span class=\"br0\">)</span><br/>ci = sampleData<span class=\"br0\">(</span><span class=\"st0\">'1 2 3 4'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> x_ = <span class=\"nu0\">1</span> to ai<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">say</span> ai<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> <span class=\"sy0\">||</span> bi<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> <span class=\"sy0\">||</span> ci<span class=\"br0\">[</span>x_<span class=\"br0\">]</span><br/>  <span class=\"kw3\">end</span> x_<br/>\u00a0<br/>method sampleData<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  smp = <span class=\"st0\">' '</span><br/>  smp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = arg.<span class=\"kw6\">words</span><br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">1</span> to smp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    smp<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> = arg.<span class=\"kw6\">word</span><span class=\"br0\">(</span>i_<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> smp<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 2, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"sy0\">'</span><span class=\"br0\">(</span>a b c<span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span>A B C<span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <br/><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">let<br/>  a = @['a','b','c']<br/>  b = @[\"A\",\"B\",\"C\"]<br/>  c = @[1,2,3]<br/>\u00a0<br/>for i in 0..2:<br/>  echo a[i], b[i], c[i]</pre>"}, {"lang": "Oberon-2", "loc": 26, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> LoopMArrays;<br/><span class=\"kw1\">IMPORT</span> <br/>\tOut;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">3</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\tz<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">3</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoLoop;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\tOut.<span class=\"me1\">Char</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>z<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> DoLoop;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\tx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'a'</span>;y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'A'</span>;z<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\tx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'b'</span>;y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'B'</span>;z<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>\tx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'c'</span>;y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'C'</span>;z<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>\tDoLoop<br/><span class=\"kw1\">END</span> LoopMArrays.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 15, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> MultipleArrayAccess <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    b <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    c <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> a1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">'</span>a<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>b<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>c<span class=\"sy0\">'</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><br/><span class=\"kw1\">and</span> a2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">'</span>A<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>B<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>C<span class=\"sy0\">'</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><br/><span class=\"kw1\">and</span> a3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">'</span><span class=\"nu0\">1</span><span class=\"sy0\">';</span> <span class=\"sy0\">'</span><span class=\"nu0\">2</span><span class=\"sy0\">';</span> <span class=\"sy0\">'</span><span class=\"nu0\">3</span><span class=\"sy0\">'</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"sy0\">;;</span><br/>\u00a0<br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i c1 <span class=\"sy0\">-&gt;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> c1<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> a2<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> a3<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span> a1 <span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">[ \"a\", \"b\", \"c\" ] [ \"A\", \"B\", \"C\" ] [ 1, 2, 3 ] <br/>zipAll(3) apply(#[ apply(#print) printcr ])</pre>"}, {"lang": "ooRexx", "loc": 9, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>x = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><br/>y = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><br/>z = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> x~size<br/>    <span class=\"kw1\">say</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span>z<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 7, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">for</span><br/>   I <span class=\"kw1\">in</span> <span class=\"br0\">[</span>a b c<span class=\"br0\">]</span><br/>   J <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span> <span class=\"st0\">'B'</span> <span class=\"st0\">'C'</span><span class=\"br0\">]</span><br/>   K <span class=\"kw1\">in</span> <span class=\"br0\">[</span>1 2 3<span class=\"br0\">]</span><br/><span class=\"kw1\">do</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo I<span class=\"sy0\">#</span>J<span class=\"sy0\">#</span>K<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\">loopMultiple<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>l<span class=\"sy0\">=</span>#V<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#V<span class=\"sy0\">,</span>l<span class=\"sy0\">=</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>l<span class=\"sy0\">,</span>#V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#V<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#V<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print1</span><span class=\"br0\">(</span>V<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> zip <span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$min</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$min</span> <span class=\"sy0\">=</span> <span class=\"re0\">$min</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$#</span><span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$min</span> <span class=\"sy0\">?</span> <span class=\"re0\">$min</span> <span class=\"sy0\">:</span> <span class=\"co5\">$#</span><span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$min</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$code</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> a b c <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a2</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> A B C <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a3</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>zip <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span>\\<span class=\"br0\">(</span><span class=\"re0\">@a1</span><span class=\"sy0\">,</span> <span class=\"re0\">@a2</span><span class=\"sy0\">,</span> <span class=\"re0\">@a3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> zip <span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$min</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$min</span> <span class=\"sy0\">=</span> <span class=\"re0\">$min</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$#</span><span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$min</span> <span class=\"sy0\">?</span> <span class=\"re0\">$min</span> <span class=\"sy0\">:</span> <span class=\"co5\">$#</span><span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$min</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$code</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">,</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> a b c <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a2</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> A B C <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a3</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>zip <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span>\\<span class=\"br0\">(</span><span class=\"re0\">@a1</span><span class=\"sy0\">,</span> <span class=\"re0\">@a2</span><span class=\"sy0\">,</span> <span class=\"re0\">@a3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span>a b c<span class=\"sy0\">&gt;</span> <span class=\"kw1\">Z</span> <span class=\"sy0\">&lt;</span>A B C<span class=\"sy0\">&gt;</span> <span class=\"kw1\">Z</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw3\">say</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 7, "block": "<pre class=\"text highlighted_source\">procedure print3(sequence a, b, c)<br/>    for i=1 to min({length(a),length(b),length(c)}) do<br/>        printf(1, \"%s%s%g\\n\", {a[i], b[i], c[i]})<br/>    end for<br/>end procedure<br/>\u00a0<br/>print3(\"abc\",\"ABC\",{1, 2, 3})</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'B'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'C'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'1'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'2'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'3'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//These don't *have* to be strings, but it </span><br/>saves PHP from casting them later<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.php.net/sizeof\"><span class=\"kw3\">sizeOf</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <a href=\"http://www.php.net/sizeof\"><span class=\"kw3\">sizeOf</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/sizeof\"><span class=\"kw3\">sizeOf</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <a href=\"http://www.php.net/sizeof\"><span class=\"kw3\">sizeOf</span></a><span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> Exception<span class=\"br0\">(</span><span class=\"st_h\">'All three arrays must be the same length'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"{<span class=\"es4\">$a</span>[<span class=\"es4\">$key</span>]}{<span class=\"es4\">$b</span>[<span class=\"es4\">$key</span>]}{<span class=\"es4\">$c</span>[<span class=\"es4\">$key</span>]}<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(mapc prinl<br/>   '(a b c)<br/>   '(A B C)<br/>   (1 2 3) )</pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">declare</span> P<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Q<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        R<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">lbound</span><span class=\"br0\">(</span>P<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>P<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>P<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> R<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> A<span class=\"sy0\">,</span> F<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% transpose is defined in initlib like this.<br/>/transpose {<br/>    [ exch {<br/>        { {empty? exch pop} map all?} {pop exit} ift<br/>        [ exch {} {uncons {exch cons} dip exch} fold counttomark 1 roll]<br/> uncons<br/>    } loop ] {reverse} map<br/>}.<br/>\u00a0<br/>% using it.<br/>[[/a /b /c] [/A /B /C] [1 2 3]] transpose<br/>\u00a0</pre>"}, {"lang": "PowerBASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">FUNCTION PBMAIN () AS LONG<br/>    DIM x(2), y(2) AS STRING * 1<br/>    DIM z(2) AS LONG<br/>\u00a0<br/>    'data<br/>    ARRAY ASSIGN x() = (\"a\", \"b\", \"c\")<br/>    ARRAY ASSIGN y() = (\"A\", \"B\", \"C\")<br/>    ARRAY ASSIGN z() = (1, 2, 3)<br/>\u00a0<br/>    'set upper bound<br/>    C&amp; = UBOUND(x)<br/>    IF UBOUND(y) &gt; C&amp; THEN C&amp; = UBOUND(y)<br/>    IF UBOUND(z) &gt; C&amp; THEN C&amp; = UBOUND(z)<br/>\u00a0<br/>    OPEN \"output.txt\" FOR OUTPUT AS 1<br/>    FOR L&amp; = 0 TO C&amp;<br/>        IF L&amp; &lt;= UBOUND(x) THEN PRINT #1, x(L&amp;);<br/>        IF L&amp; &lt;= UBOUND(y) THEN PRINT #1, y(L&amp;);<br/>        IF L&amp; &lt;= UBOUND(z) THEN PRINT #1, TRIM$(STR$(z(L&amp;)));<br/>        PRINT #1,<br/>    NEXT<br/>    CLOSE<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> zip3 <span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$a2</span><span class=\"sy0\">,</span> <span class=\"re0\">$a3</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a1</span><br/>        <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$a2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a2</span><br/>        <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$a3</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a3</span><br/>        <span class=\"br0\">[</span>Tuple<span class=\"br0\">]</span>::Create<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">multiple_arrays<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> L2<span class=\"sy4\">,</span> L3<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>display<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> L2<span class=\"sy4\">,</span> L3<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'%s%s%s\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 15, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Fill arrays</span><br/><span class=\"kw1\">Dim</span> a.s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> b.s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> c<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> Arrayposition <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Arrayposition<span class=\"br0\">)</span><br/>  b<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Arrayposition<span class=\"br0\">)</span><br/>  c<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Arrayposition <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/><span class=\"co1\">; loop over them</span><br/><span class=\"kw1\">For</span> Arrayposition <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span>Arrayposition<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">;wait for Enter before ending</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <br/><span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"st0\">'abc'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ABC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'123'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>aA1<br/>bB2<br/>cC3<br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 21, "block": "<pre class=\"text highlighted_source\">multiloop &lt;- function(...)<br/>{  <br/>   # Retrieve inputs and convert to a list of character strings<br/>   arguments &lt;- lapply(list(...), as.character)<br/>\u00a0<br/>   # Get length of each input<br/>   lengths &lt;- sapply(arguments, length)<br/>\u00a0<br/>   # Loop over elements<br/>   for(i in seq_len(max(lengths)))<br/>   {<br/>      # Loop over inputs<br/>      for(j in seq_len(nargs()))<br/>      {<br/>         # print a value or a space (if that input has finished)<br/>         cat(ifelse(i &lt;= lengths[j], arguments[[j]][i], \" \"))<br/>      }<br/>      cat(\"\\n\")<br/>   }<br/>}<br/>multiloop(letters[1:3], LETTERS[1:3], 1:3)</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(for ([x '(a b c)]\u00a0; list<br/>      [y #(A B C)]\u00a0; vector<br/>      [z \"123\"]<br/>      [i (in-naturals 1)])\u00a0; 1, 2, ... infinitely<br/>  (printf \"~s: ~s ~s ~s\\n\" i x y z))<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 7, "block": "<pre class=\"text highlighted_source\">&gt;&gt;blk: [[\"a\" \"b\" \"c\"] [\"A\" \"B\" \"C\"] [1 2 3]]<br/>== [[\"a\" \"b\" \"c\"] [\"A\" \"B\" \"C\"] [1 2 3]]<br/>\u00a0<br/>&gt;&gt; repeat counter 3 [print [blk/1/:counter blk/2/:counter blk/3/:counter]]                                     <br/>a A 1                                                                  <br/>b B 2<br/>c C 3</pre>"}, {"lang": "REXX", "loc": 9, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows how to  simultaneously  loop over  multiple arrays.*/</span><br/>x<span class=\"sy0\">.</span> = <span class=\"st0\">' '</span>;      x<span class=\"sy0\">.</span>1 =  <span class=\"st0\">\"a\"</span>;      x<span class=\"sy0\">.</span>2 = <span class=\"st0\">'b'</span>;      x<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"c\"</span><br/>y<span class=\"sy0\">.</span> = <span class=\"st0\">' '</span>;      y<span class=\"sy0\">.</span>1 =  <span class=\"st0\">\"A\"</span>;      y<span class=\"sy0\">.</span>2 = <span class=\"st0\">'B'</span>;      y<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"C\"</span><br/>z<span class=\"sy0\">.</span> = <span class=\"st0\">' '</span>;      z<span class=\"sy0\">.</span>1 =  <span class=\"st0\">\"1\"</span>;      z<span class=\"sy0\">.</span>2 = <span class=\"st0\">'2'</span>;      z<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"3\"</span><br/>\u00a0<br/>           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> output=<span class=\"st0\">''</span><br/>           output = x<span class=\"sy0\">.</span>j <span class=\"sy0\">||</span> y<span class=\"sy0\">.</span>j <span class=\"sy0\">||</span> z<span class=\"sy0\">.</span>j<br/>           <span class=\"kw1\">say</span> output<br/>           <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*j*/</span>                <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>array1 = [\"a\", \"b\", \"c\"]<br/>array2 = [\"A\", \"B\", \"C\"]<br/>array3 = [1, 2, 3]<br/>\u00a0<br/>for n = 1 to 3<br/>    see array1[n] + array2[n] + array3[n] + nl<br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span><span class=\"st0\">'a'</span>,<span class=\"st0\">'b'</span>,<span class=\"st0\">'c'</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'B'</span>,<span class=\"st0\">'C'</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i,j,k<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{i}#{j}#{k}\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">for i = 1 to 3<br/> a$(i) = chr$(i+96)<br/> b$(i) = chr$(i+64)<br/> c(i)  = i<br/>next i <br/>\u00a0<br/>for i = 1 to 3<br/>    print a$(i);b$(i);c(i)<br/>next</pre>"}, {"lang": "Rust", "loc": 9, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let a1 = [\"a\", \"b\", \"c\"];<br/>    let a2 = [\"A\", \"B\", \"C\"];<br/>    let a3 = [1, 2, 3];<br/>\u00a0<br/>    for ((&amp;x, &amp;y), &amp;z) in a1.iter().zip(a2.iter()).zip(a3.iter()) {<br/>        println!(\"{}{}{}\", x, y, z);<br/>    }<br/>}</pre>"}, {"lang": "Salmon", "loc": 25, "block": "<pre class=\"text highlighted_source\">// First, we'll define a general-purpose zip() to zip<br/> any<br/>// number of lists together.<br/>function zip(...)<br/>  {<br/>    variable result;<br/>    variable list_num\u00a0:= 0;<br/>    iterate(arg; arguments)<br/>      {<br/>        variable elem_num\u00a0:= 0;<br/>        iterate (x; arg)<br/>          {<br/>            result[elem_num][list_num]\u00a0:= x;<br/>            ++elem_num;<br/>          };<br/>        ++list_num;<br/>      };<br/>    return result;<br/>  };<br/>\u00a0<br/>immutable a\u00a0:= [\"a\", \"b\", \"c\"],<br/>          b\u00a0:= [\"A\", \"B\", \"C\"],<br/>          c\u00a0:= [1, 2, 3];<br/>iterate (x; zip(a, b, c))<br/>    print(x[0], x[1], x[2], \"\\n\");;</pre>"}, {"lang": "Sather", "loc": 10, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    a\u00a0:ARRAY{STR}\u00a0:= |\"a\", \"b\", \"c\"|;<br/>    b\u00a0:ARRAY{STR}\u00a0:= |\"A\", \"B\", \"C\"|;<br/>    c\u00a0:ARRAY{STR}\u00a0:= |\"1\", \"2\", \"3\"|;<br/>    loop i\u00a0::= 0.upto!(2);<br/>      #OUT + a[i] + b[i] + c[i] + \"\\n\";<br/>    end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span>, <span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span>.<span class=\"me1\">zipped</span> foreach <span class=\"br0\">{</span> <span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>  println<span class=\"br0\">(</span>x.<span class=\"me1\">toString</span> + y + z<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a '<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span> <span class=\"st0\">\"b\"</span> <span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>b '<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span> <span class=\"st0\">\"B\"</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>c '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i1 i2 i3<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> i1<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> i2<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> i3<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    a b c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">%</span>w<span class=\"br0\">(</span>a b c<span class=\"br0\">)</span>,<span class=\"sy0\">%</span>w<span class=\"br0\">(</span>A B C<span class=\"br0\">)</span>,<span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i,j,k<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span>i, j, k<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 10, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">a b c</span>|<br/><span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new addAll: <span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span> <span class=\"st0\">'b'</span> <span class=\"st0\">'c'</span><span class=\"br0\">)</span>.<br/><span class=\"re5\">b</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new addAll: <span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span> <span class=\"st0\">'B'</span> <span class=\"st0\">'C'</span><span class=\"br0\">)</span>.<br/><span class=\"re5\">c</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new addAll: <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span>.<br/>\u00a0<br/><span class=\"re5\">1</span> to: <span class=\"br0\">(</span><span class=\"re5\">a</span> size<span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>  <span class=\"br0\">(</span><span class=\"re5\">a</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> display.<br/>  <span class=\"br0\">(</span><span class=\"re5\">b</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> display.<br/>  <span class=\"br0\">(</span><span class=\"re5\">c</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> displayNl.<br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "Standard ML", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(*<br/> * val combine_lists\u00a0: string list list -&gt; string list<br/> *)<br/>fun combine_lists nil = nil<br/>|   combine_lists (l1::ls) = List.foldl (ListPair.map (fn (x,y) =&gt; y ^<br/> x)) l1 ls;<br/>\u00a0<br/>(* [\"a1Ax\",\"b2By\",\"c3Cz\"] *)<br/>combine_lists[[\"a\",\"b\",\"c\"],[\"1\",\"2\",\"3\"],[\"A\",\"B\",\"C\"],[\"x\",\"y\",\"z\"]];<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 6, "block": "<pre class=\"text highlighted_source\">local u a b c<br/>local v A B C<br/>matrix w=1,2,3<br/>forv i=1/3 {<br/>\tdi \"`: word `i' of `u''`: word `i' of `v''`=el(\"w\",1,`i')'\"<br/>}</pre>"}, {"lang": "SuperCollider", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#x, y, z = [[\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [\"1\", \"2\", \"3\"]];<br/>3.collect { |i| x[i] ++ y[i] ++ z[i] }<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 7, "block": "<pre class=\"text highlighted_source\">let a1 = [\"a\", \"b\", \"c\"]<br/>let a2 = [\"A\", \"B\", \"C\"]<br/>let a3 = [1, 2, 3]<br/>\u00a0<br/>for i in 0 ..&lt; a1.count {<br/>    println(\"\\(a1[i])\\(a2[i])\\(a3[i])\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> list1 <span class=\"br0\">{</span>a b c<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> list2 <span class=\"br0\">{</span>A B C<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> list3 <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> i <span class=\"re0\">$list1</span> j <span class=\"re0\">$list2</span> k <span class=\"re0\">$list3</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$i$j$k\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TorqueScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$var[0] = \"a b c\"<br/>$var[1] = \"A B C\";<br/>$var[2] = \"1 2 3\";<br/>\u00a0<br/>for(%i=0;%i&lt;3;%i++)<br/>\techo(getWord($var[0],%i) @ getWord($var[1],%i) @ getWord($var[2],%i));<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>arr1=\"a'b'c\"<br/>arr2=\"a'b'C\"<br/>arr3=\"1'2'3\"<br/>LOOP a=arr1,b=arr2,c=arr3<br/>PRINT a,b,c<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 11, "block": "<pre class=\"bash highlighted_source\">$ txr <span class=\"re5\">-c</span> <span class=\"st_h\">'@(bind a (\"a\" \"b\" \"c\"))<br/>@(bind b (\"A\" \"B\" \"C\"))<br/>@(bind c (\"1\" \"2\" \"3\"))<br/>@(output)<br/>@  (repeat)<br/>@<a class=\"__cf_email__\" data-cfemail=\"10715072\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@c<br/>@  (end)<br/>@(end)'</span><br/>aA1<br/>bB2<br/>cC3</pre>"}, {"lang": "UNIX Shell", "loc": 16, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">a</span>=a:b:c<br/><span class=\"re2\">b</span>=A:B:C<br/><span class=\"re2\">c</span>=<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span>:<span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"re2\">oldifs</span>=<span class=\"re1\">$IFS</span><br/><span class=\"re2\">IFS</span>=:<br/><span class=\"re2\">i</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> wa <span class=\"kw1\">in</span> <span class=\"re1\">$a</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"re1\">$b</span>; <span class=\"kw3\">shift</span> <span class=\"re1\">$i</span>; <span class=\"re2\">wb</span>=<span class=\"re4\">$1</span><br/>\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"re1\">$c</span>; <span class=\"kw3\">shift</span> <span class=\"re1\">$i</span>; <span class=\"re2\">wc</span>=<span class=\"re4\">$1</span><br/>\u00a0<br/>\t<span class=\"kw3\">printf</span> <span class=\"st_h\">'%s%s%s\\n'</span> <span class=\"re1\">$wa</span> <span class=\"re1\">$wb</span> <span class=\"re1\">$wc</span><br/>\u00a0<br/>\t<span class=\"re2\">i</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$i</span> + <span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/><span class=\"kw1\">done</span><br/><span class=\"re2\">IFS</span>=<span class=\"re1\">$oldifs</span></pre>"}, {"lang": "Ursa", "loc": 11, "block": "<pre class=\"text highlighted_source\">&gt; decl string&lt;&gt; a b c<br/>&gt; append (split \"abc\" \"\") a<br/>&gt; append (split \"ABC\" \"\") b<br/>&gt; append (split \"123\" \"\") c<br/>&gt; for (decl int i) (&lt; i (size a)) (inc i)<br/>..\tout a&lt;i&gt; b&lt;i&gt; c&lt;i&gt; endl console<br/>..end<br/>aA1<br/>bB2<br/>cC3<br/>&gt; _</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#show+<br/>\u00a0<br/>main = ~&amp;K7 &lt;'abc','ABC','123'&gt;</pre>"}, {"lang": "Visual FoxPro", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL i As Integer, n As Integer, c As String<br/>LOCAL ARRAY a1[3], a2[3], a3[4], a[3]<br/>*!* Populate the arrays and store the array lengths in a<br/>a1[1] = \"a\"<br/>a1[2] = \"b\"<br/>a1[3] = \"c\"<br/>a[1] = ALEN(a1)<br/>a2[1] = \"A\"<br/>a2[2] = \"B\"<br/>a2[3] = \"C\"<br/>a[2] = ALEN(a2)<br/>a3[1] = \"1\"<br/>a3[2] = \"2\"<br/>a3[3] = \"3\"<br/>a3[4] = \"4\"<br/>a[3] = ALEN(a3)<br/>*!* Find the maximum length of the arrays<br/>*!* In this case, 4<br/>n = MAX(a[1], a[2], a[3])<br/>? \"Simple Loop\"<br/>FOR i = 1 TO n<br/>    c = \"\"<br/>    c = c + IIF(i &lt;= a[1], a1[i], \"#\")<br/>    c = c + IIF(i &lt;= a[2], a2[i], \"#\")<br/>    c = c + IIF(i &lt;= a[3], a3[i], \"#\")<br/>  \u00a0? c<br/>ENDFOR<br/>*!* Solution using a cursor<br/>CREATE CURSOR tmp (c1 C(1), c2 C(1), c3 C(1), c4 C(3))<br/>INSERT INTO tmp (c1, c2, c3) VALUES (\"a\", \"A\", \"1\")<br/>INSERT INTO tmp (c1, c2, c3) VALUES (\"b\", \"B\", \"2\")<br/>INSERT INTO tmp (c1, c2, c3) VALUES (\"c\", \"C\", \"3\")<br/>INSERT INTO tmp (c1, c2, c3) VALUES (\"#\", \"#\", \"4\")<br/>REPLACE c4 WITH c1 + c2 + c3 ALL<br/>? \"Solution using a cursor\"<br/>LIST OFF FIELDS c4<br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"text highlighted_source\">each (x X n) (zip '(a b c) '(A B C) '(1 2 3))<br/>  prn x X n</pre>"}, {"lang": "XPL0", "loc": 14, "block": "<pre class=\"text highlighted_source\">string 0;               \\use zero terminated strings<br/>include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>char A1, A2;<br/>int A3, I;<br/>[A1:= \"abc\";<br/> A2:= \"ABC\";<br/> A3:= [1,2,3];<br/> for I:= 0 to 2 do<br/>        [ChOut(0, A1(I));<br/>         ChOut(0, A2(I));<br/>        IntOut(0, A3(I));<br/>        CrLf(0);<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">foreach a,b,c in ([\"a\"..\"c\"].zip(T(\"A\",\"B\",\"C\"),[1..])){ println(a,b,c) }</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 21, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> sza = <span class=\"nu0\">3</span>: <span class=\"co3\">REM size of a</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> szb = <span class=\"nu0\">3</span>: <span class=\"co3\">REM size of b</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> szc = <span class=\"nu0\">3</span>: <span class=\"co3\">REM size of c</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">DIM</span> a$<span class=\"br0\">(</span>sza<span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> b$<span class=\"br0\">(</span>szb<span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> c$<span class=\"br0\">(</span>szc<span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> max = sza: <span class=\"co3\">REM assume a is the biggest</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> szb &gt; max <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> max = szb: <span class=\"co3\">REM now try b</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> szc &gt; max <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> max = szc: <span class=\"co3\">REM or c</span><br/><span class=\"nu0\">80</span> <span class=\"co3\">REM populate our arrays, and as a bonus we already have our demo loop</span><br/><span class=\"nu0\">90</span> <span class=\"co3\">REM we might as well print as we populate showing the arrays in </span><br/>columns<br/><span class=\"nu0\">100</span> <span class=\"kw1\">FOR</span> l = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> max<br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> l &lt;= sza <span class=\"kw1\">THEN</span> READ a$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>: <span class=\"kw1\">PRINT</span> a$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>;<br/><span class=\"nu0\">120</span> <span class=\"kw1\">IF</span> l &lt;= szb <span class=\"kw1\">THEN</span> READ b$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>: <span class=\"kw1\">PRINT</span> b$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>;<br/><span class=\"nu0\">130</span> <span class=\"kw1\">IF</span> l &lt;= szc <span class=\"kw1\">THEN</span> READ c$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>: <span class=\"kw1\">PRINT</span> c$<span class=\"br0\">(</span>l<span class=\"br0\">)</span>;<br/><span class=\"nu0\">140</span> <span class=\"kw1\">PRINT</span>: <span class=\"co3\">REM newline</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">NEXT</span> l<br/><span class=\"nu0\">150</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"The arrays are shown in columns.\"</span><br/><span class=\"nu0\">160</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"A$ runs down the left hand side,\"</span><br/><span class=\"nu0\">170</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"and C$ runs down the right.\"</span><br/><span class=\"nu0\">180</span> STOP<br/><span class=\"nu0\">200</span> DATA <span class=\"st0\">\"a\"</span>,<span class=\"st0\">\"b\"</span>,<span class=\"st0\">\"c\"</span>,<span class=\"st0\">\"A\"</span>,<span class=\"st0\">\"B\"</span>,<span class=\"st0\">\"C\"</span>,<span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"2\"</span>,<span class=\"st0\">\"3\"</span></pre>"}]}