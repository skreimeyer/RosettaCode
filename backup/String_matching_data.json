{"task": "String_matching", "blocks": [{"lang": "360 Assembly", "loc": 34, "block": "<pre class=\"text highlighted_source\">*        String matching           04/04/2017<br/>STRMATCH CSECT<br/>         USING  STRMATCH,R15<br/>         XPRNT  SS,L'SS<br/>*<br/>         CLC    SS(L'S1),S1<br/>         BNE    NOT1<br/>         XPRNT  =C'-- STARTS WITH',14<br/>         XPRNT  S1,L'S1<br/>NOT1     EQU    *<br/>*<br/>         CLC    SS+L'SS-L'S2(L'S2),S2<br/>         BNE    NOT2<br/>         XPRNT  =C'-- ENDS WITH',12<br/>         XPRNT  S2,L'S2<br/>NOT2     EQU    *<br/>*<br/>         LA     R0,L'SS-L'S3+1<br/>         LA     R1,SS<br/>LOOP     CLC    0(L'S3,R1),S3<br/>         BNE    NOT3<br/>         XPRNT  =C'-- CONTAINS',11<br/>         XPRNT  S3,L'S3<br/>NOT3     LA     R1,1(R1)<br/>         BCT    R0,LOOP<br/>*<br/>         BR     R14<br/>SS       DC     CL6'ABCDEF'<br/>S1       DC     CL2'AB'<br/>S2       DC     CL2'EF'<br/>S3       DC     CL2'CD'<br/>PG       DC     CL80' '<br/>         YREGS<br/>         END    STRMATCH</pre>"}, {"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;        <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Match_Strings <span class=\"kw1\">is</span><br/>   S1\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"abcd\"</span>;<br/>   S2\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"abab\"</span>;<br/>   S3\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"ab\"</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> S1'Length &gt;= S3'Length <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> S1 <span class=\"br0\">(</span>S1'First..<span class=\"me1\">S1</span>'First + S3'Length - <span class=\"nu0\">1</span><span class=\"br0\">)</span> = S3 <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span>''' &amp; S1 &amp; <span class=\"st0\">\"' starts with '\"</span> &amp; S3 &amp; '''<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">if</span> S2'Length &gt;= S3'Length <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> S2 <span class=\"br0\">(</span>S2'Last - S3'Length + <span class=\"nu0\">1</span>..<span class=\"me1\">S2</span>'Last<span class=\"br0\">)</span> = S3 <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span>''' &amp; S2 &amp; <span class=\"st0\">\"' ends with '\"</span> &amp; S3 &amp; '''<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   Put_Line <span class=\"br0\">(</span>''' &amp; S3 &amp; <span class=\"st0\">\"' first appears in '\"</span> &amp; S1 &amp; <span class=\"st0\">\"' at\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Index <span class=\"br0\">(</span>S1, S3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line<br/>   <span class=\"br0\">(</span>  ''' &amp; S3 &amp; <span class=\"st0\">\"' appears in '\"</span> &amp; S2 &amp; ''' &amp;<br/>      Integer'Image <span class=\"br0\">(</span>Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Count</span> <span class=\"br0\">(</span>S2, S3<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" times\"</span><br/>   <span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Match_Strings;<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 23, "block": "<pre class=\"text highlighted_source\">text s, t;<br/>data b;<br/>\u00a0<br/>s = \"Bangkok\";<br/>t = \"Bang\";<br/>\u00a0<br/>b_cast(b, s);<br/>\u00a0<br/>o_form(\"starts with, embeds, ends with \\\"~\\\": ~, ~, ~\\n\", t, b_seek(b, t) == 0,<br/>       b_seek(b, t)\u00a0!= -1,<br/>       b_seek(b, t)\u00a0!= -1 &amp;&amp; b_seek(b, t) + length(t) == length(s));<br/>\u00a0<br/>t = \"ok\";<br/>\u00a0<br/>o_form(\"starts with, embeds, ends with \\\"~\\\": ~, ~, ~\\n\", t, b_seek(b, t) == 0,<br/>       b_seek(b, t)\u00a0!= -1,<br/>       b_seek(b, t)\u00a0!= -1 &amp;&amp; b_seek(b, t) + length(t) == length(s));<br/>\u00a0<br/>t = \"Summer\";<br/>\u00a0<br/>o_form(\"starts with, embeds, ends with \\\"~\\\": ~, ~, ~\\n\", t, b_seek(b, t) == 0,<br/>       b_seek(b, t)\u00a0!= -1,<br/>       b_seek(b, t)\u00a0!= -1 &amp;&amp; b_seek(b, t) + length(t) == length(s));</pre>"}, {"lang": "ALGOL 68", "loc": 18, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># define some appropriate OPerators #</span><br/><span class=\"kw4\">PRIO</span> STARTSWITH <span class=\"sy1\">=</span> 5<span class=\"sy1\">,</span> ENDSWITH <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> STARTSWITH <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> str<span class=\"sy1\">,</span> prefix<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"coMULTI\"># assuming LWB = 1 #</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> str <span class=\"sy1\">&lt;</span> <span class=\"kw8\">UPB</span> prefix <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">ELSE</span> str<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> prefix<span class=\"br0\">]</span><span class=\"sy1\">=</span>prefix <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ENDSWITH <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> str<span class=\"sy1\">,</span> suffix<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"coMULTI\"># assuming LWB = 1 #</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> str <span class=\"sy1\">&lt;</span> <span class=\"kw8\">UPB</span> suffix <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">ELSE</span> str<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> str<span class=\"sy1\">-</span><span class=\"kw8\">UPB</span> suffix<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"sy1\">=</span>suffix <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> loc<span class=\"sy1\">,</span> loc2<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>  <span class=\"st0\">\"abcd\"</span> STARTSWITH <span class=\"st0\">\"ab\"</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns TRUE #</span><br/>  <span class=\"st0\">\"abcd\"</span> ENDSWITH <span class=\"st0\">\"zn\"</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns FALSE #</span><br/>  <span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"sy1\">,</span>loc<span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns FALSE #</span><br/>  <span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy1\">,</span>loc<span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns TRUE #</span><br/>  <span class=\"br0\">(</span><span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"sy1\">,</span>loc<span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span>loc<span class=\"sy1\">|-</span>1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns -1 #</span><br/>  <span class=\"br0\">(</span><span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy1\">,</span>loc<span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span>loc<span class=\"sy1\">|-</span>1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># returns +1 #</span><br/>  <span class=\"br0\">(</span><span class=\"kw26\">string in string</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy1\">,</span>loc2<span class=\"sy1\">,</span><span class=\"st0\">\"abab\"</span><span class=\"br0\">[</span>loc<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">|</span>loc<span class=\"sy1\">+</span>loc2<span class=\"sy1\">|-</span>1<span class=\"br0\">)</span> <span class=\"coMULTI\"># returns +3 #</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>String1 <span class=\"sy0\">=</span> abcd<br/>String2 <span class=\"sy0\">=</span> abab<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>String1<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>String2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> String2<span class=\"br0\">)</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"%String1%\"</span> starts with <span class=\"st0\">\"%String2%\"</span><span class=\"sy0\">.</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IfInString.htm\"><span class=\"kw3\">IfInString</span></a><span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> <span class=\"re0\">%String2%</span><br/><span class=\"br0\">{</span><br/> Position <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>String1<span class=\"sy0\">,</span>String2<span class=\"br0\">)</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> <span class=\"re0\">%String2%</span><span class=\"sy0\">,</span> <span class=\"re0\">%String2%</span><span class=\"sy0\">,</span> UseErrorLevel<br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"%String1%\"</span> contains <span class=\"st0\">\"%String2%\"</span> at position <span class=\"re0\">%Position%</span>`<span class=\"sy0\">,</span> <span class=\"kw1\">and</span> appears <span class=\"re0\">%ErrorLevel%</span> times<span class=\"sy0\">.</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringRight.htm\"><span class=\"kw3\">StringRight</span></a><span class=\"sy0\">,</span> TempVar<span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>String2<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> TempVar <span class=\"sy0\">=</span> <span class=\"re0\">%String2%</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"%String1%\"</span> ends with <span class=\"st0\">\"%String2%\"</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "AutoIt", "loc": 31, "block": "<pre class=\"autoit highlighted_source\"><span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"arduinoardblobard\"</span><br/><span class=\"re0\">$string2</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ard\"</span><br/>\u00a0<br/><span class=\"co0\">; == Determining if the first string starts with second string</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$string1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$string2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$string2</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string starts with 2nd string.\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string does'nt starts with 2nd string.\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\u00a0<br/><span class=\"co0\">; == Determining if the first string contains the second string at any location</span><br/><span class=\"co0\">; == Print the location of the match for part 2</span><br/><span class=\"co0\">; == Handle multiple occurrences of a string for part 2</span><br/><span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm\"><span class=\"kw3\">StringInStr</span></a><span class=\"br0\">(</span><span class=\"re0\">$string1</span><span class=\"sy0\">,</span> <span class=\"re0\">$string2</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"re0\">$pos</span><br/>\t<span class=\"re0\">$count</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string contains 2nd string at position: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm\"><span class=\"kw3\">StringInStr</span></a><span class=\"br0\">(</span><span class=\"re0\">$string1</span><span class=\"sy0\">,</span> <span class=\"re0\">$string2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span> <span class=\"sy0\">+</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">+</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$string2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string does'nt contain 2nd string.\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\">; == Determining if the first string ends with the second string</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm\"><span class=\"kw3\">StringRight</span></a><span class=\"br0\">(</span><span class=\"re0\">$string1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$string2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$string2</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string ends with 2nd string.\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1st string does'nt ends with 2nd string.\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 21, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$1</span> <span class=\"sy4\">~</span> <span class=\"st0\">\"^\"</span><span class=\"re0\">$2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" begins with \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" does not begin with \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$1</span> <span class=\"sy4\">~</span> <span class=\"re0\">$2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" contains \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" does not contain \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$1</span> <span class=\"sy4\">~</span> <span class=\"re0\">$2</span><span class=\"st0\">\"$\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" ends with \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"re0\">$1</span><span class=\"st0\">\" does not end with \"</span><span class=\"re0\">$2</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 29, "block": "<pre class=\"qbasic highlighted_source\">first$ <span class=\"sy0\">=</span> <span class=\"st0\">\"qwertyuiop\"</span><br/>\u00a0<br/><span class=\"co1\">'Determining if the first string starts with second string</span><br/>second$ <span class=\"sy0\">=</span> <span class=\"st0\">\"qwerty\"</span><br/><span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckleft%24.shtml\"><span class=\"kw3\">LEFT$</span></a><span class=\"br0\">(</span>first$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>second$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> second$ <span class=\"kw1\">THEN</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' starts with '\"</span>; second$; <span class=\"st0\">\"'\"</span><br/><span class=\"kw1\">ELSE</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' does not start with '\"</span>; second$; <span class=\"st0\">\"'\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"co1\">'Determining if the first string contains the second string at any location</span><br/><span class=\"co1\">'Print the location of the match for part 2</span><br/>second$ <span class=\"sy0\">=</span> <span class=\"st0\">\"wert\"</span><br/>x <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>first$<span class=\"sy0\">,</span> second$<span class=\"br0\">)</span><br/><span class=\"kw1\">IF</span> x <span class=\"kw1\">THEN</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' contains '\"</span>; second$; <span class=\"st0\">\"' at position \"</span>; x<br/><span class=\"kw1\">ELSE</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' does not contain '\"</span>; second$; <span class=\"st0\">\"'\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"co1\">' Determining if the first string ends with the second string</span><br/>second$ <span class=\"sy0\">=</span> <span class=\"st0\">\"random garbage\"</span><br/><span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckright%24.shtml\"><span class=\"kw3\">RIGHT$</span></a><span class=\"br0\">(</span>first$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>second$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> second$ <span class=\"kw1\">THEN</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' ends with '\"</span>; second$; <span class=\"st0\">\"'\"</span><br/><span class=\"kw1\">ELSE</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"'\"</span>; first$; <span class=\"st0\">\"' does not end with '\"</span>; second$; <span class=\"st0\">\"'\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 70, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::NOTE #1: This implementation might crash, or might not work properly if</span><br/><span class=\"co2\">::you put some of the CMD special characters (ex.\u00a0%,!, etc) inside the strings.</span><br/><span class=\"co2\">::</span><br/><span class=\"co2\">::NOTE #2: The comparisons here are case-SENSITIVE.</span><br/><span class=\"co2\">::NOTE #3: Spaces in strings are considered.</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>::The main things...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str1=qwertyuiop\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str2=qwerty\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">str2_lngth</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">matchbegin</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str1=qweiuoiocghiioyiocxiisfguiioiuygvd\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str2=io\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">str2_lngth</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">matchcontain</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str1=blablabla\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"str2=bbla\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">str2_lngth</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">matchend</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/><span class=\"co2\">::/The main things.</span><br/><span class=\"co2\"><br/>::The functions...</span><br/>:<span class=\"re0\">matchbegin</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str1:~0,%<span class=\"re3\">length</span>%</span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">str2</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" begins with \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\".<br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" does <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> begin with \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\".<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>:<span class=\"re0\">matchcontain</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> curr=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <a href=\"http://www.ss64.com/nt/exist.html\"><span class=\"kw2\">exist</span></a>=0<br/>:<span class=\"re0\">scanchrloop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str1:~%<span class=\"re3\">curr</span><span class=\"sy0\">%</span>,<span class=\"sy0\">%</span><span class=\"re3\">length</span>%</span><span class=\"sy0\">!</span>\"==\"\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><a href=\"http://www.ss64.com/nt/exist.html\"><span class=\"kw2\">exist</span></a><span class=\"sy0\">!</span>==0 <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" does <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> contain \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\".<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"sy0\">)</span> <br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str1:~%<span class=\"re3\">curr</span><span class=\"sy0\">%</span>,<span class=\"sy0\">%</span><span class=\"re3\">length</span>%</span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">str2</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" contains \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\". <span class=\"co3\">^(</span><a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> Position <span class=\"sy0\">%</span><span class=\"re3\">curr</span><span class=\"sy0\">%</span><span class=\"co3\">^)</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <a href=\"http://www.ss64.com/nt/exist.html\"><span class=\"kw2\">exist</span></a>=1<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a curr+=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> scanchrloop<br/>\u00a0<br/>:<span class=\"re0\">matchend</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str1:~-%<span class=\"re3\">length</span>%</span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">str2</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" ends with \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\".<br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str1</span><span class=\"sy0\">%</span>\" does <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> end with \"<span class=\"sy0\">%</span><span class=\"re3\">str2</span><span class=\"sy0\">%</span>\".<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>:<span class=\"re0\">str2_lngth</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> length=0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str2:~%<span class=\"re3\">length</span>%,1</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a length+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/><span class=\"co2\">::/The functions.</span></pre>"}, {"lang": "BBC BASIC", "loc": 33, "block": "<pre class=\"text highlighted_source\">      first$ = \"The fox jumps over the dog\"<br/>\u00a0<br/>      FOR test% = 1 TO 3<br/>        READ second$<br/>        starts% = FN_first_starts_with_second(first$, second$)<br/>        IF starts% PRINT \"\"\"\" first$ \"\"\" starts with \"\"\" second$ \"\"\"\"<br/>        ends% = FN_first_ends_with_second(first$, second$)<br/>        IF ends% PRINT \"\"\"\" first$ \"\"\" ends with \"\"\" second$ \"\"\"\"<br/>        where% = FN_first_contains_second_where(first$, second$)<br/>        IF where% PRINT \"\"\"\" first$ \"\"\" contains \"\"\" second$ \"\"\" at position \"\u00a0; where%<br/>        howmany% = FN_first_contains_second_howmany(first$, second$)<br/>        IF howmany% PRINT \"\"\"\" first$ \"\"\" contains \"\"\" second$ \"\"\" \"\u00a0; howmany% \" time(s)\"<br/>      NEXT<br/>      DATA \"The\", \"he\", \"dog\"<br/>      END<br/>\u00a0<br/>      DEF FN_first_starts_with_second(A$, B$)<br/>      = B$ = LEFT$(A$, LEN(B$))<br/>\u00a0<br/>      DEF FN_first_ends_with_second(A$, B$)<br/>      = B$ = RIGHT$(A$, LEN(B$))<br/>\u00a0<br/>      DEF FN_first_contains_second_where(A$, B$)<br/>      = INSTR(A$, B$)<br/>\u00a0<br/>      DEF FN_first_contains_second_howmany(A$, B$)<br/>      LOCAL I%, N%\u00a0: I% = 0<br/>      REPEAT<br/>        I% = INSTR(A$, B$, I%+1)<br/>        IF I% THEN N% += 1<br/>      UNTIL I% = 0<br/>      = N%<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 9, "block": "<pre class=\"text highlighted_source\">( (sentence=\"I want a number such that that number will be even.\")<br/>&amp; out$(@(!sentence:I\u00a0?) &amp; \"sentence starts with 'I'\" | \"sentence does not start with 'I'\")<br/>&amp; out$(@(!sentence:? such\u00a0?) &amp; \"sentence contains 'such'\" | \"sentence does not contain 'such'\")<br/>&amp; out$(@(!sentence:? \"even.\") &amp; \"sentence ends with 'even.'\" | \"sentence does not end with 'even.'\")<br/>&amp; 0:?N<br/>&amp; ( @(!sentence:? be (? &amp;\u00a0!N+1:?N &amp; ~))<br/>  | out$str$(\"sentence contains \"\u00a0!N \" occurrences of 'be'\")<br/>  )<br/>)</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> startsWith<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> container<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> target<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">size_t</span> clen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>container<span class=\"br0\">)</span><span class=\"sy0\">,</span> tlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>clen <span class=\"sy0\">&lt;</span> tlen<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>container<span class=\"sy0\">,</span> target<span class=\"sy0\">,</span> tlen<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> endsWith<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> container<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> target<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">size_t</span> clen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>container<span class=\"br0\">)</span><span class=\"sy0\">,</span> tlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>clen <span class=\"sy0\">&lt;</span> tlen<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>container <span class=\"sy0\">+</span> clen <span class=\"sy0\">-</span> tlen<span class=\"sy0\">,</span> target<span class=\"sy0\">,</span> tlen<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> doesContain<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> container<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> target<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strstr.html\"><span class=\"kw3\">strstr</span></a><span class=\"br0\">(</span>container<span class=\"sy0\">,</span> target<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Starts with Test ( Hello,Hell )\u00a0:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> startsWith<span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Hell\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ends with Test ( Code,ode )\u00a0:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> endsWith<span class=\"br0\">(</span><span class=\"st0\">\"Code\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ode\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Contains Test ( Google,msn )\u00a0:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> doesContain<span class=\"br0\">(</span><span class=\"st0\">\"Google\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"msn\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 14, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/>string s1<span class=\"sy1\">=</span><span class=\"st0\">\"abcd\"</span><span class=\"sy4\">;</span><br/>string s2<span class=\"sy1\">=</span><span class=\"st0\">\"abab\"</span><span class=\"sy4\">;</span><br/>string s3<span class=\"sy1\">=</span><span class=\"st0\">\"ab\"</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//Beginning</span><br/>s1.<span class=\"me1\">compare</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,s3.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,s3<span class=\"br0\">)</span><span class=\"sy1\">==</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//End</span><br/>s1.<span class=\"me1\">compare</span><span class=\"br0\">(</span>s1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span>s3.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,s3.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,s3<span class=\"br0\">)</span><span class=\"sy1\">==</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//Anywhere</span><br/>s1.<span class=\"me1\">find</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"co1\">//returns string::npos</span><br/><span class=\"kw4\">int</span> loc<span class=\"sy1\">=</span>s2.<span class=\"me1\">find</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span><span class=\"co1\">//returns 0</span><br/>loc<span class=\"sy1\">=</span>s2.<span class=\"me1\">find</span><span class=\"br0\">(</span>s3,loc<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"co1\">//returns 2</span></pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy0\">.</span><span class=\"me1\">StartsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abcd\"</span><span class=\"sy0\">.</span><span class=\"me1\">EndsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns false</span><br/>\t\t<span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns false</span><br/>\t\t<span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns true</span><br/>\t\t<span class=\"kw4\">int</span> loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns -1</span><br/>\t\tloc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns 0</span><br/>\t\tloc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span>,loc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//returns 2</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> evals '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abcd\"</span> startsWith <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abcd\"</span> endsWith <span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> contains <span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> contains <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>loc <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t       <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"ab\"</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> loc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>i evals<span class=\"br0\">]</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span>eval i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abcd\"</span> startsWith <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> true<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abcd\"</span> endsWith <span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span> false<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> contains <span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> false<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> contains <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> true<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>loc <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"st0\">\"abab\"</span> indexOf <span class=\"st0\">\"ab\"</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> loc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 22, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>matchAt = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> frag<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  s<span class=\"br0\">[</span>i...<span class=\"me1\">i</span><span class=\"sy0\">+</span>frag.<span class=\"me1\">length</span><span class=\"br0\">]</span> == frag<br/>\u00a0<br/>startsWith = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> frag<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  matchAt s<span class=\"sy0\">,</span> frag<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>endsWith = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> frag<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  matchAt s<span class=\"sy0\">,</span> frag<span class=\"sy0\">,</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> frag.<span class=\"me1\">length</span><br/>\u00a0<br/>matchLocations = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> frag<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">(</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"me1\">s</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> frag.<span class=\"me1\">length</span><span class=\"br0\">]</span> <span class=\"kw1\">when</span> matchAt s<span class=\"sy0\">,</span> frag<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> startsWith <span class=\"st0\">\"tacoloco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"taco\"</span> <span class=\"co1\"># true</span><br/>console.<span class=\"me1\">log</span> startsWith <span class=\"st0\">\"taco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tacoloco\"</span> <span class=\"co1\"># false</span><br/>console.<span class=\"me1\">log</span> startsWith <span class=\"st0\">\"tacoloco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"talk\"</span> <span class=\"co1\"># false</span><br/>console.<span class=\"me1\">log</span> endsWith <span class=\"st0\">\"tacoloco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"loco\"</span> <span class=\"co1\"># true</span><br/>console.<span class=\"me1\">log</span> endsWith <span class=\"st0\">\"loco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tacoloco\"</span> <span class=\"co1\"># false</span><br/>console.<span class=\"me1\">log</span> endsWith <span class=\"st0\">\"tacoloco\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"yoco\"</span> <span class=\"co1\"># false</span><br/>console.<span class=\"me1\">log</span> matchLocations <span class=\"st0\">\"bababab\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bab\"</span> <span class=\"co1\"># [0,2,4]</span><br/>console.<span class=\"me1\">log</span> matchLocations <span class=\"st0\">\"xxx\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"x\"</span> <span class=\"co1\"># [0,1,2]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 30, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> starts-with-p <span class=\"br0\">(</span>str1 str2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Determine whether `str1` starts with `str2`\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>search str2 str1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> p <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>starts-with-p <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; T </span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>starts-with-p <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; NIL</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ends-with-p <span class=\"br0\">(</span>str1 str2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Determine whether `str1` ends with `str2`\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>mismatch str2 str1 <span class=\"sy0\">:</span><span class=\"me1\">from-end</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>ends-with-p <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; NIL</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>ends-with-p <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; T</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> containsp <span class=\"br0\">(</span>str1 str2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Determine whether `str1` contains `str2`.<br/>   Instead of just returning T, return a list of starting locations<br/>   for every occurence of `str2` in `str1`\"</span><br/>   <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>string-<span class=\"kw1\">equal</span> str2 <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>loop for p <span class=\"sy0\">=</span> <span class=\"br0\">(</span>search str2 str1<span class=\"br0\">)</span> then <span class=\"br0\">(</span>search str2 str1 <span class=\"sy0\">:</span><span class=\"me1\">start2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           while p <br/>           collect p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>containsp <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"oba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (2)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>containsp <span class=\"st0\">\"ababaBa\"</span> <span class=\"st0\">\"ba\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (1 3)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>containsp <span class=\"st0\">\"foobar\"</span> <span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">; NIL</span><br/>\u00a0</pre>"}, {"lang": "Component Pascal", "loc": 115, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> StringMatch;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Strings;<br/><span class=\"kw1\">CONST</span><br/>\tstrSize <span class=\"sy0\">=</span> <span class=\"nu0\">1024</span>;<br/>\tpatSize <span class=\"sy0\">=</span> <span class=\"nu0\">256</span>;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> <br/>\tMatcher<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIMITED <span class=\"kw1\">RECORD</span><br/>\t\tstr<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> strSize <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\t\tpat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> patSize <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\t\tpos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NewMatcher<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw1\">IN</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matcher;<br/><span class=\"kw1\">VAR</span><br/>\tm<span class=\"sy0\">:</span> Matcher;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span>;m.<span class=\"me1\">str</span> <span class=\"sy0\">:=</span> str$;m.<span class=\"me1\">pos</span><span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">RETURN</span> m<br/><span class=\"kw1\">END</span> NewMatcher;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matcher<span class=\"br0\">)</span> Match<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw1\">IN</span> pat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/><span class=\"kw1\">VAR</span> <br/>\tpos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tm.<span class=\"me1\">pat</span> <span class=\"sy0\">:=</span> pat$; <br/>\tpos <span class=\"sy0\">:=</span> m.<span class=\"me1\">pos</span>;<br/>\tStrings.<span class=\"me1\">Find</span><span class=\"br0\">(</span>m.<span class=\"me1\">str</span><span class=\"sy0\">,</span>m.<span class=\"me1\">pat</span><span class=\"sy0\">,</span>pos<span class=\"sy0\">,</span>m.<span class=\"me1\">pos</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> m.<span class=\"me1\">pos</span><br/><span class=\"kw1\">END</span> Match;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matcher<span class=\"br0\">)</span> Next<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/><span class=\"kw1\">VAR</span><br/>\tpos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tpos <span class=\"sy0\">:=</span> m.<span class=\"me1\">pos</span> <span class=\"sy0\">+</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>m.<span class=\"me1\">pat</span>$<span class=\"br0\">)</span>;<br/>\tStrings.<span class=\"me1\">Find</span><span class=\"br0\">(</span>m.<span class=\"me1\">str</span><span class=\"sy0\">,</span>m.<span class=\"me1\">pat</span><span class=\"sy0\">,</span>pos<span class=\"sy0\">,</span>m.<span class=\"me1\">pos</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> m.<span class=\"me1\">pos</span>;<br/><span class=\"kw1\">END</span> Next;<br/>\u00a0<br/><span class=\"coMULTI\">(* Some Helper functions based on Strings module *)</span><br/><span class=\"kw1\">PROCEDURE</span> StartsWith<span class=\"br0\">(</span><span class=\"kw1\">IN</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<span class=\"kw1\">IN</span> pat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>\tpos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStrings.<span class=\"me1\">Find</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>pos<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> StartsWith;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Contains<span class=\"br0\">(</span><span class=\"kw1\">IN</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<span class=\"kw1\">IN</span> pat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>; OUT pos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStrings.<span class=\"me1\">Find</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>pos<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> pos &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> Contains;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> EndsWith<span class=\"br0\">(</span><span class=\"kw1\">IN</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<span class=\"kw1\">IN</span> pat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>\tpos<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStrings.<span class=\"me1\">Find</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>pos<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> pos <span class=\"sy0\">+</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>pat$<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> EndsWith;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">CONST</span><br/>\taStr <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>;<br/><span class=\"kw1\">VAR</span><br/>\tpat<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\tres<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\tat<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tm<span class=\"sy0\">:</span> Matcher;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"coMULTI\">(* StartsWith *)</span><br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st0\">\"abc\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" startsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>StartsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st0\">\"cba\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" startsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>StartsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st0\">\"def\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" startsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>StartsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"coMULTI\">(* Contains *)</span><br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'def'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" contains \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>Contains<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span>at<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'efd'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" contains \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>Contains<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span>at<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;\t<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'abc'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" contains \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>Contains<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span>at<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'xyz'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" contains \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>Contains<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"sy0\">,</span>at<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"coMULTI\">(* EndsWith *)</span><br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'xyz'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" endsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>EndsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'zyx'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" endsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>EndsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat <span class=\"sy0\">:=</span> <span class=\"st_h\">'abc'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" endsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>EndsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tpat<span class=\"sy0\">:=</span> <span class=\"st_h\">'def'</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>aStr <span class=\"sy0\">+</span> <span class=\"st0\">\" endsWith \"</span> <span class=\"sy0\">+</span> pat <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0:&gt;\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>EndsWith<span class=\"br0\">(</span>aStr<span class=\"sy0\">,</span>pat<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>\tm <span class=\"sy0\">:=</span> NewMatcher<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Matching 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz' against 'abc':&gt; \"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Match at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>m.<span class=\"me1\">Match</span><span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Match at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>m.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Match at: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>m.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> StringMatch.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">:</span> startsWith<span class=\"sy0\">,</span> endsWith<span class=\"sy0\">,</span> find<span class=\"sy0\">,</span> countUntil<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>      <span class=\"co1\">// true</span><br/>    <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>        <span class=\"co1\">// false</span><br/>    <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>            <span class=\"co1\">// empty array (no match)</span><br/>    <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"bc\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>            <span class=\"co1\">// \"bcd\" (substring start</span><br/>                                           <span class=\"co1\">//        at match)</span><br/>    <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>      <span class=\"co1\">// -1 (no match)</span><br/>    <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span><span class=\"st0\">\"ba\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>      <span class=\"co1\">//  1 (index of 1st match)</span><br/>\u00a0<br/>    <span class=\"co1\">// std.algorithm.startsWith also works on arrays and ranges:</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>      <span class=\"co1\">//  2</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span> <span class=\"co1\">//  1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 24, "block": "<pre class=\"dcl highlighted_source\">$ first_string <span class=\"sy0\">=</span> <span class=\"kw3\">p1</span><br/>$ length_of_first_string <span class=\"sy0\">=</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> first_string <span class=\"br0\">)</span><br/>$ second_string <span class=\"sy0\">=</span> <span class=\"kw3\">p2</span><br/>$ length_of_second_string <span class=\"sy0\">=</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> second_string <span class=\"br0\">)</span><br/>$ offset <span class=\"sy0\">=</span> <span class=\"kw2\">f$locate</span><span class=\"br0\">(</span> second_string, first_string <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">if</span> offset <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span><br/>$ <span class=\"kw1\">then</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string starts with second string\"</span><br/>$ <span class=\"kw1\">else</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string does not start with second string\"</span><br/>$ <span class=\"kw1\">endif</span><br/>$ <span class=\"kw1\">if</span> offset <span class=\"sy0\">.ne.</span> length_of_first_string<br/>$ <span class=\"kw1\">then</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string contains the second string at location \"</span>, offset<br/>$ <span class=\"kw1\">else</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string does not contain the second string at any location\"</span><br/>$ <span class=\"kw1\">endif</span><br/>$ temp <span class=\"sy0\">=</span> <span class=\"kw2\">f$extract</span><span class=\"br0\">(</span> length_of_first_string <span class=\"sy0\">-</span> length_of_second_string, length_of_second_string, first_string <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">if</span> second_string <span class=\"sy0\">.eqs.</span> temp<br/>$ <span class=\"kw1\">then</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string ends with the second string\"</span><br/>$ <span class=\"kw1\">else</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"first string does not end with the second string\"</span><br/>$ <span class=\"kw1\">endif</span></pre>"}, {"lang": "Delphi", "loc": 13, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> CharacterMatching<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>AnsiStartsText<span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"sy1\">,</span> <span class=\"st0\">'abcd'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// True</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>AnsiEndsText<span class=\"br0\">(</span><span class=\"st0\">'zn'</span><span class=\"sy1\">,</span> <span class=\"st0\">'abcd'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// False</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>AnsiContainsText<span class=\"br0\">(</span><span class=\"st0\">'abcd'</span><span class=\"sy1\">,</span> <span class=\"st0\">'bb'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// False</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>AnsiContainsText<span class=\"br0\">(</span><span class=\"st0\">'abcd'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ab'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// True</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"kw3\">Pos</span><span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"sy1\">,</span> <span class=\"st0\">'abcd'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 1</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 11, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> f<span class=\"br0\">(</span>string1<span class=\"sy0\">,</span> string2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>string1.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span>string2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> index <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>index <span class=\"sy0\">:=</span> string1.<span class=\"me1\">startOf</span><span class=\"br0\">(</span>string2<span class=\"sy0\">,</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`at $index`</span><span class=\"br0\">)</span><br/>        index <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>string1.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span>string2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string-suffix? <span class=\"st0\">\"nette\"</span> <span class=\"st0\">\"Antoinette\"</span><span class=\"br0\">)</span> \u2192 #t<br/><span class=\"br0\">(</span>string-prefix? <span class=\"st0\">\"Simon\"</span> <span class=\"st0\">\"Simon &amp; Garfunkel\"</span><span class=\"br0\">)</span> \u2192 #t<br/>\u00a0<br/><span class=\"br0\">(</span>string-match <span class=\"st0\">\"Antoinette\"</span> <span class=\"st0\">\"net\"</span><span class=\"br0\">)</span> \u2192 #t <span class=\"co1\">;; contains</span><br/><span class=\"br0\">(</span>string-index <span class=\"st0\">\"net\"</span> <span class=\"st0\">\"Antoinette\"</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">5</span>  <span class=\"co1\">;; substring location</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var s\u00a0:= \"abcd\".<br/>\u00a0<br/>    console printLine(s,\" starts with ab: \",s startingWith:\"ab\").<br/>    console printLine(s,\" starts with cd: \",s startingWith:\"cd\").<br/>\u00a0<br/>    console printLine(s,\" ends with ab: \",s endingWith:\"ab\").<br/>    console printLine(s,\" ends with cd: \",s endingWith:\"cd\").<br/>\u00a0<br/>    console printLine(s,\" contains ab: \",s containing:\"ab\").<br/>    console printLine(s,\" contains bc: \",s containing:\"bc\").<br/>    console printLine(s,\" contains cd: \",s containing:\"cd\").<br/>    console printLine(s,\" contains az: \",s containing:\"az\").<br/>\u00a0<br/>    console printLine(s,\" index of az: \",s indexOf:\"az\" at:0).<br/>    console printLine(s,\" index of cd: \",s indexOf:\"cd\" at:0).<br/>    console printLine(s,\" index of bc: \",s indexOf:\"bc\" at:0).<br/>    console printLine(s,\" index of ab: \",s indexOf:\"ab\" at:0).<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 28, "block": "<pre class=\"text highlighted_source\">s1 = \"abcd\"<br/>s2 = \"adab\"<br/>s3 = \"ab\"<br/>\u00a0<br/>String.starts_with?(s1, s3)<br/># =&gt; true<br/>String.starts_with?(s2, s3)<br/># =&gt; false<br/>\u00a0<br/>String.contains?(s1, s3)<br/># =&gt; true<br/>String.contains?(s2, s3)<br/># =&gt; true<br/>\u00a0<br/>String.ends_with?(s1, s3)<br/># =&gt; false<br/>String.ends_with?(s2, s3)<br/># =&gt; true<br/>\u00a0<br/>\u00a0<br/># Optional requirements:<br/>Regex.run(~r/#{s3}/, s1, return:\u00a0:index)<br/># =&gt; [{0, 2}]<br/>Regex.run(~r/#{s3}/, s2, return:\u00a0:index)<br/># =&gt; [{2, 2}]<br/>\u00a0<br/>Regex.scan(~r/#{s3}/, \"abcabc\", return:\u00a0:index)<br/># =&gt; [[{0, 2}], [{3, 2}]]</pre>"}, {"lang": "Emacs Lisp", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun match (word str)<br/>  (progn<br/>\u00a0<br/>    (setq regex (format \"^%s.*$\" word) )<br/>\u00a0<br/>    (if (string-match regex str)<br/>\t(insert (format \"%s found in beginning of:\u00a0%s\\n\" word str) )<br/>      (insert (format \"%s not found in beginning of:\u00a0%s\\n\" word str) ))<br/>\u00a0<br/>    (setq pos (string-match word str) )<br/>\u00a0<br/>    (if pos<br/>\t(insert (format \"%s found at position\u00a0%d in:\u00a0%s\\n\" word pos str) )<br/>      (insert (format \"%s not found in:\u00a0%s\\n\" word str) ))<br/>\u00a0<br/>    (setq regex (format \"^.*%s$\" word) )<br/>\u00a0<br/>    (if (string-match regex str)<br/>\t(insert (format \"%s found in end of:\u00a0%s\\n\" word str) )<br/>      (insert (format \"%s not found in end of:\u00a0%s\\n\" word str) ))))<br/>\u00a0<br/>(setq string \"before center after\")<br/>\u00a0<br/>(progn<br/>  (match \"center\" string)<br/>  (insert \"\\n\")<br/>  (match \"before\" string)<br/>  (insert \"\\n\")<br/>  (match \"after\" string) )<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>character_matching<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>starts_with<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ends_with<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>contains<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% Both starts_with and ends_with are mappings to 'lists:prefix/2' and                                                                                                                                                                                                                </span><br/><span class=\"co1\">%% 'lists:suffix/2', respectively.                                                                                                                                                                                                                                                    </span><br/>\u00a0<br/><span class=\"re3\">starts_with</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">prefix</span><span class=\"br0\">(</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"re5\">S1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ends_with</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">suffix</span><span class=\"br0\">(</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"re5\">S1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% While S1 is at least as long as S2 we check if S2 is its prefix,                                                                                                                                                                                                                   </span><br/><span class=\"co1\">%% storing the result if it is. When S1 is shorter than S2, we return                                                                                                                                                                                                                 </span><br/><span class=\"co1\">%% the result. NB: this will work on any arbitrary list in erlang                                                                                                                                                                                                                     </span><br/><span class=\"co1\">%% since it makes no distinction between strings and lists.                                                                                                                                                                                                                           </span><br/><span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_</span>|T<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">starts_with</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">contains</span><span class=\"br0\">(</span><span class=\"re5\">_S1</span><span class=\"sy1\">,</span><span class=\"re5\">_S2</span><span class=\"sy1\">,</span><span class=\"re5\">_N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 30, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> first<span class=\"sy2\">,</span> second<br/><span class=\"kw2\">integer</span> x<br/>\u00a0<br/>first <span class=\"sy1\">=</span> <span class=\"st0\">\"qwertyuiop\"</span><br/>\u00a0<br/><span class=\"co1\">-- Determining if the first string starts with second string</span><br/>second <span class=\"sy1\">=</span> <span class=\"st0\">\"qwerty\"</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">match</span><span class=\"br0\">(</span>second<span class=\"sy2\">,</span> first<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' starts with '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' does not start with '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">-- Determining if the first string contains the second string at any location</span><br/><span class=\"co1\">-- Print the location of the match for part 2</span><br/>second <span class=\"sy1\">=</span> <span class=\"st0\">\"wert\"</span><br/>x <span class=\"sy1\">=</span> <span class=\"kw2\">match</span><span class=\"br0\">(</span>second<span class=\"sy2\">,</span> first<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> x <span class=\"kw1\">then</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' contains '%s' at position\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"sy2\">,</span> x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' does not contain '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">-- Determining if the first string ends with the second string</span><br/>second <span class=\"sy1\">=</span> <span class=\"st0\">\"uio\"</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span>&lt;<span class=\"sy1\">=</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"kw2\">match_from</span><span class=\"br0\">(</span>second<span class=\"sy2\">,</span> first<span class=\"sy2\">,</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' ends with '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"'%s' does not end with '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>first<span class=\"sy2\">,</span> second<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "F#", "loc": 24, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\"</span><br/>    <span class=\"kw1\">let</span> starts <span class=\"sy0\">=</span> <span class=\"st0\">\"\u4e00\u4e8c\"</span><br/>    <span class=\"kw1\">let</span> ends <span class=\"sy0\">=</span> <span class=\"st0\">\"\u4e5d\u5341\"</span><br/>    <span class=\"kw1\">let</span> contains <span class=\"sy0\">=</span> <span class=\"st0\">\"\u4e94\u516d\"</span><br/>    <span class=\"kw1\">let</span> notContains <span class=\"sy0\">=</span> <span class=\"st0\">\"\u767e\"</span><br/>\u00a0<br/>    printfn <span class=\"st0\">\"text =\u00a0%A\"</span> text<br/>    printfn <span class=\"st0\">\"starts with\u00a0%A:\u00a0%A\"</span> starts <span class=\"br0\">(</span>text.<span class=\"me1\">StartsWith</span><span class=\"br0\">(</span>starts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"starts with\u00a0%A:\u00a0%A\"</span> ends <span class=\"br0\">(</span>text.<span class=\"me1\">StartsWith</span><span class=\"br0\">(</span>ends<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"ends with\u00a0%A:\u00a0%A\"</span> ends <span class=\"br0\">(</span>text.<span class=\"me1\">EndsWith</span><span class=\"br0\">(</span>ends<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"ends with\u00a0%A:\u00a0%A\"</span> starts <span class=\"br0\">(</span>text.<span class=\"me1\">EndsWith</span><span class=\"br0\">(</span>starts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"contains\u00a0%A:\u00a0%A\"</span> contains <span class=\"br0\">(</span>text.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>contains<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"contains\u00a0%A:\u00a0%A\"</span> notContains <span class=\"br0\">(</span>text.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>notContains<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"substring\u00a0%A begins at position\u00a0%d (zero-based)\"</span> contains <span class=\"br0\">(</span>text.<span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>contains<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> text2 <span class=\"sy0\">=</span> text <span class=\"sy0\">+</span> text<br/>    printfn <span class=\"st0\">\"text =\u00a0%A\"</span> text2<br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> idx <span class=\"sy0\">=</span> text2.<span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>contains, n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> idx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> None <span class=\"kw1\">else</span> Some <span class=\"br0\">(</span>idx, idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printfn <span class=\"st0\">\"substring\u00a0%A begins at position\u00a0%d (zero-based)\"</span> contains<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Falcon", "loc": 16, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"Naig Ialocin Olracnaig\"</span><br/>s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"Naig\"</span><br/>\u00a0<br/>var <span class=\"sy0\">=</span> s1.<span class=\"me0\">startsWith</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> s1 <span class=\"sy0\">+</span> <span class=\"st0\">\" starts with \"</span> <span class=\"sy0\">+</span> s2 <span class=\"sy0\">:</span> s1 <span class=\"sy0\">+</span> <span class=\"st0\">\" does not start with \"</span> <span class=\"sy0\">+</span> s2<br/><span class=\"sy0\">&gt;</span> var<br/>\u00a0<br/>s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"loc\"</span><br/>var <span class=\"sy0\">=</span> s2 <span class=\"kw3\">in</span> s1 <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$s1 contains $s2\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$s1 does not contain $s2\"</span><br/><span class=\"sy0\">&gt;</span> var<br/>\u00a0<br/><span class=\"sy0\">&gt;</span> s1.<span class=\"me0\">endsWith</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"s1 ends with $s2\"</span> <span class=\"sy0\">:</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"$s1 does not end with $s2\"</span><br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    string\u00a0:= \"Fantom Language\"<br/>    echo (\"String is: \" + string)<br/>    echo (\"does string start with 'Fantom'? \" + string.startsWith(\"Fantom\"))<br/>    echo (\"does string start with 'Language'? \" + string.startsWith(\"Language\"))<br/>    echo (\"does string contain 'age'? \" + string.contains(\"age\"))<br/>    echo (\"does string contain 'page'? \" + string.contains(\"page\"))<br/>    echo (\"does string end with 'Fantom'? \" + string.endsWith(\"Fantom\"))<br/>    echo (\"does string end with 'Language'? \" + string.endsWith(\"Language\"))<br/>\u00a0<br/>    echo (\"Location of 'age' is: \" + string.index(\"age\"))<br/>    posn\u00a0:= string.index (\"an\")<br/>    echo (\"First location of 'an' is: \" + posn)<br/>    posn = string.index (\"an\", posn+1)<br/>    echo (\"Second location of 'an' is: \" + posn)<br/>    posn = string.index (\"an\", posn+1)<br/>    if (posn == null) echo (\"No third location of 'an'\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 16, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"roko, mat jane do\"</span><br/>\u00a0<br/><span class=\"kw1\">IF</span> LEFT<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"roko\"</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> STRENC<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" starts with \"</span><span class=\"sy0\">,</span> STRENC<span class=\"br0\">(</span><span class=\"st0\">\"roko\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"mat\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> STRENC<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" contains \"</span><span class=\"sy0\">,</span> STRENC<span class=\"br0\">(</span><span class=\"st0\">\"mat\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" at \"</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><br/><span class=\"kw1\">IF</span> RIGHT<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"do\"</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> STRENC<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" ends with \"</span><span class=\"sy0\">,</span> STRENC<span class=\"br0\">(</span><span class=\"st0\">\"do\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> STRENC<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" contains \"</span><span class=\"sy0\">,</span> STRENC<span class=\"br0\">(</span><span class=\"st0\">\"o\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" at the following locations:\"</span><span class=\"sy0\">,</span> InstrEx<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"o\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>PAUSE<br/>\u00a0<br/><span class=\"kw1\">SUB</span> InstrEx<span class=\"br0\">(</span>mane<span class=\"sy0\">,</span> match<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">WHILE</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>mane<span class=\"sy0\">,</span> match<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>: <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a>;: <span class=\"kw1\">WEND</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: starts-with ( a l a2 l2 --\u00a0? )<br/>  tuck 2&gt;r min 2r&gt; compare 0=\u00a0;<br/>: ends-with ( a l a2 l2 --\u00a0? )<br/>  tuck 2&gt;r negate over + 0 max /string 2r&gt; compare 0=\u00a0;<br/>\\ use SEARCH ( a l a2 l2 -- a3 l3\u00a0? ) for contains</pre>"}, {"lang": "Fortran", "loc": 42, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> STARTS<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>\t<span class=\"co1\">!Text A starts with text B?</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> A,B<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">INDEX</span><span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Searches A to find B.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; starts with &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span><br/>         <span class=\"kw1\">ELSE</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; does not start with &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> STARTS<br/>\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> HAS<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>\t<span class=\"co1\">!Text B appears somewhere in text A?</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> A,B<br/>       <span class=\"kw3\">INTEGER</span> L<br/>        L <span class=\"sy0\">=</span> <span class=\"kw4\">INDEX</span><span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>\t\t<span class=\"co1\">!The first position in A where B matches.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; does not contain &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span><br/>         <span class=\"kw1\">ELSE</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; contains a &gt;\"</span>,B,<span class=\"st0\">\"&lt;, offset\"</span>,L<br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HAS<br/>\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> ENDS<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>\t<span class=\"co1\">!Text A ends with text B.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> A,B<br/>       <span class=\"kw3\">INTEGER</span> L<br/>        L <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span>\t<span class=\"co1\">!Find the tail end of A that B might match.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Dare not use an OR, because of full evaluation risks.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; is too short to end with &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span>\t<span class=\"co1\">!Might as well have a special message.</span><br/>        <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span>L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>L <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.<span class=\"me1\">B</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Otherwise, it is safe to look.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; does not end with &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span><br/>        <span class=\"kw1\">ELSE</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt; ends with &gt;\"</span>,B,<span class=\"st0\">\"&lt;\"</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> ENDS<br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> STARTS<span class=\"br0\">(</span><span class=\"st0\">\"This\"</span>,<span class=\"st0\">\"is\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> STARTS<span class=\"br0\">(</span><span class=\"st0\">\"Theory\"</span>,<span class=\"st0\">\"The\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> HAS<span class=\"br0\">(</span><span class=\"st0\">\"Bananas\"</span>,<span class=\"st0\">\"an\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> ENDS<span class=\"br0\">(</span><span class=\"st0\">\"Banana\"</span>,<span class=\"st0\">\"an\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> ENDS<span class=\"br0\">(</span><span class=\"st0\">\"Banana\"</span>,<span class=\"st0\">\"na\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> ENDS<span class=\"br0\">(</span><span class=\"st0\">\"Brief\"</span>,<span class=\"st0\">\"Much longer\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> s1 = <span class=\"st0\">\"abracadabra\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> s2 = <span class=\"st0\">\"abra\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"First string \u00a0: \"</span>; s1<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Second string\u00a0: \"</span>; s2<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"First string begins with second string\u00a0: \"</span>; CBool<span class=\"br0\">(</span>s2 = <span class=\"kw1\">Left</span><span class=\"br0\">(</span>s1, <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i1 = <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i2 <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"First string contains second string   \u00a0: \"</span>;<br/><span class=\"kw1\">If</span> i1 <span class=\"kw1\">Then</span> <br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"at index\"</span>; i1;<br/>  i2 = <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>i1 + <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>, s1, s2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> i2 <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" and at index\"</span>; i2<br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"false\"</span>;<br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"First string ends with second string  \u00a0: \"</span>; CBool<span class=\"br0\">(</span>s2 = <span class=\"kw1\">Right</span><span class=\"br0\">(</span>s1, <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 9, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello world\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString2 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sString1 Begins <a href=\"http://gambasdoc.org/help/lang/left\"><span class=\"kw2\">Left</span></a><span class=\"br0\">(</span>sString2, <span class=\"nu0\">5</span><span class=\"br0\">)</span>                             <span class=\"co1\">'Determine if the first string starts with second string</span><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span>sString1, sString2<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"True\"</span> <a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"False\"</span>   <span class=\"co1\">'Determine if the first string contains the second string at any location</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sString1 Ends <a href=\"http://gambasdoc.org/help/lang/left\"><span class=\"kw2\">Left</span></a><span class=\"br0\">(</span>sString2, <span class=\"nu0\">5</span><span class=\"br0\">)</span>                               <span class=\"co1\">'Determine if the first string ends with the second string</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GML", "loc": 35, "block": "<pre class=\"gml highlighted_source\">#define charMatch<br/><span class=\"br0\">{</span><br/>    first <span class=\"sy0\">=</span> \"qwertyuiop\"<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Determining if the first string starts with second string </span><br/>    second <span class=\"sy0\">=</span> \"qwerty\"<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">string_pos</span><span class=\"br0\">(</span>second<span class=\"sy0\">,</span> first<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> starts <span class=\"kw1\">with</span> <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> does not start <span class=\"kw1\">with</span> <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    second <span class=\"sy0\">=</span> \"wert\"<br/>    <span class=\"co1\">// Determining if the first string contains the second string at any location</span><br/>    <span class=\"co1\">// Print the location of the match for part 2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">string_pos</span><span class=\"br0\">(</span>second<span class=\"sy0\">,</span> first<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> contains <span class=\"st0\">'\" + second + \"'</span> at position \" <span class=\"sy0\">+</span> <span class=\"kw3\">string</span><span class=\"br0\">(</span><span class=\"kw2\">x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> does not contain <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// Handle multiple occurrences of a string for part 2.</span><br/>    <span class=\"kw2\">x</span> <span class=\"sy0\">=</span> <span class=\"kw3\">string_count</span><span class=\"br0\">(</span>second<span class=\"sy0\">,</span> first<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> contains \" <span class=\"sy0\">+</span> <span class=\"kw3\">string</span><span class=\"br0\">(</span><span class=\"kw2\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> \" instances of <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Determining if the first string ends with the second string</span><br/>    second <span class=\"sy0\">=</span> \"<span class=\"kw3\">random</span> garbage\"<br/>    temp <span class=\"sy0\">=</span> <span class=\"kw3\">string_copy</span><span class=\"br0\">(</span>first<span class=\"sy0\">,</span><br/>                       <span class=\"br0\">(</span><span class=\"kw3\">string_length</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">string_length</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <br/>                       <span class=\"kw3\">string_length</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> second<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> ends <span class=\"kw1\">with</span> <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>\"<span class=\"st0\">'\" + first + \"'</span> does not end <span class=\"kw1\">with</span> <span class=\"st0\">'\" + second + \"'</span>\"<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> match<span class=\"sy1\">(</span>first<span class=\"sy1\">,</span> second <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"1.\u00a0%s starts with\u00a0%s:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>        first<span class=\"sy1\">,</span> second<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">HasPrefix</span><span class=\"sy1\">(</span>first<span class=\"sy1\">,</span> second<span class=\"sy1\">))</span><br/>    i <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Index</span><span class=\"sy1\">(</span>first<span class=\"sy1\">,</span> second<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"2.\u00a0%s contains\u00a0%s:\u00a0%t,<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> first<span class=\"sy1\">,</span> second<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"2.1. at location\u00a0%d,<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> start <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;;</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>first<span class=\"sy1\">[</span>start<span class=\"sy1\">:],</span> second<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"2.2. at location\u00a0%d,<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> start<span class=\"sy3\">+</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>            start <span class=\"sy2\">+=</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"2.2. and that's all\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"3.\u00a0%s ends with\u00a0%s:\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>        first<span class=\"sy1\">,</span> second<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span>HasSuffix<span class=\"sy1\">(</span>first<span class=\"sy1\">,</span> second<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    match<span class=\"sy1\">(</span><span class=\"st0\">\"abracadabra\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abr\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 23, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"cd\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">\"abab\"</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20contains\"><span class=\"kw6\">contains</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ba\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"st0\">\"abab\"</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20contains\"><span class=\"kw6\">contains</span></a><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"co1\">// not found flag</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> indicesOf <span class=\"sy0\">=</span> <span class=\"br0\">{</span> string, substring <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> indices <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        indices <span class=\"sy0\">&lt;&lt;</span> string.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>substring, indices.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>indices.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>    <span class=\"br0\">}</span><br/>    indices<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span>indices.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> indicesOf<span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span>, <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> indicesOf<span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span>, <span class=\"st0\">\"ba\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> indicesOf<span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span>, <span class=\"st0\">\"xy\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> `isPrefixOf` <span class=\"st0\">\"abcdefg\"</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"efg\"</span> `isSuffixOf` <span class=\"st0\">\"abcdefg\"</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"bcd\"</span> `isInfixOf` <span class=\"st0\">\"abcdefg\"</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"abc\"</span> `isInfixOf` <span class=\"st0\">\"abcdefg\"</span> <span class=\"co1\">-- Prefixes and suffixes are also infixes</span><br/>True<br/><span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> infixes a b <span class=\"sy0\">=</span> findIndices <span class=\"br0\">(</span>isPrefixOf a<span class=\"br0\">)</span> <span class=\"sy0\">$</span> tails b<br/><span class=\"sy0\">&gt;</span> infixes <span class=\"st0\">\"ab\"</span> <span class=\"st0\">\"abcdefabqqab\"</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Matching s2\u00a0:=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>s2 <span class=\"sy1\">:=</span> <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" within s1:= \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>s1 <span class=\"sy1\">:=</span> <span class=\"st0\">\"abcdabab\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Test #1 beginning \"</span><span class=\"sy1\">,</span><span class=\"kw1\">if</span> <span class=\"kw4\">match</span><span class=\"br0\">(</span>s2<span class=\"sy1\">,</span>s1<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"matches \"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"failed\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"Test #2 all matches at positions [\"</span><span class=\"br0\">)</span> <br/>      <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s2<span class=\"sy1\">,</span>s1<span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"]<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Test #3 ending \"</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> s1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">-:*</span>s2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> s2 <span class=\"kw1\">then</span> <span class=\"st0\">\"matches\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"fails\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">startswith=: ] -: <span class=\"sy0\">(</span>{.~ #<span class=\"sy0\">)</span><br/>contains=: +./@:E.~<br/>endswith=: ] -: <span class=\"sy0\">(</span>{.~ <a class=\"__cf_email__\" data-cfemail=\"b598f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\"><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns true</span><br/><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns false</span><br/><span class=\"st0\">\"abab\"</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns false</span><br/><span class=\"st0\">\"abab\"</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns true</span><br/><span class=\"kw4\">int</span> loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns -1</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns 0</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span>,loc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">//returns 2</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> stringA <span class=\"sy0\">=</span> <span class=\"st0\">\"tacoloco\"</span><br/>  <span class=\"sy0\">,</span> stringB <span class=\"sy0\">=</span> <span class=\"st0\">\"co\"</span><br/>  <span class=\"sy0\">,</span> q1<span class=\"sy0\">,</span> q2<span class=\"sy0\">,</span> q2multi<span class=\"sy0\">,</span> m<br/>  <span class=\"sy0\">,</span> q2matches <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">// stringA starts with stringB</span><br/>q1 <span class=\"sy0\">=</span> stringA.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> stringB.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> stringB<br/>\u00a0<br/><span class=\"co1\">// stringA contains stringB</span><br/>q2  <span class=\"sy0\">=</span> stringA.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>stringB<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// multiple matches</span><br/>q2multi <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RegExp<span class=\"br0\">(</span>stringB<span class=\"sy0\">,</span><span class=\"st0\">'g'</span><span class=\"br0\">)</span><br/>\u00a0<br/>while<span class=\"br0\">(</span>m <span class=\"sy0\">=</span> q2multi.<span class=\"me1\">exec</span><span class=\"br0\">(</span>stringA<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tq2matches.<span class=\"me1\">push</span><span class=\"br0\">(</span>m.<span class=\"me1\">index</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// stringA ends with stringB</span><br/>q3 <span class=\"sy0\">=</span> stringA.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>stringB.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> stringB<br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"1: Does '\"</span><span class=\"sy0\">+</span>stringA<span class=\"sy0\">+</span><span class=\"st0\">\"' start with '\"</span><span class=\"sy0\">+</span>stringB<span class=\"sy0\">+</span><span class=\"st0\">\"'? \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> q1 <span class=\"sy0\">?</span> <span class=\"st0\">\"Yes.\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"No.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"2: Is '\"</span><span class=\"sy0\">+</span>stringB<span class=\"sy0\">+</span><span class=\"st0\">\"' contained in '\"</span><span class=\"sy0\">+</span>stringA<span class=\"sy0\">+</span><span class=\"st0\">\"'? \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>~q2 <span class=\"sy0\">?</span> <span class=\"st0\">\"Yes, at index \"</span><span class=\"sy0\">+</span>q2<span class=\"sy0\">+</span><span class=\"st0\">\".\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"No.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>~q2 <span class=\"sy0\">&amp;&amp;</span> q2matches.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tconsole.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"   In fact, it happens \"</span><span class=\"sy0\">+</span>q2matches.<span class=\"me1\">length</span><span class=\"sy0\">+</span><span class=\"st0\">\" times within '\"</span><span class=\"sy0\">+</span>stringA<span class=\"sy0\">+</span><span class=\"st0\">\"', at index\"</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>q2matches.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"es\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>q2matches.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"3: Does '\"</span><span class=\"sy0\">+</span>stringA<span class=\"sy0\">+</span><span class=\"st0\">\"' end with '\"</span><span class=\"sy0\">+</span>stringB<span class=\"sy0\">+</span><span class=\"st0\">\"'? \"</span>   <span class=\"sy0\">+</span> <span class=\"br0\">(</span> q3 <span class=\"sy0\">?</span> <span class=\"st0\">\"Yes.\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"No.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Lasso", "loc": 14, "block": "<pre class=\"text highlighted_source\">local(<br/> a = 'a quick brown peanut jumped over a quick brown fox',<br/> b = 'a quick brown'<br/>)<br/>\u00a0<br/>//Determining if the first string starts with second string<br/>#a-&gt;beginswith(#b) // true<br/>\u00a0<br/>//Determining if the first string contains the second string at any location<br/>#a &gt;&gt; #b           // true<br/>#a-&gt;contains(#b)   // true<br/>\u00a0<br/>//Determining if the first string ends with the second string<br/>#a-&gt;endswith(#b)   // false</pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\"># startswith/1 is boolean:<br/>\"abc\" | startswith(\"ab\")<br/>#=&gt; true</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">startswith(\"abcd\",\"ab\") #returns true<br/>search(\"abcd\",\"ab\") #returns 1:2, indices range where string was found<br/>endswith(\"abcd\",\"zn\") #returns false<br/>ismatch(r\"ab\",\"abcd\") #returns true where 1st arg is regex string<br/>julia&gt;for r in each_match(r\"ab\",\"abab\")<br/>\tprintln(r.offset)<br/>end<br/>1<br/>3</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">startswith: {:[0&lt;#p:_ss[x;y];~*p;0]}<br/>endswith: {0=(-#y)+(#x)-*_ss[x;y]}<br/>contains: {0&lt;#_ss[x;y]}</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"abracadabra\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"abra\"</span>    <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$s1 begins with $s2\u00a0: ${s1.startsWith(s2)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$s1 ends with $s2  \u00a0: ${s1.endsWith(s2)}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b  <span class=\"sy0\">=</span> s2 in s1<br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"$s1 contains $s2   \u00a0: $b\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\" at locations ${s1.indexOf(s2) + 1} and ${s1.lastIndexOf(s2) + 1}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 20, "block": "<pre class=\"text highlighted_source\">: 2array  2 compress\u00a0;\u00a0: bi*  '_ set dip _ execute\u00a0; \u00a0: <a class=\"__cf_email__\" data-cfemail=\"63010a23\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  dup bi*\u00a0;<br/>: comb  \"\" split\u00a0; \u00a0: concat  \"\" join\u00a0; \u00a0: dip  swap '_ set execute _\u00a0;<br/>: first  0 extract swap drop\u00a0;\u00a0: flip  comb reverse concat\u00a0;<br/>\u00a0<br/>: contains<br/>    swap 'comb <a class=\"__cf_email__\" data-cfemail=\"57353e17\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> length do                    # create a matrix.<br/>         1 - \"dup 1 1 compress rotate\" dip dup 0 == if break then<br/>    loop drop length compress swap drop<br/>    \"length 1 -\" <a class=\"__cf_email__\" data-cfemail=\"99fbf0d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> rot 0 0 \"'2array dip\" '2array bi* swap 2array slice reverse<br/>   \u00a0: concat.(*)  concat\u00a0;<br/>    'concat \"'concat. apply\" bi* eq 1 1 compress index collapse<br/>    length if expand drop else drop 0 then\u00a0;    # r: position.<br/>: end-with    'flip <a class=\"__cf_email__\" data-cfemail=\"f4969db4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> start-with\u00a0;<br/>: start-with  'comb <a class=\"__cf_email__\" data-cfemail=\"f4969db4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> length rot swap iota subscript 'concat <a class=\"__cf_email__\" data-cfemail=\"593b3019\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> eq\u00a0;<br/>\u00a0<br/>\"rosettacode\" \"rosetta\" start-with .    # 1<br/>\"rosettacode\" \"taco\" contains .         # 5<br/>\"rosettacode\" \"ocat\" contains .         # 0<br/>\"rosettacode\" \"edoc\" end-with .         # 0<br/>\"rosettacode\" \"code\" contains .         # 7</pre>"}, {"lang": "Lang5", "loc": 20, "block": "<pre class=\"text highlighted_source\">: 2array  2 compress\u00a0;\u00a0: bi*  '_ set dip _ execute\u00a0; \u00a0: <a class=\"__cf_email__\" data-cfemail=\"63010a23\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  dup bi*\u00a0;<br/>: comb  \"\" split\u00a0; \u00a0: concat  \"\" join\u00a0; \u00a0: dip  swap '_ set execute _\u00a0;<br/>: first  0 extract swap drop\u00a0;\u00a0: flip  comb reverse concat\u00a0;<br/>\u00a0<br/>: contains<br/>    swap 'comb <a class=\"__cf_email__\" data-cfemail=\"57353e17\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> length do                    # create a matrix.<br/>         1 - \"dup 1 1 compress rotate\" dip dup 0 == if break then<br/>    loop drop length compress swap drop<br/>    \"length 1 -\" <a class=\"__cf_email__\" data-cfemail=\"99fbf0d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> rot 0 0 \"'2array dip\" '2array bi* swap 2array slice reverse<br/>   \u00a0: concat.(*)  concat\u00a0;<br/>    'concat \"'concat. apply\" bi* eq 1 1 compress index collapse<br/>    length if expand drop else drop 0 then\u00a0;    # r: position.<br/>: end-with    'flip <a class=\"__cf_email__\" data-cfemail=\"f4969db4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> start-with\u00a0;<br/>: start-with  'comb <a class=\"__cf_email__\" data-cfemail=\"f4969db4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> length rot swap iota subscript 'concat <a class=\"__cf_email__\" data-cfemail=\"593b3019\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> eq\u00a0;<br/>\u00a0<br/>\"rosettacode\" \"rosetta\" start-with .    # 1<br/>\"rosettacode\" \"taco\" contains .         # 5<br/>\"rosettacode\" \"ocat\" contains .         # 0<br/>\"rosettacode\" \"edoc\" end-with .         # 0<br/>\"rosettacode\" \"code\" contains .         # 7</pre>"}, {"lang": "Liberty BASIC", "loc": 31, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'1---Determining if the first string starts with second string</span><br/>st1$<span class=\"sy0\">=</span><span class=\"st0\">\"first string\"</span><br/>st2$<span class=\"sy0\">=</span><span class=\"st0\">\"first\"</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>st2$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>st2$ <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"First string starts with second string.\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">'2---Determining if the first string contains the second string at any location</span><br/><span class=\"co1\">'2.1---Print the location of the match for part 2</span><br/>st1$<span class=\"sy0\">=</span><span class=\"st0\">\"Mississippi\"</span><br/>st2$<span class=\"sy0\">=</span><span class=\"st0\">\"i\"</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span>st2$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"First string contains second string.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Second string is at location \"</span>;<span class=\"kw2\">instr</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span>st2$<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">'2.2---Handle multiple occurrences of a string for part 2.</span><br/>pos<span class=\"sy0\">=</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span>st2$<span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> pos<br/>    count<span class=\"sy0\">=</span>count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    pos<span class=\"sy0\">=</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span>st2$<span class=\"sy0\">,</span>pos<span class=\"sy0\">+</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>st2$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Number of times second string appears in first string is \"</span>;count<br/>\u00a0<br/><span class=\"co1\">'3---Determining if the first string ends with the second string</span><br/>st1$<span class=\"sy0\">=</span><span class=\"st0\">\"first string\"</span><br/>st2$<span class=\"sy0\">=</span><span class=\"st0\">\"string\"</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">right$</span><span class=\"br0\">(</span>st1$<span class=\"sy0\">,</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>st2$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>st2$ <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"First string ends with second string.\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 22, "block": "<pre class=\"text highlighted_source\">a = \"Hello world!\"<br/>b = \"Hello\"<br/>\u00a0<br/>-- Determining if the first string starts with second string<br/>put a starts b<br/>-- 1<br/>\u00a0<br/>-- Determining if the first string contains the second string at any location<br/>put a contains b<br/>-- 1<br/>\u00a0<br/>-- Determining if the first string ends with the second string<br/>put a.char[a.length-b.length+1..a.length] = b<br/>-- 0<br/>\u00a0<br/>b = \"world!\"<br/>put a.char[a.length-b.length+1..a.length] = b<br/>-- 1<br/>\u00a0<br/>-- Print the location of the match for part 2<br/>put offset(b, a)<br/>-- 7</pre>"}, {"lang": "Logo", "loc": 17, "block": "<pre class=\"text highlighted_source\">to starts.with?\u00a0:sub\u00a0:thing<br/>  if empty?\u00a0:sub [output \"true]<br/>  if empty?\u00a0:thing [output \"false]<br/>  if not equal? first\u00a0:sub first\u00a0:thing [output \"false]<br/>  output starts.with? butfirst\u00a0:sub butfirst\u00a0:thing<br/>end<br/>\u00a0<br/>to ends.with?\u00a0:sub\u00a0:thing<br/>  if empty?\u00a0:sub [output \"true]<br/>  if empty?\u00a0:thing [output \"false]<br/>  if not equal? last\u00a0:sub last\u00a0:thing [output \"false]<br/>  output ends.with? butlast\u00a0:sub butlast\u00a0:thing<br/>end<br/>\u00a0<br/>show starts.with? \"dog \"doghouse   \u00a0; true<br/>show ends.with? \"house \"doghouse   \u00a0; true<br/>show substring? \"gho \"doghouse      \u00a0; true  (built-in)</pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\">s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"string\"</span><br/>s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"str\"</span><br/>s3 <span class=\"sy0\">=</span> <span class=\"st0\">\"ing\"</span><br/>s4 <span class=\"sy0\">=</span> <span class=\"st0\">\"xyz\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 starts with s2: \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s2 <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 starts with s3: \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s3 <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 contains s3: \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s3 <span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 contains s3: \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s4 <span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span>   <br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 ends with s2: \"</span><span class=\"sy0\">,</span> select<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s2 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span> s1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"s1 ends with s3: \"</span><span class=\"sy0\">,</span> select<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.find</span><span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> s3 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span> s1 <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module StringMatch {<br/>      A$=\"Hello World\"<br/>      Print A$ ~ \"Hello*\"<br/>      Print A$ ~ \"*llo*\"<br/>      p=Instr(A$, \"llo\")<br/>      Print p=3<br/>      \\\\ Handle multiple occurance for \"o\"<br/>      p=Instr(A$, \"o\")<br/>      While p &gt; 0 {<br/>            Print \"position:\";p;{ for \"o\"}<br/>            p=Instr(A$, \"o\", p+1)<br/>      }<br/>      Print A$ ~ \"*orld\"<br/>}<br/>{{out}}<br/>&lt;pre&gt;<br/>    True<br/>    True<br/>    True<br/>position:5 for \"o\"<br/>position:8 for \"o\"<br/>    True<br/>&lt;/pre&gt;<br/>StringMatch<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; with( StringTools ): # bind package exports at the top-level<br/>&gt; s\u00a0:= \"dzrIemaWWIMidXYZwGiqkOOn\":<br/>&gt; s[1..4]; # pick a prefix<br/>                                 \"dzrI\"<br/>\u00a0<br/>&gt; IsPrefix( s[ 1 .. 4 ], s ); # check it<br/>                                  true<br/>\u00a0<br/>&gt; s[ -4 .. -1 ]; # pick a suffix<br/>                                 \"kOOn\"<br/>\u00a0<br/>&gt; IsSuffix( s[ -4 .. -1 ], s ); # check it<br/>                                  true<br/>\u00a0<br/>&gt; p\u00a0:= Search( \"XYZ\", s ); # find a substring<br/>                                p\u00a0:= 14<br/>\u00a0<br/>&gt; s[ p .. p + 2 ]; # check<br/>                                 \"XYZ\"<br/>\u00a0<br/>&gt; SearchAll( [ \"WWI\", \"XYZ\" ], s ); # search for multiple patterns<br/>                            [8, 1], [14, 2]<br/>\u00a0<br/>&gt; to 3 do s\u00a0:= cat( s, s ) end: length( s ); # build a longer string by repeated doubling<br/>                                  192<br/>\u00a0<br/>&gt; p\u00a0:= SearchAll( \"XYZ\", s ); # find all occurrences<br/>                p\u00a0:= 14, 38, 62, 86, 110, 134, 158, 182<br/>\u00a0<br/>&gt; {seq}( s[ i .. i + 2 ], i = p ); # check them<br/>                                {\"XYZ\"}<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">StartWith[x_, y_]\u00a0:= MemberQ[Flatten[StringPosition[x, y]], 1]<br/>EndWith[x_, y_]\u00a0:=  MemberQ[Flatten[StringPosition[x, y]], StringLength[x]]<br/>StartWith[\"XYZaaabXYZaaaaXYZXYZ\", \"XYZ\"]<br/>EndWith[\"XYZaaabXYZaaaaXYZXYZ\", \"XYZ\"]<br/>StringPosition[\"XYZaaabXYZaaaaXYZXYZ\", \"XYZ\"]</pre>"}, {"lang": "MATLAB / Octave", "loc": 13, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>   <span class=\"co1\">% 1. Determining if the first string starts with second string</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>str1,str2,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">% 2. Determining if the first string contains the second string at any location</span><br/>\t~isempty<span class=\"br0\">(</span>strfind<span class=\"br0\">(</span>s1,s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">% 3. Determining if the first string ends with the second string </span><br/>\t<span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str1<span class=\"br0\">)</span>&gt;=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;&amp; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>str1<span class=\"br0\">(</span><span class=\"kw1\">end</span>+<span class=\"br0\">[</span><span class=\"nu0\">1</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str2<span class=\"br0\">)</span>:<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,str2<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">% 1. Print the location of the match for part 2</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>strfind<span class=\"br0\">(</span>s1,s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">% 2. Handle multiple occurrences of a string for part 2. </span><br/>\tix = strfind<span class=\"br0\">(</span>s1,s2<span class=\"br0\">)</span>;   <span class=\"co1\">% ix is a vector containing the starting positions of s2 within s1</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 49, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/>lipsum = <span class=\"st0\">''</span><br/>x_ = <span class=\"nu0\">0</span><br/>x_ = x_ + <span class=\"nu0\">1</span>; lipsum<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; lipsum<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'</span><br/>x_ = x_ + <span class=\"nu0\">1</span>; lipsum<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; lipsum<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = lipsum<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"kw6\">reverse</span><br/>\u00a0<br/>srch = <span class=\"st0\">''</span><br/>srch<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">'Lorem ipsum dolor sit amet'</span><br/>srch<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"st0\">'consectetur adipisicing elit'</span><br/>srch<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = <span class=\"st0\">'dolore magna aliqua.'</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">1</span> to lipsum<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  x1 = lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>.<span class=\"me0\">pos</span><span class=\"br0\">(</span>srch<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  x2 = lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>.<span class=\"me0\">pos</span><span class=\"br0\">(</span>srch<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  x3 = lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>.<span class=\"kw6\">lastpos</span><span class=\"br0\">(</span>srch<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>  report<span class=\"br0\">(</span>x1 = <span class=\"nu0\">1</span>, lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>, srch<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"st0\">'Test string starts with search string:'</span>, <span class=\"st0\">'Test string does not start with search string:'</span><span class=\"br0\">)</span><br/>  report<span class=\"br0\">(</span>x2 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>, lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>, srch<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"st0\">'Search string located in test string at position:'</span> x2,  <span class=\"st0\">'Search string not found within test string:'</span><span class=\"br0\">)</span><br/>  report<span class=\"br0\">(</span>x3 <span class=\"sy0\">\\</span>= srch<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me0\">length</span>, lipsum<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>, srch<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"st0\">'Test string ends with search string:'</span>, <span class=\"st0\">'Test string does not start with search string:'</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>many = <span class=\"st0\">''</span><br/>x_ = <span class=\"nu0\">0</span><br/>x_ = x_ + <span class=\"nu0\">1</span>; many<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; many<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'How many times does \"many times\" occur in this string?'</span><br/>x_ = x_ + <span class=\"nu0\">1</span>; many<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; many<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'How often does \"many times\" occur in this string?'</span><br/>x_ = x_ + <span class=\"nu0\">1</span>; many<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x_; many<span class=\"br0\">[</span>x_<span class=\"br0\">]</span> = <span class=\"st0\">'How often does it occur in this string?'</span><br/>srch<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> = <span class=\"st0\">'many times'</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">1</span> to many<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  o_ = <span class=\"nu0\">0</span><br/>  k_ = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> dups until o_ = <span class=\"nu0\">0</span><br/>    o_ = many<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>.<span class=\"me0\">pos</span><span class=\"br0\">(</span>srch<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>, o_ + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> o_ <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> k_ = k_ + <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> dups<br/>  report<span class=\"br0\">(</span>k_ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>, many<span class=\"br0\">[</span>j_<span class=\"br0\">]</span>, srch<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"st0\">'Number of times search string occurs:'</span> k_, <span class=\"st0\">'Search string not found'</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>method report<span class=\"br0\">(</span>state = boolean, ts, ss, testSuccess, testFailure<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">if</span> state <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> testSuccess<br/>  <span class=\"kw3\">else</span>          <span class=\"kw1\">say</span> testFailure<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'    Test string:'</span> ts<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'  Search string:'</span> ss<br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 18, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> str <span class=\"st0\">\"abcdefbcghi\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; test if str starts with \"ab\"</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#starts-with\"><span class=\"kw1\">starts-with</span></a> str <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; find \"bc\" inside str</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#find\"><span class=\"kw1\">find</span></a> <span class=\"st0\">\"bc\"</span> str<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; test if str ends with \"ghi\"</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#ends-with\"><span class=\"kw1\">ends-with</span></a> str <span class=\"st0\">\"ghi\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; find all positions of pattern inside str</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>find<span class=\"sy1\">-</span>all<span class=\"sy1\">-</span>pos pattern str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>idx <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> idx <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#find\"><span class=\"kw1\">find</span></a> pattern str <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy1\">+</span> idx <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#push\"><span class=\"kw1\">push</span></a> idx pos <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>find<span class=\"sy1\">-</span>all<span class=\"sy1\">-</span>pos <span class=\"st0\">\"bc\"</span> str<span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>var s: string = \"The quick brown fox\"<br/>if startsWith(s, \"The quick\"):<br/>   echo(\"Starts with: The quick\")<br/>if endsWith(s, \"brown Fox\"):<br/>   echo(\"Ends with: brown fox\")<br/>var pos = find(s, \" brown \")  # -1 if not found<br/>if contains(s, \" brown \"):    # showing the contains() proc, but could use if pos!=-1:<br/>   echo('\"' &amp; \" brown \" &amp; '\"' &amp; \" is located at position: \" &amp; $pos)</pre>"}, {"lang": "Objective-C", "loc": 5, "block": "<pre class=\"objc highlighted_source\"><span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abcd\"</span> hasPrefix<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">]</span> <span class=\"co2\">//returns true</span><br/><span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abcd\"</span> hasSuffix<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">]</span> <span class=\"co2\">//returns false</span><br/><span class=\"kw4\">int</span> loc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abab\"</span> rangeOfString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">]</span>.location <span class=\"co2\">//returns -1</span><br/>loc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abab\"</span> rangeOfString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">]</span>.location <span class=\"co2\">//returns 0</span><br/>loc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abab\"</span> rangeOfString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"ab\"</span> options<span class=\"sy0\">:</span><span class=\"nu0\">0</span> range<span class=\"sy0\">:</span>NSMakeRange<span class=\"br0\">(</span>loc<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"abab\"</span> length<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>loc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.location <span class=\"co2\">//returns 2</span></pre>"}, {"lang": "Objeck", "loc": 15, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Matching <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> System.<span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"abcd\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">StartsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns true</span><br/>      <span class=\"st0\">\"abcd\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">EndsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns false</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns false</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">\"abab\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns true</span><br/>      loc <span class=\"sy0\">:=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns -1</span><br/>      loc <span class=\"sy0\">:=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns 0</span><br/>      loc <span class=\"sy0\">:=</span> <span class=\"st0\">\"abab\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy0\">,</span> loc <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># returns 2</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> match1 s1 s2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len1 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s1<br/>  <span class=\"kw1\">and</span> len2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s2 <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> len1 <span class=\"sy0\">&lt;</span> len2 <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">let</span> sub <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub s1 <span class=\"nu0\">0</span> len2 <span class=\"kw1\">in</span><br/>    <span class=\"br0\">(</span>sub <span class=\"sy0\">=</span> s2<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 14, "block": "<pre class=\"text highlighted_source\">: stringMatching(s1, s2)<br/>| i |<br/>   s2 isAllAt(s1, 1) ifTrue: [ System.Out s1 &lt;&lt; \" begins with \" &lt;&lt; s2 &lt;&lt; cr ]<br/>   s2 isAllAt(s1, s1 size s2 size - 1 + ) ifTrue: [ System.Out s1 &lt;&lt; \" ends with \" &lt;&lt; s2 &lt;&lt; cr ] <br/>\u00a0<br/>   s1 indexOfAll(s2) -&gt;i<br/>   i ifNotNull: [ System.Out s1 &lt;&lt; \" includes \" &lt;&lt; s2 &lt;&lt; \" at position\u00a0: \" &lt;&lt; i &lt;&lt; cr ]<br/>\u00a0<br/>   \"\\nAll positions\u00a0: \" println <br/>   1 -&gt;i<br/>   while (s1 indexOfAllFrom(s2, i) dup -&gt;i notNull) [<br/>      System.Out s1 &lt;&lt; \" includes \" &lt;&lt; s2 &lt;&lt; \" at position\u00a0: \" &lt;&lt; i &lt;&lt; cr<br/>      i s2 size + -&gt;i<br/>      ]\u00a0;</pre>"}, {"lang": "OxygenBasic", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>string s=\"sdfkjhgsdfkdfgkbopefioqwurti487sdfkrglkjfs9wrtgjglsdfkdkjcnmmb.,msfjflkjsdfk\"<br/>\u00a0<br/>string f=\"sdfk\"<br/>\u00a0<br/>string cr=chr(13)+chr(10),tab=chr(9)<br/>\u00a0<br/>string pr=\"FIND STRING LOCATIONS\" cr cr<br/>\u00a0<br/>sys a=0, b=1, count=0, ls=len(s), lf=len(f)<br/>\u00a0<br/>do<br/>  a=instr b,s,f<br/>  if a=0 then exit do<br/>  count++<br/>  if a=1 then  pr+=\"Begins with keyword\" cr<br/>  pr+=count tab a cr<br/>  if a=ls-lf+1 then pr+=\"Ends with keyword at \" a cr<br/>  b=a+1<br/>end do<br/>\u00a0<br/>pr+=cr \"Total matches: \" count cr<br/>\u00a0<br/>print pr<br/>\u00a0<br/>'FIND STRING LOCATIONS<br/>'<br/>'Begins with keyword<br/>'1\t1<br/>'2\t8<br/>'3\t32<br/>'4\t51<br/>'5\t73<br/>'Ends with keyword at 73<br/>'<br/>'Total matches: 5<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 27, "block": "<pre class=\"parigp highlighted_source\">startsWith<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> prefix<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  string<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  prefix<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>prefix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#prefix <span class=\"sy0\">&gt;</span> #string<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#prefix<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>prefix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>string<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>contains<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> inner<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>good<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  string<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  inner<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>inner<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>#string<span class=\"sy0\">-</span>#inner<span class=\"sy0\">,</span><br/>    good<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#inner<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>inner<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">!=</span>string<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> good<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>good<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">0</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>endsWith<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> suffix<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  string<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  suffix<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>suffix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#suffix <span class=\"sy0\">&gt;</span> #string<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#suffix<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>prefix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>string<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>#string<span class=\"sy0\">-</span>#suffix<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">$str1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^\\Q$str2\\E/</span>  <span class=\"co1\"># true if $str1 starts with $str2</span><br/><span class=\"re0\">$str1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\Q$str2\\E/</span>   <span class=\"co1\"># true if $str1 contains $str2</span><br/><span class=\"re0\">$str1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\Q$str2\\E$/</span>  <span class=\"co1\"># true if $str1 ends with $str2</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"re0\">$haystack</span><span class=\"sy0\">.</span><span class=\"me1\">starts</span><span class=\"sy0\">-</span>with<span class=\"br0\">(</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span>  <span class=\"co1\"># True if $haystack starts with $needle</span><br/><span class=\"re0\">$haystack</span><span class=\"sy0\">.</span><span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span>     <span class=\"co1\"># True if $haystack contains $needle</span><br/><span class=\"re0\">$haystack</span><span class=\"sy0\">.</span><span class=\"me1\">ends</span><span class=\"sy0\">-</span>with<span class=\"br0\">(</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span>    <span class=\"co1\"># True if $haystack ends with $needle</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">constant word = \"the\",                                      -- (also try this with \"th\"/\"he\")<br/>         sentence = \"the last thing the man said was the\"<br/>--       sentence = \"thelastthingthemansaidwasthe\"          -- (practically the same results)<br/>\u00a0<br/>-- A common, but potentially inefficient idiom for checking for a substring at the start is:<br/>if match(word,sentence)=1 then<br/>   \u00a0?\"yes(1)\"<br/>end if<br/>-- A more efficient method is to test the appropriate slice<br/>if length(sentence)&gt;=length(word) <br/>and sentence[1..length(word)]=word then<br/>   \u00a0?\"yes(2)\"<br/>end if<br/>-- Which is almost identical to checking for a word at the end<br/>if length(sentence)&gt;=length(word) <br/>and sentence[-length(word)..-1]=word then<br/>   \u00a0?\"yes(3)\"<br/>end if<br/>-- Or sometimes you will see this, a tiny bit more efficient:<br/>if length(sentence)&gt;=length(word)<br/>and match(word,sentence,length(sentence)-length(word)+1) then<br/>   \u00a0?\"yes(4)\"<br/>end if<br/>-- Finding all occurences is a snap:<br/>integer r = match(word,sentence)<br/>while r!=0 do<br/>   \u00a0?r<br/>    r = match(word,sentence,r+1)<br/>end while</pre>"}, {"lang": "PHP", "loc": 59, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"coMULTI\">/**********************************************************************************<br/>* This program gets needle and haystack from the caller (chm.html) (see below)<br/>* and checks for occurrences of the needle in the haystack<br/>* 02.05.2013 Walter Pachl<br/>* Comments or Suggestions welcome<br/>**********************************************************************************/</span><br/><span class=\"re0\">$haystack</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_POST</span><span class=\"br0\">[</span><span class=\"st_h\">'haystack'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$haystack</span><span class=\"sy0\">==</span><span class=\"st_h\">''</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$haystack</span><span class=\"sy0\">=</span><span class=\"st_h\">'no haystack given'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"re0\">$needle</span>   <span class=\"sy0\">=</span> <span class=\"re0\">$_POST</span><span class=\"br0\">[</span><span class=\"st_h\">'needle'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$needle</span><span class=\"sy0\">==</span><span class=\"st_h\">''</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span><span class=\"re0\">$needle</span><span class=\"sy0\">=</span><span class=\"st_h\">'no needle given'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> rexxpos<span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strpos\"><span class=\"kw3\">strpos</span></a><span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span> <span class=\"sy0\">===</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$pos</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span>                <span class=\"br0\">{</span> <span class=\"re0\">$pos</span><span class=\"sy0\">=</span><span class=\"re0\">$pos</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$pos</span><span class=\"sy0\">=</span>rexxpos<span class=\"br0\">(</span><span class=\"re0\">$haystack</span><span class=\"sy0\">,</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tx1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>  <span class=\"co1\">// not found</span><br/><span class=\"kw1\">else</span>         <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>  <span class=\"co1\">// found once (so far)</span><br/><span class=\"co1\">// Special cases</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$tx1</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle found to be the start of the haystack\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">==</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$haystack</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span> <span class=\"re0\">$tx1</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle found at end of haystack\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// look for other occurrences</span><br/>  <span class=\"re0\">$pl</span><span class=\"sy0\">=</span><span class=\"re0\">$pos</span><span class=\"sy0\">;</span> <span class=\"co1\">// list of positions</span><br/>  <span class=\"re0\">$p</span><span class=\"sy0\">=</span><span class=\"re0\">$pos</span><span class=\"sy0\">;</span>  <span class=\"co1\">//</span><br/>  <span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"st0\">\"*************************************\"</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$h</span><span class=\"sy0\">=</span><span class=\"re0\">$haystack</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$h</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$p</span><span class=\"sy0\">=</span>rexxpos<span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span><span class=\"re0\">$needle</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$p</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$pl</span><span class=\"sy0\">=</span><span class=\"re0\">$pl</span><span class=\"sy0\">.</span><span class=\"st0\">\",&amp;nbsp;\"</span><span class=\"sy0\">.</span><span class=\"re0\">$p</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$txt</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle found once in haystack, position: <span class=\"es4\">$pl</span>.\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$txt</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle found twice in haystack, position(s): <span class=\"es4\">$pl</span>.\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span>            <span class=\"br0\">{</span> <span class=\"re0\">$txt</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle found <span class=\"es4\">$n</span> times in haystack, position(s): <span class=\"es4\">$pl</span>.\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span>              <span class=\"br0\">{</span> <span class=\"re0\">$txt</span><span class=\"sy0\">=</span><span class=\"st0\">\"needle not found in haystack.\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span><br/>&lt;html&gt;<br/>  &lt;head&gt;<br/>    &lt;title&gt;Character Matching&lt;/title&gt;<br/>    &lt;meta name=\"author\" content=\"Walter Pachl\"&gt;<br/>    &lt;meta name=\"date\" content=\"02.05.2013\"&gt;<br/>    &lt;style&gt;<br/>      p { font: 120% courier; }<br/>    &lt;/style&gt;<br/>  &lt;/head&gt;<br/>  &lt;body&gt;<br/>    &lt;p&gt;&lt;strong&gt;Haystack:&amp;nbsp;'<span class=\"kw2\">&lt;?php</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$haystack</span>\"</span> <span class=\"sy1\">?&gt;</span>'&lt;/strong&gt;&lt;/p&gt;<br/>    &lt;p&gt;&lt;strong&gt;Needle:&amp;nbsp;&amp;nbsp;&amp;nbsp;'<span class=\"kw2\">&lt;?php</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$needle</span>\"</span> <span class=\"sy1\">?&gt;</span>'&lt;/strong&gt;&lt;/p&gt;<br/>    &lt;p&gt;&lt;strong&gt;<span class=\"kw2\">&lt;?php</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$txt</span>\"</span> <span class=\"sy1\">?&gt;</span>&lt;/strong&gt;&lt;/p&gt;<br/>    &lt;!-- special message: --&gt;<br/>    &lt;p  style=\"color: red\";&gt;&lt;strong&gt;<span class=\"kw2\">&lt;?php</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$tx1</span>\"</span> <span class=\"sy1\">?&gt;</span>&lt;/strong&gt;&lt;/p&gt;<br/>  &lt;/body&gt;<br/>&lt;/html&gt;</pre>"}, {"lang": "PicoLisp", "loc": 24, "block": "<pre class=\"text highlighted_source\">: (pre? \"ab\" \"abcd\")<br/>-&gt; \"abcd\"<br/>: (pre? \"xy\" \"abcd\")<br/>-&gt; NIL<br/>\u00a0<br/>: (sub? \"bc\" \"abcd\")<br/>-&gt; \"abcd\"<br/>: (sub? \"xy\" \"abcd\")<br/>-&gt; NIL<br/>\u00a0<br/>: (tail (chop \"cd\") (chop \"abcd\"))<br/>-&gt; (\"c\" \"d\")<br/>: (tail (chop \"xy\") (chop \"abcd\"))<br/>-&gt; NIL<br/>\u00a0<br/>\u00a0<br/>(de positions (Pat Str)<br/>   (setq Pat (chop Pat))<br/>   (make<br/>      (for ((I . L) (chop Str) L (cdr L))<br/>         (and (head Pat L) (link I)) ) ) )<br/>\u00a0<br/>: (positions \"bc\" \"abcdabcd\")<br/>-&gt; (2 6)</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/*  Let s be one string, t be the other that might exist within s. */<br/>                                                     /* 8-1-2011 */<br/>k = index(s, t);<br/>if k = 0 then put skip edit (t, ' is nowhere in sight') (a);<br/>else if k = 1 then<br/>   put skip edit (t, '  starts at the beginning of  ', s) (a);<br/>else if k+length(t)-1 = length(s) then<br/>   put skip edit (t, '  is at the end of  ', s) (a);<br/>else put skip edit (t, '  is within  ', s) (a);<br/>\u00a0<br/>if k &gt; 0 then put skip edit (t, '  starts at position  ', k) (a);<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 15, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> StartsWith<span class=\"br0\">(</span>String1$, String2$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Result<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>String1$, String2$, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"co1\">; E.g Found in possition 1</span><br/>    Result <span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>String1$, String2$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Result<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> EndsWith<span class=\"br0\">(</span>String1$, String2$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Result, dl<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>String1$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>String2$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> dl<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>String1$, <span class=\"kw2\">Len</span><span class=\"br0\">(</span>String2$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>String2$<br/>    Result <span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>String1$, String2$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Result<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"st0\">\"spicywiener\"</span>.StartsWith<span class=\"br0\">(</span><span class=\"st0\">\"spicy\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"spicywiener\"</span>.Contains<span class=\"br0\">(</span><span class=\"st0\">\"icy\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"spicywiener\"</span>.EndsWith<span class=\"br0\">(</span><span class=\"st0\">\"wiener\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"spicywiener\"</span>.IndexOf<span class=\"br0\">(</span><span class=\"st0\">\"icy\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"re3\">regex</span><span class=\"br0\">]</span>::Matches<span class=\"br0\">(</span><span class=\"st0\">\"spicywiener\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"i\"</span><span class=\"br0\">)</span>.count<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startswith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">#returns True</span><br/><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endswith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span> <span class=\"co1\">#returns False</span><br/><span class=\"st0\">\"bb\"</span> <span class=\"kw1\">in</span> <span class=\"st0\">\"abab\"</span> <span class=\"co1\">#returns False</span><br/><span class=\"st0\">\"ab\"</span> <span class=\"kw1\">in</span> <span class=\"st0\">\"abab\"</span> <span class=\"co1\">#returns True</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"co1\">#returns -1</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">#returns 0</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"sy0\">,</span>loc+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">#returns 2</span></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require srfi/13)<br/>(string-prefix? \"ab\" \"abcd\")<br/>(string-suffix? \"cd\" \"abcd\")<br/>(string-contains \"abab\" \"bb\")<br/>(string-contains \"abab\" \"ba\")<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 14, "block": "<pre class=\"text highlighted_source\">: startsWith? ( $1 $2 - f )<br/>  withLength &amp;swap dip 0 swap ^strings'getSubset compare\u00a0;<br/>\u00a0<br/>\"abcdefghijkl\" \"abcde\" startsWith?<br/>\"abcdefghijkl\" \"bcd\" startsWith?<br/>\u00a0<br/>\"abcdefghijkl\" \"bcd\" ^strings'search<br/>\"abcdefghijkl\" \"zmq\" ^strings'search<br/>\u00a0<br/>: endsWith? ( $1 $2 - f )<br/>  swap withLength + over getLength - compare\u00a0;<br/>\u00a0<br/>\"abcdefghijkl\" \"ijkl\" endsWith?<br/>\"abcdefghijkl\" \"abc\" endsWith?</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  some  basic   character string   testing  (for matching). */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> A B;                    LB=<span class=\"kw6\">length</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*obtain A and B from the command line.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'string  A  = '</span>   A                          <span class=\"coMULTI\">/*display string   A   to the terminal.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'string  B  = '</span>   B                          <span class=\"coMULTI\">/*   \"       \"     B    \"  \"      \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2591'</span>, <span class=\"nu0\">70</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>A, LB<span class=\"br0\">)</span>==B  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">'string  A  starts with string  B'</span><br/>                   <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"string  A  doesn't start with string  B\"</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193] another method using COMPARE BIF*/</span><br/>          <span class=\"coMULTI\">/*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557<br/>            \u2551 if compare(A,B)==LB  then say  'string  A  starts with string  B'        \u2551<br/>            \u2551                      else say  \"string  A  doesn't start with string  B\" \u2551<br/>            \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/</span><br/>p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>B, A<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"string  A  doesn't contain string  B\"</span><br/>         <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  <span class=\"st0\">'string  A  contains string  B  (starting in position'</span>   p<span class=\"st0\">\")\"</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>A, LB<span class=\"br0\">)</span>==b  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'string  A  ends with string  B'</span><br/>                    <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"string  A  doesn't end with string  B\"</span><br/><span class=\"kw1\">say</span><br/>$=;   p=<span class=\"nu0\">0</span>;                    <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  p==<span class=\"nu0\">0</span>;        p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>B, A, p+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                              <span class=\"kw1\">if</span> p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$<span class=\"st0\">','</span>   p<br/>                              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/>$=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>$, <span class=\"st0\">'L'</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*elide extra blanks and leading comma.*/</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                                       <span class=\"coMULTI\">/*obtain number of words in  $  string.*/</span><br/><span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"string  A  doesn't contain string  B\"</span><br/>         <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'string  A  contains string  B '</span>    #    <span class=\"st0\">\" time\"</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'s'</span>, #<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>                  <span class=\"st0\">\"(at position\"</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'s'</span>,  #<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   $<span class=\"st0\">\")\"</span>  <span class=\"coMULTI\">/*stick a fork in it, we're done*/</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"Welcome to the Ring Programming Language\"<br/>bString = \"Ring\"<br/>bStringIndex = substr(aString,bString)<br/>if bStringIndex &gt; 0 see \"\" + bStringIndex + \"\u00a0: \" + bString ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">p</span> <span class=\"st0\">'abcd'</span>.<span class=\"me1\">start_with</span>?<span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span>  <span class=\"co1\">#returns true</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abcd'</span>.<span class=\"me1\">end_with</span>?<span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span>    <span class=\"co1\">#returns false</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span><span class=\"st0\">'bb'</span><span class=\"br0\">)</span>     <span class=\"co1\">#returns false</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span>     <span class=\"co1\">#returns true</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span><span class=\"br0\">[</span><span class=\"st0\">'bb'</span><span class=\"br0\">]</span>              <span class=\"co1\">#returns nil</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span><span class=\"br0\">[</span><span class=\"st0\">'ab'</span><span class=\"br0\">]</span>              <span class=\"co1\">#returns \"ab\"</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'bb'</span><span class=\"br0\">)</span>        <span class=\"co1\">#returns nil</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span>        <span class=\"co1\">#returns 0</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"me1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'ab'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"co1\">#returns 2</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">'abab'</span>.<span class=\"me1\">rindex</span><span class=\"br0\">(</span><span class=\"st0\">'ab'</span><span class=\"br0\">)</span>       <span class=\"co1\">#returns 2</span></pre>"}, {"lang": "Run BASIC", "loc": 28, "block": "<pre class=\"text highlighted_source\">s1$ = \"abc def ghi klmnop\"<br/>s2$  = \"abc\"  ' begins with<br/>s3$  = \"ef\"   ' is in the string <br/>s4$  = \"nop\"  ' ends with<br/>\u00a0<br/>sn2$ = \"abcx\"  ' not begins with<br/>sn3$ = \"efx\"   ' not in the string <br/>sn4$ = \"nopx\"  ' not ends with<br/>\u00a0<br/>if left$(s1$,len(s2$)) &lt;&gt; s2$ then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"begin with:\";s2$<br/>\u00a0<br/>if instr(s1$,s3$) = 0 then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"contain:\";s3$<br/>\u00a0<br/>if mid$(s1$,len(s1$) + 1 - len(s4$),len(s4$)) &lt;&gt; s4$ then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"end with:\";s4$<br/>\u00a0<br/>' ----------- not -----------------------------<br/>print<br/>if left$(s1$,len(sn2$)) &lt;&gt; sn2$ then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"begin with:\";sn2$<br/>\u00a0<br/>if instr(s1$,sn3$) = 0 then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"contain:\";sn3$<br/>\u00a0<br/>if mid$(s1$,len(s1$) + 1 - len(sn4$),len(sn4$)) &lt;&gt; sn4$ then a$ = \"Not \"<br/>print \"String:\";s1$;\" does \";a$;\"end with:\";sn4$</pre>"}, {"lang": "Rust", "loc": 22, "block": "<pre class=\"text highlighted_source\">fn print_match(possible_match: Option&lt;usize&gt;) {<br/>    match possible_match {<br/>        Some(match_pos) =&gt; println!(\"Found match at pos {}\", match_pos),<br/>        None =&gt; println!(\"Did not find any matches\")<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let s1 = \"abcd\";<br/>    let s2 = \"abab\";<br/>    let s3 = \"ab\";<br/>\u00a0<br/>    // Determining if the first string starts with second string<br/>    assert!(s1.starts_with(s3));<br/>    // Determining if the first string contains the second string at any location<br/>    assert!(s1.contains(s3));<br/>    // Print the location of the match <br/>    print_match(s1.find(s3)); // Found match at pos 0<br/>    print_match(s1.find(s2)); // Did not find any matches<br/>    // Determining if the first string ends with the second string<br/>    assert!(s2.ends_with(s3));<br/>}</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns true</span><br/><span class=\"st0\">\"abcd\"</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"zn\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns false</span><br/><span class=\"st0\">\"abab\"</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns false</span><br/><span class=\"st0\">\"abab\"</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns true</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> loc<span class=\"sy0\">=</span><span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"bb\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns -1</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"co1\">//returns 0</span><br/>loc <span class=\"sy0\">=</span> <span class=\"st0\">\"abab\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">\"ab\"</span>, loc+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">//returns 2</span></pre>"}, {"lang": "Seed7", "loc": 16, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: position is 0;<br/>  begin<br/>    writeln(startsWith(\"abcd\", \"ab\")); # write TRUE<br/>    writeln(endsWith(\"abcd\", \"zn\"));   # write FALSE<br/>    writeln(pos(\"abab\", \"bb\") &lt;&gt; 0);   # write FALSE<br/>    writeln(pos(\"abab\", \"ab\") &lt;&gt; 0);   # write TRUE<br/>    writeln(pos(\"abab\", \"bb\"));        # write 0<br/>    position\u00a0:= pos(\"abab\", \"ab\");<br/>    writeln(position);                 # position is 1<br/>    position\u00a0:= pos(\"abab\", \"ab\", succ(position));<br/>    writeln(position);                 # position is 3<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">var first = <span class=\"st0\">\"abc-abcdef-abcd\"</span>;<br/>var second = <span class=\"st0\">\"abc\"</span>;<br/>\u00a0<br/>say first.<span class=\"me1\">begins_with</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span>;      <span class=\"co1\">#=&gt; true</span><br/>say first.<span class=\"me1\">contains</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span>;         <span class=\"co1\">#=&gt; true</span><br/>say first.<span class=\"me1\">ends_with</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span>;        <span class=\"co1\">#=&gt; false</span><br/>\u00a0<br/><span class=\"co1\"># Get and print the location of the match</span><br/>say first.<span class=\"me1\">index</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span>;            <span class=\"co1\">#=&gt; 0</span><br/>\u00a0<br/><span class=\"co1\"># Find multiple occurrences of a string</span><br/>var pos = <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>pos = first.<span class=\"me1\">index</span><span class=\"br0\">(</span>second, pos<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0!= <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"Match at pos: #{pos}\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\">a startsWith: <span class=\"re5\">b</span><br/>a includesSubCollection: <span class=\"re5\">b</span><br/>a endsWith: <span class=\"re5\">b</span><br/>a indexOfSubCollection: <span class=\"re5\">b</span><br/>a indexOfSubCollection: <span class=\"re5\">b</span> startingAt: <span class=\"re5\">pos</span></pre>"}, {"lang": "SNOBOL4", "loc": 14, "block": "<pre class=\"text highlighted_source\">      s1 = 'abcdabefgab'<br/>      s2 = 'ab'<br/>      s3 = 'xy'<br/>      OUTPUT =\u00a0?(s1\u00a0? POS(0) s2)  \"1. \" s2 \" begins \" s1<br/>      OUTPUT =\u00a0?(s1\u00a0? POS(0) s3)  \"1. \" s3 \" begins \" s1 \u00a0;# fails<br/>\u00a0<br/>      n = 0<br/>again s1 POS(n) ARB s2 @a                       \u00a0:F(p3)<br/>      OUTPUT = \"2. \" s2 \" found at position \"<br/>+        a - SIZE(s2) \" in \" s1<br/>      n = a                                     \u00a0:(again)<br/>\u00a0<br/>p3    OUTPUT =\u00a0?(s1\u00a0? s2 RPOS(0)) \"3. \" s2 \" ends \" s1<br/>END</pre>"}, {"lang": "Standard ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">String.isPrefix \"ab\" \"abcd\"; (* returns true *)<br/>String.isSuffix \"zn\" \"abcd\"; (* returns false *)<br/>String.isSubstring \"bb\" \"abab\"; (* returns false *)<br/>String.isSubstring \"ab\" \"abab\"; (* returns true *)<br/>#2 (Substring.base (#2 (Substring.position \"bb\" (Substring.full \"abab\")))); (* returns 4 *)<br/>val loc = #2 (Substring.base (#2 (Substring.position \"ab\" (Substring.full \"abab\")))); (* returns 0 *)<br/>val loc' = #2 (Substring.base (#2 (Substring.position \"ab\" (Substring.extract (\"abab\", loc+1, NONE))))); (* returns 2 *)</pre>"}, {"lang": "Swift", "loc": 9, "block": "<pre class=\"text highlighted_source\">var str = \"Hello, playground\"<br/>str.hasPrefix(\"Hell\")           //True<br/>str.hasPrefix(\"hell\")           //False<br/>\u00a0<br/>str.containsString(\"llo\")       //True<br/>str.containsString(\"xxoo\")      //False<br/>\u00a0<br/>str.hasSuffix(\"playground\")     //True<br/>str.hasSuffix(\"world\")          //False</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> isPrefix    <span class=\"br0\">[</span><span class=\"kw2\">string</span> equal -length <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$needle</span><span class=\"br0\">]</span> <span class=\"re0\">$haystack</span> <span class=\"re0\">$needle</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> isContained <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> first <span class=\"re0\">$needle</span> <span class=\"re0\">$haystack</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> isSuffix    <span class=\"br0\">[</span><span class=\"kw2\">string</span> equal <span class=\"re0\">$needle</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$haystack</span> end-<span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$needle</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> end<span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "TUSCRIPT", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>ASK \"string1\", string1=\"\"<br/>ASK \"string2\", string2=\"\"<br/>\u00a0<br/>IF (string1.sw.string2)   THEN<br/>PRINT string1,\" starts with     \",string2<br/>ELSE<br/>PRINT string1,\" not starts with \",string2<br/>ENDIF<br/>SET beg=STRING (string1,string2,0,0,0,end)<br/>IF (beg!=0) THEN<br/>PRINT string1,\" contains        \",string2<br/>PRINT \"  starting in position \",beg<br/>PRINT \"  ending   in position \",end<br/>ELSE<br/>PRINT string1,\" not contains    \",string2<br/>ENDIF<br/>\u00a0<br/>IF (string1.ew.string2) THEN<br/>PRINT string1,\" ends with       \",string2<br/>ELSE<br/>PRINT string1,\" not ends with   \",string2<br/>ENDIF<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 16, "block": "<pre class=\"text highlighted_source\">(tree-case *args*<br/>  ((big small)<br/>   (cond<br/>     ((&lt; (length big) (length small))<br/>      (put-line `@big is shorter than @small`))<br/>     ((str= big small)<br/>      (put-line `@big and @small are equal`))<br/>     ((starts-with small big)<br/>      (put-line `@small is a prefix of @big`))<br/>     ((ends-with small big)<br/>      (put-line `@small is a suffix of @big`))<br/>     (t (iflet ((pos (search-str big small)))<br/>          (put-line `@small occurs in @big at position @pos`)<br/>          (put-line `@small does not occur in @big`)))))<br/>  (otherwise<br/>    (put-line `usage: @(ldiff *full-args* *args*) &lt;bigstring&gt; &lt;smallstring&gt;`)))</pre>"}, {"lang": "VBScript", "loc": 43, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> StartsWith(s1,s2)<br/>\tStartsWith = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">If</span> Left(s1,Len(s2)) = s2 <span class=\"kw3\">Then</span><br/>\t\tStartsWith = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Contains(s1,s2)<br/>\tContains = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">If</span> InStr(1,s1,s2) <span class=\"kw3\">Then</span><br/>\t\tContains = <span class=\"kw5\">True</span> &amp; <span class=\"st0\">\" at positions \"</span><br/>\t\tj = 1<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> InStr(j,s1,s2) = <span class=\"kw5\">False</span><br/>\t\t\tContains = Contains &amp; InStr(j,s1,s2) &amp; <span class=\"st0\">\", \"</span><br/>\t\t\t<span class=\"kw3\">If</span> j = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t<span class=\"kw3\">If</span> Len(s2) = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tj = j + InStr(j,s1,s2)<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tj = j + (InStr(j,s1,s2) + (Len(s2) - 1))<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t<span class=\"kw3\">If</span> Len(s2) = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tj = j + ((InStr(j,s1,s2) - j) + 1)<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tj = j + ((InStr(j,s1,s2) - j) + (Len(s2) - 1))<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> EndsWith(s1,s2)<br/>\tEndsWith = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">If</span> Right(s1,Len(s2)) = s2 <span class=\"kw3\">Then</span><br/>\t\tEndsWith = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"Starts with test, 'foo' in 'foobar': \"</span> &amp; StartsWith(<span class=\"st0\">\"foobar\"</span>,<span class=\"st0\">\"foo\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Contains test, 'o' in 'fooooobar': \"</span> &amp; Contains(<span class=\"st0\">\"fooooobar\"</span>,<span class=\"st0\">\"o\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Ends with test, 'bar' in 'foobar': \"</span> &amp; EndsWith(<span class=\"st0\">\"foobar\"</span>,<span class=\"st0\">\"bar\"</span>)</pre>"}, {"lang": "XPL0", "loc": 42, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>string 0;               \\use zero-terminated strings<br/>\u00a0<br/>func StrLen(A);         \\Return number of characters in a string<br/>char A;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>    if A(I) = 0 then return I;<br/>\u00a0<br/>func StrFind(A, B);     \\Search for string B in string A<br/>\\Returns index of first occurrence of string B in A, or -1 if B is not found<br/>char A, B;              \\strings to be compared<br/>int  LA, LB, I, J;<br/>[LA:= StrLen(A);<br/> LB:= StrLen(B);<br/> for I:= 0 to LA-LB do<br/>    [for J:= 0 to LB-1 do<br/>        if B(J) # A(J+I) then J:= LB+1;<br/>    if J = LB then return I;    \\found<br/>    ];<br/>return -1;<br/>];<br/>\u00a0<br/>char Str;  int I, J;<br/>[Str:= \"pack my box with\";<br/>\\       0123456789012345<br/>Text(0, if StrFind(Str, \"pack\") = 0 then \"yes\" else \"no\");  CrLf(0);    \\1.<br/>Text(0, if StrFind(Str,  \"ack\") = 0 then \"yes\" else \"no\");  CrLf(0);<br/>I:= StrFind(Str, \"x w\");<br/>Text(0, if I &gt;= 0 then \"yes\" else \"no\");                                \\2.<br/>Text(0, \", at offset \");  IntOut(0, I);  CrLf(0);<br/>I:= 0;  J:= 0;          \\offsets of space characters<br/>loop    [I:= StrFind(Str+J, \" \");<br/>        if I &lt; 0 then quit;<br/>        IntOut(0, I+J); ChOut(0, ^ );<br/>        J:= J+I+1;<br/>        ];<br/>CrLf(0);<br/>Text(0, if StrFind(Str, \"X w\") &gt;= 0 then \"yes\" else \"no\");  CrLf(0);<br/>Text(0, if StrFind(Str, \"with\") = StrLen(Str)-StrLen(\"with\") then \"yes\" else \"no\");  CrLf(0); \\3.<br/>Text(0, if StrFind(Str, \"x w\" ) = StrLen(Str)-StrLen(\"x w\" ) then \"yes\" else \"no\");  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fcn f(text,p){ if(text.find(p)==0)println(\"Yep\") else println(\"Nope\") }<br/>f(\"foobar\",\"foo\") //--&gt; Yep<br/>f(\"foobar\",\"bar\") //--&gt; Nope</pre>"}]}