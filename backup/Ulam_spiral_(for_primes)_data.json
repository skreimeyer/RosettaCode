{"task": "Ulam_spiral_(for_primes)", "blocks": [{"lang": "360 Assembly", "loc": 145, "block": "<pre class=\"text highlighted_source\">*        Ulam spiral               26/04/2016<br/>ULAM     CSECT<br/>         USING  ULAM,R13           set base register<br/>SAVEAREA B      STM-SAVEAREA(R15)  skip savearea<br/>         DC     17F'0'             savearea<br/>STM      STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         save previous SA<br/>         ST     R15,8(R13)         linkage in previous SA<br/>         LR     R13,R15            establish addressability<br/>         LA     R5,1               n=1<br/>         LH     R8,NSIZE           x=nsize<br/>         SRA    R8,1<br/>         LA     R8,1(R8)           x=nsize/2+1<br/>         LR     R9,R8              y=x<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ0<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ0   LA     R5,1(R5)           n=n+1<br/>         LA     R6,1               i=1<br/>LOOPI1   LH     R2,NSIZE           do i=1 to nsize-1 by 2<br/>         BCTR   R2,0<br/>         CR     R6,R2              if i&gt;nsize-1<br/>         BH     ELOOPI1<br/>         LR     R7,R6              j=i; do j=1 to i<br/>LOOPJ1   LA     R8,1(R8)           x=x+1<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ1<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ1   LA     R5,1(R5)           n=n+1<br/>         BCT    R7,LOOPJ1          next j <br/>ELOOPJ1  LR     R7,R6              j=i; do j=1 to i<br/>LOOPJ2   BCTR   R9,0               y=y-1<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ2<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ2   LA     R5,1(R5)           n=n+1<br/>         BCT    R7,LOOPJ2          next j <br/>ELOOPJ2  LR     R7,R6              j=i<br/>         LA     R7,1(R7)           j=i+1; do j=1 to i+1<br/>LOOPJ3   BCTR   R8,0               x=x-1<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ3<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ3   LA     R5,1(R5)           n=n+1<br/>         BCT    R7,LOOPJ3          next j <br/>ELOOPJ3  LR     R7,R6              j=i<br/>         LA     R7,1(R7)           j=i+1; do j=1 to i+1<br/>LOOPJ4   LA     R9,1(R9)           y=y+1<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ4<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ4   LA     R5,1(R5)           n=n+1<br/>         BCT    R7,LOOPJ4          next j <br/>ELOOPJ4  LA     R6,2(R6)           i=i+2<br/>         B      LOOPI1<br/>ELOOPI1  LH     R7,NSIZE           j=nsize<br/>         BCTR   R7,0               j=nsize-1; do j=1 to nsize-1<br/>LOOPJ5   LA     R8,1(R8)           x=x+1<br/>         LR     R1,R5              n<br/>         BAL    R14,ISPRIME<br/>         C      R0,=F'1'           if isprime(n)<br/>         BNE    NPRMJ5<br/>         BAL    R14,SPIRALO        spiral(x,y)=o<br/>NPRMJ5   LA     R5,1(R5)           n=n+1<br/>         BCT    R7,LOOPJ5          next j <br/>ELOOPJ5  LA     R6,1               i=1<br/>LOOPI2   CH     R6,NSIZE           do i=1 to nsize<br/>         BH     ELOOPI2<br/>         LA     R10,PG             reset buffer<br/>         LA     R7,1               j=1<br/>LOOPJ6   CH     R7,NSIZE           do j=1 to nsize<br/>         BH     ELOOPJ6<br/>         LR     R1,R7              j<br/>         BCTR   R1,0               (j-1)<br/>         MH     R1,NSIZE           (j-1)*nsize<br/>         AR     R1,R6              r1=(j-1)*nsize+i<br/>         LA     R14,SPIRAL-1(R1)   @spiral(j,i)<br/>         MVC    0(1,R10),0(R14)    output spiral(j,i)<br/>         LA     R10,1(R10)         pgi=pgi+1<br/>         LA     R7,1(R7)           j=j+1<br/>         B      LOOPJ6<br/>ELOOPJ6  XPRNT  PG,80              print<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI2<br/>ELOOPI2  L      R13,4(0,R13)       reset previous SA<br/>         LM     R14,R12,12(R13)    restore previous env<br/>         XR     R15,R15            set return code<br/>         BR     R14                call back<br/>ISPRIME  CNOP   0,4     ---------- isprime function<br/>         C      R1,=F'2'           if nn=2<br/>         BNE    NOT2<br/>         LA     R0,1               rr=1<br/>         B      ELOOPII<br/>NOT2     C      R1,=F'2'           if nn&lt;2<br/>         BL     RRZERO<br/>         LR     R2,R1              nn<br/>         LA     R4,2               2<br/>         SRDA   R2,32              shift<br/>         DR     R2,R4              nn/2<br/>         C      R2,=F'0'           if nn//2=0<br/>         BNE    TAGII<br/>RRZERO   SR     R0,R0              rr=0<br/>         B      ELOOPII<br/>TAGII    LA     R0,1               rr=1<br/>         LA     R4,3               ii=3 <br/>LOOPII   LR     R3,R4              ii<br/>         MR     R2,R4              ii*ii<br/>         CR     R3,R1              if ii*ii&lt;=nn<br/>         BH     ELOOPII<br/>         LR     R3,R1              nn<br/>         LA     R2,0               clear<br/>         DR     R2,R4              nn/ii<br/>         LTR    R2,R2              if nn//ii=0<br/>         BNZ    NEXTII<br/>         SR     R0,R0              rr=0<br/>         B      ELOOPII<br/>NEXTII   LA     R4,2(R4)           ii=ii+2<br/>         B      LOOPII<br/>ELOOPII  BR     R14     ---------- end isprime return rr<br/>SPIRALO  CNOP   0,4     ---------- spiralo subroutine<br/>         LR     R1,R8              x<br/>         BCTR   R1,0               x-1<br/>         MH     R1,NSIZE           (x-1)*nsize<br/>         AR     R1,R9              r1=(x-1)*nsize+y<br/>         LA     R10,SPIRAL-1(R1)   <a class=\"__cf_email__\" data-cfemail=\"05773435384576756c776469\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(x,y)<br/>         MVC    0(1,R10),O         spiral(x,y)=o<br/>         BR     R14     ---------- end spiralo<br/>NS       EQU    79                 4n+1<br/>NSIZE    DC     AL2(NS)            =H'ns'<br/>O        DC     CL1'*'             if prime<br/>PG       DC     CL80' '            buffer<br/>         LTORG<br/>SPIRAL   DC     (NS*NS)CL1' '<br/>         YREGS<br/>         END    ULAM</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   Size: Positive; <br/>      <span class=\"co1\">-- determines the size of the square</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Represent<span class=\"br0\">(</span>N: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>      <span class=\"co1\">-- this turns a number into a string to be printed</span><br/>      <span class=\"co1\">-- the length of the output should not change</span><br/>      <span class=\"co1\">-- e.g., Represent(N) may return \" #\" if N is a prime</span><br/>      <span class=\"co1\">-- and \"  \" else</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Put_String<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span>;<br/>      <span class=\"co1\">-- outputs a string, no new line</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> New_Line;<br/>      <span class=\"co1\">-- the name says all</span><br/><span class=\"kw3\">package</span> Generic_Ulam <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print_Spiral;<br/>   <span class=\"co1\">-- calls Put_String(Represent(I)) N^2 times</span><br/>   <span class=\"co1\">--       and New_Line N times</span><br/>\u00a0<br/><span class=\"kw1\">end</span> Generic_Ulam;</pre>"}, {"lang": "C", "loc": 89, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint32_t</span> bitsieve<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> sieve_check<span class=\"br0\">(</span>bitsieve <span class=\"sy0\">*</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>v <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>v <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bitsieve<span class=\"sy0\">*</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    bitsieve <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span>i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> v<span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                b<span class=\"br0\">[</span>j <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define max(x,y) ((x) &gt; (y)\u00a0? (x)\u00a0: (y))</span><br/>\u00a0<br/><span class=\"coMULTI\">/* This mapping taken from python solution */</span><br/><span class=\"kw4\">int</span> ulam_get_map<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    x <span class=\"sy0\">-=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">-=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> mx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> my <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> max<span class=\"br0\">(</span>mx<span class=\"sy0\">,</span> my<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> y <span class=\"sy0\">&gt;=</span> x <span class=\"sy0\">?</span> l <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">:</span> l <span class=\"sy0\">-</span> x <span class=\"sy0\">-</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> d<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Passing a value of 0 as glyph will print numbers */</span><br/><span class=\"kw4\">void</span> output_ulam_spiral<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> glyph<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* An even side length does not make sense, use greatest odd value &lt; n */</span><br/>    n <span class=\"sy0\">-=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>spaces <span class=\"sy0\">=</span> <span class=\"st0\">\".................\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> mwidth <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log10.html\"><span class=\"kw3\">log10</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    bitsieve <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> z <span class=\"sy0\">=</span> ulam_get_map<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>glyph <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sieve_check<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*d \"</span><span class=\"sy0\">,</span> mwidth<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%.*s \"</span><span class=\"sy0\">,</span> mwidth<span class=\"sy0\">,</span> spaces<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy0\">,</span> sieve_check<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> z<span class=\"br0\">)</span> <span class=\"sy0\">?</span> glyph <span class=\"sy0\">:</span> spaces<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">9</span> <span class=\"sy0\">:</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    output_ulam_spiral<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    output_ulam_spiral<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 101, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> ulamSpiral <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> n, <span class=\"kw4\">unsigned</span> startWith <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        _lst.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> n <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> n<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        _mx <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> v <span class=\"sy1\">=</span> n <span class=\"sy2\">*</span> n<span class=\"sy4\">;</span><br/>        _wd <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">log10</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> v <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> u <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> u <span class=\"sy1\">&lt;</span> v<span class=\"sy4\">;</span> u<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            _lst.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        arrange<span class=\"br0\">(</span> startWith <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span> <span class=\"kw4\">char</span> c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>c <span class=\"br0\">)</span> displayNumbers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">else</span> displaySymbol<span class=\"br0\">(</span> c <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> u <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> u <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> u <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">unsigned</span> q <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> u <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>,<br/>                 c <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> c <span class=\"sy1\">&lt;=</span> q <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> c <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> <span class=\"br0\">(</span> c <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>            c <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> arrange<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> stp <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, posX <span class=\"sy1\">=</span> _mx <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span>, <br/>                 posY <span class=\"sy1\">=</span> posX, stC <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> dx <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, dy <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> posX <span class=\"sy1\">&lt;</span> _mx <span class=\"sy3\">&amp;&amp;</span> posY <span class=\"sy1\">&lt;</span> _mx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            _lst.<span class=\"me1\">at</span><span class=\"br0\">(</span> posX <span class=\"sy2\">+</span> posY <span class=\"sy2\">*</span> _mx <span class=\"br0\">)</span> <span class=\"sy1\">=</span>  isPrime<span class=\"br0\">(</span> s <span class=\"br0\">)</span> <span class=\"sy4\">?</span> s <span class=\"sy4\">:</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            s<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> dx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                posX <span class=\"sy2\">+</span><span class=\"sy1\">=</span> dx<span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>stC <span class=\"sy1\">==</span> stp <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    dy <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>dx<span class=\"sy4\">;</span><br/>                    dx <span class=\"sy1\">=</span> stC <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                posY <span class=\"sy2\">+</span><span class=\"sy1\">=</span> dy<span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>stC <span class=\"sy1\">==</span> stp <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    dx <span class=\"sy1\">=</span> dy<span class=\"sy4\">;</span><br/>                    dy <span class=\"sy1\">=</span> stC <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>                    stp<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> displayNumbers<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> ct <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> _lst.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> _lst.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> _wd <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">(</span> _wd, <span class=\"st0\">'*'</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>ct <span class=\"sy1\">&gt;=</span> _mx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>                ct <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> displaySymbol<span class=\"br0\">(</span> <span class=\"kw4\">char</span> c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> ct <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> _lst.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> _lst.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> c<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>ct <span class=\"sy1\">&gt;=</span> _mx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>                ct <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span> _lst<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> _mx, _wd<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ulamSpiral ulam<span class=\"sy4\">;</span><br/>    ulam.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ulam.<span class=\"me1\">display</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ulam.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">35</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ulam.<span class=\"me1\">display</span><span class=\"br0\">(</span> <span class=\"st0\">'#'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cell<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> max<span class=\"br0\">(</span>x.<span class=\"me1\">abs</span><span class=\"sy0\">,</span> y.<span class=\"me1\">abs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>l <span class=\"sy0\">-</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> d <span class=\"sy0\">+</span> start <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> showSpiral<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> symbol<span class=\"sy0\">=</span><span class=\"st0\">\"# \"</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">string</span> space<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>space <span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        space <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>symbol.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> top <span class=\"sy0\">=</span> start <span class=\"sy0\">+</span> n <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> isPrime <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> <span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>top <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> iota<span class=\"br0\">(</span>x <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> top<span class=\"sy0\">,</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            isPrime<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> cellStr<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> isPrime<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">?</span> symbol <span class=\"sy0\">:</span> space<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>        n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> cell<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> start<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>cellStr.<span class=\"me1\">joiner</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">35</span>.<span class=\"me1\">showSpiral</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>red<span class=\"sy0\">*</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ulam n nmax<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span> prime? n<span class=\"br0\">)</span> <span class=\"sy0\">*</span>red<span class=\"sy0\">*</span> <span class=\"br0\">(</span>gray <span class=\"br0\">(</span><span class=\"sy0\">//</span> n nmax<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>spiral ulam <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"co1\">;; range [0...1000]</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 34, "block": "<pre class=\"text highlighted_source\">defmodule Ulam do<br/>  defp cell(n, x, y, start) do<br/>    y = y - div(n, 2)<br/>    x = x - div(n - 1, 2)<br/>    l = 2 * max(abs(x), abs(y))<br/>    d = if y &gt;= x, do: l*3 + x + y, else: l - x - y<br/>    (l - 1)*(l - 1) + d + start - 1<br/>  end<br/>\u00a0<br/>  def show_spiral(n, symbol\\\\nil, start\\\\1) do<br/>    IO.puts \"\\nN\u00a0: #{n}\"<br/>    if symbol==nil, do: format = \"~#{length(to_char_list(start + n*n - 1))}s \"<br/>    prime = prime(n*n + start)<br/>    Enum.each(0..n-1, fn y -&gt;<br/>      Enum.each(0..n-1, fn x -&gt;<br/>        i = cell(n, x, y, start)<br/>        if symbol do<br/>          IO.write if i in prime, do: Enum.at(symbol,0), else: Enum.at(symbol,1)<br/>        else<br/>         \u00a0:io.fwrite format, [if i in prime do to_char_list(i) else \"\" end]<br/>        end<br/>      end)<br/>      IO.puts \"\"<br/>    end)<br/>  end<br/>\u00a0<br/>  defp prime(num), do: prime(Enum.to_list(2..num), [])<br/>  defp prime([], p), do: Enum.reverse(p)<br/>  defp prime([h|t], p), do: prime((for i &lt;- t, rem(i,h)&gt;0, do: i), [h|p])<br/>end<br/>\u00a0<br/>Ulam.show_spiral(9)<br/>Ulam.show_spiral(25)<br/>Ulam.show_spiral(25, [\"#\",\" \"])</pre>"}, {"lang": "ERRE", "loc": 78, "block": "<pre class=\"text highlighted_source\">PROGRAM SPIRAL<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>CONST RIGHT=1,UP=2,LEFT=3,DOWN=4<br/>\u00a0<br/>!$DYNAMIC<br/>DIM SPIRAL$[0,0]<br/>\u00a0<br/>PROCEDURE PRT_ULAM(N)<br/>  FOR ROW=0 TO N DO<br/>    FOR COL=0 TO N DO<br/>        PRINT(SPIRAL$[ROW,COL];)<br/>    END FOR<br/>    PRINT<br/>  END FOR<br/>  PRINT<br/>  GET(K$)<br/>  FOR ROW=0 TO N DO<br/>    FOR COL=0 TO N DO<br/>        IF VAL(SPIRAL$[ROW,COL])&lt;&gt;0 THEN PRINT(\"  * \";)  ELSE PRINT(SPIRAL$[ROW,COL];) END IF<br/>    END FOR<br/>    PRINT<br/>  END FOR<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE IS_PRIME(A-&gt;RES%)<br/>     LOCAL N<br/>     IF A=2 THEN RES%=TRUE EXIT PROCEDURE END IF<br/>     IF A&lt;=1 OR (A MOD 2=0) THEN RES%=FALSE EXIT PROCEDURE END IF<br/>     MAX=SQR(A)<br/>     FOR N=3 TO MAX STEP 2 DO<br/>        IF (A MOD N=0) THEN RES%=FALSE EXIT PROCEDURE END IF<br/>     END FOR<br/>     RES%=TRUE<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE GEN_ULAM(N,I)<br/>     DIR=RIGHT<br/>     J=I<br/>     Y=INT(N/2)<br/>     IF (N MOD 2=0) THEN X=Y-1 ELSE X=Y END IF\u00a0! shift left for even n's<br/>          WHILE J&lt;=(N*N)-1+I DO<br/>\u00a0<br/>              IS_PRIME(J-&gt;RES%)<br/>              IF RES% THEN SPIRAL$[Y,X]=RIGHT$(\"  \"+STR$(J),4) ELSE SPIRAL$[Y,X]=\" ---\" END IF<br/>\u00a0<br/>              CASE DIR OF<br/>                    RIGHT-&gt;<br/>                       IF (X&lt;=(N-1) AND SPIRAL$[Y-1,X]=\"\" AND J&gt;I) THEN DIR=UP END IF<br/>                    END -&gt;<br/>                    UP-&gt;<br/>                       IF SPIRAL$[Y,X-1]=\"\" THEN DIR=LEFT END IF<br/>                    END -&gt;<br/>                    LEFT-&gt;<br/>                       IF (X=0) OR SPIRAL$[Y+1,X]=\"\" THEN DIR=DOWN END IF<br/>                    END -&gt;<br/>                    DOWN-&gt;<br/>                       IF SPIRAL$[Y,X+1]=\"\" THEN DIR=RIGHT END IF<br/>                    END -&gt;<br/>              END CASE<br/>\u00a0<br/>              CASE DIR OF<br/>                    RIGHT-&gt; X=X+1 END -&gt;<br/>                    UP-&gt;    Y=Y-1 END -&gt;<br/>                    LEFT-&gt;  X=X-1 END -&gt;<br/>                    DOWN-&gt;  Y=Y+1 END -&gt;<br/>              END CASE<br/>              J=J+1<br/>          END WHILE<br/>          PRT_ULAM(N)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>     N=9<br/>    \u00a0!$DIM SPIRAL$[N,N]<br/>     GEN_ULAM(N,1)<br/>END PROGRAM</pre>"}, {"lang": "Fortran", "loc": 76, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> ulam<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">nsize</span> <span class=\"sy0\">=</span> <span class=\"nu0\">49</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, n, x, y<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span>nsize<span class=\"sy0\">*</span>nsize<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, nsize<span class=\"sy0\">*</span>nsize<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">spiral</span><span class=\"br0\">(</span>nsize, nsize<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span> <br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">sstr</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span><br/>\u00a0<br/>  n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  x <span class=\"sy0\">=</span> nsize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  y <span class=\"sy0\">=</span> x<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>  n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, nsize<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<br/>      x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<br/>      y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, nsize<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span><br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span>sstr, <span class=\"st0\">\"(i0)\"</span><span class=\"br0\">)</span> nsize<br/>  <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">//</span> sstr <span class=\"sy0\">//</span> <span class=\"st0\">\"(a,1x))\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, nsize<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span><span class=\"br0\">)</span> spiral<span class=\"br0\">(</span><span class=\"sy0\">:</span>, i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isprime<span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">isprime</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">number</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">number</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    isprime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">number</span> &lt; <span class=\"nu0\">2</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    isprime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">else</span><br/>    isprime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>,i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        isprime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>        <span class=\"kw1\">exit</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Go", "loc": 60, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"math\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Direction <span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\tRIGHT Direction <span class=\"sy2\">=</span> iota<br/>\tUP<br/>\tLEFT<br/>\tDOWN<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> generate<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> c <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\ts <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\tdir <span class=\"sy2\">:=</span> RIGHT<br/>\ty <span class=\"sy2\">:=</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">var</span> x <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> x <span class=\"sy2\">=</span> y <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span> x <span class=\"sy2\">=</span> y <span class=\"sy1\">}</span> <span class=\"co1\">// shift left for even n's</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> n <span class=\"sy3\">*</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>isPrime<span class=\"sy1\">(</span>j<span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy1\">,</span> j<span class=\"sy1\">)</span> <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%2c \"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">\"---\"</span> <span class=\"sy1\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span> dir <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> RIGHT <span class=\"sy1\">:</span> <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>x &lt;<span class=\"sy2\">=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> &amp;&amp; s<span class=\"sy1\">[</span>y <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> &amp;&amp; j &gt; <span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> dir <span class=\"sy2\">=</span> UP <span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">case</span> UP <span class=\"sy1\">:</span> <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>s<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> dir <span class=\"sy2\">=</span> LEFT <span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">case</span> LEFT <span class=\"sy1\">:</span> <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>x <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> s<span class=\"sy1\">[</span>y <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> dir <span class=\"sy2\">=</span> DOWN <span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">case</span> DOWN <span class=\"sy1\">:</span> <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>s<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> dir <span class=\"sy2\">=</span> RIGHT <span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span> dir <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> RIGHT <span class=\"sy1\">:</span> x <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">case</span> UP <span class=\"sy1\">:</span> y <span class=\"sy2\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">case</span> LEFT <span class=\"sy1\">:</span> x <span class=\"sy2\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">case</span> DOWN <span class=\"sy1\">:</span> y <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span> fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%v\"</span><span class=\"sy1\">,</span> row<span class=\"sy1\">))</span> <span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isPrime<span class=\"sy1\">(</span>a <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>a &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> a <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>\tmax <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)))</span><br/>\t<span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> max<span class=\"sy1\">;</span> n <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span> <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">%</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tgenerate<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"co1\">// with digits</span><br/>\tgenerate<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"st0\">'*'</span><span class=\"sy1\">)</span> <span class=\"co1\">// with *</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Numbers<span class=\"sy0\">.</span>Primes<br/>\u00a0<br/>ulam n representation <span class=\"sy0\">=</span> swirl n <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> representation </pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">spiral =: ,~ $ [: /: }<a class=\"__cf_email__\" data-cfemail=\"c5eb85\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">2</span> # &gt;:@<a class=\"__cf_email__\" data-cfemail=\"4920670964\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span> +/\\@# &lt;:@+: $ <span class=\"sy0\">(</span>, -<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;,<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 64, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Ulam<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">enum</span> Direction<span class=\"br0\">{</span><br/>\t\tRIGHT, UP, LEFT, DOWN<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> genUlam<span class=\"br0\">(</span><span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">return</span> genUlam<span class=\"br0\">(</span>n, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> genUlam<span class=\"br0\">(</span><span class=\"kw3\">int</span> n, <span class=\"kw3\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> spiral = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tDirection dir = Direction.<span class=\"me1\">RIGHT</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">int</span> j = i<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">int</span> y = n / <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">int</span> x = <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> y - <span class=\"nu0\">1</span>\u00a0: y<span class=\"sy0\">;</span> <span class=\"co1\">//shift left for even n's</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>= <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> - <span class=\"nu0\">1</span> + i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tspiral<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> = isPrime<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>, j<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\" ---\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>dir<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> RIGHT:<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span>= <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> spiral<span class=\"br0\">[</span>y - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> == <span class=\"kw4\">null</span> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> dir = Direction.<span class=\"me1\">UP</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> UP:<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>spiral<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x - <span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"kw4\">null</span><span class=\"br0\">)</span> dir = Direction.<span class=\"me1\">LEFT</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> LEFT:<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x == <span class=\"nu0\">0</span> || spiral<span class=\"br0\">[</span>y + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> == <span class=\"kw4\">null</span><span class=\"br0\">)</span> dir = Direction.<span class=\"me1\">DOWN</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> DOWN:<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>spiral<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x + <span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"kw4\">null</span><span class=\"br0\">)</span> dir = Direction.<span class=\"me1\">RIGHT</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>dir<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">case</span> RIGHT:\tx++<span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> UP: \ty--<span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> LEFT:\tx--<span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> DOWN:\ty++<span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tj++<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> spiral<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isPrime<span class=\"br0\">(</span><span class=\"kw3\">int</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a == <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t\t   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> || a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t   <span class=\"kw3\">long</span> max = <span class=\"br0\">(</span><span class=\"kw3\">long</span><span class=\"br0\">)</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> n = <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span>= max<span class=\"sy0\">;</span> n += <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t      <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">%</span> n == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t   <span class=\"br0\">}</span><br/>\t\t   <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ulam = genUlam<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> row\u00a0: ulam<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> row\u00a0: ulam<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>[<span class=\"es0\">\\\\</span>s+<span class=\"es0\">\\\\</span>d+\"</span>, <span class=\"st0\">\"[  * \"</span><span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s+<span class=\"es0\">\\\\</span>d+\"</span>, <span class=\"st0\">\"   * \"</span><span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 109, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;!-- UlamSpiral.html --&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;&lt;title&gt;Ulam Spiral&lt;/title&gt;<br/>    &lt;script src=\"VOE.js\"&gt;&lt;/script&gt;<br/>&lt;script&gt;<br/>// http://rosettacode.org/wiki/User:AnatolV/Helper_Functions<br/>// Use v.2.0<br/>var pst;<br/>\u00a0<br/>// ***** Additional helper functions<br/>// Pad number from left<br/>function padLeft(n,ns) {<br/>  return (\"     \" + n).slice(-ns);<br/>}<br/>\u00a0<br/>// Is number n a prime?<br/>function isPrime(n) {<br/>  var n2=Math.sqrt(n);<br/>  for(var i=2; i&lt;=n2; i++) {<br/>    if(n%i === 0) return false;<br/>  }//fend i<br/>  return n\u00a0!== 1;<br/>}<br/>\u00a0<br/>function insm(mat,x,y) {<br/>  var xz=mat[0].length, yz=xz;<br/>  return(x&gt;=0 &amp;&amp; x&lt;xz &amp;&amp; y&gt;=0 &amp;&amp; y&lt;yz)<br/>}<br/>// *****<br/>\u00a0<br/>function rbCheck() {<br/>  if (document.getElementById('rbDef').checked) {pst=0}<br/>  if (document.getElementById('rbAst').checked) {pst=1}<br/>  if (document.getElementById('rbNum').checked) {pst=2}<br/>}<br/>function rbSet() {<br/>  document.getElementById(\"rbDef\").checked = true;<br/>  rbCheck();<br/>}<br/>\u00a0<br/>// The Ulam Spiral<br/>function pspUlam() {<br/>  var i, j, x, y, xmx, ymx, cnt, dir, M, Mij, sp=\" \", sc=3;<br/>  // Setting basic vars for canvas and matrix<br/>  var cvs = document.getElementById('cvsId');<br/>  var ctx = cvs.getContext(\"2d\");<br/>  if(pst&lt;0||pst&gt;2) {pst=0}<br/>  if(pst==0) {n=100; sc=3} else {n=10; sc=5}<br/>  console.log(\"sc\", typeof(sc));<br/>  if(n%2==0) {n++};<br/>  var n2=n*n, pch, sz=n2.toString().length, pch2=sp.repeat(sz);<br/>  var fgc=\"navy\", bgc=\"white\";<br/>  // Create matrix, finding number of rows and columns<br/>  var M=new Array(n);<br/>  for (i=0; i&lt;n; i++) { M[i]=new Array(n);<br/>    for (j=0; j&lt;n; j++) {M[i][j]=0} }<br/>  var r = M[0].length, c = M.length, k=0, dsz=1;<br/>  // Logging init parameters<br/>  var ttl=\"Matrix (\"+r+\",\"+c+\")\";<br/>  console.log(\" *** Ulam spiral: \",n,\"x\",n,\"p-flag=\",pst, \"sc\", sc);<br/>  // Generating and plotting Ulam spiral<br/>  x=y=Math.floor(n/2)+1; xmx=ymx=cnt=1; dir=\"R\";<br/>  for(var i=1; i&lt;=n2; i++) {  //<br/>    if(isPrime(i))  // if prime<br/>      { if(!insm(M,x,y)) {break};<br/>        if(pst==2) {M[y][x]=i} else {M[y][x]=1};<br/>      }<br/>    // all numbers<br/>    if(dir==\"R\") {if(xmx&gt;0){x++;xmx--} else {dir=\"U\";ymx=cnt;y--;ymx--} continue};<br/>    if(dir==\"U\") {if(ymx&gt;0){y--;ymx--} else {dir=\"L\";cnt++;xmx=cnt;x--;xmx--} continue};<br/>    if(dir==\"L\") {if(xmx&gt;0){x--;xmx--} else {dir=\"D\";ymx=cnt;y++;ymx--} continue};<br/>    if(dir==\"D\") {if(ymx&gt;0){y++;ymx--} else {dir=\"R\";cnt++;xmx=cnt;x++;xmx--}; continue};<br/>  }//fend i<br/>  //Plot/Print according to the p-flag(0-real plot,1-\"*\",2-primes)<br/>  if(pst==0) {pmat01(M, fgc, bgc, sc, 0); return};<br/>  var logs;<br/>  if(pst==1) {for(i=1;i&lt;n;i++) {logs=\"|\";<br/>                 for(j=1;j&lt;n;j++) { Mij=M[i][j]; if(Mij&gt;0) {pch=\"*\"} else {pch=\" \"};<br/>                   logs+=\" \"+pch;}<br/>               logs+=\"|\"; console.log(logs);}//fiend<br/>              pmat01(M, fgc, bgc, sc, 0); console.log(\"sc\", sc);<br/>              return;<br/>              }//ifend<br/>                   //console.log(\" \",pch);} console.log(\" \")}; return};<br/>  if(pst==2) {for(i=1;i&lt;n;i++) {logs=\"|\";<br/>                 for(j=1;j&lt;n;j++) {Mij=M[i][j];<br/>                   if(Mij==0) {pch=pch2}<br/>                   else {pch=padLeft(Mij,sz)};<br/>                   logs+=pch; }  //\" \"+<br/>               logs+=\" |\"; console.log(logs);}//fiend<br/>              pmat01(M, fgc, bgc, sc, 0); console.log(\"sc\", sc);<br/>\t\t\t  return;<br/>\t\t\t  }//ifend<br/>\u00a0<br/>}//func end<br/>// ******************************************<br/>&lt;/script&gt;&lt;/head&gt;<br/>&lt;body onload='rbSet();' style=\"font-family: arial, helvatica, sans-serif;\"&gt;<br/>  &lt;b&gt;Plot/print style:&lt;/b&gt;<br/>  &lt;input type=\"radio\" onclick=\"rbCheck();\" name=\"rb\" id=\"rbDef\"/&gt;&lt;b&gt;Plot&lt;/b&gt;&amp;nbsp;<br/>  &lt;input type=\"radio\" onclick=\"rbCheck();\" name=\"rb\" id=\"rbAst\"/&gt;&lt;b&gt;Print *&lt;/b&gt;&amp;nbsp;<br/>  &lt;input type=\"radio\" onclick=\"rbCheck();\" name=\"rb\" id=\"rbNum\"/&gt;&lt;b&gt;Print numbers&lt;/b&gt;&amp;nbsp;<br/>  &lt;input type=\"button\" value=\"Plot it!\" onclick=\"pspUlam();\"&gt;<br/>  &lt;h3&gt;Ulam Spiral&lt;/h3&gt;<br/>  &lt;canvas id=\"cvsId\" width=\"300\" height=\"300\" style=\"border: 2px inset;\"&gt;&lt;/canvas&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 31, "block": "<pre class=\"text highlighted_source\">using Primes<br/>\u00a0<br/>function ulamspiral(ord::Int)<br/>    # Possible directions<br/>    dirs = [[0, 1], [-1, 0], [0, -1], [1, 0]]<br/>    # fdir = [\"\u2192\", \"\u2191\", \"\u2190\", \"\u2193\"] # for debug pourpose<br/>    cur = maxsteps = 1  # starting direction &amp; starting max steps<br/>    steps = n = 0       # starting steps     &amp; starting number in cell<br/>    pos = [ord \u00f7 2 + 1, isodd(ord)\u00a0? ord \u00f7 2 + 1\u00a0: ord \u00f7 2] # starting position<br/>    M = Matrix{Bool}(ord, ord) # result matrix<br/>    while n &lt; ord ^ 2  # main loop (stop when the matrix is filled)<br/>        n += 1<br/>        M[pos[1], pos[2]] = isprime(n)<br/>        steps += 1<br/>        # Debug print<br/>        # @printf(\"M[%i,\u00a0%i] =\u00a0%5s (%2i), step\u00a0%i/%i, nxt\u00a0%s\\n\", pos[1], pos[2], isprime(n), n, steps, maxsteps, fdir[cur])<br/>        pos  .+= dirs[cur] # increment position<br/>        if steps == maxsteps # if reached max number of steps in that direction...<br/>            steps = 0        # ...reset steps<br/>            if iseven(cur) maxsteps += 1 end # if the current direction is even increase the number of steps<br/>            cur  += 1        # change direction<br/>            if cur &gt; 4 cur -= 4 end # correct overflow<br/>        end<br/>    end<br/>    return M<br/>end<br/>\u00a0<br/>mprint(m::Matrix) = for i in 1:size(m, 1) println(join(el\u00a0? \" \u2219 \"\u00a0: \"   \" for el in m[i,\u00a0:]), '\\n') end<br/>\u00a0<br/>M = ulamspiral(9)<br/>mprint(M)</pre>"}, {"lang": "Kotlin", "loc": 48, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Ulam <span class=\"br0\">{</span><br/>    fun generate<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, i<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, c<span class=\"sy0\">:</span> Char <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Array<span class=\"br0\">(</span>n, <span class=\"br0\">{</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">RIGHT</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> n / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> y - <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> y <span class=\"co1\">// shift left for even n's</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i..<span class=\"me1\">n</span> <span class=\"sy0\">*</span> n - <span class=\"nu0\">1</span> + i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c.<span class=\"me1\">isDigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"%4d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"  $c \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" ---\"</span><br/>\u00a0<br/>            when <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Direction.<span class=\"me1\">RIGHT</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>y - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">none</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">UP</span><br/>                Direction.<span class=\"me1\">UP</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">none</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">LEFT</span><br/>                Direction.<span class=\"me1\">LEFT</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || s<span class=\"br0\">[</span>y + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">none</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">DOWN</span><br/>                Direction.<span class=\"me1\">DOWN</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x + <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">none</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">RIGHT</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            when <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Direction.<span class=\"me1\">RIGHT</span> -<span class=\"sy0\">&gt;</span> x++<br/>                Direction.<span class=\"me1\">UP</span> -<span class=\"sy0\">&gt;</span> y--<br/>                Direction.<span class=\"me1\">LEFT</span> -<span class=\"sy0\">&gt;</span> x--<br/>                Direction.<span class=\"me1\">DOWN</span> -<span class=\"sy0\">&gt;</span> y++<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in s<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span> + row.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> + <span class=\"st0\">']'</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Direction <span class=\"br0\">{</span> RIGHT, UP, LEFT, DOWN <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun isPrime<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        when <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> || a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">3</span>..<span class=\"me1\">max</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Ulam.<span class=\"me1\">generate</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, c <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>    Ulam.<span class=\"me1\">generate</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 32, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Ulam spiral (plotting/printing)</span><br/><span class=\"co1\">\\\\ 4/19/16 aev</span><br/>plotulamspir<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>pflg<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">++,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>xmx<span class=\"sy0\">,</span>ymx<span class=\"sy0\">,</span>cnt<span class=\"sy0\">,</span>dir<span class=\"sy0\">,</span>n2<span class=\"sy0\">=</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">,</span>pch<span class=\"sy0\">,</span>sz<span class=\"sy0\">=</span>#Str<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"sy0\">,</span>pch2<span class=\"sy0\">=</span>srepeat<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>sz<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">&lt;</span><span class=\"nu1\">0</span><span class=\"sy0\">||</span>pflg<span class=\"sy0\">&gt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>pflg<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Ulam spiral: \"</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"st0\">\"x\"</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" matrix, p-flag=\"</span><span class=\"sy0\">,</span>pflg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>x<span class=\"sy0\">=</span>y<span class=\"sy0\">=</span>n<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span> xmx<span class=\"sy0\">=</span>ymx<span class=\"sy0\">=</span>cnt<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span> dir<span class=\"sy0\">=</span><span class=\"st0\">\"R\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n2<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">isprime</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>insm<span class=\"br0\">(</span>M<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">break</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> M<span class=\"br0\">[</span>y<span class=\"sy0\">,</span>x<span class=\"br0\">]</span><span class=\"sy0\">=</span>i<span class=\"sy0\">,</span> M<span class=\"br0\">[</span>y<span class=\"sy0\">,</span>x<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>dir<span class=\"sy0\">==</span><span class=\"st0\">\"R\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>xmx<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">++;</span>xmx<span class=\"sy0\">--,</span> dir<span class=\"sy0\">=</span><span class=\"st0\">\"U\"</span><span class=\"sy0\">;</span>ymx<span class=\"sy0\">=</span>cnt<span class=\"sy0\">;</span>y<span class=\"sy0\">--;</span>ymx<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>dir<span class=\"sy0\">==</span><span class=\"st0\">\"U\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>ymx<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">--;</span>ymx<span class=\"sy0\">--,</span> dir<span class=\"sy0\">=</span><span class=\"st0\">\"L\"</span><span class=\"sy0\">;</span>cnt<span class=\"sy0\">++;</span>xmx<span class=\"sy0\">=</span>cnt<span class=\"sy0\">;</span>x<span class=\"sy0\">--;</span>xmx<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>dir<span class=\"sy0\">==</span><span class=\"st0\">\"L\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>xmx<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">--;</span>xmx<span class=\"sy0\">--,</span> dir<span class=\"sy0\">=</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">;</span>ymx<span class=\"sy0\">=</span>cnt<span class=\"sy0\">;</span>y<span class=\"sy0\">++;</span>ymx<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>dir<span class=\"sy0\">==</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>ymx<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">++;</span>ymx<span class=\"sy0\">--,</span> dir<span class=\"sy0\">=</span><span class=\"st0\">\"R\"</span><span class=\"sy0\">;</span>cnt<span class=\"sy0\">++;</span>xmx<span class=\"sy0\">=</span>cnt<span class=\"sy0\">;</span>x<span class=\"sy0\">++;</span>xmx<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend</span><br/><span class=\"co1\">\\\\Plot/Print according to the p-flag(0-real plot,1-\"*\",2-primes)</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> plotmat<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> <br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> pch<span class=\"sy0\">=</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> pch<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                       <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>pch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> <br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> pch<span class=\"sy0\">=</span>pch2<span class=\"sy0\">,</span> pch<span class=\"sy0\">=</span>spad<span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>sz<span class=\"sy0\">,,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                       <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>pch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Executing:</span><br/>plotulamspir<span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ (see output)</span><br/>plotulamspir<span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ (see output)</span><br/>plotulamspir<span class=\"br0\">(</span><span class=\"nu1\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ ULAMspiral1.png</span><br/>plotulamspir<span class=\"br0\">(</span><span class=\"nu1\">200</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ ULAMspiral2.png</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 188, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">Program</span> Ulam<span class=\"sy1\">;</span> <span class=\"kw1\">Uses</span> crt<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{Concocted by R.N.McLean (whom God preserve), ex Victoria university, NZ.}</span><br/><span class=\"co2\">{$B- evaluate boolean expressions only so far as necessary.}</span><br/><span class=\"co2\">{$R+ range checking...}</span><br/>\u00a0<br/> <span class=\"kw1\">FUNCTION</span> Trim<span class=\"br0\">(</span>S <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span> L1<span class=\"sy1\">,</span>L2 <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>  L1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>L1 &lt;<span class=\"sy3\">=</span> LENGTH<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>L1<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span> INC<span class=\"br0\">(</span>L1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  L2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LENGTH<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>S<span class=\"br0\">[</span>L2<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>L2 &gt; L1<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> DEC<span class=\"br0\">(</span>L2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> L2 &gt;<span class=\"sy3\">=</span> L1 <span class=\"kw1\">THEN</span> Trim <span class=\"sy1\">:</span><span class=\"sy3\">=</span> COPY<span class=\"br0\">(</span>S<span class=\"sy1\">,</span>L1<span class=\"sy1\">,</span>L2 <span class=\"sy3\">-</span> L1 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> Trim <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{Of Trim.}</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Ifmt<span class=\"br0\">(</span>Digits <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span>  S <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">255</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>  STR<span class=\"br0\">(</span>Digits<span class=\"sy1\">,</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Ifmt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Trim<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ Ifmt }</span><br/> <span class=\"kw1\">Function</span> min<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> i &lt;<span class=\"sy3\">=</span> j <span class=\"kw1\">then</span> min<span class=\"sy1\">:</span><span class=\"sy3\">=</span>i <span class=\"kw1\">else</span> min<span class=\"sy1\">:</span><span class=\"sy3\">=</span>j<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">Procedure</span> Croak<span class=\"br0\">(</span>Gasp<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>        <span class=\"coMULTI\">{A lethal word.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw3\">WriteLn</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Gasp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   HALT<span class=\"sy1\">;</span>                   <span class=\"coMULTI\">{This way to the egress...}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span> ScreenLine<span class=\"sy1\">,</span>ScreenColumn<span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Line and column position.}</span><br/><span class=\"coMULTI\">{=========================enough support===================}</span><br/> <span class=\"kw1\">const</span> Mstyle <span class=\"sy3\">=</span> <span class=\"nu0\">6</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Display different results.}</span><br/> <span class=\"kw1\">const</span> StyleName<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">Mstyle</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'IsPrime'</span><span class=\"sy1\">,</span><span class=\"st0\">'First Prime Factor Index'</span><span class=\"sy1\">,</span><br/>  <span class=\"st0\">'First Prime Factor'</span><span class=\"sy1\">,</span><span class=\"st0\">'Number of Prime Factors'</span><span class=\"sy1\">,</span><br/>  <span class=\"st0\">'Sum of Prime Factors'</span><span class=\"sy1\">,</span><span class=\"st0\">'Sum of Proper Factors'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">const</span> OrderLimit <span class=\"sy3\">=</span> <span class=\"nu0\">49</span><span class=\"sy1\">;</span> Limit2 <span class=\"sy3\">=</span> OrderLimit<span class=\"sy3\">*</span>OrderLimit<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{A 50-line screen has room for a heading.}</span><br/> <span class=\"kw1\">var</span> Tile<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">OrderLimit</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">OrderLimit</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> \t<span class=\"coMULTI\">{Alas, can't put [Order,Order], only constants.}</span><br/> <span class=\"kw1\">var</span> FirstPrimeFactorIndex<span class=\"sy1\">,</span>FirstPrimeFactor<span class=\"sy1\">,</span>NumPFactor<span class=\"sy1\">,</span>SumPFactor<span class=\"sy1\">,</span>SumFactor<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">Limit2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">const</span> enuffP <span class=\"sy3\">=</span> <span class=\"nu0\">17</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Given the value of Limit2.}</span><br/> <span class=\"kw1\">const</span> Prime<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">enuffP</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span><span class=\"nu0\">13</span><span class=\"sy1\">,</span><span class=\"nu0\">17</span><span class=\"sy1\">,</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span><span class=\"nu0\">23</span><span class=\"sy1\">,</span><span class=\"nu0\">29</span><span class=\"sy1\">,</span><span class=\"nu0\">31</span><span class=\"sy1\">,</span><span class=\"nu0\">37</span><span class=\"sy1\">,</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span><span class=\"nu0\">43</span><span class=\"sy1\">,</span><span class=\"nu0\">47</span><span class=\"sy1\">,</span><span class=\"nu0\">53</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">Procedure</span> Prepare<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Various arrays are to be filled for the different styles.}</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>p<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> limit2 <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Alas, can't just put A:=0;}</span><br/>    <span class=\"kw1\">begin</span>\t\t\t<span class=\"coMULTI\">{Nor clear A;}</span><br/>     FirstPrimeFactorIndex<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Prime[1] = 1, so this means no other divisor.}</span><br/>     FirstPrimeFactor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>     NumPFactor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>     SumPFactor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>     SumFactor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{1 is counted as a proper factor.}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   FirstPrimeFactorIndex<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Fiddle, as 1 is not a prime number.}</span><br/>   SumFactor<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{N is not a proper factor of N, so 1 has no proper factors...}</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> enuffP <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Prime[1] = 1, Prime[2] = 2, so start with i = 2.}</span><br/>    <span class=\"kw1\">begin</span><br/>     p<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Prime<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>     j<span class=\"sy1\">:</span><span class=\"sy3\">=</span>p <span class=\"sy3\">+</span> p<span class=\"sy1\">;</span><br/>     <span class=\"kw1\">while</span> j &lt;<span class=\"sy3\">=</span> Limit2 <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>       <span class=\"kw1\">if</span> FirstPrimeFactorIndex<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> FirstPrimeFactorIndex<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>i<span class=\"sy1\">;</span><br/>       <span class=\"kw1\">if</span> FirstPrimeFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> FirstPrimeFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>p<span class=\"sy1\">;</span><br/>       SumPFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>SumPFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">+</span> p<span class=\"sy1\">;</span><br/>       inc<span class=\"br0\">(</span>NumPFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>       j<span class=\"sy1\">:</span><span class=\"sy3\">=</span>j <span class=\"sy3\">+</span> p<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> Limit2 <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Step through all possible proper factors.}</span><br/>    <span class=\"kw1\">begin</span>\t\t\t<span class=\"coMULTI\">{N is not a proper factor of N, so start at 2N,}</span><br/>     j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>i<span class=\"sy1\">;</span>\t \t\t<span class=\"coMULTI\">{for which N is a proper factor of 2N.}</span><br/>     <span class=\"kw1\">while</span> j &lt;<span class=\"sy3\">=</span> Limit2 <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Sigh. for j:=2*i:Limit2:i do ... Next i;}</span><br/>      <span class=\"kw1\">begin</span><br/>       SumFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>SumFactor<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">+</span> i<span class=\"sy1\">;</span><br/>       j<span class=\"sy1\">:</span><span class=\"sy3\">=</span>j <span class=\"sy3\">+</span> i<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Enough preparation.}</span><br/>\u00a0<br/> <span class=\"kw1\">const</span> enuffC <span class=\"sy3\">=</span> <span class=\"nu0\">11</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Perhaps the colours will highlight interesting patterns.}</span><br/> <span class=\"kw1\">const</span> colour<span class=\"sy1\">:</span><span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">enuffC</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span>black<span class=\"sy1\">,</span>white<span class=\"sy1\">,</span>LightRed<span class=\"sy1\">,</span><br/>  LightMagenta<span class=\"sy1\">,</span>Yellow<span class=\"sy1\">,</span>LightGreen<span class=\"sy1\">,</span>LightCyan<span class=\"sy1\">,</span>LightBlue<span class=\"sy1\">,</span>LightGray<span class=\"sy1\">,</span><br/>  Red<span class=\"sy1\">,</span>Green<span class=\"sy1\">,</span>DarkGray<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Colours on the screen don't always match their name!}</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> UlamSpiral<span class=\"br0\">(</span>Order<span class=\"sy1\">,</span>Start<span class=\"sy1\">,</span>Style<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Generate the numbers, then display.}</span><br/>  <span class=\"kw1\">Function</span> Encode<span class=\"br0\">(</span>N<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Acording to Style, choose a result to show.}</span><br/>   <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">if</span> N &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><br/>     <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">case</span> style <span class=\"kw1\">of</span><br/>     <span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"kw1\">if</span> FirstPrimeFactorIndex<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span> Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{1 = Prime.}</span><br/>     <span class=\"nu0\">2</span><span class=\"sy1\">:</span>Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span>FirstPrimeFactorIndex<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>     <span class=\"nu0\">3</span><span class=\"sy1\">:</span>Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span>FirstPrimeFactor<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>     <span class=\"nu0\">4</span><span class=\"sy1\">:</span>Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span>NumPFactor<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>     <span class=\"nu0\">5</span><span class=\"sy1\">:</span>Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span>SumPFactor<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>     <span class=\"nu0\">6</span><span class=\"sy1\">:</span>Encode<span class=\"sy1\">:</span><span class=\"sy3\">=</span>SumFactor<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{So much for encoding.}</span><br/>  <span class=\"kw1\">var</span> Place<span class=\"sy1\">,</span>Way<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Complex numbers.}</span><br/>  <span class=\"kw1\">var</span> m<span class=\"sy1\">,</span>\t<span class=\"coMULTI\">{Middle.}</span><br/>      N<span class=\"sy1\">,</span>\t<span class=\"coMULTI\">{Counter.}</span><br/>      length<span class=\"sy1\">,</span>\t<span class=\"coMULTI\">{length of a side.}</span><br/>      lunge<span class=\"sy1\">,</span>\t<span class=\"coMULTI\">{two lunges for each length.}</span><br/>      step\t<span class=\"coMULTI\">{steps to make up a lunge of some length.}</span><br/>      <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Steppers.}</span><br/>  <span class=\"kw1\">var</span> code<span class=\"sy1\">,</span>it<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Mess with the results.}</span><br/>  <span class=\"kw1\">label</span> XX<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Escape the second lunge.}</span><br/>  <span class=\"kw1\">var</span> OutF<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Utter drivel. It is a disc file.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Ulam Spiral, order '</span><span class=\"sy1\">,</span>Order<span class=\"sy1\">,</span><span class=\"st0\">', start '</span><span class=\"sy1\">,</span>Start<span class=\"sy1\">,</span><span class=\"st0\">', style '</span><span class=\"sy1\">,</span>style<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Start the heading.}</span><br/>   <span class=\"kw1\">if</span> style &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Must be a positive style'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> style &gt; Mstyle <span class=\"kw1\">then</span> croak<span class=\"br0\">(</span><span class=\"st0\">'Last known style is '</span><span class=\"sy3\">+</span>ifmt<span class=\"br0\">(</span>Mstyle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> Order &gt; OrderLimit <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Array OrderLimit is order '</span><span class=\"sy3\">+</span>IFmt<span class=\"br0\">(</span>OrderLimit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> Order <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> &lt;&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'The order must be an odd number!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">': '</span><span class=\"sy1\">,</span>StyleName<span class=\"br0\">[</span>Style<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Finish the heading. The pattern starts with line two.}</span><br/>   Assign<span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"st0\">'Ulam.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> Rewrite<span class=\"br0\">(</span>OutF<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"st0\">'Ulam spiral: the codes for '</span><span class=\"sy1\">,</span>StyleName<span class=\"br0\">[</span>style<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   m<span class=\"sy1\">:</span><span class=\"sy3\">=</span>order <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{This is why Order must be odd.}</span><br/>   Place<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>m<span class=\"sy1\">;</span> Place<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>m<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Start at the middle.}</span><br/>   way<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> way<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Initial direction is along the x-axis.}</span><br/>   n<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Start<span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> length<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Order <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Advance through the lengths.}</span><br/>    <span class=\"kw1\">for</span> lunge<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span>\t\t<span class=\"coMULTI\">{Two lunges for each length.}</span><br/>     <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> step<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> length <span class=\"kw1\">do</span>\t\t\t<span class=\"coMULTI\">{Make the steps.}</span><br/>       <span class=\"kw1\">begin</span><br/>        Tile<span class=\"br0\">[</span>Place<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>Place<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>N<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span> Place<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>Place<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">+</span> Way<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>   <span class=\"coMULTI\">{Place:=Place + Way;}</span><br/>        N<span class=\"sy1\">:</span><span class=\"sy3\">=</span>N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>       <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> N &gt;<span class=\"sy3\">=</span> Order<span class=\"sy3\">*</span>Order <span class=\"kw1\">then</span> <span class=\"kw1\">goto</span> XX<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Each corner piece is part of two lunges.}</span><br/>      i<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Way<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span> Way<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=-</span>Way<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">;</span> Way<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>i<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Way:=Way*(0,1) in complex numbers: (x,y)*(0,1) = (-y,x).}</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>XX<span class=\"sy1\">:</span><span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span>order <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span>     <span class=\"coMULTI\">{Output: Lines count downwards, y runs upwards.}</span><br/>    <span class=\"kw1\">begin</span>\t\t\t<span class=\"coMULTI\">{The first line is the topmost y.}</span><br/>     <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> order <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{(line,column) = (y,x).}</span><br/>      <span class=\"kw1\">begin</span>\t\t\t\t<span class=\"coMULTI\">{Work along the line.}</span><br/>       it<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Tile<span class=\"br0\">[</span>j<span class=\"sy1\">,</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Grab the number.}</span><br/>       code<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Encode<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Presentation scheme.}</span><br/>       <span class=\"kw3\">Write</span><span class=\"br0\">(</span>OutF<span class=\"sy1\">,</span><span class=\"st0\">'('</span><span class=\"sy1\">,</span>it<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">':'</span><span class=\"sy1\">,</span>code<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Debugging...}</span><br/>       <span class=\"kw1\">if</span> FirstPrimeFactorIndex<span class=\"br0\">[</span>it<span class=\"br0\">]</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> TextBackGround<span class=\"br0\">(</span>Black<span class=\"br0\">)</span>\t<span class=\"coMULTI\">{Not a prime.}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> it <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> TextBackGround<span class=\"br0\">(</span>Black<span class=\"br0\">)</span>\t<span class=\"coMULTI\">{Darkness for one, also.}</span><br/>         <span class=\"kw1\">else</span> TextBackGround<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{A prime number!}</span><br/>       TextColor<span class=\"br0\">(</span>Colour<span class=\"br0\">[</span>min<span class=\"br0\">(</span>code<span class=\"sy1\">,</span>enuffC<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A lot of fuss for this!}</span><br/>       <span class=\"coMULTI\">{Write(code:2);}</span><br/>       <span class=\"coMULTI\">{Write(it:3);}</span><br/>       <span class=\"kw1\">if</span> it &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Thus mark the centre.}</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t\t\t<span class=\"coMULTI\">{Next position along the line.}</span><br/>     <span class=\"kw1\">if</span> i &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw3\">WriteLn</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Ending the last line would scroll the heading up.}</span><br/>     <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>OutF<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{But this is good for the text file.}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{On to the next line.}</span><br/>    Close<span class=\"br0\">(</span>OutF<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Finished with the trace.}</span><br/><span class=\"coMULTI\">{Some revelations to help in choosing a colour sequence.}</span><br/>    ScreenLine<span class=\"sy1\">:</span><span class=\"sy3\">=</span>WhereY<span class=\"sy1\">;</span> ScreenColumn<span class=\"sy1\">:</span><span class=\"sy3\">=</span>WhereX<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Gibberish to find the location.}</span><br/>    <span class=\"kw1\">if</span> Style &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span>\t<span class=\"coMULTI\">{Only the fancier styles go beyond 0 and 1.}</span><br/>     <span class=\"kw1\">begin</span>\t\t\t<span class=\"coMULTI\">{So explain only for them.}</span><br/>      GoToXY<span class=\"br0\">(</span>ScreenColumn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>ScreenLine <span class=\"sy3\">-</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Unused space is to the right.}</span><br/>      TextColor<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Colour sequence'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Given 80-column displays.}</span><br/>      GoToXY<span class=\"br0\">(</span>ScreenColumn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>ScreenLine <span class=\"sy3\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{And no more than 50 lines.}</span><br/>      <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> enuffC <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span> TextColor<span class=\"br0\">(</span>Colour<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{My sequence.}</span><br/>      GoToXY<span class=\"br0\">(</span>ScreenColumn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>ScreenLine <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      TextColor<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'From options'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      GoToXY<span class=\"br0\">(</span>ScreenColumn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>ScreenLine <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span> TextColor<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{The options.}</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span>   <span class=\"coMULTI\">{of UlamSpiral.}</span><br/>\u00a0<br/> <span class=\"kw1\">var</span> start<span class=\"sy1\">,</span>wot<span class=\"sy1\">,</span>order<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A selector.}</span><br/> <span class=\"kw1\">BEGIN</span>\t<span class=\"coMULTI\">{After all that.}</span><br/>  TextMode<span class=\"br0\">(</span>Lo<span class=\"br0\">(</span>LastMode<span class=\"br0\">)</span> <span class=\"sy3\">+</span> Font8x8<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Gibberish sets 43 lines on EGA and 50 on VGA.}</span><br/>  ClrScr<span class=\"sy1\">;</span> TextColor<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{This also gives character blocks that are almost square...}</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'Presents consecutive integers in a spiral, as per Stanislaw Ulam.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'Starting with 1, runs up to Order*Order.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'What value for Order? (Limit '</span> <span class=\"sy3\">+</span> Ifmt<span class=\"br0\">(</span>OrderLimit<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">'): '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>Order<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{ReadKey needs no \"enter\", but requires decoding.}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>order &lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>order &gt; OrderLimit<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Out of range!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Oh dear.}</span><br/>  Prepare<span class=\"sy1\">;</span><br/>  wot<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{The original task.}</span><br/>  <span class=\"kw1\">Repeat</span>\t\t<span class=\"coMULTI\">{Until bored?}</span><br/>   ClrScr<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Scrub any previous stuff.}</span><br/>   UlamSpiral<span class=\"br0\">(</span>Order<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>wot<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{The deed!}</span><br/>   GoToXY<span class=\"br0\">(</span>ScreenColumn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>ScreenLine<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Note that the last WriteLn was skipped.}</span><br/>   TextColor<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Enter 0, or 1 to '</span><span class=\"sy3\">+</span>Ifmt<span class=\"br0\">(</span>Mstyle<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">': '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Wot now?}</span><br/>   <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>wot<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t\t\t\t<span class=\"coMULTI\">{Receive.}</span><br/>  <span class=\"kw1\">Until</span> <span class=\"br0\">(</span>wot &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>wot &gt; Mstyle<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Alas, \"Enter\" must be pressed.}</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 29, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/is_prime/</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Imager<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">||</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ulam.png\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cell <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$y</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$n</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$x</span> <span class=\"sy0\">-=</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span>  <span class=\"sy0\">?</span>  <span class=\"re0\">$l</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span>  <span class=\"sy0\">:</span> <span class=\"re0\">$l</span><span class=\"sy0\">-</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$d</span> <span class=\"sy0\">+</span> <span class=\"re0\">$start</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$black</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">::</span><span class=\"me2\">Color</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'#000000'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$white</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">::</span><span class=\"me2\">Color</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'#FFFFFF'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> ysize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> channels <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">box</span><span class=\"br0\">(</span>filled<span class=\"sy0\">=&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> color<span class=\"sy0\">=&gt;</span><span class=\"re0\">$white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> cell<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> color <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$black</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/write.html\"><span class=\"kw3\">write</span></a><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$file</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Cannot write $file: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">errstr</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 51, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span><span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">160</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">%world</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$loc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$side</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"sy0\">++</span><span class=\"re0\">$side</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$max</span> <span class=\"br0\">{</span><br/>\tstep <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$side</span><span class=\"sy0\">;</span><br/>\tturn<span class=\"sy0\">-</span>left<span class=\"sy0\">;</span><br/>\tstep <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$side</span><span class=\"sy0\">;</span><br/>\tturn<span class=\"sy0\">-</span>left<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    braille<span class=\"sy0\">-</span>graphics <span class=\"re0\">%world</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> step <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$loc</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$dir</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">%world</span><span class=\"br0\">{</span><span class=\"re0\">$loc</span><span class=\"sy0\">.</span><span class=\"kw3\">im</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$loc</span><span class=\"sy0\">.</span><span class=\"kw3\">re</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> turn<span class=\"sy0\">-</span>left  <span class=\"br0\">{</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"kw3\">i</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> turn<span class=\"sy0\">-</span>right <span class=\"br0\">{</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">*=</span> <span class=\"kw3\">i</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> braille<span class=\"sy0\">-</span>graphics <span class=\"br0\">(</span><span class=\"re0\">%a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ylo</span><span class=\"sy0\">,</span> <span class=\"re0\">$yhi</span><span class=\"sy0\">,</span> <span class=\"re0\">$xlo</span><span class=\"sy0\">,</span> <span class=\"re0\">$xhi</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">%a</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$ylo</span> <span class=\"kw3\">min</span><span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span> <span class=\"re0\">$yhi</span> <span class=\"kw3\">max</span><span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$xlo</span> <span class=\"kw3\">min</span><span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span> <span class=\"re0\">$xhi</span> <span class=\"kw3\">max</span><span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$ylo</span><span class=\"sy0\">,</span> <span class=\"re0\">$ylo</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">...^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$yhi</span> <span class=\"sy0\">-&gt;</span> \\y <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">$xlo</span><span class=\"sy0\">,</span> <span class=\"re0\">$xlo</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">...^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$xhi</span> <span class=\"sy0\">-&gt;</span> \\<span class=\"kw1\">x</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$cell</span> <span class=\"sy0\">=</span> 0x2800<span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>   <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span>   <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span>   <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">8</span>   <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">16</span>  <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">32</span>  <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">64</span>  <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$cell</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">128</span> <span class=\"kw1\">if</span> <span class=\"re0\">%a</span><span class=\"br0\">{</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw3\">print</span> chr<span class=\"br0\">(</span><span class=\"re0\">$cell</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 46, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de ceil (A)<br/>   (/ (+ A 1) 2) )<br/>\u00a0<br/>(de prime? (N)<br/>   (or<br/>      (= N 2)<br/>      (and<br/>         (&gt; N 1)<br/>         (bit? 1 N)<br/>         (let S (sqrt N)<br/>            (for (D 3  T  (+ D 2))<br/>               (T (&gt; D S) T)<br/>               (T (=0 (% N D)) NIL) ) ) ) ) )<br/>\u00a0<br/>(de ulam (N)<br/>   (let<br/>      (G (grid N N)<br/>         D '(north west south east .)<br/>         M (ceil N) )<br/>      (setq This<br/>         (intern<br/>            (pack<br/>               (char<br/>                  (+ 96 (if (bit? 1 N) M (inc M))) )<br/>               M ) ) )<br/>      (=: V '_)<br/>      (with ((car D) This)<br/>         (for (X 2 (&gt;= (* N N) X) (inc X))<br/>            (=: V (if (prime? X) '. '_))<br/>            (setq This<br/>               (or<br/>                  (with ((cadr D) This)<br/>                     (unless (: V) (pop 'D) This) )<br/>                  ((pop D) This) ) ) ) )<br/>      G ) )<br/>\u00a0<br/>(mapc<br/>   '((L)<br/>      (for This L<br/>         (prin (align 3 (: V))) )<br/>      (prinl) )<br/>   (ulam 9) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 42, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> New<span class=\"sy0\">-</span>UlamSpiral <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Generate list of primes</span><br/>    <span class=\"re0\">$Primes</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">For</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>; <span class=\"re0\">$X</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$N</span><span class=\"sy0\">*</span><span class=\"re0\">$N</span>; <span class=\"re0\">$X</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"kw4\">-not</span> <span class=\"br0\">(</span> <span class=\"re0\">$Primes</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> <span class=\"br0\">{</span> <span class=\"re0\">$X</span> <span class=\"sy0\">%</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-First</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Primes</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$X</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Initialize variables</span><br/>    <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$N</span> <span class=\"sy0\">*</span> <span class=\"re0\">$N</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$Sign</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">#  Intialize array</span><br/>    <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"st0\">'boolean[,]'</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><br/>\u00a0<br/>    <span class=\"co1\">#  Set top row</span><br/>    <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$Primes</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  For each remaining half spiral...</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$M</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  Set the vertical quarter spiral</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$M</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$X</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$Primes</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">#  Curve the spiral</span><br/>        <span class=\"re0\">$Sign</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$Sign</span><br/>\u00a0<br/>        <span class=\"co1\">#  Set the horizontal quarter spiral</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$M</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$Primes</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Convert the array of booleans to text output of dots and spaces</span><br/>    <span class=\"re0\">$Spiral</span> <span class=\"sy0\">=</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span> <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$X</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span> <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Spiral</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>New<span class=\"sy0\">-</span>UlamSpiral <span class=\"nu0\">100</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 36, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># coding=UTF-8</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<span class=\"sy0\">,</span> division<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/>\u00a0<br/><span class=\"kw1\">def</span> cell<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    d<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y - n//<span class=\"nu0\">2</span><span class=\"sy0\">,</span> x - <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>//<span class=\"nu0\">2</span><br/>    l <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>*<span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>l*<span class=\"nu0\">3</span> + x + y<span class=\"br0\">)</span> <span class=\"kw1\">if</span> y <span class=\"sy0\">&gt;=</span> x <span class=\"kw1\">else</span> <span class=\"br0\">(</span>l - x - y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>l - <span class=\"nu0\">1</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span> + d + start - <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">def</span> show_spiral<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw3\">symbol</span><span class=\"sy0\">=</span><span class=\"st0\">'# '</span><span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> space<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:<br/>    top <span class=\"sy0\">=</span> start + n*n + <span class=\"nu0\">1</span><br/>    is_prime <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span><span class=\"kw2\">True</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span><span class=\"kw2\">False</span><span class=\"br0\">]</span>*<span class=\"br0\">(</span>top//<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> + <span class=\"kw2\">int</span><span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>top<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> is_prime<span class=\"br0\">[</span>x<span class=\"br0\">]</span>: <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>x*x<span class=\"sy0\">,</span> top<span class=\"sy0\">,</span> x*<span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>            is_prime<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>    cell_str <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> x: f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_prime<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">else</span> space<br/>    f <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> _: <span class=\"kw3\">symbol</span> <span class=\"co1\"># how to show prime cells</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> space <span class=\"sy0\">==</span> <span class=\"kw2\">None</span>: space <span class=\"sy0\">=</span> <span class=\"st0\">' '</span>*<span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">symbol</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">symbol</span><span class=\"br0\">)</span>: <span class=\"co1\"># print numbers instead</span><br/>        max_str <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n*n + start - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> space <span class=\"sy0\">==</span> <span class=\"kw2\">None</span>: space <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span>*max_str + <span class=\"st0\">' '</span><br/>        f <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> x: <span class=\"br0\">(</span><span class=\"st0\">'%'</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span>max_str<span class=\"br0\">)</span> + <span class=\"st0\">'d '</span><span class=\"br0\">)</span>%x<br/>\u00a0<br/>    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>cell_str<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> <span class=\"br0\">[</span>cell<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> start<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>show_spiral<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw3\">symbol</span><span class=\"sy0\">=</span>u<span class=\"st0\">'\u265e'</span><span class=\"sy0\">,</span> space<span class=\"sy0\">=</span>u<span class=\"st0\">'\u2658'</span><span class=\"br0\">)</span> <span class=\"co1\"># black are the primes</span><br/>show_spiral<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"kw3\">symbol</span><span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> space<span class=\"sy0\">=</span><span class=\"st0\">' - '</span><span class=\"br0\">)</span><br/><span class=\"co1\"># for filling giant terminals</span><br/><span class=\"co1\">#show_spiral(1001, symbol='*', start=42)</span></pre>"}, {"lang": "R", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## Plotting Ulam spiral (for primes) 2/12/17 aev<br/>## plotulamspirR(n, clr, fn, ttl, psz=600), where: n - initial size;<br/>## clr - color; fn - file name; ttl - plot title; psz - picture size.<br/>## <br/>require(numbers);<br/>plotulamspirR &lt;- function(n, clr, fn, ttl, psz=600) {<br/>  cat(\" *** START:\", date(), \"n=\",n, \"clr=\",clr, \"psz=\", psz, \"\\n\");<br/>  if (n%%2==0) {n=n+1}; n2=n*n;<br/>  x=y=floor(n/2); xmx=ymx=cnt=1; dir=\"R\";<br/>  ttl= paste(c(ttl, n,\"x\",n,\" matrix.\"), sep=\"\", collapse=\"\");<br/>  cat(\" ***\", ttl, \"\\n\");<br/>  M &lt;- matrix(c(0), ncol=n, nrow=n, byrow=TRUE);<br/>  for (i in 1:n2) {<br/>    if(isPrime(i)) {M[x,y]=1};<br/>    if(dir==\"R\") {if(xmx&gt;0) {x=x+1;xmx=xmx-1}<br/>                  else {dir=\"U\";ymx=cnt;y=y-1;ymx=ymx-1}; next}; <br/>    if(dir==\"U\") {if(ymx&gt;0) {y=y-1;ymx=ymx-1}<br/>                  else {dir=\"L\";cnt=cnt+1;xmx=cnt;x=x-1;xmx=xmx-1}; next}; <br/>    if(dir==\"L\") {if(xmx&gt;0) {x=x-1;xmx=xmx-1} <br/>                  else {dir=\"D\";ymx=cnt;y=y+1;ymx=ymx-1}; next}; <br/>    if(dir==\"D\") {if(ymx&gt;0) {y=y+1;ymx=ymx-1} <br/>                  else {dir=\"R\";cnt=cnt+1;xmx=cnt;x=x+1;xmx=xmx-1}; next}; <br/>  };<br/>  plotmat(M, fn, clr, ttl,,psz);<br/>  cat(\" *** END:\",date(),\"\\n\");<br/>}<br/>\u00a0<br/>## Executing:<br/>plotulamspirR(100, \"red\", \"UlamSpiralR1\", \"Ulam Spiral: \");<br/>plotulamspirR(200, \"red\", \"UlamSpiralR2\", \"Ulam Spiral: \",1240);<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 36, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require (only-in math/number-theory prime?))<br/>\u00a0<br/>(define ((cell-fn n (start 1)) x y)<br/>  (let* ((y (- y (quotient n 2)))<br/>         (x (- x (quotient (sub1 n) 2)))<br/>         (l (* 2 (if (&gt; (abs x) (abs y)) (abs x) (abs y))))<br/>         (d (if (&gt;= y x) (+ (* l 3) x y) (- l x y))))<br/>    (+ (sqr (- l 1)) d start -1)))<br/>\u00a0<br/>(define (show-spiral n<br/>                     #:symbol (smb \"# \")<br/>                     #:start (start 1)<br/>                     #:space (space (and smb (make-string (string-length smb) #\\space))))<br/>  (define top (+ start (* n n) 1))<br/>  (define cell (cell-fn n start))<br/>  (define print-cell<br/>    (if smb<br/>        (\u03bb (i p?) (display (if p? smb space)))<br/>        (let* ((max-len (string-length (~a (+ (sqr n) start -1))))<br/>               (space (or space (make-string (string-length (~a (+ (sqr n) start -1))) #\\_))))<br/>          (\u03bb (i p?)<br/>            (display (if p? (~a #:width max-len i #:align 'right) space))<br/>            (display #\\space)))))<br/>\u00a0<br/>  (for* ((y (in-range 0 n)) #:when (unless (= y 0) (newline)) (x (in-range 0 n)))<br/>    (define c (cell x y))<br/>    (define p? (prime? c))<br/>    (print-cell c p?))<br/>  (newline))<br/>\u00a0<br/>(show-spiral 9 #:symbol #f)<br/>(show-spiral 10 #:symbol \"\u265e\" #:space \"\u2658\")\u00a0; black are the primes<br/>(show-spiral 50 #:symbol \"*\" #:start 42)<br/>; for filling giant terminals<br/>; (show-spiral 1001 #:symbol \"*\" #:start 42)</pre>"}, {"lang": "REXX", "loc": 49, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows counter\u2500clockwise  Ulam spiral  of primes shown in a square matrix.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> size init char <span class=\"sy0\">.</span>                       <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> size==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> size==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> size=<span class=\"nu0\">79</span>            <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> init==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> init==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> init= <span class=\"nu0\">1</span>            <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> char==<span class=\"st0\">''</span>              <span class=\"kw3\">then</span> char=<span class=\"st0\">\"\u2588\"</span>           <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>tot=size<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                                      <span class=\"coMULTI\">/*the total number of numbers in spiral*/</span><br/>                                                 <span class=\"coMULTI\">/*define the upper/bottom right corners*/</span><br/>uR<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>; bR<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span> od=<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> tot;  _=od<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+<span class=\"nu0\">1</span>;  uR<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>;  _=_+od;   bR<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*od*/</span><br/>                                                 <span class=\"coMULTI\">/*define the bottom/upper left corners.*/</span><br/>bL<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>; uL<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span> ev=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> tot;  _=ev<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+<span class=\"nu0\">1</span>;  bL<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>;  _=_+ev;   uL<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*ev*/</span><br/>\u00a0<br/>app=<span class=\"nu0\">1</span>;    bigP=<span class=\"nu0\">0</span>;    #p=<span class=\"nu0\">0</span>;    inc=<span class=\"nu0\">0</span>;     minR=<span class=\"nu0\">1</span>;    maxR=<span class=\"nu0\">1</span>;    r=<span class=\"nu0\">1</span>;    $=<span class=\"nu0\">0</span>;    $<span class=\"sy0\">.</span>=;   \u00a0!<span class=\"sy0\">.</span>=<br/>                     <span class=\"coMULTI\">/*\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 construct the spiral #s.*/</span><br/>  <span class=\"kw1\">do</span> i=init  <span class=\"kw2\">for</span> tot;       r=r+inc;     minR=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minR,r<span class=\"br0\">)</span>;     maxR=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxR,r<span class=\"br0\">)</span><br/>  x=isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> x  <span class=\"kw3\">then</span> bigP=<span class=\"kw6\">max</span><span class=\"br0\">(</span>bigP,i<span class=\"br0\">)</span>;  #p=#p+x                  <span class=\"coMULTI\">/*bigP, #primes.*/</span><br/>  <span class=\"kw1\">if</span> app  <span class=\"kw3\">then</span> $<span class=\"sy0\">.</span>r=$<span class=\"sy0\">.</span>r <span class=\"sy0\">||</span>  x                                            <span class=\"coMULTI\">/*append  token.*/</span><br/>          <span class=\"kw3\">else</span> $<span class=\"sy0\">.</span>r= x  <span class=\"sy0\">||</span> $<span class=\"sy0\">.</span>r                                           <span class=\"coMULTI\">/*prepend token.*/</span><br/>  <span class=\"kw1\">if</span> uR<span class=\"sy0\">.</span>i  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  app=<span class=\"nu0\">1</span>;  inc=+<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*i*/</span>;    <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*advance  \u2193    */</span><br/>  <span class=\"kw1\">if</span> bL<span class=\"sy0\">.</span>i  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  app=<span class=\"nu0\">0</span>;  inc=-<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*i*/</span>;    <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*   \"     \u2191    */</span><br/>  <span class=\"kw1\">if</span> bR<span class=\"sy0\">.</span>i  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  app=<span class=\"nu0\">0</span>;  inc= <span class=\"nu0\">0</span>;  <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*i*/</span>;    <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*   \"     \u25ba    */</span><br/>  <span class=\"kw1\">if</span> uL<span class=\"sy0\">.</span>i  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  app=<span class=\"nu0\">1</span>;  inc= <span class=\"nu0\">0</span>;  <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*i*/</span>;    <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*   \"     \u25c4    */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>                                                           <span class=\"coMULTI\">/* [\u2193] pack two */</span><br/>                                                                        <span class=\"coMULTI\">/*lines \u2500\u2500\u25ba one.*/</span><br/>  <span class=\"kw1\">do</span> j=minR  <span class=\"kw2\">to</span> maxR  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;    jp=j+<span class=\"nu0\">1</span>;    $=$+<span class=\"nu0\">1</span>                         <span class=\"coMULTI\">/*fold two lines*/</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>;  top=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>j,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*the  1st line.*/</span><br/>                               bot=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>jp,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*the  2nd line.*/</span><br/>    <span class=\"kw1\">if</span> top  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span>  bot  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>$=\u00a0!<span class=\"sy0\">.</span>$<span class=\"st0\">'\u2588'</span>                              <span class=\"coMULTI\">/*has top &amp; bot.*/</span><br/>                          <span class=\"kw3\">else</span>\u00a0!<span class=\"sy0\">.</span>$=\u00a0!<span class=\"sy0\">.</span>$<span class=\"st0\">'\u2580'</span>                              <span class=\"coMULTI\">/*has top,\u00ac bot.*/</span><br/>            <span class=\"kw3\">else</span> <span class=\"kw1\">if</span>  bot  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>$=\u00a0!<span class=\"sy0\">.</span>$<span class=\"st0\">'\u2584'</span>                              <span class=\"coMULTI\">/*\u00ac top, has bot*/</span><br/>                          <span class=\"kw3\">else</span>\u00a0!<span class=\"sy0\">.</span>$=\u00a0!<span class=\"sy0\">.</span>$<span class=\"st0\">' '</span>                              <span class=\"coMULTI\">/*\u00ac top,   \u00ac bot*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span>                                  <span class=\"coMULTI\">/* [\u2193]  show the  prime  spiral matrix.*/</span><br/>                                    <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> $;   <span class=\"kw1\">say</span>\u00a0!<span class=\"sy0\">.</span>m;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span><br/><span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> init <span class=\"st0\">'is the starting point,'</span>  ,<br/>          tot  <span class=\"st0\">'numbers used,'</span>   #p   <span class=\"st0\">\"primes found, largest prime:\"</span>   bigP<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isPrime: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>x,<span class=\"st0\">'2 3 5 7 11 13 17 19'</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">17</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> <span class=\"nu0\">2</span>    ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> <span class=\"nu0\">3</span>    ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>         <span class=\"coMULTI\">/*get the last digit*/</span>    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> x  <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  _;  <span class=\"kw1\">if</span>         _==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> <span class=\"nu0\">7</span>    ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"nu0\">11</span>    ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"nu0\">13</span>    ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>                  <span class=\"kw1\">do</span> j=<span class=\"nu0\">17</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">6</span>  <span class=\"kw2\">until</span>  j<span class=\"sy0\">*</span>j <span class=\"sy0\">&gt;</span> x;            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>j     ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"br0\">(</span>j+<span class=\"nu0\">2</span><span class=\"br0\">)</span> ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Ring", "loc": 103, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Ulam spiral (for primes)<br/>\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>\u00a0<br/>paint = null<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Ulam spiral\")<br/>                  setgeometry(100,100,560,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,800,600)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(220,500,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>        usn = 81<br/>        ulamspiral(usn)<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>        return<br/>\u00a0<br/>func ulamspiral(nr)<br/>        button = list(nr)<br/>        win1{<br/>                sizenew = sqrt(nr)<br/>                 for n = 1 to nr<br/>                     col = n%9<br/>                     if col = 0 col = 9 ok<br/>                     row = ceil(n/9)<br/>\u00a0<br/>                     button[n] = new qpushbutton(win1)<br/>                     {<br/>                                        setgeometry(60+col*40,60+row*40,40,40)<br/>                                        setclickevent(\"movetile(\" + string(n) +\")\")   <br/>                                        show() <br/>                     } <br/>                next<br/>        n = 9<br/>        result = newlist(n,n)<br/>        k = 1 <br/>        top = 1<br/>        bottom = n<br/>        left = 1<br/>        right = n<br/>        while (k&lt;=n*n)<br/>                 for i=left to right<br/>                      result[top][i]=k<br/>                      k = k + 1<br/>                 next    <br/>                 top = top + 1 <br/>                 for i=top to bottom<br/>                     result[i][right]=k<br/>                     k = k + 1<br/>                 next<br/>                 right = right - 1 <br/>                 for i=right to left step -1<br/>                      result[bottom][i]=k<br/>                      k = k + 1<br/>                 next<br/>                 bottom = bottom - 1 <br/>                 for i=bottom to top step -1<br/>                      result[i][left] = k<br/>                      k = k + 1<br/>                 next<br/>                 left = left + 1<br/>        end<br/>        for m = 1 to n<br/>             for p = 1 to n  <br/>                  pos = (m-1)*n + p<br/>                  if isprime(result[m][p])<br/>                     button[pos] {settext(string(result[m][p]))}<br/>                  ok<br/>             next<br/>         next<br/>         }<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 28, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> cell<span class=\"br0\">(</span>n, x, y, start=<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  y, x = y <span class=\"sy0\">-</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, x <span class=\"sy0\">-</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>  l = <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>x.<span class=\"me1\">abs</span>, y.<span class=\"me1\">abs</span><span class=\"br0\">]</span>.<span class=\"me1\">max</span><br/>  d = y <span class=\"sy0\">&gt;</span>= x\u00a0? l<span class=\"sy0\">*</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> y\u00a0: l <span class=\"sy0\">-</span> x <span class=\"sy0\">-</span> y<br/>  <span class=\"br0\">(</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> d <span class=\"sy0\">+</span> start <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> show_spiral<span class=\"br0\">(</span>n, symbol=<span class=\"kw2\">nil</span>, start=<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>N\u00a0: #{n}\"</span><br/>  <span class=\"kw3\">format</span> = <span class=\"st0\">\"%#{(start + n*n - 1).to_s.size}s \"</span><br/>  n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>    n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>      i = cell<span class=\"br0\">(</span>n,x,y,start<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> symbol<br/>        <span class=\"kw3\">print</span> i.<span class=\"me1\">prime</span>?\u00a0? symbol<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0: symbol<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">print</span> <span class=\"kw3\">format</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i.<span class=\"me1\">prime</span>?\u00a0? i\u00a0: <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>show_spiral<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>show_spiral<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>show_spiral<span class=\"br0\">(</span><span class=\"nu0\">25</span>, <span class=\"st0\">\"# \"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 58, "block": "<pre class=\"text highlighted_source\">use std::fmt;<br/>\u00a0<br/>enum Direction { RIGHT, UP, LEFT, DOWN }<br/>use ulam::Direction::*;<br/>\u00a0<br/>/// Indicates whether an integer is a prime number or not.<br/>fn is_prime(a: u32) -&gt; bool {<br/>    match a {<br/>        2 =&gt; true,<br/>        x if x &lt;= 1 || x\u00a0% 2 == 0 =&gt; false,<br/>        _ =&gt; {<br/>            let max = f64::sqrt(a as f64) as u32;<br/>            let mut x =  3;<br/>            while x &lt;= max {<br/>                if a\u00a0% x == 0 { return false; }<br/>                x += 2;<br/>            }<br/>            true<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>pub struct Ulam { u\u00a0: Vec&lt;Vec&lt;String&gt;&gt; }<br/>\u00a0<br/>impl Ulam {<br/>    /// Generates one `Ulam` object.<br/>    pub fn new(n: u32, s: u32, c: char) -&gt; Ulam {<br/>        let mut spiral = vec![vec![String::new(); n as usize]; n as usize];<br/>        let mut dir = RIGHT;<br/>        let mut y = (n / 2) as usize;<br/>        let mut x = if n\u00a0% 2 == 0 { y - 1 } else { y }; // shift left for even n's<br/>        for j in s..n * n + s {<br/>            spiral[y][x] = if is_prime(j) {<br/>                if c == '\\0' { format!(\"{:4}\", j) } else { format!(\"  {} \", c) }<br/>            }<br/>            else { String::from(\" ---\") };<br/>\u00a0<br/>            match dir {<br/>                RIGHT =&gt; if x as u32 &lt;= n - 1 &amp;&amp; spiral[y - 1][x].is_empty() &amp;&amp; j &gt; s { dir = UP; },<br/>                UP =&gt; if spiral[y][x - 1].is_empty() { dir = LEFT; },<br/>                LEFT =&gt; if x == 0 || spiral[y + 1][x].is_empty() { dir = DOWN; },<br/>                DOWN =&gt; if spiral[y][x + 1].is_empty() { dir = RIGHT; }<br/>            };<br/>\u00a0<br/>            match dir { RIGHT =&gt; x += 1, UP =&gt; y -= 1, LEFT =&gt; x -= 1, DOWN =&gt; y += 1 };<br/>        }<br/>        Ulam { u: spiral }<br/>    }<br/>}<br/>\u00a0<br/>impl fmt::Display for Ulam {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        for row in &amp;self.u {<br/>            writeln!(f, \"{}\", format!(\"{:?}\", row).replace(\"\\\"\", \"\").replace(\", \", \"\"));<br/>        };<br/>        writeln!(f, \"\")<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Ulam <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    generate<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    generate<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Direction <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Enumeration <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> RIGHT, UP, LEFT, DOWN <span class=\"sy0\">=</span> Value <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generate<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, i<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Char <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        assert<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"n &gt; 1\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">transform</span> <span class=\"br0\">{</span><span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Direction.<span class=\"sy0\">_</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dir <span class=\"sy0\">=</span> RIGHT<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> n / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> y - <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> y <span class=\"co1\">// shift left for even n's</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- i to n <span class=\"sy0\">*</span> n - <span class=\"nu0\">1</span> + i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"%4d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> s<span class=\"st0\">\"  $c \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" ---\"</span><br/>\u00a0<br/>            dir <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> RIGHT <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> n - <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">(</span>y - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> UP<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> UP <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> LEFT<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> LEFT <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || s<span class=\"br0\">(</span>y + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> DOWN<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> DOWN <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> dir <span class=\"sy0\">=</span> RIGHT<br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            dir <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> RIGHT <span class=\"sy0\">=&gt;</span> x +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> UP <span class=\"sy0\">=&gt;</span> y -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> LEFT <span class=\"sy0\">=&gt;</span> x -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> DOWN <span class=\"sy0\">=&gt;</span> y +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span> + s.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reduceLeft</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"]<span class=\"es1\">\\n</span>[\"</span> + <span class=\"sy0\">_</span><span class=\"br0\">)</span> + <span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isPrime<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> || a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a.<span class=\"me1\">toDouble</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">3</span> to max by <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 31, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>n=<span class=\"nu0\">512</span>, start=<span class=\"nu0\">1</span>, file=<span class=\"st0\">'ulam.png'</span><span class=\"br0\">)</span><br/>\u00a0<br/>ARGV.<span class=\"me1\">getopt</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">'n=i'</span> <span class=\"sy0\">=&gt;</span> \\n,<br/>    <span class=\"st0\">'s=i'</span> <span class=\"sy0\">=&gt;</span> \\start,<br/>    <span class=\"st0\">'f=s'</span> <span class=\"sy0\">=&gt;</span> \\file,<br/><span class=\"br0\">)</span><br/>\u00a0<br/>func cell<span class=\"br0\">(</span>n, x, y, start<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    y <span class=\"sy0\">-</span>= <span class=\"br0\">(</span>n   <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    x <span class=\"sy0\">-</span>= <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    var l = <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> y.<span class=\"me1\">abs</span>\u00a0? x.<span class=\"me1\">abs</span>\u00a0: y.<span class=\"me1\">abs</span><span class=\"br0\">)</span><br/>    var d = <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> x\u00a0? <span class=\"br0\">(</span>l<span class=\"sy0\">*</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span>l <span class=\"sy0\">-</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>l<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> d <span class=\"sy0\">+</span> start <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var black = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span><span class=\"re2\">Imager::Color</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'#000000'</span><span class=\"br0\">)</span><br/>var white = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span><span class=\"re2\">Imager::Color</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'#FFFFFF'</span><span class=\"br0\">)</span><br/>\u00a0<br/>var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> n, ysize <span class=\"sy0\">=&gt;</span> n, channels <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>img.<span class=\"me1\">box</span><span class=\"br0\">(</span>filled <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span>, color <span class=\"sy0\">=&gt;</span> white<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> y=<span class=\"br0\">(</span>^n<span class=\"br0\">)</span>, x=<span class=\"br0\">(</span>^n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell<span class=\"br0\">(</span>n, x, y, start<span class=\"br0\">)</span>.<span class=\"me1\">is_prime</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, y <span class=\"sy0\">=&gt;</span> y, color <span class=\"sy0\">=&gt;</span> black<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> file<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 51, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> is_prime <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> spiral <span class=\"br0\">{</span>w h<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$w</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> dir <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> steps <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> step <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        yield <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">switch</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>            <span class=\"nu0\">0</span>   <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span><br/>            <span class=\"nu0\">1</span>   <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>            <span class=\"nu0\">2</span>   <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>            <span class=\"nu0\">3</span>   <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> step -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> dir <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$dir</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>4<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dir</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">incr</span> steps<br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">set</span> step <span class=\"re0\">$steps</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> radius <span class=\"nu0\">16</span><br/><span class=\"kw1\">set</span> side  <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radius</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> n     <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$side</span> <span class=\"sy0\">*</span> <span class=\"re0\">$side</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> cells <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$side</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$side</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> i     <span class=\"nu0\">1</span><br/>\u00a0<br/>coroutine spin spiral <span class=\"re0\">$side</span> <span class=\"re0\">$side</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>spin<span class=\"br0\">]</span> y x<br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>is_prime <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>169b\"</span>\u00a0: <span class=\"st0\">\" \"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> cells <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$c</span><br/>    <span class=\"kw2\">incr</span> i<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap row <span class=\"re0\">$cells</span> <span class=\"br0\">{</span><span class=\"kw2\">join</span> <span class=\"re0\">$row</span> <span class=\"st0\">\" \"</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\n<span class=\"br0\">]</span></pre>"}, {"lang": "VBScript", "loc": 82, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> build_spiral(n)<br/>\t<span class=\"co1\">'declare a two dimentional array<br/></span>\t<span class=\"kw4\">Dim</span> matrix()<br/>\t<span class=\"kw4\">ReDim</span> matrix(n-1,n-1)<br/>\t<span class=\"co1\">'determine starting point<br/></span>\tx = (n-1)/2\u00a0: y = (n-1)/2<br/>\t<span class=\"co1\">'set the initial iterations<br/></span>\tx_max = 1\u00a0: y_max = 1\u00a0: count = 1<br/>\t<span class=\"co1\">'set initial direction<br/></span>\tdir = <span class=\"st0\">\"R\"</span><br/>\t<span class=\"co1\">'populate the array<br/></span>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n*n<br/>\t\tl = Len(n*n)<br/>\t\t<span class=\"kw3\">If</span> IsPrime(i) <span class=\"kw3\">Then</span><br/>\t\t\tmatrix(x,y) = Right(<span class=\"st0\">\"000\"</span> &amp; i,l)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tmatrix(x,y) = <span class=\"kw1\">String</span>(l,<span class=\"st0\">\"-\"</span>)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> dir<br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"R\"</span><br/>\t\t\t\t<span class=\"kw3\">If</span> x_max &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tx = x + 1\u00a0: x_max = x_max - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = <span class=\"st0\">\"U\"</span>\u00a0: y_max = count<br/>\t\t\t\t\ty = y - 1\u00a0: y_max = y_max - 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"U\"</span><br/>\t\t\t\t<span class=\"kw3\">If</span> y_max &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\ty = y - 1\u00a0: y_max = y_max - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = <span class=\"st0\">\"L\"</span>\u00a0: count = count + 1\u00a0: x_max = count<br/>\t\t\t\t\tx = x - 1\u00a0: x_max = x_max - 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"L\"</span><br/>\t\t\t\t<span class=\"kw3\">If</span> x_max &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tx = x - 1\u00a0: x_max = x_max - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = <span class=\"st0\">\"D\"</span>\u00a0: y_max = count<br/>\t\t\t\t\ty = y + 1\u00a0: y_max = y_max - 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"D\"</span><br/>\t\t\t\t<span class=\"kw3\">If</span> y_max &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\ty = y + 1\u00a0: y_max = y_max - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = <span class=\"st0\">\"R\"</span>\u00a0: count = count + 1\u00a0: x_max = count<br/>\t\t\t\t\tx = x + 1\u00a0: x_max = x_max - 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"co1\">'print the matrix<br/></span>\t<span class=\"kw3\">For</span> y = 0 <span class=\"kw3\">To</span> n - 1<br/>\t\t<span class=\"kw3\">For</span> x = 0 <span class=\"kw3\">To</span> n - 1<br/>\t\t\t<span class=\"kw3\">If</span> x = n - 1 <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.Write matrix(x,y)<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tWScript.StdOut.Write matrix(x,y) &amp; vbTab<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPrime(n)<br/>\t<span class=\"kw3\">If</span> n = 2 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">ElseIf</span> n &lt;= 1 <span class=\"kw3\">Or</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Int(Sqr(n)) <span class=\"kw3\">Step</span> 2<br/>\t\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'test with 9<br/></span>build_spiral(9)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">var primes =Utils.Generator(Import(\"sieve.zkl\").postponed_sieve);  // lazy<br/>var offsets=Utils.cycle( T(0,1),T(-1,0),T(0,-1),T(1,0) );  // (N,E,S,W), lazy<br/>const BLACK=0, WHITE=0xff|ff|ff, GREEN=0x00|ff|00, EMPTY=0x080|80|80;<br/>fcn uspiral(N){<br/>   if((M:=N).isEven) M+=1;  // need odd width, height<br/>   img,p\u00a0:= PPM(M,M,EMPTY), primes.next(); // 2 .. 250,007: 22,045 primes<br/>   x,y,n\u00a0:= N/2,x,2; img[x,y]=GREEN; x+=1; // start on 2 facing \"north\"<br/>   while(True){<br/>      ox,oy:=offsets.next(); leftx,lefty:=offsets.peek();  // set direction<br/>      while(True){<br/>\t img[x,y]=( if(n==p){ p=primes.next(); WHITE } else BLACK );<br/>\t if(n==N*N) break(2); // all done<br/>\t n+=1;<br/>\t if(img[x+leftx,y+lefty]==EMPTY) // nothing to my left, turn left<br/>\t    { x+=leftx; y+=lefty; break; }<br/>\t x+=ox; y+=oy;\t// move in a straight line<br/>      }<br/>   }<br/>   img<br/>}<br/>\u00a0<br/>uspiral(500).write(File(\"ulamSpiral.ppm\",\"wb\"));</pre>"}]}