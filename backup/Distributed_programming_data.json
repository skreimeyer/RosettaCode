{"task": "Distributed_programming", "blocks": [{"lang": "Ada", "loc": 5, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Server <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Remote_Call_Interface;<br/>   <span class=\"kw3\">procedure</span> Foo;<br/>   <span class=\"kw3\">function</span> Bar <span class=\"kw1\">return</span> Natural;<br/><span class=\"kw1\">end</span> Server;</pre>"}, {"lang": "AutoHotkey", "loc": 50, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;pvm3.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> tids<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> parent<span class=\"sy0\">,</span> spawn<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i_data<span class=\"sy0\">,</span> i2<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> f_data<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tspawn <span class=\"sy0\">=</span> pvm_spawn<span class=\"br0\">(</span><span class=\"st0\">\"/tmp/a.out\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> PvmTaskDefault<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> tids<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>spawn <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Can't spawn task<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Spawning successful<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* pvm_recv(task_id, msgtag).  msgtag identifies what kind of data it is,<br/> \t\t * for here: 1 = (int, double), 2 = (int, int)<br/>\t\t * The receiving order is intentionally swapped, just to show.<br/>\t\t * task_id = -1 means \"receive from any task\"<br/>\t\t */</span><br/>\t\tpvm_recv<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_unpackf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i_data<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"got msg type 2:\u00a0%d\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpvm_recv<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_unpackf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%lf\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i_data<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"got msg type 1:\u00a0%d\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tparent <span class=\"sy0\">=</span> pvm_parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpvm_initsend<span class=\"br0\">(</span>PvmDataDefault<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ti_data <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tf_data <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> RAND_MAX<span class=\"sy0\">;</span><br/>\t\tpvm_packf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%lf\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_send<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* send msg type 1 */</span><br/>\u00a0<br/>\t\tpvm_initsend<span class=\"br0\">(</span>PvmDataDefault<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ti2 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_packf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_send<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* send msg type 2 */</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tpvm_exit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 50, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;pvm3.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> tids<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> parent<span class=\"sy0\">,</span> spawn<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i_data<span class=\"sy0\">,</span> i2<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> f_data<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tspawn <span class=\"sy0\">=</span> pvm_spawn<span class=\"br0\">(</span><span class=\"st0\">\"/tmp/a.out\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> PvmTaskDefault<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> tids<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>spawn <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Can't spawn task<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Spawning successful<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* pvm_recv(task_id, msgtag).  msgtag identifies what kind of data it is,<br/> \t\t * for here: 1 = (int, double), 2 = (int, int)<br/>\t\t * The receiving order is intentionally swapped, just to show.<br/>\t\t * task_id = -1 means \"receive from any task\"<br/>\t\t */</span><br/>\t\tpvm_recv<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_unpackf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i_data<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"got msg type 2:\u00a0%d\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpvm_recv<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_unpackf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%lf\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i_data<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"got msg type 1:\u00a0%d\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tparent <span class=\"sy0\">=</span> pvm_parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpvm_initsend<span class=\"br0\">(</span>PvmDataDefault<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ti_data <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tf_data <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> RAND_MAX<span class=\"sy0\">;</span><br/>\t\tpvm_packf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%lf\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> f_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_send<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* send msg type 1 */</span><br/>\u00a0<br/>\t\tpvm_initsend<span class=\"br0\">(</span>PvmDataDefault<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ti2 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_packf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span><span class=\"sy0\">,</span> i_data<span class=\"sy0\">,</span> i2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpvm_send<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* send msg type 2 */</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tpvm_exit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 99, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net.Sockets</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Runtime.Serialization.Formatters.Binary</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading.Tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">using</span> <span class=\"kw1\">static</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> DistributedProgramming<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Port <span class=\"sy0\">=</span> <span class=\"nu0\">555</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    async <span class=\"kw1\">static</span> Task RunClient<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Connecting\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> client <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TcpClient<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        await client<span class=\"sy0\">.</span><span class=\"me1\">ConnectAsync</span><span class=\"br0\">(</span><span class=\"st0\">\"localhost\"</span>, Port<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> stream <span class=\"sy0\">=</span> client<span class=\"sy0\">.</span><span class=\"me1\">GetStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Sending loot\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> Serialize<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SampleData<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            await stream<span class=\"sy0\">.</span><span class=\"me1\">WriteAsync</span><span class=\"br0\">(</span>data, <span class=\"nu0\">0</span>, data<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Receiving thanks\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"nu0\">80000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> bytesRead <span class=\"sy0\">=</span> await stream<span class=\"sy0\">.</span><span class=\"me1\">ReadAsync</span><span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span>, buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> thanks <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">)</span>Deserialize<span class=\"br0\">(</span>buffer, bytesRead<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            WriteLine<span class=\"br0\">(</span>thanks<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        client<span class=\"sy0\">.</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    async <span class=\"kw1\">static</span> Task RunServer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Listening\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> listener <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TcpListener<span class=\"br0\">(</span>IPAddress<span class=\"sy0\">.</span><span class=\"me1\">Any</span>, Port<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        listener<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> client <span class=\"sy0\">=</span> await listener<span class=\"sy0\">.</span><span class=\"me1\">AcceptTcpClientAsync</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> stream <span class=\"sy0\">=</span> client<span class=\"sy0\">.</span><span class=\"me1\">GetStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Receiving loot\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"nu0\">80000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> bytesRead <span class=\"sy0\">=</span> await stream<span class=\"sy0\">.</span><span class=\"me1\">ReadAsync</span><span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span>, buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> <span class=\"br0\">(</span>SampleData<span class=\"br0\">)</span>Deserialize<span class=\"br0\">(</span>buffer, bytesRead<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            WriteLine<span class=\"br0\">(</span>$<span class=\"st0\">\"{data.Loot} at {data.Latitude}, {data.Longitude}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Sending thanks\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> thanks <span class=\"sy0\">=</span> Serialize<span class=\"br0\">(</span><span class=\"st0\">\"Thanks!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            await stream<span class=\"sy0\">.</span><span class=\"me1\">WriteAsync</span><span class=\"br0\">(</span>thanks, <span class=\"nu0\">0</span>, thanks<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        client<span class=\"sy0\">.</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        listener<span class=\"sy0\">.</span><span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Write<span class=\"br0\">(</span><span class=\"st0\">\"Press a key\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ReadKey<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Serialize<span class=\"br0\">(</span><span class=\"kw4\">object</span> data<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> mem <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> MemoryStream<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinaryFormatter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Serialize</span><span class=\"br0\">(</span>mem, data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> mem<span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">object</span> Deserialize<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data, <span class=\"kw4\">int</span> length<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> mem <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> MemoryStream<span class=\"br0\">(</span>data, <span class=\"nu0\">0</span>, length<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinaryFormatter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Deserialize</span><span class=\"br0\">(</span>mem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"client\"</span><span class=\"sy0\">:</span> RunClient<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"server\"</span><span class=\"sy0\">:</span> RunServer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span>Serializable<span class=\"br0\">]</span><br/><span class=\"kw4\">class</span> SampleData<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">decimal</span> Latitude <span class=\"sy0\">=</span> 44<span class=\"sy0\">.</span>33190m<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">decimal</span> Longitude <span class=\"sy0\">=</span> 114<span class=\"sy0\">.</span>84129m<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Loot <span class=\"sy0\">=</span> <span class=\"st0\">\"140 tonnes of jade\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 67, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> arsd.<span class=\"me1\">rpc</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> S1 <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> number<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> name<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> S2 <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> name<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> number<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">interface</span> ExampleNetworkFunctions <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> sayHello<span class=\"br0\">(</span><span class=\"kw4\">string</span> name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><span class=\"sy0\">;</span><br/>    S2 structTest<span class=\"br0\">(</span>S1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">void</span> die<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// The server must implement the interface.</span><br/><span class=\"kw4\">class</span> ExampleServer <span class=\"sy0\">:</span> ExampleNetworkFunctions <span class=\"br0\">{</span><br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">string</span> sayHello<span class=\"br0\">(</span><span class=\"kw4\">string</span> name<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy0\">~</span> name<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">override</span> S2 structTest<span class=\"br0\">(</span>S1 a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> S2<span class=\"br0\">(</span>a.<span class=\"me1\">name</span><span class=\"sy0\">,</span> a.<span class=\"me1\">number</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">void</span> die<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"death requested\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">mixin</span> NetworkServer<span class=\"sy0\">!</span>ExampleNetworkFunctions<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Client <span class=\"br0\">{</span><br/>    <span class=\"kw2\">mixin</span> NetworkClient<span class=\"sy0\">!</span>ExampleNetworkFunctions<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> client <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Client<span class=\"br0\">(</span><span class=\"st0\">\"localhost\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5005</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// These work like the interface above, but instead of</span><br/>        <span class=\"co1\">// returning the value, they take callbacks for success (where</span><br/>        <span class=\"co1\">// the arg is the retval) and failure (the arg is the</span><br/>        <span class=\"co1\">// exception).</span><br/>        client.<span class=\"me1\">sayHello</span><span class=\"br0\">(</span><span class=\"st0\">\"whoa\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span> writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        client.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">{</span> writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        client.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">{</span> writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        client.<span class=\"me1\">structTest</span><span class=\"br0\">(</span>S1<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"st0\">\"cool!\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">{</span> writeln<span class=\"br0\">(</span>a.<span class=\"me1\">name</span><span class=\"sy0\">,</span> <span class=\"st0\">\" -- \"</span><span class=\"sy0\">,</span> a.<span class=\"me1\">number</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        client.<span class=\"me1\">die</span><span class=\"br0\">(</span><span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"shouldn't happen\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                   <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">{</span> writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        client.<span class=\"me1\">eventLoop</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> server <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> ExampleServer<span class=\"br0\">(</span><span class=\"nu0\">5005</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        server.<span class=\"me1\">eventLoop</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 19, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> storage <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> logService <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> log<span class=\"br0\">(</span>line <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    storage.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> line<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> search<span class=\"br0\">(</span>substring <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> matches <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>time<span class=\"sy0\">,</span> line<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>line.<span class=\"me1\">startOf</span><span class=\"br0\">(</span>substring<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> storage <span class=\"br0\">{</span><br/>      matches with<span class=\"sy0\">=</span> <span class=\"br0\">[</span>time<span class=\"sy0\">,</span> line<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    return matches<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/introducer\"><span class=\"kw7\">introducer</span></a>.<span class=\"me1\">onTheAir</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> sturdyRef <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/makeSturdyRef\"><span class=\"kw7\">makeSturdyRef</span></a>.<span class=\"me1\">temp</span><span class=\"br0\">(</span>logService<span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>captp<span class=\"sy0\">&gt;</span>.<span class=\"me1\">sturdyToURI</span><span class=\"br0\">(</span>sturdyRef<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">blockAtTop</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 19, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>srv<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> wait<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <a href=\"http://erlang.org/doc/man/net_kernel.html\"><span class=\"kw5\">net_kernel</span></a>:<span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">[</span>srv<span class=\"sy1\">,</span>shortnames<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">set_cookie</span><span class=\"br0\">(</span><span class=\"kw3\">node</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> rosetta<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <span class=\"kw3\">spawn</span><span class=\"br0\">(</span>srv<span class=\"sy1\">,</span>wait<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"kw3\">register</span><span class=\"br0\">(</span>srv<span class=\"sy1\">,</span><span class=\"re5\">Pid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p ready~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw3\">node</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   ok<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"kw1\">receive</span><br/>       <span class=\"br0\">{</span>echo<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Any</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>           <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"-&gt; ~p from ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Any</span><span class=\"sy1\">,</span> <span class=\"kw3\">node</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>           <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>hello<span class=\"sy1\">,</span> <span class=\"re5\">Any</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>           <span class=\"re3\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>       <span class=\"re5\">Any</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Error ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Any</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USING: concurrency.distributed concurrency.messaging threads io.sockets io.servers\u00a0;<br/>QUALIFIED: concurrency.messaging<br/>: prettyprint-message ( -- ) concurrency.messaging:receive . flush prettyprint-message\u00a0;<br/>[ prettyprint-message ] \"logger\" spawn dup name&gt;&gt; register-remote-thread<br/>\"127.0.0.1\" 9000 &lt;inet4&gt; &lt;node-server&gt; start-server</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"errors\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"net\"</span><br/>    <span class=\"st0\">\"net/http\"</span><br/>    <span class=\"st0\">\"net/rpc\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> TaxComputer <span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>taxRate TaxComputer<span class=\"sy1\">)</span> Tax<span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> r <span class=\"sy3\">*</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> error <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> x &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"Negative values not allowed\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"sy3\">*</span>r <span class=\"sy2\">=</span> x <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>taxRate<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> TaxComputer<span class=\"sy1\">(</span><span class=\"sy3\">.</span><span class=\"nu0\">05</span><span class=\"sy1\">)</span><br/>    rpc<span class=\"sy3\">.</span>Register<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    rpc<span class=\"sy3\">.</span>HandleHTTP<span class=\"sy1\">()</span><br/>    listener<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> net<span class=\"sy3\">.</span>Listen<span class=\"sy1\">(</span><span class=\"st0\">\"tcp\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\":1234\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    http<span class=\"sy3\">.</span>Serve<span class=\"sy1\">(</span>listener<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> net <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'net'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> server <span class=\"sy0\">=</span> net.<span class=\"me1\">createServer</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  c.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'hello<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>  c.<span class=\"me1\">pipe</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"co1\">// echo messages back</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>server.<span class=\"me1\">listen</span><span class=\"br0\">(</span><span class=\"nu0\">3000</span><span class=\"sy0\">,</span> <span class=\"st0\">'localhost'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> net <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'net'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> server <span class=\"sy0\">=</span> net.<span class=\"me1\">createServer</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  c.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'hello<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>  c.<span class=\"me1\">pipe</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"co1\">// echo messages back</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>server.<span class=\"me1\">listen</span><span class=\"br0\">(</span><span class=\"nu0\">3000</span><span class=\"sy0\">,</span> <span class=\"st0\">'localhost'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "LFE", "loc": 7, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/>$ .<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>lfe<br/>Erlang<span class=\"sy0\">/</span>OTP <span class=\"nu0\">17</span> <span class=\"br0\">[</span>erts-<span class=\"nu0\">6.2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw3\">source</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">64</span>-bit<span class=\"br0\">]</span> <span class=\"br0\">[</span>smp:<span class=\"nu0\">4</span>:<span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>async-threads:<span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>hipe<span class=\"br0\">]</span> <span class=\"br0\">[</span>kernel-poll:false<span class=\"br0\">]</span><br/>\u00a0<br/>LFE Shell V6.2 <span class=\"br0\">(</span>abort with ^G<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span><br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">LaunchKernels[2];<br/>ParallelEvaluate[RandomReal[]]<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 42, "block": "<pre class=\"text highlighted_source\">import os, nanomsg<br/>\u00a0<br/>proc sendMsg(s, msg) =<br/>  echo \"SENDING \\\"\",msg,\"\\\"\"<br/>  let bytes = s.send(msg.cstring, msg.len + 1, 0)<br/>  assert bytes == msg.len + 1<br/>\u00a0<br/>proc recvMsg(s) =<br/>  var buf: cstring<br/>  let bytes = s.recv(addr buf, MSG, 0)<br/>  if bytes &gt; 0:<br/>    echo \"RECEIVED \\\"\",buf,\"\\\"\"<br/>    discard freemsg buf<br/>\u00a0<br/>proc sendRecv(s, msg) =<br/>  var to: cint = 100<br/>  discard s.setSockOpt(SOL_SOCKET, RCVTIMEO, addr to, sizeof to)<br/>  while true:<br/>    s.recvMsg<br/>    sleep 1000<br/>    s.sendMsg msg<br/>\u00a0<br/>proc node0(url: string) =<br/>  var s = socket(AF_SP, nanomsg.PAIR)<br/>  assert s &gt;= 0<br/>  let res = s.bindd url<br/>  assert res &gt;= 0<br/>  s.sendRecv \"node0\"<br/>  discard s.shutdown 0<br/>\u00a0<br/>proc node1(url: string) =<br/>  var s = socket(AF_SP, nanomsg.PAIR)<br/>  assert s &gt;= 0<br/>  let res = s.connect url<br/>  assert res &gt;= 0<br/>  s.sendRecv \"node1\"<br/>  discard s.shutdown 0<br/>\u00a0<br/>if paramStr(1) == \"node0\":<br/>  node0 paramStr(2)<br/>elif paramStr(1) == \"node1\":<br/>  node1 paramStr(2)</pre>"}, {"lang": "Objective-C", "loc": 6, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/><span class=\"co2\">// our protocol allows \"sending\" \"strings\", but we can implement</span><br/><span class=\"co2\">// everything we could for a \"local\" object</span><br/><span class=\"kw1\">@protocol</span> ActionObjectProtocol<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>sendMessage<span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>msg;<br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 23, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> create_logger <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  def <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> logs<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      printf <span class=\"st0\">\"Logged:\u00a0%s\\n%!\"</span> text<span class=\"sy0\">;</span><br/>      logs<span class=\"br0\">(</span><span class=\"br0\">(</span>text, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>gettimeofday <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">::</span>l<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> reply <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a><br/>\u00a0<br/>   <span class=\"kw1\">or</span> search<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> logs<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      logs<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> reply <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>line, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> line <span class=\"sy0\">=</span> text<span class=\"br0\">)</span> l <span class=\"kw1\">to</span> search<br/>  <span class=\"kw1\">in</span><br/>    spawn logs<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a>, search<span class=\"br0\">)</span><br/>\u00a0<br/>def wait<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> finished<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> reply <span class=\"kw1\">to</span> wait<br/>\u00a0<br/><span class=\"kw1\">let</span> register name service <span class=\"sy0\">=</span> Join<span class=\"sy0\">.</span>Ns<span class=\"sy0\">.</span>register Join<span class=\"sy0\">.</span>Ns<span class=\"sy0\">.</span>here name service<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a>, search <span class=\"sy0\">=</span> create_logger <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    register <span class=\"st0\">\"log\"</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a><span class=\"sy0\">;</span><br/>    register <span class=\"st0\">\"search\"</span> search<span class=\"sy0\">;</span><br/>    Join<span class=\"sy0\">.</span>Site<span class=\"sy0\">.</span>listen <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>ADDR_INET <span class=\"br0\">(</span>Join<span class=\"sy0\">.</span>Site<span class=\"sy0\">.</span>get_local_addr<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    wait <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 40, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">functor</span> ServerCode<br/>  <span class=\"kw1\">export</span><br/>     port:Prt<br/>  <span class=\"kw1\">define</span><br/>     Stream<br/>     Prt = <span class=\"br0\">{</span>NewPort\u00a0?Stream<span class=\"br0\">}</span><br/>     <span class=\"kw1\">thread</span><br/>\t<span class=\"kw1\">for</span> Request<span class=\"sy0\">#</span>Reply <span class=\"kw1\">in</span> Stream <span class=\"kw1\">do</span><br/>\t   <span class=\"kw1\">case</span> Request<br/>\t   <span class=\"kw1\">of</span> echo<span class=\"br0\">(</span>Data<span class=\"br0\">)</span>        <span class=\"kw1\">then</span> Reply = Data<br/>\t   <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> compute<span class=\"br0\">(</span>Function<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Reply = <span class=\"br0\">{</span>Function<span class=\"br0\">}</span><br/>\t   <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% create the server on some machine</span><br/>  <span class=\"co1\">%% (just change \"localhost\" to some machine</span><br/>  <span class=\"co1\">%% that you can use with a passwordless rsh login</span><br/>  <span class=\"co1\">%% and that has the same Mozart version installed)</span><br/>  RM = <span class=\"br0\">{</span>New Remote<span class=\"sy0\">.</span>manager init<span class=\"br0\">(</span>host:localhost<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% execute the code encapsulated in the ServerCode functor</span><br/>  Server = <span class=\"br0\">{</span>RM apply<span class=\"br0\">(</span>ServerCode $<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% Shortcut: send a message to Server and receive a reply</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Send</span> X<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Port<span class=\"sy0\">.</span>sendRecv Server<span class=\"sy0\">.</span>port X<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span> <br/>  <span class=\"co1\">%% echo</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Echo reply: \"</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>Send echo<span class=\"br0\">(</span>hello<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% compute</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Result of computation: \"</span><span class=\"sy0\">#</span><br/>   <span class=\"br0\">{</span>Send compute<span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span> 8 <span class=\"kw1\">div</span> 4 <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% shut down server</span><br/>  <span class=\"br0\">{</span>RM close<span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 43, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Data<span class=\"sy0\">::</span><span class=\"me2\">Dumper</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">::</span><span class=\"me2\">INET</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Safe<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> get_data <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$sock</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">::</span><span class=\"me2\">INET</span><br/>\t\tLocalHost <span class=\"sy0\">=&gt;</span>\t<span class=\"st0\">\"localhost\"</span><span class=\"sy0\">,</span><br/>\t\tLocalPort <span class=\"sy0\">=&gt;</span>\t<span class=\"st0\">\"10000\"</span><span class=\"sy0\">,</span><br/>\t\tProto <span class=\"sy0\">=&gt;</span>\t<span class=\"st0\">\"tcp\"</span><span class=\"sy0\">,</span><br/>\t\tListen <span class=\"sy0\">=&gt;</span>\t<span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>\t\tReuse <span class=\"sy0\">=&gt;</span>\t<span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"re0\">$sock</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Socket creation failure\"</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$cli</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sock</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/accept.html\"><span class=\"kw3\">accept</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\"># of course someone may be tempted to send you 'system(\"rm -rf /\")',</span><br/>\t<span class=\"co1\"># to be safe(r), use Safe::</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$safe</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Safe<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$safe</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">reval</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span><span class=\"re0\">$cli</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$cli</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$sock</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> send_data <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$host</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$sock</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">::</span><span class=\"me2\">INET</span><br/>\t\tPeerAddr <span class=\"sy0\">=&gt;</span>\t<span class=\"st0\">\"$host:10000\"</span><span class=\"sy0\">,</span><br/>\t\tProto <span class=\"sy0\">=&gt;</span>\t<span class=\"st0\">\"tcp\"</span><span class=\"sy0\">,</span><br/>\t\tReuse <span class=\"sy0\">=&gt;</span>\t<span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"re0\">$sock</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Socket creation failure\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$sock</span> Data<span class=\"sy0\">::</span><span class=\"me2\">Dumper</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Dump</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$data</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$sock</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> get_data<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Got data<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> Data<span class=\"sy0\">::</span><span class=\"me2\">Dumper</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Dump</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\tsend_data<span class=\"br0\">(</span><span class=\"st_h\">'some_host'</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> a<span class=\"sy0\">=&gt;</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> b<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre>./server.p6 --usage\nUsage:\n  server.p6 [--server=&lt;Any&gt;] [--port=&lt;Any&gt;]</pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(task (port 12321)                     # Background server task<br/>   (let? Sock (accept @)<br/>      (unless (fork)                   # Handle request in child process<br/>         (in Sock<br/>            (while (rd)                # Handle requests<br/>               (out Sock<br/>                  (pr (eval @)) ) ) )  # Evaluate and send reply<br/>         (bye) )                       # Exit child process<br/>      (close Sock) ) )                 # Close socket in parent process</pre>"}, {"lang": "Python", "loc": 38, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">SimpleXMLRPCServer</span><br/>\u00a0<br/><span class=\"kw1\">class</span> MyHandlerInstance:<br/>    <span class=\"kw1\">def</span> echo<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> data<span class=\"br0\">)</span>:<br/>        <span class=\"st0\">'''Method for returning data got from client'''</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'Server responded:\u00a0%s'</span>\u00a0% data<br/>\u00a0<br/>    <span class=\"kw1\">def</span> div<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> num1<span class=\"sy0\">,</span> num2<span class=\"br0\">)</span>:<br/>        <span class=\"st0\">'''Method for divide 2 numbers'''</span><br/>        <span class=\"kw1\">return</span> num1/num2<br/>\u00a0<br/><span class=\"kw1\">def</span> foo_function<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''A function (not an instance method)'''</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/>HOST <span class=\"sy0\">=</span> <span class=\"st0\">\"localhost\"</span><br/>PORT <span class=\"sy0\">=</span> <span class=\"nu0\">8000</span><br/>\u00a0<br/>server <span class=\"sy0\">=</span> <span class=\"kw3\">SimpleXMLRPCServer</span>.<span class=\"kw3\">SimpleXMLRPCServer</span><span class=\"br0\">(</span><span class=\"br0\">(</span>HOST<span class=\"sy0\">,</span> PORT<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># register built-in system.* functions.</span><br/>server.<span class=\"me1\">register_introspection_functions</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># register our instance</span><br/>server.<span class=\"me1\">register_instance</span><span class=\"br0\">(</span>MyHandlerInstance<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># register our function as well</span><br/>server.<span class=\"me1\">register_function</span><span class=\"br0\">(</span>foo_function<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">try</span>:<br/>    <span class=\"co1\"># serve forever</span><br/>    server.<span class=\"me1\">serve_forever</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">except</span> <span class=\"kw2\">KeyboardInterrupt</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'Exiting...'</span><br/>    server.<span class=\"me1\">server_close</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/base<br/>(require racket/place/distributed racket/place)<br/>\u00a0<br/>(define (fib n)<br/>  (if (&lt;= n 1) n (+ (fib (- n 1)) (fib (- n 2)))))<br/>\u00a0<br/>(provide work)<br/>(define (work)<br/>  (place ch<br/>    (place-channel-put ch (fib (place-channel-get ch)))))<br/>\u00a0<br/>(module+ main<br/>  (define places<br/>    (for/list ([host '(\"localhost\" \"localhost\" \"localhost\" \"localhost\")]<br/>               [port (in-naturals 12345)])<br/>      (define-values [node place]<br/>        (spawn-node-supervise-place-at host #:listen-port port #:thunk #t<br/>                                       (quote-module-path \"..\") 'work))<br/>      place))<br/>  (message-router<br/>   (after-seconds 1<br/>     (for ([p places]) (*channel-put p 42))<br/>     (printf \"Results: ~s\\n\" (map *channel-get places))<br/>     (exit))))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 21, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'drb/drb'</span><br/>\u00a0<br/><span class=\"co1\"># The URI for the server to connect to</span><br/><span class=\"kw4\">URI</span>=<span class=\"st0\">\"druby://localhost:8787\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> TimeServer<br/>\u00a0<br/>  <span class=\"kw1\">def</span> get_current_time<br/>    <span class=\"kw2\">return</span> <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># The object that handles requests on the server</span><br/>FRONT_OBJECT = TimeServer.<span class=\"me1\">new</span><br/>\u00a0<br/><span class=\"re0\">$SAFE</span> = <span class=\"nu0\">1</span>   <span class=\"co1\"># disable eval() and friends</span><br/>\u00a0<br/>DRb.<span class=\"me1\">start_service</span><span class=\"br0\">(</span><span class=\"kw4\">URI</span>, FRONT_OBJECT<span class=\"br0\">)</span><br/><span class=\"co1\"># Wait for the drb server thread to finish before exiting.</span><br/>DRb.<span class=\"me1\">thread</span>.<span class=\"me1\">join</span></pre>"}, {"lang": "Tcl", "loc": 63, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> main <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    <span class=\"kw1\">set</span> connections <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>    <span class=\"kw2\">socket</span> -server handleConnection <span class=\"nu0\">12345</span><br/>    vwait dummyVar <span class=\"sy0\">;</span><span class=\"co1\"># enter the event loop</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> handleConnection <span class=\"br0\">{</span>channel clientaddr clientport<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    dict <span class=\"kw1\">set</span> connections <span class=\"re0\">$channel</span> address <span class=\"st0\">\"$clientaddr:$clientport\"</span><br/>    <span class=\"kw2\">fconfigure</span> <span class=\"re0\">$channel</span> -buffering line<br/>    <span class=\"kw2\">fileevent</span> <span class=\"re0\">$channel</span> readable <span class=\"br0\">[</span><span class=\"kw2\">list</span> handleMessage <span class=\"re0\">$channel</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> handleMessage <span class=\"br0\">{</span>channel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$channel</span> line<span class=\"br0\">]</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        disconnect <span class=\"re0\">$channel</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"br0\">[</span><span class=\"kw2\">string</span> trimleft <span class=\"re0\">$line</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"/\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> words <span class=\"br0\">[</span>lassign <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$line</span><span class=\"br0\">]</span><span class=\"br0\">]</span> command<span class=\"br0\">]</span><br/>            handleCommand <span class=\"re0\">$command</span> <span class=\"re0\">$words</span> <span class=\"re0\">$channel</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            echo <span class=\"re0\">$line</span> <span class=\"re0\">$channel</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> disconnect <span class=\"br0\">{</span>channel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    dict unset connections <span class=\"re0\">$channel</span><br/>    <span class=\"kw2\">fileevent</span> <span class=\"re0\">$channel</span> readable <span class=\"st0\">\"\"</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$channel</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> handleCommand <span class=\"br0\">{</span>command words channel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    <span class=\"kw1\">switch</span> -exact -- <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$command</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        /nick <span class=\"br0\">{</span><br/>            dict <span class=\"kw1\">set</span> connections <span class=\"re0\">$channel</span> nick <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$words</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        /quit <span class=\"br0\">{</span><br/>            echo bye <span class=\"re0\">$channel</span><br/>            disconnect <span class=\"re0\">$channel</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"re0\">$channel</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>$command<span class=\"es0\">\\\"</span> not implemented\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> echo <span class=\"br0\">{</span>message senderchannel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> connections<br/>    <span class=\"kw1\">foreach</span> channel <span class=\"br0\">[</span>dict keys <span class=\"re0\">$connections</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$channel</span> ne <span class=\"re0\">$senderchannel</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> <span class=\"br0\">[</span><span class=\"kw2\">clock</span> <span class=\"kw2\">format</span> <span class=\"br0\">[</span><span class=\"kw2\">clock</span> seconds<span class=\"br0\">]</span> -<span class=\"kw2\">format</span> <span class=\"st0\">\"%T\"</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> nick <span class=\"br0\">[</span>dict get <span class=\"re0\">$connections</span> <span class=\"re0\">$channel</span> nick<span class=\"br0\">]</span><br/>            <span class=\"kw2\">puts</span> <span class=\"re0\">$channel</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"<span class=\"es0\">\\[</span>%s<span class=\"es0\">\\]</span>\u00a0%s:\u00a0%s\"</span> <span class=\"re0\">$time</span> <span class=\"re0\">$nick</span> <span class=\"re0\">$message</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main</pre>"}, {"lang": "UnixPipes", "loc": 2, "block": "<pre class=\"bash highlighted_source\">: <span class=\"sy0\">&gt;/</span>tmp<span class=\"sy0\">/</span>buffer<br/><span class=\"kw2\">tail</span> <span class=\"re5\">-f</span> <span class=\"sy0\">/</span>tmp<span class=\"sy0\">/</span>buffer <span class=\"sy0\">|</span> nc <span class=\"re5\">-l</span> 127.0.0.1 <span class=\"nu0\">1234</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sh</span> <span class=\"sy0\">&gt;/</span>tmp<span class=\"sy0\">/</span>buffer <span class=\"nu0\">2</span><span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">1</span></pre>"}]}