{"task": "Horner%27s_rule_for_polynomial_evaluation", "blocks": [{"lang": "360 Assembly", "loc": 21, "block": "<pre class=\"text highlighted_source\">*        Horner's rule for polynomial evaluation - 07/10/2015<br/>HORNER   CSECT<br/>         USING  HORNER,R15         set base register<br/>         SR     R5,R5              accumulator=0<br/>         LA     R2,N               i=number_of_coeff<br/>LOOP     M      R4,X               accumulator=accumulator*x<br/>         LR     R1,R2              i<br/>         SLA    R1,2               i*4<br/>         L      R3,COEF-4(R1)      coef(i)<br/>         AR     R5,R3              accumulator=accumulator+coef(i)<br/>         BCT    R2,LOOP            i=i-1; loop n times<br/>         XDECO  R5,PG              edit accumulator <br/>         XPRNT  PG,12              print buffer<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>COEF     DC     F'-19',F'7',F'-4',F'6'    &lt;== input values<br/>X        DC     F'3'                      &lt;== input value<br/>N        EQU    (X-COEF)/4         number of coefficients <br/>PG       DS     CL12               buffer<br/>         YREGS<br/>         END    HORNER</pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> horner <span class=\"br0\">(</span>ps x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp ps<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first ps<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>* x <span class=\"br0\">(</span>horner <span class=\"br0\">(</span>rest ps<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 17, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Float_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Horners_Rule <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Coef <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Horner<span class=\"br0\">(</span>Coeffs: Coef; Val: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Res\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> P <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> Coeffs'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Res\u00a0:= Res*Val + Coeffs<span class=\"br0\">(</span>P<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Res;<br/>   <span class=\"kw1\">end</span> Horner;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put<span class=\"br0\">(</span>Horner<span class=\"br0\">(</span>Coeffs =&gt; <span class=\"br0\">(</span>-<span class=\"nu0\">19.0</span>, <span class=\"nu0\">7.0</span>, -<span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span>, Val =&gt; <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>, Aft=&gt;<span class=\"nu0\">1</span>, Exp=&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Horners_Rule;</pre>"}, {"lang": "Aime", "loc": 23, "block": "<pre class=\"text highlighted_source\">real<br/>horner(list coeffs, real x)<br/>{<br/>    real c, z;<br/>\u00a0<br/>    z = 0;<br/>\u00a0<br/>    for (, c of coeffs) {<br/>        z *= x;<br/>        z += c;<br/>    }<br/>\u00a0<br/>    z;<br/>}<br/>\u00a0<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    o_(horner(list(-19r, 7.0, -4r, 6r), 3), \"\\n\");<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> horner <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span> c<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span> <span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">REAL</span> res <span class=\"sy1\">:=</span> <span class=\"re1\">0.0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> c <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> c <span class=\"kw2\">DO</span><br/>    res <span class=\"sy1\">:=</span> res <span class=\"sy1\">*</span> x <span class=\"sy1\">+</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  res<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>4<span class=\"br0\">]</span><span class=\"kw3\">REAL</span> coeffs <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"re1\">-19.0</span><span class=\"sy1\">,</span> <span class=\"re1\">7.0</span><span class=\"sy1\">,</span> <span class=\"re1\">-4.0</span><span class=\"sy1\">,</span> <span class=\"re1\">6.0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span> horner<span class=\"br0\">(</span>coeffs<span class=\"sy1\">,</span> <span class=\"re1\">3.0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ATS", "loc": 24, "block": "<pre class=\"text highlighted_source\">#include<br/>\"share/atspre_staload.hats\"<br/>\u00a0<br/>fun<br/>horner<br/>(<br/>  x: int, cs: List int<br/>)\u00a0: int = let<br/>//<br/>implement<br/>list_foldright$fopr&lt;int&gt;&lt;int&gt; (a, b) = a + b * x<br/>//<br/>in<br/>  list_foldright&lt;int&gt;&lt;int&gt; (cs, 0)<br/>end // end of [horner]<br/>\u00a0<br/>implement<br/>main0 () = let<br/>  val x = 3<br/>  val cs = $list{int}(~19, 7, ~4, 6)<br/>  val res = horner (x, cs)<br/>in<br/>  println! (res)<br/>end // end of [main0]</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">Coefficients <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><br/>x <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% EvalPolynom<span class=\"br0\">(</span>Coefficients<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>EvalPolynom<span class=\"br0\">(</span>Coefficients<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; using Horner's rule</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Co<span class=\"sy0\">,</span> coefficients<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span><br/>    Result <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% Co0<br/>        i <span class=\"sy0\">:=</span> Co0 <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> Result <span class=\"sy0\">:=</span> Result <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> Co<span class=\"re0\">%i%</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Result<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 12, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw6\">function</span> horner<span class=\"br0\">(</span>x, A<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tacc = <span class=\"nu0\">0</span>;\t<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"kw4\">length</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span>; <span class=\"nu0\">0</span><span class=\"sy2\">&lt;</span>i; i<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tacc = acc<span class=\"sy3\">*</span>x <span class=\"sy3\">+</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span> acc;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">split</span><span class=\"br0\">(</span>p,P<span class=\"br0\">)</span>;<br/>\t<span class=\"kw5\">print</span> horner<span class=\"br0\">(</span>x,P<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 25, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:horners a:-19 b:7 c:-4 d:6 x:3<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:horners x:3 a:-19 c:-4 d:6 b:7<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">horners</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> b=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> c=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> d=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> x=0<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1,2 delims=:\" <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">%%</span><span class=\"re3\">i</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">j</span>=<span class=\"sy0\">%%</span><span class=\"re3\">k</span><br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a return=<span class=\"sy0\">((((</span>0<span class=\"sy0\">)</span>*<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">d</span><span class=\"sy0\">%)</span>*<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span>+<span class=\"sy0\">(%</span><span class=\"re3\">c</span><span class=\"sy0\">%))</span>*<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">b</span><span class=\"sy0\">%)</span>*<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span>+<span class=\"sy0\">(%</span><span class=\"re3\">a</span><span class=\"sy0\">%)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">return</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      DIM coefficients(3)<br/>      coefficients() = -19, 7, -4, 6<br/>      PRINT FNhorner(coefficients(), 3)<br/>      END<br/>\u00a0<br/>      DEF FNhorner(coeffs(), x)<br/>      LOCAL i%, v<br/>      FOR i% = DIM(coeffs(), 1) TO 0 STEP -1<br/>        v = v * x + coeffs(i%)<br/>      NEXT<br/>      = v</pre>"}, {"lang": "Bracmat", "loc": 12, "block": "<pre class=\"text highlighted_source\">( ( Horner<br/>  =   accumulator coefficients x coeff<br/>    .  \u00a0!arg:(?coefficients.?x)<br/>      &amp; 0:?accumulator<br/>      &amp;   whl<br/>        ' (\u00a0!coefficients:?coefficients #%@?coeff<br/>          &amp;\u00a0!accumulator*!x+!coeff:?accumulator<br/>          )<br/>      &amp;\u00a0!accumulator<br/>  )<br/>&amp; Horner$(-19 7 -4 6.3)<br/>);</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> horner<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>coeffs<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">double</span> res <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    res <span class=\"sy0\">=</span> res <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coeffs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> coeffs<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu16\">19.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">7.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">6.0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%5.1f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> horner<span class=\"br0\">(</span>coeffs<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>coeffs<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 16, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> Horner<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> coefficients, <span class=\"kw4\">double</span> variable<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> coefficients<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span>accumulator, coefficient<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> accumulator <span class=\"sy0\">*</span> variable <span class=\"sy0\">+</span> coefficient<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Horner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">19.0</span>, <span class=\"nu0\">7.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span> <span class=\"br0\">}</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 21, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> horner<span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> v, <span class=\"kw4\">double</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_reverse_iterator</span> i <span class=\"sy1\">=</span> v.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    s <span class=\"sy1\">=</span> s<span class=\"sy2\">*</span>x <span class=\"sy2\">+</span> <span class=\"sy2\">*</span>i<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> s<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> c<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">19</span>, <span class=\"nu0\">7</span>, <span class=\"sy2\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span>c, c <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> horner<span class=\"br0\">(</span>v, <span class=\"nu16\">3.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> horner <span class=\"br0\">[</span>coeffs x<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> #<span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"sy0\">%</span>1 <span class=\"br0\">(</span><span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> coeffs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>horner <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span> <span class=\"nu0\">7</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>eval_poly = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> coefficients<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># coefficients are for ascending powers</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> coefficients.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>  ones_place = coefficients.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  x <span class=\"sy0\">*</span> eval_poly<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> coefficients<span class=\"br0\">)</span> <span class=\"sy0\">+</span> ones_place<br/>\u00a0<br/>console.<span class=\"me1\">log</span> eval_poly <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"co1\"># 128</span><br/>console.<span class=\"me1\">log</span> eval_poly <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\"># 1234</span><br/>console.<span class=\"me1\">log</span> eval_poly <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\"># 19</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> horner <span class=\"br0\">(</span>coeffs x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>coef acc<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* acc x<span class=\"br0\">)</span> coef<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  coeffs <span class=\"sy0\">:</span><span class=\"me1\">from-end</span> t <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> <span class=\"nu16\">3.0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">real</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pp <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    poly<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pp<span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeHornerPolynomial<span class=\"br0\">(</span>coefficients <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/List\"><span class=\"kw6\">List</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> indexing <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>coefficients.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">descending</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> hornerPolynomial<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> acc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> indexing <span class=\"br0\">{</span><br/>            acc <span class=\"sy0\">:=</span> acc <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coefficients<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        return acc<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>horner x poly<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>foldr <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>coeff acc<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ coeff <span class=\"br0\">(</span>* acc x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> poly<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>horner <span class=\"nu0\">3</span> '<span class=\"br0\">(</span>-<span class=\"nu0\">19</span> <span class=\"nu0\">7</span> -<span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">128</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 12, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>\u00a0<br/>horner = (:coefficients:variable)<br/>[<br/>    ^ coefficients clone; sequenceReverse; accumulate(Real new) with(:accumulator:coefficient)(accumulator * variable + coefficient)<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(horner((-19.0r, 7.0r, -4.0r, 6.0r), 3.0r)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">horner = fn(list, x)-&gt; List.foldr(list, 0, fn(c,acc)-&gt; x*acc+c end) end<br/>\u00a0<br/>IO.puts horner.([-19,7,-4,6], 3)</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun horner (coeffs x)<br/>  (reduce #'(lambda (coef acc) (+ (* acc x) coef) )<br/>\t  coeffs\u00a0:from-end t\u00a0:initial-value 0) )<br/>\u00a0<br/>(horner '(-19 7 -4 6) 3)<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"re3\">horner</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"sy3\">*</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"re5\">C</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">t</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">horner</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy3\">-</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM HORNER<br/>\u00a0<br/>!                        2   3<br/>! polynomial is -19+7x-4x +6x<br/>!<br/>\u00a0<br/>DIM C[3]<br/>\u00a0<br/>PROCEDURE HORNER(C[],X-&gt;RES)<br/>  LOCAL I%,V<br/>  FOR I%=UBOUND(C,1) TO 0 STEP -1 DO<br/>     V=V*X+C[I%]<br/>  END FOR<br/>  RES=V<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  C[]=(-19,7,-4,6)<br/>  HORNER(C[],3-&gt;RES)<br/>  PRINT(RES)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function horner (x,v) ...<br/>$  n=cols(v); res=v{n};<br/>$  loop 1 to n-1; res=res*x+v{n-#}; end;<br/>$  return res<br/>$endfunction<br/>&gt;v=[-19,7,-4,6]<br/> [ -19  7  -4  6 ]<br/>&gt;horner(2,v) // test Horner<br/> 27<br/>&gt;evalpoly(2,v) // built-in Horner<br/> 27<br/>&gt;horner(I,v) // complex values<br/> -15+1i<br/>&gt;horner(1\u00b10.05,v) // interval values<br/> ~-10.9,-9.11~<br/>&gt;function p(x) &amp;= sum(@v[k]*x^(k-1),k,1,4) // Symbolic Polynomial<br/>                            3      2<br/>                         6 x  - 4 x  + 7 x - 19<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> horner l x <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> l <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span> <span class=\"kw1\">fun</span> acc c <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">*</span>acc<span class=\"sy0\">+</span>c<span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>horner <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"sy0\">;-</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">: horner ( coeff x -- res )<br/>    [ &lt;reversed&gt; 0 ] dip '[ [ _ * ] dip + ] reduce\u00a0;</pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: fhorner ( coeffs len F: x -- F: val )<br/>  0e<br/>  floats bounds\u00a0?do<br/>    fover f*  i <a class=\"__cf_email__\" data-cfemail=\"84e2c4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> f+<br/>  1 floats +loop<br/>  fswap fdrop\u00a0;<br/>\u00a0<br/>create coeffs 6e f, -4e f, 7e f, -19e f,<br/>\u00a0<br/>coeffs 4 3e fhorner f.    \\ 128.</pre>"}, {"lang": "Fortran", "loc": 24, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test_horner<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(f5.1)'</span><span class=\"br0\">)</span> horner <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/-</span><span class=\"nu0\">19.0</span>, <span class=\"nu0\">7.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> horner <span class=\"br0\">(</span>coeffs, x<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">coeffs</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    res <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">size</span> <span class=\"br0\">(</span>coeffs<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      res <span class=\"sy0\">=</span> res <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coeffs <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> horner<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_horner</pre>"}, {"lang": "FunL", "loc": 5, "block": "<pre class=\"text highlighted_source\">import lists.foldr<br/>\u00a0<br/>def horner( poly, x ) = foldr( \\a, b -&gt; a + b*x, 0, poly )<br/>\u00a0<br/>println( horner([-19, 7, -4, 6], 3) )</pre>"}, {"lang": "GAP", "loc": 32, "block": "<pre class=\"text highlighted_source\"># The idiomatic way to compute with polynomials<br/>\u00a0<br/>x\u00a0:= Indeterminate(Rationals, \"x\");<br/>\u00a0<br/># This is a value in a polynomial ring, not a function<br/>p\u00a0:= 6*x^3 - 4*x^2 + 7*x - 19;<br/>\u00a0<br/>Value(p, 3);<br/># 128<br/>\u00a0<br/>u\u00a0:= CoefficientsOfUnivariatePolynomial(p);<br/># [ -19, 7, -4, 6 ]<br/>\u00a0<br/># One may also create the polynomial from coefficients<br/>q\u00a0:= UnivariatePolynomial(Rationals, [-19, 7, -4, 6], x);<br/># 6*x^3-4*x^2+7*x-19<br/>\u00a0<br/>p = q;<br/># true<br/>\u00a0<br/># Now a Horner implementation<br/>Horner\u00a0:= function(coef, x)<br/>\tlocal v, c;<br/>\tv\u00a0:= 0;<br/>\tfor c in Reversed(coef) do<br/>\t\tv\u00a0:= x*v + c;<br/>\tod;<br/>\treturn v;<br/>end;<br/>\u00a0<br/>Horner(u, 3);<br/># 128</pre>"}, {"lang": "Go", "loc": 14, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> horner<span class=\"sy1\">(</span>x <span class=\"kw4\">int64</span><span class=\"sy1\">,</span> c <span class=\"sy1\">[]</span><span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>acc <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        acc <span class=\"sy2\">=</span> acc<span class=\"sy3\">*</span>x <span class=\"sy3\">+</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>horner<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int64</span><span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> hornersRule <span class=\"sy0\">=</span> <span class=\"br0\">{</span> coeff, x <span class=\"sy0\">-&gt;</span> coeff.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> accum, c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>accum <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">horner <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/>horner x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span>\\a b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> horner <span class=\"nu0\">3</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 12, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> x<span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> coeffs<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">DATA</span>    coeffs<span class=\"sy1\">/-</span><span class=\"nu0\">19.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">7.0</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">4.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">6.0</span><span class=\"sy1\">/</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> Horner<span class=\"br0\">(</span>coeffs<span class=\"sy1\">,</span> x<span class=\"br0\">)</span> <span class=\"co1\">! shows 128</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Horner<span class=\"br0\">(</span>c<span class=\"sy1\">,</span> x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">DIMENSION</span> c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   Horner <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>      Horner <span class=\"sy1\">=</span> x<span class=\"sy1\">*</span>Horner <span class=\"sy1\">+</span> c<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> poly_eval <span class=\"br0\">(</span>x<span class=\"sy1\">,</span> coeffs<span class=\"br0\">)</span><br/>  accumulator <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">every</span> index <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>coeffs <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> by <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <br/>    accumulator <span class=\"sy1\">:=</span> accumulator <span class=\"sy1\">*</span> x <span class=\"sy1\">+</span> coeffs<span class=\"br0\">[</span>index<span class=\"br0\">]</span><br/>  <span class=\"kw1\">return</span> accumulator<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>poly_eval <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>\u00a0<br/>   horner =: <span class=\"nu0\">4</span>\u00a0:  <span class=\"st_h\">'  (+ *&amp;y)/x'</span>   <br/>\u00a0<br/>   horner1 =: <span class=\"sy0\">(</span>#.\"<span class=\"nu0\">0</span> <span class=\"nu0\">_</span> |.<span class=\"sy0\">)</span>~<br/>\u00a0<br/>   horner2=: [: +`*/ [: }: ,@,.    <span class=\"co1\">NB. Alternate</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 23, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Horner <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> coeffs = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        coeffs.<span class=\"me1\">add</span><span class=\"br0\">(</span>-<span class=\"nu0\">19.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        coeffs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        coeffs.<span class=\"me1\">add</span><span class=\"br0\">(</span>-<span class=\"nu0\">4.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        coeffs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>polyEval<span class=\"br0\">(</span>coeffs, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> polyEval<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> coefficients, <span class=\"kw3\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span>coefficients<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> accumulator = coefficients.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> coefficients.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            accumulator = <span class=\"br0\">(</span>accumulator <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> + <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"br0\">)</span> coefficients.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> accumulator<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> horner<span class=\"br0\">(</span>coeffs<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> coeffs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> coeff<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>acc <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coeff<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>horner<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// ==&gt; 128</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">function horner(coefs, x)<br/>    s = coefs[end]<br/>    for k in length(coefs)-1:-1:1<br/>        s = coefs[k] + x * s<br/>    end<br/>    return s<br/>end<br/>\u00a0<br/>@show horner([-19, 7, -4, 6], 3)</pre>"}, {"lang": "K", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  horner:{y _sv|x}<br/>  horner[-19 7 -4 6;3]<br/>128<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun horner<span class=\"br0\">(</span>coeffs<span class=\"sy0\">:</span> DoubleArray, x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in coeffs.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">*</span> x + coeffs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> coeffs <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">19.0</span>, <span class=\"nu0\">7.0</span>, -<span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>horner<span class=\"br0\">(</span>coeffs, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 20, "block": "<pre class=\"lb highlighted_source\">src$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/>coefficients$ <span class=\"sy0\">=</span> <span class=\"st0\">\"-19 7 -4 6\"</span> <span class=\"co1\">' list coefficients of all x^0..x^n in order</span><br/>x <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/><span class=\"kw1\">print</span> horner<span class=\"br0\">(</span>coefficients$<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>      <span class=\"co1\">'128</span><br/>\u00a0<br/><span class=\"kw1\">print</span> horner<span class=\"br0\">(</span><span class=\"st0\">\"4  3  2  1\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>      <span class=\"co1\">'1234</span><br/><span class=\"kw1\">print</span> horner<span class=\"br0\">(</span><span class=\"st0\">\"1  1  0  0  1\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"co1\">'19</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> horner<span class=\"br0\">(</span>coefficients$<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>    accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"co1\">'getting length of a list requires extra pass with WORD$.</span><br/>    <span class=\"co1\">'So we just started from high above</span><br/>    <span class=\"kw1\">for</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">100</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        cft$ <span class=\"sy0\">=</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span>coefficients$<span class=\"sy0\">,</span> index<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> cft$<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> accumulator <span class=\"sy0\">=</span> <span class=\"br0\">(</span> accumulator <span class=\"sy0\">*</span> x <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>cft$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    horner <span class=\"sy0\">=</span> accumulator<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 6, "block": "<pre class=\"text highlighted_source\">to horner\u00a0:x\u00a0:coeffs<br/>  if empty?\u00a0:coeffs [output 0]<br/>  output (first\u00a0:coeffs) + (:x * horner\u00a0:x bf\u00a0:coeffs)<br/>end<br/>\u00a0<br/>show horner 3 [-19 7 -4 6]  \u00a0; 128</pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> horners_rule<span class=\"br0\">(</span> coeff<span class=\"sy0\">,</span> x <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> res <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>    <br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>coeff<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        res <span class=\"sy0\">=</span> res <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coeff<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> res<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>x <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>coefficients <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> horners_rule<span class=\"br0\">(</span> coefficients<span class=\"sy0\">,</span> x <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>applyhorner:=(L::list,x)-&gt;foldl((s,t)-&gt;s*x+t,op(ListTools:-Reverse(L))):<br/>\u00a0<br/>applyhorner([-19,7,-4,6],x);<br/>\u00a0<br/>applyhorner([-19,7,-4,6],3);<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 6, "block": "<pre class=\"text highlighted_source\">Horner[l_List, x_]\u00a0:= Fold[x #1 + #2 &amp;, 0, l]<br/>Horner[{6, -4, 7, -19}, x]<br/>-&gt; -19 + x (7 + x (-4 + 6 x))<br/>\u00a0<br/>-19 + x (7 + x (-4 + 6 x)) /. x -&gt; 3<br/>-&gt; 128</pre>"}, {"lang": "MATLAB", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> accumulator = hornersRule<span class=\"br0\">(</span>x,coefficients<span class=\"br0\">)</span><br/>\u00a0<br/>    accumulator = <span class=\"nu0\">0</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span>numel<span class=\"br0\">(</span>coefficients<span class=\"br0\">)</span>:-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        accumulator = <span class=\"br0\">(</span>accumulator * x<span class=\"br0\">)</span> + coefficients<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 45, "block": "<pre class=\"text highlighted_source\">/* Function horner already exists in Maxima, though it operates on expressions, not lists of coefficients */<br/>horner(5*x^3+2*x+1);<br/>x*(5*x^2+2)+1<br/>\u00a0<br/>/* Here is an implementation */<br/>horner2(p, x)\u00a0:= block([n, y, i],<br/>   n: length(p),<br/>   y: p[n],<br/>   for i: n - 1 step -1 thru 1 do y: y*x + p[i],<br/>   y<br/>)$<br/>\u00a0<br/>horner2([-19, 7, -4, 6], 3);<br/>128<br/>\u00a0<br/>/* Another with rreduce */<br/>horner3(p,x):=rreduce(lambda([a,y],x*y+a),p);<br/>horner3([a,b,c,d,e,f],x);<br/>x*(x*(x*(x*(f*x+e)+d)+c)+b)+a<br/>\u00a0<br/>/* Extension to compute also derivatives up to a specified order.<br/>   See William Kahan, Roundoff in Polynomial Evaluation, 1986<br/>   http://www.cs.berkeley.edu/~wkahan/Math128/Poly.pdf */<br/>\u00a0<br/>poleval(a, x, [m])\u00a0:= block(<br/>   [n: length(a), v, k: 1],<br/>   if emptyp(m) then m: 1 else m: 1 + first(m),<br/>   v: makelist(0, m),<br/>   v[1]: a[n],<br/>   for i from n - 1 thru 1 step -1 do (<br/>      for j from m thru 2 step -1 do v[j]: v[j] * x + v[j - 1],<br/>      v[1]: v[1] * x + a[i]<br/>   ),<br/>   for i from 2 thru m do (<br/>      v[i]: v[i] * k,<br/>      k: k * i<br/>   ),<br/>   if m = 1 then first(v) else v<br/>)$<br/>\u00a0<br/>poleval([0, 0, 0, 0, 1], x, 4);<br/>[x^4, 4 * x^3, 12 * x^2, 24 * x, 24]<br/>\u00a0<br/>poleval([0, 0, 0, 0, 1], x);<br/>x^4</pre>"}, {"lang": "Mercury", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module horner.<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>:- implementation.<br/>:- import_module int, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.format(\"%i\\n\", [i(horner(3, [-19, 7, -4, 6]))],\u00a0!IO).<br/>\u00a0<br/>:- func horner(int, list(int)) = int.<br/>\u00a0<br/>horner(X, Cs) = list.foldr((func(C, Acc) = Acc * X + C), Cs, 0).<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u0418\u041f0\t1\t+\t\u041f0<br/>\u0418\u041fE\t\u0418\u041fD\t*\t\u041a\u0418\u041f0\t+\t\u041fE<br/>\u0418\u041f0\t1\t-\tx=0\t04<br/>\u0418\u041fE\t\u0421/\u041f</pre>"}, {"lang": "Modula-2", "loc": 29, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Horner;<br/><span class=\"kw1\">FROM</span> RealStr <span class=\"kw1\">IMPORT</span> RealToStr;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Horner<span class=\"br0\">(</span>coeff <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>; x <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">VAR</span><br/>    ans <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    ans <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>coeff<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        ans <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>ans <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> coeff<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> ans<br/><span class=\"kw1\">END</span> Horner;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> A <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    coeff <span class=\"sy0\">:</span> A;<br/>    ans <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    coeff <span class=\"sy0\">:=</span> A<span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">19.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6.0</span><span class=\"br0\">}</span>;<br/>    ans <span class=\"sy0\">:=</span> Horner<span class=\"br0\">(</span>coeff<span class=\"sy0\">,</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>ans<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    ReadChar<br/><span class=\"kw1\">END</span> Horner.</pre>"}, {"lang": "NetRexx", "loc": 12, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>c = <span class=\"br0\">[</span>-<span class=\"nu0\">19</span>, <span class=\"nu0\">7</span>, -<span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"co1\">-- # list coefficients of all x^0..x^n in order</span><br/>n=<span class=\"nu0\">3</span><br/>x=<span class=\"nu0\">3</span><br/>r=<span class=\"nu0\">0</span><br/><span class=\"kw1\">loop</span> i=n to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><br/>  r=r<span class=\"sy0\">*</span>x+c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> r<br/><span class=\"kw1\">Say</span> <span class=\"nu0\">6</span><span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">3</span>-<span class=\"nu0\">4</span><span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+<span class=\"nu0\">7</span><span class=\"sy0\">*</span>x-<span class=\"nu0\">19</span></pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\"># You can also just use `reversed` proc from stdlib `algorithm` module<br/>iterator reversed[T](x: openArray[T]): T =<br/>  for i in countdown(x.high, x.low):<br/>    yield x[i]<br/>\u00a0<br/>proc horner[T](coeffs: openArray[T], x: T): int =<br/>  for c in reversed(coeffs):<br/>    result = result * x + c<br/>\u00a0<br/>echo horner([-19, 7, -4, 6], 3)</pre>"}, {"lang": "Oberon-2", "loc": 30, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> HornerRule;<br/><span class=\"kw1\">IMPORT</span> <br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  Coefs <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>  coefs<span class=\"sy0\">:</span> Coefs;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Eval<span class=\"br0\">(</span>coefs<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;size<span class=\"sy0\">,</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>acc<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  acc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>coefs<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\tacc <span class=\"sy0\">:=</span> acc <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coefs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> acc<br/><span class=\"kw1\">END</span> Eval;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>coefs<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>  coefs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span>;<br/>  coefs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">7</span>;<br/>  coefs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span>;<br/>  coefs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">6</span>;<br/>  Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Eval<span class=\"br0\">(</span>coefs^<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> HornerRule.<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 42, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>mfunc<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"br0\">(</span>HornerRule<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>horner<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>reversedArray;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>injectDouble<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>s with<span class=\"sy0\">:</span> <span class=\"br0\">(</span>mfunc<span class=\"br0\">)</span>op;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"br0\">(</span>HornerRule<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>reversedArray<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self reverseObjectEnumerator<span class=\"br0\">]</span> allObjects<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>injectDouble<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>s with<span class=\"sy0\">:</span> <span class=\"br0\">(</span>mfunc<span class=\"br0\">)</span>op<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> s;<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a><span class=\"sy0\">*</span> el <span class=\"kw1\">in</span> self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>sum, <span class=\"br0\">[</span>el doubleValue<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> sum;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>horner<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self reversedArray<span class=\"br0\">]</span> injectDouble<span class=\"sy0\">:</span> <span class=\"nu0\">0.0</span> with<span class=\"sy0\">:</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> s, <span class=\"kw4\">double</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> s <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> a; <span class=\"br0\">}</span> <span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>coeff <span class=\"sy0\">=</span> @<span class=\"br0\">[</span>@<span class=\"sy0\">-</span><span class=\"nu0\">19.0</span>, @<span class=\"nu0\">7.0</span>, @<span class=\"sy0\">-</span><span class=\"nu0\">4.0</span>, @<span class=\"nu0\">6.0</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>coeff horner<span class=\"sy0\">:</span> <span class=\"nu0\">3.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objeck", "loc": 21, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Horner <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    coeffs <span class=\"sy0\">:=</span> Collection.FloatVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>    coeffs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">19.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    coeffs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    coeffs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">4.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    coeffs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    PolyEval<span class=\"br0\">(</span>coeffs<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> PolyEval<span class=\"br0\">(</span>coefficients <span class=\"sy0\">:</span> Collection.FloatVector <span class=\"sy0\">,</span> x <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>    accumulator <span class=\"sy0\">:=</span> coefficients<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>coefficients<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> coefficients<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       accumulator <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>accumulator <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> coefficients<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> accumulator<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> horner coeffs x <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc coef <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coef<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev coeffs<span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> horner <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> coeffs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  horner coeffs <span class=\"nu0\">3</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">128</span></pre>"}, {"lang": "Octave", "loc": 8, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> horner<span class=\"br0\">(</span>a<span class=\"sy5\">,</span> x<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <span class=\"nu19\">0.0</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><br/>    r <span class=\"sy3\">=</span> r<span class=\"sy1\">*</span>x <span class=\"sy1\">+</span> a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>horner<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">19</span><span class=\"sy5\">,</span> <span class=\"nu0\">7</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 12, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* Rexx ---------------------------------------------------------------<br/>* 04.03.2014 Walter Pachl<br/>*--------------------------------------------------------------------*/</span><br/>c = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span>-<span class=\"nu0\">19</span>,<span class=\"nu0\">7</span>,-<span class=\"nu0\">4</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"co1\">-- coefficients of all x^0..x^n in order</span><br/>n=<span class=\"nu0\">3</span><br/>x=<span class=\"nu0\">3</span><br/>r=<span class=\"nu0\">0</span><br/><span class=\"kw1\">loop</span> i=n+<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> <span class=\"nu0\">1</span> <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span><br/>  r=r<span class=\"sy0\">*</span>x+c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> r<br/><span class=\"kw1\">Say</span> <span class=\"nu0\">6</span><span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">3</span>-<span class=\"nu0\">4</span><span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+<span class=\"nu0\">7</span><span class=\"sy0\">*</span>x-<span class=\"nu0\">19</span></pre>"}, {"lang": "Oz", "loc": 13, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Horner</span> Coeffs X<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldL1 <span class=\"br0\">{</span>Reverse Coeffs<span class=\"br0\">}</span> <br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Acc Coeff<span class=\"br0\">}</span><br/>         Acc<span class=\"sy0\">*</span>X <span class=\"sy0\">+</span> Coeff<br/>      <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">FoldL1</span> X<span class=\"sy0\">|</span>Xr Fun<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldL Xr Fun X<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Horner <span class=\"br0\">[</span><span class=\"sy0\">~</span>19 7 <span class=\"sy0\">~</span>4 6<span class=\"br0\">]</span> 3<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">horner<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>s<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>#v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>s<span class=\"sy0\">=</span>s<span class=\"sy0\">*</span>x<span class=\"sy0\">+</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  s<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 18, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> HornerDemo<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> horner<span class=\"br0\">(</span>a<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> double<span class=\"sy1\">;</span> x<span class=\"sy1\">:</span> double<span class=\"br0\">)</span><span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    horner <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"br0\">[</span>high<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> high<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> low<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      horner <span class=\"sy1\">:</span><span class=\"sy3\">=</span> horner <span class=\"sy3\">*</span> x <span class=\"sy3\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  poly<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> double <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">19.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">7.0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">4.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"st0\">'Horner calculated polynomial of 6*x^3 - 4*x^2 + 7*x - 19 for x = 3: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>horner <span class=\"br0\">(</span>poly<span class=\"sy1\">,</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> 5<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> horner<span class=\"br0\">(</span>\\<span class=\"sy0\">@</span><span class=\"co5\">$)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$coef</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$result</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@$coef</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@coeff</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">19.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>say horner <span class=\"re0\">@coeff</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> horner <span class=\"br0\">(</span> <span class=\"re0\">@coeffs</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">@coeffs</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">.</span><span class=\"kw3\">reduce</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$^a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$^b</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> horner<span class=\"br0\">(</span> <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">function horner(atom x, sequence coeff)<br/>atom res = 0<br/>    for i=length(coeff) to 1 by -1 do<br/>        res = res*x + coeff[i]<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>?horner(3,{-19, 7, -4, 6})</pre>"}, {"lang": "PHP", "loc": 12, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> horner<span class=\"br0\">(</span><span class=\"re0\">$coeff</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array_reverse\"><span class=\"kw3\">array_reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">$coeff</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$result</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$coeff</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu19\">19.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> horner<span class=\"br0\">(</span><span class=\"re0\">$coeff</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de horner (Coeffs X)<br/>   (let Res 0<br/>      (for C (reverse Coeffs)<br/>         (setq Res (+ C (* X Res))) ) ) )</pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare (i, n) fixed binary, (x, value) float; /* 11 May 2010 */<br/>get (x);<br/>get (n);<br/>begin;<br/>   declare a(0:n) float;<br/>   get list (a);<br/>   value = a(n);<br/>   do i = n to 1 by -1;<br/>      value = value*x + a(i-1);<br/>   end;<br/>   put (value);<br/>end;<br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 9, "block": "<pre class=\"text highlighted_source\">horner = (x, coef)\u00a0:<br/>   result = 0<br/>   coef reverse each (a)\u00a0:<br/>      result = (result * x) + a<br/>   .<br/>   result<br/>.<br/>\u00a0<br/>horner(3, (-19, 7, -4, 6)) print</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> horner<span class=\"br0\">(</span><span class=\"re0\">$coefficients</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$accumulator</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$coefficients</span>.Count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>        <span class=\"re0\">$accumulator</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$accumulator</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$coefficients</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$accumulator</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$coefficients</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>horner <span class=\"re0\">$coefficients</span> <span class=\"re0\">$x</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">horner<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _X<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>horner<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\thorner<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V1 <span class=\"sy3\">*</span> X <span class=\"sy3\">+</span> H<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Horner<span class=\"br0\">(</span>List Coefficients<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> result<br/>  <span class=\"kw1\">ForEach</span> Coefficients<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    result<span class=\"sy0\">*</span>b<span class=\"sy0\">+</span>Coefficients<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> horner<span class=\"br0\">(</span>coeffs<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>\tacc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">reversed</span><span class=\"br0\">(</span>coeffs<span class=\"br0\">)</span>:<br/>\t\tacc <span class=\"sy0\">=</span> acc * x + c<br/>\t<span class=\"kw1\">return</span> acc<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> horner<span class=\"br0\">(</span> <span class=\"br0\">(</span>-<span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> -<span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"nu0\">128</span></pre>"}, {"lang": "R", "loc": 9, "block": "<pre class=\"text highlighted_source\">horner &lt;- function(a, x) {<br/>  y &lt;- 0<br/>  for(c in rev(a)) {<br/>    y &lt;- y * x + c<br/>  }<br/>  y<br/>}<br/>\u00a0<br/>cat(horner(c(-19, 7, -4, 6), 3), \"\\n\")</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (horner x l) <br/>    (foldr (lambda (a b) (+ a (* b x))) 0 l))<br/>\u00a0<br/>(horner 3 '(-19 7 -4 6))<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 8, "block": "<pre class=\"text highlighted_source\">import List;<br/>\u00a0<br/>public int horners_rule(list[int] coefficients, int x){<br/>\tacc = 0;<br/>\tfor( i &lt;- reverse(coefficients)){<br/>\t\tacc = acc * x + i;}<br/>\treturn acc;<br/>}</pre>"}, {"lang": "REBOL", "loc": 11, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol []</span><br/>\u00a0<br/>horner: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>coeffs x<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    result: <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">foreach</span> i <span class=\"kw3\">reverse</span> coeffs <span class=\"br0\">[</span><br/>        result: <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> + i<br/>        <span class=\"br0\">]</span><br/>    <span class=\"kw2\">return</span> result<br/>    <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> horner <span class=\"br0\">[</span>-<span class=\"nu0\">19</span> <span class=\"nu0\">7</span> -<span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "REXX", "loc": 19, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates using    Horner's rule    for   polynomial evaluation.     */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">30</span>                                <span class=\"coMULTI\">/*use extra numeric precision.         */</span><br/><span class=\"kw1\">parse</span>  <span class=\"kw1\">arg</span>  x poly                               <span class=\"coMULTI\">/*get value of X and the coefficients. */</span><br/>$=                                               <span class=\"coMULTI\">/*start with a clean slate equation.   */</span><br/>       <span class=\"kw1\">do</span> deg=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>  poly==<span class=\"st0\">''</span>                 <span class=\"coMULTI\">/*get the equation's coefficients.     */</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> poly c<span class=\"sy0\">.</span>deg poly;  c<span class=\"sy0\">.</span>deg=c<span class=\"sy0\">.</span>deg<span class=\"sy0\">/</span><span class=\"nu0\">1</span> <span class=\"coMULTI\">/*get equation coefficient &amp; normalize.*/</span><br/>       <span class=\"kw1\">if</span> c<span class=\"sy0\">.</span>deg<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> c<span class=\"sy0\">.</span>deg= <span class=\"st0\">'+'</span>c<span class=\"sy0\">.</span>deg         <span class=\"coMULTI\">/*if \u00ac negative, then prefix with a  + */</span><br/>       $=$  c<span class=\"sy0\">.</span>deg                                <span class=\"coMULTI\">/*concatenate it to the equation.      */</span><br/>       <span class=\"kw1\">if</span> deg<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> c<span class=\"sy0\">.</span>deg<span class=\"sy0\">\\</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$<span class=\"st0\">'\u2219x^'</span>deg   <span class=\"coMULTI\">/*\u00ac1st coefficient &amp; \u00ac0?  Append X pow.*/</span><br/>       $=$ <span class=\"st0\">'  '</span>                                  <span class=\"coMULTI\">/*insert some blanks, make it look nice*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*deg*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'         x = '</span>   x<br/><span class=\"kw1\">say</span> <span class=\"st0\">'    degree = '</span>  deg<br/><span class=\"kw1\">say</span> <span class=\"st0\">'  equation = '</span>   $<br/>a=c<span class=\"sy0\">.</span>deg                                          <span class=\"coMULTI\">/*A:  is the accumulator  (or answer). */</span><br/>         <span class=\"kw1\">do</span> j=deg-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> deg;   a=a<span class=\"sy0\">*</span>x+c<span class=\"sy0\">.</span>j <span class=\"coMULTI\">/*apply Horner's rule to the equations.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*display a blank line for readability.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    answer = '</span> a                            <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>coefficients = [-19, 7, -4, 6] <br/>see \"x =  3\" + nl +<br/>\"degree =  3\" + nl +<br/>\"equation =  6*x^3-4*x^2+7*x-19\" + nl +<br/>\"result = \" + horner(coefficients, 3) + nl<br/>\u00a0<br/>func horner coeffs, x<br/>w = 0<br/>for n = len(coeffs) to 1 step -1<br/>    w = w * x + coeffs[n]<br/>next<br/>return w<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; a = [6, -4, 7, -19]<br/>           6            -4             7           -19<br/>&gt;&gt; x=3<br/>           3<br/>&gt;&gt; polyval(x, a)<br/>         128<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> horner<span class=\"br0\">(</span>coeffs, x<span class=\"br0\">)</span><br/>  coeffs.<span class=\"me1\">reverse</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>acc, coeff<span class=\"sy0\">|</span> acc <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> coeff<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">p</span> horner<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span>, <span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"co1\"># ==&gt; 128</span></pre>"}, {"lang": "Rust", "loc": 8, "block": "<pre class=\"text highlighted_source\">fn horner(v: &amp;[f64], x: f64) -&gt; f64 {<br/>    v.iter().rev().fold(0.0, |acc, coeff| acc*x + coeff)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let v = [-19., 7., -4., 6.];<br/>    println!(\"result: {}\", horner(&amp;v, 3.0));<br/>}</pre>"}, {"lang": "Run BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">coef$ = \"-19 7 -4 6\" ' list coefficients of all x^0..x^n in order<br/>x = 3<br/>print horner(coef$,x)                     '128<br/>print horner(\"1.2 2.3 3.4 4.5 5.6\", 8)    '25478.8<br/>print horner(\"5 4 3 2 1\", 10)             '12345<br/>print horner(\"1 0 1 1 1 0 0 1\", 2)        '157<br/>end<br/>\u00a0<br/>function horner(coef$,x)<br/>  while word$(coef$, i + 1) &lt;&gt; \"\"        <br/>     i = i + 1                          ' count the num of values<br/>  wend<br/>  for j = i to 1 step -1<br/>    accum = ( accum * x ) + val(word$(coef$, j))<br/>  next<br/>  horner = accum<br/>end function</pre>"}, {"lang": "Sather", "loc": 15, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  action(s, e, x:FLT):FLT is<br/>    return s*x + e;<br/>  end;<br/>\u00a0<br/>  horner(v:ARRAY{FLT}, x:FLT):FLT is<br/>    rv\u00a0::= v.reverse;<br/>    return rv.reduce(bind(action(_, _, x)));<br/>  end;<br/>\u00a0<br/>  main is<br/>    #OUT + horner(|-19.0, 7.0, -4.0, 6.0|, 3.0) + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> horner<span class=\"br0\">(</span>coeffs<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span>, x<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/>   coeffs.<span class=\"me1\">reverse</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">(</span>a,c<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">*</span>x+c<span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>horner lst x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>horner lst x acc<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> lst<span class=\"br0\">)</span><br/>        acc<br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>horner <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> acc x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>horner <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>horner <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span> <span class=\"nu0\">7</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 22, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const type: coeffType is array float;<br/>\u00a0<br/>const func float: horner (in coeffType: coeffs, in float: x) is func<br/>  result<br/>    var float: res is 0.0;<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range length(coeffs) downto 1 do<br/>      res\u00a0:= res * x + coeffs[i];<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const coeffType: coeffs is [] (-19.0, 7.0, -4.0, 6.0);<br/>  begin<br/>    writeln(horner(coeffs, 3.0) digits 1);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func horner<span class=\"br0\">(</span>coeff, x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    coeff.<span class=\"me1\">reverse</span>.<span class=\"me1\">reduce</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> b <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say horner<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">19</span>, <span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;   <span class=\"co1\"># =&gt; 128</span></pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">OrderedCollection</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">horner</span>: <span class=\"re5\">aValue</span> <span class=\"br0\">[</span><br/>    ^ <span class=\"kw1\">self</span> reverse inject: <span class=\"re5\">0</span> into: <span class=\"br0\">[</span>:<span class=\"re5\">acc</span>\u00a0:<span class=\"re5\">c</span> | acc * <span class=\"re5\">aValue</span> + <span class=\"re5\">c</span><span class=\"br0\">]</span>.<br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re2\">#<span class=\"br0\">(</span>-<span class=\"re5\">19</span> <span class=\"nu0\">7</span> -<span class=\"re5\">4</span> 6<span class=\"br0\">)</span></span> asOrderedCollection horner: <span class=\"re5\">3</span><span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">(* Assuming real type for coefficients and x *)<br/>fun horner coeffList x = foldr (fn (a, b) =&gt; a + b * x) (0.0) coeffList</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">func horner(coefs: [Double], x: Double) -&gt; Double {<br/>  return reduce(lazy(coefs).reverse(), 0) { $0 * x + $1 }<br/>}<br/>\u00a0<br/>println(horner([-19, 7, -4, 6], 3))</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> horner <span class=\"br0\">{</span>coeffs x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span>lreverse <span class=\"re0\">$coeffs</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span> <span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span>+<span class=\"re0\">$c</span> <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$y</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function Horner(x, ParamArray coeff())<br/>Dim result As Double<br/>Dim ncoeff As Integer<br/>\u00a0<br/>result = 0<br/>ncoeff = UBound(coeff())<br/>\u00a0<br/>For i = ncoeff To 0 Step -1<br/>  result = (result * x) + coeff(i)<br/>Next i<br/>Horner = result<br/>End Function<br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL x As Double<br/>LOCAL ARRAY aCoeffs[1]<br/>CLEAR<br/>CREATE CURSOR coeffs (c1 I, c2 I, c3 I, c4 I)<br/>INSERT INTO coeffs VALUES (-19,7,-4,6)<br/>SCATTER TO aCoeffs<br/>x = VAL(INPUTBOX(\"Value of x:\", \"Value\"))<br/>? EvalPoly(@aCoeffs, x)<br/>USE IN coeffs<br/>\u00a0<br/>FUNCTION EvalPoly(c, x As Double) As Double<br/>LOCAL s As Double, k As Integer, n As Integer<br/>n = ALEN(c)<br/>s = 0<br/>FOR k = n TO 1 STEP -1<br/>\ts = s*x + c[k]<br/>ENDFOR<br/>RETURN s<br/>ENDFUNC\t \t<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 11, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> horners_rule(coefficients,x)<br/>\taccumulator = 0<br/>\t<span class=\"kw3\">For</span> i = <span class=\"kw4\">UBound</span>(coefficients) <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>\t\taccumulator = (accumulator * x) + coefficients(i)<br/>\t<span class=\"kw3\">Next</span><br/>\thorners_rule = accumulator<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.WriteLine horners_rule(Array(-19,7,-4,6),3)<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 12, "block": "<pre class=\"text highlighted_source\">code IntOut=11;<br/>\u00a0<br/>func Horner(X, N, C);   \\Return value of polynomial in X<br/>int X, N, C;            \\variable, number of terms, coefficient list<br/>int A, I;<br/>[A:= 0;<br/>for I:= N-1 downto 0 do<br/>        A:= A*X + C(I);<br/>return A;<br/>];<br/>\u00a0<br/>IntOut(0, Horner(3, 4, [-19, 7, -4, 6]));</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn horner(coeffs,x)<br/>   { coeffs.reverse().reduce('wrap(a,coeff){ a*x + coeff },0.0) }</pre>"}]}