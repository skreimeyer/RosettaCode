{"task": "Sort_an_integer_array", "blocks": [{"lang": "4D", "loc": 8, "block": "<pre class=\"text highlighted_source\">ARRAY INTEGER($nums;0)<br/>APPEND TO ARRAY($nums;2)<br/>APPEND TO ARRAY($nums;4)<br/>APPEND TO ARRAY($nums;3)<br/>APPEND TO ARRAY($nums;1)<br/>APPEND TO ARRAY($nums;2)<br/>SORT ARRAY($nums)  ` sort in ascending order<br/>SORT ARRAY($nums;&lt;)  ` sort in descending order</pre>"}, {"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[ 10,2,100 ] ' n:cmp a:sort . cr<br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"co1\">//Comparison function must returns Numbers even though it deals with integers.</span><br/><span class=\"kw2\">function</span> compare<span class=\"br0\">(</span>x:<span class=\"kw3\">int</span>, y:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">Number</span><span class=\"br0\">(</span>x-y<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">var</span> nums:Vector.<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> = Vector.<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span>,<span class=\"nu0\">12</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">612</span>,<span class=\"nu0\">31</span>,<span class=\"nu0\">523</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">234</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>nums.<span class=\"kw3\">sort</span><span class=\"br0\">(</span>compare<span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Gnat.<span class=\"me1\">Heap_Sort_G</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Integer_Sort <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- Heap sort package requires data to be in index values starting at</span><br/>   <span class=\"co1\">-- 1 while index value 0 is used as temporary storage</span><br/>   <span class=\"kw3\">type</span> Int_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>   Values\u00a0: Int_Array\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- define move and less than subprograms for use by the heap sort package</span><br/>   <span class=\"kw3\">procedure</span> Move_Int<span class=\"br0\">(</span>From\u00a0: Natural; To\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Values<span class=\"br0\">(</span>To<span class=\"br0\">)</span>\u00a0:= Values<span class=\"br0\">(</span>From<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Move_Int;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Lt_Int<span class=\"br0\">(</span>Left, Right\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Values<span class=\"br0\">(</span>Left<span class=\"br0\">)</span> &lt; Values <span class=\"br0\">(</span>Right<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Lt_Int;<br/>\u00a0<br/>   <span class=\"co1\">-- Instantiate the generic heap sort package</span><br/>   <span class=\"kw3\">package</span> Heap_Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Gnat.<span class=\"me1\">Heap_Sort_G</span><span class=\"br0\">(</span>Move_Int, Lt_Int<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Heap_Sort.<span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Integer_Sort;<br/>\u00a0<br/>requires an Ada05 compiler, e.<span class=\"me1\">g</span> GNAT GPL <span class=\"nu0\">2007</span><br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Integer_Sort <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- </span><br/>   <span class=\"kw3\">type</span> Int_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>   Values\u00a0: Int_Array\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- Instantiate the generic sort package from the standard Ada library</span><br/>   <span class=\"kw3\">procedure</span> Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span><br/>     <span class=\"br0\">(</span>Index_Type   =&gt; Natural,<br/>      Element_Type =&gt; Integer,<br/>      Array_Type   =&gt; Int_Array<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Sort<span class=\"br0\">(</span>Values<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Integer_Sort;</pre>"}, {"lang": "ALGOL 68", "loc": 24, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"co1\">CO PR READ \"shell_sort.a68\" PR CO</span><br/><span class=\"kw4\">MODE</span> TYPE <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> in place shell sort <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>TYPE seq<span class=\"br0\">)</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>TYPE<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> inc <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> seq <span class=\"sy1\">+</span> <span class=\"kw8\">LWB</span> seq <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> inc <span class=\"kw15\">NE</span> 0 <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> index <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> seq <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> seq <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">INT</span> i <span class=\"sy1\">:=</span> index<span class=\"sy1\">;</span><br/>            TYPE el <span class=\"sy1\">=</span> seq<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">WHILE</span> <span class=\"br0\">(</span> i  <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> seq <span class=\"sy1\">&gt;=</span> inc <span class=\"sy1\">|</span> seq<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> inc<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> el <span class=\"sy1\">|</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>                seq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> seq<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> inc<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                i <span class=\"sy1\">-:=</span> inc<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            seq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> el<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        inc <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> inc <span class=\"sy1\">=</span> 2 <span class=\"kw2\">THEN</span> 1 <span class=\"kw2\">ELSE</span> <span class=\"kw8\">ENTIER</span><span class=\"br0\">(</span>inc <span class=\"sy1\">*</span> 5 <span class=\"sy1\">/</span> 11<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span>  <br/>    seq  <br/><span class=\"br0\">)</span><span class=\"sy1\">;</span>    <br/>\u00a0<br/><span class=\"kw4\">PROC</span> shell sort <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>TYPE seq<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span>TYPE<span class=\"sy1\">:</span><br/>  in place shell sort<span class=\"br0\">(</span><span class=\"kw4\">LOC</span><span class=\"br0\">[</span><span class=\"kw8\">LWB</span> seq<span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> seq<span class=\"br0\">]</span>TYPE<span class=\"sy1\">:=</span>seq<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>shell sort<span class=\"br0\">(</span><span class=\"br0\">(</span>2<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 3, "block": "<pre class=\"text highlighted_source\">      X\u219063 92 51 92 39 15 43 89 36 69<br/>      X[\u234bX]<br/>15 36 39 43 51 63 69 89 92 92</pre>"}, {"lang": "AppleScript", "loc": 43, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>\u00a0<br/><span class=\"co1\">-- sort\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> sort<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>current <span class=\"kw1\">application</span><span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:lst<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingSelector:<span class=\"st0\">\"compare:\"</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sort<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>sort, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">9</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, \u00ac<br/>        <span class=\"br0\">[</span><span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"beta\"</span>, <span class=\"st0\">\"gamma\"</span>, <span class=\"st0\">\"delta\"</span>, <span class=\"st0\">\"epsilon\"</span>, <span class=\"st0\">\"zeta\"</span>, <span class=\"st0\">\"eta\"</span>, \u00ac<br/>            <span class=\"st0\">\"theta\"</span>, <span class=\"st0\">\"iota\"</span>, <span class=\"st0\">\"kappa\"</span>, <span class=\"st0\">\"lambda\"</span>, <span class=\"st0\">\"mu\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS  ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">numbers <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">sort</span></a><span class=\"sy0\">,</span> numbers<span class=\"sy0\">,</span> N D<span class=\"re0\">%A_Space%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% numbers</pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SORT_AN_INTEGER_ARRAY.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"9,10,3,1234,99,1,200,2,0,-2\"</span>,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span><span class=\"st0\">\"@unsorted\"</span>,<span class=\"st0\">\"unsorted\"</span><span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span><span class=\"st0\">\"@val_num_asc\"</span>,<span class=\"st0\">\"sorted ascending\"</span><span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span><span class=\"st0\">\"@val_num_desc\"</span>,<span class=\"st0\">\"sorted descending\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> show<span class=\"br0\">(</span>sequence,description,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = sequence<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span>,description<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Axe", "loc": 7, "block": "<pre class=\"text highlighted_source\">2\u2192{L\u2081}<br/>4\u2192{L\u2081+1}<br/>3\u2192{L\u2081+2}<br/>1\u2192{L\u2081+3}<br/>2\u2192{L\u2081+4}<br/>\u00a0<br/>SortD(L\u2081,5)</pre>"}, {"lang": "Babel", "loc": 6, "block": "<pre class=\"text highlighted_source\">babel&gt; nil { zap {1 randlf 100 rem} 20 times collect\u00a0! } nest dup lsnum\u00a0! --&gt; Create a list of random numbers<br/>( 20 47 69 71 18 10 92 9 56 68 71 92 45 92 12 7 59 55 54 24 )<br/>babel&gt; ls2lf                                                              --&gt; Convert list to array for sorting<br/>babel&gt; dup {fnord} merge_sort                                             --&gt; The internal sort operator<br/>babel&gt; ar2ls lsnum\u00a0!                                                      --&gt; Display the results<br/>( 7 9 10 12 18 20 24 45 47 54 55 56 59 68 69 71 71 92 92 92 )</pre>"}, {"lang": "BaCon", "loc": 14, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Sort an integer array</span><br/><span class=\"kw1\">DECLARE</span> values<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">TYPE</span> NUMBER<br/>values<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">23</span><br/>values<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">32</span><br/>values<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"nu0\">12</span><br/>values<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = <span class=\"nu0\">21</span><br/>values<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> = 01<br/>\u00a0<br/>SORT values<br/>\u00a0<br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">PRINT</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"st0\">\", \"</span>;<br/><span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">PRINT</span> values<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      sort% = FN_sortinit(0,0)<br/>\u00a0<br/>      DIM array(8)<br/>      array() = 8, 2, 5, 9, 1, 3, 6, 7, 4<br/>\u00a0<br/>      C% = DIM(array(),1) + 1<br/>      CALL sort%, array(0)<br/>\u00a0<br/>      FOR i% = 0 TO DIM(array(),1) - 1<br/>        PRINT\u00a0; array(i%) \", \";<br/>      NEXT<br/>      PRINT\u00a0; array(i%)</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">v <br/>&gt; 543** &gt;    \u00a0:#v_ $&amp;&gt;          \u00a0:#v_ 1 &gt;\u00a0:0g &gt;   \u00a0:#v_ $ 1+: 543** `! #v_ 25*,@<br/>        ^-1p0\\0:&lt;    ^-1 p0\\+1 g0:&amp;&lt;          ^-1\\.:\\&lt;<br/>                                        ^                               &lt;</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre>{?} (9.)+(-2.)+(1.)+(2.)+(8.)+(0.)+(1.)+(2.)\n{!} (-2.)+(0.)+2*(1.)+2*(2.)+(8.)+(9.)</pre>"}, {"lang": "Burlesque", "loc": 1, "block": "<pre class=\"text highlighted_source\">{1 3 2 5 4}&gt;&lt;</pre>"}, {"lang": "C", "loc": 17, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;  /* qsort() */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;   /* printf() */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> intcmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>aa<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>bb<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> aa<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> bb<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>a <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>a <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nums<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>nums<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> intcmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"result:\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>      nums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nums<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>nums, nums<span class=\"sy2\">+</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> unsorted <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">6</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        Array<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>unsorted<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clean", "loc": 7, "block": "<pre class=\"text highlighted_source\">import StdEnv<br/>\u00a0<br/>sortArray\u00a0:: (a e) -&gt; a e | Array a e &amp; Ord e<br/>sortArray array = {y \\\\ y &lt;- sort [x \\\\ x &lt;-: array]}<br/>\u00a0<br/>Start\u00a0:: {#Int}<br/>Start = sortArray {2, 4, 3, 1, 2}</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; sort can also take a comparator function</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 22, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> sort-ints<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  array-<span class=\"kw3\">area</span>             <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"54321\"</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  array              <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">5</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  i                      <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       main-<span class=\"kw3\">line</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> display-array<br/>           <span class=\"kw3\">SORT</span> array <span class=\"kw3\">ASCENDING</span> array<br/>           <span class=\"kw2\">PERFORM</span> display-array<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       display-array<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> <span class=\"nu0\">5</span> &lt; i<br/>               <span class=\"kw2\">DISPLAY</span> array <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"st0\">\" \"</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span><br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>sort #<span class=\"br0\">(</span><span class=\"nu0\">9</span> -<span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> #'<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><br/>#<span class=\"br0\">(</span>-<span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/>a = <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw3\">puts</span> a.<span class=\"me1\">sort</span><br/><span class=\"co1\"># =&gt; [1, 2, 3, 4, 5]</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> a<br/><span class=\"co1\"># =&gt; [5, 4, 3, 2, 1]</span><br/>\u00a0<br/>a.<span class=\"me1\">sort</span>!<br/><span class=\"kw3\">puts</span> a<br/><span class=\"co1\"># =&gt; [1, 2, 3, 4, 5]</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    data.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// in-place</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 8, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">uses</span> Types<span class=\"sy1\">,</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  a<span class=\"sy1\">:</span> TIntegerDynArray<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TIntegerDynArray<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  TArray<span class=\"sy1\">.</span><span class=\"me1\">Sort</span>&lt;Integer&gt;<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!. sort [ 5 4 3 2 1 ]</pre>"}, {"lang": "DWScript", "loc": 3, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> a <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>a<span class=\"sy1\">.</span><span class=\"me1\">Sort</span><span class=\"sy1\">;</span> <span class=\"co1\">// ascending natural sort</span><br/>PrintLn<span class=\"br0\">(</span>a<span class=\"sy1\">.</span><span class=\"me1\">Map</span><span class=\"br0\">(</span>IntToStr<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"co1\">// 1,2,3,4,5</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var unsorted\u00a0:= (6, 2, 7, 8, 3, 1, 10, 5, 4, 9).<br/>\u00a0<br/>    console printLine(unsorted clone; sort:ifOrdered).<br/>].</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">list = [2, 4, 3, 1, 2]<br/>IO.inspect Enum.sort(list)<br/>IO.inspect Enum.sort(list, &amp;(&amp;1&gt;&amp;2))</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re5\">List</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re5\">SortedList</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 2, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/><span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>sort<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">20</span><span class=\"sy2\">,</span> <span class=\"nu0\">7</span><span class=\"sy2\">,</span> <span class=\"nu0\">65</span><span class=\"sy2\">,</span> <span class=\"nu0\">10</span><span class=\"sy2\">,</span> <span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">8</span><span class=\"sy2\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">60</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "EGL", "loc": 16, "block": "<pre class=\"text highlighted_source\">program SortExample<br/>\u00a0<br/>    function main()<br/>        test1 int[] = [1,-1,8,-8,2,-2,7,-7,3,-3,6,-6,9,-9,4,-4,5,-5,0];<br/>        test1.sort(sortFunction);<br/>\u00a0<br/>\tfor(i int from 1 to test1.getSize())<br/>\t    SysLib.writeStdout(test1[i]);<br/>\tend<br/>    end<br/>\u00a0<br/>    function sortFunction(a any in, b any in) returns (int)<br/>        return (a as int) - (b as int);<br/>    end<br/>\u00a0<br/>end</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">{ 1 4 9 2 3 0 5 } natural-sort .</pre>"}, {"lang": "Fantom", "loc": 1, "block": "<pre>fansh&gt; a\u00a0:= [5, 1, 4, 2, 3]\n[5, 1, 4, 2, 3]\nfansh&gt; a.sort\n[1, 2, 3, 4, 5]\nfansh&gt; a\n[1, 2, 3, 4, 5]\n</pre>"}, {"lang": "Forth", "loc": 3, "block": "<pre class=\"text highlighted_source\">create test-data 2 , 4 , 3 , 1 , 2 ,<br/>test-data 5 cell-sort<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">CALL <a class=\"__cf_email__\" data-cfemail=\"b7fee4f8e5e3f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(b, a, n)</span><br/><span class=\"co1\">! n = number of elements</span><br/><span class=\"co1\">! a = array to be sorted</span><br/><span class=\"co1\">! b = array of indices of a. b(1) 'points' to the minimum value etc.</span></pre>"}, {"lang": "FreeBASIC", "loc": 58, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 11-03-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"crt/stdlib.bi\"      ' needed for qsort subroutine</span><br/>\u00a0<br/><span class=\"co1\">' Declare Sub qsort (ByVal As Any Ptr, &lt;== point to start of array</span><br/><span class=\"co1\">'                    ByVal As size_t,  &lt;== size of array</span><br/><span class=\"co1\">'                    ByVal As size_t,  &lt;== size of array element</span><br/><span class=\"co1\">' ByVal As Function(ByVal As Any Ptr, ByVal As Any Ptr) As Long)  &lt;== callback function</span><br/><span class=\"co1\">' declare callback function with Cdecl to ensures that the parameters are passed in the correct order</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">' size of long: 4 bytes on 32bit OS, 8 bytes on 64bit OS</span><br/>\u00a0<br/><span class=\"co1\">' ascending</span><br/> <span class=\"kw1\">Function</span> callback <span class=\"kw1\">Cdecl</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> element1 <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span>, <span class=\"kw1\">ByVal</span> element2 <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span><br/>     <span class=\"kw1\">Function</span> = *Cast<span class=\"br0\">(</span><span class=\"kw1\">Long</span> <span class=\"kw1\">Ptr</span>, element1<span class=\"br0\">)</span> - *Cast<span class=\"br0\">(</span><span class=\"kw1\">Long</span> <span class=\"kw1\">Ptr</span>, element2<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Function callback Cdecl (ByVal element1 As Any Ptr, ByVal element2 As Any Ptr) As Long</span><br/><span class=\"co1\">' Dim As Long e1 = *Cast(Long Ptr, element1)</span><br/><span class=\"co1\">' Dim As Long e2 = *Cast(Long Ptr, element2)</span><br/><span class=\"co1\">' Dim As Long result = Sgn(e1 - e2)</span><br/><span class=\"co1\">' If Sgn(e1) = -1 And Sgn(e2) = -1 Then result = -result</span><br/><span class=\"co1\">'     Function = result</span><br/><span class=\"co1\">' End Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, array<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> lb = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> ub = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub     <span class=\"co1\">' fill array</span><br/>    array<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">10</span> - i<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"unsorted array\"</span><br/><span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub     <span class=\"co1\">' display array</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###\"</span>;array<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' sort array</span><br/>qsort<span class=\"br0\">(</span>@array<span class=\"br0\">(</span>lb<span class=\"br0\">)</span>, ub - lb +<span class=\"nu0\">1</span>, <span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>, @callback<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"sorted array\"</span><br/><span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub     <span class=\"co1\">' show sorted array</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###\"</span>;array<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 2, "block": "<pre class=\"text highlighted_source\">a = [5, 2, 4, 1, 6, 7, 9, 3, 8, 0]<br/>sort[a]</pre>"}, {"lang": "F#", "loc": 7, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// sorting an array in place</span><br/><span class=\"kw1\">let</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span>| <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span> |<span class=\"br0\">]</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sortInPlace</span> nums<br/>\u00a0<br/><span class=\"co1\">// create a sorted copy of a list</span><br/><span class=\"kw1\">let</span> nums2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> sorted <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span> nums2</pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">nums = [5, 2, 78, 2, 578, -42]<br/>println( sort(nums) )           // sort in ascending order<br/>println( nums.sortWith((&gt;)) )   // sort in descending order</pre>"}, {"lang": "GAP", "loc": 14, "block": "<pre class=\"text highlighted_source\">a\u00a0:= [ 8, 2, 5, 9, 1, 3, 6, 7, 4 ];<br/># Make a copy (with \"b\u00a0:= a;\", b and a would point to the same list)<br/>b\u00a0:= ShallowCopy(a);<br/>\u00a0<br/># Sort in place<br/>Sort(a);<br/>a;<br/># [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<br/>\u00a0<br/># Sort without changing the argument<br/>SortedList(b);<br/># [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<br/>b;<br/># [ 8, 2, 5, 9, 1, 3, 6, 7, 4 ]</pre>"}, {"lang": "Gambas", "loc": 12, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iArray <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOutput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> iTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> iArray.<span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  sOutput <span class=\"sy0\">&amp;=</span> iTemp <span class=\"sy0\">&amp;</span> <span class=\"st0\">\", \"</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/left\"><span class=\"kw2\">Left</span></a><span class=\"br0\">(</span>sOutput, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 9, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"sort\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  nums <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>  sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>nums<span class=\"sy1\">)</span><br/>  fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>nums<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 1, "block": "<pre class=\"text highlighted_source\">[2 4 3 1 2]$</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\">nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>sorted <span class=\"sy0\">=</span> List<span class=\"sy0\">.</span>sort nums</pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">DIMENSION</span> array<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/>   array <span class=\"sy1\">=</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span> <span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">SORT</span><span class=\"br0\">(</span>Vector<span class=\"sy1\">=</span>array<span class=\"sy1\">,</span> Sorted<span class=\"sy1\">=</span>array<span class=\"br0\">)</span> </pre>"}, {"lang": "Huginn", "loc": 4, "block": "<pre class=\"text highlighted_source\">main() {<br/>  nums = [2, 4, 3, 1, 2];<br/>  nums.sort();<br/>}</pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">result <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>sort<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"icon highlighted_source\">S <span class=\"sy1\">:=</span> <span class=\"kw4\">sort</span><span class=\"br0\">(</span>L<span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">63</span><span class=\"sy1\">,</span> <span class=\"nu0\">92</span><span class=\"sy1\">,</span> <span class=\"nu0\">51</span><span class=\"sy1\">,</span> <span class=\"nu0\">92</span><span class=\"sy1\">,</span> <span class=\"nu0\">39</span><span class=\"sy1\">,</span> <span class=\"nu0\">15</span><span class=\"sy1\">,</span> <span class=\"nu0\">43</span><span class=\"sy1\">,</span> <span class=\"nu0\">89</span><span class=\"sy1\">,</span> <span class=\"nu0\">36</span><span class=\"sy1\">,</span> <span class=\"nu0\">69</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\"># will sort a list</span></pre>"}, {"lang": "Inform 7", "loc": 2, "block": "<pre class=\"text highlighted_source\">let L be {5, 4, 7, 1, 18};<br/>sort L;</pre>"}, {"lang": "Io", "loc": 3, "block": "<pre class=\"lua highlighted_source\">mums <span class=\"sy0\">:=</span> list<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>sorted <span class=\"sy0\">:=</span> nums <span class=\"kw3\">sort</span>  <span class=\"sy0\">#</span> returns a new sorted array<span class=\"sy0\">.</span>  <span class=\"st0\">'nums'</span> is unchanged<br/>nums sortInPlace  <span class=\"sy0\">#</span> <span class=\"kw3\">sort</span> <span class=\"st0\">'nums'</span> <span class=\"st0\">\"in-place\"</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">/:~</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> example <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 6, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> int_arr<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> a <span class=\"sy0\">-</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">var</span> numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">65</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">60</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>numbers.<span class=\"me1\">sort</span><span class=\"br0\">(</span>int_arr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>document.<span class=\"me1\">write</span><span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ints <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   ints.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span>ints.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span>prefix <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span>, postfix <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 7, "block": "<pre class=\"text highlighted_source\">local(array) = array(5,20,3,2,6,1,4)<br/>#array-&gt;sort<br/>#array // 1, 2, 3, 4, 5, 6, 20<br/>\u00a0<br/>// Reverse the sort order<br/>#array-&gt;sort(false)<br/>#array // 20, 6, 5, 4, 3, 2, 1</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">[2,1,3] | sort  # =&gt; [1,2,3]</pre>"}, {"lang": "Julia", "loc": 33, "block": "<pre class=\"text highlighted_source\">julia&gt; a = [4,2,3,1]<br/>4-element Int32 Array:<br/> 4<br/> 2<br/> 3<br/> 1<br/>julia&gt; sort(a) #out-of-place/non-mutating sort<br/>4-element Int32 Array:<br/> 1<br/> 2<br/> 3<br/> 4<br/>\u00a0<br/>julia&gt; a<br/>4-element Int32 Array:<br/> 4<br/> 2<br/> 3<br/> 1<br/>\u00a0<br/>julia&gt; sort!(a) # in-place/mutating sort<br/>4-element Int32 Array:<br/> 1<br/> 2<br/> 3<br/> 4<br/>\u00a0<br/>julia&gt; a<br/>4-element Int32 Array:<br/> 1<br/> 2<br/> 3<br/> 4</pre>"}, {"lang": "K", "loc": 6, "block": "<pre class=\"text highlighted_source\">  num: -10?10              / Integers from 0 to 9 in random order<br/>5 9 4 2 0 3 6 1 8 7<br/>\u00a0<br/>  srt: {<a class=\"__cf_email__\" data-cfemail=\"1c645c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;x}              / Generalized sort ascending<br/>  srt num<br/>0 1 2 3 4 5 6 7 8 9</pre>"}, {"lang": "Liberty BASIC", "loc": 16, "block": "<pre class=\"lb highlighted_source\">N <span class=\"sy0\">=</span><span class=\"nu0\">20</span><br/><span class=\"kw1\">dim</span> IntArray<span class=\"br0\">(</span> N<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Original order\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    t <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    IntArray<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span>t<br/>    <span class=\"kw1\">print</span> t<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">sort</span> IntArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> N<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Sorted oprder\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    <span class=\"kw1\">print</span> IntArray<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i</pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">l = [7, 4, 23]<br/>l.sort()<br/>put l<br/>-- [4, 7, 23]</pre>"}, {"lang": "LiveCode", "loc": 4, "block": "<pre class=\"text highlighted_source\">put \"3,2,5,4,1\" into X<br/>sort items of X numeric<br/>put X<br/>-- outputs \"1,2,3,4,5\"</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\">t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">sort([5,7,8,3,6,1]);<br/>sort(Array([5,7,8,3,6,1]))</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">numbers = Sort[{2,4,3,1,2}]</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\">a = <span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">7</span>,-<span class=\"nu0\">2</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>; b = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html\"><span class=\"kw2\">sort</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>     <span class=\"co1\">% b contains elements of a in ascending order</span><br/><span class=\"br0\">[</span>b,idx<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html\"><span class=\"kw2\">sort</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>                   <span class=\"co1\">% b contains a(idx)</span></pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">sort([9, 4, 3, 7, 6, 1, 10, 2, 8, 5]);</pre>"}, {"lang": "MAXScript", "loc": 2, "block": "<pre class=\"text highlighted_source\">arr = #(5, 4, 3, 2, 1)<br/>arr = sort arr</pre>"}, {"lang": "Mercury", "loc": 14, "block": "<pre class=\"text highlighted_source\">:- module sort_int_list.<br/>:- interface.<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, uo::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module list.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>  Nums = [2, 4, 0, 3, 1, 2],<br/>  list.sort(Nums, Sorted),<br/>  io.write(Sorted,\u00a0!IO),<br/>  io.nl(!IO).</pre>"}, {"lang": "Modula-3", "loc": 9, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> ArraySort <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IntArraySort;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> arr <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IntArraySort.<span class=\"me1\">Sort</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> ArraySort.</pre>"}, {"lang": "MUMPS", "loc": 12, "block": "<pre class=\"text highlighted_source\">SORTARRAY(X,SEP)<br/>\u00a0;X is the list of items to sort<br/>\u00a0;X1 is the temporary array<br/>\u00a0;SEP is the separator string between items in the list X<br/>\u00a0;Y is the returned list<br/>\u00a0;This routine uses the inherent sorting of the arrays<br/> NEW I,X1,Y<br/> SET Y=\"\"<br/> FOR I=1:1:$LENGTH(X,SEP) SET X1($PIECE(X,SEP,I))=\"\"<br/> SET I=\"\" FOR  SET I=$O(X1(I)) Q:I=\"\"  SET Y=$SELECT($L(Y)=0:I,1:Y_SEP_I)<br/> KILL I,X1<br/> QUIT Y</pre>"}, {"lang": "Nemerle", "loc": 13, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>\u00a0<br/>module IntSort<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def nums = [1, 5, 3, 7, 2, 8, 3, 9];<br/>        def sorted = nums.Sort((x, y) =&gt; x.CompareTo(y));<br/>\u00a0<br/>        WriteLine(nums);<br/>        WriteLine(sorted);<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 22, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>ia = int<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>ia = <span class=\"br0\">[</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, -<span class=\"nu0\">2</span> <span class=\"br0\">]</span><br/>\u00a0<br/>display<span class=\"br0\">(</span>ia<span class=\"br0\">)</span><br/>Arrays.<span class=\"me0\">sort</span><span class=\"br0\">(</span>ia<span class=\"br0\">)</span><br/>display<span class=\"br0\">(</span>ia<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Display results</span><br/>method display<span class=\"br0\">(</span>in = int<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  sorted = Rexx<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">0</span> for in.<span class=\"me0\">length</span><br/>    sorted = sorted <span class=\"sy0\">||</span> Rexx<span class=\"br0\">(</span>in<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> ix<br/>\u00a0<br/>  <span class=\"kw1\">say</span> sorted.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'t'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span></pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">sort &gt;= 9 6 8 7 1 10<br/>= 10 9 8 7 6 1</pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">import algorithm<br/>\u00a0<br/>var a: array[0..8,int] = [2,3,5,8,4,1,6,9,7]<br/>a.sort(system.cmp[int], Ascending)<br/>for x in a:<br/>   echo(x)</pre>"}, {"lang": "Niue", "loc": 2, "block": "<pre class=\"text highlighted_source\">2 6 1 0 3 8 sort .s<br/>0 1 2 3 6 8</pre>"}, {"lang": "Objective-C", "loc": 2, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>nums <span class=\"sy0\">=</span> @<span class=\"br0\">[</span>@2, @4, @3, @1, @2<span class=\"br0\">]</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>sorted <span class=\"sy0\">=</span> <span class=\"br0\">[</span>nums sortedArrayUsingSelector<span class=\"sy0\">:</span><span class=\"kw1\">@selector</span><span class=\"br0\">(</span>compare<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;</pre>"}, {"lang": "Objeck", "loc": 8, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Sort <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> System.<span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      nums <span class=\"sy0\">:=</span> Structure.IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      nums<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> nums</pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\">sortedv <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/sort.html\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 8, 2, 5, 9, 1, 3, 6, 7, 4 ] sort</pre>"}, {"lang": "ooRexx", "loc": 3, "block": "<pre class=\"rexx highlighted_source\">a = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">6</span>, -<span class=\"nu0\">2</span>, <span class=\"nu0\">99</span>, -<span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"The sorted numbers are\"</span><br/><span class=\"kw1\">say</span> a~sortWith<span class=\"br0\">(</span><span class=\"sy0\">.</span>numericComparator~new<span class=\"br0\">)</span>~makeString</pre>"}, {"lang": "Order", "loc": 3, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span> 8seq_sort<span class=\"br0\">(</span>8less<span class=\"sy0\">,</span> 8seq<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Nums = <span class=\"br0\">[</span>2 4 3 1 2<span class=\"br0\">]</span><br/>  Sorted = <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>sort Nums Value<span class=\"sy0\">.</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show Sorted<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span></pre>"}, {"lang": "Peloton", "loc": 15, "block": "<pre class=\"text highlighted_source\">Construct a list of numbers <br/>&lt;@ LETCNSLSTLIT&gt;L|65^84^1^25^77^4^47^2^42^44^41^25^69^3^51^45^4^39^&lt;/@&gt; <br/>Numbers sort as strings<br/>&lt;@ ACTSRTENTLST&gt;L&lt;/@&gt; <br/>&lt;@ SAYDMPLST&gt;L&lt;/@&gt; <br/>&lt;@ ACTSRTENTLSTLIT&gt;L|__StringDescending&lt;/@&gt; <br/>&lt;@ SAYDMPLST&gt;L&lt;/@&gt;<br/>\u00a0<br/>Construct another list of numbers<br/>&lt;@ LETCNSLSTLIT&gt;list|65^84^1^25^77^4^47^2^42^44^41^25^69^3^51^45^4^39^&lt;/@&gt; <br/>Numbers sorted as numbers<br/>&lt;@ ACTSRTENTLSTLIT&gt;list|__Numeric&lt;/@&gt; <br/>&lt;@ SAYDMPLST&gt;list&lt;/@&gt; <br/>&lt;@ ACTSRTENTLSTLIT&gt;list|__NumericDescending&lt;/@&gt; <br/>&lt;@ SAYDMPLST&gt;list&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"re0\">@nums</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?sort({9, 10, 3, 1, 4, 5, 8, 7, 6, 2})</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$nums</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><span class=\"re0\">$nums</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(sort (2 4 3 1 2))<br/>-&gt; (1 2 2 3 4)</pre>"}, {"lang": "PL/I", "loc": 37, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">DCL</span> <span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* scratch space of length N/2 */</span><br/>\u00a0<br/>MERGE<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span>LA<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>LB<span class=\"sy0\">,</span>C<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>B<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>C<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>LA<span class=\"sy0\">,</span>LB<span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">NONASGN</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>I<span class=\"sy0\">,</span>J<span class=\"sy0\">,</span>K<span class=\"br0\">)</span> <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BIN</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   I<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> LA<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>J <span class=\"sy0\">&lt;=</span> LB<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> B<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>         <span class=\"kw1\">DO</span><span class=\"sy0\">;</span> C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> I<span class=\"sy0\">=</span>I<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">ELSE</span><br/>         <span class=\"kw1\">DO</span><span class=\"sy0\">;</span> C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>B<span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> J<span class=\"sy0\">=</span>J<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> LA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      C<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> I<span class=\"sy0\">=</span>I<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> K<span class=\"sy0\">=</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> MERGE<span class=\"sy0\">;</span><br/>\u00a0<br/>MERGESORT<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span>N<span class=\"br0\">)</span> <span class=\"kw1\">RECURSIVE</span> <span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> N                    <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">NONASGN</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> Temp                 <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> <span class=\"br0\">(</span>M<span class=\"sy0\">,</span>I<span class=\"br0\">)</span>                <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> AMP1<span class=\"br0\">(</span>N<span class=\"br0\">)</span>              <span class=\"kw1\">FIXED</span> <span class=\"kw1\">BINARY</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">BASED</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">DECLARE</span> P <span class=\"kw1\">POINTER</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/>   M <span class=\"sy0\">=</span> <span class=\"kw1\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>M<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">CALL</span> MERGESORT<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   P<span class=\"sy0\">=</span><span class=\"kw1\">ADDR</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>M<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N<span class=\"sy0\">-</span>M <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">CALL</span> MERGESORT<span class=\"br0\">(</span>AMP1<span class=\"sy0\">,</span>N<span class=\"sy0\">-</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">IF</span> A<span class=\"br0\">(</span>M<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> AMP1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">DO</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> M<span class=\"sy0\">;</span> T<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">END</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">CALL</span> MERGE<span class=\"br0\">(</span>T<span class=\"sy0\">,</span>M<span class=\"sy0\">,</span>AMP1<span class=\"sy0\">,</span>N<span class=\"sy0\">-</span>M<span class=\"sy0\">,</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">RETURN</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> MERGESORT<span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 11, "block": "<pre class=\"text highlighted_source\">lvars ar = {2 4 3 1 2};<br/>;;; Convert array to list.<br/>;;; destvector leaves its results and on the pop11 stack + an integer saying how many there were<br/>destvector(ar);<br/>;;; conslist uses the items left on the stack plus the integer, to make a list of those items.<br/>lvars ls = conslist();<br/>;;; Sort it<br/>sort(ls) -&gt; ls;<br/>;;; Convert list to array<br/>destlist(ls);<br/>consvector() -&gt; ar;</pre>"}, {"lang": "Potion", "loc": 1, "block": "<pre class=\"text highlighted_source\">(7, 5, 1, 2, 3, 8, 9) sort join(\", \") print</pre>"}, {"lang": "PowerBASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">ARRAY SORT x()</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"nu0\">34</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span><span class=\"nu0\">56</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">129</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">73</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre>\u00a0?- msort([10,5,13,3, 85,3,1], L).\nL = [1,3,3,5,10,13,85].</pre>"}, {"lang": "PureBasic", "loc": 6, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Dim</span> numbers<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>   numbers<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">SortArray</span><span class=\"br0\">(</span>numbers<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\">nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>nums.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">nums &lt;- c(2,4,3,1,2)<br/>sorted &lt;- sort(nums)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-&gt; (sort '(1 9 2 8 3 7 4 6 5) &lt;)<br/>'(1 2 3 4 5 6 7 8 9)<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 11, "block": "<pre class=\"text highlighted_source\">rascal&gt;import List;<br/>ok<br/>\u00a0<br/>rascal&gt;a = [1, 4, 2, 3, 5];<br/>list[int]: [1,4,2,3,5]<br/>\u00a0<br/>rascal&gt;sort(a)<br/>list[int]: [1,2,3,4,5]<br/>\u00a0<br/>rascal&gt;sort(a, bool(int a, int b){return a &gt;= b;})<br/>list[int]: [5,4,3,2,1]</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 2 4 3 1 2 ] sort</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">sort</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;&gt; nums: [3 2 6 4 1 9 0 5 7]<br/>== [3 2 6 4 1 9 0 5 7]<br/>&gt;&gt; sort nums<br/>== [0 1 2 3 4 5 6 7 9]</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program sorts an array (using E\u2500sort), in this case, the array contains integers.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">30</span>                                <span class=\"coMULTI\">/*enables handling larger Euler numbers*/</span><br/>                          @<span class=\"sy0\">.</span>  =              <span class=\"nu0\">0</span>;            @<span class=\"sy0\">.</span>1 =               <span class=\"nu0\">1</span><br/>                          @<span class=\"sy0\">.</span>3 =             -<span class=\"nu0\">1</span>;            @<span class=\"sy0\">.</span>5 =               <span class=\"nu0\">5</span><br/>                          @<span class=\"sy0\">.</span>7 =            -<span class=\"nu0\">61</span>;            @<span class=\"sy0\">.</span>9 =            <span class=\"nu0\">1385</span><br/>                          @<span class=\"sy0\">.</span>11=         -<span class=\"nu0\">50521</span>;            @<span class=\"sy0\">.</span>13=         <span class=\"nu0\">2702765</span><br/>                          @<span class=\"sy0\">.</span>15=     -<span class=\"nu0\">199360981</span>;            @<span class=\"sy0\">.</span>17=     <span class=\"nu0\">19391512145</span><br/>                          @<span class=\"sy0\">.</span>19= -<span class=\"nu0\">2404879675441</span>;            @<span class=\"sy0\">.</span>21= <span class=\"nu0\">370371188237525</span><br/>#= <span class=\"nu0\">21</span>                                            <span class=\"coMULTI\">/*indicate there're  21 Euler  numbers.*/</span><br/><span class=\"kw1\">call</span> tell  <span class=\"st0\">'unsorted'</span>                            <span class=\"coMULTI\">/*display the array before the  eSort. */</span><br/><span class=\"kw1\">call</span> eSort     #                                 <span class=\"coMULTI\">/*sort the array of some Euler numbers.*/</span><br/><span class=\"kw1\">call</span> tell  <span class=\"st0\">'  sorted'</span>                            <span class=\"coMULTI\">/*display the array  after  the eSort. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>eSort: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;     h=N                   <span class=\"coMULTI\">/*an eXchange sort.*/</span><br/>              <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;                   h= h%2                <span class=\"coMULTI\">/*define a segment.*/</span><br/>                 <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N-h;              j=i;     k= h+i       <span class=\"coMULTI\">/*sort top segment.*/</span><br/>                    <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  @<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>j                               <span class=\"coMULTI\">/*see if need swap.*/</span><br/>                        <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>j @<span class=\"sy0\">.</span>k   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>k @<span class=\"sy0\">.</span>j        <span class=\"coMULTI\">/*swap two elements*/</span><br/>                        <span class=\"kw1\">if</span> h<span class=\"sy0\">&gt;</span>=j  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;   j= j-h;   k= k-h      <span class=\"coMULTI\">/*this part sorted?*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while @.k&lt;@.j*/</span><br/>                    <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*i*/</span><br/>              <span class=\"kw3\">end</span>             <span class=\"coMULTI\">/*while h&gt;1*/</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:  <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">65</span><span class=\"br0\">)</span>;       _= <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>;                       w= <span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span><br/>              <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;  <span class=\"kw1\">say</span> _ <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"st0\">'array element'</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\"=\"</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 2, "block": "<pre class=\"text highlighted_source\">aArray = [2,4,3,1,2]<br/>see sort(aArray)</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">nums = <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>sorted = nums.<span class=\"me1\">sort</span>      <span class=\"co1\"># returns a new sorted array.  'nums' is unchanged</span><br/><span class=\"kw3\">p</span> sorted                <span class=\"co1\">#=&gt; [1, 2, 2, 3, 4]</span><br/><span class=\"kw3\">p</span> nums                  <span class=\"co1\">#=&gt; [2, 4, 3, 1, 2]</span><br/>\u00a0<br/>nums.<span class=\"me1\">sort</span>!              <span class=\"co1\"># sort 'nums' \"in-place\"</span><br/><span class=\"kw3\">p</span> nums                  <span class=\"co1\">#=&gt; [1, 2, 2, 3, 4]</span></pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let mut a = vec!(9, 8, 7, 6, 5, 4, 3, 2, 1, 0);<br/>\u00a0<br/>    a.sort();<br/>    println!(\"{:?}\", a);<br/>}</pre>"}, {"lang": "Scala", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Sort<span class=\"sy0\">_</span>an<span class=\"sy0\">_</span>integer<span class=\"sy0\">_</span>array <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> array <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>    <span class=\"sy0\">_*</span> <span class=\"coMULTI\">/*Sequence is passed as multiple parameters to Array(xs\u00a0: T*)*/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Function test the array if it is in order */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isSorted<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>arr<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> array.<span class=\"me1\">sliding</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">forall</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span><span class=\"sy0\">!</span>isSorted<span class=\"br0\">(</span>array<span class=\"br0\">)</span>, <span class=\"st0\">\"Not random\"</span><span class=\"br0\">)</span><br/>  scala.<span class=\"me1\">util</span>.<span class=\"me1\">Sorting</span>.<span class=\"me1\">quickSort</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>isSorted<span class=\"br0\">(</span>array<span class=\"br0\">)</span>, <span class=\"st0\">\"Not sorted\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Array in sorted order.<span class=\"es1\">\\n</span>Successfully completed without errors. [total ${Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>sort #<span class=\"br0\">(</span><span class=\"nu0\">9</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> #'<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 3, "block": "<pre class=\"text highlighted_source\">var array integer: nums is [] (2, 4, 3, 1, 2);<br/>\u00a0<br/>nums\u00a0:= sort(nums);</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var nums = <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>;<br/>var sorted = nums.<span class=\"me1\">sort</span>;  <span class=\"co1\"># returns a new sorted array.</span><br/>nums.<span class=\"me1\">sort</span>!;              <span class=\"co1\"># sort 'nums' \"in-place\"</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\"> #(7 5 2 9 0 -1) sort</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"> <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">7</span> <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> -<span class=\"re5\">1</span><span class=\"br0\">)</span></span> asSortedCollection</pre>"}, {"lang": "Sparkling", "loc": 2, "block": "<pre class=\"text highlighted_source\">var arr = { 2, 8, 1, 4, 6, 5, 3, 7, 0, 9 };<br/>sort(arr);</pre>"}, {"lang": "Standard ML", "loc": 6, "block": "<pre class=\"text highlighted_source\">- val nums = Array.fromList [2, 4, 3, 1, 2];<br/>val nums = [|2,4,3,1,2|]\u00a0: int array<br/>- ArrayQSort.sort Int.compare nums;<br/>val it = ()\u00a0: unit<br/>- nums;<br/>val it = [|1,2,2,3,4|]\u00a0: int array</pre>"}, {"lang": "Stata", "loc": 20, "block": "<pre class=\"text highlighted_source\">. clear<br/>. matrix a=(2,9,4,7,5,3,6,1,8)'<br/>. qui svmat a<br/>. sort a<br/>. list<br/>\u00a0<br/>     +----+<br/>     | a1 |<br/>     |----|<br/>  1. |  1 |<br/>  2. |  2 |<br/>  3. |  3 |<br/>  4. |  4 |<br/>  5. |  5 |<br/>     |----|<br/>  6. |  6 |<br/>  7. |  7 |<br/>  8. |  8 |<br/>  9. |  9 |<br/>     +----+</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">var nums = [2, 4, 3, 1, 2]<br/>nums.sortInPlace()<br/>print(nums)</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer <span class=\"re0\">$unsorted_list</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre>:L<sub>1</sub>\u2192L<sub>2</sub>\n:SortA(L<sub>2</sub>)\n</pre>"}, {"lang": "Toka", "loc": 2, "block": "<pre class=\"text highlighted_source\">needs bsort<br/>arrayname number_elements bsort</pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">nums</span>=<span class=\"st0\">\"2 4 3 1 5\"</span><br/><span class=\"re2\">sorted</span>=<span class=\"sy0\">`</span><span class=\"kw3\">printf</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span> <span class=\"re1\">$nums</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> -n<span class=\"sy0\">`</span><br/><span class=\"kw3\">echo</span> <span class=\"re1\">$sorted</span>  <span class=\"co0\"># prints 1 2 3 4 5</span></pre>"}, {"lang": "Ursa", "loc": 3, "block": "<pre class=\"text highlighted_source\">decl int&lt;&gt; nums<br/>append 2 4 3 1 2 nums<br/>sort nums</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>example = nleq-&lt; &lt;39,47,40,53,14,23,88,52,78,62,41,92,88,66,5,40&gt;</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@sort [39 47 40 53 14 23 88 52 78 62 41 92 88 66 5 40]</pre>"}, {"lang": "XPL0", "loc": 27, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc    SSort(A, N);            \\Shell sort array in ascending order<br/>int     A;                      \\address of array<br/>int     N;                      \\number of elements in array (size)<br/>int     I, J, Gap, JG, T;<br/>[Gap:= N&gt;&gt;1;<br/>while Gap &gt; 0 do<br/>        [for I:= Gap to N-1 do<br/>                [J:= I - Gap;<br/>                loop    [JG:= J + Gap;<br/>                        if A(J) &lt;= A(JG) then quit;<br/>                        T:= A(J);   A(J):= A(JG);   A(JG):= T;  \\swap elements<br/>                        J:= J - Gap;<br/>                        if J &lt; 0 then quit;<br/>                        ];<br/>                ];<br/>        Gap:= Gap&gt;&gt;1;<br/>        ];<br/>];      \\SSort<br/>\u00a0<br/>int A, I;<br/>[A:= [3, 1, 4, 1, 5, 9, 2, 6, 5, 4];<br/>SSort(A, 10);<br/>for I:= 0 to 10-1 do [IntOut(0, A(I));  ChOut(0, ^ )];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "Yabasic", "loc": 56, "block": "<pre class=\"text highlighted_source\">export sub shell_sort(x())<br/>// Shell sort based on insertion sort<br/>\u00a0<br/>   local gap, i, j, first, last, tempi, tempj<br/>\u00a0<br/>   last = arraysize(x(),1)<br/>   gap = int(last / 10) + 1<br/>   while(TRUE)<br/>\tfirst = gap + 1<br/>\tfor i = first to last<br/>\t   \ttempi = x(i)<br/>\t    \tj = i - gap<br/>\t    \twhile(TRUE)<br/>\t\t\ttempj = x(j)<br/>\t\t\tif tempi &gt;= tempj then<br/>\t\t    \t\tj = j + gap<br/>\t\t    \t\tbreak<br/>\t\t\tend if<br/>\t\t\tx(j+gap) = tempj<br/>\t\t\tif j &lt;= gap then<br/>\t\t    \t\tbreak<br/>\t\t\tend if<br/>\t\t\tj = j - gap<br/>\t    \twend<br/>\t    \tx(j) = tempi<br/>\tnext i<br/>\tif gap = 1 then<br/>\t   \treturn<br/>\telse<br/>\t   \tgap = int(gap / 3.5) + 1<br/>\tend if<br/>   wend<br/>end sub<br/>\u00a0<br/>if peek$(\"library\") = \"main\" then<br/>\u00a0<br/>\tclear screen<br/>\u00a0<br/>\tITEMS = 100<br/>\tdim numeros(ITEMS)<br/>\u00a0<br/>\tfor n = 1 to ITEMS<br/>\t\tnumeros(n) = ran(ITEMS + 1)<br/>\tnext n<br/>\u00a0<br/>\tprint time$<br/>\tshell_sort(numeros())<br/>\tprint time$<br/>\tprint \"Press a key to see ordered numbers.\"<br/>\tinkey$<br/>\u00a0<br/>\tfor n = 1 to ITEMS<br/>\t\tprint numeros(n),\", \";<br/>\tnext n<br/>\u00a0<br/>end if</pre>"}, {"lang": "Yorick", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nums = [2,4,3,1,2];<br/>nums = nums(sort(nums));<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">a:=L(4,5,2,6); a.sort(); a.println() //--&gt; L(2,4,5,6)</pre>"}]}