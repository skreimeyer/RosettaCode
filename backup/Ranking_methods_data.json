{"task": "Ranking_methods", "blocks": [{"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\">Rank<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> opt<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">; opt = 1 Standard (default), 2 Modified, 3 Dense, 4 Ordinal, 5 Fractional</span><br/>\tfor index<span class=\"sy0\">,</span> val in StrSplit<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`r\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\"^(\\d+)\\s+(.*)\"</span><span class=\"sy0\">,</span> Match<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span>\u00a0!<span class=\"br0\">(</span>Match1<span class=\"sy0\">=</span>prev<span class=\"br0\">)</span><br/>\t\t\tn <span class=\"sy0\">:=</span> index<br/>\t\tprev <span class=\"sy0\">:=</span> Match1<br/>\t\tRes1 <span class=\"sy0\">.=</span> n <span class=\"st0\">\"`t\"</span> Match <span class=\"st0\">\"`n\"</span><br/>\t\tRes4 <span class=\"sy0\">.=</span> index <span class=\"st0\">\"`t\"</span> Match <span class=\"st0\">\"`n\"</span><br/>\t\tTemp <span class=\"sy0\">.=</span> n <span class=\"st0\">\":\"</span> index <span class=\"st0\">\" \"</span> Match <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"br0\">}</span><br/>\tn<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> pos <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>Temp<span class=\"sy0\">,</span> <span class=\"st0\">\"`asm)^(\\d+).*?\\R(?!\\1)|.+\"</span><span class=\"sy0\">,</span> Match<span class=\"sy0\">,</span> pos?pos<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>Match<span class=\"br0\">)</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">+=</span> StrSplit<span class=\"br0\">(</span>Trim<span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`r`n\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`r\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\tRes2 <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`am)^\\d+:\\d+\"</span><span class=\"sy0\">,</span> n <span class=\"st0\">\"`t\"</span><span class=\"br0\">)</span><br/>\t\tRes3 <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`am)^\\d+:\\d+\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\"`t\"</span><span class=\"br0\">)</span><br/>\t\tR <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\tfor index<span class=\"sy0\">,</span> val in StrSplit<span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`r\"</span><span class=\"br0\">)</span><br/>\t\t\tR <span class=\"sy0\">+=</span> StrSplit<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<br/>\t\tRes5 <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`am)^\\d+:\\d+\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>R <span class=\"sy0\">/</span> StrSplit<span class=\"br0\">(</span>Trim<span class=\"br0\">(</span>Match<span class=\"sy0\">,</span> <span class=\"st0\">\"`r`n\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"`r\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\\.?0+$\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`t\"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> Res<span class=\"re0\">%opt%</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 101, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">##</span><br/><span class=\"co1\">## Dense ranking in file: ranking_d.awk</span><br/><span class=\"co1\">##</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span> lastresult = <span class=\"st0\">\"!\"</span>; lastrank = <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> d_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"sy2\">==</span>lastresult<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw5\">print</span> lastrank, <span class=\"re0\">$0</span><br/>    <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        lastresult = <span class=\"re0\">$1</span><br/>        <span class=\"kw5\">print</span> <span class=\"sy3\">++</span>lastrank, <span class=\"re0\">$0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"sy3\">//</span><span class=\"br0\">{</span>d_rank<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">##</span><br/><span class=\"co1\">## Fractional ranking in file: ranking_f.awk</span><br/><span class=\"co1\">##</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><br/>    last = <span class=\"st0\">\"!\"</span><br/>    flen = <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> f_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    item = <span class=\"re0\">$0</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"sy2\">!=</span>last<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>flen<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            sum = <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"re0\">$0</span> = fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><br/>                sum <span class=\"sy3\">+</span>= <span class=\"re0\">$1</span> <span class=\"br0\">}</span><br/>            mean = sum <span class=\"sy3\">/</span> flen<br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"re0\">$0</span> = fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$1</span> = <span class=\"st0\">\"\"</span><br/>                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3g\u00a0%s<span class=\"es0\">\\n</span>\"</span>, mean, <span class=\"re0\">$0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            flen = <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"re0\">$0</span> = item<br/>    last = <span class=\"re0\">$1</span><br/>    fifo<span class=\"br0\">[</span>flen<span class=\"sy3\">++</span><span class=\"br0\">]</span> = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%i\u00a0%s\"</span>, <span class=\"kw3\">FNR</span>, item<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"sy3\">//</span><span class=\"br0\">{</span>f_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>flen<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        sum = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$0</span> = fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><br/>            sum <span class=\"sy3\">+</span>= <span class=\"re0\">$1</span> <span class=\"br0\">}</span><br/>        mean = sum <span class=\"sy3\">/</span> flen<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$0</span> = fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$1</span> = <span class=\"st0\">\"\"</span><br/>            <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3g\u00a0%s<span class=\"es0\">\\n</span>\"</span>, mean, <span class=\"re0\">$0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">##</span><br/><span class=\"co1\">## Modified competition ranking in file: ranking_mc.awk</span><br/><span class=\"co1\">##</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><br/>    lastresult = <span class=\"st0\">\"!\"</span><br/>    flen = <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> mc_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"sy2\">==</span>lastresult<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        fifo<span class=\"br0\">[</span>flen<span class=\"sy3\">++</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/>    <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw5\">print</span> FNR<span class=\"sy3\">-</span><span class=\"nu0\">1</span>, fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>        flen = <span class=\"nu0\">0</span><br/>        fifo<span class=\"br0\">[</span>flen<span class=\"sy3\">++</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/>        lastresult = <span class=\"re0\">$1</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"sy3\">//</span><span class=\"br0\">{</span>mc_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"br0\">{</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>fl=<span class=\"nu0\">0</span>; fl <span class=\"sy2\">&lt;</span> flen;<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw5\">print</span> <span class=\"kw3\">FNR</span>, fifo<span class=\"br0\">[</span>fl<span class=\"sy3\">++</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">##</span><br/><span class=\"co1\">## Ordinal ranking in file: ranking_o.awk</span><br/><span class=\"co1\">##</span><br/>\u00a0<br/><span class=\"kw6\">function</span> o_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"kw3\">FNR</span>, <span class=\"re0\">$0</span> <span class=\"br0\">}</span><br/><span class=\"sy3\">//</span><span class=\"br0\">{</span>o_rank<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">##</span><br/><span class=\"co1\">## Standard competition ranking in file: ranking_sc.awk</span><br/><span class=\"co1\">##</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span> lastresult = lastrank = <span class=\"st0\">\"!\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> sc_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"sy2\">==</span>lastresult<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw5\">print</span> lastrank, <span class=\"re0\">$0</span><br/>    <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        <span class=\"kw5\">print</span> <span class=\"kw3\">FNR</span>, <span class=\"re0\">$0</span><br/>        lastresult = <span class=\"re0\">$1</span><br/>        lastrank = <span class=\"kw3\">FNR</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"sy3\">//</span><span class=\"br0\">{</span>sc_rank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 119, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> score<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> name<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>entry<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ordinalRanking<span class=\"br0\">(</span>entry<span class=\"sy0\">*</span> list<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Ordinal Ranking<span class=\"es1\">\\n</span>---------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> standardRanking<span class=\"br0\">(</span>entry<span class=\"sy0\">*</span> list<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Standard Ranking<span class=\"es1\">\\n</span>----------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">&lt;</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><br/>\t\t\tj <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> denseRanking<span class=\"br0\">(</span>entry<span class=\"sy0\">*</span> list<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Dense Ranking<span class=\"es1\">\\n</span>-------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">&lt;</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><br/>\t\t\tj<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> modifiedRanking<span class=\"br0\">(</span>entry<span class=\"sy0\">*</span> list<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>count<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Modified Ranking<span class=\"es1\">\\n</span>----------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">!=</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tcount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>list<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">==</span>list<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span> <span class=\"sy0\">&amp;&amp;</span> j<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\tcount <span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span>count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ti <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>len<span class=\"sy0\">,</span>list<span class=\"br0\">[</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fractionalRanking<span class=\"br0\">(</span>entry<span class=\"sy0\">*</span> list<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>count<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">float</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Fractional Ranking<span class=\"es1\">\\n</span>------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">!=</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%.1f<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">==</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tsum <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\tcount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span>list<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">==</span>list<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tsum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tcount <span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>count<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%.1f<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s\"</span><span class=\"sy0\">,</span>sum<span class=\"sy0\">/</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ti <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> processFile<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> fileName<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tFILE<span class=\"sy0\">*</span> fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tentry<span class=\"sy0\">*</span> list<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>num<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlist <span class=\"sy0\">=</span> <span class=\"br0\">(</span>entry<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>num<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>entry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>num<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d%s\"</span><span class=\"sy0\">,&amp;</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">score</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tordinalRanking<span class=\"br0\">(</span>list<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstandardRanking<span class=\"br0\">(</span>list<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tdenseRanking<span class=\"br0\">(</span>list<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmodifiedRanking<span class=\"br0\">(</span>list<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfractionalRanking<span class=\"br0\">(</span>list<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0%s &lt;score list file&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tprocessFile<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 137, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RankingMethods <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> scores <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Solomon\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">44</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Jason\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Errol\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Gary\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">41</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Bernard\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">41</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Barry\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">41</span>,<br/>                <span class=\"br0\">[</span><span class=\"st0\">\"Stephen\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">39</span>,<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            StandardRank<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ModifiedRank<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DenseRank<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            OrdinalRank<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            FractionalRank<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> StandardRank<span class=\"br0\">(</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Standard Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> data<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> rank<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1} {2}\"</span>, temp, <span class=\"kw1\">value</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        rank<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> ModifiedRank<span class=\"br0\">(</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Modified Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> data<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        rank<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1} {2}\"</span>, rank, data<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DenseRank<span class=\"br0\">(</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Dense Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> data<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1} {2}\"</span>, rank, data<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                rank<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> OrdinalRank<span class=\"br0\">(</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Ordinal Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> data<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1} {2}\"</span>, rank, data<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        rank<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> FractionalRank<span class=\"br0\">(</span>Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Fractional Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> data<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            list<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> avg <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        rank<span class=\"sy0\">++;</span><br/>                        cnt<span class=\"sy0\">++;</span><br/>                        avg <span class=\"sy0\">+=</span> rank<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                avg <span class=\"sy0\">/=</span> cnt<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"kw1\">in</span> data<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:F1} {1} {2}\"</span>, avg, data<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 167, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> scores <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"st0\">\"Solomon\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">44</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Jason\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Errol\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Garry\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Bernard\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Barry\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"Stephen\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">39</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    scores.<span class=\"me1\">standardRank</span><span class=\"sy0\">;</span><br/>    scores.<span class=\"me1\">modifiedRank</span><span class=\"sy0\">;</span><br/>    scores.<span class=\"me1\">denseRank</span><span class=\"sy0\">;</span><br/>    scores.<span class=\"me1\">ordinalRank</span><span class=\"sy0\">;</span><br/>    scores.<span class=\"me1\">fractionalRank</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Standard ranking<br/>1 44 Solomon<br/>2 42 Jason<br/>2 42 Errol<br/>4 41 Garry<br/>4 41 Bernard<br/>4 41 Barry<br/>7 39 Stephen<br/>*/</span><br/><span class=\"kw4\">void</span> standardRank<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Standard Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>value<span class=\"sy0\">;</span> data.<span class=\"me1\">values</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> rank<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writeln<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                rank<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Modified ranking<br/>1 44 Solomon<br/>3 42 Jason<br/>3 42 Errol<br/>6 41 Garry<br/>6 41 Bernard<br/>6 41 Barry<br/>7 39 Stephen<br/>*/</span><br/><span class=\"kw4\">void</span> modifiedRank<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Modified Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>value<span class=\"sy0\">;</span> data.<span class=\"me1\">values</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                rank<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writeln<span class=\"br0\">(</span>rank<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Dense ranking<br/>1 44 Solomon<br/>2 42 Jason<br/>2 42 Errol<br/>3 41 Garry<br/>3 41 Bernard<br/>3 41 Barry<br/>4 39 Stephen<br/>*/</span><br/><span class=\"kw4\">void</span> denseRank<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Dense Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>value<span class=\"sy0\">;</span> data.<span class=\"me1\">values</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writeln<span class=\"br0\">(</span>rank<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        rank<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Ordinal ranking<br/>1 44 Solomon<br/>2 42 Jason<br/>3 42 Errol<br/>4 41 Garry<br/>5 41 Bernard<br/>6 41 Barry<br/>7 39 Stephen<br/>*/</span><br/><span class=\"kw4\">void</span> ordinalRank<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Ordinal Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>value<span class=\"sy0\">;</span> data.<span class=\"me1\">values</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writeln<span class=\"br0\">(</span>rank<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                rank<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>Fractional ranking<br/>1,0 44 Solomon<br/>2,5 42 Jason<br/>2,5 42 Errol<br/>5,0 41 Garry<br/>5,0 41 Bernard<br/>5,0 41 Barry<br/>7,0 39 Stephen<br/>*/</span><br/><span class=\"kw4\">void</span> fractionalRank<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Fractional Rank\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>value<span class=\"sy0\">;</span> data.<span class=\"me1\">values</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">real</span> avg <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> cnt<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                rank<span class=\"sy0\">++;</span><br/>                cnt<span class=\"sy0\">++;</span><br/>                avg<span class=\"sy0\">+=</span>rank<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        avg <span class=\"sy0\">/=</span> cnt<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">==</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writef<span class=\"br0\">(</span><span class=\"st0\">\"%0.1f \"</span><span class=\"sy0\">,</span> avg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                writeln<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 33, "block": "<pre class=\"text highlighted_source\">defmodule Ranking do<br/>  def methods(data) do<br/>    IO.puts \"stand.\\tmod.\\tdense\\tord.\\tfract.\"<br/>    Enum.group_by(data, fn {score,_name} -&gt; score end)<br/>    |&gt; Enum.map(fn {score,pairs} -&gt;<br/>         names = Enum.map(pairs, fn {_,name} -&gt; name end) |&gt; Enum.reverse<br/>         {score, names}<br/>       end)<br/>    |&gt; Enum.sort_by(fn {score,_} -&gt; -score end)<br/>    |&gt; Enum.with_index<br/>    |&gt; Enum.reduce({1,0,0}, fn {{score, names}, i}, {s_rnk, m_rnk, o_rnk} -&gt;<br/>         d_rnk = i + 1<br/>         m_rnk = m_rnk + length(names)<br/>         f_rnk = ((s_rnk + m_rnk) / 2) |&gt; to_string |&gt; String.replace(\".0\",\"\")<br/>         o_rnk = Enum.reduce(names, o_rnk, fn name,acc -&gt;<br/>           IO.puts \"#{s_rnk}\\t#{m_rnk}\\t#{d_rnk}\\t#{acc+1}\\t#{f_rnk}\\t#{score} #{name}\"<br/>           acc + 1<br/>         end)<br/>         {s_rnk+length(names), m_rnk, o_rnk}<br/>       end)<br/>  end<br/>end<br/>\u00a0<br/>~w\"44 Solomon<br/>   42 Jason<br/>   42 Errol<br/>   41 Garry<br/>   41 Bernard<br/>   41 Barry<br/>   39 Stephen\"<br/>|&gt; Enum.chunk(2)<br/>|&gt; Enum.map(fn [score,name] -&gt; {String.to_integer(score),name} end)<br/>|&gt; Ranking.methods</pre>"}, {"lang": "Go", "loc": 113, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> rankable <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>\tLen<span class=\"sy1\">()</span> <span class=\"kw4\">int</span><br/>\tRankEqual<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> StandardRank<span class=\"sy1\">(</span>d rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span>Len<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">var</span> k <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>d<span class=\"sy3\">.</span>RankEqual<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tk <span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ModifiedRank<span class=\"sy1\">(</span>d rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span>Len<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>\t\tk <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> &amp;&amp; d<span class=\"sy3\">.</span>RankEqual<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tk <span class=\"sy2\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> DenseRank<span class=\"sy1\">(</span>d rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span>Len<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">var</span> k <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>d<span class=\"sy3\">.</span>RankEqual<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tk<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> OrdinalRank<span class=\"sy1\">(</span>d rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span>Len<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> FractionalRank<span class=\"sy1\">(</span>d rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span>Len<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">);</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">var</span> j <span class=\"kw4\">int</span><br/>\t\tf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> &amp;&amp; d<span class=\"sy3\">.</span>RankEqual<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tf <span class=\"sy2\">+=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tf <span class=\"sy2\">/=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>j <span class=\"sy3\">-</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; j<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> f<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> scores <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tscore <span class=\"kw4\">int</span><br/>\tname  <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s scores<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>                <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s scores<span class=\"sy1\">)</span> RankEqual<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>score <span class=\"sy3\">==</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>score <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s scores<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>           <span class=\"sy1\">{</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s scores<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>score <span class=\"sy2\">!=</span> s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>score <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>score &gt; s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>score<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>name &lt; s<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>name<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> data <span class=\"sy2\">=</span> scores<span class=\"sy1\">{</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">44</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Solomon\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">42</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jason\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">42</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Errol\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Garry\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Bernard\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Barry\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">39</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Stephen\"</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tshow <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>name <span class=\"kw4\">string</span><span class=\"sy1\">,</span> fn <span class=\"kw4\">func</span><span class=\"sy1\">(</span>rankable<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>name<span class=\"sy1\">,</span> <span class=\"st0\">\"Ranking:\"</span><span class=\"sy1\">)</span><br/>\t\tr <span class=\"sy2\">:=</span> fn<span class=\"sy1\">(</span>data<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> data <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%4v -\u00a0%2d\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">[</span>i<span class=\"sy1\">],</span> d<span class=\"sy3\">.</span><span class=\"me1\">score</span><span class=\"sy1\">,</span> d<span class=\"sy3\">.</span><span class=\"me1\">name</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tsort<span class=\"sy3\">.</span><span class=\"me1\">Sort</span><span class=\"sy1\">(</span>data<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"Standard\"</span><span class=\"sy1\">,</span> StandardRank<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Modified\"</span><span class=\"sy1\">,</span> ModifiedRank<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Dense\"</span><span class=\"sy1\">,</span> DenseRank<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Ordinal\"</span><span class=\"sy1\">,</span> OrdinalRank<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Fractional\"</span><span class=\"sy1\">,</span> FractionalRank<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 74, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>groupBy<span class=\"sy0\">,</span> sort<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Item               <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> ItemList           <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Item<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> ItemGroups         <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ItemList<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> RankItem a         <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> RankItemList a     <span class=\"sy0\">=</span> <span class=\"br0\">[</span>RankItem a<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- make sure the input is ordered and grouped by score</span><br/>prepare <span class=\"sy0\">::</span> ItemList <span class=\"sy0\">-&gt;</span> ItemGroups<br/>prepare <span class=\"sy0\">=</span> groupBy gf <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">.</span> sort<br/>    <span class=\"kw1\">where</span> gf <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">==</span> b<br/>\u00a0<br/><span class=\"co1\">-- give an item a rank</span><br/>rank <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> Item <span class=\"sy0\">-&gt;</span> RankItem a<br/>rank n <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ranking methods</span><br/>standard<span class=\"sy0\">,</span> modified<span class=\"sy0\">,</span> dense<span class=\"sy0\">,</span> ordinal <span class=\"sy0\">::</span> ItemGroups <span class=\"sy0\">-&gt;</span> RankItemList <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>\u00a0<br/>standard <span class=\"sy0\">=</span> ms <span class=\"nu0\">1</span> <span class=\"kw1\">where</span><br/>    ms <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    ms n <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>rank n<span class=\"br0\">)</span> x <span class=\"sy0\">++</span> ms <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> x<span class=\"br0\">)</span> xs<br/>\u00a0<br/>modified <span class=\"sy0\">=</span> md <span class=\"nu0\">1</span> <span class=\"kw1\">where</span><br/>    md <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    md n <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span>   <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> x<br/>                        nl <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> l<br/>                        nl1 <span class=\"sy0\">=</span> nl <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">in</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>rank nl1<span class=\"br0\">)</span> x <span class=\"sy0\">++</span> md <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> l<span class=\"br0\">)</span> xs<br/>\u00a0<br/>dense <span class=\"sy0\">=</span> md <span class=\"nu0\">1</span> <span class=\"kw1\">where</span><br/>    md <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    md n <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>rank n<span class=\"br0\">)</span> x <span class=\"sy0\">++</span> md <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<br/>\u00a0<br/>ordinal <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> rank <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>\u00a0<br/>fractional <span class=\"sy0\">::</span> ItemGroups <span class=\"sy0\">-&gt;</span> RankItemList <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>fractional <span class=\"sy0\">=</span> mf <span class=\"nu0\">1.0</span> <span class=\"kw1\">where</span><br/>    mf <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    mf n <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span>   <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> x<br/>                        o <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> l <span class=\"br0\">[</span>n <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>                        ld <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> l<br/>                        a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> o <span class=\"sy0\">/</span> ld<br/>                    <span class=\"kw1\">in</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>rank a<span class=\"br0\">)</span> x <span class=\"sy0\">++</span> mf <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> ld<span class=\"br0\">)</span> xs<br/>\u00a0<br/><span class=\"co1\">-- sample data</span><br/>test <span class=\"sy0\">::</span> ItemGroups<br/>test <span class=\"sy0\">=</span> prepare<br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solomon\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Jason\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Errol\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Garry\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bernard\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Barry\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">39</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Stephen\"</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- print rank items nicely</span><br/>nicePrint <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> RankItemList a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>nicePrint xs items <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> xs<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> np items<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a>   <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"kw1\">where</span> np <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> intercalate <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    nicePrint <span class=\"st0\">\"Standard:\"</span>   <span class=\"sy0\">$</span> standard test<br/>    nicePrint <span class=\"st0\">\"Modified:\"</span>   <span class=\"sy0\">$</span> modified test<br/>    nicePrint <span class=\"st0\">\"Dense:\"</span>      <span class=\"sy0\">$</span> dense test<br/>    nicePrint <span class=\"st0\">\"Ordinal:\"</span>    <span class=\"sy0\">$</span> ordinal test<br/>    nicePrint <span class=\"st0\">\"Fractional:\"</span> <span class=\"sy0\">$</span> fractional test<br/>\u00a0</pre>"}, {"lang": "J", "loc": 19, "block": "<pre class=\"j highlighted_source\">competitors=:&lt;;.<span class=\"nu0\">_1</span>;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/> <span class=\"nu0\">44</span> Solomon<br/> <span class=\"nu0\">42</span> Jason<br/> <span class=\"nu0\">42</span> Errol<br/> <span class=\"nu0\">41</span> Garry<br/> <span class=\"nu0\">41</span> Bernard<br/> <span class=\"nu0\">41</span> Barry<br/> <span class=\"nu0\">39</span> Stephen<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>scores=:  {.\"<span class=\"nu0\">1</span><br/>\u00a0<br/>standard=: <span class=\"nu0\">1</span>+i.~<br/>modified=: <span class=\"nu0\">1</span>+i:~<br/>dense=: #/.~ # #\\@~.<br/>ordinal=: #\\<br/>fractional=: #/.~ # ] <span class=\"sy0\">(</span>+/%#<span class=\"sy0\">)</span>/. #\\<br/>\u00a0<br/>rank=:<span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'&lt;\"<a class=\"__cf_email__\" data-cfemail=\"0939497c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@:scores,.]'</span></pre>"}, {"lang": "Java", "loc": 75, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RankingMethods <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> input <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"44 Solomon\"</span>, <span class=\"st0\">\"42 Jason\"</span>, <span class=\"st0\">\"42 Errol\"</span>,<br/>        <span class=\"st0\">\"41 Garry\"</span>, <span class=\"st0\">\"41 Bernard\"</span>, <span class=\"st0\">\"41 Barry\"</span>, <span class=\"st0\">\"39 Stephen\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> input.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> map <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TreeMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> b.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> key <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s+\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>arr <span class=\"sy0\">=</span> map.<span class=\"me1\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>                arr <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>i, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>            map.<span class=\"me1\">put</span><span class=\"br0\">(</span>key, arr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> groups <span class=\"sy0\">=</span> map.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>map.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        standardRanking<span class=\"br0\">(</span>len, groups<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        modifiedRanking<span class=\"br0\">(</span>len, groups<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        denseRanking<span class=\"br0\">(</span>len, groups<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ordinalRanking<span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fractionalRanking<span class=\"br0\">(</span>len, groups<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> standardRanking<span class=\"br0\">(</span><span class=\"kw4\">int</span> len, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> groups<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Standard ranking\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, group <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>group <span class=\"sy0\">&lt;</span> groups.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> groups<span class=\"br0\">[</span>group<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                rank <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                group<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s%n\"</span>, rank, input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> modifiedRanking<span class=\"br0\">(</span><span class=\"kw4\">int</span> len, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> groups<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Modified ranking\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, group <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>group <span class=\"sy0\">&lt;</span> groups.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> groups<span class=\"br0\">[</span>group<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                rank <span class=\"sy0\">+=</span> groups<span class=\"br0\">[</span>group<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s%n\"</span>, rank, input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> denseRanking<span class=\"br0\">(</span><span class=\"kw4\">int</span> len, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> groups<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Dense ranking\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rank <span class=\"sy0\">&lt;</span> groups.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> groups<span class=\"br0\">[</span>rank<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                rank<span class=\"sy0\">++;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s%n\"</span>, rank, input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> ordinalRanking<span class=\"br0\">(</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Ordinal ranking\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s%n\"</span>, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> fractionalRanking<span class=\"br0\">(</span><span class=\"kw4\">int</span> len, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> groups<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Fractional ranking\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, tmp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, group <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>group <span class=\"sy0\">&lt;</span> groups.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> groups<span class=\"br0\">[</span>group<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                tmp <span class=\"sy0\">+=</span> groups<span class=\"br0\">[</span>group<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                rank <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> tmp<span class=\"br0\">)</span> <span class=\"sy0\">/</span> 2.0F<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2.1f\u00a0%s%n\"</span>, rank, input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 76, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> xs <span class=\"sy0\">=</span> <span class=\"st0\">'Solomon Jason Errol Garry Bernard Barry Stephen'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        ns <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">39</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        sorted <span class=\"sy0\">=</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span> name<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span> score<span class=\"sy0\">:</span> ns<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> b.<span class=\"me1\">score</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">score</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> c <span class=\"sy0\">?</span> c <span class=\"sy0\">:</span> a.<span class=\"me1\">name</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">name</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> a.<span class=\"me1\">name</span> <span class=\"sy0\">&gt;</span> b.<span class=\"me1\">name</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        names <span class=\"sy0\">=</span> sorted.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x.<span class=\"me1\">name</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        scores <span class=\"sy0\">=</span> sorted.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x.<span class=\"me1\">score</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        reversed <span class=\"sy0\">=</span> scores.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        unique <span class=\"sy0\">=</span> scores.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> scores.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">===</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// RANKINGS AS FUNCTIONS OF SCORES: SORTED, REVERSED AND UNIQUE</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> rankings <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>score<span class=\"sy0\">,</span> index<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                name<span class=\"sy0\">:</span> names<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                score<span class=\"sy0\">:</span> score<span class=\"sy0\">,</span><br/>\u00a0<br/>                Ordinal<span class=\"sy0\">:</span> index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                Standard<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> scores.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                Modified<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> reversed.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> reversed.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                Dense<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> unique.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                Fractional<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>                        <span class=\"br0\">(</span>scores.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                        <span class=\"br0\">(</span>reversed.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> reversed.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        tbl <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>            <span class=\"st0\">'Name Score Standard Modified Dense Ordinal Fractional'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>scores.<span class=\"me1\">map</span><span class=\"br0\">(</span>rankings<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> a.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span>x.<span class=\"me1\">name</span><span class=\"sy0\">,</span> x.<span class=\"me1\">score</span><span class=\"sy0\">,</span><br/>                    x.<span class=\"me1\">Standard</span><span class=\"sy0\">,</span> x.<span class=\"me1\">Modified</span><span class=\"sy0\">,</span> x.<span class=\"me1\">Dense</span><span class=\"sy0\">,</span> x.<span class=\"me1\">Ordinal</span><span class=\"sy0\">,</span> x.<span class=\"me1\">Fractional</span><br/>                <span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"co1\">//[[a]] -&gt; bool -&gt; s -&gt; s</span><br/>        wikiTable <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRows<span class=\"sy0\">,</span> blnHeaderRow<span class=\"sy0\">,</span> strStyle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">'{| class=\"wikitable\" '</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>                strStyle <span class=\"sy0\">?</span> <span class=\"st0\">'style=\"'</span> <span class=\"sy0\">+</span> strStyle <span class=\"sy0\">+</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">+</span> lstRows.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRow<span class=\"sy0\">,</span> iRow<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> strDelim <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>blnHeaderRow <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>iRow<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'!'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|-<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> lstRow.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">typeof</span> v <span class=\"sy0\">===</span> <span class=\"st0\">'undefined'</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> v<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|}'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> wikiTable<span class=\"br0\">(</span>tbl<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span> <span class=\"st0\">'text-align:center'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>[ player1, score1, player2, score2, ...]\n</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function ties{T&lt;:Real}(a::Array{T,1})<br/>    unique(a[2:end][a[2:end] .== a[1:end-1]])<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 80, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"coMULTI\">/* all ranking functions assume the array of Pairs is non-empty and already sorted by decreasing order of scores<br/>   and then, if the scores are equal, by reverse alphabetic order of names<br/>*/</span><br/>\u00a0<br/>fun standardRanking<span class=\"br0\">(</span>scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span>   <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rankings <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>scores.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    rankings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until scores.<span class=\"me1\">size</span><span class=\"br0\">)</span> rankings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span> <span class=\"sy0\">==</span> scores<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span> rankings<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> i + <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> rankings<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun modifiedRanking<span class=\"br0\">(</span>scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span>   <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rankings <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>scores.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    rankings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until scores.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rankings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currScore <span class=\"sy0\">=</span> scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span>         <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>currScore <span class=\"sy0\">!=</span> scores<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span> break<br/>            rankings<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span>       <br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> rankings<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun denseRanking<span class=\"br0\">(</span>scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span>   <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rankings <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>scores.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    rankings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> prevRanking <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until scores.<span class=\"me1\">size</span><span class=\"br0\">)</span> rankings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span> <span class=\"sy0\">==</span> scores<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span> prevRanking <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> ++prevRanking<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> rankings<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun ordinalRanking<span class=\"br0\">(</span>scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>scores.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it + <span class=\"nu0\">1</span> <span class=\"br0\">}</span>  <br/>\u00a0<br/>fun fractionalRanking<span class=\"br0\">(</span>scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> DoubleArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rankings <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>scores.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    rankings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until scores.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> i <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currScore <span class=\"sy0\">=</span> scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span>         <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>currScore <span class=\"sy0\">!=</span> scores<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span> break<br/>            k <span class=\"sy0\">=</span> j<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> avg <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k..<span class=\"me1\">i</span><span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"nu0\">1.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in k..<span class=\"me1\">i</span><span class=\"br0\">)</span> rankings<span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"sy0\">=</span> avg       <br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> rankings<br/><span class=\"br0\">}</span>    <br/>\u00a0<br/>fun printRankings<span class=\"br0\">(</span>title<span class=\"sy0\">:</span> String, rankings<span class=\"sy0\">:</span> IntArray, scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>title + <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rankings.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        print <span class=\"br0\">(</span><span class=\"st0\">\"${rankings[i]}  \"</span><span class=\"br0\">)</span>  <br/>        println<span class=\"br0\">(</span>scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">removeSurrounding</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span>, <span class=\"st0\">\")\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printFractionalRankings<span class=\"br0\">(</span>title<span class=\"sy0\">:</span> String, rankings<span class=\"sy0\">:</span> DoubleArray, scores<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>title + <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rankings.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        print <span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>3.2f<span class=\"st0\">\".format(rankings[i])}  \"</span><span class=\"br0\">)</span>  <br/>        println<span class=\"br0\">(</span>scores<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">removeSurrounding</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span>, <span class=\"st0\">\")\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> scores <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">44</span> to <span class=\"st0\">\"Solomon\"</span>,  <span class=\"nu0\">42</span> to <span class=\"st0\">\"Jason\"</span>, <span class=\"nu0\">42</span> to <span class=\"st0\">\"Errol\"</span>,  <span class=\"nu0\">41</span> to <span class=\"st0\">\"Garry\"</span>,<br/>                         <span class=\"nu0\">41</span> to <span class=\"st0\">\"Bernard\"</span>,  <span class=\"nu0\">41</span> to <span class=\"st0\">\"Barry\"</span>, <span class=\"nu0\">39</span> to <span class=\"st0\">\"Stephen\"</span><span class=\"br0\">)</span><br/>    printRankings<span class=\"br0\">(</span><span class=\"st0\">\"Standard ranking\"</span>, standardRanking<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>, scores<span class=\"br0\">)</span><br/>    printRankings<span class=\"br0\">(</span><span class=\"st0\">\"Modified ranking\"</span>, modifiedRanking<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>, scores<span class=\"br0\">)</span><br/>    printRankings<span class=\"br0\">(</span><span class=\"st0\">\"Dense ranking\"</span>, denseRanking<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>, scores<span class=\"br0\">)</span><br/>    printRankings<span class=\"br0\">(</span><span class=\"st0\">\"Ordinal ranking\"</span>, ordinalRanking<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>, scores<span class=\"br0\">)</span><br/>    printFractionalRankings<span class=\"br0\">(</span><span class=\"st0\">\"Fractional ranking\"</span>, fractionalRanking<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>, scores<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data = <a class=\"__cf_email__\" data-cfemail=\"d387a1b2bda0a3bca0b693\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{{44, 42, 42, 41, 41, 41, 39}, {\"Solomon\", \"Jason\", <br/>     \"Errol\", \"Garry\", \"Bernard\", \"Barry\", \"Stephen\"}};<br/>\u00a0<br/>rank[data_, type_]\u00a0:=<br/> Module[{t = Trans<a class=\"__cf_email__\" data-cfemail=\"2959465a4c69\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"e6b5899492a682879287\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, Range[<a class=\"__cf_email__\" data-cfemail=\"367a535851425e7652574257\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, 1, -1]}},<br/>  Switch[type,<br/>   \"standard\", data/<a class=\"__cf_email__\" data-cfemail=\"28067a5d444d68\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@First/@SplitBy[t, First],<br/>   \"modified\", data/<a class=\"__cf_email__\" data-cfemail=\"725c20071e1732\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@Last/@SplitBy[t, First],<br/>   \"dense\", data/.Thread[#-&gt;Range[<a class=\"__cf_email__\" data-cfemail=\"175b727970637f57\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#]]&amp;@SplitBy[t, First][[All, 1, 1]],<br/>   \"ordinal\", <a class=\"__cf_email__\" data-cfemail=\"abf9ceddced9d8ceebe4d9cfced9c2c5cc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[data],<br/>   \"fractional\", data/<a class=\"__cf_email__\" data-cfemail=\"2f017d5a434a6f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@(Mean[#]/.{a_Rational:&gt;N[a]}&amp;)/@ SplitBy[t, First]]]<br/>\u00a0<br/>fmtRankedData[data_, type_]\u00a0:= <br/> Labeled[Grid[<br/>   SortBy[<a class=\"__cf_email__\" data-cfemail=\"08497a7a69714e64697c7c6d6648\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{{<a class=\"__cf_email__\" data-cfemail=\"643016050a17140b170124\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{rank[data[[All, 1]], type]}, <br/>       data}}, First], Alignment-&gt;Left], type&lt;&gt;\" ranking:\", Top]<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"ffb88d969bbf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{fmtRankedData[data, #] &amp; /@ {\"standard\", \"modified\", \"dense\", <br/>    \"ordinal\", \"fractional\"}}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">standard<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> my<span class=\"br0\">(</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>last<span class=\"sy0\">,</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> v<span class=\"sy0\">;</span><br/>modified<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> my<span class=\"br0\">(</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>#v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>last<span class=\"sy0\">,</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> v<span class=\"sy0\">;</span><br/>dense<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> my<span class=\"br0\">(</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>rank<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>last<span class=\"sy0\">,</span>last<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> rank<span class=\"sy0\">++,</span> rank<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> v<span class=\"sy0\">;</span><br/>ordinal<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> v<span class=\"sy0\">;</span><br/>fractional<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>a<span class=\"sy0\">=</span>standard<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span>b<span class=\"sy0\">=</span>modified<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">vector</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu1\">44</span><span class=\"sy0\">,</span><span class=\"st0\">\"Solomon\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">42</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jason\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">42</span><span class=\"sy0\">,</span><span class=\"st0\">\"Errol\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">41</span><span class=\"sy0\">,</span><span class=\"st0\">\"Garry\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">41</span><span class=\"sy0\">,</span><span class=\"st0\">\"Bernard\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">41</span><span class=\"sy0\">,</span><span class=\"st0\">\"Barry\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">39</span><span class=\"sy0\">,</span><span class=\"st0\">\"Stephen\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>standard<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>modified<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>dense<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>ordinal<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>fractional<span class=\"br0\">(</span>v<span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 45, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@scores</span> <span class=\"sy0\">=</span><br/>    Solomon <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">44</span><span class=\"sy0\">,</span><br/>    Jason   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>    Errol   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span><br/>    Garry   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>    Bernard <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>    Barry   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span><br/>    Stephen <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">39</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tiers <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@s</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pairs</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"me1\">value</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> standard <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    gather <span class=\"kw1\">for</span> tiers <span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@players</span> <span class=\"br0\">{</span><br/>\ttake <span class=\"re0\">$rank</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$rank</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> modified <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    gather <span class=\"kw1\">for</span> tiers <span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@players</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$rank</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>\ttake <span class=\"re0\">$rank</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dense <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> tiers<span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span><span class=\"re0\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@^players</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ordinal <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@s</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">++</span><span class=\"re0\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">*.</span><span class=\"me1\">key</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fractional <span class=\"br0\">(</span><span class=\"re0\">@s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    gather <span class=\"kw1\">for</span> tiers <span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@players</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$beg</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rank</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rank</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>\ttake <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$beg</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">@players</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@players</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span>   <span class=\"st0\">\"Standard:\"</span><span class=\"sy0\">;</span>   <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span>   standard <span class=\"re0\">@scores</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Modified:\"</span><span class=\"sy0\">;</span>   <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span>   modified <span class=\"re0\">@scores</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Dense:\"</span><span class=\"sy0\">;</span>      <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span>      dense <span class=\"re0\">@scores</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Ordinal:\"</span><span class=\"sy0\">;</span>    <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span>    ordinal <span class=\"re0\">@scores</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Fractional:\"</span><span class=\"sy0\">;</span> <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> fractional <span class=\"re0\">@scores</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 144, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Ranking<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span>DefaultParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Standard\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipelineByPropertyName<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$InputObject</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Standard\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Standard</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Modified\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Modified</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Dense\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Dense</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Ordinal\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Ordinal</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Fractional\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Fractional</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>OrdinalRank <span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Values</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Values</span>.Count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span> <br/>                <span class=\"re0\">$Values</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"re0\">$Values</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Rank <span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Scores</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$score</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Scores</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$score</span>.<span class=\"kw2\">Group</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$score</span>.Rank<span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"re0\">$Scores</span>.<span class=\"kw2\">Group</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> New<span class=\"sy0\">-</span>Competitor <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$Name</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Score</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                Name  <span class=\"sy0\">=</span> <span class=\"re0\">$Name</span><br/>                Score <span class=\"sy0\">=</span> <span class=\"re0\">$Score</span><br/>                Rank  <span class=\"sy0\">=</span> <span class=\"re0\">$Rank</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$competitors</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$scores</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"re0\">$competitors</span> <span class=\"sy0\">+=</span> New<span class=\"sy0\">-</span>Competitor <span class=\"kw5\">-Name</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Split<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>Score <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Split<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    End<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$scores</span> <span class=\"sy0\">=</span> <span class=\"re0\">$competitors</span> <span class=\"sy0\">|</span><br/>            <span class=\"kw1\">Sort-Object</span>   <span class=\"kw5\">-Property</span> Score <span class=\"kw5\">-Descending</span> <span class=\"sy0\">|</span><br/>            <span class=\"kw1\">Group-Object</span>  <span class=\"kw5\">-Property</span> Score <span class=\"sy0\">|</span><br/>            <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"Score\"</span>; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Name<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"Rank\"</span>; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> Count<span class=\"sy0\">,</span> <span class=\"kw2\">Group</span><br/>\u00a0<br/>        <span class=\"kw3\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$PSCmdlet</span>.ParameterSetName<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"Standard\"</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>                <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$scores</span>.Count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span> <br/>                    <span class=\"re0\">$scores</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$rank</span><br/>                    <span class=\"re0\">$rank</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$scores</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Count<br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Get<span class=\"sy0\">-</span>Rank <span class=\"re0\">$scores</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"Modified\"</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$score</span> <span class=\"kw3\">in</span> <span class=\"re0\">$scores</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"re0\">$score</span>.Count <span class=\"sy0\">+</span> <span class=\"re0\">$rank</span><br/>                    <span class=\"re0\">$score</span>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$rank</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Get<span class=\"sy0\">-</span>Rank <span class=\"re0\">$scores</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"Dense\"</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$scores</span>.Count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span> <br/>                    <span class=\"re0\">$scores</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Get<span class=\"sy0\">-</span>Rank <span class=\"re0\">$scores</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"Ordinal\"</span><br/>            <span class=\"br0\">{</span><br/>                Get<span class=\"sy0\">-</span>OrdinalRank <span class=\"re0\">$competitors</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"Fractional\"</span><br/>            <span class=\"br0\">{</span><br/>                Get<span class=\"sy0\">-</span>OrdinalRank <span class=\"re0\">$competitors</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Group-Object</span> <span class=\"kw5\">-Property</span> Score <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Count <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span>.Rank <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Average</span><span class=\"br0\">)</span>.Average<br/>\u00a0<br/>                        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$competitor</span> <span class=\"kw3\">in</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            <span class=\"re0\">$competitor</span>.Rank <span class=\"sy0\">=</span> <span class=\"re0\">$rank</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"re0\">$competitors</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 74, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> mc_rank<span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Modified competition ranking\"\"\"</span><br/>    lastresult<span class=\"sy0\">,</span> fifo <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> item <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start-<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastresult:<br/>            fifo +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>item<span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">while</span> fifo:<br/>                <span class=\"kw1\">yield</span> n<span class=\"sy0\">,</span> fifo.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            lastresult<span class=\"sy0\">,</span> fifo <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> fifo + <span class=\"br0\">[</span>item<span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> fifo:<br/>        <span class=\"kw1\">yield</span> n+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> fifo.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> sc_rank<span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Standard competition ranking\"\"\"</span><br/>    lastresult<span class=\"sy0\">,</span> lastrank <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> item <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastresult:<br/>            <span class=\"kw1\">yield</span> lastrank<span class=\"sy0\">,</span> item<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">yield</span> n<span class=\"sy0\">,</span> item<br/>            lastresult<span class=\"sy0\">,</span> lastrank <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> d_rank<span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Dense ranking\"\"\"</span><br/>    lastresult<span class=\"sy0\">,</span> lastrank <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> start - <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span> item <span class=\"kw1\">in</span> iterable:<br/>        <span class=\"kw1\">if</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastresult:<br/>            <span class=\"kw1\">yield</span> lastrank<span class=\"sy0\">,</span> item<br/>        <span class=\"kw1\">else</span>:<br/>            lastresult<span class=\"sy0\">,</span> lastrank <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lastrank + <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">yield</span> lastrank<span class=\"sy0\">,</span> item<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> o_rank<span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Ordinal  ranking\"\"\"</span><br/>    <span class=\"kw1\">yield</span> <span class=\"kw1\">from</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> f_rank<span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Fractional ranking\"\"\"</span><br/>    last<span class=\"sy0\">,</span> fifo <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> item <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>iterable<span class=\"sy0\">,</span> start<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> last:<br/>            <span class=\"kw1\">if</span> fifo:<br/>                mean <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> fifo<span class=\"br0\">)</span> / <span class=\"kw2\">len</span><span class=\"br0\">(</span>fifo<span class=\"br0\">)</span><br/>                <span class=\"kw1\">while</span> fifo:<br/>                    <span class=\"kw1\">yield</span> mean<span class=\"sy0\">,</span> fifo.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        last <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        fifo.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> item<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fifo:<br/>        mean <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> fifo<span class=\"br0\">)</span> / <span class=\"kw2\">len</span><span class=\"br0\">(</span>fifo<span class=\"br0\">)</span><br/>        <span class=\"kw1\">while</span> fifo:<br/>            <span class=\"kw1\">yield</span> mean<span class=\"sy0\">,</span> fifo.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    scores <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"st0\">'Solomon'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"st0\">'Jason'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"st0\">'Errol'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">'Garry'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">'Bernard'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"st0\">'Barry'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">39</span><span class=\"sy0\">,</span> <span class=\"st0\">'Stephen'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Scores to be ranked (best first):'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> scores:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'       \u00a0%2i\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>s <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> ranker <span class=\"kw1\">in</span> <span class=\"br0\">[</span>sc_rank<span class=\"sy0\">,</span> mc_rank<span class=\"sy0\">,</span> d_rank<span class=\"sy0\">,</span> o_rank<span class=\"sy0\">,</span> f_rank<span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>%s:'</span>\u00a0% ranker.__doc__<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> rank<span class=\"sy0\">,</span> score <span class=\"kw1\">in</span> ranker<span class=\"br0\">(</span>scores<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' \u00a0%3g,\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>rank<span class=\"sy0\">,</span> score<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 77, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Tim-brown 2014-09-11<br/>\u00a0<br/>;; produces a ranking according to ranking function: rfn<br/>;; INPUT:<br/>;;  lst\u00a0: (list (score . details))<br/>;;  rfn\u00a0: (length-scores)<br/>;;         -&gt; (values<br/>;;              ranks-added                 \u00a0; how many ranks to add for the next iteration<br/>;;              (idx . rest -&gt; rank-offset))\u00a0; function that produces the rank for the idx^th element<br/>;;                                          \u00a0; in the scoring (arity must be &gt;= 1)<br/>(define (rank-list all-scores rfn)<br/>  (let loop ((rank-0 0) (lst (sort all-scores &gt; #:key car)) (acc empty))<br/>    (cond<br/>      [(null? lst) acc]<br/>      [else<br/>       (define 1st-score (caar lst))<br/>       (define (ties-with-1st? cand) (= (car cand) 1st-score))<br/>       (define-values (tied unranked) (splitf-at lst ties-with-1st?))<br/>      \u00a0;; all ranking functions should properly handle a singleton tied list<br/>       (define tied-len (length tied))<br/>       (define tied? (&gt; tied-len 1))<br/>       (define-values (ranks-added rank-offset-fn) (rfn tied-len))<br/>       (define ranked-tied (for/list ((t (in-list tied)) (i (in-naturals 1)))<br/>                             (list* tied? (+ rank-0 (rank-offset-fn i)) t)))<br/>       (loop (+ ranks-added rank-0) unranked (append acc ranked-tied))])))<br/>\u00a0<br/>;; Ties share what would have been their first ordinal number<br/>(define (rank-function:Standard l) <br/>  (values l (thunk* 1)))<br/>\u00a0<br/>;; Ties share what would have been their last ordinal number<br/>(define (rank-function:Modified l)<br/>  (values l (thunk* l)))<br/>\u00a0<br/>;; Ties share the next available integer  <br/>(define (rank-function:Dense l)<br/>  (values 1 (thunk* 1)))<br/>\u00a0<br/>;; Competitors take the next available integer. Ties are not treated otherwise<br/>(define (rank-function:Ordinal l)<br/>  (values l (\u03bb (n . _) n)))<br/>\u00a0<br/>;; Ties share the mean of what would have been their ordinal numbers<br/>(define (rank-function:Fractional l)<br/>  (values l (thunk* (/ (+ l 1) 2))))<br/>\u00a0<br/>(define score-board<br/>  '((44 . Solomon)<br/>    (42 . Jason)<br/>    (42 . Errol)<br/>    (41 . Garry)<br/>    (41 . Bernard)<br/>    (41 . Barry)<br/>    (39 . Stephen)))<br/>\u00a0<br/>(define format-number<br/>  (match-lambda<br/>    [(? integer? i) i]<br/>    [(and f (app numerator n) (app denominator d))<br/>     (define-values (q r) (quotient/remainder n d))<br/>     (format \"~a ~a/~a\" q r d)]))<br/>\u00a0<br/>(for ((fn (list<br/>           rank-function:Standard<br/>           rank-function:Modified<br/>           rank-function:Dense<br/>           rank-function:Ordinal<br/>           rank-function:Fractional)))<br/>  (printf \"Function: ~s~%\" fn)<br/>  (for ((r (in-list (rank-list score-board fn))))<br/>    (printf \"~a ~a\\t~a\\t~a~%\"<br/>            (if (car r) \"=\" \" \")<br/>            (format-number (cadr r))<br/>            (caddr r)<br/>            (cdddr r)))<br/>  (newline))</pre>"}, {"lang": "REXX", "loc": 49, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/**************************<br/>44 Solomon  1 1 1 1 1<br/>42 Jason    2 3 2 2 2.5<br/>42 Errol    2 3 2 3 2.5<br/>41 Garry    4 6 3 4 5<br/>41 Bernard  4 6 3 5 5<br/>41 Barry    4 6 3 6 5<br/>39 Stephen  7 7 4 7 7<br/>**************************/</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">7</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">With</span> rank<span class=\"sy0\">.</span>i <span class=\"kw2\">name</span><span class=\"sy0\">.</span>i <span class=\"sy0\">.</span><br/>  <span class=\"coMULTI\">/* say rank.i name.i */</span><br/>  <span class=\"kw3\">End</span><br/>pool=<span class=\"nu0\">0</span><br/>crank=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">7</span><br/>  <span class=\"kw1\">If</span> rank<span class=\"sy0\">.</span>i<span class=\"sy0\">&lt;&gt;</span>crank <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    pool=pool+<span class=\"nu0\">1</span><br/>    lo<span class=\"sy0\">.</span>pool=i<br/>    hi<span class=\"sy0\">.</span>pool=i<br/>    n<span class=\"sy0\">.</span>pool=<span class=\"nu0\">1</span><br/>    ii<span class=\"sy0\">.</span>pool=i<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    n<span class=\"sy0\">.</span>pool=n<span class=\"sy0\">.</span>pool+<span class=\"nu0\">1</span><br/>    hi<span class=\"sy0\">.</span>pool=i<br/>    ii<span class=\"sy0\">.</span>pool=ii<span class=\"sy0\">.</span>pool+i<br/>    <span class=\"kw3\">End</span><br/>  crank=rank<span class=\"sy0\">.</span>i<br/>  pool<span class=\"sy0\">.</span>i=pool<br/>  <span class=\"kw3\">End</span><br/><span class=\"coMULTI\">/*<br/>Do j=1 To pool<br/>  Say 'pool' j n.j lo.j hi.j<br/>  End<br/>*/</span><br/>cp=<span class=\"nu0\">0</span><br/>r=<span class=\"nu0\">0</span><br/>cnt<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">7</span><br/>  p=pool<span class=\"sy0\">.</span>i<br/>  <span class=\"kw1\">If</span> p<span class=\"sy0\">&lt;&gt;</span>cp <span class=\"kw3\">Then</span><br/>    r=r+<span class=\"nu0\">1</span><br/>  res=rank<span class=\"sy0\">.</span>i <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw2\">name</span><span class=\"sy0\">.</span>i,<span class=\"nu0\">8</span><span class=\"br0\">)</span> lo<span class=\"sy0\">.</span>p hi<span class=\"sy0\">.</span>p r i ii<span class=\"sy0\">.</span>p<span class=\"sy0\">/</span>n<span class=\"sy0\">.</span>p<br/>  <span class=\"kw1\">If</span> res=<span class=\"kw6\">sourceline</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> cnt<span class=\"sy0\">.</span>ok=cnt<span class=\"sy0\">.</span>ok+<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Say</span> res<br/>  cp=p<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> cnt<span class=\"sy0\">.</span>ok <span class=\"st0\">'correct lines'</span></pre>"}, {"lang": "Ruby", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">ar = <span class=\"st0\">\"44 Solomon<br/>42 Jason<br/>42 Errol<br/>41 Garry<br/>41 Bernard<br/>41 Barry<br/>39 Stephen\"</span>.<span class=\"me1\">lines</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> line.<span class=\"kw3\">split</span><span class=\"br0\">}</span><br/>grouped = ar.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> pair.<span class=\"me1\">shift</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span><br/>s_rnk = <span class=\"nu0\">1</span><br/>m_rnk = o_rnk = <span class=\"nu0\">0</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"stand.<span class=\"es0\">\\t</span>mod.<span class=\"es0\">\\t</span>dense<span class=\"es0\">\\t</span>ord.<span class=\"es0\">\\t</span>fract.\"</span><br/>\u00a0<br/>grouped.<span class=\"me1\">each</span>.<span class=\"me1\">with_index</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>score, names<span class=\"br0\">)</span>, d_rnk<span class=\"sy0\">|</span><br/>  m_rnk <span class=\"sy0\">+</span>= names.<span class=\"me1\">flatten</span>!.<span class=\"me1\">size</span><br/>  f_rnk = <span class=\"br0\">(</span>s_rnk <span class=\"sy0\">+</span> m_rnk<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><br/>  names.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>name<span class=\"sy0\">|</span><br/>    o_rnk <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{s_rnk}<span class=\"es0\">\\t</span>#{m_rnk}<span class=\"es0\">\\t</span>#{d_rnk}<span class=\"es0\">\\t</span>#{o_rnk}<span class=\"es0\">\\t</span>#{f_rnk.to_s.sub(\"</span>.0<span class=\"st0\">\",\"</span><span class=\"st0\">\")}<span class=\"es0\">\\t</span>#{score} #{name}\"</span><br/>  <span class=\"kw1\">end</span><br/>  s_rnk <span class=\"sy0\">+</span>= names.<span class=\"me1\">size</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 44, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RankingMethods <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Score<span class=\"br0\">(</span>score<span class=\"sy0\">:</span> Int, name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"co1\">// incoming data</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Rank<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">(</span>rank<span class=\"sy0\">:</span> Precision, names<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// outgoing results (can be int or double)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> State<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, done<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Rank<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// internal state, no mutable variables</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, next<span class=\"sy0\">:</span> Rank<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> State<span class=\"br0\">(</span>n, next <span class=\"sy0\">::</span> done<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> grouped<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co1\">// group names together by score, with highest first</span><br/>        <span class=\"br0\">(</span>scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">TreeMap</span><span class=\"br0\">[</span>Int, List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> ++ list.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span>-<span class=\"sy0\">_</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">values</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span>State<span class=\"br0\">[</span>Precision<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, Nil<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">_</span><br/>\u00a0<br/>    <span class=\"co1\">// Ranking methods:</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rankStandard<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        grouped<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>state, names<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> state.<span class=\"me1\">next</span><span class=\"br0\">(</span>state.<span class=\"me1\">n</span>+names.<span class=\"me1\">length</span>, Rank<span class=\"br0\">(</span>state.<span class=\"me1\">n</span>, names<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">done</span>.<span class=\"me1\">reverse</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rankModified<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        rankStandard<span class=\"br0\">(</span>list<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> Rank<span class=\"br0\">(</span>r.<span class=\"me1\">rank</span>+r.<span class=\"me1\">names</span>.<span class=\"me1\">length</span>-<span class=\"nu0\">1</span>, r.<span class=\"me1\">names</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rankDense<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        grouped<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>state, names<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> state.<span class=\"me1\">next</span><span class=\"br0\">(</span>state.<span class=\"me1\">n</span>+<span class=\"nu0\">1</span>, Rank<span class=\"br0\">(</span>state.<span class=\"me1\">n</span>, names<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">done</span>.<span class=\"me1\">reverse</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rankOrdinal<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        list.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>score, n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Rank<span class=\"br0\">(</span>n+<span class=\"nu0\">1</span>, List<span class=\"br0\">(</span>score.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rankFractional<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Score<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        rankStandard<span class=\"br0\">(</span>list<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> Rank<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>r.<span class=\"me1\">rank</span>+r.<span class=\"me1\">names</span>.<span class=\"me1\">length</span>-<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>, r.<span class=\"me1\">names</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// Tests:</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseScores<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s split <span class=\"st0\">\"<span class=\"es1\">\\\\</span>s+\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Array<span class=\"br0\">(</span>s,n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Score<span class=\"br0\">(</span>s.<span class=\"me1\">toInt</span>, n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> test <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"st0\">\"44 Solomon\"</span>, <span class=\"st0\">\"42 Jason\"</span>, <span class=\"st0\">\"42 Errol\"</span>, <span class=\"st0\">\"41 Garry\"</span>, <span class=\"st0\">\"41 Bernard\"</span>, <span class=\"st0\">\"41 Barry\"</span>, <span class=\"st0\">\"39 Stephen\"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>parseScores<span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Standard:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>rankStandard<span class=\"br0\">(</span>test<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Modified:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>rankModified<span class=\"br0\">(</span>test<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Dense:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>rankDense<span class=\"br0\">(</span>test<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Ordinal:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>rankOrdinal<span class=\"br0\">(</span>test<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Fractional:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>rankFractional<span class=\"br0\">(</span>test<span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 62, "block": "<pre class=\"ruby highlighted_source\">var scores = <span class=\"br0\">[</span><br/>    Pair<span class=\"br0\">(</span>Solomon <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">44</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Jason   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Errol   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Garry   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Bernard <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Barry   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span>,<br/>    Pair<span class=\"br0\">(</span>Stephen <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">39</span><span class=\"br0\">)</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>func tiers<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s.<span class=\"me1\">group_by</span> <span class=\"br0\">{</span> .<span class=\"me1\">value</span> <span class=\"br0\">}</span>.<span class=\"me1\">kv</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">flip</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">value</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">key</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func standard<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var rank = <span class=\"nu0\">1</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> players <span class=\"kw1\">in</span> tiers<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            take<span class=\"br0\">(</span>Pair<span class=\"br0\">(</span>rank, players<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            rank <span class=\"sy0\">+</span>= players.<span class=\"me1\">len</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func modified<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var rank = <span class=\"nu0\">0</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> players <span class=\"kw1\">in</span> tiers<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rank <span class=\"sy0\">+</span>= players.<span class=\"me1\">len</span><br/>            take<span class=\"br0\">(</span>Pair<span class=\"br0\">(</span>rank, players<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func dense<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    tiers<span class=\"br0\">(</span>s<span class=\"br0\">)</span>.<span class=\"me1\">map_kv</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> Pair<span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, v<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func ordinal<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s.<span class=\"me1\">map_kv</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> Pair<span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, v.<span class=\"me1\">key</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func fractional<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var rank = <span class=\"nu0\">1</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> players <span class=\"kw1\">in</span> tiers<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var beg = rank<br/>            var <span class=\"kw1\">end</span> = <span class=\"br0\">(</span>rank <span class=\"sy0\">+</span>= players.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>            take<span class=\"br0\">(</span>Pair<span class=\"br0\">(</span>sum<span class=\"br0\">(</span>beg ..^ <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> players.<span class=\"me1\">len</span>, players<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func display<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say r.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"st0\">'%3s\u00a0:\u00a0%s'</span> <span class=\"sy0\">%</span> a... <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say   <span class=\"st0\">\"Standard:\"</span>;   display<span class=\"br0\">(</span>  standard<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Modified:\"</span>;   display<span class=\"br0\">(</span>  modified<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Dense:\"</span>;      display<span class=\"br0\">(</span>     dense<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Ordinal:\"</span>;    display<span class=\"br0\">(</span>   ordinal<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Fractional:\"</span>; display<span class=\"br0\">(</span>fractional<span class=\"br0\">(</span>scores<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 56, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> rank <span class=\"br0\">{</span>rankingMethod sortedList<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Extract the groups in the data (this is pointless for ordinal...)</span><br/>    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw1\">set</span> group <span class=\"br0\">[</span><span class=\"kw1\">set</span> groups <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>score who<span class=\"br0\">}</span> <span class=\"re0\">$sortedList</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$score</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> groups <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$group</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> s <span class=\"re0\">$score</span><br/>\t    <span class=\"kw1\">set</span> group <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> group <span class=\"re0\">$who</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">lappend</span> groups <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$group</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Construct the rankings; note that we have a zero-sized leading group</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> m <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> g <span class=\"re0\">$groups</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"re0\">$rankingMethod</span> <span class=\"br0\">{</span><br/>\t    standard <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lrepeat <span class=\"re0\">$g</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">incr</span> n <span class=\"re0\">$g</span><br/>\t    <span class=\"br0\">}</span><br/>\t    modified <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lrepeat <span class=\"re0\">$g</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> m <span class=\"re0\">$g</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    dense <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lrepeat <span class=\"re0\">$g</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">incr</span> m<br/>\t    <span class=\"br0\">}</span><br/>\t    ordinal <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$g</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">incr</span> m<span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    fractional <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> + <span class=\"br0\">[</span><span class=\"kw2\">incr</span> n <span class=\"re0\">$g</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lrepeat <span class=\"re0\">$g</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>g <span class=\"re0\">$val</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> data <span class=\"br0\">{</span><br/>    <span class=\"nu0\">44</span> Solomon<br/>    <span class=\"nu0\">42</span> Jason<br/>    <span class=\"nu0\">42</span> Errol<br/>    <span class=\"nu0\">41</span> Garry<br/>    <span class=\"nu0\">41</span> Bernard<br/>    <span class=\"nu0\">41</span> Barry<br/>    <span class=\"nu0\">39</span> Stephen<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">method</span> <span class=\"br0\">{</span>standard modified dense ordinal fractional<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Using method '$method'...<span class=\"es0\">\\n</span>  Rank<span class=\"es0\">\\t</span>Score<span class=\"es0\">\\t</span>Who\"</span><br/>    <span class=\"kw1\">foreach</span> rank <span class=\"br0\">[</span>rank <span class=\"re0\">$method</span> <span class=\"re0\">$data</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>score who<span class=\"br0\">}</span> <span class=\"re0\">$data</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"  $rank<span class=\"es0\">\\t</span>$score<span class=\"es0\">\\t</span>$who\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual FoxPro", "loc": 104, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#DEFINE CTAB CHR(9)<br/>#DEFINE CRLF CHR(13) + CHR(10)<br/>LOCAL lcTxt As String, i As Integer<br/>CLOSE DATABASES ALL<br/>SET SAFETY OFF<br/>CLEAR<br/>CREATE CURSOR scores (score I, name V(8), rownum I AUTOINC)<br/>INDEX ON score TAG score COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>INSERT INTO scores (score, name) VALUES (44, \"Solomon\")<br/>INSERT INTO scores (score, name) VALUES (42, \"Jason\")<br/>INSERT INTO scores (score, name) VALUES (42, \"Errol\")<br/>INSERT INTO scores (score, name) VALUES (41, \"Garry\")<br/>INSERT INTO scores (score, name) VALUES (41, \"Bernard\")<br/>INSERT INTO scores (score, name) VALUES (41, \"Barry\")<br/>INSERT INTO scores (score, name) VALUES (39, \"Stephen\")<br/>\u00a0<br/>CREATE CURSOR ranks (sc_rank I, mod_rank I, dense I, ordinal I, fractional B(1), score I, name V(8))<br/>INDEX ON score TAG score COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>APPEND FROM DBF(\"scores\") FIELDS score, name<br/>Std_Comp()<br/>Modified()<br/>Dense()<br/>Ordinal()<br/>Fractional()<br/>COPY TO ranks.txt TYPE DELIMITED WITH TAB<br/>lcTxt = \"\"<br/>FOR i = 1 TO FCOUNT()<br/>    lcTxt = lcTxt + FIELD(i) + CTAB<br/>ENDFOR<br/>lcTxt = LEFT(lcTxt, LEN(lcTxt) - 1) + CRLF + FILETOSTR(\"ranks.txt\")<br/>STRTOFILE(lcTxt, \"ranks.txt\")<br/>MODIFY FILE ranks.txt<br/>SET SAFETY ON<br/>\u00a0<br/>FUNCTION ScoreGroup(aa)<br/>LOCAL n As Integer<br/>SELECT score, COUNT(*) As num FROM scores\u00a0;<br/>GROUP BY score ORDER BY score DESC INTO ARRAY aa<br/>n = _TALLY<br/>RETURN n<br/>ENDFUNC<br/>\u00a0<br/>PROCEDURE Std_Comp<br/>LOCAL n, i, nn<br/>LOCAL ARRAY a[1]<br/>SELECT ranks<br/>BLANK FIELDS sc_rank ALL<br/>nn = ScoreGroup(@a)<br/>n = 1<br/>FOR i = 1 TO nn<br/>    REPLACE sc_rank WITH n FOR score = a[i,1]<br/>    n = n + a[i,2] <br/>ENDFOR\t<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE Modified<br/>LOCAL n, i, nn<br/>LOCAL ARRAY a[1]<br/>SELECT ranks<br/>BLANK FIELDS mod_rank ALL<br/>nn = ScoreGroup(@a)<br/>n = 0<br/>FOR i = 1 TO nn<br/>    n = n + a[i,2]<br/>    REPLACE mod_rank WITH n FOR score = a[i,1]<br/>ENDFOR\t<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE Dense<br/>LOCAL n, i, nn<br/>LOCAL ARRAY a[1]<br/>SELECT ranks<br/>BLANK FIELDS dense ALL<br/>nn = ScoreGroup(@a)<br/>SELECT ranks<br/>n = 0<br/>FOR i = 1 TO nn<br/>    n = n + a[i,2]<br/>    REPLACE dense WITH i FOR score = a[i,1]<br/>ENDFOR\t<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE Ordinal<br/>SELECT ranks<br/>BLANK FIELDS ordinal ALL<br/>REPLACE ordinal WITH RECNO() ALL<br/>ENDPROC<br/>\u00a0<br/>PROCEDURE Fractional<br/>LOCAL i As Integer, nn As Integer<br/>LOCAL ARRAY a[1]<br/>SELECT ranks<br/>BLANK FIELDS fractional ALL<br/>SELECT CAST(AVG(rownum) As B(1)), score FROM scores\u00a0;<br/>GROUP BY score ORDER BY score DESC INTO ARRAY a<br/>nn = _TALLY<br/>FOR i = 1 TO nn<br/>    REPLACE fractional WITH a[i,1] FOR score = a[i,2]<br/>ENDFOR\t<br/>ENDPROC <br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 34, "block": "<pre class=\"text highlighted_source\">fcn group(scores){ // group like scores into one list --&gt; list of lists<br/>   sink:=List();<br/>   scores.reduce('wrap(ps,sn,buf){<br/>      if(sn[0]!=ps){ sink.append(buf.copy()); buf.clear(); }<br/>      buf+sn;<br/>      sn[0];<br/>   },scores[0][0],buf:=List());<br/>   sink.append(buf);<br/>}<br/>fcn print(list,rank){<br/>   list.apply2('wrap(sn){ \"%2s:\u00a0%s (%d)\".fmt(rank,sn[1],sn[0]):println(_); });<br/>}<br/>fcn rankViaStandard(scores){<br/>   rank:=1;<br/>   foreach group in (group(scores)){ print(group,rank); rank+=group.len(); }<br/>}<br/>fcn rankViaModified(scores){<br/>   rank:=0;<br/>   foreach group in (group(scores)){ rank+=group.len(); print(group,rank); }<br/>}<br/>fcn rankViaDense(scores){<br/>   rank:=1;<br/>   foreach group in (group(scores)){ print(group,rank); rank+=1; }<br/>}<br/>fcn rankViaOrdinal(scores){<br/>   scores.apply2('wrap(sn,rr){ \"%2s:\u00a0%s (%d)\".fmt(rr.inc(),sn[1],sn[0]):println(_); },Ref(1));<br/>}<br/>fcn rankViaFractional(scores){<br/>   rank:=1;<br/>   foreach group in (group(scores)){<br/>      n:=group.len(); r:=rank.reduce(n,'+,0.0)/n; rank+=n;<br/>      print(group,\"%5.2f\".fmt(r));<br/>   }<br/>}</pre>"}]}