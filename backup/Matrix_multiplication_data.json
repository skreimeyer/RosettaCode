{"task": "Matrix_multiplication", "blocks": [{"lang": "360 Assembly", "loc": 106, "block": "<pre class=\"text highlighted_source\">*        Matrix multiplication     06/08/2015<br/>MATRIXRC CSECT                     Matrix multiplication<br/>         USING  MATRIXRC,R13<br/>SAVEARA  B      STM-SAVEARA(R15)<br/>         DC     17F'0'<br/>STM      STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15<br/>         LA     R7,1               i=1<br/>LOOPI1   CH     R7,M               do i=1 to m (R7)<br/>         BH     ELOOPI1<br/>         LA     R8,1               j=1<br/>LOOPJ1   CH     R8,P               do j=1 to p (R8)<br/>         BH     ELOOPJ1<br/>         LR     R1,R7              i<br/>         BCTR   R1,0<br/>         MH     R1,P<br/>         LR     R6,R8              j<br/>         BCTR   R6,0<br/>         AR     R1,R6<br/>         SLA    R1,2<br/>         LA     R6,0<br/>         ST     R6,C(R1)           c(i,j)=0<br/>         LA     R9,1               k=1<br/>LOOPK1   CH     R9,N               do k=1 to n (R9)<br/>         BH     ELOOPK1<br/>         LR     R1,R7              i<br/>         BCTR   R1,0<br/>         MH     R1,P<br/>         LR     R6,R8              j<br/>         BCTR   R6,0<br/>         AR     R1,R6<br/>         SLA    R1,2<br/>         L      R2,C(R1)           R2=c(i,j)<br/>         LR     R10,R1             R10=offset(i,j)<br/>         LR     R1,R7              i<br/>         BCTR   R1,0<br/>         MH     R1,N<br/>         LR     R6,R9              k<br/>         BCTR   R6,0<br/>         AR     R1,R6<br/>         SLA    R1,2<br/>         L      R3,A(R1)           R3=a(i,k)<br/>         LR     R1,R9              k<br/>         BCTR   R1,0<br/>         MH     R1,P<br/>         LR     R6,R8              j<br/>         BCTR   R6,0<br/>         AR     R1,R6<br/>         SLA    R1,2<br/>         L      R4,B(R1)           R4=b(k,j)<br/>         LR     R15,R3             a(i,k)<br/>         MR     R14,R4             a(i,k)*b(k,j)<br/>         LR     R3,R15<br/>         AR     R2,R3              R2=R2+a(i,k)*b(k,j)<br/>         ST     R2,C(R10)          c(i,j)=c(i,j)+a(i,k)*b(k,j)<br/>         LA     R9,1(R9)           k=k+1<br/>         B      LOOPK1<br/>ELOOPK1  LA     R8,1(R8)           j=j+1<br/>         B      LOOPJ1<br/>ELOOPJ1  LA     R7,1(R7)           i=i+1<br/>         B      LOOPI1<br/>ELOOPI1  MVC    Z,=CL80' '         clear buffer<br/>         LA     R7,1<br/>LOOPI2   CH     R7,M               do i=1 to m<br/>         BH     ELOOPI2<br/>         LA     R8,1<br/>LOOPJ2   CH     R8,P               do j=1 to p<br/>         BH     ELOOPJ2<br/>         LR     R1,R7              i<br/>         BCTR   R1,0<br/>         MH     R1,P<br/>         LR     R6,R8              j<br/>         BCTR   R6,0<br/>         AR     R1,R6<br/>         SLA    R1,2<br/>         L      R6,C(R1)           c(i,j)<br/>         LA     R3,Z<br/>         AH     R3,IZ<br/>         XDECO  R6,W<br/>         MVC    0(5,R3),W+7        output c(i,j)<br/>         LH     R3,IZ<br/>         LA     R3,5(R3)<br/>         STH    R3,IZ<br/>         LA     R8,1(R8)           j=j+1<br/>         B      LOOPJ2<br/>ELOOPJ2  XPRNT  Z,80               print buffer<br/>         MVC    IZ,=H'0'<br/>         LA     R7,1(R7)           i=i+1<br/>         B      LOOPI2<br/>ELOOPI2  L      R13,4(0,R13)<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>A        DC     F'1',F'2',F'3',F'4',F'5',F'6',F'7',F'8'  a(4,2)<br/>B        DC     F'1',F'2',F'3',F'4',F'5',F'6'            b(2,3)<br/>C        DS     12F                                      c(4,3)<br/>N        DC     H'2'               dim(a,2)=dim(b,1) <br/>M        DC     H'4'               dim(a,1) <br/>P        DC     H'3'               dim(b,2)<br/>Z        DS     CL80<br/>IZ       DC     H'0'<br/>W        DS     CL16<br/>         YREGS  <br/>         END    MATRIXRC</pre>"}, {"lang": "Ada", "loc": 31, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;               <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Matrix_Product <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>X\u00a0: Real_Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Fixed <span class=\"kw1\">is</span> <span class=\"kw3\">delta</span> <span class=\"nu0\">0.01</span> <span class=\"kw3\">range</span> -<span class=\"nu0\">100.0</span>..100.0;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> X'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> X'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Put <span class=\"br0\">(</span>Fixed'Image <span class=\"br0\">(</span>Fixed <span class=\"br0\">(</span>X <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   A\u00a0: <span class=\"kw3\">constant</span> Real_Matrix\u00a0:=<br/>         <span class=\"br0\">(</span>  <span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,   <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span> <span class=\"nu0\">2.0</span>,  <span class=\"nu0\">4.0</span>,  <span class=\"nu0\">8.0</span>,  <span class=\"nu0\">16.0</span><span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span> <span class=\"nu0\">3.0</span>,  <span class=\"nu0\">9.0</span>, <span class=\"nu0\">27.0</span>,  <span class=\"nu0\">81.0</span><span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span> <span class=\"nu0\">4.0</span>, <span class=\"nu0\">16.0</span>, <span class=\"nu0\">64.0</span>, <span class=\"nu0\">256.0</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span>;<br/>   B\u00a0: <span class=\"kw3\">constant</span> Real_Matrix\u00a0:=<br/>         <span class=\"br0\">(</span>  <span class=\"br0\">(</span>  <span class=\"nu0\">4.0</span>,     -<span class=\"nu0\">3.0</span>,      <span class=\"nu0\">4.0</span>/<span class=\"nu0\">3.0</span>,  -<span class=\"nu0\">1.0</span>/<span class=\"nu0\">4.0</span> <span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span>-<span class=\"nu0\">13.0</span>/<span class=\"nu0\">3.0</span>, <span class=\"nu0\">19.0</span>/<span class=\"nu0\">4.0</span>, -<span class=\"nu0\">7.0</span>/<span class=\"nu0\">3.0</span>,  <span class=\"nu0\">11.0</span>/<span class=\"nu0\">24.0</span><span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span>  <span class=\"nu0\">3.0</span>/<span class=\"nu0\">2.0</span>, -<span class=\"nu0\">2.0</span>,      <span class=\"nu0\">7.0</span>/<span class=\"nu0\">6.0</span>,  -<span class=\"nu0\">1.0</span>/<span class=\"nu0\">4.0</span> <span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span> -<span class=\"nu0\">1.0</span>/<span class=\"nu0\">6.0</span>,  <span class=\"nu0\">1.0</span>/<span class=\"nu0\">4.0</span>, -<span class=\"nu0\">1.0</span>/<span class=\"nu0\">6.0</span>,   <span class=\"nu0\">1.0</span>/<span class=\"nu0\">24.0</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put <span class=\"br0\">(</span>A * B<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Matrix_Product;</pre>"}, {"lang": "ALGOL 68", "loc": 60, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> FIELD <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># field type is LONG REAL #</span><br/><span class=\"kw3\">INT</span> default upb<span class=\"sy1\">:=</span>3<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> <span class=\"kw5\">VECTOR</span> <span class=\"sy1\">=</span> <span class=\"br0\">[</span>default upb<span class=\"br0\">]</span>FIELD<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> MATRIX <span class=\"sy1\">=</span> <span class=\"br0\">[</span>default upb<span class=\"sy1\">,</span>default upb<span class=\"br0\">]</span>FIELD<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># crude exception handling #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> raise index error <span class=\"sy1\">:=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">GOTO</span> exception index error<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># define the vector/matrix operators #</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw5\">VECTOR</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIELD<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># basically the dot product #</span><br/>    FIELD result<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> result<span class=\"sy1\">+:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw5\">VECTOR</span> a<span class=\"sy1\">,</span> MATRIX b<span class=\"br0\">)</span><span class=\"kw5\">VECTOR</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload vector times matrix #</span><br/>    <span class=\"br0\">[</span>2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>FIELD result<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> b <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> b <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"sy1\">*</span>b<span class=\"br0\">[</span><span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># this is the task portion #</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MATRIX a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>MATRIX<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload matrix times matrix #</span><br/>    <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>FIELD result<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> 2 <span class=\"kw8\">LWB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> 2 <span class=\"kw8\">UPB</span> a<span class=\"sy1\">/=</span><span class=\"kw8\">UPB</span> b <span class=\"kw2\">THEN</span> raise index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> result <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">*</span>b <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\"># Some sample matrices to test #</span><br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  MATRIX a<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>1<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span>   1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># matrix A #</span><br/>            <span class=\"br0\">(</span>2<span class=\"sy1\">,</span>  4<span class=\"sy1\">,</span>  8<span class=\"sy1\">,</span>  16<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">(</span>3<span class=\"sy1\">,</span>  9<span class=\"sy1\">,</span> 27<span class=\"sy1\">,</span>  81<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">(</span>4<span class=\"sy1\">,</span> 16<span class=\"sy1\">,</span> 64<span class=\"sy1\">,</span> 256<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  MATRIX b<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>  4  <span class=\"sy1\">,</span> <span class=\"sy1\">-</span>3  <span class=\"sy1\">,</span>  4<span class=\"sy1\">/</span>3<span class=\"sy1\">,</span>  <span class=\"sy1\">-</span>1<span class=\"sy1\">/</span>4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># matrix B #</span><br/>            <span class=\"br0\">(</span><span class=\"sy1\">-</span>13<span class=\"sy1\">/</span>3<span class=\"sy1\">,</span> 19<span class=\"sy1\">/</span>4<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>7<span class=\"sy1\">/</span>3<span class=\"sy1\">,</span>  11<span class=\"sy1\">/</span>24<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">(</span>  3<span class=\"sy1\">/</span>2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2  <span class=\"sy1\">,</span>  7<span class=\"sy1\">/</span>6<span class=\"sy1\">,</span>  <span class=\"sy1\">-</span>1<span class=\"sy1\">/</span>4 <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">(</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">/</span>6<span class=\"sy1\">,</span>  1<span class=\"sy1\">/</span>4<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">/</span>6<span class=\"sy1\">,</span>   1<span class=\"sy1\">/</span>24<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  MATRIX prod <span class=\"sy1\">=</span> a <span class=\"sy1\">*</span> b<span class=\"sy1\">;</span> <span class=\"coMULTI\"># actual multiplication example of A x B #</span><br/>\u00a0<br/>  <span class=\"kw6\">FORMAT</span> <span class=\"kw26\">real</span> fmt <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>2<span class=\"br0\">)</span>$<span class=\"sy1\">;</span> <span class=\"coMULTI\"># width of 6, with no '+' sign, 2 decimals #</span><br/>  <span class=\"kw4\">PROC</span> <span class=\"kw26\">real</span> matrix <span class=\"kw22\">printf</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw6\">FORMAT</span> <span class=\"kw26\">real</span> fmt<span class=\"sy1\">,</span> MATRIX m<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> vector fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>2 <span class=\"kw8\">UPB</span> m<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"kw26\">real</span> fmt<span class=\"br0\">)</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span><span class=\"kw26\">real</span> fmt<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw6\">FORMAT</span> matrix fmt <span class=\"sy1\">=</span> $x<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span><span class=\"kw8\">UPB</span> m<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span><span class=\"st0\">\",\"</span>lxx<span class=\"br0\">)</span>f<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span><span class=\"st0\">\");\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># finally print the result #</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matrix fmt<span class=\"sy1\">,</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># finally print the result #</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Product of a and b: \"</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw26\">real</span> matrix <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"kw26\">real</span> fmt<span class=\"sy1\">,</span> prod<span class=\"br0\">)</span><br/>  <span class=\"kw2\">EXIT</span> <br/>\u00a0<br/>  exception index error<span class=\"sy1\">:</span> <br/>    <span class=\"kw22\">putf</span><span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> $x<span class=\"st0\">\"Exception: index error.\"</span>l$<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 149, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- matrixMultiply\u00a0:: Num a =&gt; [[a]] -&gt; [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">to</span> matrixMultiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> rows<br/>        <span class=\"kw3\">property</span> xs\u00a0: transpose<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> columns<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>col<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">my</span> dotProduct<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>columns, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>rows, a<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> matrixMultiply<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    matrixMultiply<span class=\"br0\">(</span><span class=\"br0\">{</span>\u00ac<br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span> \u00ac<br/>            <span class=\"br0\">}</span>, <span class=\"br0\">{</span>\u00ac<br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">11</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{51, -8, 26, -18}, {-8, -38, -6, 34}, </span><br/>    <span class=\"co1\">--     {33, 42, 38, -14}, {17, 74, 72, 44}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- dotProduct\u00a0:: [n] -&gt; [n] -&gt; Maybe n</span><br/><span class=\"kw3\">on</span> dotProduct<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> mult<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">*</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> length <span class=\"kw3\">of</span> ys <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">else</span><br/>        sum<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span>mult, xs, ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> dotProduct<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- product\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> product<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> mult<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">*</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>mult, <span class=\"nu0\">1</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> product<br/>\u00a0<br/><span class=\"co1\">-- sum\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> sum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> add<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>add, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sum<br/>\u00a0<br/><span class=\"co1\">-- transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> column<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, iCol<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> row<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> xs<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>row, xss<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>column, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> transpose<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "APL", "loc": 10, "block": "<pre class=\"text highlighted_source\">    x  \u2190  +.\u00d7<br/>\u00a0<br/>    A  \u2190  \u2191A*\u00a8\u2282A\u2190\u23734   \u235d  Same  A  as in other examples (1 1 1 1\u236a 2 4 8 16\u236a 3 9 27 81,[0.5] 4 16 64 256) <br/>    B  \u2190  \u2339A          \u235d  Matrix inverse of A<br/>\u00a0<br/>    'F6.2' \u2395FMT A x B<br/>1.00  0.00  0.00  0.00<br/>0.00  1.00  0.00  0.00<br/>0.00  0.00  1.00  0.00<br/>0.00  0.00  0.00  1.00</pre>"}, {"lang": "AutoHotkey", "loc": 52, "block": "<pre class=\"autohotkey highlighted_source\">Matrix<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" \u00a0; rows separated by \"</span><span class=\"sy0\">,</span><span class=\"st0\">\"<br/>, 1   2      \u00a0; entries separated by space or tab<br/>, 2   3<br/>, 3   0\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"B`n`n\"</span> MatrixPrint<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>Matrix<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"<br/>, 1 2 3<br/>, 3 2 1\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"C`n`n\"</span> MatrixPrint<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\u00a0<br/>MatrixMul<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"B * C`n`n\"</span> MatrixPrint<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MatrixMul<span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>Matrix<span class=\"br0\">(</span>_a<span class=\"sy0\">,</span>_v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Matrix structure: m_0_0 = #rows, m_0_1 = #columns, m_i_j = element[i,j], i,j &gt; 0</span><br/>   Local _i<span class=\"sy0\">,</span> _j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> _v<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>\u00a0!<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         _i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> _j <span class=\"sy0\">++</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><span class=\"re0\">%A_Tab%</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>\u00a0!<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>               _i<span class=\"sy0\">++,</span> <span class=\"re0\">%_a%</span>_<span class=\"re0\">%_i%</span>_<span class=\"re0\">%_j%</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>      <span class=\"br0\">}</span><br/>   <span class=\"re0\">%_a%</span> <span class=\"sy0\">:=</span> _a<span class=\"sy0\">,</span> <span class=\"re0\">%_a%</span>_0_0 <span class=\"sy0\">:=</span> _j<span class=\"sy0\">,</span> <span class=\"re0\">%_a%</span>_0_1 <span class=\"sy0\">:=</span> _i<br/><span class=\"br0\">}</span><br/>MatrixPrint<span class=\"br0\">(</span>_a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   Local _i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> _t<br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%_a%</span>_0_0 <span class=\"br0\">{</span><br/>      _i<span class=\"sy0\">++</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%_a%</span>_0_1<br/>         _t <span class=\"sy0\">.=</span> <span class=\"re0\">%_a%</span>_<span class=\"re0\">%A_Index%</span>_<span class=\"re0\">%_i%</span> <span class=\"st0\">\"`t\"</span><br/>      _t <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">Return</span> _t<br/><span class=\"br0\">}</span><br/>MatrixMul<span class=\"br0\">(</span>_a<span class=\"sy0\">,</span>_b<span class=\"sy0\">,</span>_c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   Local _i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> _j<span class=\"sy0\">,</span> _k<span class=\"sy0\">,</span> _s<br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%_b%</span>_0_0\u00a0!<span class=\"sy0\">=</span> <span class=\"re0\">%_c%</span>_0_1<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span> <span class=\"st0\">\"ERROR: inner dimensions \"</span> <span class=\"re0\">%_b%</span>_0_0 <span class=\"st0\">\"\u00a0!= \"</span> <span class=\"re0\">%_c%</span>_0_1<br/>   <span class=\"re0\">%_a%</span> <span class=\"sy0\">:=</span> _a<span class=\"sy0\">,</span> <span class=\"re0\">%_a%</span>_0_0 <span class=\"sy0\">:=</span> <span class=\"re0\">%_b%</span>_0_0<span class=\"sy0\">,</span> <span class=\"re0\">%_a%</span>_0_1 <span class=\"sy0\">:=</span> <span class=\"re0\">%_c%</span>_0_1<br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%_c%</span>_0_1 <span class=\"br0\">{</span><br/>      _i<span class=\"sy0\">++,</span> _j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%_b%</span>_0_0 <span class=\"br0\">{</span><br/>         _j<span class=\"sy0\">++,</span> _k <span class=\"sy0\">:=</span> _s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"re0\">%_b%</span>_0_1<br/>            _k<span class=\"sy0\">++,</span> _s <span class=\"sy0\">+=</span> <span class=\"re0\">%_b%</span>_<span class=\"re0\">%_k%</span>_<span class=\"re0\">%_j%</span> <span class=\"sy0\">*</span> <span class=\"re0\">%_c%</span>_<span class=\"re0\">%_i%</span>_<span class=\"re0\">%_k%</span><br/>         <span class=\"re0\">%_a%</span>_<span class=\"re0\">%_i%</span>_<span class=\"re0\">%_j%</span> <span class=\"sy0\">:=</span> _s<br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 24, "block": "<pre class=\"qbasic highlighted_source\">Assume the matrices <span class=\"kw1\">TO</span> be multiplied are a <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> b<br/> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">'if valid dims</span><br/>        n <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        m <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        p <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> ans<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">FOR</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">FOR</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                                ans<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ans<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b<span class=\"br0\">(</span>k<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">NEXT</span> k<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> i<br/>\u00a0<br/>        <span class=\"co1\">'print answer</span><br/>        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">FOR</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> ans<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">NEXT</span> j<br/>                <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/>        <span class=\"kw1\">NEXT</span> i<br/> <span class=\"kw1\">ELSE</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"invalid dimensions\"</span><br/> <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span></pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      DIM matrix1(3,1), matrix2(1,2), product(3,2)<br/>\u00a0<br/>      matrix1() = 1, 2, \\<br/>      \\           3, 4, \\<br/>      \\           5, 6, \\<br/>      \\           7, 8<br/>\u00a0<br/>      matrix2() = 1, 2, 3, \\<br/>      \\           4, 5, 6<br/>\u00a0<br/>      product() = matrix1() . matrix2()<br/>\u00a0<br/>      FOR row% = 0 TO DIM(product(),1)<br/>        FOR col% = 0 TO DIM(product(),2)<br/>          PRINT product(row%,col%),;<br/>        NEXT<br/>        PRINT<br/>      NEXT<br/>\u00a0</pre>"}, {"lang": "Burlesque", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {{1 2}{3 4}{5 6}{7 8}}{{1 2 3}{4 5 6}}mmsp<br/>9 12 15<br/>19 26 33<br/>29 40 51<br/>39 54 69<br/>\u00a0</pre>"}, {"lang": "C", "loc": 70, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Make the data structure self-contained.  Element at row i and col j<br/>   is x[i * w + j].  More often than not, though,  you might want<br/>   to represent a matrix some other way */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> h<span class=\"sy0\">,</span> w<span class=\"sy0\">;</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">;</span><span class=\"br0\">}</span> matrix_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>matrix<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> dot<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> step<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>len<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">+=</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">++</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">;</span><br/>\t\tb <span class=\"sy0\">+=</span> step<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>matrix mat_new<span class=\"br0\">(</span><span class=\"kw4\">int</span> h<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> w<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmatrix r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>matrix_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tr<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">=</span> h<span class=\"sy0\">,</span> r<span class=\"sy0\">-&gt;</span>w <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span><br/>\tr<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>matrix mat_mul<span class=\"br0\">(</span>matrix a<span class=\"sy0\">,</span> matrix b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmatrix r<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>pa<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>w <span class=\"sy0\">!=</span> b<span class=\"sy0\">-&gt;</span>h<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tr <span class=\"sy0\">=</span> mat_new<span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">,</span> b<span class=\"sy0\">-&gt;</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tp <span class=\"sy0\">=</span> r<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>pa <span class=\"sy0\">=</span> a<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> pa <span class=\"sy0\">+=</span> a<span class=\"sy0\">-&gt;</span>w<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">-&gt;</span>w<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">*</span>p<span class=\"sy0\">++</span> <span class=\"sy0\">=</span> dot<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> b<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> a<span class=\"sy0\">-&gt;</span>w<span class=\"sy0\">,</span> b<span class=\"sy0\">-&gt;</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> mat_show<span class=\"br0\">(</span>matrix a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> a<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> a<span class=\"sy0\">-&gt;</span>w<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%7.3f\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> da<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\t<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  <span class=\"nu0\">16</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span>  <span class=\"nu0\">81</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> db<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>     <span class=\"nu16\">4.0</span><span class=\"sy0\">,</span>   <span class=\"sy0\">-</span><span class=\"nu16\">3.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">4.0</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"sy0\">-</span><span class=\"nu16\">13.0</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu16\">19.0</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">7.0</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>\t\t\t  <span class=\"nu16\">3.0</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>   <span class=\"sy0\">-</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">7.0</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>\t\t\t <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"nu16\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrix_t a <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> da <span class=\"br0\">}</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> db <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\tmatrix c <span class=\"sy0\">=</span> mat_mul<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* mat_show(&amp;a), mat_show(&amp;b); */</span><br/>\tmat_show<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* free(c) */</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Matrix<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> m<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> a<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> Matrix<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> m<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> m <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Matrix dimensions must be positive\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">n</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">m</span> <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>\t\ta <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n, m<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//indices start from one</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">double</span> <span class=\"kw1\">this</span><span class=\"br0\">[</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">]</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">set</span> <span class=\"br0\">{</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> N <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> M <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Matrix <span class=\"kw1\">operator</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>Matrix _a, Matrix b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> _a<span class=\"sy0\">.</span><span class=\"me1\">N</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> b<span class=\"sy0\">.</span><span class=\"me1\">M</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> l <span class=\"sy0\">=</span> _a<span class=\"sy0\">.</span><span class=\"me1\">M</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">!=</span> b<span class=\"sy0\">.</span><span class=\"me1\">N</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Illegal matrix dimensions for multiplication. _a.M must be equal b.N\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMatrix result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Matrix<span class=\"br0\">(</span>_a<span class=\"sy0\">.</span><span class=\"me1\">N</span>, b<span class=\"sy0\">.</span><span class=\"me1\">M</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\tsum <span class=\"sy0\">+=</span> _a<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">[</span>i, k<span class=\"br0\">]</span><span class=\"sy0\">*</span>b<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">[</span>k, j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tresult<span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 21, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;blitz/tinymat.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> blitz<span class=\"sy4\">;</span><br/>\u00a0<br/>  TinyMatrix<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span> A, B, C<span class=\"sy4\">;</span><br/>\u00a0<br/>  A <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>,<br/>      <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>,<br/>      <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  B <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  C <span class=\"sy1\">=</span> product<span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> C <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defn transpose<br/>  <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> map vector s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn nested-for<br/>  <span class=\"br0\">[</span>f x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>map <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span>map <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <br/>                <span class=\"br0\">(</span>f a b<span class=\"br0\">)</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn matrix-mult<br/>  <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>nested-for <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>x y<span class=\"br0\">]</span> <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span><span class=\"br0\">(</span>map<span class=\"sy0\"> * </span>x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> a <span class=\"br0\">(</span>transpose b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def ma <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">9</span> <span class=\"nu0\">27</span> <span class=\"nu0\">81</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"nu0\">16</span> <span class=\"nu0\">64</span> <span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def mb <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">4</span> -<span class=\"nu0\">3</span> <span class=\"nu0\">4</span>/<span class=\"nu0\">3</span> -<span class=\"nu0\">1</span>/<span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>-<span class=\"nu0\">13</span>/<span class=\"nu0\">3</span> <span class=\"nu0\">19</span>/<span class=\"nu0\">4</span> -<span class=\"nu0\">7</span>/<span class=\"nu0\">3</span> <span class=\"nu0\">11</span>/<span class=\"nu0\">24</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span>/<span class=\"nu0\">2</span> -<span class=\"nu0\">2</span> <span class=\"nu0\">7</span>/<span class=\"nu0\">6</span> -<span class=\"nu0\">1</span>/<span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>-<span class=\"nu0\">1</span>/<span class=\"nu0\">6</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">4</span> -<span class=\"nu0\">1</span>/<span class=\"nu0\">6</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> matrix-multiply <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>col <span class=\"br0\">(</span>mat i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">(</span>elt row i<span class=\"br0\">)</span><span class=\"br0\">)</span> mat<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>row <span class=\"br0\">(</span>mat i<span class=\"br0\">)</span> <span class=\"br0\">(</span>elt mat i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for row from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span><span class=\"kw1\">length</span> a<span class=\"br0\">)</span><br/>          collect <span class=\"br0\">(</span>loop for col from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>row b <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        collect <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'* <span class=\"br0\">(</span>row a row<span class=\"br0\">)</span> <span class=\"br0\">(</span>col b col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; example use:</span><br/><span class=\"br0\">(</span>matrix-multiply '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span>-<span class=\"nu0\">3</span> -<span class=\"nu0\">8</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Chapel", "loc": 21, "block": "<pre class=\"text highlighted_source\">proc *(a:[], b:[]) {<br/>\u00a0<br/>    if (a.eltType\u00a0!= b.eltType) then<br/>        writeln(\"type mismatch: \", a.eltType, \" \", b.eltType);<br/>\u00a0<br/>    var ad = a.domain.dims();<br/>    var bd = b.domain.dims();<br/>    var (arows, acols) = ad;<br/>    var (brows, bcols) = bd;<br/>    if (arows\u00a0!= bcols) then<br/>        writeln(\"dimension mismatch: \", ad, \" \", bd);<br/>\u00a0<br/>    var c:[{arows, bcols}] a.eltType = 0;<br/>\u00a0<br/>    for i in arows do<br/>        for j in bcols do<br/>            for k in acols do<br/>                c(i,j) += a(i,k) * b(k,j);<br/>\u00a0<br/>    return c;<br/>}</pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isRectangular<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> M<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> M.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> M<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matrixMul<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> B<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>A.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span> B.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span><br/>           <span class=\"sy0\">!</span>A.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>B.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> B.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> aux <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span>B.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">B</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> B<span class=\"br0\">)</span><br/>            aux<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> ai<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>            result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dotProduct<span class=\"br0\">(</span>ai<span class=\"sy0\">,</span> aux<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> form <span class=\"sy0\">=</span> <span class=\"st0\">\"[%([%(%d,\u00a0%)],<span class=\"es1\">\\n</span>\u00a0%)]]\"</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"A = <span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span> form <span class=\"sy0\">~</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"B = <span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span> form <span class=\"sy0\">~</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"A * B = <span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span> form<span class=\"sy0\">,</span> matrixMul<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ela", "loc": 7, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>mmult a b = [ [ sum $ zipWith (*) ar bc \\\\ bc &lt;- (transpose b) ] \\\\ ar &lt;- a ]<br/>\u00a0<br/>[[1, 2],<br/> [3, 4]] `mmult` [[-3, -8, 3],<br/>                  [-2,  1, 4]]</pre>"}, {"lang": "ELLA", "loc": 45, "block": "<pre class=\"text highlighted_source\">MAC ZIP = ([INT n]TYPE t: vector1 vector2) -&gt; [n][2]t:<br/>  [INT k = 1..n](vector1[k], vector2[k]).<br/>\u00a0<br/>MAC TRANSPOSE = ([INT n][INT m]TYPE t: matrix) -&gt; [m][n]t:<br/>  [INT i = 1..m] [INT j = 1..n] matrix[j][i].<br/>\u00a0<br/>MAC INNER_PRODUCT{FN * = [2]TYPE t -&gt; TYPE s, FN + = [2]s -&gt; s}<br/>                 = ([INT n][2]t: vector) -&gt; s:<br/>  IF n = 1 THEN *vector[1]<br/>  ELSE *vector[1] + INNER_PRODUCT {*,+} vector[2..n]<br/>  FI.<br/>\u00a0<br/>MAC MATRIX_MULT {FN * = [2]TYPE t-&gt;TYPE s, FN + = [2]s-&gt;s} =<br/>([INT n][INT m]t: matrix1, [m][INT p]t: matrix2) -&gt; [n][p]s:<br/>BEGIN<br/>  LET transposed_matrix2 = TRANSPOSE matrix2.<br/>OUTPUT [INT i = 1..n][INT j = 1..p]<br/>       INNER_PRODUCT{*,+}ZIP(matrix1[i],transposed_matrix2[j])<br/>END.<br/>\u00a0<br/>\u00a0<br/>TYPE element = NEW elt/(1..20),<br/>     product = NEW prd/(1..1200).<br/>\u00a0<br/>FN PLUS = (product: integer1 integer2) -&gt; product:<br/>  ARITH integer1 + integer2.<br/>\u00a0<br/>FN MULT = (element: integer1 integer2) -&gt; product:<br/>  ARITH integer1 * integer2.<br/>\u00a0<br/>FN MULT_234 = ([2][3]element:matrix1, [3][4]element:matrix2) -&gt;<br/>             [2][4]product:  <br/>  MATRIX_MULT{MULT,PLUS}(matrix1, matrix2).<br/>\u00a0<br/>FN TEST = () -&gt; [2][4]product:<br/>( LET m1 = ((elt/2, elt/1, elt/1),<br/>            (elt/3, elt/6, elt/9)), <br/>      m2 = ((elt/6, elt/1, elt/3, elt/4), <br/>            (elt/9, elt/2, elt/8, elt/3),<br/>            (elt/6, elt/4, elt/1, elt/2)).<br/>  OUTPUT<br/>    MULT_234 (m1, m2)<br/>). <br/>\u00a0<br/>COM test: just displaysignal MOC</pre>"}, {"lang": "Euphoria", "loc": 16, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> matrix_mul<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> c<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0!<span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">else</span><br/>        c <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">for</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                    c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">return</span> c<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "EGL", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>program Matrix_multiplication type BasicProgram {}<br/>\u00a0<br/>\tfunction main()<br/>\t\ta float[][] = [[1,2,3],[4,5,6]];<br/>\t\tb float[][] = [[1,2],[3,4],[5,6]];<br/>\t\tc float[][] = mult(a, b);<br/>\tend<br/>\u00a0<br/>\tfunction mult(a float[][], b float[][]) returns(float[][])<br/>\t\tif(a.getSize() == 0)<br/>\t\t\treturn (new float[0][0]);<br/>\t\tend<br/>\t\tif(a[1].getSize()\u00a0!= b.getSize())<br/>\t\t\treturn (null); //invalid dims<br/>\t\tend<br/>\u00a0<br/>\t   \tn int = a[1].getSize();<br/>\t   \tm int = a.getSize();<br/>\t   \tp int = b[1].getSize();<br/>\u00a0<br/>\t\tans float[0][0];<br/>\t\tans.resizeAll([m, p]);<br/>\u00a0<br/>\t\t// Calculate dot product.<br/>\t\tfor(i int from 1 to m)<br/>\t\t\tfor(j int from 1 to p)<br/>\t\t\t\tfor(k int from 1 to n)<br/>\t            \t                ans[i][j] += a[i][k] * b[k][j];<br/>\t\t\t\tend<br/>\t\t\tend<br/>\t\tend<br/>\t\treturn (ans);<br/>\tend<br/>end<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  def mult(m1, m2) do<br/>    Enum.map m1, fn (x) -&gt; Enum.map t(m2), fn (y) -&gt; Enum.zip(x, y) <br/>        |&gt; Enum.map(fn {x, y} -&gt; x * y end)<br/>        |&gt; Enum.sum <br/>      end<br/>    end<br/>  end<br/>\u00a0<br/>  def t(m) do # transpose<br/>    List.zip(m) |&gt; Enum.map(&amp;Tuple.to_list(&amp;1))<br/>  end  <br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 60, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co1\">%% Multiplies two matrices. Usage example:</span><br/><span class=\"co1\">%% $ matrix:multiply([[1,2,3],[4,5,6]], [[4,4],[0,0],[1,4]])</span><br/><span class=\"co1\">%% If the dimentions are incompatible, an error is thrown.</span><br/><span class=\"co1\">%%</span><br/><span class=\"co1\">%% The erl shell may encode the lists output as strings. In order to prevent such</span><br/><span class=\"co1\">%% behaviour, BEFORE running matrix:multiply, run shell:strings(false) to disable</span><br/><span class=\"co1\">%% auto-encoding. When finished, run shell:strings(true) to reset the defaults.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>multiply<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span>|_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">transpose</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"kw3\">hd</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> | <span class=\"re3\">transpose</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"kw3\">tl</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">red</span><span class=\"br0\">(</span><span class=\"re5\">Pair</span><span class=\"sy1\">,</span> <span class=\"re5\">Sum</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">X</span> <span class=\"sy3\">=</span> <span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Pair</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"co1\">%gets X</span><br/>    <span class=\"re5\">Y</span> <span class=\"sy3\">=</span> <span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Pair</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"co1\">%gets Y</span><br/>    <span class=\"re5\">X</span> <span class=\"sy3\">*</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"re5\">Sum</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% Mathematical dot product. A x B = d</span><br/><span class=\"co1\">%% A, B = 1-dimension vector</span><br/><span class=\"co1\">%% d    = scalar</span><br/><span class=\"re3\">dot_product</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> red<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%% Exposed function. Expected result is C = A x B.</span><br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"co1\">%% First transposes B, to facilitate the calculations (It's easier to fetch</span><br/>    <span class=\"co1\">%% row than column wise).</span><br/>    <span class=\"re3\">multiply_internal</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re3\">transpose</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%% This function does the actual multiplication, but expects the second matrix</span><br/><span class=\"co1\">%% to be transposed.</span><br/><span class=\"re3\">multiply_internal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Head</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"co1\">% multiply each row by Y</span><br/>    <span class=\"re5\">Element</span> <span class=\"sy3\">=</span> <span class=\"re3\">multiply_row_by_col</span><span class=\"br0\">(</span><span class=\"re5\">Head</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>    <span class=\"co1\">% concatenate the result of this multiplication with the next ones</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Element</span> | <span class=\"re3\">multiply_internal</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">multiply_internal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"co1\">% concatenating and empty list to the end of a list, changes nothing.</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">multiply_row_by_col</span><span class=\"br0\">(</span><span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Col_Head</span> | <span class=\"re5\">Col_Rest</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Scalar</span> <span class=\"sy3\">=</span> <span class=\"re3\">dot_product</span><span class=\"br0\">(</span><span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Col_Head</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"re5\">Scalar</span> | <span class=\"re3\">multiply_row_by_col</span><span class=\"br0\">(</span><span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Col_Rest</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">multiply_row_by_col</span><span class=\"br0\">(</span><span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MAT_PROD<br/>\u00a0<br/>DIM A[3,1],B[1,2],ANS[3,2]<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>DATA(1,2,3,4,5,6,7,8)<br/>DATA(1,2,3,4,5,6)<br/>\u00a0<br/>FOR I=0 TO 3 DO<br/>   FOR J=0 TO 1 DO<br/>      READ(A[I,J])<br/>   END FOR<br/>END FOR<br/>\u00a0<br/>FOR I=0 TO 1 DO<br/>   FOR J=0 TO 2 DO<br/>      READ(B[I,J])<br/>   END FOR<br/>END FOR<br/>\u00a0<br/>FOR I=0 TO UBOUND(ANS,1) DO<br/>  FOR J=0 TO UBOUND(ANS,2) DO<br/>     FOR K=0 TO UBOUND(A,2) DO<br/>        ANS[I,J]=ANS[I,J]+(A[I,K]*B[K,J])<br/>     END FOR<br/>  END FOR<br/>END FOR<br/>! print answer<br/>  FOR I=0 TO UBOUND(ANS,1) DO<br/>     FOR J=0 TO UBOUND(ANS,2) DO<br/>        PRINT(ANS[I,J],)<br/>     END FOR<br/>     PRINT<br/>  END FOR<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>let MatrixMultiply (matrix1\u00a0: _[,] , matrix2\u00a0: _[,]) =<br/>    let result_row = (matrix1.GetLength 0)<br/>    let result_column = (matrix2.GetLength 1)<br/>    let ret = Array2D.create result_row result_column 0<br/>    for x in 0 .. result_row - 1 do<br/>        for y in 0 .. result_column - 1 do<br/>            let mutable acc = 0<br/>            for z in 0 .. (matrix1.GetLength 1) - 1 do<br/>                acc &lt;- acc + matrix1.[x,z] * matrix2.[z,y]<br/>            ret.[x,y] &lt;- acc<br/>    ret<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>( scratchpad ) USE: math.matrices\n               { { 1 2 } { 3 4 } }  { { -3 -8 3 } { -2 1 4 } } m. .\n{ { -7 -6 11 } { -17 -20 25 } }\n</pre>"}, {"lang": "Fantom", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  // multiply two matrices (with no error checking)<br/>  public static Int[][] multiply (Int[][] m1, Int[][] m2)<br/>  {<br/>    Int[][] result\u00a0:= [,]<br/>    m1.each |Int[] row1|<br/>    { <br/>      Int[] row\u00a0:= [,]<br/>      m2[0].size.times |Int colNumber|<br/>      {<br/>        Int value\u00a0:= 0<br/>        m2.each |Int[] row2, Int index|<br/>        {<br/>          value += row1[index] * row2[colNumber]<br/>        } <br/>        row.add (value)<br/>      }<br/>     result.add (row)<br/>    }<br/>    return result<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    m1\u00a0:= [[1,2,3],[4,5,6]]<br/>    m2\u00a0:= [[1,2],[3,4],[5,6]]<br/>\u00a0<br/>    echo (\"${m1} times ${m2} = ${multiply(m1,m2)}\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 14, "block": "<pre class=\"text highlighted_source\">S\" fsl-util.fs\" REQUIRED<br/>S\" fsl/dynmem.seq\" REQUIRED<br/>: F+! ( addr -- ) ( F: r -- )  DUP <a class=\"__cf_email__\" data-cfemail=\"703630\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> F+ F!\u00a0;<br/>: FSQR ( F: r1 -- r2 ) FDUP F*\u00a0;<br/>S\" fsl/gaussj.seq\" REQUIRED<br/>\u00a0<br/>3 3 float matrix A{{<br/>1e 2e 3e  4e 5e 6e  7e 8e 9e  3 3 A{{ }}fput<br/>3 3 float matrix B{{<br/>3e 3e 3e  2e 2e 2e  1e 1e 1e  3 3 B{{ }}fput<br/>float dmatrix C{{    \\ result<br/>\u00a0<br/>A{{ 3 3 B{{ 3 3 &amp; C{{ mat*<br/>3 3 C{{ }}fprint</pre>"}, {"lang": "Fortran", "loc": 25, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n,m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span><span class=\"br0\">(</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, n<span class=\"sy0\">*</span>m<span class=\"br0\">)</span> <span class=\"br0\">]</span>, <span class=\"br0\">[</span> n, m <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>m,k<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span> <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span><span class=\"br0\">(</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, m<span class=\"sy0\">*</span>k<span class=\"br0\">)</span> <span class=\"br0\">]</span>, <span class=\"br0\">[</span> m, k <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>b,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>    <span class=\"co1\">! C is an array whose first dimension (row) size</span><br/>                                              <span class=\"co1\">! is the same as A's first dimension size, and</span><br/>                                              <span class=\"co1\">! whose second dimension (column) size is the same</span><br/>                                              <span class=\"co1\">! as B's second dimension size.</span><br/>\u00a0<br/><span class=\"co1\">c = matmul( a, b )</span><br/>\u00a0<br/>print <span class=\"sy0\">*</span>, <span class=\"st0\">'A'</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>    print <span class=\"sy0\">*</span>, a<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>print <span class=\"sy0\">*</span>,<br/>print <span class=\"sy0\">*</span>, <span class=\"st0\">'B'</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, m<br/>    print <span class=\"sy0\">*</span>, b<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>print <span class=\"sy0\">*</span>,<br/>print <span class=\"sy0\">*</span>, <span class=\"st0\">'C = AB'</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>    print <span class=\"sy0\">*</span>, c<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span></pre>"}, {"lang": "Frink", "loc": 15, "block": "<pre class=\"text highlighted_source\">matprod[a is array, b is array]\u00a0:=<br/>{<br/>   c = makeArray[[length[a], length[<a class=\"__cf_email__\" data-cfemail=\"56341666\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]], 0]<br/>\u00a0<br/>   a_row = length[a]-1<br/>   a_col = length[<a class=\"__cf_email__\" data-cfemail=\"39587909\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]-1<br/>   b_col = length[b]-1<br/>\u00a0<br/>   for row = 0 to a_row<br/>      for col = 0 to b_col<br/>         for inc = 0 to a_col<br/>            <a class=\"__cf_email__\" data-cfemail=\"bad9fac8d5cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@col = <a class=\"__cf_email__\" data-cfemail=\"7b183b09140c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@col + (<a class=\"__cf_email__\" data-cfemail=\"452405372a32\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@inc * <a class=\"__cf_email__\" data-cfemail=\"86e4c6efe8e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@col)<br/>\u00a0<br/>   return c<br/>}</pre>"}, {"lang": "Futhark", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun main(x: [n][m]int, y: [m][p]int): [n][p]int =<br/>  map (fn xr =&gt; map (fn yc =&gt; reduce (+) 0 (zipWith (*) xr yc))<br/>                    (transpose y))<br/>       x<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>A\u00a0:= [[1, 2], [3, 4], [5, 6], [7, 8]];<br/>B\u00a0:= [[1, 2, 3], [4, 5, 6]];<br/>\u00a0<br/>PrintArray(A);<br/>#  [ [  1,  2 ],<br/>#    [  3,  4 ],<br/>#    [  5,  6 ],<br/>#    [  7,  8 ] ]<br/>\u00a0<br/>PrintArray(B);<br/>#  [ [  1,  2,  3 ],<br/>#    [  4,  5,  6 ] ]<br/>\u00a0<br/>PrintArray(A * B);<br/>#  [ [   9,  12,  15 ],<br/>#    [  19,  26,  33 ],<br/>#    [  29,  40,  51 ],<br/>#    [  39,  54,  69 ] ]</pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"gonum.org/v1/gonum/mat\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a <span class=\"sy2\">:=</span> mat<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">})</span><br/>    b <span class=\"sy2\">:=</span> mat<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">})</span><br/>    <span class=\"kw1\">var</span> m mat<span class=\"sy3\">.</span>Dense<br/>    m<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>mat<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>&amp;m<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 17, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> assertConformable <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> a <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> b <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> a.<span class=\"me1\">every</span> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"sy0\">&amp;&amp;</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> b.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> b.<span class=\"me1\">every</span> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"sy0\">&amp;&amp;</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> matmulWOIL <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span><br/>    assertConformable<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> bt <span class=\"sy0\">=</span> b.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    a.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> ai <span class=\"sy0\">-&gt;</span><br/>        bt.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> btj <span class=\"sy0\">-&gt;</span><br/>            <span class=\"br0\">[</span>ai, btj<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> it<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/> mmult <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <br/> mmult a b <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> ar bc <span class=\"sy0\">|</span> bc <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span>transpose b<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">|</span> ar <span class=\"sy0\">&lt;-</span> a <span class=\"br0\">]</span><br/>\u00a0<br/> <span class=\"co1\">-- Example use:</span><br/> test <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>         <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span> `mmult` <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 15, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> m<span class=\"sy1\">=</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> n<span class=\"sy1\">=</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> p<span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span>m<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> b<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>p<span class=\"br0\">)</span><span class=\"sy1\">,</span> res<span class=\"br0\">(</span>m<span class=\"sy1\">,</span>p<span class=\"br0\">)</span><br/>\u00a0<br/>a <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"co1\">! initialize to 1, 2, ..., m*n</span><br/>b <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"co1\">! initialize to 1, 2, ..., n*p</span><br/>\u00a0<br/>res <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> m<br/>  <span class=\"kw1\">DO</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> p<br/>    <span class=\"kw1\">DO</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<br/>      res<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> res<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">)</span> <span class=\"sy1\">+</span> a<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>k<span class=\"br0\">)</span> <span class=\"sy1\">*</span> b<span class=\"br0\">(</span>k<span class=\"sy1\">,</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ENDDO</span><br/>  <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>DefWidth<span class=\"sy1\">=</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>a<span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>b<span class=\"sy1\">,</span>Y<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>res<span class=\"sy1\">,</span>Y<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">link</span> matrix<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  m1 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  m2 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  m3 <span class=\"sy1\">:=</span> mult_matrix <span class=\"br0\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Multiply:\"</span><span class=\"br0\">)</span><br/>  write_matrix <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> m1<span class=\"br0\">)</span> <span class=\"co1\"># first argument is filename, or \"\" for stdout</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"by:\"</span><span class=\"br0\">)</span><br/>  write_matrix <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> m2<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Result: \"</span><span class=\"br0\">)</span><br/>  write_matrix <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> m3<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">result <span class=\"sy0\">=</span> arr1 <span class=\"co2\"># arr2</span></pre>"}, {"lang": "Idris", "loc": 14, "block": "<pre class=\"text highlighted_source\">import Data.Vect<br/>\u00a0<br/>Matrix\u00a0: Nat -&gt; Nat -&gt; Type -&gt; Type<br/>Matrix m n t = Vect m (Vect n t)<br/>\u00a0<br/>multiply\u00a0: Num t =&gt; Matrix m1 n t -&gt; Matrix n m2 t -&gt; Matrix m1 m2 t<br/>multiply a b = multiply' a (transpose b)<br/>  where <br/>        dot\u00a0: Num t =&gt; Vect n t -&gt; Vect n t -&gt; t<br/>        dot v1 v2 = sum $ map (\\(s1, s2) =&gt; (s1 * s2)) (zip v1 v2)<br/>\u00a0<br/>        multiply'\u00a0: Num t =&gt; Matrix m1 n t -&gt; Matrix m2 n t -&gt; Matrix m1 m2 t<br/>        multiply' (a::as) b = map (dot a) b\u00a0:: multiply' as b<br/>        multiply' [] _ = []</pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\">   mp  =:  +/ .*      <span class=\"co1\">NB.  Matrix product</span><br/>\u00a0<br/>   A  =:  ^/~&gt;:i. <span class=\"nu0\">4</span>   <span class=\"co1\">NB.  Same  A  as in other examples (1 1 1 1, 2 4 8 16, 3 9 27 81,:4 16 64 256)</span><br/>   B  =: \u00a0%.A         <span class=\"co1\">NB.  Matrix inverse of A</span><br/>\u00a0<br/>   <span class=\"st_h\">'6.2'</span> <span class=\"nu0\">8</span>!:<span class=\"nu0\">2</span> A mp B<br/><span class=\"nu0\">1.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span><br/><span class=\"nu0\">0.00</span>  <span class=\"nu0\">1.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span><br/><span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">1.00</span>  <span class=\"nu0\">0.00</span><br/><span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">0.00</span>  <span class=\"nu0\">1.00</span></pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> mult<span class=\"br0\">(</span><span class=\"kw4\">double</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"kw4\">double</span> b<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//a[m][n], b[n][p]</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> b.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span> <span class=\"co1\">//invalid dims</span><br/>\u00a0<br/>   <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">double</span> ans<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>j <span class=\"sy0\">&lt;</span> p<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>k <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            ans<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 23, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// returns a new matrix</span><br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">mult</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">!=</span> other.<span class=\"me1\">height</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">throw</span> <span class=\"st0\">\"error: incompatible sizes\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> other.<span class=\"me1\">width</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">width</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sum <span class=\"sy0\">+=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>a.<span class=\"me1\">mult</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 18, "block": "<pre class=\"text highlighted_source\">def dot_product(a; b):<br/>  a as $a | b as $b<br/>  | reduce range(0;$a|length) as $i (0; . + ($a[$i] * $b[$i]) );<br/>\u00a0<br/># transpose/0 expects its input to be a rectangular matrix (an array of equal-length arrays)<br/>def transpose:<br/>  if (.[0] | length) == 0 then []<br/>  else [map(.[0])] + (map(.[1:]) | transpose)<br/>  end\u00a0;<br/>\u00a0<br/># A and B should both be numeric matrices, A being m by n, and B being n by p.<br/>def multiply(A; B):<br/>  A as $A | B as $B<br/>  | ($B[0]|length) as $p<br/>  | ($B|transpose) as $BT<br/>  | reduce range(0; $A|length) as $i<br/>       ([]; reduce range(0; $p) as $j <br/>         (.; .[$i][$j] = dot_product( $A[$i]; $BT[$j] ) ))\u00a0;</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">julia&gt; [1 2 3\u00a0; 4 5 6] * [1 2\u00a0; 3 4\u00a0; 5 6]  # product of a 2x3 by a 3x2<br/>2x2 Array{Int64,2}:<br/> 22  28<br/> 49  64<br/>\u00a0<br/>julia&gt; [1 2 3] * [1,2,3]   # product of a row vector by a column vector<br/>1-element Array{Int64,1}:<br/> 14<br/>\u00a0</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  (1 2;3 4)_mul (5 6;7 8)<br/>(19 22<br/> 43 50)</pre>"}, {"lang": "Klong", "loc": 4, "block": "<pre class=\"text highlighted_source\">    mul::{[a b];b::+y;{a::x;+/'{a*x}'b}'x}<br/>    [[1 2] [3 4]] mul [[5 6] [7 8]]<br/>[[19 22]<br/> [43 50]]</pre>"}, {"lang": "Kotlin", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> DoubleArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>operator fun Matrix.<span class=\"me1\">times</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows2 <span class=\"sy0\">=</span> other.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols2 <span class=\"sy0\">=</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span>cols1 <span class=\"sy0\">==</span> rows2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>cols2<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until cols2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until rows2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m1 <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">6.0</span>, -<span class=\"nu0\">4.0</span>,  <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">3.0</span>,  <span class=\"nu0\">5.0</span>,  <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">3.0</span>,  <span class=\"nu0\">7.0</span>, -<span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m2 <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">4.0</span>,  <span class=\"nu0\">8.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">6.0</span>,  <span class=\"nu0\">9.0</span>, <span class=\"nu0\">10.0</span>,  <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">11.0</span>, -<span class=\"nu0\">4.0</span>,  <span class=\"nu0\">5.0</span>, -<span class=\"nu0\">3.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>  <br/>    printMatrix<span class=\"br0\">(</span>m1 <span class=\"sy0\">*</span> m2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">[[1 2 3] [4 5 6]] 'm dress<br/>[[1 2] [3 4] [5 6]] 'm dress * .</pre>"}, {"lang": "LFE", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> matrix* <span class=\"br0\">(</span>matrix-<span class=\"nu0\">1</span> matrix-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>list-comp<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- a matrix-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>list-comp<br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- b <span class=\"br0\">(</span>transpose matrix-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">foldl</span> #'+/<span class=\"nu0\">2</span> <span class=\"nu0\">0</span><br/>                   <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">zipwith</span> #'*/<span class=\"nu0\">2</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 12, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>MatrixA$ <span class=\"sy0\">=</span><span class=\"st0\">\"4, 4,         1,  1,  1,  1,         2,  4,  8,  16,             3,  9, 27,  81,          4, 16, 64, 256\"</span><br/>MatrixB$ <span class=\"sy0\">=</span><span class=\"st0\">\"4, 4,         4, -3,  4/3, -1/4 ,   -13/3, 19/4, -7/3, 11/24,    3/2, -2, 7/6, -1/4,   -1/6, 1/4, -1/6, 1/24\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Product of two matrices\"</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixA$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"         *\"</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixB$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"         =\"</span><br/>MatrixP$ <span class=\"sy0\">=</span>MatrixMultiply$<span class=\"br0\">(</span> MatrixA$<span class=\"sy0\">,</span> MatrixB$<span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixP$<br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 105, "block": "<pre class=\"text highlighted_source\">TO LISTVMD\u00a0:A\u00a0:F\u00a0:C\u00a0:NV<br/>;PROCEDURE LISTVMD<br/>;A = LIST<br/>;F = ROWS<br/>;C = COLS<br/>;NV = NAME OF MATRIX / VECTOR NEW<br/>;this procedure transform a list in matrix / vector square or rect<br/>\u00a0<br/>(LOCAL \"CF \"CC \"NV \"T \"W)<br/>MAKE \"CF 1<br/>MAKE \"CC 1<br/>MAKE \"NV (MDARRAY (LIST\u00a0:F\u00a0:C) 1)<br/>MAKE \"T\u00a0:F *\u00a0:C<br/>FOR [Z 1\u00a0:T][MAKE \"W ITEM\u00a0:Z\u00a0:A<br/>MDSETITEM (LIST\u00a0:CF\u00a0:CC)\u00a0:NV\u00a0:W<br/>MAKE \"CC\u00a0:CC + 1<br/>IF\u00a0:CC =\u00a0:C + 1 [MAKE \"CF\u00a0:CF + 1 MAKE \"CC 1]]<br/>OUTPUT\u00a0:NV<br/>END<br/>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::<br/>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::<br/>\u00a0<br/>\u00a0<br/>TO XX<br/>; MAIN PROGRAM<br/>;LRCVS 10.04.12<br/>; THIS PROGRAM multiplies two \"square\" matrices / vector ONLY!!!<br/>; THE RECTANGULAR NOT WORK!!!<br/>\u00a0<br/>CT CS HT<br/>\u00a0<br/>; FIRST DATA MATRIX / VECTOR<br/>MAKE \"A [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49]<br/>MAKE \"FA 5\u00a0;\"ROWS<br/>MAKE \"CA 5\u00a0;\"COLS<br/>\u00a0<br/>; SECOND DATA MATRIX / VECTOR<br/>MAKE \"B [2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50]<br/>MAKE \"FB 5\u00a0;\"ROWS<br/>MAKE \"CB 5\u00a0;\"COLS<br/>\u00a0<br/>\u00a0<br/>IF (OR\u00a0:FA &lt;&gt;\u00a0:CA\u00a0:FB &lt;&gt;:CB) [PRINT \"Las_matrices/vector_no_son_cuadradas THROW<br/>\"TOPLEVEL ]<br/>IFELSE (OR\u00a0:CA &lt;&gt;\u00a0:FB\u00a0:FA &lt;&gt;\u00a0:CB) [PRINT<br/>\"Las_matrices/vector_no_son_compatibles THROW \"TOPLEVEL ][MAKE \"MA LISTVMD\u00a0:A<br/>:FA\u00a0:CA \"MA MAKE \"MB LISTVMD\u00a0:B\u00a0:FB\u00a0:CB \"MB]\u00a0;APPLICATION &lt;&lt;&lt; \"LISTVMD\"<br/>\u00a0<br/>PRINT (LIST \"THIS_IS: \"ROWS \"X \"COLS)<br/>PRINT []<br/>PRINT (LIST\u00a0:MA \"=_M1\u00a0:FA \"ROWS \"X\u00a0:CA \"COLS)<br/>PRINT []<br/>PRINT (LIST\u00a0:MB \"=_M2\u00a0:FA \"ROWS \"X\u00a0:CA \"COLS)<br/>PRINT []<br/>\u00a0<br/>\u00a0<br/>MAKE \"T\u00a0:FA *\u00a0:CB<br/>MAKE \"RE (ARRAY\u00a0:T 1)<br/>\u00a0<br/>\u00a0<br/>MAKE \"CO 0<br/>FOR [AF 1\u00a0:CA][<br/>FOR [AC 1\u00a0:CA][<br/>MAKE \"TEMP 0<br/>FOR [I 1\u00a0:CA ][<br/>MAKE \"TEMP\u00a0:TEMP + (MDITEM (LIST\u00a0:I\u00a0:AF)\u00a0:MA) * (MDITEM (LIST\u00a0:AC\u00a0:I)\u00a0:MB)]<br/>MAKE \"CO\u00a0:CO + 1<br/>SETITEM\u00a0:CO\u00a0:RE\u00a0:TEMP]]<br/>\u00a0<br/>\u00a0<br/>PRINT []<br/>PRINT (LIST \"THIS_IS:\u00a0:FA \"ROWS \"X\u00a0:CB \"COLS)<br/>SHOW LISTVMD\u00a0:RE\u00a0:FA\u00a0:CB \"TO\u00a0;APPLICATION &lt;&lt;&lt; \"LISTVMD\"<br/>END<br/>\u00a0<br/>\u00a0<br/>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\<br/>\u00a0<br/>\u00a0<br/>               M1 * M2 RESULT / SOLUTION<br/>\u00a0<br/> 1  3  5  7  9    2  4  6  8 10    830 1880 2930 3980 5030<br/>11 13 15 17 19   12 14 16 18 20    890 2040 3190 4340 5490<br/>21 23 25 27 29 X 22 24 26 28 30 =  950 2200 3450 4700 5950<br/>31 33 35 37 39   32 34 36 38 40   1010 2360 3710 5060 6410<br/>41 43 45 47 49   42 44 46 48 50   1070 2520 3970 5420 6870<br/>\u00a0<br/>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\<br/>\u00a0<br/>\u00a0<br/>NOW IN LOGO!!!!<br/>\u00a0<br/>\u00a0<br/>THIS_IS: ROWS X COLS<br/>\u00a0<br/>{{1 3 5 7 9} {11 13 15 17 19} {21 23 25 27 29} {31 33 35 37 39} {41 43 45 47<br/>49}} =_M1 5 ROWS X 5 COLS<br/>\u00a0<br/>{{2 4 6 8 10} {12 14 16 18 20} {22 24 26 28 30} {32 34 36 38 40} {42 44 46 48<br/>50}} =_M2 5 ROWS X 5 COLS<br/>\u00a0<br/>\u00a0<br/>THIS_IS: 5 ROWS X 5 COLS<br/>{{830 1880 2930 3980 5030} {890 2040 3190 4340 5490} {950 2200 3450 4700 5950}<br/>{1010 2360 3710 5060 6410} {1070 2520 3970 5420 6870}}</pre>"}, {"lang": "Lua", "loc": 31, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> MatMul<span class=\"br0\">(</span> m1<span class=\"sy0\">,</span> m2 <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>m1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"sy0\">#</span>m2 <span class=\"kw1\">then</span>       <span class=\"co1\">-- inner matrix-dimensions must agree</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">nil</span>      <br/>    <span class=\"kw1\">end</span> <br/>\u00a0<br/>    <span class=\"kw1\">local</span> res <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m1 <span class=\"kw1\">do</span><br/>        res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            res<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m2 <span class=\"kw1\">do</span><br/>                res<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> res<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> m1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> m2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> res<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Test for MatMul</span><br/>mat1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>mat2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>erg <span class=\"sy0\">=</span> MatMul<span class=\"br0\">(</span> mat1<span class=\"sy0\">,</span> mat2 <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>erg <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>erg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> erg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> </pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">A\u00a0:= &lt;&lt;1|2|3&gt;,&lt;4|5|6&gt;&gt;;<br/>\u00a0<br/>B\u00a0:= &lt;&lt;1,2,3&gt;|&lt;4,5,6&gt;|&lt;7,8,9&gt;|&lt;10,11,12&gt;&gt;;<br/>\u00a0<br/>A . B;</pre>"}, {"lang": "MathCortex", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; A = [2,3; -2,1]<br/> 2           3         <br/>-2           1         <br/>\u00a0<br/>&gt;&gt; B = [1,2;4,2]<br/> 1           2         <br/> 4           2         <br/>\u00a0<br/>&gt;&gt; A * B<br/> 14          10        <br/> 2          -2  <br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Dot[{{a, b}, {c, d}}, {{w, x}, {y, z}}]</pre>"}, {"lang": "MATLAB", "loc": 27, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; A = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>;<span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\u00a0<br/>A =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">2</span><br/>     <span class=\"nu0\">3</span>     <span class=\"nu0\">4</span><br/>\u00a0<br/>&gt;&gt; B = <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"nu0\">6</span>;<span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>\u00a0<br/>B =<br/>\u00a0<br/>     <span class=\"nu0\">5</span>     <span class=\"nu0\">6</span><br/>     <span class=\"nu0\">7</span>     <span class=\"nu0\">8</span><br/>\u00a0<br/>&gt;&gt; A * B<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>    <span class=\"nu0\">19</span>    <span class=\"nu0\">22</span><br/>    <span class=\"nu0\">43</span>    <span class=\"nu0\">50</span><br/>\u00a0<br/>&gt;&gt; mtimes<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>    <span class=\"nu0\">19</span>    <span class=\"nu0\">22</span><br/>    <span class=\"nu0\">43</span>    <span class=\"nu0\">50</span></pre>"}, {"lang": "Maxima", "loc": 13, "block": "<pre class=\"text highlighted_source\">a: matrix([1, 2],<br/>          [3, 4],<br/>          [5, 6],<br/>          [7, 8])$<br/>\u00a0<br/>b: matrix([1, 2, 3],<br/>          [4, 5, 6])$<br/>\u00a0<br/>a . b;<br/>/* matrix([ 9, 12, 15],<br/>          [19, 26, 33],<br/>          [29, 40, 51],<br/>          [39, 54, 69]) */</pre>"}, {"lang": "Nial", "loc": 12, "block": "<pre class=\"text highlighted_source\">|A\u00a0:=  4 4 reshape 1 1 1 1 2 4 8 16 3 9 27 81 4 16 64 256<br/>=1  1  1   1<br/>=2  4  8  16<br/>=3  9 27  81<br/>=4 16 64 256<br/>|B\u00a0:= inverse A<br/>\u00a0<br/>|A innerproduct B<br/>=1.        0.     8.3e-17     -2.9e-16<br/>=1.3e-15   1.     -4.4e-16    -3.3e-16<br/>=0.        0.      1.         4.4e-16<br/>=0.        0.      0.         1.</pre>"}, {"lang": "Nim", "loc": 31, "block": "<pre class=\"text highlighted_source\">import strfmt<br/>\u00a0<br/>type Matrix[M,N: static[int]] = array[M, array[N, float]]<br/>\u00a0<br/>let a = [[1.0,  1.0,  1.0,   1.0],<br/>         [2.0,  4.0,  8.0,  16.0],<br/>         [3.0,  9.0, 27.0,  81.0],<br/>         [4.0, 16.0, 64.0, 256.0]]<br/>\u00a0<br/>let b = [[  4.0  , -3.0  ,  4/3.0,  -1/4.0 ],<br/>         [-13/3.0, 19/4.0, -7/3.0,  11/24.0],<br/>         [  3/2.0, -2.0  ,  7/6.0,  -1/4.0 ],<br/>         [ -1/6.0,  1/4.0, -1/6.0,   1/24.0]]<br/>\u00a0<br/>proc `$`(m: Matrix): string =<br/>  result = \"([\"<br/>  for r in m:<br/>    if result.len &gt; 2: result.add \"]\\n [\"<br/>    for val in r: result.add val.format(\"8.2f\")<br/>  result.add \"])\"<br/>\u00a0<br/>proc `*`[M,P,N](a: Matrix[M,P]; b: Matrix[P,N]): Matrix[M,N] =<br/>  for i in result.low .. result.high:<br/>    for j in result[0].low .. result[0].high:<br/>      for k in a[0].low .. a[0].high:<br/>        result[i][j] += a[i][k] * b[k][j]<br/>\u00a0<br/>echo a<br/>echo b<br/>echo a * b<br/>echo b * a</pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> matrix_multiply x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> x0 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length x<br/>  <span class=\"kw1\">and</span> y0 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length y <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> y1 <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> y0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length y<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix x0 y1 <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> x0<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> y1<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> y0<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        z<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> z<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  z</pre>"}, {"lang": "Octave", "loc": 13, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/zeros.html\"><span class=\"kw5\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"co2\">% prepare the matrix</span><br/><span class=\"co2\">% 1 1 1 1</span><br/><span class=\"co2\">% 2 4 8 16</span><br/><span class=\"co2\">% 3 9 27 81</span><br/><span class=\"co2\">% 4 16 64 256</span><br/><span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">4</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">4</span><br/>    a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy2\">^</span>j<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfor</span><br/>b <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/inverse.html\"><span class=\"kw6\">inverse</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>a <span class=\"sy1\">*</span> b</pre>"}, {"lang": "Ol", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (matrix-multiply matrix1 matrix2)<br/>(map<br/>   (lambda (row)<br/>      (apply map<br/>         (lambda column<br/>            (apply + (map * row column)))<br/>         matrix2))<br/>   matrix1))<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 115, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  'Example of matrix layout mapped to an array of 4x4 cells<br/>  '<br/>  '  0 4 8 C<br/>  '  1 5 9 D<br/>  '  2 6 A E<br/>  '  3 7 B F<br/>  '<br/>\u00a0<br/> \u00a0% MatrixType double<br/>\u00a0<br/>  sub MatrixMul(MatrixType *A,*B,*C, sys n)<br/>  '========================================<br/>  '<br/>  '<br/>  #if leftmatch matrixtype single<br/>   \u00a0% OneStep 4<br/>   \u00a0% mtype single<br/>  #endif<br/>  '<br/>  #if leftmatch matrixtype double<br/>   \u00a0% OneStep 8<br/>   \u00a0% mtype double<br/>  #endif<br/>\u00a0<br/>  sys <a class=\"__cf_email__\" data-cfemail=\"8bfbeab6cbca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"3c4c5e017c7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"49392a74090a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  sys ColStep=OneStep*n<br/>\u00a0<br/>  mov ecx,pa<br/>  mov edx,pb<br/>  mov eax,pc<br/>\u00a0<br/>  mov esi,n<br/>  (<br/>  call column\u00a0: dec esi\u00a0: jg repeat<br/>  )<br/>  exit sub<br/>\u00a0<br/>  column:<br/>  '======<br/>\u00a0<br/>  mov edi,n<br/>  (<br/>  call cell\u00a0: dec edi\u00a0: jg repeat<br/>  )<br/>  add edx,ColStep<br/>  sub ecx,ColStep<br/>  ret<br/>\u00a0<br/>  cell: ' row A * column B<br/>  '=======================<br/>\u00a0<br/>  'matrix data is stored ascending vertically then horizontally<br/>  'thus rows are minor, columns are major<br/>  '<br/>  push  ecx<br/>  push  edx<br/>  push  eax<br/>  mov   eax,4<br/>  fldz<br/>  (<br/>  fld   mtype [ecx]<br/>  fmul  mtype [edx]<br/>  faddp st1<br/>  add   ecx,ColStep 'next column of matrix A<br/>  add   edx,OneStep 'next row of matrix B<br/>  dec eax<br/>  jnz repeat<br/>  )<br/>  pop eax<br/>  fstp mtype [eax] 'assign to next row of matrix C<br/>  '<br/>  pop edx<br/>  pop ecx<br/>  add   eax,OneStep 'next cell in column of matrix C (columns then rows)<br/>  add   ecx,OneStep 'next row of matrix A<br/>  ret<br/>  '<br/>  end sub<br/>\u00a0<br/>\u00a0<br/>  function ShowMatrix(MatrixType*A,sys n) as string<br/>  '================================================<br/>    string cr=chr(13)+chr(10), tab=chr(9)<br/>    function=\"MATRIX \" n \"x\" n cr cr<br/>    sys i,j,m<br/>    '<br/>    for i=1 to n<br/>      m=0<br/>      for j=1 to n<br/>        function+=str( A[m+i] ) tab<br/>        m+=n<br/>      next<br/>      function+=cr<br/>    next<br/>  end function<br/>\u00a0<br/>  'TEST<br/>  '====       <br/>\u00a0<br/> \u00a0% n 4<br/>  MatrixType A[n*n],B[n*n],C[n*n]<br/>\u00a0<br/>\u00a0<br/>  'reading vertically (minor) then left to right (major)<br/>\u00a0<br/>  A &lt;= 4,0,0,1, 0,4,0,0, 0,0,4,0, 0,0,0,4<br/>\u00a0<br/>  B &lt;= 2,0,0,2, 0,2,0,0, 0,0,2,0, 0,0,0,2<br/>\u00a0<br/>\u00a0<br/>  MatrixMul A,B,C,n<br/>\u00a0<br/>  Print ShowMatrix C,n<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">M<span class=\"sy0\">*</span>N</pre>"}, {"lang": "Perl", "loc": 35, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> mmult<br/> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">our</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">our</span> <span class=\"re0\">@b</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@p</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$cols</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@b</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$r</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$cols</span> <span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$c</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">{</span><br/>          <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span><br/>           <span class=\"kw1\">foreach</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"re0\">@p</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> display <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">@a</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/>   <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <br/><span class=\"br0\">(</span><br/>   <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> mmult<span class=\"br0\">(</span><span class=\"re0\">\\@a</span><span class=\"sy0\">,</span><span class=\"re0\">\\@b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>display<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> mmult<span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span><span class=\"re0\">@b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@p</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@a</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@p</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@b</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">@p</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span>  <span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>  <span class=\"nu0\">4</span>  <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span>  <span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">13</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">11</span><span class=\"sy0\">/</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>  <span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span>  <span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> mmult<span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span><span class=\"re0\">@b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">function matrix_mul(sequence a, sequence b)<br/>sequence c<br/>    if length(a[1])\u00a0!= length(b) then<br/>        return 0<br/>    else<br/>        c = repeat(repeat(0,length(b[1])),length(a))<br/>        for i=1 to length(a) do<br/>            for j=1 to length(b[1]) do<br/>                for k=1 to length(a[1]) do<br/>                    c[i][j] += a[i][k]*b[k][j]<br/>                end for<br/>            end for<br/>        end for<br/>        return c<br/>    end if<br/>end function</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de matMul (Mat1 Mat2)<br/>   (mapcar<br/>      '((Row)<br/>         (apply mapcar Mat2<br/>            '(@ (sum * Row (rest))) ) )<br/>      Mat1 ) )<br/>\u00a0<br/>(matMul<br/>   '((1 2 3) (4 5 6))<br/>   '((6 -1) (3 2) (0 -3)) )</pre>"}, {"lang": "PL/I", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Matrix multiplication of A by B, yielding C */<br/>MMULT: procedure (a, b, c);<br/>   declare (a, b, c)(*,*) float controlled;<br/>   declare (i, j, m, n, p) fixed binary;<br/>\u00a0<br/>   if hbound(a,2) ^= hbound(b,1) then<br/>      do;<br/>         put skip list<br/>            ('Matrices are incompatible for matrix multiplication');<br/>         signal error;<br/>      end;<br/>\u00a0<br/>   m = hbound(a, 1); p = hbound(b, 2);<br/>   if allocation(c) &gt; 0 then free c;<br/>\u00a0<br/>   allocate c(m,p);<br/>\u00a0<br/>   do  i = 1 to m;<br/>      do j = 1 to p;<br/>         c(i,j) = sum(a(i,*) * b(*,j) );<br/>      end;<br/>   end;<br/>end MMULT;<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 23, "block": "<pre class=\"text highlighted_source\">define matmul(a, b) -&gt; c;<br/>    lvars ba = boundslist(a), bb = boundslist(b);<br/>    lvars i, i0 = ba(1), i1 = ba(2);<br/>    lvars j, j0 = bb(1), j1 = bb(2);<br/>    lvars k, k0 = bb(3), k1 = bb(4);<br/>    if length(ba) /= 4 then<br/>        throw([need_2d_array ^a])<br/>    endif;<br/>    if length(bb) /= 4 then<br/>        throw([need_2d_array ^b])<br/>    endif;<br/>    if ba(3) /= j0 or ba(4) /= j1 then<br/>        throw([dimensions_do_not_match ^a ^b]);<br/>    endif;<br/>    newarray([^i0 ^i1 ^k0 ^k1], 0) -&gt; c;<br/>    for i from i0 to i1 do<br/>        for k from k0 to k1 do<br/>            for j from j0 to j1 do<br/>                c(i, k) + a(i, j)*b(j, k) -&gt; c(i, k);<br/>            endfor;<br/>        endfor;<br/>    endfor;<br/>enddefine;</pre>"}, {"lang": "PowerShell", "loc": 40, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> multarrays<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>            <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>                <span class=\"re0\">$sum</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$c</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> show<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$a</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"st0\">\"$($a[$_])\"</span><span class=\"br0\">}</span><span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a =\"</span><br/>show <span class=\"re0\">$a</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>b =\"</span><br/>show <span class=\"re0\">$b</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>c =\"</span><br/><span class=\"re0\">$c</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a * <span class=\"es0\">`$</span>b =\"</span><br/>show <span class=\"br0\">(</span>multarrays <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><br/><span class=\"st0\">\" \"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>a * <span class=\"es0\">`$</span>c =\"</span><br/>show <span class=\"br0\">(</span>multarrays <span class=\"re0\">$a</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 11, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% SWI-Prolog has transpose/2 in its clpfd library</span><br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% N is the dot product of lists V1 and V2.</span><br/>dot<span class=\"br0\">(</span>V1<span class=\"sy4\">,</span> V2<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> maplist<span class=\"br0\">(</span>product<span class=\"sy4\">,</span>V1<span class=\"sy4\">,</span>V2<span class=\"sy4\">,</span>P<span class=\"br0\">)</span><span class=\"sy4\">,</span> sumlist<span class=\"br0\">(</span>P<span class=\"sy4\">,</span>N<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>product<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>N2<span class=\"sy4\">,</span>N3<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N1<span class=\"sy3\">*</span>N2<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Matrix multiplication with matrices represented</span><br/><span class=\"co1\">% as lists of lists. M3 is the product of M1 and M2</span><br/>mmult<span class=\"br0\">(</span>M1<span class=\"sy4\">,</span> M2<span class=\"sy4\">,</span> M3<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> transpose<span class=\"br0\">(</span>M2<span class=\"sy4\">,</span>MT<span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>mm_helper<span class=\"br0\">(</span>MT<span class=\"br0\">)</span><span class=\"sy4\">,</span> M1<span class=\"sy4\">,</span> M3<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mm_helper<span class=\"br0\">(</span>M2<span class=\"sy4\">,</span> I1<span class=\"sy4\">,</span> M3<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> maplist<span class=\"br0\">(</span>dot<span class=\"br0\">(</span>I1<span class=\"br0\">)</span><span class=\"sy4\">,</span> M2<span class=\"sy4\">,</span> M3<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 23, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> multiplyMatrix<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Array b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Array prd<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> ar <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">;#rows for matrix a</span><br/>  <span class=\"kw1\">Protected</span> ac <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;#cols for matrix a</span><br/>  <span class=\"kw1\">Protected</span> br <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">;#rows for matrix b</span><br/>  <span class=\"kw1\">Protected</span> bc <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;#cols for matrix b</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> ac <span class=\"sy0\">=</span> br<br/>    <span class=\"kw1\">Dim</span> prd<span class=\"br0\">(</span>ar, bc<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Protected</span> i, j, k<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ar<br/>      <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> bc <br/>        <span class=\"kw1\">For</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> br <span class=\"co1\">;ac</span><br/>          prd<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> prd<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i, k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b<span class=\"br0\">(</span>k, j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">ProcedureReturn</span> #True  <span class=\"co1\">;multiplication performed, product in prd()</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #False <span class=\"co1\">;multiplication not performed, dimensions invalid </span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 38, "block": "<pre class=\"python highlighted_source\">a<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"co1\"># matrix A #</span><br/>     <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span><span class=\"sy0\">,</span>  <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span>  <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>b<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>  <span class=\"nu0\">4</span>  <span class=\"sy0\">,</span> -<span class=\"nu0\">3</span>  <span class=\"sy0\">,</span>  <span class=\"nu0\">4</span>/<span class=\"nu0\">3</span>.<span class=\"sy0\">,</span>  -<span class=\"nu0\">1</span>/<span class=\"nu0\">4</span>. <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"co1\"># matrix B #</span><br/>     <span class=\"br0\">(</span>-<span class=\"nu0\">13</span>/<span class=\"nu0\">3</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">19</span>/<span class=\"nu0\">4</span>.<span class=\"sy0\">,</span> -<span class=\"nu0\">7</span>/<span class=\"nu0\">3</span>.<span class=\"sy0\">,</span>  <span class=\"nu0\">11</span>/<span class=\"nu0\">24</span>.<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">(</span>  <span class=\"nu0\">3</span>/<span class=\"nu0\">2</span>.<span class=\"sy0\">,</span> -<span class=\"nu0\">2</span>.  <span class=\"sy0\">,</span>  <span class=\"nu0\">7</span>/<span class=\"nu0\">6</span>.<span class=\"sy0\">,</span>  -<span class=\"nu0\">1</span>/<span class=\"nu0\">4</span>. <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">(</span> -<span class=\"nu0\">1</span>/<span class=\"nu0\">6</span>.<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span>/<span class=\"nu0\">4</span>.<span class=\"sy0\">,</span> -<span class=\"nu0\">1</span>/<span class=\"nu0\">6</span>.<span class=\"sy0\">,</span>   <span class=\"nu0\">1</span>/<span class=\"nu0\">24</span>.<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> MatrixMul<span class=\"br0\">(</span> mtx_a<span class=\"sy0\">,</span> mtx_b<span class=\"br0\">)</span>:<br/>    tpos_b <span class=\"sy0\">=</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span> *mtx_b<span class=\"br0\">)</span><br/>    rtn <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span> ea*eb <span class=\"kw1\">for</span> ea<span class=\"sy0\">,</span>eb <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> tpos_b<span class=\"br0\">]</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> mtx_a<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> rtn<br/>\u00a0<br/>\u00a0<br/>v <span class=\"sy0\">=</span> MatrixMul<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">'v = ('</span><br/><span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> v:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'['</span><span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">for</span> val <span class=\"kw1\">in</span> r:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'%8.2f '</span>%val<span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">print</span> <span class=\"st0\">']'</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">')'</span><br/>\u00a0<br/>\u00a0<br/>u <span class=\"sy0\">=</span> MatrixMul<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">'u = '</span><br/><span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> u:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'['</span><span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">for</span> val <span class=\"kw1\">in</span> r:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'%8.2f '</span>%val<span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">print</span> <span class=\"st0\">']'</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">')'</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">a\u00a0%*% b</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (m-mult m1 m2)<br/>  (for/list ([r m1])<br/>    (for/list ([c (apply map list m2)])<br/>      (apply + (map * r c)))))<br/>(m-mult '((1 2) (3 4)) '((5 6) (7 8)))<br/>;; -&gt; '((19 22) (43 50))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 21, "block": "<pre class=\"text highlighted_source\">public rel[real, real, real] matrixMultiplication(rel[real x, real y, real v] matrix1, rel[real x, real y, real v] matrix2){<br/>\tif (max(matrix1.x) == max(matrix2.y)){<br/>\t\tp = {&lt;x1,y1,x2,y2, v1*v2&gt; | &lt;x1,y1,v1&gt; &lt;- matrix1, &lt;x2,y2,v2&gt; &lt;- matrix2};<br/>\u00a0<br/>\t\tresult = {};<br/>\t\tfor (y &lt;- matrix1.y){<br/>\t\t\tfor (x &lt;- matrix2.x){<br/>\t\t\t\tv = (0.0 | it + v | &lt;x1, y1, x2, y2, v&gt; &lt;- p,  x==x2 &amp;&amp; y==y1, x1==y2 &amp;&amp; y2==x1);<br/>\t\t\t\tresult += &lt;x,y,v&gt;;<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn result;<br/>\t}<br/>\telse throw \"Matrix sizes do not match.\";<br/>\u00a0<br/>//a matrix, given by a relation of the x-coordinate, y-coordinate and value.<br/>public rel[real x, real y, real v] matrixA = {<br/>&lt;0.0,0.0,12.0&gt;, &lt;0.0,1.0, 6.0&gt;, &lt;0.0,2.0,-4.0&gt;, <br/>&lt;1.0,0.0,-51.0&gt;, &lt;1.0,1.0,167.0&gt;, &lt;1.0,2.0,24.0&gt;, <br/>&lt;2.0,0.0,4.0&gt;, &lt;2.0,1.0,-68.0&gt;, &lt;2.0,2.0,-41.0&gt;<br/>};</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program multiplies two matrices together, displays the matrices and the results. */</span><br/>x<span class=\"sy0\">.</span>=;  x<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span>                                    <span class=\"coMULTI\">/*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*/</span><br/>      x<span class=\"sy0\">.</span>2=<span class=\"nu0\">3</span> <span class=\"nu0\">4</span>                                    <span class=\"coMULTI\">/*\u2551 As none of the matrix values have \u2551*/</span><br/>      x<span class=\"sy0\">.</span>3=<span class=\"nu0\">5</span> <span class=\"nu0\">6</span>                                    <span class=\"coMULTI\">/*\u2551 a sign,  quotes aren't needed.    \u2551*/</span><br/>      x<span class=\"sy0\">.</span>4=<span class=\"nu0\">7</span> <span class=\"nu0\">8</span>                                    <span class=\"coMULTI\">/*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/</span><br/>                 <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">.</span>r<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>        <span class=\"coMULTI\">/*build the \"A\" matrix from X. numbers.*/</span><br/>                   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">.</span>r<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> x<span class=\"sy0\">.</span>r a<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c x<span class=\"sy0\">.</span>r;      <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>Arows=r-<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*adjust the number of rows  (DO loop).*/</span><br/>Acols=c-<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*   \"    \"     \"    \" cols    \"   \"  .*/</span><br/>y<span class=\"sy0\">.</span>=;  y<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/>      y<span class=\"sy0\">.</span>2=<span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><br/>                 <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> y<span class=\"sy0\">.</span>r<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>        <span class=\"coMULTI\">/*build the \"B\" matrix from Y. numbers.*/</span><br/>                   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> y<span class=\"sy0\">.</span>r<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> y<span class=\"sy0\">.</span>r b<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c y<span class=\"sy0\">.</span>r;      <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>Brows=r-<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*adjust the number of rows  (DO loop).*/</span><br/>Bcols=c-<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*   \"     \"    \"    \" cols    \"   \"   */</span><br/>c<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  w=<span class=\"nu0\">0</span>                                       <span class=\"coMULTI\">/*W  is max width of an matrix element.*/</span><br/>            <span class=\"kw1\">do</span>       i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> Arows              <span class=\"coMULTI\">/*multiply matrix  A  and  B  \u2500\u2500\u2500\u25ba   C */</span><br/>              <span class=\"kw1\">do</span>     j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> Bcols<br/>                  <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> Acols;    c<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>j=c<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>j  +  a<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>k <span class=\"sy0\">*</span> b<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j<br/>                                                     w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>c<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                    <span class=\"coMULTI\">/*  \u2191                                  */</span><br/>              <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span>                    <span class=\"coMULTI\">/*  \u2514\u2500\u2500\u25c4\u2500\u2500\u2500 maximum width of elements. */</span><br/>            <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*i*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> showMatrix  <span class=\"st0\">'A'</span>,  Arows,  Acols             <span class=\"coMULTI\">/*display matrix  A \u2500\u2500\u2500\u25ba  the terminal.*/</span><br/><span class=\"kw1\">call</span> showMatrix  <span class=\"st0\">'B'</span>,  Brows,  Bcols             <span class=\"coMULTI\">/*   \"       \"    B \u2500\u2500\u2500\u25ba   \"     \"     */</span><br/><span class=\"kw1\">call</span> showMatrix  <span class=\"st0\">'C'</span>,  Arows,  Bcols             <span class=\"coMULTI\">/*   \"       \"    C \u2500\u2500\u2500\u25ba   \"     \"     */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMatrix: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> mat,rows,cols;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>mat <span class=\"st0\">'matrix'</span>, cols<span class=\"sy0\">*</span><span class=\"br0\">(</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span> +<span class=\"nu0\">4</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;  _=<br/>                      <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;  _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw2\">value</span><span class=\"br0\">(</span>mat<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>, w<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>;     <span class=\"kw1\">say</span> _<br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>            <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"stdlib.ring\"<br/>n = 3<br/>C = newlist(n,n)<br/>A = [[1,2,3], [4,5,6], [7,8,9]]<br/>B = [[1,0,0], [0,1,0], [0,0,1]]<br/>for i = 1 to n<br/>    for j = 1 to n<br/>       for k = 1 to n<br/>           C[i][k] += A[i][j] * B[j][k]<br/>       next<br/>    next<br/>next<br/>for i = 1 to n<br/>    for j = 1 to n<br/>        see C[i][j] + \" \"<br/>    next<br/>    see nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">8</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>,<br/>                        <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Rust", "loc": 61, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>struct Matrix {<br/>    dat: [[f32; 3]; 3]<br/>}<br/>\u00a0<br/>impl Matrix {<br/>    pub fn mult_m(a: Matrix, b: Matrix) -&gt; Matrix<br/>    {<br/>        let mut out = Matrix {<br/>            dat: [[0., 0., 0.],<br/>                  [0., 0., 0.],<br/>                  [0., 0., 0.]<br/>                  ]<br/>        };<br/>\u00a0<br/>        for i in 0..3{<br/>            for j in 0..3 {<br/>                for k in 0..3 {<br/>                    out.dat[i][j] += a.dat[i][k] * b.dat[k][j];<br/>                }<br/>            }<br/>        }<br/>\u00a0<br/>        out<br/>    }<br/>\u00a0<br/>    pub fn print(self)<br/>    {<br/>        for i in 0..3 {<br/>            for j in 0..3 {<br/>                print!(\"{} \", self.dat[i][j]);<br/>            }<br/>            print!(\"\\n\");<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main()<br/>{<br/>    let  a = Matrix {<br/>        dat: [[1., 2., 3.],<br/>              [4., 5., 6.],<br/>              [7., 8., 9.]<br/>              ]<br/>    };<br/>\u00a0<br/>    let  b = Matrix {<br/>        dat: [[1., 0., 0.],<br/>              [0., 1., 0.],<br/>              [0., 0., 1.]]<br/>    };<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>        let c = Matrix::mult_m(a, b);<br/>\u00a0<br/>\u00a0<br/>    c.print();<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mult<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">]</span>, b<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> n<span class=\"sy0\">:</span> Numeric<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> n.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;</span>- a<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>col <span class=\"sy0\">&lt;</span>- b.<span class=\"me1\">transpose</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> row zip col map Function.<span class=\"me1\">tupled</span><span class=\"br0\">(</span><span class=\"sy0\">_*_</span><span class=\"br0\">)</span> reduceLeft <span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span>multiply matrix1 matrix2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>apply <span class=\"kw1\">map</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> column<br/>      <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">*</span> row column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     matrix2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   matrix1<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">const type: matrix is array array float;<br/>\u00a0<br/>const func matrix: (in matrix: left) * (in matrix: right) is func<br/>  result<br/>    var matrix: result is matrix.value;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>    var integer: k is 0;<br/>    var float: accumulator is 0.0;<br/>  begin<br/>    if length(left[1]) &lt;&gt; length(right) then<br/>      raise RANGE_ERROR;<br/>    else<br/>      result\u00a0:= length(left) times length(right[1]) times 0.0;<br/>      for i range 1 to length(left) do<br/>        for j range 1 to length(right) do<br/>          accumulator\u00a0:= 0.0;<br/>          for k range 1 to length(left) do<br/>            accumulator +:= left[i][k] * right[k][j];<br/>          end for;<br/>          result[i][j]\u00a0:= accumulator;<br/>        end for;<br/>      end for;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 12, "block": "<pre class=\"text highlighted_source\">matmul(A(2), B(2)) [i,j]\u00a0:= <br/>        let k\u00a0:= 1...size(B); <br/>        in  sum( A[i,k] * B[k,j] );<br/>\u00a0<br/>//Example Use<br/>a\u00a0:= [[1, 2],<br/>      [3, 4]];<br/>\u00a0<br/>b\u00a0:= [[-3, -8, 3], <br/>      [-2,  1, 4]];<br/>\u00a0<br/>test\u00a0:= matmul(a, b);</pre>"}, {"lang": "Sidef", "loc": 27, "block": "<pre class=\"ruby highlighted_source\">func matrix_multi<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var m = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> ^a <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> ^b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> ^b <span class=\"br0\">{</span><br/>                m<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> m<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var a = <span class=\"br0\">[</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><br/>\u00a0<br/>var b = <span class=\"br0\">[</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>,<br/>          <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> matrix_multi<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say line.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><span class=\"st0\">'%3d'</span> <span class=\"sy0\">%</span> i <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPAD", "loc": 26, "block": "<pre class=\"text highlighted_source\">(1) -&gt; A:=matrix [[1,2],[3,4],[5,6],[7,8]]<br/>\u00a0<br/>        +1  2+<br/>        |    |<br/>        |3  4|<br/>   (1)  |    |<br/>        |5  6|<br/>        |    |<br/>        +7  8+<br/>                                                        Type: Matrix(Integer)<br/>(2) -&gt; B:=matrix [[1,2,3],[4,5,6]]<br/>\u00a0<br/>        +1  2  3+<br/>   (2)  |       |<br/>        +4  5  6+<br/>                                                        Type: Matrix(Integer)<br/>(3) -&gt; A*B<br/>\u00a0<br/>        +9   12  15+<br/>        |          |<br/>        |19  26  33|<br/>   (3)  |          |<br/>        |29  40  51|<br/>        |          |<br/>        +39  54  69+<br/>                                                        Type: Matrix(Integer)</pre>"}, {"lang": "SQL", "loc": 20, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> a <span class=\"br0\">(</span>x <span class=\"kw1\">INTEGER</span><span class=\"sy0\">,</span> y <span class=\"kw1\">INTEGER</span><span class=\"sy0\">,</span> e <span class=\"kw1\">REAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> b <span class=\"br0\">(</span>x <span class=\"kw1\">INTEGER</span><span class=\"sy0\">,</span> y <span class=\"kw1\">INTEGER</span><span class=\"sy0\">,</span> e <span class=\"kw1\">REAL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- test data</span><br/><span class=\"co1\">-- A is a 2x2 matrix</span><br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> a <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> a <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> a <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> a <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- B is a 2x3 matrix</span><br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> b <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- C is 2x2 * 2x3 so will be a 2x3 matrix</span><br/><span class=\"kw1\">SELECT</span> rhs<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> lhs<span class=\"sy0\">.</span>y<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>a<span class=\"sy0\">.</span>e<span class=\"sy0\">*</span>b<span class=\"sy0\">.</span>e<span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> a<span class=\"sy0\">,</span> b<br/>                             <span class=\"kw1\">WHERE</span> a<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> lhs<span class=\"sy0\">.</span>y<br/>                               <span class=\"kw1\">AND</span> b<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> rhs<span class=\"sy0\">.</span>x<br/>                               <span class=\"kw1\">AND</span> a<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> b<span class=\"sy0\">.</span>y<span class=\"br0\">)</span><br/>       <span class=\"kw1\">INTO</span> <span class=\"kw1\">TABLE</span> c<br/>       <span class=\"kw1\">FROM</span> a <span class=\"kw1\">AS</span> lhs<span class=\"sy0\">,</span> b <span class=\"kw1\">AS</span> rhs<br/>       <span class=\"kw1\">WHERE</span> lhs<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> rhs<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;</pre>"}, {"lang": "Stata", "loc": 9, "block": "<pre class=\"text highlighted_source\">. mat a=1,2,3\\4,5,6<br/>. mat b=1,1,0,0\\1,0,0,1\\0,0,1,1<br/>. mat c=a*b<br/>. mat list c<br/>\u00a0<br/>c[2,4]<br/>    c1  c2  c3  c4<br/>r1   3   1   3   5<br/>r2   9   4   6  11</pre>"}, {"lang": "Tcl", "loc": 20, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span><br/><span class=\"kw1\">proc</span> matrix_multiply <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$a</span><span class=\"br0\">]</span> a_rows a_cols<br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$b</span><span class=\"br0\">]</span> b_rows b_cols<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$a_cols</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$b_rows</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"incompatible sizes: a($a_rows, $a_cols), b($b_rows, $b_cols)\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> temp <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$a_rows</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$b_cols</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$a_rows</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$b_cols</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$a_cols</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span>+ <span class=\"re0\">$sum</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"re0\">$i</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"re0\">$k</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">lset</span> temp <span class=\"re0\">$i</span> <span class=\"re0\">$j</span> <span class=\"re0\">$sum</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$temp</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">Disp [A]*[B]</pre>"}, {"lang": "TI-89 BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">[1,2; 3,4; 5,6; 7,8] \u2192 m1<br/>[1,2,3; 4,5,6] \u2192 m2<br/>m1 * m2</pre>"}, {"lang": "UNIX Shell", "loc": 185, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"re2\">DELAY</span>=<span class=\"nu0\">0</span> <span class=\"co0\"># increase this if printing of matrices should be slower</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"This script takes two matrices, henceforth called A and B,<br/>and returns their product, AB.<br/>\u00a0<br/>For the time being, matrices can have integer components only.<br/>\u00a0<br/>\"</span><br/>\u00a0<br/><span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Number of rows    of matrix A:  \"</span> arows<br/><span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Number of columns of matrix A:  \"</span> acols<br/><span class=\"re2\">brows</span>=<span class=\"st0\">\"<span class=\"es2\">$acols</span>\"</span><br/><span class=\"kw3\">echo</span><br/><span class=\"kw3\">echo</span>    <span class=\"st0\">\"Number of rows    of matrix B:  \"</span><span class=\"re1\">$brows</span><br/><span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Number of columns of matrix B:  \"</span> bcols<br/>\u00a0<br/><span class=\"re2\">crows</span>=<span class=\"st0\">\"<span class=\"es2\">$arows</span>\"</span><br/><span class=\"re2\">ccols</span>=<span class=\"st0\">\"<span class=\"es2\">$bcols</span>\"</span><br/><span class=\"kw3\">echo</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Number of rows    of matrix AB:  \"</span> <span class=\"re1\">$crows</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Number of columns of matrix AB:  \"</span> <span class=\"re1\">$ccols</span><br/><span class=\"kw3\">echo</span><br/><span class=\"kw3\">echo</span><br/>\u00a0<br/><span class=\"re2\">matrixa</span>=<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/><span class=\"re2\">matrixb</span>=<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\"># input matrix A</span><br/>\u00a0<br/><span class=\"re2\">maxlengtha</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=arows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=acols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"re2\">checkentry</span>=<span class=\"st0\">\"false\"</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$checkentry</span>\"</span> <span class=\"sy0\">!</span>= <span class=\"st0\">\"true\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\t    <span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Enter component A[<span class=\"es2\">$row</span>, <span class=\"es2\">$col</span>]:  \"</span> number<br/>\t    <span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>acols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    matrixa<span class=\"br0\">[</span><span class=\"re1\">$index</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$number</span>\"</span><br/>\t    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${matrixa[$index]}</span>\"</span> <span class=\"re5\">-eq</span> <span class=\"st0\">\"<span class=\"es2\">$number</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">checkentry</span>=<span class=\"st0\">\"true\"</span><br/>\t    <span class=\"kw3\">echo</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"re2\">entry</span>=<span class=\"st0\">\"<span class=\"es3\">${matrixa[$index]}</span>\"</span><br/>\t<span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengtha</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">maxlengtha</span>=<span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"co0\"># print matrix A to guard against errors</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengtha</span>\"</span> <span class=\"re5\">-le</span> <span class=\"st0\">\"5\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>    <span class=\"re2\">width</span>=<span class=\"nu0\">8</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"re2\">width</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span>maxlengtha + <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">fi</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"This is matrix A:<br/>\u00a0<br/>\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=arows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=acols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>acols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%<span class=\"es3\">${width}</span>d\"</span> <span class=\"st0\">\"<span class=\"es3\">${matrixa[$index]}</span>\"</span><br/>\t<span class=\"kw2\">sleep</span> <span class=\"st0\">\"<span class=\"es2\">$DELAY</span>\"</span><br/>\u00a0<br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span>; <span class=\"kw3\">echo</span> <span class=\"co0\"># printf\u00a0%s \"\\n\\n\" does not work...</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw3\">echo</span><br/><span class=\"kw3\">echo</span><br/>\u00a0<br/><span class=\"co0\"># input matrix B</span><br/>\u00a0<br/><span class=\"re2\">maxlengthb</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=brows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=bcols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"re2\">checkentry</span>=<span class=\"st0\">\"false\"</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$checkentry</span>\"</span> <span class=\"sy0\">!</span>= <span class=\"st0\">\"true\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\t    <span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Enter component B[<span class=\"es2\">$row</span>, <span class=\"es2\">$col</span>]:  \"</span> number<br/>\t    <span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>bcols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    matrixb<span class=\"br0\">[</span><span class=\"re1\">$index</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$number</span>\"</span><br/>\t    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${matrixb[$index]}</span>\"</span> <span class=\"re5\">-eq</span> <span class=\"st0\">\"<span class=\"es2\">$number</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">checkentry</span>=<span class=\"st0\">\"true\"</span><br/>\t    <span class=\"kw3\">echo</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"re2\">entry</span>=<span class=\"st0\">\"<span class=\"es3\">${matrixb[$index]}</span>\"</span><br/>\t<span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengthb</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">maxlengthb</span>=<span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"co0\"># print matrix B to guard against errors</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengthb</span>\"</span> <span class=\"re5\">-le</span> <span class=\"st0\">\"5\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>    <span class=\"re2\">width</span>=<span class=\"nu0\">8</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"re2\">width</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span>maxlengthb + <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">fi</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"This is matrix B:<br/>\u00a0<br/>\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=brows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=bcols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>bcols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%<span class=\"es3\">${width}</span>d\"</span> <span class=\"st0\">\"<span class=\"es3\">${matrixb[$index]}</span>\"</span><br/>\t<span class=\"kw2\">sleep</span> <span class=\"st0\">\"<span class=\"es2\">$DELAY</span>\"</span><br/>\u00a0<br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span>; <span class=\"kw3\">echo</span> <span class=\"co0\"># printf\u00a0%s \"\\n\\n\" does not work...</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Hit enter to continue\"</span><br/>\u00a0<br/><span class=\"co0\"># calculate matrix C\u00a0:= AB</span><br/>\u00a0<br/><span class=\"re2\">maxlengthc</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">time</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=crows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=ccols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"co0\"># calculate component C[$row, $col]</span><br/>\u00a0<br/>\t<span class=\"re2\">runningtotal</span>=<span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">j</span>=<span class=\"nu0\">1</span>; j<span class=\"sy0\">&lt;</span>=acols; j++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t    <span class=\"re2\">rowa</span>=<span class=\"st0\">\"<span class=\"es2\">$row</span>\"</span><br/>\t    <span class=\"re2\">cola</span>=<span class=\"st0\">\"<span class=\"es2\">$j</span>\"</span><br/>\t    <span class=\"re2\">indexa</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rowa-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>acols+cola<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"re2\">rowb</span>=<span class=\"st0\">\"<span class=\"es2\">$j</span>\"</span><br/>\t    <span class=\"re2\">colb</span>=<span class=\"st0\">\"<span class=\"es2\">$col</span>\"</span><br/>\t    <span class=\"re2\">indexb</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rowb-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>bcols+colb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t    <span class=\"re2\">entry_from_A</span>=<span class=\"co1\">${matrixa[$indexa]}</span><br/>\t    <span class=\"re2\">entry_from_B</span>=<span class=\"co1\">${matrixb[$indexb]}</span><br/>\u00a0<br/>\t    <span class=\"re2\">subtotal</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span>entry_from_A <span class=\"sy0\">*</span> entry_from_B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"br0\">(</span>runningtotal+=subtotal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"re2\">number</span>=<span class=\"st0\">\"<span class=\"es2\">$runningtotal</span>\"</span><br/>\u00a0<br/>\t<span class=\"co0\"># store component in the result array</span><br/>\t<span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>ccols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tmatrixc<span class=\"br0\">[</span><span class=\"re1\">$index</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$number</span>\"</span><br/>\u00a0<br/>\t<span class=\"re2\">entry</span>=<span class=\"st0\">\"<span class=\"es3\">${matrixc[$index]}</span>\"</span><br/>\t<span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengthc</span>\"</span> <span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">maxlengthc</span>=<span class=\"st0\">\"<span class=\"es3\">${#entry}</span>\"</span><br/>    <span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw3\">echo</span><br/><span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"Hit enter to continue\"</span><br/><span class=\"kw3\">echo</span><br/>\u00a0<br/><span class=\"co0\"># print the matrix C</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$maxlengthc</span>\"</span> <span class=\"re5\">-le</span> <span class=\"st0\">\"5\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>    <span class=\"re2\">width</span>=<span class=\"nu0\">8</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"re2\">width</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span>maxlengthc + <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">fi</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"The product matrix is:<br/>\u00a0<br/>\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">row</span>=<span class=\"nu0\">1</span>; row<span class=\"sy0\">&lt;</span>=crows; row++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">col</span>=<span class=\"nu0\">1</span>; <span class=\"kw2\">col</span><span class=\"sy0\">&lt;</span>=ccols; <span class=\"kw2\">col</span>++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"re2\">index</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>ccols+<span class=\"kw2\">col</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%<span class=\"es3\">${width}</span>d\"</span> <span class=\"st0\">\"<span class=\"es3\">${matrixc[$index]}</span>\"</span><br/>\t<span class=\"kw2\">sleep</span> <span class=\"st0\">\"<span class=\"es2\">$DELAY</span>\"</span><br/>\u00a0<br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span>; <span class=\"kw3\">echo</span> <span class=\"co0\"># printf\u00a0%s \"\\n\\n\" does not work...</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw3\">echo</span><br/><span class=\"kw3\">echo</span><br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 23, "block": "<pre class=\"text highlighted_source\">#import rat<br/>\u00a0<br/>a =<br/>\u00a0<br/>&lt;<br/>   &lt;1/1,  1/1,  1/1,   1/1&gt;,<br/>   &lt;2/1,  4/1,  8/1,  16/1&gt;,<br/>   &lt;3/1,  9/1, 27/1,  81/1&gt;,<br/>   &lt;4/1, 16/1, 64/1, 256/1&gt;&gt;<br/>\u00a0<br/>b =<br/>\u00a0<br/>&lt;<br/>   &lt;  4/1, -3/1,  4/3,  -1/4&gt;,<br/>   &lt;-13/3, 19/4, -7/3,  11/24&gt;,<br/>   &lt;  3/2, -2/1,  7/6,  -1/4&gt;,<br/>   &lt; -1/6,  1/4, -1/6,   1/24&gt;&gt;<br/>\u00a0<br/>mmult = *rK7lD *rlD sum:-0.+ product*p<br/>\u00a0<br/>#cast\u00a0%qLL<br/>\u00a0<br/>test = mmult(a,b)</pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Dim</span> matrix1(2,2)<br/>matrix1(0,0) = 3\u00a0: matrix1(0,1) = 7\u00a0: matrix1(0,2) = 4<br/>matrix1(1,0) = 5\u00a0: matrix1(1,1) = -2\u00a0: matrix1(1,2) = 9<br/>matrix1(2,0) = 8\u00a0: matrix1(2,1) = -6\u00a0: matrix1(2,2) = -5<br/><span class=\"kw4\">Dim</span> matrix2(2,2)<br/>matrix2(0,0) = 9\u00a0: matrix2(0,1) = 2\u00a0: matrix2(0,2) = 1<br/>matrix2(1,0) = -7\u00a0: matrix2(1,1) = 3\u00a0: matrix2(1,2) = -10<br/>matrix2(2,0) = 4\u00a0: matrix2(2,1) = 5\u00a0: matrix2(2,2) = -6<br/>\u00a0<br/><span class=\"kw2\">Call</span> multiply_matrix(matrix1,matrix2)<br/>\u00a0<br/><span class=\"kw2\">Sub</span> multiply_matrix(arr1,arr2)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr1)<br/>\t\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> 2<br/>\t\t\tWScript.StdOut.Write (arr1(i,j) * arr2(i,j)) &amp; vbTab <br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL ARRAY a[4,2], b[2,3], c[4,3]<br/>CLOSE DATABASES ALL<br/>*!* The arrays could be created directly but I prefer to do this:<br/>CREATE CURSOR mat1 (c1 I, c2 I)<br/>CREATE CURSOR mat2 (c1 I, c2 I, c3 I)<br/>*!* Since matrix multiplication of integer arrays <br/>*!* involves only multiplication and addition, <br/>*!* the result will contain integers<br/>CREATE CURSOR result (c1 I, c2 I, c3 I)<br/>INSERT INTO mat1 VALUES (1, 2)<br/>INSERT INTO mat1 VALUES (3, 4)<br/>INSERT INTO mat1 VALUES (5, 6)<br/>INSERT INTO mat1 VALUES (7, 8)<br/>SELECT * FROM mat1 INTO ARRAY a<br/>\u00a0<br/>INSERT INTO mat2 VALUES (1, 2, 3)<br/>INSERT INTO mat2 VALUES (4, 5, 6)<br/>SELECT * FROM mat2 INTO ARRAY b<br/>STORE 0 TO c<br/>MatMult(@a,@b,@c)<br/>SELECT result<br/>APPEND FROM ARRAY c<br/>BROWSE <br/>\u00a0<br/>\u00a0<br/>PROCEDURE MatMult(aa, bb, cc)<br/>LOCAL n As Integer, m As Integer, p As Integer, i As Integer, j As Integer, k As Integer<br/>IF ALEN(aa,2) = ALEN(bb,1) <br/>\tn = ALEN(aa,2)<br/>\tm = ALEN(aa,1)<br/>\tp = ALEN(bb,2)<br/>\tFOR i = 1 TO m<br/>\t\tFOR j = 1 TO p <br/>\t\t\tFOR k = 1 TO n<br/>\t\t\t\tcc[i,j] = cc[i,j] + aa[i,k]*bb[k,j]<br/>\t\t\tENDFOR<br/>\t\tENDFOR<br/>\tENDFOR\t\t<br/>ELSE<br/>\t? \"Invalid dimensions\"<br/>ENDIF<br/>ENDPROC<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 27, "block": "<pre class=\"text highlighted_source\">proc Mat4x1Mul(M, V);   \\Multiply matrix M times column vector V<br/>real M,     \\4x4 matrix  [M] * [V] -&gt; [V]<br/>     V;     \\column vector<br/>real W(4);  \\working copy of column vector<br/>int  R;     \\row<br/>[for R:= 0 to 4-1 do<br/>    W(R):= M(R,0)*V(0) + M(R,1)*V(1) + M(R,2)*V(2) + M(R,3)*V(3);<br/>for R:= 0 to 4-1 do V(R):= W(R);<br/>];<br/>\u00a0<br/>proc Mat4x4Mul(M, N);   \\Multiply matrix M times matrix N<br/>real M, N;   \\4x4 matrices       [M] * [N] -&gt; [N]<br/>real W(4,4); \\working copy of matrix N<br/>int  C;      \\column<br/>[for C:= 0 to 4-1 do<br/>       [W(0,C):= M(0,0)*N(0,C) + M(0,1)*N(1,C) + M(0,2)*N(2,C) + M(0,3)*N(3,C);<br/>        W(1,C):= M(1,0)*N(0,C) + M(1,1)*N(1,C) + M(1,2)*N(2,C) + M(1,3)*N(3,C);<br/>        W(2,C):= M(2,0)*N(0,C) + M(2,1)*N(1,C) + M(2,2)*N(2,C) + M(2,3)*N(3,C);<br/>        W(3,C):= M(3,0)*N(0,C) + M(3,1)*N(1,C) + M(3,2)*N(2,C) + M(3,3)*N(3,C);<br/>        ];<br/>for C:= 0 to 4-1 do<br/>       [N(0,C):= W(0,C);<br/>        N(1,C):= W(1,C);<br/>        N(2,C):= W(2,C);<br/>        N(3,C):= W(3,C);<br/>        ];<br/>];</pre>"}, {"lang": "XSLT 1.0", "loc": 13, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;?xml-stylesheet</span> <span class=\"re0\">href</span>=<span class=\"st0\">\"matmul.templ.xsl\"</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"text/xsl\"</span><span class=\"re2\">?&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;mult<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;A<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>1<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>2<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>3<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>4<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>5<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>6<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>7<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>8<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/A<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;B<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>1<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>2<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>3<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;r<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>4<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>5<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;c<span class=\"re2\">&gt;</span></span></span>6<span class=\"sc3\"><span class=\"re1\">&lt;/c<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/r<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/B<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/mult<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>A:=GSL.Matrix(4,2).set(1,2, 3,4, 5,6, 7,8);<br/>B:=GSL.Matrix(2,3).set(1,2,3, 4,5,6);<br/>(A*B).format().println();   // creates a new matrix</pre>"}, {"lang": "zonnon", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module MatrixOps;<br/>type<br/>\tMatrix = array {math} *,* of integer;<br/>\u00a0<br/>\u00a0<br/>\tprocedure WriteMatrix(x: array {math} *,* of integer);<br/>\tvar<br/>\t\ti,j: integer;<br/>\tbegin<br/>\t\tfor i\u00a0:= 0 to len(x,0) - 1 do<br/>\t\t\tfor j\u00a0:= 0 to len(x,1) - 1 do<br/>\t\t\t\twrite(x[i,j]);<br/>\t\t\tend;<br/>\t\t\twriteln;<br/>\t\tend\t<br/>\tend WriteMatrix;<br/>\u00a0<br/>\tprocedure Multiplication;<br/>\tvar<br/>\t\ta,b: Matrix;<br/>\tbegin<br/>\t\ta\u00a0:= [[1,2],[3,4],[5,6],[7,8]];<br/>\t\tb\u00a0:= [[1,2,3],[4,5,6]];<br/>\t\tWriteMatrix(a * b);<br/>\tend Multiplication;<br/>\u00a0<br/>begin<br/>\tMultiplication;<br/>end MatrixOps.<br/>\u00a0</pre>"}, {"lang": "ZPL", "loc": 143, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>program matmultSUMMA;<br/>\u00a0<br/>prototype GetSingleDim(infile:file):integer;<br/>prototype GetInnerDim(infile1:file; infile2:file):integer;<br/>\u00a0<br/>config var <br/>          Afilename: string = \"\";<br/>          Bfilename: string = \"\";<br/>\u00a0<br/>          Afile: file = open(Afilename,file_read);<br/>          Bfile: file = open(Bfilename,file_read);<br/>\u00a0<br/>          default_size:integer = 4;<br/>          m:integer = GetSingleDim(Afile);<br/>          n:integer = GetInnerDim(Afile,Bfile);<br/>          p:integer = GetSingleDim(Bfile);<br/>\u00a0<br/>          iters: integer = 1;<br/>\u00a0<br/>          printinput: boolean = false;<br/>          verbose: boolean = true;<br/>          dotiming: boolean = false;<br/>\u00a0<br/>region    <br/>       RA = [1..m,1..n];<br/>       RB = [1..n,1..p];<br/>       RC = [1..m,1..p];<br/>       FCol = [1..m,*];<br/>       FRow = [*,1..p];<br/>\u00a0<br/>var<br/>    A\u00a0: [RA] double;<br/>    B\u00a0: [RB] double;<br/>    C\u00a0: [RC] double;<br/>    Aflood\u00a0: [FCol] double;<br/>    Bflood\u00a0: [FRow] double;<br/>\u00a0<br/>\u00a0<br/>procedure ReadA();<br/>var step:double;<br/>[RA] begin<br/>       if (Afile\u00a0!= znull) then<br/>         read(Afile,A);<br/>       else<br/>         step\u00a0:= 1.0/(m*n);<br/>         A\u00a0:= ((Index1-1)*n + Index2)*step + 1.0;<br/>       end;<br/>     end;<br/>\u00a0<br/>\u00a0<br/>procedure ReadB();<br/>var step:double;<br/>[RB] begin<br/>       if (Bfile\u00a0!= znull) then<br/>         read(Bfile,B);<br/>       else<br/>         step\u00a0:= 1.0/(n*p);<br/>         B\u00a0:= ((Index1-1)*p + Index2)*step + 1.0;<br/>       end;<br/>     end;<br/>\u00a0<br/>\u00a0<br/>procedure matmultSUMMA();<br/>var<br/>    i: integer;<br/>    it: integer;<br/>    runtime: double;<br/>[RC] begin<br/>       ReadA();<br/>       ReadB();<br/>\u00a0<br/>       if (printinput) then<br/>         [RA] writeln(\"A is:\\n\",A);<br/>         [RB] writeln(\"B is:\\n\",B);<br/>       end;<br/>\u00a0<br/>       ResetTimer();<br/>\u00a0<br/>       for it\u00a0:= 1 to iters do<br/>\u00a0<br/>         C\u00a0:= 0.0;                       -- zero C<br/>\u00a0<br/>         for i\u00a0:= 1 to n do<br/>           [FCol] Aflood\u00a0:= &gt;&gt;[,i] A;       -- flood A col<br/>           [FRow] Bflood\u00a0:= &gt;&gt;[i,] B;       -- flood B row<br/>\u00a0<br/>           C += (Aflood * Bflood);   -- multiply<br/>         end;<br/>       end;<br/>\u00a0<br/>       runtime\u00a0:= CheckTimer();<br/>\u00a0<br/>       if (verbose) then<br/>         writeln(\"C is:\\n\",C);<br/>       end;<br/>\u00a0<br/>       if (dotiming) then<br/>         writeln(\"total runtime  =\u00a0%12.6f\":runtime);<br/>         writeln(\"actual runtime =\u00a0%12.6f\":runtime/iters);<br/>       end;<br/>     end;<br/>\u00a0<br/>\u00a0<br/>procedure GetSingleDim(infile:file):integer;<br/>var dim:integer;<br/>begin<br/>  if (infile\u00a0!= znull) then<br/>    read(infile,dim);<br/>  else<br/>    dim\u00a0:= default_size;<br/>  end;<br/>  return dim;<br/>end;<br/>\u00a0<br/>\u00a0<br/>procedure GetInnerDim(infile1:file; infile2:file):integer;<br/>var<br/>   col:integer;<br/>   row:integer;<br/>   retval:integer;<br/>begin<br/>  retval\u00a0:= -1;<br/>  if (infile1\u00a0!= znull) then<br/>    read(infile1,col);<br/>    retval\u00a0:= col;<br/>  end;<br/>  if (infile2\u00a0!= znull) then<br/>    read(infile2,row);<br/>    if (retval = -1) then<br/>      retval\u00a0:= row;<br/>    else<br/>      if (row\u00a0!= col) then<br/>        halt(\"ERROR: Inner dimensions don't match\");<br/>      end;<br/>    end;<br/>  end;<br/>  if (retval = -1) then<br/>    retval\u00a0:= default_size;<br/>  end;<br/>  return retval;<br/>end;<br/>\u00a0</pre>"}]}