{"task": "Jaro_distance", "blocks": [{"lang": "AWK", "loc": 54, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f JARO_DISTANCE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"DWAYNE\"</span>,<span class=\"st0\">\"DUANE\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span>,<span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span>,<span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>,<span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>str1,str2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%9.7f '%s' '%s'<span class=\"es0\">\\n</span>\"</span>,jaro<span class=\"br0\">(</span>str1,str2<span class=\"br0\">)</span>,str1,str2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> jaro<span class=\"br0\">(</span>str1,str2,  <span class=\"kw2\">begin</span>,<span class=\"kw2\">end</span>,i,j,k,leng1,leng2,match_distance,matches,str1_arr,str2_arr,transpositions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    leng1 = <span class=\"kw4\">length</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span><br/>    leng2 = <span class=\"kw4\">length</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>leng1 <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;&amp;</span> leng2 <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># both strings are empty</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>leng1 <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">||</span> leng2 <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># only one string is empty</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    match_distance = <span class=\"kw4\">int</span><span class=\"br0\">(</span>max<span class=\"br0\">(</span>leng1,leng2<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>leng1; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># find matches</span><br/>      <span class=\"kw2\">begin</span> = <span class=\"kw4\">int</span><span class=\"br0\">(</span>max<span class=\"br0\">(</span><span class=\"nu0\">0</span>,i<span class=\"sy3\">-</span>match_distance<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">end</span> = <span class=\"kw4\">int</span><span class=\"br0\">(</span>min<span class=\"br0\">(</span>i<span class=\"sy3\">+</span>match_distance<span class=\"sy3\">+</span><span class=\"nu0\">1</span>,leng2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"kw2\">begin</span>; j<span class=\"sy2\">&lt;=</span><span class=\"kw2\">end</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str2_arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">continue</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>str1,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str2,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">continue</span> <span class=\"br0\">}</span><br/>        str1_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>        str2_arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>        matches<span class=\"sy3\">++</span><br/>        <span class=\"kw1\">break</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    k = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>leng1; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># count transpositions</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>str1_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">continue</span> <span class=\"br0\">}</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>str2_arr<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        k<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>str1,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str2,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        transpositions<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>      k<span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span><br/>    transpositions <span class=\"sy3\">/</span>= <span class=\"nu0\">2</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matches<span class=\"sy3\">/</span>leng1<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span>matches<span class=\"sy3\">/</span>leng2<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matches<span class=\"sy3\">-</span>transpositions<span class=\"br0\">)</span><span class=\"sy3\">/</span>matches<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> max<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy2\">&gt;</span> y<span class=\"br0\">)</span> <span class=\"sy5\">?</span> x <span class=\"sy5\">:</span> y<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> min<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy2\">&lt;</span> y<span class=\"br0\">)</span> <span class=\"sy5\">?</span> x <span class=\"sy5\">:</span> y<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 90, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define TRUE    1</span><br/><span class=\"co2\">#define FALSE   0</span><br/>\u00a0<br/><span class=\"co2\">#define max(a, b) ((a) &gt; (b)\u00a0? (a)\u00a0: (b))</span><br/><span class=\"co2\">#define min(a, b) ((a) &lt; (b)\u00a0? (a)\u00a0: (b))</span><br/>\u00a0<br/><span class=\"kw4\">double</span> jaro<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// length of the strings</span><br/>    <span class=\"kw4\">int</span> str1_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> str2_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// if both strings are empty return 1</span><br/>    <span class=\"co1\">// if only one of the strings is empty return 0</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str1_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> str2_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">:</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// max distance between two chars to be considered matching</span><br/>    <span class=\"co1\">// floor() is ommitted due to integer division rules</span><br/>    <span class=\"kw4\">int</span> match_distance <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> max<span class=\"br0\">(</span>str1_len<span class=\"sy0\">,</span> str2_len<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// arrays of bools that signify if that char in the matching string has a match</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>str1_matches <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>str1_len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>str2_matches <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>str2_len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// number of matches and transpositions</span><br/>    <span class=\"kw4\">double</span> matches <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> transpositions <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// find the matches</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> str1_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// start and end take into account the match distance</span><br/>        <span class=\"kw4\">int</span> start <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> match_distance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> match_distance <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> str2_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// if str2 already has a match continue</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// if str1 and str2 are not</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> str2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// otherwise assume there is a match</span><br/>            str1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>            str2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>            matches<span class=\"sy0\">++;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// if there are no matches return 0</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>str1_matches<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>str2_matches<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// count transpositions</span><br/>    <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> str1_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// if there are no matches in str1 continue</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>str1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// while there is no match in str2 increment k</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>str2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> k<span class=\"sy0\">++;</span><br/>        <span class=\"co1\">// increment transpositions</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> str2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> transpositions<span class=\"sy0\">++;</span><br/>        k<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// divide the number of transpositions by two as per the algorithm specs</span><br/>    <span class=\"co1\">// this division is valid because the counted transpositions include both</span><br/>    <span class=\"co1\">// instances of the transposed characters.</span><br/>    transpositions <span class=\"sy0\">/=</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// free the allocated memory</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>str1_matches<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>str2_matches<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// return the Jaro distance</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> str1_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>        <span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> str2_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">-</span> transpositions<span class=\"br0\">)</span> <span class=\"sy0\">/</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu16\">3.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 49, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> jaro<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s1, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> uint l1 <span class=\"sy1\">=</span> s1.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, l2 <span class=\"sy1\">=</span> s2.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l1 <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> l2 <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> <span class=\"nu16\">1.0</span> <span class=\"sy4\">:</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> uint match_distance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> s1_matches<span class=\"br0\">[</span>l1<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> s2_matches<span class=\"br0\">[</span>l2<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">fill</span><span class=\"br0\">(</span>s1_matches, s1_matches <span class=\"sy2\">+</span> l1, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">fill</span><span class=\"br0\">(</span>s2_matches, s2_matches <span class=\"sy2\">+</span> l2, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    uint matches <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> l1<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> end <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">min</span><span class=\"br0\">(</span>i <span class=\"sy2\">+</span> match_distance <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, l2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span>0u, i <span class=\"sy2\">-</span> match_distance<span class=\"br0\">)</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> end<span class=\"sy4\">;</span> k<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>                s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>                matches<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> t <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>    uint k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> l1<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> k<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> t <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu16\">0.5</span><span class=\"sy4\">;</span><br/>            k<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> m <span class=\"sy1\">=</span> matches<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>m <span class=\"sy2\">/</span> l1 <span class=\"sy2\">+</span> m <span class=\"sy2\">/</span> l2 <span class=\"sy2\">+</span> <span class=\"br0\">(</span>m <span class=\"sy2\">-</span> t<span class=\"br0\">)</span> <span class=\"sy2\">/</span> m<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu16\">3.0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span>, <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span>, <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>, <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 83, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> test<span class=\"sy0\">-</span>project<span class=\"sy0\">-</span>intellij<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> find<span class=\"sy0\">-</span>matches <span class=\"br0\">[</span>s t<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" find match locations in the two strings \"</span><br/>  <span class=\"st0\">\" s_matches is set to true wherever there is a match in t and t_matches is set conversely \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s_len <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span><br/>        t_len <span class=\"br0\">(</span><span class=\"kw1\">count</span> t<span class=\"br0\">)</span><br/>        match_distance <span class=\"br0\">(</span>int <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>max s_len t_len<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        matches <span class=\"nu0\">0</span><br/>        transpositions <span class=\"nu0\">0</span><br/>        fn<span class=\"sy0\">-</span>start <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">(</span>max <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> i match_distance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>              <span class=\"co1\">; function to compute starting position</span><br/>        fn<span class=\"sy0\">-</span>end <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">(</span>min <span class=\"br0\">(</span><span class=\"sy0\">+</span> i match_distance <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> t_len <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>  <span class=\"co1\">; function to compute end position</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>i <span class=\"nu0\">0</span><br/>           start <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>start i<span class=\"br0\">)</span><br/>           end <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>end i<span class=\"br0\">)</span><br/>           k start<br/>           s_matches <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span> false<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           t_matches <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> t<span class=\"br0\">)</span> false<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           matches <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i s_len<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> k end<span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>get t_matches k<span class=\"br0\">)</span><br/>            <span class=\"co1\">; continue with next k</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> i start end <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> s_matches t_matches matches<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>get s i<span class=\"br0\">)</span> <span class=\"br0\">(</span>get t k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"co1\">; match a position, so update matches, s_matches, t_matches to reflect match</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>start <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>end <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>start <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> s_matches i true<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> t_matches k true<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"co1\">; no match so try next k</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> i start end <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> s_matches t_matches matches<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"co1\">; End of k iterations, so increment i and set k to start based upon i</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>start <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>end <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">-</span>start <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> s_matches t_matches matches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">; End of i iterations</span><br/>        <span class=\"br0\">[</span>matches s_matches t_matches<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> count<span class=\"sy0\">-</span>transpositions <span class=\"br0\">[</span>s t s_matches t_matches<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Utility function to count the number of transpositions \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s_len <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>i <span class=\"nu0\">0</span><br/>           k <span class=\"nu0\">0</span><br/>           transpositions <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i s_len<span class=\"br0\">)</span><br/>        <span class=\"co1\">; still elements in s (since i &lt; s_len)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>get s_matches i nil<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"co1\">; skip to next i since there are no matches in s</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> k transpositions<span class=\"br0\">)</span><br/>          <span class=\"co1\">; checking for match in t</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>get t_matches k nil<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"co1\">; keeping looping around as long as there are no matches in t</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> i <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> transpositions<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>get s i<span class=\"br0\">)</span> <span class=\"br0\">(</span>get t k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"co1\">; increment transposition count (if strings don't equal at match location)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> transpositions<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"co1\">; was a match, so advance i and k without increasing transpositions count</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> transpositions<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">; Return count</span><br/>        transpositions<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> jaro <span class=\"br0\">[</span>s t<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Main Jaro Distance routine\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> s t<span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>matches s_matches t_matches<span class=\"br0\">]</span>  <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>matches s t<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> matches<span class=\"br0\">)</span><br/>        <span class=\"nu0\">0</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s_len <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span><br/>              t_len <span class=\"br0\">(</span><span class=\"kw1\">count</span> t<span class=\"br0\">)</span><br/>              transpositions <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>transpositions s t s_matches t_matches<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span>float <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> matches s_len<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> matches t_len<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> matches <span class=\"br0\">(</span><span class=\"sy0\">/</span> transpositions <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>jaro <span class=\"st0\">\"MARTHA\"</span> <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>jaro <span class=\"st0\">\"DIXON\"</span> <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>jaro <span class=\"st0\">\"JELLYFISH\"</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 30, "block": "<pre class=\"coffeescript highlighted_source\">jaro = <span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    l1 = s1.<span class=\"me1\">length</span><br/>    l2 = s2.<span class=\"me1\">length</span><br/>    <span class=\"kw1\">if</span> l1 == <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> l2 == <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0.0</span><br/>    match_distance = Math.<span class=\"me1\">max</span><span class=\"br0\">(</span>l1<span class=\"sy0\">,</span> l2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    s1_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    s2_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    m = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">l1</span><span class=\"br0\">]</span><br/>        end = Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> match_distance <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> l2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Math.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> match_distance<span class=\"br0\">)</span>...<span class=\"me1\">end</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw2\">and</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>                s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>                s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>                m<span class=\"sy0\">++</span><br/>                <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> m == <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">else</span><br/>        t = <span class=\"nu0\">0.0</span><br/>        k = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">l1</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>                <span class=\"kw1\">until</span> s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">then</span> k<span class=\"sy0\">++</span><br/>                <span class=\"kw1\">if</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= s2<span class=\"br0\">[</span>k<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> t <span class=\"sy0\">+</span>= <span class=\"nu0\">0.5</span><br/>        <span class=\"br0\">(</span>m <span class=\"sy0\">/</span> l1 <span class=\"sy0\">+</span> m <span class=\"sy0\">/</span> l2 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>m <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> <span class=\"sy0\">/</span> m<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3.0</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> jaro <span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"MARHTA\"</span><br/>console.<span class=\"me1\">log</span> jaro <span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DICKSONX\"</span><br/>console.<span class=\"me1\">log</span> jaro <span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span></pre>"}, {"lang": "D", "loc": 40, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">auto</span> jaro<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> s1_len <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> s1.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> s2_len <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> s2.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s2_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span>.<span class=\"me1\">comparison</span><span class=\"sy0\">:</span> min<span class=\"sy0\">,</span> max<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> match_distance <span class=\"sy0\">=</span> max<span class=\"br0\">(</span>s1_len<span class=\"sy0\">,</span> s2_len<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> s1_matches <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>s1_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> s2_matches <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>s2_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> matches <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s1_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> start <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> match_distance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> end <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> match_distance <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> s2_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s2_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> s2<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                s2_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                matches<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s1_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s2_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> k<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> s2<span class=\"br0\">[</span>k<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span> t <span class=\"sy0\">+=</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw4\">double</span> m <span class=\"sy0\">=</span> matches<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>m <span class=\"sy0\">/</span> s1_len <span class=\"sy0\">+</span> m <span class=\"sy0\">/</span> s2_len <span class=\"sy0\">+</span> <span class=\"br0\">(</span>m <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> <span class=\"sy0\">/</span> m<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu16\">3.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">:</span> writeln<span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>jaro<span class=\"br0\">(</span>   <span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>jaro<span class=\"br0\">(</span>    <span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 58, "block": "<pre class=\"text highlighted_source\">defmodule Jaro do<br/>  def distance(s, t) when is_binary(s) and is_binary(t), do:<br/>    distance(to_charlist(s), to_charlist(t))<br/>  def distance(x, x), do: 1.0<br/>  def distance(s, t) do<br/>    s_len = length(s)<br/>    t_len = length(t)<br/>    {s_matches, t_matches, matches} = matching(s, t, s_len, t_len)<br/>    if matches == 0 do<br/>      0.0<br/>    else<br/>      {k, transpositions} = transposition(s, t, s_matches, t_matches)<br/>      ((matches / s_len) +<br/>       (matches / t_len) +<br/>       ((matches - transpositions/2) / matches)) / 3<br/>    end<br/>  end<br/>\u00a0<br/>  defp matching(s, t, s_len, t_len) do<br/>    match_distance = div(max(s_len, t_len), 2) - 1<br/>    ac0 = {List.duplicate(false, s_len), List.duplicate(false, t_len), 0}<br/>    Enum.reduce(0..s_len-1, ac0, fn i,acc -&gt;<br/>      j_start = max(0, i-match_distance)<br/>      j_end = min(i+match_distance, t_len-1)<br/>      Enum.reduce_while(j_start..j_end, acc, fn j,{sm,tm,m} -&gt;<br/>        if Enum.at(tm, j) or Enum.at(s, i)\u00a0!= Enum.at(t, j) do<br/>          {:cont, {sm, tm, m}}<br/>        else<br/>          {:halt, { List.replace_at(sm, i, true),<br/>                    List.replace_at(tm, j, true),<br/>                    m + 1 }}<br/>        end<br/>      end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp transposition(s, t, s_matches, t_matches) do<br/>    Enum.reduce(0..length(s)-1, {0,0}, fn i,{k,transpositions} -&gt;<br/>      if Enum.at(s_matches, i) do<br/>        k = k + (Enum.drop(t_matches, k)<br/>                 |&gt; Enum.take_while(fn matche -&gt; not matche end)<br/>                 |&gt; length)<br/>        if Enum.at(s, i) == Enum.at(t, k), do: {k+1, transpositions},<br/>                                         else: {k+1, transpositions+1}<br/>      else<br/>        {k, transpositions}<br/>      end<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>~w( MARTHA    MARHTA<br/>    DIXON     DICKSONX<br/>    JELLYFISH SMELLYFISH )c<br/>|&gt; Enum.chunk(2)<br/>|&gt; Enum.each(fn [s,t] -&gt;<br/>    \u00a0:io.format \"jaro(~s, ~s) = ~.10f~n\", [inspect(s), inspect(t), Jaro.distance(s, t)]<br/>   end)</pre>"}, {"lang": "FreeBASIC", "loc": 57, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 09-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Macro max(x, y)</span><br/>  <span class=\"kw1\">IIf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> &gt; <span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co2\">#EndMacro</span><br/>\u00a0<br/><span class=\"co2\">#Macro min(x, y)</span><br/>  <span class=\"kw1\">IIf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> &lt; <span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co2\">#EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> jaro<span class=\"br0\">(</span>word1 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, word2 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word1<span class=\"br0\">)</span> &gt; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> word1, word2<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j, j1, m, t<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> s1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> s2 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> max_dist = s2 \\ <span class=\"nu0\">2</span> -<span class=\"nu0\">1</span>  <span class=\"co1\">' integer division</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> s1 -<span class=\"nu0\">1</span> <br/>    <span class=\"kw1\">If</span> word1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = word2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">Then</span><br/>      m = m +<span class=\"nu0\">1</span><br/>      word2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"nu0\">32</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">For</span> j1 = max<span class=\"br0\">(</span><span class=\"nu0\">0</span>, i - max_dist<span class=\"br0\">)</span> <span class=\"kw1\">To</span> min<span class=\"br0\">(</span>s2 -<span class=\"nu0\">1</span>, i + max_dist<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> word1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = word2<span class=\"br0\">[</span>j1<span class=\"br0\">]</span> <span class=\"kw1\">Then</span><br/>          t = t +<span class=\"nu0\">1</span><br/>          m = m +<span class=\"nu0\">1</span><br/>          word2<span class=\"br0\">[</span>j1<span class=\"br0\">]</span> = <span class=\"nu0\">32</span><br/>         <span class=\"kw1\">If</span> j1 &gt; j <span class=\"kw1\">Then</span> j = j1<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    j = j + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> m = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  t = t \\ <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Return</span> <span class=\"br0\">(</span>m / s1 + m / s2 + <span class=\"br0\">(</span><span class=\"br0\">(</span>m - t<span class=\"br0\">)</span> / m<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" jaro (MARTHA,    MARHTA)     =\"</span>; jaro<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span>, <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" jaro (DIXON,     DICKSONX)   =\"</span>; jaro<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span>, <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" jaro (JELLYFISH, SMELLYFISH) =\"</span>; jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>, <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 69, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> jaro<span class=\"sy1\">(</span>str1<span class=\"sy1\">,</span> str2 <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str1<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str1<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    match_distance <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str1<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span> &gt; match_distance <span class=\"sy1\">{</span><br/>        match_distance <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    match_distance <span class=\"sy2\">=</span> match_distance<span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    str1_matches <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str1<span class=\"sy1\">))</span><br/>    str2_matches <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">))</span><br/>    matches <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>    transpositions <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> str1 <span class=\"sy1\">{</span><br/>        start <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">-</span> match_distance<br/>        <span class=\"kw1\">if</span> start &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            start <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span><br/>        end <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> match_distance <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> end &gt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            end <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> start<span class=\"sy1\">;</span> k &lt; end<span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> str2_matches<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> str1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> str2<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            str1_matches<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            str2_matches<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            matches<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> matches <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    k <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> str1 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>str1_matches<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy3\">!</span>str2_matches<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            k<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> str1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> str2<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            transpositions<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        k<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    transpositions <span class=\"sy2\">/=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy1\">(</span>matches<span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>str1<span class=\"sy1\">))</span> <span class=\"sy3\">+</span><br/>        matches<span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>str2<span class=\"sy1\">))</span> <span class=\"sy3\">+</span><br/>        <span class=\"sy1\">(</span>matches<span class=\"sy3\">-</span>transpositions<span class=\"sy1\">)</span><span class=\"sy3\">/</span>matches<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> jaro<span class=\"sy1\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"MARHTA\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> jaro<span class=\"sy1\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DICKSONX\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> jaro<span class=\"sy1\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 46, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"sy0\">,</span> elemIndex<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/>jaro <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>jaro x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span>m<span class=\"sy0\">,</span> t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> transpositions<span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">[</span>matches x y<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><br/>  <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">then</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">/</span> s1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>m <span class=\"sy0\">/</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> <span class=\"sy0\">/</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>matches <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>matches s1 s2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>l1<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>l2<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>        sortBy <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      r <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> l2 <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a><br/>       <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> a <span class=\"sy0\">-&gt;</span><br/>           <span class=\"kw1\">let</span> offset <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"br0\">(</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- initial chars out of range\u00a0?</span><br/>               <span class=\"co1\">-- Any index for this char within range\u00a0?</span><br/>           <span class=\"kw1\">in</span> <span class=\"kw1\">case</span> elemIndex c <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> offset <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                Just i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>offset <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> c<span class=\"br0\">)</span>\u00a0: a<br/>                Nothing <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span><br/>       <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> xs <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>transpositions <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>transpositions <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> x <span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> y<br/>          <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a><br/>          <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> f <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> intercalate <span class=\"st0\">\" -&gt; \"</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> printf <span class=\"st0\">\"%.3f<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">$</span> jaro s1 s2<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>  <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"DWAYNE\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DUANE\"</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 39, "block": "<pre class=\"text highlighted_source\">class Jaro {<br/>    private static function jaro(s1: String, s2: String): Float {<br/>        var s1_len = s1.length;<br/>        var s2_len = s2.length;<br/>        if (s1_len == 0 &amp;&amp; s2_len == 0) return 1;<br/>\u00a0<br/>        var match_distance = Std.int(Math.max(s1_len, s2_len)) / 2 - 1; <br/>        var matches = { s1: [for(n in 0...s1_len) false], s2: [for(n in 0...s2_len) false] };<br/>        var m = 0;<br/>        for (i in 0...s1_len) {<br/>            var start = Std.int(Math.max(0, i - match_distance));<br/>            var end = Std.int(Math.min(i + match_distance + 1, s2_len));<br/>            for (j in start...end)<br/>                if (!matches.s2[j] &amp;&amp; s1.charAt(i) == s2.charAt(j)) {<br/>\t                matches.s1[i] = true;<br/>\t                matches.s2[j] = true;<br/>\t                m++;<br/>\t                break;<br/>                }<br/>        }<br/>        if (m == 0) return 0;<br/>\u00a0<br/>        var k = 0;<br/>        var t = 0.;<br/>        for (i in 0...s1_len)<br/>            if (matches.s1[i]) {<br/>            \twhile (!matches.s2[k]) k++;<br/>            \tif (s1.charAt(i)\u00a0!= s2.charAt(k++)) t += 0.5;<br/>            }<br/>\u00a0<br/>        return (m / s1_len + m / s2_len + (m - t) / m) / 3.0;<br/>    }<br/>\u00a0<br/>    public static function main() {<br/>        Sys.println(jaro(   \"MARTHA\",      \"MARHTA\"));<br/>        Sys.println(jaro(    \"DIXON\",    \"DICKSONX\"));<br/>        Sys.println(jaro(\"JELLYFISH\",  \"SMELLYFISH\"));<br/>    }<br/>}</pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">jaro=: dyad define<br/>  d=. <span class=\"sy0\">((</span><span class=\"kw2\">x</span> &gt;.&amp;# <span class=\"kw2\">y</span><span class=\"sy0\">)</span>%<span class=\"nu0\">2</span><span class=\"sy0\">)</span>-<span class=\"nu0\">1</span><br/>  e=. <span class=\"sy0\">(</span><span class=\"kw2\">x</span> =/<span class=\"kw2\">y</span><span class=\"sy0\">)</span> * d &gt;: |<span class=\"kw2\">x</span> -/&amp;<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"a3ca8de3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> <span class=\"kw2\">y</span><br/>  xm=. <span class=\"sy0\">(</span>+./\"<span class=\"nu0\">1</span> e<span class=\"sy0\">)</span>#<span class=\"kw2\">x</span><br/>  ym=. <span class=\"sy0\">(</span>+./\"<span class=\"nu0\">2</span> e<span class=\"sy0\">)</span>#<span class=\"kw2\">y</span><br/>  <span class=\"kw2\">m</span>=. xm &lt;.&amp;# ym<br/>  t=. <span class=\"sy0\">(</span>+/xm ~:&amp;<span class=\"sy0\">(</span><span class=\"kw2\">m</span>&amp;{.<span class=\"sy0\">)</span> ym<span class=\"sy0\">)</span>%<span class=\"nu0\">2</span><br/>  s1=. #<span class=\"kw2\">x</span><br/>  s2=. #<span class=\"kw2\">y</span><br/>  <span class=\"sy0\">((</span><span class=\"kw2\">m</span>%s1<span class=\"sy0\">)</span>+<span class=\"sy0\">(</span><span class=\"kw2\">m</span>%s2<span class=\"sy0\">)</span>+<span class=\"sy0\">(</span><span class=\"kw2\">m</span>-t<span class=\"sy0\">)</span>%<span class=\"kw2\">m</span><span class=\"sy0\">)</span>%<span class=\"nu0\">3</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 50, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> JaroDistance <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> jaro<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> s_len <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> t_len <span class=\"sy0\">=</span> t.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> t_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> match_distance <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>s_len, t_len<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s_matches <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>s_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> t_matches <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>t_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> matches <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> transpositions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> start <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"sy0\">-</span>match_distance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>match_distance<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, t_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> t.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                matches<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> k<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> t.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> transpositions<span class=\"sy0\">++;</span><br/>            k<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>matches <span class=\"sy0\">/</span> s_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>matches <span class=\"sy0\">/</span> t_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>matches <span class=\"sy0\">-</span> transpositions<span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3.0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>jaro<span class=\"br0\">(</span>   <span class=\"st0\">\"MARTHA\"</span>,      <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>jaro<span class=\"br0\">(</span>    <span class=\"st0\">\"DIXON\"</span>,    <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>,  <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>   def jaro(s1; s2):\n   \n     def when(p; q): if p then q else . end;\n   \n     (s1|length) as $len1\n     | (s2|length) as $len2\n     | (( [$len1, $len2] | max ) / 2 - 1) as $match_standard\n     | {m:0, p:0}\n     | reduce range(0; $len1) as $l1\n       (.; s1[$l1:$l1+1] as $t1\n           | reduce range(0; $len2) as $l2\n             (.; s2[$l2:$l2+1] as $t2\n                 | when( $t1 == $t2;\n                         when( ($l2-$l1) &lt;= $match_standard and ($l1-$l2) &lt;= $match_standard;\n   \t\t                .m+=1) \n                         | when($l2 == $l1; .p += 1) ) ) )\n     | ((.m-.p)/2) as $t\n     | ( (.m/$len1) + (.m/$len2) + ((.m-$t)/.m) ) / 3\n  \u00a0;\n   \n   jaro(\"MARTHA\";\"MARHTA\")\n   , jaro(\"DIXON\"; \"DICKSONX\") \n   , jaro(\"JELLYFISH\";\"SMELLYFISH\")\n</pre>"}, {"lang": "Julia", "loc": 23, "block": "<pre class=\"text highlighted_source\">function jarodistance(s1::AbstractString, s2::AbstractString)<br/>    m = t = p = l1 = l2 = 0<br/>    matchstd = max(length(s1), length(s2)) / 2 - 1<br/>    for i in s1[1:end]<br/>        l1 += 1<br/>        l2 = 0<br/>        for j in s2[1:end]<br/>            l2 += 1<br/>            if i == j<br/>                if abs(l2 - l1) \u2264 matchstd m += 1 end<br/>                if l2 == l1 p += 1 end<br/>            end<br/>        end<br/>    end<br/>    t = (m - p) / 2<br/>    d = 1 / 3 * (m / length(s1) + m / length(s2) + (m - t) / m)<br/>    return d<br/>end<br/>\u00a0<br/>const testcouples = ((\"MARTHA\", \"MARHTA\"), (\"DIXON\", \"DICKSONX\"), (\"JELLYFISH\", \"SMELLYFISH\"))<br/>for (s1, s2) in testcouples<br/>    println(\"jarodistance(\\\"$s1\\\", \\\"$s2\\\") = \", @sprintf \"%2.2f\" jarodistance(s1, s2))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Jaro <span class=\"br0\">{</span><br/>    fun distance<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, s2<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1<span class=\"sy0\">_</span>len <span class=\"sy0\">=</span> s1.<span class=\"me1\">length</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2<span class=\"sy0\">_</span>len <span class=\"sy0\">=</span> s2.<span class=\"me1\">length</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s2<span class=\"sy0\">_</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> match<span class=\"sy0\">_</span>distance <span class=\"sy0\">=</span> Math.<span class=\"me1\">max</span><span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len, s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span> / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1<span class=\"sy0\">_</span>matches <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2<span class=\"sy0\">_</span>matches <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> matches <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">s1_len</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> start <span class=\"sy0\">=</span> Math.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i - match<span class=\"sy0\">_</span>distance<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>i + match<span class=\"sy0\">_</span>distance + <span class=\"nu0\">1</span>, s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>start..<span class=\"me1\">end</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">find</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span> <span class=\"sy0\">!</span>s2<span class=\"sy0\">_</span>matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> s2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"sy0\">?</span>. <span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>                s1<span class=\"sy0\">_</span>matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                s2<span class=\"sy0\">_</span>matches<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                matches++<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">s1_len</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> s1<span class=\"sy0\">_</span>matches<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s2<span class=\"sy0\">_</span>matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> k++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> t +<span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>            k++<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> matches.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>m / s1<span class=\"sy0\">_</span>len + m / s2<span class=\"sy0\">_</span>len + <span class=\"br0\">(</span>m - t<span class=\"br0\">)</span> / m<span class=\"br0\">)</span> / <span class=\"nu0\">3.0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>Jaro.<span class=\"me1\">distance</span><span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span>, <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>Jaro.<span class=\"me1\">distance</span><span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span>, <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>Jaro.<span class=\"me1\">distance</span><span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>, <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 37, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\Jaro distance between 2 strings s1 and s2.</span><br/><span class=\"co1\">\\\\ 4/12/16 aev</span><br/>jaroDist<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>vt1<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">,</span>vt2<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">,</span>n1<span class=\"sy0\">=</span>#s1<span class=\"sy0\">,</span>n2<span class=\"sy0\">=</span>#s2<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><br/>   md<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>n1<span class=\"sy0\">,</span>n2<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>cs<span class=\"sy0\">,</span>ce<span class=\"sy0\">,</span>mc<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>tr<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>ds<span class=\"sy0\">,</span><br/>   s1m<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n1<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>s2m<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n2<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>n1<span class=\"sy0\">||!</span>n2<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n1<span class=\"sy0\">,</span><br/>  cs<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>i<span class=\"sy0\">-</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ce<span class=\"sy0\">=</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>md<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>cs<span class=\"sy0\">,</span>ce<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>s2m<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>vt1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>vt2<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mc<span class=\"sy0\">++;</span> s1m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span> s2m<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend j</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>mc<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n1<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>s1m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>s2m<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>vt1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>vt2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> tr<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  k<span class=\"sy0\">++</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i</span><br/>d<span class=\"sy0\">=</span><span class=\"br0\">(</span>mc<span class=\"sy0\">/</span>n1<span class=\"sy0\">+</span>mc<span class=\"sy0\">/</span>n2<span class=\"sy0\">+</span><span class=\"br0\">(</span>mc<span class=\"sy0\">-</span>tr<span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>mc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu2\">3.0</span><span class=\"sy0\">;</span><br/>ds<span class=\"sy0\">=</span><span class=\"kw1\">Strprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%.5f\"</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Jaro distance is: \"</span><span class=\"sy0\">,</span>ds<span class=\"sy0\">,</span><span class=\"st0\">\" for strings: \"</span><span class=\"sy0\">,</span>s1<span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">return</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"co1\">\\\\ Testing:</span><br/>jaroDist<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>jaroDist<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>jaroDist<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>jaroDist<span class=\"br0\">(</span><span class=\"st0\">\"DWAYNE\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DUANE\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 47, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co1\">//converted from C source by /u/bleuge</span><br/><span class=\"kw1\">function</span> ssJaroWinkler<span class=\"br0\">(</span>s1<span class=\"sy1\">,</span>s2<span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>double<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  l1<span class=\"sy1\">,</span>l2<span class=\"sy1\">,</span>match_distance<span class=\"sy1\">,</span>matches<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>trans<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  bs1<span class=\"sy1\">,</span>bs2<span class=\"sy1\">:</span><span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span> <span class=\"co1\">//used to avoid getmem, max string length is 255</span><br/><span class=\"kw1\">begin</span><br/>  l1<span class=\"sy1\">:</span><span class=\"sy3\">=</span>length<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  l2<span class=\"sy1\">:</span><span class=\"sy3\">=</span>length<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  fillchar<span class=\"br0\">(</span>bs1<span class=\"sy1\">,</span>sizeof<span class=\"br0\">(</span>bs1<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//set booleans to false</span><br/>  fillchar<span class=\"br0\">(</span>bs2<span class=\"sy1\">,</span>sizeof<span class=\"br0\">(</span>bs2<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> l1<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">if</span> l2<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  match_distance<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span>max<span class=\"br0\">(</span>l1<span class=\"sy1\">,</span>l2<span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  matches<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  trans<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> l1 <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>i<span class=\"sy3\">-</span>match_distance<span class=\"br0\">)</span> <span class=\"kw1\">to</span> min<span class=\"br0\">(</span>i<span class=\"sy3\">+</span>match_distance<span class=\"sy1\">,</span>l2<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> bs2<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">then</span> continue<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span>&lt;&gt;s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">then</span> continue<span class=\"sy1\">;</span><br/>      bs1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>      bs2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>matches<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> matches<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  k<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> l1 <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bs1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> continue<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bs2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> inc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> s1<span class=\"br0\">[</span>i<span class=\"br0\">]</span>&lt;&gt;s2<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">then</span> inc<span class=\"br0\">(</span>trans<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  trans<span class=\"sy1\">:</span><span class=\"sy3\">=</span>trans <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matches<span class=\"sy3\">/</span>l1<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span>matches<span class=\"sy3\">/</span>l2<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>matches<span class=\"sy3\">-</span>trans<span class=\"br0\">)</span><span class=\"sy3\">/</span>matches<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//test</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>formatfloat<span class=\"br0\">(</span><span class=\"st0\">'0.######'</span><span class=\"sy1\">,</span>ssJaroWinkler<span class=\"br0\">(</span><span class=\"st0\">'DWAYNE'</span><span class=\"sy1\">,</span><span class=\"st0\">'DUANE'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>formatfloat<span class=\"br0\">(</span><span class=\"st0\">'0.######'</span><span class=\"sy1\">,</span>ssJaroWinkler<span class=\"br0\">(</span><span class=\"st0\">'MARTHA'</span><span class=\"sy1\">,</span><span class=\"st0\">'MARHTA'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>formatfloat<span class=\"br0\">(</span><span class=\"st0\">'0.######'</span><span class=\"sy1\">,</span>ssJaroWinkler<span class=\"br0\">(</span><span class=\"st0\">'DIXON'</span><span class=\"sy1\">,</span><span class=\"st0\">'DICKSONX'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>formatfloat<span class=\"br0\">(</span><span class=\"st0\">'0.######'</span><span class=\"sy1\">,</span>ssJaroWinkler<span class=\"br0\">(</span><span class=\"st0\">'JELLYFISH'</span><span class=\"sy1\">,</span><span class=\"st0\">'SMELLYFISH'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 53, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>min max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> jaro <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s_len</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$t_len</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$s_len</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"re0\">$t_len</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$match_distance</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span>max<span class=\"br0\">(</span><span class=\"re0\">$s_len</span><span class=\"sy0\">,</span> <span class=\"re0\">$t_len</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@s_matches</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@t_matches</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$matches</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"re0\">$match_distance</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> min<span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"re0\">$match_distance</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t_len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span><span class=\"re0\">$start</span> <span class=\"sy0\">..</span> <span class=\"re0\">$end</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$t</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$s_matches</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$matches</span><span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">$matches</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$k</span>              <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$transpositions</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$s_matches</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"re0\">$t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span><span class=\"re0\">$k</span> <span class=\"br0\">}</span><br/>        <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$t</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"sy0\">++</span><span class=\"re0\">$transpositions</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">++</span><span class=\"re0\">$k</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$matches</span> <span class=\"co2\">/ $s_len) + ($matches /</span> <span class=\"re0\">$t_len</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$matches</span> <span class=\"sy0\">-</span> <span class=\"re0\">$transpositions</span> <span class=\"co2\">/ 2) /</span> <span class=\"re0\">$matches</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 47, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> jaro <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$s</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s_len</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span> <span class=\"kw1\">my</span> <span class=\"re0\">@s</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$t_len</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span> <span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$match_distance</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$s_len</span> <span class=\"kw3\">max</span> <span class=\"re0\">$t_len</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@s_matches</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@t_matches</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$matches</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">max</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"re0\">$match_distance</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"re0\">$match_distance</span> <span class=\"kw3\">min</span> <span class=\"re0\">$t_len</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">$start</span> <span class=\"sy0\">..</span> <span class=\"re0\">$end</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@s_matches</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$matches</span><span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">$matches</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$k</span>              <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$transpositions</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@s</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@s_matches</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">until</span> <span class=\"re0\">@t_matches</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span><span class=\"re0\">$k</span> <span class=\"br0\">}</span><br/>        <span class=\"re0\">@s</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"sy0\">++</span><span class=\"re0\">$transpositions</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">++</span><span class=\"re0\">$k</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"re0\">$matches</span> <span class=\"co2\">/ $s_len + $matches /</span> <span class=\"re0\">$t_len</span> <span class=\"sy0\">+</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$matches</span> <span class=\"sy0\">-</span> <span class=\"re0\">$transpositions</span> <span class=\"co2\">/ 2) /</span> <span class=\"re0\">$matches</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 52, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> division<br/>\u00a0<br/><span class=\"kw1\">def</span> jaro<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span>:<br/>    s_len <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    t_len <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> s_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> t_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    match_distance <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>s_len<span class=\"sy0\">,</span> t_len<span class=\"br0\">)</span> // <span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>\u00a0<br/>    s_matches <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * s_len<br/>    t_matches <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * t_len<br/>\u00a0<br/>    matches <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    transpositions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s_len<span class=\"br0\">)</span>:<br/>        start <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i-match_distance<span class=\"br0\">)</span><br/>        end <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span>i+match_distance+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> t_len<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> end<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span>:<br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span>:<br/>                <span class=\"kw1\">continue</span><br/>            s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>            t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>            matches +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">break</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s_len<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span>:<br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span>:<br/>            k +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> t<span class=\"br0\">[</span>k<span class=\"br0\">]</span>:<br/>            transpositions +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        k +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>matches / s_len<span class=\"br0\">)</span> +<br/>            <span class=\"br0\">(</span>matches / t_len<span class=\"br0\">)</span> +<br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>matches - transpositions/<span class=\"nu0\">2</span><span class=\"br0\">)</span> / matches<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">for</span> s<span class=\"sy0\">,</span>t <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>   <span class=\"st0\">'MARTHA'</span><span class=\"sy0\">,</span>      <span class=\"st0\">'MARHTA'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">(</span>    <span class=\"st0\">'DIXON'</span><span class=\"sy0\">,</span>    <span class=\"st0\">'DICKSONX'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">'JELLYFISH'</span><span class=\"sy0\">,</span>  <span class=\"st0\">'SMELLYFISH'</span><span class=\"br0\">)</span><span class=\"br0\">]</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"jaro(%r,\u00a0%r) =\u00a0%.10f\"</span>\u00a0% <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> jaro<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 68, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>;; {{trans|C}}<br/>(require data/bit-vector)<br/>\u00a0<br/>(define (jaro-distance str1 str2)<br/>  (define str1-len (string-length str1))<br/>  (define str2-len (string-length str2))<br/>  (cond<br/>    [(and (zero? str1-len) (zero? str2-len)) 0]<br/>    [(or  (zero? str1-len) (zero? str2-len)) 1]<br/>    [else     <br/>    \u00a0;; vectors of bools that signify if that char in the matching string has a match<br/>     (define str1-matches (make-bit-vector str1-len))<br/>     (define str2-matches (make-bit-vector str2-len))<br/>     (define matches<br/>      \u00a0;; max distance between two chars to be considered matching<br/>       (let ((match-distance (sub1 (quotient (max str1-len str2-len) 2))))<br/>         (for/fold ((matches 0))<br/>                   ((i (in-range 0 str1-len))<br/>                    (c1 (in-string str1)))<br/>           (define start (max 0 (- i match-distance)))<br/>           (define end (min (+ i match-distance 1) str2-len))        <br/>           (for/fold ((matches matches))<br/>                     ((k (in-range start end))<br/>                      (c2 (in-string str2 start))<br/>                      #:unless (bit-vector-ref str2-matches k)\u00a0; if str2 already has a match continue<br/>                      #:when (char=? c1 c2)\u00a0; if str1 and str2 are not<br/>                      #:final #t)<br/>            \u00a0;; otherwise assume there is a match<br/>             (bit-vector-set! str1-matches i #t)<br/>             (bit-vector-set! str2-matches k #t)<br/>             (add1 matches)))))<br/>     (cond<br/>       [(zero? matches) 0]<br/>       [else                                <br/>        (define-values (transpositions*2 k+)<br/>          (for/fold ((transpositions 0) (k 0))<br/>                    ((i (in-range 0 str1-len))<br/>                     (c1 (in-string str1))<br/>                     (b1 (in-bit-vector str1-matches))<br/>                    \u00a0;; if there are no matches in str1 continue<br/>                     #:when b1)<br/>            (define k+ (for/first ((k+ (in-range k str2-len))<br/>                                   (b2 (in-bit-vector str2-matches k))<br/>                                   #:when b2)<br/>                         k+))        <br/>            (values<br/>             (+ transpositions (if (char=? c1 (string-ref str2 k+)) 0 1))\u00a0; increment transpositions<br/>             (add1 k+))))\u00a0;; while there is no match in str2 increment k             <br/>\u00a0<br/>       \u00a0;; divide the number of transpositions by two as per the algorithm specs<br/>       \u00a0;; this division is valid because the counted transpositions include both<br/>       \u00a0;; instances of the transposed characters.<br/>        (define transpositions (quotient transpositions*2 2))<br/>\u00a0<br/>       \u00a0;; return the Jaro distance<br/>        (/ (+ (/ matches str1-len)<br/>              (/ matches str2-len)<br/>              (/ (- matches transpositions) matches))<br/>           3)])]))<br/>\u00a0<br/>(module+ test<br/>  (jaro-distance \"MARTHA\"    \"MARHTA\"); 0.944444 <br/>  (exact-&gt;inexact (jaro-distance \"MARTHA\"    \"MARHTA\")); 0.944444<br/>  (jaro-distance \"DIXON\"     \"DICKSONX\"); 0.766667<br/>  (exact-&gt;inexact (jaro-distance \"DIXON\"     \"DICKSONX\")); 0.766667<br/>  (jaro-distance \"JELLYFISH\" \"SMELLYFISH\"); 0.896296<br/>  (exact-&gt;inexact (jaro-distance \"JELLYFISH\" \"SMELLYFISH\"))); 0.896296</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes the  Jaro distance  between two strings  (or a list of strings).*/</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/*define a default for the  @.  array. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @<span class=\"sy0\">.</span>1                                    <span class=\"coMULTI\">/*obtain an optional character string. */</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>1=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                               <span class=\"coMULTI\">/*nothing specified?  Use the defaults.*/</span><br/>                @<span class=\"sy0\">.</span>1= <span class=\"st0\">'MARTHA    MARHTA'</span><br/>                @<span class=\"sy0\">.</span>2= <span class=\"st0\">'DIXON     DICKSONX'</span><br/>                @<span class=\"sy0\">.</span>3= <span class=\"st0\">'JELLYFISH SMELLYFISH'</span><br/>                @<span class=\"sy0\">.</span>4= <span class=\"st0\">'DWAYNE    DUANE'</span><br/>                <span class=\"kw3\">end</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>                    <span class=\"coMULTI\">/*process all the strings in the list. */</span><br/>       d=jaroDist<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><br/>       <span class=\"kw1\">say</span> <span class=\"st0\">'Jaro distance is  '</span>         <span class=\"kw6\">format</span><span class=\"br0\">(</span>d, , <span class=\"nu0\">5</span><span class=\"br0\">)</span>        <span class=\"st0\">\" for strings: \"</span>        @<span class=\"sy0\">.</span>j<br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                               <span class=\"coMULTI\">/* \u2514\u2500\u2500\u2500\u2500 digits past the decimal point.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>jaroDist: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> s<span class=\"sy0\">.</span>1 s<span class=\"sy0\">.</span>2 <span class=\"sy0\">.</span>;        L1=<span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span>1<span class=\"br0\">)</span>;      L2=<span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span>2<span class=\"br0\">)</span>;        m=<span class=\"nu0\">0</span><br/>          <span class=\"kw1\">if</span> L1==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> L2==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>        <span class=\"coMULTI\">/*check if any string is a null string.*/</span><br/>          f=<span class=\"kw6\">max</span><span class=\"br0\">(</span>L1,L2<span class=\"br0\">)</span>%2 - <span class=\"nu0\">1</span>                     <span class=\"coMULTI\">/*calculate furthest distanced allowed.*/</span><br/>          r<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/* [\u2193]  see if the char is near enough.*/</span><br/>               <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L1;        p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span>1, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, s<span class=\"sy0\">.</span>2, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, k-f<span class=\"br0\">)</span><span class=\"br0\">)</span>;    r<span class=\"sy0\">.</span>k=p<br/>               <span class=\"kw1\">if</span> p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>p-k<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>=f <span class=\"kw3\">then</span> m=m+<span class=\"nu0\">1</span> <span class=\"coMULTI\">/*if near enough, count it as a match. */</span><br/>                                      <span class=\"kw3\">else</span> r<span class=\"sy0\">.</span>k=<span class=\"nu0\">0</span> <span class=\"coMULTI\">/*       \u00b7\u00b7\u00b7 otherwise, don't count it.*/</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          t=<span class=\"nu0\">0</span><br/>               <span class=\"kw1\">do</span> o=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L1;        om=o-<span class=\"nu0\">1</span><br/>               <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span>1, o, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, s<span class=\"sy0\">.</span>2<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"sy0\">|</span>  r<span class=\"sy0\">.</span>o==<span class=\"nu0\">0</span>  <span class=\"sy0\">|</span>  r<span class=\"sy0\">.</span>om==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>               <span class=\"kw1\">if</span> r<span class=\"sy0\">.</span>o<span class=\"sy0\">&lt;</span>r<span class=\"sy0\">.</span>om  <span class=\"kw3\">then</span> t=t+<span class=\"nu0\">1</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*o*/</span>                       <span class=\"coMULTI\">/* [\u2191]  count number of transpositions.*/</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span> m==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>m<span class=\"sy0\">/</span>L1 + m<span class=\"sy0\">/</span>L2 + <span class=\"br0\">(</span>m-t<span class=\"br0\">)</span><span class=\"sy0\">/</span>m<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "Ring", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Jaro distance<br/>\u00a0<br/>decimals(12)<br/>\u00a0<br/>see \" jaro (MARTHA, MARHTA)  = \" +  jaro(\"MARTHA\", \"MARHTA\") + nl<br/>see \" jaro (DIXON, DICKSONX) = \" + jaro(\"DIXON\", \"DICKSONX\") + nl<br/>see \" jaro (JELLYFISH, SMELLYFISH) = \" + jaro(\"JELLYFISH\", \"SMELLYFISH\") + nl<br/>\u00a0<br/>func jaro(word1, word2) <br/>        if len(word1) &gt; len(word2)<br/>            swap(word1, word2)<br/>        ok<br/>        j = 1<br/>        t = 0<br/>        m = 0<br/>        s1 = len(word1)<br/>        s2 = len(word2)<br/>        maxdist = (s2 / 2) -1  <br/>        for i = 1 to s1 <br/>             if word1[i] = word2[j] and j &lt; max(len(word2), len(word2)) + 1 <br/>                m = m +1<br/>                word2[j] = char(32)<br/>             else<br/>                for j1 = max(1, i - maxdist) to min(s2 -1, i + maxdist)<br/>                     if word1[i] = word2[j1] <br/>                        t = t +1<br/>                        m = m +1<br/>                        word2[j1] = char(32)<br/>                        if j1 &gt; j and j1 &lt; max(len(word2), len(word2)) + 1<br/>                           j = j1<br/>                        ok<br/>                    ok<br/>                next<br/>             ok<br/>             if j &lt; max(len(word2), len(word2))<br/>                j = j + 1<br/>             ok<br/>        next <br/>        if m = 0<br/>           return 0<br/>        ok <br/>        t = floor(t / 2)<br/>        return (m / s1 + m / s2 + ((m - t) / m)) / 3<br/>\u00a0<br/>func swap(a, b)<br/>        temp = a<br/>        a = b<br/>        b = temp<br/>        return [a, b]<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 48, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> jaro<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">if</span> s == t<br/>\u00a0<br/>    s_len = s.<span class=\"me1\">size</span><br/>    t_len = t.<span class=\"me1\">size</span><br/>    match_distance = <span class=\"br0\">(</span><span class=\"br0\">[</span>s_len, t_len<span class=\"br0\">]</span>.<span class=\"me1\">max</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    s_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    t_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    matches = <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    s_len.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        j_start = <span class=\"br0\">[</span><span class=\"nu0\">0</span>, i<span class=\"sy0\">-</span>match_distance<span class=\"br0\">]</span>.<span class=\"me1\">max</span><br/>        j_end = <span class=\"br0\">[</span>i<span class=\"sy0\">+</span>match_distance, t_len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">min</span><br/>\u00a0<br/>        <span class=\"br0\">(</span>j_start..<span class=\"me1\">j_end</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>            t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>            s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>            s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>            t_matches<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>            matches <span class=\"sy0\">+</span>= <span class=\"nu0\">1.0</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">if</span> matches == <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    k = <span class=\"nu0\">0</span><br/>    transpositions = <span class=\"nu0\">0.0</span><br/>    s_len.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>        k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>        s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == t<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>transpositions <span class=\"sy0\">+</span>= <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>        k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> s_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>     <span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> t_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">-</span> transpositions<span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3.0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy0\">%</span>w<span class=\"br0\">(</span><br/>    MARTHA    MARHTA<br/>    DIXON     DICKSONX<br/>    JELLYFISH SMELLYFISH<br/><span class=\"br0\">)</span>.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>s,t<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"jaro(#{s.inspect}, #{t.inspect}) = #{'%.10f'\u00a0% jaro(s, t)}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 41, "block": "<pre class=\"text highlighted_source\">use std::cmp;<br/>\u00a0<br/>pub fn jaro(s1: &amp;str, s2: &amp;str) -&gt; f64 {<br/>    let s1_len = s1.len();<br/>    let s2_len = s2.len();<br/>    if s1_len == 0 &amp;&amp; s2_len == 0 { return 1.0; }<br/>    let match_distance = cmp::max(s1_len, s2_len) / 2 - 1;<br/>    let mut s1_matches = vec![false; s1_len];<br/>    let mut s2_matches = vec![false; s2_len];<br/>    let mut m: isize = 0;<br/>    for i in 0..s1_len {<br/>        let start = cmp::max(0, i as isize - match_distance as isize) as usize;<br/>        let end = cmp::min(i + match_distance + 1, s2_len);<br/>        for j in start..end {<br/>            if\u00a0!s2_matches[j] &amp;&amp; s1.as_bytes()[i] == s2.as_bytes()[j] {<br/>                s1_matches[i] = true;<br/>                s2_matches[j] = true;<br/>                m += 1;<br/>                break;<br/>            }<br/>        }<br/>    }<br/>    if m == 0 { return 0.0; }<br/>    let mut t = 0.0;<br/>    let mut k = 0;<br/>    for i in 0..s1_len {<br/>        if s1_matches[i] {<br/>            while\u00a0!s2_matches[k] { k += 1; }<br/>            if s1.as_bytes()[i]\u00a0!= s2.as_bytes()[k] { t += 0.5; }<br/>            k += 1;<br/>        }<br/>    }<br/>\u00a0<br/>    let m = m as f64;<br/>    (m / s1_len as f64 + m / s2_len as f64 + (m  - t) / m) / 3.0<br/>}<br/>\u00a0<br/>fn main() {<br/>    let pairs = [(\"MARTHA\", \"MARHTA\"), (\"DIXON\", \"DICKSONX\"), (\"JELLYFISH\", \"SMELLYFISH\")];<br/>    for p in pairs.iter() { println!(\"{}/{} = {}\", p.0, p.1, jaro(p.0, p.1)); }<br/>}</pre>"}, {"lang": "Scala", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Jaro <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> distance<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, s2<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1<span class=\"sy0\">_</span>len <span class=\"sy0\">=</span> s1.<span class=\"me1\">length</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2<span class=\"sy0\">_</span>len <span class=\"sy0\">=</span> s2.<span class=\"me1\">length</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s2<span class=\"sy0\">_</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> match<span class=\"sy0\">_</span>distance <span class=\"sy0\">=</span> Math.<span class=\"me1\">max</span><span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len, s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span> / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1<span class=\"sy0\">_</span>matches <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span>s1<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2<span class=\"sy0\">_</span>matches <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span>s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> matches <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until s1<span class=\"sy0\">_</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> start <span class=\"sy0\">=</span> Math.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i - match<span class=\"sy0\">_</span>distance<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>i + match<span class=\"sy0\">_</span>distance + <span class=\"nu0\">1</span>, s2<span class=\"sy0\">_</span>len<span class=\"br0\">)</span><br/>            start until end find <span class=\"br0\">{</span> j <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>s2<span class=\"sy0\">_</span>matches<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> s2<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                    s1<span class=\"sy0\">_</span>matches<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                    s2<span class=\"sy0\">_</span>matches<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                    matches +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>matches <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> until s1<span class=\"sy0\">_</span>len filter s1<span class=\"sy0\">_</span>matches foreach <span class=\"br0\">{</span> i <span class=\"sy0\">=&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s2<span class=\"sy0\">_</span>matches<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> k +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> s2<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> t +<span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>            k +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> matches.<span class=\"me1\">toDouble</span><br/>        <span class=\"br0\">(</span>m / s1<span class=\"sy0\">_</span>len + m / s2<span class=\"sy0\">_</span>len + <span class=\"br0\">(</span>m - t<span class=\"br0\">)</span> / m<span class=\"br0\">)</span> / <span class=\"nu0\">3.0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"MARTHA\"</span>, <span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"st0\">\"DIXON\"</span>, <span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"st0\">\"JELLYFISH\"</span>, <span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    strings.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> s <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>distance<span class=\"br0\">(</span>s.<span class=\"sy0\">_</span>1, s.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 51, "block": "<pre class=\"ruby highlighted_source\">func jaro<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s == t<span class=\"br0\">)</span><br/>\u00a0<br/>    var s_len = s.<span class=\"me1\">len</span><br/>    var t_len = t.<span class=\"me1\">len</span><br/>\u00a0<br/>    var match_distance = <span class=\"br0\">(</span><span class=\"br0\">(</span>s_len <span class=\"st0\">`max`</span> t_len<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var s_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var t_matches = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    var matches = <span class=\"nu0\">0</span><br/>    var transpositions = <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"br0\">(</span>^s_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var start = <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"st0\">`max`</span> i<span class=\"sy0\">-</span>match_distance<span class=\"br0\">)</span><br/>        var <span class=\"kw1\">end</span> = <span class=\"br0\">(</span>i<span class=\"sy0\">+</span>match_distance <span class=\"st0\">`min`</span> t_len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> k <span class=\"br0\">(</span>start..<span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>            s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == t<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>            s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>            t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>            matches<span class=\"sy0\">++</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var k = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"br0\">(</span>^s_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s_matches<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>!t_matches<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span>k <span class=\"br0\">}</span><br/>        s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == t<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">++</span>transpositions<br/>        <span class=\"sy0\">++</span>k<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> s_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>      <span class=\"br0\">(</span>matches <span class=\"sy0\">/</span> t_len<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>matches <span class=\"sy0\">-</span> transpositions<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> matches<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> pair <span class=\"kw1\">in</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">%</span>c<span class=\"st0\">\"MARTHA\"</span>,    <span class=\"sy0\">%</span>c<span class=\"st0\">\"MARHTA\"</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"sy0\">%</span>c<span class=\"st0\">\"DIXON\"</span>,     <span class=\"sy0\">%</span>c<span class=\"st0\">\"DICKSONX\"</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"sy0\">%</span>c<span class=\"st0\">\"JELLYFISH\"</span>, <span class=\"sy0\">%</span>c<span class=\"st0\">\"SMELLYFISH\"</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"jaro(#{pair.map{.join.dump}.join(', ')}) = #{'%.10f'\u00a0% jaro(pair...)}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 1, "block": "<pre class=\"text highlighted_source\">ssc install jarowinkler</pre>"}, {"lang": "Swift", "loc": 90, "block": "<pre class=\"text highlighted_source\"> func jaroWinklerMatch(_ s: String, _ t: String) -&gt; Double {<br/>    let s_len: Int = s.count<br/>    let t_len: Int = t.count<br/>\u00a0<br/>    if s_len == 0 &amp;&amp; t_len == 0 {<br/>        return 1.0<br/>    }<br/>\u00a0<br/>    if s_len == 0 || t_len == 0 {<br/>        return 0.0<br/>    }<br/>\u00a0<br/>    var match_distance: Int = 0<br/>\u00a0<br/>    if s_len == 1 &amp;&amp; t_len == 1 {<br/>        match_distance = 1<br/>    } else {<br/>        match_distance = ([s_len, t_len].max()!/2) - 1<br/>    }<br/>\u00a0<br/>\u00a0<br/>    var s_matches = [Bool]()<br/>    var t_matches = [Bool]()<br/>\u00a0<br/>    for _ in 1...s_len {<br/>        s_matches.append(false)<br/>    }<br/>\u00a0<br/>    for _ in 1...t_len {<br/>        t_matches.append(false)<br/>    }<br/>\u00a0<br/>    var matches: Double = 0.0<br/>    var transpositions: Double = 0.0<br/>\u00a0<br/>    for i in 0...s_len-1 {<br/>\u00a0<br/>        let start = [0, (i-match_distance)].max()!<br/>        let end = [(i + match_distance), t_len-1].min()!<br/>\u00a0<br/>        if start &gt; end {<br/>            break<br/>        }<br/>\u00a0<br/>        for j in start...end {<br/>\u00a0<br/>            if t_matches[j] {<br/>                continue<br/>            }<br/>\u00a0<br/>            if s[String.Index.init(encodedOffset: i)]\u00a0!= t[String.Index.init(encodedOffset: j)] {<br/>                continue<br/>            }<br/>            // We must have a match<br/>            s_matches[i] = true<br/>            t_matches[j] = true<br/>            matches += 1<br/>            break<br/>        }<br/>    }<br/>\u00a0<br/>    if matches == 0 {<br/>        return 0.0<br/>    }<br/>\u00a0<br/>    var k = 0<br/>    for i in 0...s_len-1 {<br/>        if\u00a0!s_matches[i] {<br/>            continue<br/>        }<br/>        while\u00a0!t_matches[k] {<br/>            k += 1<br/>        }<br/>        if s[String.Index.init(encodedOffset: i)]\u00a0!= t[String.Index.init(encodedOffset: k)] {<br/>\u00a0<br/>            transpositions += 1<br/>        }<br/>\u00a0<br/>        k += 1<br/>    }<br/>\u00a0<br/>    let top = (matches / Double(s_len)) + (matches / Double(t_len)) + (matches - (transpositions / 2)) / matches<br/>    return top/3<br/>}<br/>\u00a0<br/>print(\"DWAYNE/DUANE:\", jaroWinklerMatch(\"DWAYNE\", \"DUANE\"))<br/>print(\"MARTHA/MARHTA:\", jaroWinklerMatch(\"MARTHA\", \"MARHTA\"))<br/>print(\"DIXON/DICKSONX:\", jaroWinklerMatch(\"DIXON\", \"DICKSONX\"))<br/>print(\"JELLYFISH/SMELLYFISH:\", jaroWinklerMatch(\"JELLYFISH\", \"SMELLYFISH\"))<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 38, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> jaro <span class=\"br0\">{</span>s1 s2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> l1 <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> l2 <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dmax <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"re0\">$l1</span>, <span class=\"re0\">$l2</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># window size to scan for matches</span><br/>    <span class=\"kw1\">set</span> m1 <span class=\"br0\">{</span><span class=\"br0\">}</span>                               <span class=\"sy0\">;</span><span class=\"co1\"># match indices</span><br/>    <span class=\"kw1\">set</span> m2 <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$l1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> jmin <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> - <span class=\"re0\">$dmax</span><span class=\"br0\">}</span><span class=\"br0\">]</span>        <span class=\"sy0\">;</span><span class=\"co1\"># don't worry about going out-of-bounds</span><br/>        <span class=\"kw1\">set</span> jmax <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> + <span class=\"re0\">$dmax</span><span class=\"br0\">}</span><span class=\"br0\">]</span>        <span class=\"sy0\">;</span><span class=\"co1\"># because [string index] will return {} safely</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"re0\">$jmin</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$jmax</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"kw1\">in</span> <span class=\"re0\">$m2</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span>   <span class=\"sy0\">;</span><span class=\"co1\"># don't double-count matches</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$s1</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> eq <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$s2</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lappend</span> m1 <span class=\"re0\">$i</span><br/>                <span class=\"kw2\">lappend</span> m2 <span class=\"re0\">$j</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> T <span class=\"nu0\">0</span>                 <span class=\"sy0\">;</span><span class=\"co1\"># number of transpositions</span><br/>    <span class=\"kw1\">set</span> oj -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> j <span class=\"re0\">$m2</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$oj</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> T<span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> oj <span class=\"re0\">$j</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> T <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$T</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> M <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$m1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span>  <span class=\"sy0\">;</span><span class=\"co1\"># number of matches</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re0\">$M</span> / <span class=\"re0\">$l1</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re0\">$M</span> / <span class=\"re0\">$l2</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$M</span> - <span class=\"re0\">$T</span><span class=\"br0\">)</span> / <span class=\"re0\">$M</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> / <span class=\"nu0\">3.0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>s t<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    DWAYNE DUANE<br/>    MARTHA MARHTA<br/>    DIXON  DICKSONX<br/>    JELLYFISH SMELLYFISH<br/><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"[jaro $s $t]:<span class=\"es0\">\\t</span>$s / $t\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 46, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> JaroWinkler(text1 <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, text2 <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, <span class=\"kw4\">Optional</span> p <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span> = 0.1) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">Dim</span> dummyChar, match1, match2 <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> i, f, t, j, m, l, s1, s2, limit <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>i = 1<br/><span class=\"kw3\">Do</span><br/>    dummyChar = Chr(i)<br/>    i = i + 1<br/><span class=\"kw3\">Loop</span> <span class=\"kw3\">Until</span> InStr(1, text1 &amp; text2, dummyChar, vbTextCompare) = 0<br/>\u00a0<br/>s1 = Len(text1)<br/>s2 = Len(text2)<br/>limit = WorksheetFunction.Max(0, Int(WorksheetFunction.Max(s1, s2) / 2) - 1)<br/>match1 = <span class=\"kw1\">String</span>(s1, dummyChar)<br/>match2 = <span class=\"kw1\">String</span>(s2, dummyChar)<br/>\u00a0<br/><span class=\"kw3\">For</span> l = 1 <span class=\"kw3\">To</span> WorksheetFunction.Min(4, s1, s2)<br/>    <span class=\"kw3\">If</span> Mid(text1, l, 1) &lt;&gt; Mid(text2, l, 1) <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/><span class=\"kw3\">Next</span> l<br/>l = l - 1<br/>\u00a0<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> s1<br/>    f = WorksheetFunction.Min(WorksheetFunction.Max(i - limit, 1), s2)<br/>    t = WorksheetFunction.Min(WorksheetFunction.Max(i + limit, 1), s2)<br/>    j = InStr(1, Mid(text2, f, t - f + 1), Mid(text1, i, 1), vbTextCompare)<br/>    <span class=\"kw3\">If</span> j &gt; 0 <span class=\"kw3\">Then</span><br/>        m = m + 1<br/>        text2 = Mid(text2, 1, f + j - 2) &amp; dummyChar &amp; Mid(text2, f + j)<br/>        match1 = Mid(match1, 1, i - 1) &amp; Mid(text1, i, 1) &amp; Mid(match1, i + 1)<br/>        match2 = Mid(match2, 1, f + j - 2) &amp; Mid(text1, i, 1) &amp; Mid(match2, f + j)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span> i<br/>match1 = Replace(match1, dummyChar, <span class=\"st0\">\"\"</span>, 1, -1, vbTextCompare)<br/>match2 = Replace(match2, dummyChar, <span class=\"st0\">\"\"</span>, 1, -1, vbTextCompare)<br/>t = 0<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> m<br/>    <span class=\"kw3\">If</span> Mid(match1, i, 1) &lt;&gt; Mid(match2, i, 1) <span class=\"kw3\">Then</span> t = t + 1<br/><span class=\"kw3\">Next</span> i<br/>\u00a0<br/>JaroWinkler = (m / s1 + m / s2 + (m - t / 2) / m) / 3<br/>JaroWinkler = JaroWinkler + (1 - JaroWinkler) * l * WorksheetFunction.Min(0.25, p)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\">   //--&gt;String of matched characters, ordered<br/>fcn _jaro(str1,str2, matchDistance){<br/>   cs:=Sink(String);<br/>   foreach i,c in ([0..].zip(str1)){<br/>      str2.find(c,(0).max(i - matchDistance),i + matchDistance)\u00a0:<br/>      if(Void!=_) cs.write(c);<br/>   }<br/>   cs.close()<br/>}<br/>\u00a0<br/>fcn jaro(str1,str2){<br/>   s1Len,s2Len,matchDistance\u00a0:= str1.len(), str2.len(), s1Len.max(s2Len)/2 - 1;<br/>   cs12,cs21\u00a0:= _jaro(str1,str2, matchDistance), _jaro(str2,str1, matchDistance); <br/>\u00a0<br/>   matches:=cs12.len().toFloat();<br/>   if(not matches) return(0.0);<br/>   transpositions:=cs12.walker().zipWith('!=,cs21).filter().sum(0)/2;<br/>\u00a0<br/>   ( matches/s1Len + matches/s2Len +<br/>      ((matches - transpositions)/matches) ) / 3.0<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 22, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"MARTHA\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"MARHTA\"</span>: <span class=\"kw1\">PRINT</span> a$;<span class=\"st0\">\", \"</span>;b$;<span class=\"st0\">\": \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> jaro<br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"DIXON\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"DICKSONX\"</span>: <span class=\"kw1\">PRINT</span> a$;<span class=\"st0\">\", \"</span>;b$;<span class=\"st0\">\": \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> jaro<br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"JELLYFISH\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"SMELLYFISH\"</span>: <span class=\"kw1\">PRINT</span> a$;<span class=\"st0\">\", \"</span>;b$;<span class=\"st0\">\": \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> jaro<br/><span class=\"nu0\">900</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Jaro subroutine</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> s1=<span class=\"kw3\">LEN</span> a$: <span class=\"kw1\">LET</span> s2=<span class=\"kw3\">LEN</span> b$: <span class=\"kw1\">LET</span> j=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> m=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> t=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">IF</span> s1&gt;s2 <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> z$=a$: <span class=\"kw1\">LET</span> a$=b$: <span class=\"kw1\">LET</span> b$=z$: <span class=\"kw1\">LET</span> z=s1: <span class=\"kw1\">LET</span> s1=s2: <span class=\"kw1\">LET</span> s2=z<br/><span class=\"nu0\">1035</span> <span class=\"kw1\">LET</span> maxdist=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>s2/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> s1<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">IF</span> a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=b$<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> m=m+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> b$<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=<span class=\"st0\">\" \"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2000</span><br/><span class=\"nu0\">1080</span> <span class=\"kw1\">FOR</span> k=FN x<span class=\"br0\">(</span><span class=\"nu0\">1</span>,i-maxdist<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> FN n<span class=\"br0\">(</span>s2,i+maxdist<span class=\"br0\">)</span><br/><span class=\"nu0\">1090</span> <span class=\"kw1\">IF</span> a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=b$<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> t=t+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> m=m+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> b$<span class=\"br0\">(</span>k<span class=\"br0\">)</span>=<span class=\"st0\">\" \"</span>: <span class=\"kw1\">IF</span> k&gt;j <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> j=k<br/><span class=\"nu0\">1100</span> <span class=\"kw1\">NEXT</span> k<br/><span class=\"nu0\">2000</span> <span class=\"kw1\">IF</span> j&lt;s2 <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> j=j+<span class=\"nu0\">1</span>:<br/><span class=\"nu0\">2010</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">2020</span> <span class=\"kw1\">IF</span> m=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> jaro=<span class=\"nu0\">0</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">2030</span> <span class=\"kw1\">LET</span> t=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>t/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2040</span> <span class=\"kw1\">LET</span> jaro=<span class=\"br0\">(</span>m/s1+m/s2+<span class=\"br0\">(</span><span class=\"br0\">(</span>m-t<span class=\"br0\">)</span>/m<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">3</span><br/><span class=\"nu0\">2050</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">5000</span> <span class=\"co3\">REM Functions</span><br/><span class=\"nu0\">5010</span> DEF FN x<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=<span class=\"br0\">(</span>a <span class=\"kw4\">AND</span> a&gt;b<span class=\"br0\">)</span>+<span class=\"br0\">(</span>b <span class=\"kw4\">AND</span> a&lt;b<span class=\"br0\">)</span>+<span class=\"br0\">(</span>a <span class=\"kw4\">AND</span> a=b<span class=\"br0\">)</span>: <span class=\"co3\">REM max function</span><br/><span class=\"nu0\">5020</span> DEF FN n<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=<span class=\"br0\">(</span>a <span class=\"kw4\">AND</span> a&lt;b<span class=\"br0\">)</span>+<span class=\"br0\">(</span>b <span class=\"kw4\">AND</span> a&gt;b<span class=\"br0\">)</span>+<span class=\"br0\">(</span>a <span class=\"kw4\">AND</span> a=b<span class=\"br0\">)</span>: <span class=\"co3\">REM min function</span></pre>"}]}