{"task": "Truncatable_primes", "blocks": [{"lang": "Ada", "loc": 71, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Truncatable_Primes <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Natural_Set <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span> <span class=\"br0\">(</span>Natural<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Natural_Set;<br/>\u00a0<br/>   Primes\u00a0: Set;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Prime <span class=\"br0\">(</span>N\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Position\u00a0: Cursor\u00a0:= First <span class=\"br0\">(</span>Primes<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Has_Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> N <span class=\"kw2\">mod</span> Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Position\u00a0:= Next <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> True;<br/>   <span class=\"kw1\">end</span> Is_Prime;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Left_Trucatable_Prime <span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      M\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Contains <span class=\"br0\">(</span>Primes, N <span class=\"kw2\">mod</span> <span class=\"br0\">(</span>M * <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>N / M<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         M\u00a0:= M * <span class=\"nu0\">10</span>;<br/>         <span class=\"kw1\">if</span> N &lt;= M <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> False;<br/>   <span class=\"kw1\">end</span> Is_Left_Trucatable_Prime;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Right_Trucatable_Prime <span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      M\u00a0: Natural\u00a0:= N;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Contains <span class=\"br0\">(</span>Primes, M<span class=\"br0\">)</span> <span class=\"kw2\">and</span> M <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         M\u00a0:= M / <span class=\"nu0\">10</span>;<br/>         <span class=\"kw1\">if</span> M &lt;= <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> True;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> False;<br/>   <span class=\"kw1\">end</span> Is_Right_Trucatable_Prime;<br/>\u00a0<br/>   Position\u00a0: Cursor;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">2</span>..<span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Prime <span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Insert <span class=\"br0\">(</span>Primes, N<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Position\u00a0:= Last <span class=\"br0\">(</span>Primes<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> Has_Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Left_Trucatable_Prime <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Largest LTP from 1..1000000:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Previous <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Position\u00a0:= Last <span class=\"br0\">(</span>Primes<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> Has_Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Right_Trucatable_Prime <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Largest RTP from 1..1000000:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Previous <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Truncatable_Primes;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 56, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> is short prime<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> n<span class=\"sy1\">&lt;=</span><span class=\"kw8\">UPB</span> is short prime <span class=\"kw2\">THEN</span> is short prime<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"coMULTI\"># EXIT #</span> <span class=\"kw2\">ELSE</span><br/>    <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> n <span class=\"sy1\">|</span> <span class=\"kw7\">TRUE</span> <span class=\"sy1\">|</span> n <span class=\"kw12\">MOD</span> 3 <span class=\"sy1\">=</span> 0 <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span> <span class=\"coMULTI\"># EXIT #</span> <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw3\">INT</span> h <span class=\"sy1\">:=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">+</span>3<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> a <span class=\"kw2\">FROM</span> 7 <span class=\"kw2\">BY</span> 6 <span class=\"kw2\">WHILE</span> a<span class=\"sy1\">&lt;</span>h <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> n <span class=\"kw12\">MOD</span> a <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> <span class=\"kw7\">TRUE</span> <span class=\"sy1\">|</span>  n <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span>a<span class=\"sy1\">-</span>2<span class=\"br0\">)</span> <span class=\"sy1\">=</span> 0 <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> false exit <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      <span class=\"kw7\">TRUE</span> <span class=\"coMULTI\"># EXIT #</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">FI</span> <span class=\"kw2\">EXIT</span><br/>  false exit<span class=\"sy1\">:</span> <span class=\"kw7\">FALSE</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> string to int <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> in a<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw6\">FILE</span> f<span class=\"sy1\">;</span> <span class=\"kw3\">STRING</span> a <span class=\"sy1\">:=</span> in a<span class=\"sy1\">;</span> <span class=\"kw22\">associate</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> a<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> i<span class=\"sy1\">;</span> get<span class=\"br0\">(</span>f<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is trunc prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> in n<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> trunc<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> n <span class=\"sy1\">:=</span> in n<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">STRING</span> s <span class=\"sy1\">:=</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> s<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span> <span class=\"coMULTI\"># EXIT #</span><br/>  <span class=\"kw2\">ELSE</span><br/>    <span class=\"kw2\">WHILE</span> is prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>      s <span class=\"sy1\">:=</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      trunc<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> s <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> true exit <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      n <span class=\"sy1\">:=</span> string to int<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw7\">FALSE</span> <span class=\"kw2\">EXIT</span><br/>    true exit<span class=\"sy1\">:</span> <span class=\"kw7\">TRUE</span><br/>  <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> get trunc prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> in n<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> trunc<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> in n <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is trunc prime<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> trunc<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      break<br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  break<span class=\"sy1\">:</span> <span class=\"sy1\">~</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> limit <span class=\"sy1\">=</span> 1000000<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g g<span class=\"br0\">(</span>0<span class=\"br0\">)</span> gl$<span class=\"sy1\">,</span><span class=\"st0\">\"Highest left- and right-truncatable primes under \"</span><span class=\"sy1\">,</span>limit<span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  get trunc prime<span class=\"br0\">(</span>limit<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> s <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> s<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  get trunc prime<span class=\"br0\">(</span>limit<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> s <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> s<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  write<span class=\"br0\">(</span><span class=\"st0\">\"Press Enter\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  read<span class=\"br0\">(</span><span class=\"kw22\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 56, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Largest left-truncatable and right-truncatable primes less than one million:`n\"</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"Left:`t\"</span> LTP<span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"st0\">\"`nRight:`t\"</span> RTP<span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>LTP<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> n <span class=\"br0\">{</span><br/>\t\tn<span class=\"sy0\">--</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Instr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!IsPrime<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>RTP<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> n <span class=\"br0\">{</span><br/>\t\tn<span class=\"sy0\">--</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!IsPrime<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tn <span class=\"sy0\">-=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Instr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!IsPrime<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tf <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;=</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">(</span>f <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\tf <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Bracmat", "loc": 17, "block": "<pre class=\"text highlighted_source\">( 1000001:?i<br/>&amp;   whl<br/>  ' (\u00a0!i+-2:&gt;0:?i<br/>    &amp;\u00a0!i:?L<br/>    &amp; whl'(!L^1/2:#?^1/2&amp;@(!L:%\u00a0?L))<br/>    &amp;\u00a0!L:~<br/>    )<br/>&amp; out$(\"left:\"\u00a0!i)<br/>&amp; 1000001:?i<br/>&amp;   whl<br/>  ' (\u00a0!i+-2:&gt;0:?i<br/>    &amp;\u00a0!i:?R<br/>    &amp; whl'(!R^1/2:#?^1/2&amp;@(!R:?R\u00a0%@))<br/>    &amp;\u00a0!R:~<br/>    )<br/>&amp; out$(\"right:\"\u00a0!i)<br/>)</pre>"}, {"lang": "C", "loc": 63, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_PRIME 1000000</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>primes<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> n_primes<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*  Sieve. If we were to handle 10^9 range, use bit field. Regardless,<br/> *  if a large amount of prime numbers need to be tested, sieve is fast.<br/> */</span><br/><span class=\"kw4\">void</span> init_primes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> j<span class=\"sy0\">;</span><br/>\tprimes <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> MAX_PRIME<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> MAX_PRIME<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tprimes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> primes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;</span> MAX_PRIME<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> MAX_PRIME<span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> i<span class=\"br0\">)</span><br/>\t\t\tprimes<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> MAX_PRIME <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> left_trunc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> tens <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>tens <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> tens <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>primes<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\ttens <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> tens<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">%=</span> tens<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> right_trunc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>primes<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> max_left <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> max_right <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tinit_primes<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> MAX_PRIME <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>max_left<span class=\"sy0\">;</span>  n <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>left_trunc<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> max_left <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> MAX_PRIME <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>max_right<span class=\"sy0\">;</span> n <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>right_trunc<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> max_right <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Left:\u00a0%d; right:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> max_left<span class=\"sy0\">,</span> max_right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 71, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> Program<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>2<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>3<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">var</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>f<span class=\"sy0\">&lt;=</span>r<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>f<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">||</span>n<span class=\"sy0\">%</span><span class=\"br0\">(</span>f<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        f <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsRightTruncatable<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsLeftTruncatable<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">string</span> c <span class=\"sy0\">=</span> n<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>c<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>IsPrime<span class=\"br0\">(</span>Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>c<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Stopwatch<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sb<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> lt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, rt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rt<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> IsRightTruncatable<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            rt <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lt<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> IsLeftTruncatable<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            lt <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lt<span class=\"sy0\">!=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> rt<span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      sb<span class=\"sy0\">.</span><span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Largest truncable left is={0} &amp; right={1}, calculated in {2} msec.\"</span>,<br/>                        lt, rt, sb<span class=\"sy0\">.</span><span class=\"me1\">ElapsedMilliseconds</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 41, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>lazy<span class=\"sy0\">-</span>seqs\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> prime?<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>mem <span class=\"br0\">(</span>ref #<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\tprimes <span class=\"br0\">(</span>ref primes<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dosync</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">first</span> @primes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>@mem n<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>mems ss<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">split-with</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> @primes<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">ref-set</span> primes ss<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">commute</span> mem <span class=\"kw1\">into</span> mems<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> drop<span class=\"sy0\">-</span>lefts <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>dropl #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>Integer<span class=\"sy0\">.</span> <span class=\"br0\">(</span>subs <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> dropl n<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> <span class=\"kw1\">pos?</span> ,<span class=\"br0\">)</span><br/>\t next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> drop<span class=\"sy0\">-</span>rights <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> #<span class=\"br0\">(</span>quot <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>       next<br/>       <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> <span class=\"kw1\">pos?</span> ,<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> truncatable<span class=\"sy0\">-</span>left? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">every?</span> prime? <span class=\"br0\">(</span>drop<span class=\"sy0\">-</span>lefts n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> truncatable<span class=\"sy0\">-</span>right? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">every?</span> prime? <span class=\"br0\">(</span>drop<span class=\"sy0\">-</span>rights n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>p primes<br/>\t  \u00a0:<span class=\"me1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> p <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\t  \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> #<span class=\"br0\">{</span>\\<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>l? <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>truncatable<span class=\"sy0\">-</span>left? p<span class=\"br0\">)</span> p <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t r? <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>truncatable<span class=\"sy0\">-</span>right? p<span class=\"br0\">)</span> p <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t   \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> l? r?<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">[</span>l? r?<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>juxt #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> max<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> max<span class=\"sy0\">-</span>key second <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ,<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>juxt <span class=\"kw1\">ffirst</span> <span class=\"br0\">(</span>comp second second<span class=\"br0\">)</span><span class=\"br0\">)</span> ,<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> <span class=\"br0\">[</span><span class=\"st0\">\"left truncatable: \"</span> <span class=\"st0\">\"right truncatable: \"</span><span class=\"br0\">]</span> ,<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"left truncatable: \"</span> <span class=\"nu0\">998443</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"right truncatable: \"</span> <span class=\"nu0\">739399</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 60, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># You could have symmetric algorithms for max right and left</span><br/><span class=\"co1\"># truncatable numbers, but they lend themselves to slightly</span><br/><span class=\"co1\"># different optimizations.</span><br/>\u00a0<br/>max_right_truncatable_number = <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># This algorithm only evaluates 37 numbers for primeness to</span><br/>  <span class=\"co1\"># get the max right truncatable prime &lt; 1000000.  Its</span><br/>  <span class=\"co1\"># optimization is that it prunes candidates for</span><br/>  <span class=\"co1\"># the first n-1 digits before having to iterate through</span><br/>  <span class=\"co1\"># the 10 possibilities for the last digit.</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><br/>    candidate = n <br/>    <span class=\"kw1\">while</span> candidate <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">return</span> candidate <span class=\"kw1\">if</span> f<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>      candidate <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    left = Math.<span class=\"me1\">floor</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">while</span> left <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      left = max_right_truncatable_number left<span class=\"sy0\">,</span> f<br/>      right = <span class=\"nu0\">9</span><br/>      <span class=\"kw1\">while</span> right <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>        candidate = left <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> right<br/>        <span class=\"kw1\">return</span> candidate <span class=\"kw1\">if</span> candidate <span class=\"sy0\">&lt;</span>= n <span class=\"kw2\">and</span> f<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>        right <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>      left <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"none found\"</span><br/>\u00a0<br/>max_left_truncatable_number = <span class=\"br0\">(</span>max<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># This is a pretty straightforward countdown.  The first</span><br/>  <span class=\"co1\"># optimization here would probably be to cache results of </span><br/>  <span class=\"co1\"># calling f on small numbers.</span><br/>  is_left_truncatable = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    candidate = <span class=\"nu0\">0</span><br/>    power_of_ten = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      r = n  <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> r == <span class=\"nu0\">0</span><br/>      n = Math.<span class=\"me1\">floor</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>      candidate = r <span class=\"sy0\">*</span> power_of_ten <span class=\"sy0\">+</span> candidate<br/>      power_of_ten <span class=\"sy0\">*</span>= <span class=\"nu0\">10</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">unless</span> f<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>    <span class=\"kw4\">true</span><br/>  do <span class=\"sy0\">-&gt;</span><br/>    n = max<br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">return</span> n <span class=\"kw1\">if</span> is_left_truncatable n<span class=\"sy0\">,</span> f<br/>      n <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"none found\"</span><br/>\u00a0<br/>is_prime = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> d == <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">if</span> d <span class=\"sy0\">*</span> d <span class=\"sy0\">&gt;</span>= n<br/>\u00a0<br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> max_right_truncatable_number<span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"sy0\">,</span> is_prime<span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> max_left_truncatable_number<span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"sy0\">,</span> is_prime<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun start ()<br/>  (format t \"Largest right-truncatable ~a~%\" (max-right-truncatable))<br/>  (format t \"Largest left-truncatable  ~a~%\" (max-left-truncatable)))<br/>\u00a0<br/>(defun max-right-truncatable ()<br/>  (loop for el in (6-digits-R-truncatables)<br/>        maximizing el into max<br/>        finally (return max)))<br/>\u00a0<br/>(defun 6-digits-R-truncatables (&amp;optional (lst '(2 3 5 7)) (n 5))<br/>  (if (zerop n)<br/>    lst<br/>    (6-digits-R-truncatables (R-trunc lst) (- n 1))))<br/>\u00a0<br/>(defun R-trunc (lst)<br/>  (remove-if (lambda (x) (not (primep x))) <br/>\t     (loop for el in lst<br/>\t\t   append (mapcar (lambda (x) (+ (* 10 el) x)) '(1 3 7 9)))))<br/>\u00a0<br/>(defun max-left-truncatable ()<br/>  (loop for el in (6-digits-L-truncatables)<br/>        maximizing el into max<br/>        finally (return max)))<br/>\u00a0<br/>(defun 6-digits-L-truncatables (&amp;optional (lst '(3 7)) (n 5))<br/>  (if (zerop n)<br/>    lst<br/>    (6-digits-L-truncatables (L-trunc lst (- 6 n)) (- n 1))))<br/>\u00a0<br/>(defun L-trunc (lst n)<br/>  (remove-if (lambda (x) (not (primep x))) <br/>\t     (loop for el in lst<br/>\t\t   append (mapcar (lambda (x) (+ (* (expt 10 n) x) el)) '(1 2 3 4 5 6 7 8 9)))))<br/>\u00a0<br/>(defun primep (n)<br/>  (primep-aux n 2))<br/>\u00a0<br/>(defun primep-aux (n d)<br/>  (cond ((&gt; d (sqrt n)) t)<br/>        ((zerop (rem n d)) nil)<br/>        (t (primep-aux n (+ d 1)))))<br/>\u00a0</pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>sqrt<span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isTruncatablePrime<span class=\"br0\">(</span><span class=\"kw4\">bool</span> left<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> s <span class=\"sy0\">=</span> n.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">canFind</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">s</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span>.<span class=\"me1\">isPrime</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span>.<span class=\"me1\">isPrime</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Largest left-truncatable prime in 2 .. \"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span><br/>            iota<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>isTruncatablePrime<span class=\"sy0\">!</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Largest right-truncatable prime in 2 .. \"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span><br/>            iota<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>isTruncatablePrime<span class=\"sy0\">!</span><span class=\"kw2\">false</span><span class=\"br0\">)</span>.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; does p include a 0 in its decimal representation\u00a0?</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>nozero? n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> -<span class=\"nu0\">1</span> <span class=\"br0\">(</span>string-index <span class=\"br0\">(</span>number-<span class=\"sy0\">&gt;</span>string n<span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; right truncate\u00a0: p and successive quotients by 10 (integer division) must be primes</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>right-trunc p<span class=\"br0\">)</span> <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>zero? p<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>prime? p<span class=\"br0\">)</span> <span class=\"br0\">(</span>right-trunc <span class=\"br0\">(</span>quotient p <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember 'right-trunc<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; left truncate\u00a0: p and successive modulo by 10, 100, .. must be prime</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>left-trunc p <span class=\"br0\">(</span>mod <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> mod <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>prime? p<span class=\"br0\">)</span> <span class=\"br0\">(</span>nozero? p<span class=\"br0\">)</span> <span class=\"br0\">(</span>left-trunc <span class=\"br0\">(</span>modulo p mod<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ mod <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; start from 999999. stop on first found</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>fact-trunc trunc<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>in-range <span class=\"nu0\">999999</span> <span class=\"nu0\">100000</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #<span class=\"sy0\">:</span><span class=\"kw1\">break</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>trunc p<span class=\"br0\">)</span> <span class=\"br0\">(</span>writeln p<span class=\"br0\">)</span> #t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 152, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Largest right truncatable prime: \"</span> <span class=\"sy0\">+</span> find_right_truncatable_primes.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Largest left truncatable prime: \"</span> <span class=\"sy0\">+</span> find_left_truncatable_primes.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tfind_right_truncatable_primes<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Largest right truncatable prime below 1000000.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, maybe_prime<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tfound, is_one<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">999999</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tfound<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tmaybe_prime <span class=\"sy0\">:=</span> i<br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\t<span class=\"kw2\">not</span> is_one  <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"st0\">'2'</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"st0\">'4'</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"st0\">'6'</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span><span class=\"st0\">'8'</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\t\t<span class=\"kw2\">if</span> <span class=\"kw2\">not</span> is_prime <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span>  <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t\t<span class=\"kw2\">elseif</span> is_prime <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span> <span class=\"kw2\">and</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\tmaybe_prime <span class=\"sy0\">:=</span> truncate_right <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">if</span> is_one <span class=\"kw2\">then</span><br/>\t\t\t\t\tfound <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> i<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_is_smaller<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tfind_left_truncatable_primes<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Largest left truncatable prime below 1000000.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, maybe_prime<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tfound, is_one<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">999999</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tfound<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tmaybe_prime <span class=\"sy0\">:=</span> i<br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\t<span class=\"kw2\">not</span> is_one <span class=\"kw2\">or</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> <span class=\"kw2\">not</span> is_prime <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t<span class=\"kw2\">elseif</span> is_prime <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span> <span class=\"kw2\">and</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw2\">if</span> maybe_prime.<span class=\"me1\">out</span>.<span class=\"me1\">at</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\tis_one <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\t\t\tmaybe_prime <span class=\"sy0\">:=</span> truncate_left <span class=\"br0\">(</span>maybe_prime<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">if</span> is_one <span class=\"kw2\">then</span><br/>\t\t\t\t\tfound <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> i<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_is_smaller<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tis_prime <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">--Is 'n' a prime number?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tpositiv_input<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tmax<span class=\"sy0\">:</span> REAL_64<br/>\t\t\tmath<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t<span class=\"kw2\">elseif</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> n \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\tmax <span class=\"sy0\">:=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\ti <span class=\"sy0\">&gt;</span> max<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> n \\\\ i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\ttruncate_left <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- 'n' truncated by one digit from the left side.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\ttruncatable<span class=\"sy0\">:</span> n.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tst<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tst <span class=\"sy0\">:=</span> n.<span class=\"me1\">out</span><br/>\t\t\tst.<span class=\"me1\">remove_head</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> st.<span class=\"me1\">to_integer</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_truncated<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> n.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\ttruncate_right <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- 'n' truncated by one digit from the right side.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\ttruncatable<span class=\"sy0\">:</span> n.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tst<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tst <span class=\"sy0\">:=</span> n.<span class=\"me1\">out</span><br/>\t\t\tst.<span class=\"me1\">remove_tail</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> st.<span class=\"me1\">to_integer</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_truncated<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> n.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 95, "block": "<pre class=\"text highlighted_source\">import system'calendar.<br/>import extensions.<br/>\u00a0<br/>const MAXN = 1000000.<br/>\u00a0<br/>extension mathOp<br/>{<br/>    isPrime<br/>    [<br/>        int n\u00a0:= self int.<br/>\u00a0<br/>        if (n &lt; 2) [ ^ false. ].        <br/>        if (n &lt; 4) [ ^ true. ].        <br/>        if (n mod:2 == 0) [ ^ false. ].        <br/>        if (n &lt; 9) [ ^ true. ].        <br/>        if (n mod:3 == 0) [ ^ false. ].<br/>\u00a0<br/>        int r\u00a0:= n sqrt.        <br/>        int f\u00a0:= 5.<br/>        while (f &lt;= r)<br/>        [<br/>            if ((n mod:f == 0) || (n mod:(f + 2) == 0))<br/>                [ ^ false ].<br/>\u00a0<br/>            f\u00a0:= f + 6            <br/>        ].<br/>\u00a0<br/>        ^ true<br/>    ]<br/>\u00a0<br/>    isRightTruncatable<br/>    [<br/>        int n\u00a0:= self.<br/>\u00a0<br/>        while (n\u00a0!= 0)<br/>        [<br/>            ifnot (n isPrime)<br/>                [ ^ false ].<br/>\u00a0<br/>            n\u00a0:= n / 10<br/>        ].<br/>\u00a0<br/>        ^ true.<br/>    ]<br/>\u00a0<br/>    isLeftTruncatable<br/>    [<br/>        int n\u00a0:= self.<br/>        int tens\u00a0:= 1.<br/>\u00a0<br/>        while (tens &lt; n)<br/>            [ tens\u00a0:= tens * 10. ].<br/>\u00a0<br/>        while (n\u00a0!= 0)<br/>        [<br/>            ifnot (n isPrime)<br/>                [ ^ false ].<br/>\u00a0<br/>            tens\u00a0:= tens / 10.<br/>            n\u00a0:= n - (n / tens * tens)<br/>        ].<br/>\u00a0<br/>        ^ true<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var n\u00a0:= MAXN.<br/>    var max_lt\u00a0:= 0.<br/>    var max_rt\u00a0:= 0.<br/>\u00a0<br/>    while ((max_lt == 0) || (max_rt == 0))<br/>    [<br/>        if(n literal; indexOf:\"0\" == -1)<br/>        [<br/>            if ((max_lt == 0) &amp;&amp; $(n isLeftTruncatable))<br/>                [<br/>                    max_lt\u00a0:= n.<br/>                ].<br/>\u00a0<br/>            if ((max_rt == 0) &amp;&amp; $(n isRightTruncatable))<br/>                [<br/>                    max_rt\u00a0:= n.<br/>                ].<br/>        ].<br/>\u00a0<br/>        n\u00a0:= n - 1.            <br/>    ].<br/>\u00a0<br/>    console printLine(\"Largest truncable left is \",max_lt).    <br/>    console printLine(\"Largest truncable right is \",max_rt).<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 47, "block": "<pre class=\"text highlighted_source\">defmodule Prime do<br/>  defp left_truncatable?(n, prime) do<br/>    func = fn i when i&lt;=9 -&gt; 0<br/>              i           -&gt; to_string(i) |&gt; String.slice(1..-1) |&gt; String.to_integer end<br/>    truncatable?(n, prime, func)<br/>  end<br/>\u00a0<br/>  defp right_truncatable?(n, prime) do<br/>    truncatable?(n, prime, fn i -&gt; div(i, 10) end)<br/>  end<br/>\u00a0<br/>  defp truncatable?(n, prime, trunc_func) do<br/>    if to_string(n) |&gt; String.match?(~r/0/),<br/>      do:   false,<br/>      else: trunc_loop(trunc_func.(n), prime, trunc_func)<br/>  end<br/>\u00a0<br/>  defp trunc_loop(0, _prime, _trunc_func), do: true<br/>  defp trunc_loop(n, prime, trunc_func) do<br/>    if elem(prime,n), do: trunc_loop(trunc_func.(n), prime, trunc_func), else: false<br/>  end<br/>\u00a0<br/>  def eratosthenes(limit) do            # descending order<br/>    Enum.to_list(2..limit) |&gt; sieve(:math.sqrt(limit), [])<br/>  end<br/>\u00a0<br/>  defp sieve([h|_]=list, max, sieved) when h&gt;max, do: Enum.reverse(list, sieved)<br/>  defp sieve([h | t], max, sieved) do<br/>    list = for x &lt;- t, rem(x,h)&gt;0, do: x<br/>    sieve(list, max, [h | sieved])<br/>  end<br/>\u00a0<br/>  defp prime_table(_, [], list), do: [false, false | list]<br/>  defp prime_table(n, [n|t], list), do: prime_table(n-1, t,      [true|list])<br/>  defp prime_table(n, prime, list), do: prime_table(n-1, prime, [false|list])<br/>\u00a0<br/>  def task(limit \\\\ 1000000) do<br/>    prime = eratosthenes(limit)<br/>    prime_tuple = prime_table(limit, prime, []) |&gt; List.to_tuple<br/>    left = Enum.find(prime, fn n -&gt; left_truncatable?(n, prime_tuple) end)<br/>    IO.puts \"Largest left-truncatable prime\u00a0: #{left}\"<br/>    right = Enum.find(prime, fn n -&gt; right_truncatable?(n, prime_tuple) end)<br/>    IO.puts \"Largest right-truncatable prime: #{right}\" <br/>  end<br/>end<br/>\u00a0<br/>Prime.task</pre>"}, {"lang": "Factor", "loc": 36, "block": "<pre class=\"text highlighted_source\">USING: formatting fry grouping.extras kernel literals math<br/>math.parser math.primes sequences\u00a0;<br/>IN: rosetta-code.truncatable-primes<br/>\u00a0<br/>CONSTANT: primes $[ 1,000,000 primes-upto reverse ]<br/>\u00a0<br/>: number&gt;digits ( n -- B{} ) number&gt;string string&gt;digits\u00a0;<br/>\u00a0<br/>: no-zeros? ( seq --\u00a0? ) [ zero? not ] all?\u00a0;<br/>\u00a0<br/>: all-prime? ( seq --\u00a0? ) [ prime? ] all?\u00a0;<br/>\u00a0<br/>: truncate ( seq quot -- seq' ) call( seq -- seq' )<br/>    [ 10 digits&gt;integer ] map\u00a0;<br/>\u00a0<br/>: truncate-right ( seq -- seq' ) [ head-clump ] truncate\u00a0;<br/>\u00a0<br/>: truncate-left ( seq -- seq' ) [ tail-clump ] truncate\u00a0;<br/>\u00a0<br/>: truncatable-prime? ( n quot --\u00a0? ) [ number&gt;digits ] dip<br/>    '[ @ all-prime? ] [ no-zeros? ] bi and\u00a0; inline<br/>\u00a0<br/>: right-truncatable-prime? ( n --\u00a0? ) [ truncate-right ]<br/>    truncatable-prime?\u00a0;<br/>\u00a0<br/>: left-truncatable-prime? ( n --\u00a0? ) [ truncate-left ]<br/>    truncatable-prime?\u00a0;<br/>\u00a0<br/>: find-truncatable-primes ( -- ltp rtp )<br/>    primes [ [ left-truncatable-prime?  ] find nip ]<br/>           [ [ right-truncatable-prime? ] find nip ] bi\u00a0;<br/>\u00a0<br/>: main ( -- ) find-truncatable-primes<br/>    \"Left:\u00a0%d\\nRight:\u00a0%d\\n\" printf\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fortran", "loc": 88, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> primes_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">primes</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Genprimes<span class=\"br0\">(</span>parr<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span> <span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">parr</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/><span class=\"co1\">! Prime sieve</span><br/>  parr <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  parr <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  parr <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">:</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>parr<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"kw4\">sqrt</span> <span class=\"br0\">(</span><span class=\"kw3\">real</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>parr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>parr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> parr<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">:</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>parr<span class=\"br0\">)</span> <span class=\"sy0\">:</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> is_rtp<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_rtp</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">candidate</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>  is_rtp <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  n <span class=\"sy0\">=</span> candidate <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      is_rtp <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> is_ltp<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_ltp</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">candidate</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">nstr</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span>nstr, <span class=\"st0\">\"(i10)\"</span><span class=\"br0\">)</span> candidate<br/>  is_ltp <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>nstr<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>candidate, <span class=\"nu0\">10</span><span class=\"sy0\">**</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      is_ltp <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> primes_mod<br/>\u00a0<br/><span class=\"kw1\">program</span> Truncatable_Primes<br/>  <span class=\"kw3\">use</span> primes_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">limit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">999999</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">nstr</span><br/>\u00a0<br/><span class=\"co1\">! Generate an array of prime flags up to limit of search</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>primes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> Genprimes<span class=\"br0\">(</span>primes<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! Find left truncatable prime</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> limit, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    write<span class=\"br0\">(</span>nstr, <span class=\"st0\">\"(i10)\"</span><span class=\"br0\">)</span> i<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span>nstr<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span>      <span class=\"co1\">! check for 0 in number</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>is_ltp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Largest left truncatable prime below 1000000 is \"</span>, i<br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">! Find right truncatable prime</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> limit, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    write<span class=\"br0\">(</span>nstr, <span class=\"st0\">\"(i10)\"</span><span class=\"br0\">)</span> i<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span>nstr<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span>      <span class=\"co1\">! check for 0 in number</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>is_rtp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Largest right truncatable prime below 1000000 is \"</span>, i<br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 56, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">While</span> d * d &lt;= n<br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i, j, p, pow, lMax = <span class=\"nu0\">2</span>, rMax = <span class=\"nu0\">2</span> <br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/><span class=\"co1\">' largest left truncatable prime less than 1000000</span><br/><span class=\"co1\">' It can't end with 1, 4, 6, 8 or 9 as these numbers are not prime</span><br/><span class=\"co1\">' Nor can it end in 2 if it has more than one digit as such a number would divide by 2</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999997</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  s = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>s, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span> <span class=\"co1\">'' cannot contain 0   </span><br/>  j = s<span class=\"br0\">[</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span> - <span class=\"nu0\">48</span><br/>  <span class=\"kw1\">If</span> j = <span class=\"nu0\">1</span> OrElse j = <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>  p = i<br/>  pow = <span class=\"nu0\">10</span> ^ <span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> pow &gt; <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>    p <span class=\"kw1\">Mod</span>= pow<br/>    pow \\= <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Wend</span><br/>  lMax = i<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' largest right truncatable prime less than 1000000</span><br/><span class=\"co1\">' It can't begin with 1, 4, 6, 8 or 9 as these numbers are not prime</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"nu0\">799999</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  s = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>s, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span> <span class=\"co1\">'' cannot contain 0   </span><br/>  j = s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - <span class=\"nu0\">48</span><br/>  <span class=\"kw1\">If</span> j = <span class=\"nu0\">1</span> OrElse j = <span class=\"nu0\">4</span> OrElse j = <span class=\"nu0\">6</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>  p = i<br/>  <span class=\"kw1\">While</span> p &gt; <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span>  <br/>    p \\= <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Wend</span><br/>  rMax = i<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Largest left  truncatable prime\u00a0: \"</span>; lMax<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Largest right truncatable prime\u00a0: \"</span>; rMax<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 55, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    sieve<span class=\"sy1\">(</span><span class=\"nu1\">1e6</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>search<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e6</span><span class=\"sy1\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> pot <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> n <span class=\"sy3\">%</span> pot <span class=\"sy1\">})</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"997?\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>search<span class=\"sy1\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e6</span><span class=\"sy1\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> _ <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">10</span> <span class=\"sy1\">})</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"7393?\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> c <span class=\"sy1\">[]</span><span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sieve<span class=\"sy1\">(</span>ss <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> ss<span class=\"sy1\">)</span><br/>    c<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"kw1\">for</span> p <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        p2 <span class=\"sy2\">:=</span> p <span class=\"sy3\">*</span> p<br/>        <span class=\"kw1\">if</span> p2 &gt;<span class=\"sy2\">=</span> ss <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> p2<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; ss<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> p <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            p<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> search<span class=\"sy1\">(</span>digits<span class=\"sy1\">,</span> pot <span class=\"kw4\">int</span><span class=\"sy1\">,</span> s <span class=\"kw4\">string</span><span class=\"sy1\">,</span> truncFunc <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> pot <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> pot <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    pot <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span><br/>smaller<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &gt;<span class=\"sy2\">=</span> pot<span class=\"sy1\">;</span> n <span class=\"sy2\">-=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> tn<span class=\"sy1\">,</span> tp <span class=\"sy2\">:=</span> n<span class=\"sy1\">,</span> pot<span class=\"sy1\">;</span> tp &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> tp <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> tn &lt; tp <span class=\"sy3\">||</span> c<span class=\"sy1\">[</span>tn<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span> smaller<br/>            <span class=\"sy1\">}</span><br/>            tn <span class=\"sy2\">=</span> truncFunc<span class=\"sy1\">(</span>tn<span class=\"sy1\">,</span> tp<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"max\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"st0\">\"truncatable:\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> digits &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> search<span class=\"sy1\">(</span>digits<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> pot<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> truncFunc<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 14, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Numbers<span class=\"sy0\">.</span>Primes<span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> isPrime<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/>\u00a0<br/>primes1e6 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:notElem\"><span class=\"kw3\">notElem</span></a> <span class=\"st0\">'0'</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> takeWhile<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span> primes<br/>\u00a0<br/>rightT<span class=\"sy0\">,</span> leftT <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>rightT <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isPrime<span class=\"sy0\">.</span> takeWhile<span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>`<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>leftT x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isPrime<span class=\"sy0\">.</span> takeWhile<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>x`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>`<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>ltp<span class=\"sy0\">,</span> rtp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> leftT <span class=\"sy0\">&amp;&amp;</span>&amp; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> rightT<span class=\"br0\">)</span> primes1e6<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Left truncatable  \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> ltp<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Right truncatable \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> rtp</pre>"}, {"lang": "Icon and Unicon", "loc": 33, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span>     <br/>   N <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">1000000</span>              <span class=\"co1\"># primes to generator 1 to ... (1M or 1st arglist)</span><br/>   D <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">2</span>             <span class=\"co1\"># primes to display (10 or 2nd arglist)</span><br/>   P <span class=\"sy1\">:=</span> sieve<span class=\"br0\">(</span>N<span class=\"br0\">)</span>                                        <span class=\"co1\"># from sieve task (modified)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span><span class=\"sy1\">,*</span>P<span class=\"sy1\">,</span><span class=\"st0\">\" prime numbers in the range 1 to \"</span><span class=\"sy1\">,</span>N<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>P <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>D <span class=\"kw1\">then</span> <br/>      <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span> <span class=\"st0\">\"Primes: \"</span><span class=\"sy1\">|!</span><span class=\"kw4\">sort</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy1\">||</span><span class=\"st0\">\" \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span> <br/>   <span class=\"kw1\">else</span> <br/>      <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span> <span class=\"st0\">\"Primes: \"</span><span class=\"sy1\">|</span><span class=\"br0\">(</span>L <span class=\"sy1\">:=</span> <span class=\"kw4\">sort</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> D<span class=\"br0\">]</span><span class=\"sy1\">||</span><span class=\"st0\">\" \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"... \"</span><span class=\"sy1\">|</span>L<span class=\"br0\">[</span><span class=\"sy1\">*</span>L<span class=\"sy1\">-</span>D<span class=\"sy1\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>L<span class=\"br0\">]</span><span class=\"sy1\">||</span><span class=\"st0\">\" \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span> <br/>   largesttruncateable<span class=\"br0\">(</span>P<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> largesttruncateable<span class=\"br0\">(</span>P<span class=\"br0\">)</span>            <span class=\"co1\">#: find the largest left and right trucatable numbers in P</span><br/><span class=\"kw2\">local</span> ltp<span class=\"sy1\">,</span>rtp<br/>\u00a0<br/>   <span class=\"kw1\">every</span> x  <span class=\"sy1\">:=</span> <span class=\"kw4\">sort</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">*</span>P <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> by <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span>    <span class=\"co1\"># largest to smallest </span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>         <span class=\"sy1\">/</span>ltp  <span class=\"sy1\">:=</span> islefttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>         <span class=\"sy1\">/</span>rtp  <span class=\"sy1\">:=</span> isrighttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <br/>         <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>ltp <span class=\"sy1\">&amp;</span> <span class=\"sy1\">\\</span>rtp <span class=\"kw1\">then</span> <span class=\"kw1\">break</span>          <span class=\"co1\"># until both found</span><br/>         <span class=\"br0\">}</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Largest left truncatable prime  = \"</span><span class=\"sy1\">,</span> ltp<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Largest right truncatable prime = \"</span><span class=\"sy1\">,</span> rtp<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> isrighttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"co1\">#: return integer x if x and all right truncations of x are in P or fails</span><br/><span class=\"kw1\">if</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">member</span><span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> isrighttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x <span class=\"sy1\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> x<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> islefttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"co1\">#: return integer x if x and all left truncations of x are in P or fails</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> islefttrunc<span class=\"br0\">(</span>P<span class=\"sy1\">,</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> x<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">selPrime=: #~ <span class=\"nu0\">1</span>&amp;p:<br/>seed=: selPrime digits=: <span class=\"nu0\">1</span>+i.<span class=\"nu0\">9</span><br/>step=: <a class=\"__cf_email__\" data-cfemail=\"4b382e271b3922262e0b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,@:<span class=\"sy0\">(</span>,&amp;.\":/&amp;&gt;<span class=\"sy0\">)</span>@{@;</pre>"}, {"lang": "Java", "loc": 70, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.BitSet</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">final</span> <span class=\"kw4\">int</span> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Sieve of Eratosthenes (using BitSet only for odd numbers)</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a> primeList <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abitset+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BitSet</span></a><span class=\"br0\">(</span>MAX<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\tprimeList.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,primeList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>\t\t<span class=\"kw4\">int</span> sqroot <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\tprimeList.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> num <span class=\"sy0\">&lt;=</span> sqroot<span class=\"sy0\">;</span> num<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">{</span> <br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> primeList.<span class=\"me1\">get</span><span class=\"br0\">(</span>num <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">{</span> <br/>\t\t\t\t<span class=\"kw4\">int</span> inc <span class=\"sy0\">=</span> num <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> factor <span class=\"sy0\">=</span> num <span class=\"sy0\">*</span> num<span class=\"sy0\">;</span> factor <span class=\"sy0\">&lt;</span> MAX<span class=\"sy0\">;</span> factor <span class=\"sy0\">+=</span> inc<span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"br0\">{</span> <br/>\t\t\t\t\t<span class=\"co1\">//if( ((factor) &amp; 1) == 1) </span><br/>\t\t\t\t\t<span class=\"co1\">//{ </span><br/>\t\t\t\t\tprimeList.<span class=\"me1\">clear</span><span class=\"br0\">(</span>factor <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\t\t\t\t<span class=\"co1\">//} </span><br/>\t\t\t\t<span class=\"br0\">}</span> <br/>\t\t\t<span class=\"br0\">}</span> <br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">//Sieve ends...</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Find Largest Truncatable Prime. (so we start from 1000000 - 1</span><br/>\t\t<span class=\"kw4\">int</span> rightTrunc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, leftTrunc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> prime <span class=\"sy0\">=</span> <span class=\"br0\">(</span>MAX <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> prime <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> prime <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>primeList.<span class=\"me1\">get</span><span class=\"br0\">(</span>prime<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">//Already found Right Truncatable Prime?</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rightTrunc <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw4\">int</span> right <span class=\"sy0\">=</span> prime<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>right <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> right <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> primeList.<span class=\"me1\">get</span><span class=\"br0\">(</span>right <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> right <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>right <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rightTrunc <span class=\"sy0\">=</span> prime<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">//Already found Left Truncatable Prime?</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>leftTrunc <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">//Left Truncation</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> left <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>prime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>left.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> left.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t\t<span class=\"kw4\">int</span> iLeft <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>primeList.<span class=\"me1\">get</span><span class=\"br0\">(</span> iLeft <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\tleft <span class=\"sy0\">=</span> left.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>left.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> leftTrunc <span class=\"sy0\">=</span> prime<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>leftTrunc <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> rightTrunc <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">//Found both? then Stop loop</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Left  Truncatable\u00a0: \"</span> <span class=\"sy0\">+</span> leftTrunc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Right Truncatable\u00a0: \"</span> <span class=\"sy0\">+</span> rightTrunc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function isltruncprime{T&lt;:Integer}(n::T, base::T=10)<br/>    isprime(n) || return false<br/>    p = n<br/>    f = prevpow(base, p)<br/>    while 1 &lt; f<br/>        (d, p) = divrem(p, f)<br/>        isprime(p) || return false<br/>        d\u00a0!= 0 || return false<br/>        f = div(f, base)<br/>    end<br/>    return true<br/>end<br/>\u00a0<br/>function isrtruncprime{T&lt;:Integer}(n::T, base::T=10)<br/>    isprime(n) || return false<br/>    p = n<br/>    while base &lt; p<br/>        p = div(p, base)<br/>        isprime(p) || return false<br/>    end<br/>    return true<br/>end<br/>\u00a0<br/>hi = 10^6<br/>\u00a0<br/>for i in reverse(primes(hi))<br/>    isltruncprime(i) || continue<br/>    println(\"The largest  left truncatable prime \u2264 \", hi, \" is \", i, \".\")<br/>    break<br/>end<br/>\u00a0<br/>for i in reverse(primes(hi))<br/>    isrtruncprime(i) || continue<br/>    println(\"The largest right truncatable prime \u2264 \", hi, \" is \", i, \".\")<br/>    break<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 58, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//  version 1.0.5-2</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j<span class=\"sy0\">:</span> Char<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lMax<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rMax<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s<span class=\"sy0\">:</span> String<br/>\u00a0<br/>    <span class=\"co1\">// calculate maximum left truncatable prime less than 1 million</span><br/>    loop<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i in <span class=\"nu0\">3</span>..<span class=\"nu0\">999997</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">=</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"st0\">'0'</span> in s<span class=\"br0\">)</span> continue<br/>        j <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>s.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> || j <span class=\"sy0\">==</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> continue<br/>        p <span class=\"sy0\">=</span> i<br/>        pow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">1</span>..<span class=\"me1\">s</span>.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> pow <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>pow <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> continue<span class=\"sy0\">@</span>loop<br/>            p <span class=\"sy0\">%=</span> pow<br/>            pow /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>        <span class=\"br0\">}</span><br/>        lMax <span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// calculate maximum right truncatable prime less than 1 million</span><br/>    loop<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i in <span class=\"nu0\">3</span>..<span class=\"nu0\">799999</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">=</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"st0\">'0'</span> in s<span class=\"br0\">)</span> continue<br/>        j <span class=\"sy0\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> || j <span class=\"sy0\">==</span> <span class=\"st0\">'4'</span> || j <span class=\"sy0\">==</span> <span class=\"st0\">'6'</span><span class=\"br0\">)</span> continue<br/>        p <span class=\"sy0\">=</span> i<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> continue<span class=\"sy0\">@</span>loop <br/>            p /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>        <span class=\"br0\">}</span><br/>        rMax <span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Largest left  truncatable prime\u00a0: \"</span> + lMax.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Largest right truncatable prime\u00a0: \"</span> + rMax.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 47, "block": "<pre class=\"lua highlighted_source\">max_number <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/>numbers <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> max_number <span class=\"kw1\">do</span><br/>    numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> max_number <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> max_number <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> numbers<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> j <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> numbers<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>max_prime_left<span class=\"sy0\">,</span> max_prime_right <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> max_number <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">local</span> is_prime <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\u00a0<br/>        <span class=\"kw1\">local</span> l <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">while</span> l <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> numbers<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                is_prime <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>                <span class=\"kw1\">break</span> <br/>            <span class=\"kw1\">end</span><br/>            l <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> l <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> is_prime <span class=\"kw1\">then</span><br/>            max_prime_left <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        is_prime <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>        <span class=\"kw1\">local</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">&lt;</span> max_number <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> numbers<span class=\"br0\">[</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                is_prime <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">end</span><br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>        <span class=\"kw1\">end</span>    <br/>        <span class=\"kw1\">if</span> is_prime <span class=\"kw1\">then</span><br/>            max_prime_right <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"max_prime_left = \"</span><span class=\"sy0\">,</span> max_prime_left <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"max_prime_right = \"</span><span class=\"sy0\">,</span> max_prime_right <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MaxTruncatablePrime\u00a0:= proc({left::truefalse:=FAIL, right::truefalse:=FAIL}, $)<br/>local i, j, c, p, b, n, sdprimes, dir;<br/>local tprimes\u00a0:= table();<br/>    if left = true and right = true then<br/>        error \"invalid input\";<br/>    elif right = true then<br/>        dir\u00a0:= \"right\";<br/>    else<br/>        dir\u00a0:= \"left\";<br/>    end if;<br/>    b\u00a0:= 10;<br/>    n\u00a0:= 6;<br/>    sdprimes\u00a0:= select(isprime, [seq(1..b-1)]);<br/>    for p in sdprimes do<br/>        if assigned(tprimes[p]) then<br/>            next;<br/>        end if;<br/>        i\u00a0:= ilog[b](p)+1;<br/>        j\u00a0:= 1;<br/>        while p &lt; b^n do<br/>            if dir = \"left\" then<br/>                c\u00a0:= j*b^i + p;<br/>            else<br/>                c\u00a0:= p*b + j;<br/>            end if;<br/>            if j &gt;= b or c &gt; b^n then # we have tried all 1 digit extensions of p, add p to tprimes and move back 1 digit<br/>                tprimes[p]\u00a0:= p;<br/>                if i = 1 then # if we are at the first digit,  go to the next 1 digit prime<br/>                    break;<br/>                end if;<br/>                i\u00a0:= i - 1;<br/>                j\u00a0:= 1;<br/>                if dir = \"left\" then<br/>                    p\u00a0:= p - iquo(p, b^i)*b^i;<br/>                else<br/>                    p\u00a0:= iquo(p, b);<br/>                end if;<br/>            elif assigned(tprimes[c]) then<br/>                j\u00a0:= j + 1;    <br/>            elif isprime(c) then<br/>                p\u00a0:= c;<br/>                i\u00a0:= i + 1;<br/>                j\u00a0:= 1;<br/>            else<br/>                j\u00a0:= j+1;<br/>            end if;<br/>        end do;<br/>    end do;<br/>    return max(indices(tprimes, 'nolist'));<br/>end proc;</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">LeftTruncatablePrimeQ[n_]\u00a0:= Times @@ IntegerDigits[n] &gt; 0 &amp;&amp;<br/>  And @@ PrimeQ /@ ToExpression /@ StringJoin /@ <br/>      Rest[Most[NestList[Rest, #, Length[#]] &amp;[Characters[ToString[n]]]]]<br/>RightTruncatablePrimeQ[n_]\u00a0:= Times @@ IntegerDigits[n] &gt; 0 &amp;&amp;<br/>  And @@ PrimeQ /@ ToExpression /@ StringJoin /@ <br/>      Rest[Most[NestList[Most, #, Length[#]] &amp;[Characters[ToString[n]]]]]</pre>"}, {"lang": "MATLAB", "loc": 62, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> largestTruncatablePrimes<span class=\"br0\">(</span>boundary<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%Helper function for checking if a prime is left of right truncatable</span><br/>    <span class=\"kw1\">function</span> <span class=\"br0\">[</span>leftTruncatable,rightTruncatable<span class=\"br0\">]</span> = isTruncatable<span class=\"br0\">(</span>prime,checkLeftTruncatable,checkRightTruncatable<span class=\"br0\">)</span><br/>\u00a0<br/>        numDigits = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/log10.html\"><span class=\"kw2\">log10</span></a><span class=\"br0\">(</span>prime<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%calculate the number of digits in the prime less one</span><br/>        powersOfTen = <span class=\"nu0\">10</span>.^<span class=\"br0\">(</span><span class=\"nu0\">0</span>:numDigits<span class=\"br0\">)</span>; <span class=\"co1\">%cache the needed powers of ten</span><br/>\u00a0<br/>        leftTruncated = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>prime,powersOfTen<span class=\"br0\">)</span>; <span class=\"co1\">%generate a list of numbers by repeatedly left truncating the prime</span><br/>\u00a0<br/>        <span class=\"co1\">%leading zeros will cause duplicate entries thus it is possible to</span><br/>        <span class=\"co1\">%detect leading zeros if we rotate the list to the left or right</span><br/>        <span class=\"co1\">%and check for any equivalences with the original list</span><br/>        hasLeadingZeros = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span> circshift<span class=\"br0\">(</span>leftTruncated,<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> == leftTruncated <span class=\"br0\">)</span>; <br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> hasLeadingZeros || not<span class=\"br0\">(</span>checkLeftTruncatable<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            leftTruncatable = false;<br/>        <span class=\"kw1\">else</span><br/>            <span class=\"co1\">%check if all of the left truncated numbers are prime</span><br/>            leftTruncatable = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>leftTruncated<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> checkRightTruncatable <span class=\"br0\">)</span><br/>            rightTruncated = <span class=\"br0\">(</span>prime - leftTruncated<span class=\"br0\">)</span> ./ powersOfTen; <span class=\"co1\">%generate a list of right truncated numbers</span><br/>            rightTruncatable = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>rightTruncated<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%check if all the right truncated numbers are prime</span><br/>        <span class=\"kw1\">else</span><br/>            rightTruncatable = false;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%isTruncatable()</span><br/>\u00a0<br/>    nums = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/primes.html\"><span class=\"kw2\">primes</span></a><span class=\"br0\">(</span>boundary<span class=\"br0\">)</span>; <span class=\"co1\">%generate all primes &lt;= boundary</span><br/>\u00a0<br/>    <span class=\"co1\">%Flags that indicate if the largest left or right truncatable prime has not</span><br/>    <span class=\"co1\">%been found</span><br/>    leftTruncateNotFound = true;<br/>    rightTruncateNotFound = true;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> prime = nums<span class=\"br0\">(</span><span class=\"kw1\">end</span>:-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">%Search through primes in reverse order</span><br/>\u00a0<br/>        <span class=\"co1\">%Get if the prime is left and/or right truncatable, ignoring</span><br/>        <span class=\"co1\">%checking for right truncatable if it has already been found</span><br/>        <span class=\"br0\">[</span>leftTruncatable,rightTruncatable<span class=\"br0\">]</span> = isTruncatable<span class=\"br0\">(</span>prime,leftTruncateNotFound,rightTruncateNotFound<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> leftTruncateNotFound &amp;&amp; leftTruncatable <span class=\"br0\">)</span> <span class=\"co1\">%print out largest left truncatable prime</span><br/>            display<span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>prime<span class=\"br0\">)</span> <span class=\"co2\">' is the largest left truncatable prime &lt;= '</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>boundary<span class=\"br0\">)</span> <span class=\"co2\">'.'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>            leftTruncateNotFound = false;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> rightTruncateNotFound &amp;&amp; rightTruncatable <span class=\"br0\">)</span> <span class=\"co1\">%print out largest right truncatable prime</span><br/>            display<span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>prime<span class=\"br0\">)</span> <span class=\"co2\">' is the largest right truncatable prime &lt;= '</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>boundary<span class=\"br0\">)</span> <span class=\"co2\">'.'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>            rightTruncateNotFound = false;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Terminate loop when the largest left and right truncatable primes have</span><br/>        <span class=\"co1\">%been found</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> not<span class=\"br0\">(</span>leftTruncateNotFound || rightTruncateNotFound<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\">import sets, strutils, algorithm<br/>\u00a0<br/>proc primes(n: int64): seq[int64] =<br/>  result = @[]<br/>  var multiples = initSet[int64]()<br/>  for i in 2..n:<br/>    if i notin multiples:<br/>      result.add i<br/>      for j in countup(i*i, n, i.int):<br/>        multiples.incl j<br/>\u00a0<br/>proc truncatablePrime(n: int64): tuple[left: int64, right: int64] =<br/>  var<br/>    primelist: seq[string] = @[]<br/>  for x in primes(n):<br/>    primelist.add($x)<br/>  reverse primelist<br/>  var primeset = toSet primelist<br/>  for n in primelist:<br/>    var alltruncs = initSet[string]()<br/>    for i in 0..n.len-1:<br/>      alltruncs.incl n[i..n.high]<br/>    if alltruncs &lt;= primeset:<br/>      result.left = parseInt(n)<br/>      break<br/>  for n in primelist:<br/>    var alltruncs = initSet[string]()<br/>    for i in 0..n.len-1:<br/>      alltruncs.incl n[0..i]<br/>    if alltruncs &lt;= primeset:<br/>      result.right = parseInt(n)<br/>      break<br/>\u00a0<br/>echo truncatablePrime(1000000'i64)</pre>"}, {"lang": "ooRexx", "loc": 67, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">-- find largest left- &amp; right-truncatable primes &lt; 1 million.</span><br/><span class=\"co1\">-- an initial set of primes (not, at this time, we leave out 2 because</span><br/><span class=\"co1\">-- we'll automatically skip the even numbers.  No point in doing a needless</span><br/><span class=\"co1\">-- test each time through</span><br/>primes = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- check all of the odd numbers up to 1,000,000</span><br/><span class=\"kw1\">loop</span> j = <span class=\"nu0\">13</span> <span class=\"kw2\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"nu0\">1000000</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> primes~size<br/>      prime = primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"co1\">-- found an even prime divisor</span><br/>      <span class=\"kw1\">if</span> j <span class=\"sy0\">//</span> prime == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j<br/>      <span class=\"co1\">-- only check up to the square root</span><br/>      <span class=\"kw1\">if</span> prime<span class=\"sy0\">*</span>prime <span class=\"sy0\">&gt;</span> j <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- we only get here if we don't find a divisor</span><br/>  primes~append<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- get a set of the primes that we can test more efficiently</span><br/>primeSet = <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>primeSet~putall<span class=\"br0\">(</span>primes<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'The last prime is'</span> primes<span class=\"br0\">[</span>primes~last<span class=\"br0\">]</span> <span class=\"st0\">\"(\"</span>primeSet~items <span class=\"st0\">'primes under one million).'</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>,<span class=\"nu0\">66</span><span class=\"br0\">)</span><br/>\u00a0<br/>lastLeft = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- we're going to use the array version to do these in order.  We're still</span><br/><span class=\"co1\">-- missing \"2\", but that's not going to be the largest</span><br/><span class=\"kw1\">loop</span> prime <span class=\"kw2\">over</span> primes<br/>\u00a0<br/>    <span class=\"co1\">-- values containing 0 can never work</span><br/>    <span class=\"kw1\">if</span> prime~<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>    <span class=\"co1\">-- now start the truncations, checking against our set of</span><br/>    <span class=\"co1\">-- known primes</span><br/>    <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">for</span> prime~<span class=\"kw6\">length</span> - <span class=\"nu0\">1</span><br/>        subprime = prime~<span class=\"kw6\">right</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"co1\">-- not in our known set, this can't work</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>primeset~hasIndex<span class=\"br0\">(</span>subprime<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> prime<br/>    <span class=\"kw3\">end</span><br/>    <span class=\"co1\">-- this, by definition, with be the largest left-trunc prime</span><br/>    lastLeft = prime<br/><span class=\"kw3\">end</span><br/><span class=\"co1\">-- now look for right-trunc primes</span><br/>lastRight = <span class=\"nu0\">0</span><br/><span class=\"kw1\">loop</span> prime <span class=\"kw2\">over</span> primes<br/>\u00a0<br/>    <span class=\"co1\">-- values containing 0 can never work</span><br/>    <span class=\"kw1\">if</span> prime~<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>    <span class=\"co1\">-- now start the truncations, checking against our set of</span><br/>    <span class=\"co1\">-- known primes</span><br/>    <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">for</span> prime~<span class=\"kw6\">length</span> - <span class=\"nu0\">1</span><br/>        subprime = prime~<span class=\"kw6\">left</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"co1\">-- not in our known set, this can't work</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>primeset~hasIndex<span class=\"br0\">(</span>subprime<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> prime<br/>    <span class=\"kw3\">end</span><br/>    <span class=\"co1\">-- this, by definition, with be the largest left-trunc prime</span><br/>    lastRight = prime<br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'The largest  left-truncatable prime is'</span> lastLeft <span class=\"st0\">'(under one million).'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The largest right-truncatable prime is'</span> lastRight <span class=\"st0\">'(under one million).'</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OpenEdge/Progress", "loc": 82, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">FUNCTION</span> isPrime <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_i <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">SQRT</span><span class=\"br0\">(</span> i_i <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>      <span class=\"kw1\">IF</span> i_i <span class=\"kw1\">MODULO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>         <span class=\"kw3\">RETURN</span> <span class=\"kw2\">FALSE</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw3\">RETURN</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">AND</span> i_i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* isPrime */</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isLeftTruncatablePrime <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_i <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii        <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> cc        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> lresult   <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"kw4\">INITIAL</span> <span class=\"kw2\">TRUE</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   cc <span class=\"sy0\">=</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> i_i <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> WHILE cc <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">lresult</span> <span class=\"sy0\">=</span> lresult <span class=\"kw1\">AND</span> isPrime<span class=\"br0\">(</span> <span class=\"kw3\">INTEGER</span><span class=\"br0\">(</span> cc <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      cc <span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> cc<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw3\">RETURN</span> lresult<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* isLeftTruncatablePrime */</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isRightTruncatablePrime <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_i <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii        <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> cc        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> lresult   <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"kw4\">INITIAL</span> <span class=\"kw2\">TRUE</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   cc <span class=\"sy0\">=</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> i_i <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> WHILE cc <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">lresult</span> <span class=\"sy0\">=</span> lresult <span class=\"kw1\">AND</span> isPrime<span class=\"br0\">(</span> <span class=\"kw3\">INTEGER</span><span class=\"br0\">(</span> cc <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      cc <span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> cc<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">LENGTH</span><span class=\"br0\">(</span> cc <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw3\">RETURN</span> lresult<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* isRightTruncatablePrime */</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> getHighestTruncatablePrimes <span class=\"kw1\">RETURNS</span> <span class=\"kw4\">CHARACTER</span> <span class=\"br0\">(</span><br/>   i_imax <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii        <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ileft     <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> iright    <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> i_imax <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> WHILE ileft <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">OR</span> iright <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>\u00a0<br/>      <span class=\"kw1\">IF</span> <span class=\"kw3\">INDEX</span><span class=\"br0\">(</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> ii <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">IF</span> ileft <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> isLeftTruncatablePrime<span class=\"br0\">(</span> ii <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            ileft <span class=\"sy0\">=</span> ii<span class=\"sy0\">.</span><br/>         <span class=\"kw1\">IF</span> iright <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> isRightTruncatablePrime<span class=\"br0\">(</span> ii <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            iright <span class=\"sy0\">=</span> ii<span class=\"sy0\">.</span><br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw3\">RETURN</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span><span class=\"st0\">\"Left: &amp;1~nRight: &amp;2\"</span><span class=\"sy0\">,</span> ileft<span class=\"sy0\">,</span> iright <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* getHighestTruncatablePrimes */</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> <br/>   getHighestTruncatablePrimes<span class=\"br0\">(</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 30, "block": "<pre class=\"parigp highlighted_source\">left<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>out<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><br/>\t\tt<span class=\"sy0\">*=</span><span class=\"nu1\">10</span><span class=\"sy0\">;</span><br/>\t\tu<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">forstep</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span>t<span class=\"sy0\">,</span>t<span class=\"sy0\">*</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>t<span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">isprime</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>a<span class=\"sy0\">+</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tout<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tv<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tout<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>right<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>out<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><br/>\t\tu<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">forstep</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">isprime</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tout<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tv<span class=\"sy0\">=</span>u<br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tout<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">[</span>left<span class=\"br0\">(</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>right<span class=\"br0\">(</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"st0\">\":all\"</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> isltrunc <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!~</span> <span class=\"co2\">/0/</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> isltrunc<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> isrtrunc <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!~</span> <span class=\"co2\">/0/</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> isrtrunc<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span>primes<span class=\"br0\">(</span>1e6<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isltrunc<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"ltrunc: $_<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span>primes<span class=\"br0\">(</span>1e6<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isrtrunc<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"rtrunc: $_<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> ltp <span class=\"sy0\">=</span> $<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ltp</span> <span class=\"br0\">{</span><br/>    $<span class=\"br0\">[</span> <span class=\"kw3\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>prime <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"re0\">@ltp</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> rtp <span class=\"sy0\">=</span> $<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@rtp</span> <span class=\"br0\">{</span><br/>    $<span class=\"br0\">[</span> <span class=\"kw3\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>prime <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">@rtp</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Highest ltp = \"</span><span class=\"sy0\">,</span> ltp<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Highest rtp = \"</span><span class=\"sy0\">,</span> rtp<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 38, "block": "<pre class=\"text highlighted_source\">constant N = 6, limit = power(10,N)<br/>-- standard sieve:<br/>enum L,R  -- (with primes[i] as mini bit-field)<br/>sequence primes = repeat(L+R, limit)<br/>primes[1] = 0<br/>for i=2 to floor(sqrt(limit)) do<br/>    if primes[i] then<br/>        for k=i*i to limit by i do<br/>            primes[k] = 0<br/>        end for<br/>    end if<br/>end for<br/>\u00a0<br/>-- propagate non-truncateables up the prime table:<br/>for p=1 to N-1 do<br/>    integer p10 = power(10,p)       -- ie 10, 100, .. 100_000<br/>    for i=p10+1 to p10*10-1 by 2 do -- to 99, 999, .. 999_999<br/>        if primes[i] then<br/>            integer l = remainder(i,p10),<br/>                    r = floor(i/10)<br/>            integer pi = and_bits(primes[l],L)+and_bits(primes[r],R)<br/>            if pi and find('0',sprint(i)) then pi = 0 end if<br/>            primes[i] = pi<br/>        end if<br/>    end for<br/>end for<br/>\u00a0<br/>integer maxl=0, maxr=0<br/>\u00a0<br/>for i=limit-1 to 1 by -2 do<br/>    integer pi = primes[i]<br/>    if pi then<br/>        if maxl=0 and and_bits(pi,L) then maxl = i end if<br/>        if maxr=0 and and_bits(pi,R) then maxr = i end if<br/>        if maxl!=0 and maxr!=0 then exit end if<br/>    end if<br/>end for<br/>?{maxl,maxr}</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(load \"@lib/rsa.l\")  # Use the 'prime?' function from RSA package<br/>\u00a0<br/>(de truncatablePrime? (N Fun)<br/>   (for (L (chop N) L (Fun L))<br/>      (T (= \"0\" (car L)))<br/>      (NIL (prime? (format L)))<br/>      T ) )<br/>\u00a0<br/>(let (Left 1000000  Right 1000000)<br/>   (until (truncatablePrime? (dec 'Left) cdr))<br/>   (until (truncatablePrime? (dec 'Right) '((L) (cdr (rot L)))))<br/>   (cons Left Right) )</pre>"}, {"lang": "PL/I", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>tp: procedure options (main);<br/>    declare primes(1000000) bit (1);<br/>    declare max_primes fixed binary (31);<br/>    declare (i, k) fixed binary (31);<br/>\u00a0<br/>    max_primes = hbound(primes, 1);<br/>    call sieve;<br/>\u00a0<br/>   /* Now search for primes that are right-truncatable. */<br/>   call right_truncatable;<br/>\u00a0<br/>   /* Now search for primes that are left-truncatable. */<br/>   call left_truncatable;<br/>\u00a0<br/>right_truncatable: procedure;<br/>   declare direction bit (1);<br/>   declare (i, k) fixed binary (31);<br/>\u00a0<br/>test_truncatable:<br/>   do i = max_primes to 2 by -1;<br/>      if primes(i) then /* it's a prime */<br/>         do;<br/>            k = i/10;<br/>            do while (k &gt; 0);<br/>               if ^primes(k) then iterate test_truncatable;<br/>               k = k/10;<br/>            end;<br/>            put skip list (i || ' is right-truncatable');<br/>            return;<br/>         end;<br/>   end;<br/>end right_truncatable;<br/>\u00a0<br/>left_truncatable: procedure;<br/>   declare direction bit (1);<br/>   declare (i, k, d, e) fixed binary (31);<br/>\u00a0<br/>test_truncatable:<br/>   do i = max_primes to 2 by -1;<br/>      if primes(i) then /* it's a prime */<br/>         do;<br/>            k = i;<br/>            do d = 100000 repeat d/10 until (d = 10);<br/>               e = k/d;<br/>               k = k - e*d;<br/>               if e = 0 then iterate test_truncatable;<br/>               if ^primes(k) then iterate test_truncatable;<br/>            end;<br/>            put skip list (i || ' is left-truncatable');<br/>            return;<br/>         end;<br/>   end;<br/>end left_truncatable;<br/>\u00a0<br/>sieve: procedure;<br/>   declare (i, j) fixed binary (31);<br/>\u00a0<br/>   primes = '1'b; primes(1) = '0'b;<br/>\u00a0<br/>   do i = 2 to sqrt(max_primes);<br/>      do j = i+i to max_primes by i;<br/>         primes(j) = '0'b;<br/>      end;<br/>   end;<br/>end sieve;<br/>\u00a0<br/>end tp;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 51, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> IsPrime <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$num</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$isprime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"nu0\">2</span>..<span class=\"br0\">[</span>math<span class=\"br0\">]</span>::sqrt<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span> <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>        <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">*</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>\u00a0; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$num</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span> <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"nu0\">2</span>..<span class=\"re0\">$num</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> Truncatable <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$num</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$declen</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::abs<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span>.Length<br/>    <span class=\"re0\">$primes</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$ltprimes</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"re0\">$rtprimes</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"nu0\">1</span>..<span class=\"re0\">$declen</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"fac7ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">{</span><span class=\"br0\">}</span>; <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"c1fc81\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    IsPrime <span class=\"re0\">$num</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$lastltprime</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"re0\">$lastrtprime</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$curprim</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"re0\">$curdeclen</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span>.Length<br/>        <span class=\"re0\">$primes</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$curprim</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$curdeclen</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$curprim</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>            <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$curprim</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>            <span class=\"re0\">$lastltprime</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span><br/>            <span class=\"re0\">$lastrtprime</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$curmod</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::pow<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$curdiv</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::floor<span class=\"br0\">(</span><span class=\"re0\">$curprim</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$curmod</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$curprim</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>                <span class=\"re0\">$lastltprime</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$curdiv</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$curprim</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span> <br/>                <span class=\"re0\">$lastrtprime</span> <span class=\"sy0\">=</span> <span class=\"re0\">$curprim</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.Keys.count <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.Keys.count <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$ltprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.Keys.count <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.Keys.count <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$rtprimes</span><span class=\"br0\">[</span><span class=\"re0\">$curdeclen</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"Largest Left Truncatable Prime: $lastltprime\"</span><br/>        <span class=\"st0\">\"Largest Right Truncatable Prime: $lastrtprime\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 68, "block": "<pre class=\"purebasic highlighted_source\">#MaxLim <span class=\"sy0\">=</span> <span class=\"nu0\">999999</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> is_Prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span>     n<span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False<br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span> \u00a0: <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">%</span>2<span class=\"sy0\">=</span><span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> #False<br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span> \u00a0: <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">%</span>3<span class=\"sy0\">=</span><span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> #False<br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Protected</span> r<span class=\"sy0\">=</span><span class=\"kw2\">Round</span><span class=\"br0\">(</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,#PB_Round_Down<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> f<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>    <span class=\"kw1\">While</span> f<span class=\"sy0\">&lt;=</span>r<br/>      <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>f<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> n<span class=\"sy0\">%</span><span class=\"br0\">(</span>f<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #False<br/>      <span class=\"kw1\">EndIf</span><br/>      f<span class=\"sy0\">+</span><span class=\"nu0\">6</span><br/>    <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> TruncateLeft<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> s.s<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, l<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>s,<span class=\"st0\">\"0\"</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">While</span> l<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      s<span class=\"sy0\">=</span><span class=\"kw2\">Right</span><span class=\"br0\">(</span>s,l<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> is_Prime<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #False<br/>      <span class=\"kw1\">EndIf</span><br/>      l<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> TruncateRight<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    a<span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> a<br/>      <span class=\"kw1\">Break</span><br/>    <span class=\"kw1\">ElseIf</span> <span class=\"kw1\">Not</span> is_Prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> a<span class=\"sy0\">%</span>10<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ForEver</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/>i<span class=\"sy0\">=</span>#MaxLim<br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw1\">If</span> is_Prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> truncateleft <span class=\"kw1\">And</span> TruncateLeft<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      truncateleft<span class=\"sy0\">=</span>i<br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> truncateright <span class=\"kw1\">And</span> TruncateRight<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      truncateright<span class=\"sy0\">=</span>i<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> truncateleft <span class=\"kw1\">And</span> truncateright<br/>    <span class=\"kw1\">Break</span> <br/>  <span class=\"kw1\">Else</span><br/>    i<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">Until</span> i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>x.s<span class=\"sy0\">=</span><span class=\"st0\">\"Largest TruncateLeft= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>truncateleft<span class=\"br0\">)</span><br/>y.s<span class=\"sy0\">=</span><span class=\"st0\">\"Largest TruncateRight= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>truncateright<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Truncatable primes\"</span>,x<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>y<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 30, "block": "<pre class=\"python highlighted_source\">maxprime <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/><span class=\"kw1\">def</span> primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    multiples <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    prime <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> multiples:<br/>            prime.<span class=\"me1\">append</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            multiples.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>i*i<span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> prime<br/>\u00a0<br/><span class=\"kw1\">def</span> truncatableprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Return a longest left and right truncatable primes below n'</span><br/>    primelist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    primeset <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>primelist<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> primelist:<br/>        <span class=\"co1\"># n = 'abc'; [n[i:] for i in range(len(n))] -&gt; ['abc', 'bc', 'c']</span><br/>        alltruncs <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span>i:<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> alltruncs.<span class=\"me1\">issubset</span><span class=\"br0\">(</span>primeset<span class=\"br0\">)</span>:<br/>            truncateleft <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> primelist:<br/>        <span class=\"co1\"># n = 'abc'; [n[:i+1] for i in range(len(n))] -&gt; ['a', 'ab', 'abc']</span><br/>        alltruncs <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">[</span>:i+<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> alltruncs.<span class=\"me1\">issubset</span><span class=\"br0\">(</span>primeset<span class=\"br0\">)</span>:<br/>            truncateright <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">return</span> truncateleft<span class=\"sy0\">,</span> truncateright<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>truncatableprime<span class=\"br0\">(</span>maxprime<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math/number-theory)<br/>\u00a0<br/>(define (truncate-right n)<br/>  (quotient n 10))<br/>\u00a0<br/>(define (truncate-left n)<br/>  (define s (number-&gt;string n))<br/>  (string-&gt;number (substring s 1 (string-length s))))<br/>\u00a0<br/>(define (contains-zero? n)<br/>  (member #\\0 (string-&gt;list (number-&gt;string n))))<br/>\u00a0<br/>(define (truncatable? truncate n)<br/>  (and (prime? n)<br/>       (not (contains-zero? n))<br/>       (or (&lt; n 10)<br/>           (truncatable? truncate (truncate n)))))<br/>\u00a0<br/>; largest left truncatable prime<br/>(for/first ([n (in-range 1000000 1 -1)]<br/>            #:when (truncatable? truncate-left n))<br/>  n)<br/>\u00a0<br/>; largest right truncatable prime<br/>(for/first ([n (in-range 1000000 1 -1)]<br/>            #:when (truncatable? truncate-right n))<br/>  n)<br/>\u00a0<br/>; Output:<br/>998443<br/>739399<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 40, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds largest  left\u2500 and right\u2500truncatable  primes \u2264 1m  (or argument 1).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> high <span class=\"sy0\">.</span>;    <span class=\"kw1\">if</span> high==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> high=<span class=\"nu0\">1000000</span>        <span class=\"coMULTI\">/*Not specified?  Then use 1m*/</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*placeholders for primes;  max width. */</span><br/>@<span class=\"sy0\">.</span>1=<span class=\"nu0\">2</span>;  @<span class=\"sy0\">.</span>2=<span class=\"nu0\">3</span>;  @<span class=\"sy0\">.</span>3=<span class=\"nu0\">5</span>;  @<span class=\"sy0\">.</span>4=<span class=\"nu0\">7</span>;  @<span class=\"sy0\">.</span>5=<span class=\"nu0\">11</span>;  @<span class=\"sy0\">.</span>6=<span class=\"nu0\">13</span>;  @<span class=\"sy0\">.</span>7=<span class=\"nu0\">17</span>   <span class=\"coMULTI\">/*define some low primes.    */</span><br/>!<span class=\"sy0\">.</span>2=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>3=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>5=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>7=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>11=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>13=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>17=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*set some low prime flags.  */</span><br/>#=<span class=\"nu0\">7</span>;    s<span class=\"sy0\">.</span>#<a class=\"__cf_email__\" data-cfemail=\"af92ef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                               <span class=\"coMULTI\">/*number of primes so far;     prime\u00b2. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  generate more  primes  \u2264  high.*/</span><br/>   <span class=\"kw1\">do</span> <a class=\"__cf_email__\" data-cfemail=\"c7adfa87\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#+<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, high%<a class=\"__cf_email__\" data-cfemail=\"5f6d721f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#%2-<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*only find odd primes from here on out*/</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span> <span class=\"nu0\">3</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*is J divisible by three?             */</span><br/>   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> j <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _; <span class=\"kw1\">if</span>     _==<span class=\"nu0\">5</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/* \" \"     \"      \" five? (right digit)*/</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span> <span class=\"nu0\">7</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/* \" \"     \"      \" seven?             */</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">11</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/* \" \"     \"      \" eleven?            */</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">13</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/* \" \"     \"      \" thirteen?          */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  the above five lines saves time*/</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">7</span>  <span class=\"kw2\">while</span> s<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>=j                   <span class=\"coMULTI\">/* [\u2193]  divide by the known odd primes.*/</span><br/>          <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j           <span class=\"coMULTI\">/*Is J \u00f7  X?  Then not prime.    ___   */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                            <span class=\"coMULTI\">/* [\u2191]  only process up to the  \u221a J    */</span><br/>   #=#+<span class=\"nu0\">1</span>                                         <span class=\"coMULTI\">/*bump the number of primes found.     */</span><br/>   @<span class=\"sy0\">.</span>#=j;      s<span class=\"sy0\">.</span>#=j<span class=\"sy0\">*</span>j;    \u00a0!<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*assign next prime;  prime\u00b2;  prime #.*/</span><br/>   <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  find largest left truncatable P*/</span><br/>  <span class=\"kw1\">do</span> L=#  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;    digs=<span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>L<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*search from top end;  get the length.*/</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> digs;  _=<span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>L, k<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*validate all left truncatable primes.*/</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>!<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> L                  <span class=\"coMULTI\">/*Truncated number not prime?  Skip it.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw1\">leave</span>                                          <span class=\"coMULTI\">/*egress, found left truncatable prime.*/</span><br/>  <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*L*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  find largest right truncated P.*/</span><br/>  <span class=\"kw1\">do</span> R=#  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;    digs=<span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>R<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*search from top end;  get the length.*/</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> digs;  _=<span class=\"kw6\">left</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>R, k<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*validate all right truncatable primes*/</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>!<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> R                  <span class=\"coMULTI\">/*Truncated number not prime?  Skip it.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw1\">leave</span>                                          <span class=\"coMULTI\">/*egress, found right truncatable prime*/</span><br/>  <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*R*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  show largest left/right trunc P*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The last prime found is '</span>   @<span class=\"sy0\">.</span>#    <span class=\"st0\">\" (there are\"</span>   #   <span class=\"st0\">'primes \u2264'</span>  high<span class=\"st0\">\").\"</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">70</span><span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*show a separator line for the output.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The largest  left\u2500truncatable prime \u2264'</span>        high        <span class=\"st0\">\" is \"</span>       <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>L, w<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The largest right\u2500truncatable prime \u2264'</span>        high        <span class=\"st0\">\" is \"</span>       <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>R, w<span class=\"br0\">)</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Truncatable primes<br/>\u00a0<br/>for n = 1000000 to 1 step -1<br/>    flag = 1<br/>    flag2 = 1<br/>    strn = string(n)<br/>    for nr = 1 to len(strn)<br/>        if strn[nr] = \"0\"<br/>           flag2 = 0<br/>        ok<br/>    next<br/>    if flag2 = 1<br/>       for m = 1 to len(strn)<br/>           strp = right(strn, m)<br/>           if isprime(number(strp))<br/>           else<br/>              flag = 0<br/>              exit<br/>           ok<br/>       next<br/>       if flag = 1<br/>          nend = n<br/>          exit<br/>       ok<br/>    ok<br/>next<br/>see \"Largest left truncatable prime\u00a0: \" + nend + nl<br/>\u00a0<br/>for n = 1000000 to 1 step -1<br/>    flag = 1<br/>    strn = string(n)<br/>    for m = 1 to len(strn)<br/>        strp = left(strn, len(strn) - m + 1)<br/>        if isprime(number(strp))<br/>        else<br/>           flag = 0<br/>           exit<br/>        ok<br/>    next<br/>    if flag = 1 <br/>       nend = n<br/>       exit<br/>    ok<br/>next<br/>see \"Largest right truncatable prime\u00a0: \" + nend + nl<br/>\u00a0<br/>func isprime num<br/>     if (num &lt;= 1) return 0 ok<br/>     if (num\u00a0% 2 = 0 and num\u00a0!= 2) return 0 ok<br/>     for i = 3 to floor(num / 2) -1 step 2<br/>         if (num\u00a0% i = 0) return 0 ok<br/>     next<br/>     return 1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> left_truncatable?<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  truncatable?<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> i.<span class=\"me1\">to_s</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> right_truncatable?<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  truncatable?<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> i<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> truncatable?<span class=\"br0\">(</span>n, <span class=\"sy0\">&amp;</span>trunc_func<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">to_s</span>.<span class=\"kw1\">include</span>? <span class=\"st0\">\"0\"</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    n = trunc_func.<span class=\"me1\">call</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">true</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">zero</span>?<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">unless</span> Prime.<span class=\"me1\">prime</span>?<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>primes = Prime.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">reverse</span><br/>\u00a0<br/><span class=\"kw3\">p</span> primes.<span class=\"me1\">detect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> left_truncatable? <span class=\"kw3\">p</span><span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> primes.<span class=\"me1\">detect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> right_truncatable? <span class=\"kw3\">p</span><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func t_prime<span class=\"br0\">(</span>n, left=<span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"kw3\">p</span> = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>    var f = <span class=\"br0\">(</span><br/>        left\u00a0? <span class=\"br0\">{</span> <span class=\"st0\">'1'</span>..<span class=\"st0\">'9'</span> ~X<span class=\"sy0\">+</span> <span class=\"kw3\">p</span> <span class=\"br0\">}</span><br/>            \u00a0: <span class=\"br0\">{</span> <span class=\"kw3\">p</span> ~X<span class=\"sy0\">+</span> <span class=\"st0\">'1'</span>..<span class=\"st0\">'9'</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><br/>    n.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">p</span> = f<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span> .<span class=\"me1\">to_i</span>.<span class=\"me1\">is_prime</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">p</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say t_prime<span class=\"br0\">(</span><span class=\"nu0\">5</span>, left: <span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>say t_prime<span class=\"br0\">(</span><span class=\"nu0\">5</span>, left: <span class=\"kw2\">false</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 66, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Optimized version of the Sieve-of-Eratosthenes task solution</span><br/><span class=\"kw1\">proc</span> sieve n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> primes <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$primes</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> nums <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        dict <span class=\"kw1\">set</span> nums <span class=\"re0\">$i</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> next <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">set</span> limit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$next</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$next</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"re0\">$next</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>dict unset nums <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> primes <span class=\"re0\">$next</span><br/>\tdict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>next -<span class=\"br0\">}</span> <span class=\"re0\">$nums</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$primes</span> <span class=\"br0\">[</span>dict keys <span class=\"re0\">$nums</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> isLeftTruncatable n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> isPrime<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist isPrime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$n</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> isRightTruncatable n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> isPrime<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist isPrime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> false<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$n</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demo code</span><br/><span class=\"kw1\">set</span> limit <span class=\"nu0\">1000000</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"calculating primes up to $limit\"</span><br/><span class=\"kw1\">set</span> primes <span class=\"br0\">[</span>sieve <span class=\"re0\">$limit</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"search space contains [llength $primes] members\"</span><br/><span class=\"kw1\">foreach</span> p <span class=\"re0\">$primes</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> isPrime<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"st0\">\"yes\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> primes <span class=\"br0\">[</span>lreverse <span class=\"re0\">$primes</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"searching for largest left-truncatable prime\"</span><br/><span class=\"kw1\">foreach</span> p <span class=\"re0\">$primes</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isLeftTruncatable <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> FOUND:<span class=\"re0\">$p</span><br/>\t<span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"searching for largest right-truncatable prime\"</span><br/><span class=\"kw1\">foreach</span> p <span class=\"re0\">$primes</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isRightTruncatable <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> FOUND:<span class=\"re0\">$p</span><br/>\t<span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 70, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>start_time = Now<br/>\u00a0<br/>lt = 0<br/>rt = 0<br/>\u00a0<br/><span class=\"kw3\">For</span> h = 1 <span class=\"kw3\">To</span> 1000000<br/>\t<span class=\"kw3\">If</span> IsLeftTruncatable(h) <span class=\"kw3\">And</span> h &gt; lt <span class=\"kw3\">Then</span><br/>\t\tlt = h<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">If</span> IsRightTruncatable(h) <span class=\"kw3\">And</span> h &gt; rt <span class=\"kw3\">Then</span><br/>\t\trt = h<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/>end_time = now<br/>\u00a0<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Largest LTP from 1..1000000: \"</span> &amp; lt<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Largest RTP from 1..1000000: \"</span> &amp; rt<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Elapse Time(seconds)      \u00a0: \"</span> &amp; DateDiff(<span class=\"st0\">\"s\"</span>,start_time,end_time)<br/>\u00a0<br/><span class=\"co1\">'------------<br/></span><span class=\"kw2\">Function</span> IsLeftTruncatable(n)<br/>\tIsLeftTruncatable = <span class=\"kw5\">False</span><br/>\tc = 0<br/>\t<span class=\"kw3\">For</span> i = Len(n) <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t<span class=\"kw3\">If</span> InStr(1,n,<span class=\"st0\">\"0\"</span>) &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">If</span> IsPrime(Right(n,i)) <span class=\"kw3\">Then</span><br/>\t\t\tc = c + 1<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">If</span> c = Len(n) <span class=\"kw3\">Then</span><br/>\t\tIsLeftTruncatable = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsRightTruncatable(n)<br/>\tIsRightTruncatable = <span class=\"kw5\">False</span><br/>\tc = 0<br/>\t<span class=\"kw3\">For</span> i = Len(n) <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t<span class=\"kw3\">If</span> InStr(1,n,<span class=\"st0\">\"0\"</span>) &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">If</span> IsPrime(Left(n,i)) <span class=\"kw3\">Then</span><br/>\t\t\tc = c + 1<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">If</span> c = Len(n) <span class=\"kw3\">Then</span><br/>\t\tIsRightTruncatable = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPrime(n)<br/>\t<span class=\"kw3\">If</span> n = 2 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">ElseIf</span> n &lt;= 1 <span class=\"kw3\">Or</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Int(Sqr(n)) <span class=\"kw3\">Step</span> 2<br/>\t\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 42, "block": "<pre class=\"text highlighted_source\">code CrLf=9, IntOut=11;<br/>\u00a0<br/>func Prime(P);          \\Return true if P is a prime number<br/>int  P;                 \\(1 is not prime, but 2 is, etc.)<br/>int  I;<br/>[if P&lt;=1 then return false;     \\negative numbers are not prime<br/>for I:= 2 to sqrt(P) do<br/>        if rem(P/I) = 0 then return false;<br/>return true;<br/>];<br/>\u00a0<br/>func RightTrunc(N);     \\Return largest right-truncatable prime &lt; one million<br/>int N;<br/>int M;<br/>[for N:= 1_000_000-1 downto 2 do<br/>        [M:= N;<br/>        loop    [if not Prime(M) then quit;<br/>                M:= M/10;<br/>                if rem(0) = 0 then quit;        \\no zeros allowed<br/>                if M=0 then return N;<br/>                ];<br/>        ];<br/>];<br/>\u00a0<br/>func LeftTrunc(N);      \\Return largest left-truncatable prime &lt; one million<br/>int N;<br/>int M, P;<br/>[for N:= 1_000_000-1 downto 2 do<br/>        [M:= N;<br/>        P:=100_000;<br/>        loop    [if not Prime(M) then quit;<br/>                M:= rem(M/P);<br/>                P:= P/10;<br/>                if M&lt;P then quit;               \\no zeros allowed<br/>                if M=0 then return N;<br/>                ];<br/>        ];<br/>];<br/>\u00a0<br/>[IntOut(0, LeftTrunc);  CrLf(0);<br/> IntOut(0, RightTrunc); CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">const million=0d1_000_000;<br/>\u00a0<br/>var pTable=Data(million+1,Int).fill(0);\t// actually bytes, all zero<br/>primes:=Utils.Generator(Import(\"sieve\").postponed_sieve);<br/>while((p:=primes.next())&lt;million){ pTable[p]=1; }<br/>\u00a0<br/>fcn rightTrunc(n){<br/>   while(n){ if(not pTable[n]) return(False); n/=10; }<br/>   True<br/>}<br/>fcn leftTrunc(n){  // 999,907 is not allowed<br/>   ns:=n.toString(); if (ns.holds(\"0\")) return(False);<br/>   while(ns){ if(not pTable[ns]) return(False); ns=ns[1,*]; }<br/>   True<br/>}</pre>"}]}