{"task": "Arbitrary-precision_integers_(included)", "blocks": [{"lang": "8th", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>200000 n#<br/>5 4 3 2 bfloat ^ ^ ^<br/>\"%.0f\" s:strfmt<br/>dup s:len . \" digits\" . cr<br/>dup 20 s:lsub . \"...\" .  20 s:rsub . cr<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>in-package <span class=\"st0\">\"ACL2\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>include-book <span class=\"st0\">\"arithmetic-3/floor-mod/floor-mod\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">system</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>set-print-<span class=\"kw1\">length</span> <span class=\"nu0\">0</span> state<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> arbitrary-precision <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">mode</span> <span class=\"sy0\">:</span><span class=\"me1\">program</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>s <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>col str<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>fmt1-to-string <span class=\"st0\">\"~xx\"</span> <br/>                                     <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                     <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>ignore col<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>cw <span class=\"st0\">\"~s0 ... ~x1 (~x2 digits)~%\"</span><br/>             <span class=\"br0\">(</span>subseq s <span class=\"nu0\">1</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>mod x <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 16, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNATCOLL.<span class=\"me1\">GMP</span>; <span class=\"kw3\">use</span> GNATCOLL.<span class=\"me1\">GMP</span>;<br/><span class=\"kw3\">with</span> GNATCOLL.<span class=\"me1\">GMP</span>.<span class=\"me1\">Integers</span>; <span class=\"kw3\">use</span> GNATCOLL.<span class=\"me1\">GMP</span>.<span class=\"me1\">Integers</span>;<br/><span class=\"kw3\">procedure</span> ArbitraryInt <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> stracc <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> String;<br/>   BigInt\u00a0: Big_Integer;<br/>   len\u00a0: Natural;<br/>   str\u00a0: stracc;<br/><span class=\"kw1\">begin</span><br/>   Set <span class=\"br0\">(</span>BigInt, <span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>   Raise_To_N <span class=\"br0\">(</span>BigInt, Unsigned_Long <span class=\"br0\">(</span><span class=\"nu0\">4</span>**<span class=\"br0\">(</span><span class=\"nu0\">3</span>**<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   str\u00a0:= <span class=\"kw3\">new</span> String'<span class=\"br0\">(</span>Image <span class=\"br0\">(</span>BigInt<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   len\u00a0:= str'Length;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Size is:\"</span>&amp; Natural'Image <span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>str <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\".....\"</span> &amp; str <span class=\"br0\">(</span>len - <span class=\"nu0\">19</span> .. <span class=\"me1\">len</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> ArbitraryInt;</pre>"}, {"lang": "ALGOL 68", "loc": 42, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>COMMENT<br/>   The task specifies<br/>\u00a0<br/>   <span class=\"st0\">\"Strictly speaking, this should not be solved by fixed-precision<br/>   numeric libraries where the precision has to be manually set to a<br/>   large value; although if this is the only recourse then it may be<br/>   used with a note explaining that the precision must be set manually<br/>   to a large enough value.\"</span><br/>\u00a0<br/>   Now one should always speak strictly<span class=\"sy1\">,</span> especially to animals and<br/>   small children and<span class=\"sy1\">,</span> strictly speaking<span class=\"sy1\">,</span> Algol 68 Genie requires that<br/>   a non<span class=\"sy1\">-</span>default numeric precision for a <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> be specified by<br/>   <span class=\"st0\">\"precision=&lt;integral denotation&gt;\"</span> either in a source code PRAGMAT<br/>   or as a command line argument.  However<span class=\"sy1\">,</span> that specification need<br/>   not be made manually.  This snippet of code outputs an appropriate<br/>   PRAGMAT<br/>\u00a0<br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>xgl$<span class=\"sy1\">,</span> <span class=\"st0\">\"PR precision=\"</span><span class=\"sy1\">,</span><br/>\t    <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span><span class=\"re1\">1.0</span> <span class=\"sy1\">+</span> <span class=\"kw24\">log</span> <span class=\"br0\">(</span>5<span class=\"br0\">)</span> <span class=\"sy1\">*</span> 4<span class=\"sy1\">^</span><span class=\"br0\">(</span>3<span class=\"sy1\">^</span><span class=\"br0\">(</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"PR\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   and the technique shown in the <span class=\"st0\">\"Call a foreign-language function\"</span><br/>   task used to write<span class=\"sy1\">,</span> compile and run an Algol 68 program in which<br/>   the precision is programmatically determined.<br/>\u00a0<br/>   The default stack size on this machine is also inadequate but twice<br/>   the default is sufficient.  The PRAGMAT below can be machine<br/>   generated with<br/>\u00a0<br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>xgl$<span class=\"sy1\">,</span> <span class=\"st0\">\"PR stack=\"</span><span class=\"sy1\">,</span> 2 <span class=\"sy1\">*</span> system stack size<span class=\"sy1\">,</span> <span class=\"st0\">\"PR\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>COMMENT<br/>   <span class=\"co2\">PR precision=183231 PR</span><br/>   <span class=\"co2\">PR stack=16777216 PR</span><br/>   <span class=\"kw3\">INT</span> digits <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span><span class=\"re1\">1.0</span> <span class=\"sy1\">+</span> <span class=\"kw24\">log</span> <span class=\"br0\">(</span>5<span class=\"br0\">)</span> <span class=\"sy1\">*</span> 4<span class=\"sy1\">^</span><span class=\"br0\">(</span>3<span class=\"sy1\">^</span><span class=\"br0\">(</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> exponent <span class=\"sy1\">=</span> 4<span class=\"sy1\">^</span><span class=\"br0\">(</span>3<span class=\"sy1\">^</span>2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> big <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 5<span class=\"sy1\">^</span>exponent<span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gxg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"st0\">\" First 20 digits:\"</span><span class=\"sy1\">,</span> big <span class=\"sy1\">%</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 10 <span class=\"sy1\">^</span> <span class=\"br0\">(</span>digits <span class=\"sy1\">-</span> 20<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gxg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"st0\">\"  Last 20 digits:\"</span><span class=\"sy1\">,</span> big <span class=\"kw12\">MOD</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> 10 <span class=\"sy1\">^</span> 20<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gxg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"st0\">\"Number of digits:\"</span><span class=\"sy1\">,</span> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "Alore", "loc": 9, "block": "<pre class=\"text highlighted_source\">def Main()<br/>  var len as Int<br/>  var result as Str<br/>  result = Str(5**4**3**2)<br/>  len = result.length()<br/>  Print(len)  <br/>  Print(result[:20])<br/>  Print(result[len-20:])<br/>end</pre>"}, {"lang": "bc", "loc": 8, "block": "<pre class=\"text highlighted_source\">/* 5432.bc */<br/>\u00a0<br/>y = 5 ^ 4 ^ 3 ^ 2<br/>c = length(y)<br/>\" First 20 digits: \"; y / (10 ^ (c - 20))<br/>\"  Last 20 digits: \"; y\u00a0% (10 ^ 20)<br/>\"Number of digits: \"; c<br/>quit</pre>"}, {"lang": "Bracmat", "loc": 4, "block": "<pre class=\"text highlighted_source\">{?} @(5^4^3^2:?first [20\u00a0? [-21\u00a0?last [?length)&amp;str$(!first \"...\"\u00a0!last \"\\nlength \"\u00a0!length)<br/>{!} 62060698786608744707...92256259918212890625<br/>length 183231<br/>    S   2,46 sec</pre>"}, {"lang": "C", "loc": 21, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmpz_t a<span class=\"sy0\">;</span><br/>\tmpz_init_set_ui<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_pow_ui<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* 2**18 == 4**9 */</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> mpz_sizeinbase<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"GMP says size is:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* because GMP may report size 1 too big; see doc */</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> mpz_get_str<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"size really is\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Digits:\u00a0%.20s...%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> s <span class=\"sy0\">+</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// free(s); /* we could, but we won't. we are exiting anyway */</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;boost/multiprecision/gmp.hpp&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> mp <span class=\"sy1\">=</span> boost<span class=\"sy4\">::</span><span class=\"me2\">multiprecision</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// We could just use (1 &lt;&lt; 18) instead of tmpres, but let's point out one</span><br/>    <span class=\"co1\">// pecularity with gmp and hence boost::multiprecision: they won't accept</span><br/>    <span class=\"co1\">// a second mpz_int with pow(). Therefore, if we stick to multiprecision</span><br/>    <span class=\"co1\">// pow we need to convert_to&lt;uint64_t&gt;().</span><br/>    <span class=\"kw4\">uint64_t</span> tmpres <span class=\"sy1\">=</span> mp<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>mp<span class=\"sy4\">::</span><span class=\"me2\">mpz_int</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>                            , mp<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>mp<span class=\"sy4\">::</span><span class=\"me2\">mpz_int</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                                    , <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">convert_to</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">uint64_t</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                      <span class=\"br0\">)</span>.<span class=\"me1\">convert_to</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">uint64_t</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    mp<span class=\"sy4\">::</span><span class=\"me2\">mpz_int</span> res <span class=\"sy1\">=</span> mp<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>mp<span class=\"sy4\">::</span><span class=\"me2\">mpz_int</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>, tmpres<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy1\">=</span> res.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span> <br/>              <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"...\"</span><br/>              <span class=\"sy1\">&lt;&lt;</span> s.<span class=\"me1\">substr</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BigInteger n <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> result <span class=\"sy0\">=</span> n<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Debug<span class=\"sy0\">.</span><span class=\"me1\">Assert</span><span class=\"br0\">(</span>result<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">183231</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Debug<span class=\"sy0\">.</span><span class=\"me1\">Assert</span><span class=\"br0\">(</span>result<span class=\"sy0\">.</span><span class=\"me1\">StartsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"62060698786608744707\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Debug<span class=\"sy0\">.</span><span class=\"me1\">Assert</span><span class=\"br0\">(</span>result<span class=\"sy0\">.</span><span class=\"me1\">EndsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"92256259918212890625\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"n = 5^4^3^2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"n = {0}...{1}\"</span>, <br/>            result<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>,<br/>            result<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>result<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"n digits = {0}\"</span>, result<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 25, "block": "<pre class=\"text highlighted_source\">import ceylon.whole {<br/>    wholeNumber,<br/>    two<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>    value five = wholeNumber(5);<br/>    value four = wholeNumber(4);<br/>    value three = wholeNumber(3);<br/>\u00a0<br/>    value bigNumber = five ^ four ^ three ^ two;<br/>\u00a0<br/>    value firstTwenty = \"62060698786608744707\";<br/>    value lastTwenty =  \"92256259918212890625\";<br/>    value bigString = bigNumber.string;<br/>\u00a0<br/>    \"The number must start with ``firstTwenty`` and end with ``lastTwenty``\"<br/>    assert(bigString.startsWith(firstTwenty), bigString.endsWith(lastTwenty));<br/>\u00a0<br/>    value bigSize = bigString.size;<br/>    print(\"The first twenty digits are ``bigString[...19]``\");<br/>    print(\"The last twenty digits are ``bigString[(bigSize - 20)...]``\");<br/>    print(\"The number of digits in 5^4^3^2 is ``bigSize``\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> exp <span class=\"br0\">[</span>n k<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> k n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> big <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>exp <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>exp <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>exp <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> sbig <span class=\"br0\">(</span><span class=\"kw1\">str</span> big<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"st0\">\"62060698786608744707\"</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>substring sbig <span class=\"nu0\">0</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"st0\">\"92256259918212890625\"</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>substring sbig <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> sbig<span class=\"br0\">)</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">count</span> sbig<span class=\"br0\">)</span> <span class=\"st0\">\"digits\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>substring sbig <span class=\"nu0\">0</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">\"..\"</span><br/>\t      <span class=\"br0\">(</span><span class=\"sy0\">.</span>substring sbig <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> sbig<span class=\"br0\">)</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"(\"</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> sbig<span class=\"br0\">)</span> <span class=\"st0\">\" digits)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 134, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> arbitrary-precision-integers<span class=\"sy0\">.</span><br/>       remarks<span class=\"sy0\">.</span> Uses opaque libgmp internals that are built <span class=\"kw2\">into</span> libcob<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> gmp-<span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-alloc          <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-<span class=\"kw3\">size</span>           <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-limb           <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> gmp-build<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-alloc          <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-<span class=\"kw3\">size</span>           <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mp-limb           <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> the-int              <span class=\"kw3\">usage</span> binary-c-long unsigned<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> the-exponent         <span class=\"kw3\">usage</span> binary-c-long unsigned<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> valid-exponent       <span class=\"kw3\">usage</span> binary-long <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">88</span> cant-<span class=\"kw3\">use</span>          <span class=\"kw3\">value</span> <span class=\"nu0\">0</span> <span class=\"kw3\">when</span> <span class=\"kw3\">set</span> <span class=\"kw2\">to</span> <span class=\"kw3\">false</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> number-<span class=\"kw3\">string</span>        <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> number-<span class=\"kw4\">length</span>        <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> window-width         constant as <span class=\"nu0\">20</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> limit-width          <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span>       <br/>       <span class=\"nu0\">01</span> number-buffer        <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span>window-width<span class=\"br0\">)</span> based<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       arbitrary-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; calculate <span class=\"nu0\">10</span><span class=\"sy0\"> ** </span><span class=\"nu0\">19</span><br/>       <span class=\"kw2\">perform</span> initialize-integers<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"10 ** 19       \u00a0: \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">10</span> <span class=\"kw2\">to</span> the-int<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">19</span> <span class=\"kw2\">to</span> the-exponent<br/>       <span class=\"kw2\">perform</span> raise-pow-accrete-exponent<br/>       <span class=\"kw2\">perform</span> show-all-or-portion<br/>       <span class=\"kw2\">perform</span> clean-<span class=\"kw3\">up</span><br/>\u00a0<br/>      *&gt; calculate <span class=\"nu0\">12345</span><span class=\"sy0\"> ** </span><span class=\"nu0\">9</span><br/>       <span class=\"kw2\">perform</span> initialize-integers<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"12345 ** 9     \u00a0: \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">12345</span> <span class=\"kw2\">to</span> the-int<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">9</span> <span class=\"kw2\">to</span> the-exponent<br/>       <span class=\"kw2\">perform</span> raise-pow-accrete-exponent<br/>       <span class=\"kw2\">perform</span> show-all-or-portion<br/>       <span class=\"kw2\">perform</span> clean-<span class=\"kw3\">up</span><br/>\u00a0<br/>      *&gt; calculate <span class=\"nu0\">5</span><span class=\"sy0\"> ** </span><span class=\"nu0\">4</span><span class=\"sy0\"> ** </span><span class=\"nu0\">3</span><span class=\"sy0\"> ** </span><span class=\"nu0\">2</span><br/>       <span class=\"kw2\">perform</span> initialize-integers<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"5 ** 4 ** 3 ** 2: \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">3</span> <span class=\"kw2\">to</span> the-int<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> the-exponent<br/>       <span class=\"kw2\">perform</span> raise-pow-accrete-exponent<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">4</span> <span class=\"kw2\">to</span> the-int<br/>       <span class=\"kw2\">perform</span> raise-pow-accrete-exponent<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">5</span> <span class=\"kw2\">to</span> the-int<br/>       <span class=\"kw2\">perform</span> raise-pow-accrete-exponent<br/>       <span class=\"kw2\">perform</span> show-all-or-portion<br/>       <span class=\"kw2\">perform</span> clean-<span class=\"kw3\">up</span><br/>       goback<span class=\"sy0\">.</span><br/>      *&gt; **************************************************************<br/>\u00a0<br/>       initialize-integers<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_init\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span> returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_init\"</span> <span class=\"kw3\">using</span> gmp-build returning <span class=\"kw3\">omitted</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       raise-pow-accrete-exponent<span class=\"sy0\">.</span><br/>      *&gt; <span class=\"kw1\">check</span> <span class=\"kw3\">before</span> <span class=\"kw3\">using</span> previously overflowed exponent intermediate<br/>       <span class=\"kw1\">if</span> cant-<span class=\"kw3\">use</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Error: intermediate overflow occured at \"</span><br/>                   the-exponent <span class=\"kw3\">upon</span> syserr<br/>           goback<br/>       end-<span class=\"kw1\">if</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_set_ui\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><br/>           returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_set_ui\"</span> <span class=\"kw3\">using</span> gmp-build <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> the-int<br/>           returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_pow_ui\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span> gmp-build<br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> the-exponent<br/>           returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_set_ui\"</span> <span class=\"kw3\">using</span> gmp-build <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><br/>           returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_get_ui\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span> returning the-exponent<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_fits_ulong_p\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span><br/>           returning valid-exponent<br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; get <span class=\"kw3\">string</span> representation<span class=\"sy0\">,</span> base <span class=\"nu0\">10</span><br/>       show-all-or-portion<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_sizeinbase\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">10</span><br/>           returning number-<span class=\"kw4\">length</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"GMP length: \"</span> number-<span class=\"kw4\">length</span> <span class=\"st0\">\", \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>\u00a0<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_get_str\"</span> <span class=\"kw3\">using</span> <span class=\"kw3\">null</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">10</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">reference</span> gmp-<span class=\"kw3\">number</span><br/>           returning number-<span class=\"kw3\">string</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"strlen\"</span> <span class=\"kw3\">using</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> number-<span class=\"kw3\">string</span><br/>           returning number-<span class=\"kw4\">length</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"strlen: \"</span> number-<span class=\"kw4\">length</span><br/>\u00a0<br/>      *&gt; slide based <span class=\"kw3\">string</span> across <span class=\"kw3\">first</span> <span class=\"kw3\">and</span> <span class=\"kw3\">last</span> <span class=\"kw3\">of</span> buffer<br/>       <span class=\"kw2\">move</span> window-width <span class=\"kw2\">to</span> limit-width<br/>       <span class=\"kw3\">set</span> <span class=\"kw3\">address</span> <span class=\"kw3\">of</span> number-buffer <span class=\"kw2\">to</span> number-<span class=\"kw3\">string</span><br/>       <span class=\"kw1\">if</span> number-<span class=\"kw4\">length</span> &lt;<span class=\"sy0\">=</span> window-width <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> number-<span class=\"kw4\">length</span> <span class=\"kw2\">to</span> limit-width<br/>           <span class=\"kw2\">display</span> number-buffer<span class=\"br0\">(</span><span class=\"nu0\">1</span>:limit-width<span class=\"br0\">)</span><br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">display</span> number-buffer <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           <span class=\"kw3\">subtract</span> window-width <span class=\"kw3\">from</span> number-<span class=\"kw4\">length</span><br/>           <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> number-<span class=\"kw4\">length</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> number-<span class=\"kw4\">length</span><br/>           <span class=\"kw1\">if</span> number-<span class=\"kw4\">length</span> &lt;<span class=\"sy0\">=</span> window-width <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">move</span> number-<span class=\"kw4\">length</span> <span class=\"kw2\">to</span> limit-width<br/>           <span class=\"kw3\">else</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"...\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw3\">set</span> <span class=\"kw3\">address</span> <span class=\"kw3\">of</span> number-buffer <span class=\"kw3\">up</span> <span class=\"kw3\">by</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span>window-width<span class=\"sy0\">,</span> number-<span class=\"kw4\">length</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">display</span> number-buffer<span class=\"br0\">(</span><span class=\"nu0\">1</span>:limit-width<span class=\"br0\">)</span><br/>       end-<span class=\"kw1\">if</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       clean-<span class=\"kw3\">up</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"free\"</span> <span class=\"kw3\">using</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> number-<span class=\"kw3\">string</span> returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_clear\"</span> <span class=\"kw3\">using</span> gmp-<span class=\"kw3\">number</span> returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"__gmpz_clear\"</span> <span class=\"kw3\">using</span> gmp-build returning <span class=\"kw3\">omitted</span><br/>       <span class=\"kw3\">set</span> <span class=\"kw3\">address</span> <span class=\"kw3\">of</span> number-buffer <span class=\"kw2\">to</span> <span class=\"kw3\">null</span><br/>       <span class=\"kw3\">set</span> cant-<span class=\"kw3\">use</span> <span class=\"kw2\">to</span> <span class=\"kw3\">false</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> arbitrary-precision-integers<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">(</span>format <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"~s\"</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a...~a, length ~a\"</span> <span class=\"br0\">(</span>subseq s <span class=\"nu0\">0</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span>subseq s <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> s<span class=\"br0\">)</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> text<span class=\"br0\">(</span><span class=\"nu0\">5</span>.<span class=\"me1\">BigInt</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">4</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">3</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writefln<span class=\"br0\">(</span><span class=\"st0\">\"5^4^3^2 =\u00a0%s..%s (%d digits)\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>$<span class=\"sy0\">-</span><span class=\"nu0\">20</span><span class=\"sy0\">..</span>$<span class=\"br0\">]</span><span class=\"sy0\">,</span> s.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 6, "block": "<pre class=\"text highlighted_source\">void main() {<br/>  var s = pow(5, pow(4, pow(3, 2))).toString();<br/>\u00a0<br/>  print('contains given digits: ${s.startsWith('62060698786608744707') &amp;&amp; s.endsWith('92256259918212890625')}'); <br/>  print('number of digits: ${s.length}');<br/>}</pre>"}, {"lang": "dc", "loc": 7, "block": "<pre class=\"text highlighted_source\">[5432.dc]sz<br/>\u00a0<br/>5 4 3 2 ^ ^ ^ sy\t\t\t\t[y = 5 ^ 4 ^ 3 ^ 2]sz<br/>ly Z sc\t\t\t\t\t\t[c = length of y]sz<br/>[ First 20 digits: ]P ly 10 lc 20 - ^ / p sz\t[y / (10 ^ (c - 20))]sz<br/>[  Last 20 digits: ]P ly 10 20 ^\u00a0% p sz\t\t[y\u00a0% (10 ^ 20)]sz<br/>[Number of digits: ]P lc p sz</pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> value <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> decimal <span class=\"sy0\">:=</span> value.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/><span class=\"sy0\">?</span> decimal<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \"62060698786608744707\"</span><br/>\u00a0<br/><span class=\"sy0\">?</span> decimal<span class=\"br0\">(</span>decimal.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \"92256259918212890625\"</span><br/>\u00a0<br/><span class=\"sy0\">?</span> decimal.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 183231</span></pre>"}, {"lang": "EchoLisp", "loc": 34, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; to save space and time, we do'nt stringify \u03a9 = 5^4^3^2 ,</span><br/><span class=\"co1\">;; but directly extract tail and head and number of decimal digits</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span> <span class=\"co1\">;; arbitrary size integers</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> e10000 <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; 10^10000</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>last<span class=\"sy0\">-</span>n big <span class=\"br0\">(</span>n <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"...\"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> big <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>first<span class=\"sy0\">-</span>n big <span class=\"br0\">(</span>n <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> big e10000<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> big <span class=\"br0\">(</span><span class=\"sy0\">/</span> big e10000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; cut 10000 digits at a time</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>take <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> big<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"st0\">\"...\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; faster than directly using (number-length big)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>digits big <span class=\"br0\">(</span>digits <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> big e10000<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> big <span class=\"br0\">(</span><span class=\"sy0\">/</span> big e10000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> digits <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> digits <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-</span><span class=\"kw1\">length</span> big<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> \u03a9 <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>last<span class=\"sy0\">-</span>n \u03a9 <span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"...92256259918212890625\"</span><br/><span class=\"br0\">(</span>first<span class=\"sy0\">-</span>n \u03a9 <span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"62060698786608744707...\"</span><br/><span class=\"br0\">(</span>digits \u03a9 <span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">183231</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">defmodule Arbitrary do<br/>  def pow(_,0), do: 1<br/>  def pow(b,e) when e &gt; 0, do: pow(b,e,1)<br/>\u00a0<br/>  defp pow(b,1,acc), do: acc * b<br/>  defp pow(b,p,acc) when rem(p,2)==0, do: pow(b*b,div(p,2),acc)<br/>  defp pow(b,p,acc), do: pow(b,p-1,acc*b)<br/>\u00a0<br/>  def test do<br/>    s = pow(5,pow(4,pow(3,2))) |&gt; to_string<br/>    l = String.length(s)<br/>    prefix = String.slice(s,0,20)<br/>    suffix = String.slice(s,-20,20)<br/>    IO.puts \"Length: #{l}\\nPrefix:#{prefix}\\nSuffix:#{suffix}\"<br/>  end<br/>end<br/>Arbitrary.test</pre>"}, {"lang": "Emacs Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>answer <span class=\"br0\">(</span>calc-<span class=\"kw1\">eval</span> <span class=\"st0\">\"5**4**3**2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> answer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>message <span class=\"st0\">\"%s has\u00a0%d digits\"</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"kw1\">length</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span>format <span class=\"st0\">\"%s...%s\"</span><br/>\t\t       <span class=\"br0\">(</span>substring answer <span class=\"nu0\">0</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"br0\">(</span>substring answer <span class=\"br0\">(</span>- <span class=\"kw1\">length</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     answer<span class=\"br0\">)</span><br/>\t   <span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 22, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>arbitrary<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span><span class=\"br0\">[</span>export_all<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">E</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">E</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">E</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">*</span> <span class=\"re5\">B</span><span class=\"sy1\">;</span><br/><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">P</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">P</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">I</span> <span class=\"sy3\">=</span> <span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>   <br/>    <span class=\"br0\">[</span><span class=\"re5\">S</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~b\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">I</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Prefix</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sublist</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Suffix</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sublist</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy3\">-</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Length: ~b~nPrefix:~s~nSuffix:~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Prefix</span><span class=\"sy1\">,</span><span class=\"re5\">Suffix</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> answer <span class=\"sy0\">=</span> 5I <span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"br0\">(</span>4I <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"br0\">(</span>3I <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> sans <span class=\"sy0\">=</span> answer.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"Length =\u00a0%d, digits\u00a0%s ...\u00a0%s\"</span> sans.<span class=\"me1\">Length</span> <span class=\"br0\">(</span>sans.<span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sans.<span class=\"me1\">Substring</span><span class=\"br0\">(</span>sans.<span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>Length <span class=\"sy0\">=</span> <span class=\"nu0\">183231</span>, digits <span class=\"nu0\">62060698786608744707</span> ... <span class=\"nu0\">92256259918212890625</span></pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USING: formatting kernel math.functions math.parser sequences\u00a0;<br/>IN: rosettacode.bignums<br/>\u00a0<br/>: test-bignums ( -- )<br/>    5 4 3 2 ^ ^ ^ number&gt;string<br/>    [ 20 head ] [ 20 tail* ] [ length ] tri<br/>    \"5^4^3^2 is\u00a0%s...%s and has\u00a0%d digits\\n\" printf\u00a0;</pre>"}, {"lang": "Fortran", "loc": 12, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> bignum<br/>    <span class=\"kw3\">use</span> fmzm<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>im<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>    <span class=\"kw1\">call</span> fm_set<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span> to_im<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>to_im<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>to_im<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">**</span>to_im<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> to_int<span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">log10</span><span class=\"br0\">(</span>to_fm<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> im_print<span class=\"br0\">(</span>a <span class=\"sy0\">/</span> to_im<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> im_print<span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>a, to_im<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co2\">#Include once \"gmp.bi\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Zstring</span> * <span class=\"nu0\">100000000</span> outtext<br/>\u00a0<br/><span class=\"kw1\">Function</span>  Power<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>,n <span class=\"kw1\">As</span> <span class=\"kw1\">Uinteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"co1\">'automate precision</span><br/>    <span class=\"co2\">#define dp 3321921</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> __mpf_struct _number,FloatAnswer<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> ln=<span class=\"kw1\">Len</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span>*<span class=\"br0\">(</span>n<span class=\"br0\">)</span>*<span class=\"nu0\">4</span><br/>    <span class=\"kw1\">If</span> ln&gt;dp <span class=\"kw1\">Then</span> ln=dp<br/>    mpf_init2<span class=\"br0\">(</span>@FloatAnswer,ln<span class=\"br0\">)</span><br/>    mpf_init2<span class=\"br0\">(</span>@_number,ln<span class=\"br0\">)</span><br/>    mpf_set_str<span class=\"br0\">(</span>@_number,number,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    mpf_pow_ui<span class=\"br0\">(</span>@Floatanswer,@_number,n<span class=\"br0\">)</span><br/>    gmp_sprintf<span class=\"br0\">(</span> @outtext,<span class=\"st0\">\"%.\"</span> &amp; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"Ff\"</span>,@FloatAnswer <span class=\"br0\">)</span><br/>    Var outtxt=<span class=\"kw1\">Trim</span><span class=\"br0\">(</span>outtext<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>outtxt,<span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> outtxt= <span class=\"kw1\">Rtrim</span><span class=\"br0\">(</span>outtxt,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>:outtxt=<span class=\"kw1\">Rtrim</span><span class=\"br0\">(</span>outtxt,<span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>outtxt<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Extern</span> gmp_version Alias <span class=\"st0\">\"__gmp_version\"</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Zstring</span> <span class=\"kw1\">Ptr</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"GMP version \"</span>;*gmp_version<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/>var ans=power<span class=\"br0\">(</span><span class=\"st0\">\"5\"</span>,<span class=\"br0\">(</span><span class=\"nu0\">4</span>^<span class=\"br0\">(</span><span class=\"nu0\">3</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>ans,<span class=\"nu0\">20</span><span class=\"br0\">)</span> + <span class=\"st0\">\" ... \"</span>+<span class=\"kw1\">Right</span><span class=\"br0\">(</span>ans,<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Number of digits \"</span>;<span class=\"kw1\">Len</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">a = 5^4^3^2<br/>as = \"$a\"     // Coerce to string<br/>println[\"Length=\" + length[as] + \", \" + left[as,20] + \"...\" + right[as,20]]</pre>"}, {"lang": "GAP", "loc": 8, "block": "<pre class=\"text highlighted_source\">n:=5^(4^(3^2));; <br/>s\u00a0:= String(n);;<br/>m\u00a0:= Length(s);<br/># 183231<br/>s{[1..20]};<br/># \"62060698786608744707\"<br/>s{[m-19..m]};<br/># \"92256259918212890625\"</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tx <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\tx <span class=\"sy2\">=</span> x<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span> x<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>\tx <span class=\"sy2\">=</span> x<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">),</span> x<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>\tx <span class=\"sy2\">=</span> x<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">),</span> x<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>\tstr <span class=\"sy2\">:=</span> x<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"5^(4^(3^2)) has\u00a0%d digits:\u00a0%s ...\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">),</span><br/>\t\tstr<span class=\"sy1\">[:</span><span class=\"nu0\">20</span><span class=\"sy1\">],</span><br/>\t\tstr<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">20</span><span class=\"sy1\">:],</span><br/>\t<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 5, "block": "<pre class=\"text highlighted_source\">5 4 3 2???  # Calculate 5^(4^(3^2))<br/>`..         # Convert to string and make two copies<br/>20&lt;p        # Print the first 20 digits<br/>-20&gt;p       # Print the last 20 digits<br/>,p          # Print the length</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> bigNumber <span class=\"sy0\">=</span> 5G <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> y <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy0\">^</span><span class=\"nu0\">4</span><span class=\"sy0\">^</span><span class=\"nu0\">3</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> y<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 = \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">20</span> y <span class=\"sy0\">++</span> <span class=\"st0\">\"...\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span>l<span class=\"sy0\">-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> y <span class=\"sy0\">++</span> <span class=\"st0\">\" and has \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> l <span class=\"sy0\">++</span> <span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Hoon", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=+  big=(pow 5 (pow 4 (pow 3 2)))                                <br/>=+  digits=(lent (skip &lt;big&gt; |=(a/*\u00a0?:(=(a '.') &amp; |))))          <br/>[digits (div big (pow 10 (sub digits 20))) (mod big (pow 10 20))]<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 8, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    x <span class=\"sy1\">:=</span> <span class=\"nu0\">5</span><span class=\"sy1\">^</span><span class=\"nu0\">4</span><span class=\"sy1\">^</span><span class=\"nu0\">3</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"done with computation\"</span><span class=\"br0\">)</span><br/>    x <span class=\"sy1\">:=</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"5 ^ 4 ^ 3 ^ 2 has \"</span><span class=\"sy1\">,*</span>x<span class=\"sy1\">,</span><span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The first twenty digits are \"</span><span class=\"sy1\">,</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The last twenty digits are  \"</span><span class=\"sy1\">,</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">-:</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   Pow5432=: <span class=\"nu0\">5</span>^<span class=\"nu0\">4</span>^<span class=\"nu0\">3</span>^<span class=\"nu0\">2x</span><br/>   Pow5432=: ^/ <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2x</span>                    <span class=\"co1\">NB. alternate J solution</span><br/>   # \": Pow5432                             <span class=\"co1\">NB. number of digits</span><br/><span class=\"nu0\">183231</span><br/>   <span class=\"nu0\">20</span> <span class=\"sy0\">(</span>{. , <span class=\"st_h\">'...'</span> , <a class=\"__cf_email__\" data-cfemail=\"8da0cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ {. ]<span class=\"sy0\">)</span> \": Pow5432    <span class=\"co1\">NB. 20 first &amp; 20 last digits</span><br/>62060698786608744707...<span class=\"nu0\">92256259918212890625</span></pre>"}, {"lang": "Java", "loc": 11, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> IntegerPower <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> power <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">intValueExact</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">intValueExact</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str <span class=\"sy0\">=</span> power.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 =\u00a0%s...%s and has\u00a0%d digits%n\"</span>,<br/>                str.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>, str.<span class=\"me1\">substring</span><span class=\"br0\">(</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span>, len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Klong", "loc": 1, "block": "<pre>   n::$5^4^3^2\n   .p(\"5^4^3^2 = \",(20#n),\"...\",((-20)#n),\" and has \",($#n),\" digits\")\n</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">4.0</span>, <span class=\"nu0\">3.0</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> x.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> y.<span class=\"me1\">length</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"5^4^3^2 = ${y.substring(0, 20)}...${y.substring(len - 20)} and has $len digits\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 3, "block": "<pre class=\"lb highlighted_source\">a$ <span class=\"sy0\">=</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span>^<span class=\"br0\">(</span><span class=\"nu0\">4</span>^<span class=\"br0\">(</span><span class=\"nu0\">3</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">print</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span>; <span class=\"st0\">\"......\"</span>; <span class=\"kw2\">right$</span><span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">julia&gt; @elapsed bigstr = string(BigInt(5)^4^3^2)<br/>0.017507363<br/>\u00a0<br/>julia&gt; length(bigstr) <br/>183231<br/>\u00a0<br/>julia&gt; bigstr[1:20]<br/>\"62060698786608744707\"<br/>\u00a0<br/>julia&gt; bigstr[end-20:end]<br/>\"892256259918212890625\"</pre>"}, {"lang": "Lasso", "loc": 15, "block": "<pre class=\"text highlighted_source\">define integer-&gt;pow(factor::integer) =&gt; {<br/>    #factor &lt;= 0<br/>       \u00a0? return 0<br/>\u00a0<br/>    local(retVal) = 1<br/>\u00a0<br/>    loop(#factor) =&gt; { #retVal *= self }<br/>\u00a0<br/>    return #retVal<br/>}<br/>\u00a0<br/>local(bigint) = string(5-&gt;pow(4-&gt;pow(3-&gt;pow(2))))<br/>#bigint-&gt;sub(1,20) + ` ... ` + #bigint-&gt;sub(#bigint-&gt;size - 19)<br/>\"\\n\"<br/>`Number of digits: ` + #bigint-&gt;size</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; n\u00a0:= 5^(4^(3^2)):<br/>&gt; length( n ); # number of digits<br/>                                 183231<br/>\u00a0<br/>&gt; s\u00a0:= convert( n, 'string' ):<br/>&gt; s[ 1 .. 20 ], s[ -20 .. -1 ]; # extract first and last twenty digits<br/>             \"62060698786608744707\", \"92256259918212890625\"<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">s:=ToString[5^4^3^2];<br/>Print[StringTake[s,20]&lt;&gt;\"...\"&lt;&gt;StringTake[s,-20]&lt;&gt;\" (\"&lt;&gt;<a class=\"__cf_email__\" data-cfemail=\"a1f5cef2d5d3c8cfc6e1f2d5d3c8cfc6edc4cfc6d5c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@s&lt;&gt;\" digits)\"];</pre>"}, {"lang": "MATLAB", "loc": 13, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; answer = vpi<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>^<span class=\"br0\">(</span>vpi<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>^<span class=\"br0\">(</span>vpi<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>^vpi<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>&gt;&gt; numDigits = order<span class=\"br0\">(</span>answer<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>\u00a0<br/>numDigits =<br/>\u00a0<br/>      <span class=\"nu0\">183231</span><br/>\u00a0<br/>&gt;&gt; <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%d'</span>,leadingdigit<span class=\"br0\">(</span>answer,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co2\">'...'</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%d'</span>,trailingdigit<span class=\"br0\">(</span>answer,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/><span class=\"co1\">%First and Last 20 Digits</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/><span class=\"nu0\">62060698786608744707</span><span class=\"sy0\">...</span><span class=\"nu0\">92256259918212890625</span></pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">block([s, n], s: string(5^4^3^2), n: slength(s), print(substring(s, 1, 21), \"...\", substring(s, n - 19)), n);<br/>/* 62060698786608744707...92256259918212890625<br/>183231 */</pre>"}, {"lang": "Nemerle", "loc": 21, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>using System.Numerics;<br/>using System.Numerics.BigInteger;<br/>\u00a0<br/>module BigInt<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def n = Pow(5, Pow(4, Pow(3, 2)\u00a0:&gt; int)\u00a0:&gt; int).ToString();<br/>        def len = n.Length;<br/>        def first20 = n.Substring(0, 20);<br/>        def last20 = n.Substring(len - 20, 20);<br/>\u00a0<br/>        assert (first20 == \"62060698786608744707\", \"High order digits are incorrect\");<br/>        assert (last20 == \"92256259918212890625\", \"Low order digits are incorrect\");<br/>        assert (len == 183231, \"Result contains wrong number of digits\");<br/>\u00a0<br/>        WriteLine(\"Result: {0} ... {1}\", first20, last20);<br/>        WriteLine($\"Length of result: $len digits\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 34, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">BigInteger</span><br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">30</span> <span class=\"co1\">-- needed to report the run-time</span><br/>\u00a0<br/>nanoFactor = <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">9</span><br/>\u00a0<br/>t1 = System.<span class=\"me0\">nanoTime</span><br/>x = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>x = x.<span class=\"me0\">pow</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me0\">pow</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me0\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me0\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>n = Rexx<span class=\"br0\">(</span>x.<span class=\"kw6\">toString</span><span class=\"br0\">)</span><br/>t2 = System.<span class=\"me0\">nanoTime</span><br/>td = t2 - t1<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Run time in seconds:\"</span> td <span class=\"sy0\">/</span> nanoFactor<br/><span class=\"kw1\">say</span><br/>\u00a0<br/>check = <span class=\"st0\">\"62060698786608744707...92256259918212890625\"</span><br/>sample = n.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"st0\">\"...\"</span>n.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Expected result:\"</span> check<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"  Actual result:\"</span> sample<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"         digits:\"</span> n.<span class=\"me0\">length</span><br/><span class=\"kw1\">say</span><br/>\u00a0<br/><span class=\"kw1\">if</span> check = sample<br/><span class=\"kw3\">then</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Result confirmed\"</span><br/><span class=\"kw3\">else</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Result does not satisfy test\"</span><br/>\u00a0<br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import bigints<br/>\u00a0<br/>var x = 5.pow 4.pow 3.pow 2<br/>var s = $x<br/>\u00a0<br/>echo s[0..19]<br/>echo s[s.high - 19 .. s.high]<br/>echo s.len</pre>"}, {"lang": "OCaml", "loc": 11, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Num.html\"><span class=\"kw2\">Num</span></a><br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> answer <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Int <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">**/</span> <span class=\"br0\">(</span>Int <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">**/</span> <span class=\"br0\">(</span>Int <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">**/</span> <span class=\"br0\">(</span>Int <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> answer_string <span class=\"sy0\">=</span> string_of_num answer <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"has\u00a0%d digits:\u00a0%s ...\u00a0%s\\n\"</span><br/>                <span class=\"br0\">(</span>length answer_string<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>first_chars answer_string <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>last_chars answer_string <span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">import: mapping<br/>\u00a0<br/>5 4 3 2 pow pow pow &gt;string dup left( 20 ) . dup right( 20 ) . size . </pre>"}, {"lang": "ooRexx", "loc": 20, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">--REXX program to show arbitrary precision integers.</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">200000</span><br/>check = <span class=\"st0\">'62060698786608744707...92256259918212890625'</span><br/>\u00a0<br/>start = <span class=\"sy0\">.</span>datetime~new<br/>n = <span class=\"nu0\">5</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw6\">time</span> = <span class=\"sy0\">.</span>datetime~new - start<br/><span class=\"kw1\">say</span> <span class=\"st0\">'elapsed time for the calculation:'</span> <span class=\"kw6\">time</span><br/><span class=\"kw1\">say</span><br/>sampl = <span class=\"kw6\">left</span><span class=\"br0\">(</span>n, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"st0\">\"...\"</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>n, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">' check:'</span> check<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Sample:'</span> sampl<br/><span class=\"kw1\">say</span> <span class=\"st0\">'digits:'</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/>\u00a0<br/><span class=\"kw1\">if</span> check=sampl <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'passed!'</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'failed!'</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 8, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Pow5432 = <span class=\"br0\">{</span>Pow 5 <span class=\"br0\">{</span>Pow 4 <span class=\"br0\">{</span>Pow 3 2<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  S = <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString Pow5432<span class=\"br0\">}</span><br/>  Len = <span class=\"br0\">{</span>Length S<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo<br/>   <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take S 20<span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"st0\">\"...\"</span><span class=\"sy0\">#</span><br/>   <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>drop S Len<span class=\"sy0\">-</span>20<span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"st0\">\" (\"</span><span class=\"sy0\">#</span>Len<span class=\"sy0\">#</span><span class=\"st0\">\" Digits)\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">digits<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>s<span class=\"sy0\">=</span><span class=\"kw1\">sizedigit</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">&lt;</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>s<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>s<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>N<span class=\"sy0\">=</span><span class=\"nu1\">5</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">[</span><span class=\"kw1\">precision</span><span class=\"br0\">(</span>N<span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<span class=\"sy0\">,</span><span class=\"nu1\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">Mod</span><span class=\"br0\">(</span>N<span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span><span class=\"nu1\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> digits<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal", "loc": 26, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> GMP_Demo<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  math<span class=\"sy1\">,</span> gmp<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  a<span class=\"sy1\">:</span>   mpz_t<span class=\"sy1\">;</span><br/>  out<span class=\"sy1\">:</span> pchar<span class=\"sy1\">;</span><br/>  len<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span>   <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  mpz_init_set_ui<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_pow_ui<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> <span class=\"nu0\">4</span> <span class=\"sy3\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy3\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  len <span class=\"sy1\">:</span><span class=\"sy3\">=</span> mpz_sizeinbase<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'GMP says size is: '</span><span class=\"sy1\">,</span> len<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  out <span class=\"sy1\">:</span><span class=\"sy3\">=</span> mpz_get_str<span class=\"br0\">(</span><span class=\"kw2\">NIL</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> a<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Actual size is:   '</span><span class=\"sy1\">,</span> length<span class=\"br0\">(</span>out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Digits: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">19</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>out<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"st0\">'...'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> len <span class=\"sy3\">-</span> <span class=\"nu0\">20</span> <span class=\"kw1\">to</span> len <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>out<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'5'</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'4'</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'3'</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'2'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$x\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 =\u00a0%s...%s and has\u00a0%i digits<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">given</span> <span class=\"sy0\">~</span><span class=\"br0\">[</span><span class=\"sy0\">**</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>   <span class=\"kw3\">say</span> <span class=\"st0\">\"5**4**3**2 = {.substr: 0,20}...{.substr: *-20} and has {.chars} digits\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 11, "block": "<pre class=\"text highlighted_source\">include bigatom.e<br/>\u00a0<br/>bigatom res<br/>res = ba_power(3,2)<br/>res = ba_power(4,res)<br/>res = ba_power(5,res)<br/>\u00a0<br/>string s = ba_sprint(res)<br/>?length(s)<br/>?s[1..20]<br/>?s[-20..-1]</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/bcpow\"><span class=\"kw3\">bcpow</span></a><span class=\"br0\">(</span><span class=\"st_h\">'5'</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/bcpow\"><span class=\"kw3\">bcpow</span></a><span class=\"br0\">(</span><span class=\"st_h\">'4'</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/bcpow\"><span class=\"kw3\">bcpow</span></a><span class=\"br0\">(</span><span class=\"st_h\">'3'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'2'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 = <span class=\"es6\">%s</span>...<span class=\"es6\">%s</span> and has <span class=\"es6\">%d</span> digits<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(let L (chop (** 5 (** 4 (** 3 2))))<br/>   (prinl (head 20 L) \"...\" (tail 20 L))<br/>   (length L) )</pre>"}, {"lang": "Pike", "loc": 7, "block": "<pre class=\"pike highlighted_source\">&gt; string res <span class=\"sy0\">=</span> <span class=\"br0\">(</span>string<span class=\"br0\">)</span>pow<span class=\"br0\">(</span><span class=\"nu0\">5</span>,pow<span class=\"br0\">(</span><span class=\"nu0\">4</span>,pow<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; res<span class=\"br0\">[</span>..<span class=\"nu0\">19</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"62060698786608744707\"</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span><br/>&gt; res<span class=\"br0\">[</span>&lt;<span class=\"nu0\">19</span>..<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"92256259918212890625\"</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span><br/>&gt; sizeof<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">183231</span></pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">#  Perform calculation</span><br/><span class=\"re0\">$BigNumber</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#  Display first and last 20 digits</span><br/><span class=\"re0\">$BigNumberString</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$BigNumber</span><br/><span class=\"re0\">$BigNumberString</span>.Substring<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"...\"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$BigNumberString</span>.Substring<span class=\"br0\">(</span> <span class=\"re0\">$BigNumberString</span>.Length <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#  Display number of digits</span><br/><span class=\"re0\">$BigNumberString</span>.Length</pre>"}, {"lang": "Prolog", "loc": 10, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>task<span class=\"br0\">(</span>Length<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">5</span>^<span class=\"nu0\">4</span>^<span class=\"nu0\">3</span>^<span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_codes</span></a><span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Codes<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    append<span class=\"br0\">(</span>`<span class=\"nu0\">62060698786608744707</span>`<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span>  Codes<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    append<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> `<span class=\"nu0\">92256259918212890625</span>`<span class=\"sy4\">,</span> Codes<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    length<span class=\"br0\">(</span>Codes<span class=\"sy4\">,</span> Length<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 21, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">IncludeFile</span> <span class=\"st0\">\"Decimal.pbi\"</span><br/>\u00a0<br/><span class=\"co1\">;- Declare the variables that will be used</span><br/><span class=\"kw1\">Define</span>.Decimal <span class=\"sy0\">*</span>a<br/><span class=\"kw1\">Define</span> n, L$, R$, <span class=\"kw3\">out</span>$, digits.s<br/>\u00a0<br/><span class=\"co1\">;- 4^3^2 is withing 32 bit range, so normal procedures can be used</span><br/>n<span class=\"sy0\">=</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;- 5^n is larger then 31^2, so the same library call as in the \"Long multiplication\" task is used</span><br/><span class=\"sy0\">*</span>a<span class=\"sy0\">=</span>PowerDecimal<span class=\"br0\">(</span>IntegerToDecimal<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,IntegerToDecimal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;- Convert the large number into a string &amp; present the results</span><br/><span class=\"kw3\">out</span>$<span class=\"sy0\">=</span>DecimalToString<span class=\"br0\">(</span><span class=\"sy0\">*</span>a<span class=\"br0\">)</span><br/>L$ <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span><span class=\"kw3\">out</span>$,<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>R$ <span class=\"sy0\">=</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span><span class=\"kw3\">out</span>$,<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>digits<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"kw3\">out</span>$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">out</span>$<span class=\"sy0\">=</span><span class=\"st0\">\"First 20 &amp; last 20 chars of 5^4^3^2 are;\"</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>L$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>R$<span class=\"sy0\">+</span>#CRLF$<br/><span class=\"kw3\">out</span>$<span class=\"sy0\">+</span><span class=\"st0\">\"and the result is \"</span><span class=\"sy0\">+</span>digits<span class=\"sy0\">+</span><span class=\"st0\">\" digits long.\"</span><br/>\u00a0<br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Arbitrary-precision integers, PureBasic\"</span>,<span class=\"kw3\">out</span>$<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> y <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span>**<span class=\"nu0\">4</span>**<span class=\"nu0\">3</span>**<span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 =\u00a0%s...%s and has\u00a0%i digits\"</span>\u00a0% <span class=\"br0\">(</span>y<span class=\"br0\">[</span>:<span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y<span class=\"br0\">[</span>-<span class=\"nu0\">20</span>:<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">5</span>**<span class=\"nu0\">4</span>**<span class=\"nu0\">3</span>**<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">62060698786608744707</span>...<span class=\"nu0\">92256259918212890625</span> <span class=\"kw1\">and</span> has <span class=\"nu0\">183231</span> digits</pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">library(gmp)<br/>large=pow.bigz(5,pow.bigz(4,pow.bigz(3,2)))<br/>largestr=as.character(large)<br/>cat(\"first 20 digits:\",substr(largestr,1,20),\"\\n\",<br/>    \"last 20 digits:\",substr(largestr,nchar(largestr)-19,nchar(largestr)),\"\\n\",<br/>    \"number of digits: \",nchar(largestr),\"\\n\")</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define answer (number-&gt;string (foldr expt 1 '(5 4 3 2))))<br/>(define len (string-length answer))<br/>\u00a0<br/>(printf \"Got ~a digits~n\" len)<br/>(printf \"~a ... ~a~n\"<br/>        (substring answer 0 20)<br/>        (substring answer (- len 20) len))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and demonstrates  arbitrary precision numbers (using powers). */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">200000</span>                            <span class=\"coMULTI\">/*two hundred thousand decimal digits. */</span><br/>\u00a0<br/>    # = <span class=\"nu0\">5</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*calculate multiple exponentiations.  */</span><br/>\u00a0<br/>true=<span class=\"nu0\">62060698786608744707</span><span class=\"sy0\">...</span><span class=\"nu0\">92256259918212890625</span> <span class=\"coMULTI\">/*what answer is supposed to look like.*/</span><br/>rexx= <span class=\"kw6\">left</span><span class=\"br0\">(</span>#, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"st0\">'...'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>#, <span class=\"nu0\">20</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*the left and right 20 decimal digits.*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span>  <span class=\"st0\">'  true:'</span>    true                           <span class=\"coMULTI\">/*show what the  \"true\"  answer is.    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'  REXX:'</span>    rexx                           <span class=\"coMULTI\">/*  \"    \"   \"    REXX      \"    \"     */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'digits:'</span>    <span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*  \"    \"   \"   length  of answer is. */</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">if</span> true == rexx   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'passed!'</span>             <span class=\"coMULTI\">/*either it passed,  \u00b7\u00b7\u00b7               */</span><br/>                  <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'failed!'</span>             <span class=\"coMULTI\">/*    or it didn't.                    */</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> y = <span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy0\">**</span><span class=\"nu0\">4</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"5**4**3**2 = #{y[0..19]}...#{y[-20..-1]} and has #{y.length} digits\"</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">x$ = str$( 5^(4^(3^2))) <br/>print \"Length:\";len( x$)<br/>print left$( x$, 20); \"......\"; right$( x$, 20)</pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">extern crate num;<br/>use num::bigint::BigUint;<br/>use num::FromPrimitive;<br/>use num::pow::pow;<br/>\u00a0<br/>fn main() {<br/>    let big = BigUint::from_u8(5).unwrap();<br/>    let answer_as_string = format!(\"{}\", pow(big,pow(4,pow(3,2))));<br/>\u00a0<br/>      // The rest is output formatting.<br/>    let first_twenty: String = answer_as_string.chars().take(20).collect();<br/>    let last_twenty_reversed: Vec&lt;char&gt; = answer_as_string.chars().rev().take(20).collect();<br/>    let last_twenty: String = last_twenty_reversed.into_iter().rev().collect();<br/>    println!(\"Number of digits: {}\", answer_as_string.len());<br/>    println!(\"First and last digits: {:?}..{:?}\", first_twenty, last_twenty);<br/>}</pre>"}, {"lang": "Sather", "loc": 22, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    r:INTI;<br/>    p1\u00a0::= \"62060698786608744707\";<br/>    p2\u00a0::= \"92256259918212890625\";<br/>\u00a0<br/>    -- computing 5^(4^(3^2)), it could be written<br/>    -- also e.g. (5.inti)^((4.inti)^((3.inti)^(2.inti)))<br/>    r \u00a0:= (3.pow(2)).inti;<br/>    r \u00a0:= (4.inti).pow(r);<br/>    r \u00a0:= (5.inti).pow(r);<br/>\u00a0<br/>    sr\u00a0::= r.str; -- string rappr. of the number<br/>    if sr.head(p1.size) = p1<br/>       and sr.tail(p2.size) = p2 then<br/>         #OUT + \"result is ok..\\n\";<br/>    else<br/>         #OUT + \"oops\\n\";<br/>    end;<br/>    #OUT + \"# of digits: \" + sr.size + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> modPow <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> pow <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> pow <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, BigInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> pow <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>res21<span class=\"sy0\">:</span> scala.<span class=\"me1\">math</span>.<span class=\"me1\">BigInt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">92256259918212890625</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> pow <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> pow <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> pow <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><br/>res22<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"nu0\">6206069878660874470748320557284679309194219265199117173177383244</span><br/><span class=\"nu0\">78446890420544620839553285931321349485035253770303663683982841794590287939217907</span><br/><span class=\"nu0\">89641300156281305613064874236198955114921296922487632406742326659692228562195387</span><br/><span class=\"nu0\">46210423235340883954495598715281862895110697243759768434501295076608139350684049</span><br/>01191160699929926568099301259938271975526587719565309995276438998093283175080241<br/><span class=\"nu0\">55833224724855977970015112594128926594587205662421861723789001208275184293399910</span><br/><span class=\"nu0\">13912158886504596553858675842231519094813553261073608575593794241686443569888058</span><br/><span class=\"nu0\">92732524316323249492420512640962691673104618378381545202638771401061171968052873</span><br/><span class=\"nu0\">21414945463925055899307933774904078819911387324217976311238875802878310483037255</span><br/><span class=\"nu0\">33789567769926391314746986316354035923183981697660495275234703657750678459919</span>...<br/><span class=\"me1\">scala</span><span class=\"sy0\">&gt;</span> res22 take <span class=\"nu0\">20</span><br/>res23<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"nu0\">62060698786608744707</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> res22 length<br/>res24<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">183231</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> </pre>"}, {"lang": "Scheme", "loc": 5, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> x <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> y <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"5**4**3**2 = \"</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> y <span class=\"nu0\">0</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">\"...\"</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> y <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">l</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"st0\">\" and has \"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 12, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: fiveToThePowerOf262144 is 5_ ** 4 ** 3 ** 2;<br/>    var string: numberAsString is str(fiveToThePowerOf262144);<br/>  begin<br/>    writeln(\"5**4**3**2 = \" &lt;&amp; numberAsString[..20] &lt;&amp;<br/>            \"...\" &lt;&amp; numberAsString[length(numberAsString) - 19 ..]);<br/>    writeln(\"decimal digits: \" &lt;&amp; length(numberAsString));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var x = <span class=\"nu0\">5</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>var y = x.<span class=\"me1\">to_s</span>;<br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"5**4**3**2 =\u00a0%s...%s and has\u00a0%i digits<span class=\"es0\">\\n</span>\"</span>, y.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">19</span><span class=\"br0\">)</span>, y.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>, y.<span class=\"me1\">len</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "SIMPOL", "loc": 21, "block": "<pre class=\"text highlighted_source\">constant FIRST20 \"62060698786608744707\"<br/>constant LAST20  \"92256259918212890625\"<br/>\u00a0<br/>function main()<br/>  integer i<br/>  string s, s2<br/>\u00a0<br/>  i = .ipower(5, .ipower(4, .ipower(3, 2)))<br/>  s2 = .tostr(i, 10)<br/>  if .lstr(s2, 20) == FIRST20 and .rstr(s2, 20) == LAST20<br/>    s = \"Success! The integer matches both the first 20 and the last 20 digits. There are \" + .tostr(.len(s2), 10) + \" digits in the result.{d}{a}\"<br/>  else<br/>    s = \"\"<br/>    if .lstr(s2, 20)\u00a0!= FIRST20 <br/>      s = \"Failure! The first 20 digits are: \" + .lstr(s2, 20) + \" but they should be: \" + FIRST20 + \"{d}{a}\"<br/>    end if<br/>    if .rstr(s2, 20)\u00a0!= LAST20 <br/>      s = s + \"Failure! The first 20 digits are: \" + .lstr(s2, 20) + \" but they should be: \" + LAST20 + \"{d}{a}\"<br/>    end if<br/>  end if<br/>end function s</pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">num</span>|<br/><span class=\"re6\">num</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">5</span> raisedTo: <span class=\"br0\">(</span><span class=\"re5\">4</span> raisedTo: <span class=\"br0\">(</span><span class=\"re5\">3</span> raisedTo: <span class=\"re5\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> asString.<br/><span class=\"re0\">Transcript</span><br/>   show: <span class=\"br0\">(</span><span class=\"re5\">num</span> first: <span class=\"re5\">20</span><span class=\"br0\">)</span>, <span class=\"st0\">'...'</span>, <span class=\"br0\">(</span><span class=\"re5\">num</span> last: <span class=\"re5\">20</span><span class=\"br0\">)</span>; cr;<br/>   show: <span class=\"st0\">'digits: '</span>, <span class=\"re5\">num</span> size asString.</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">t = #.str(5^(4^(3^2)))<br/>n = #.size(t)<br/>#.output(n,\" digits\")<br/>#.output(#.mid(t,1,20),\"...\",#.mid(t,n-19,20))</pre>"}, {"lang": "Standard ML", "loc": 9, "block": "<pre class=\"text highlighted_source\">let<br/>  val answer = IntInf.pow (5, IntInf.toInt (IntInf.pow (4, IntInf.toInt (IntInf.pow (3, 2)))))<br/>  val s = IntInf.toString answer<br/>  val len = size s<br/>in<br/>  print (\"has \" ^ Int.toString len ^ \" digits: \" ^<br/>         substring (s, 0, 20) ^ \" ... \" ^<br/>         substring (s, len-20, 20) ^ \"\\n\")<br/>end;</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> bigValue <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy0\">**</span><span class=\"nu0\">4</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"5**4**3**2 has [string length $bigValue] digits\"</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> match <span class=\"st0\">\"62060698786608744707*92256259918212890625\"</span> <span class=\"re0\">$bigValue</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Value starts with 62060698786608744707, ends with 92256259918212890625\"</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Value does not match 62060698786608744707...92256259918212890625\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 10, "block": "<pre class=\"text highlighted_source\">@(bind (f20 l20 ndig)<br/>       @(let* ((str (tostring (expt 5 4 3 2)))<br/>               (len (length str)))<br/>          (list [str\u00a0:..20] [str -20..:] len)))<br/>@(bind f20 \"62060698786608744707\")<br/>@(bind l20 \"92256259918212890625\")<br/>@(output)<br/>@<a class=\"__cf_email__\" data-cfemail=\"cfa9fdffe1e1e18fa3fdff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/><a class=\"__cf_email__\" data-cfemail=\"f59b919c929c8186c8b59b919c92\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>@(end)</pre>"}, {"lang": "Ursa", "loc": 26, "block": "<pre class=\"text highlighted_source\">import \"unbounded_int\"<br/>decl unbounded_int x<br/>x.set ((x.valueof 5).pow ((x.valueof 4).pow ((x.valueof 3).pow 2)))<br/>\u00a0<br/>decl string first last xstr<br/>set xstr (string x)<br/>\u00a0<br/># get the first twenty digits<br/>decl int i<br/>for (set i 0) (&lt; i 20) (inc i)<br/>\tset first (+ first xstr&lt;i&gt;)<br/>end for<br/>\u00a0<br/># get the last twenty digits<br/>for (set i (- (size xstr) 20)) (&lt; i (size xstr)) (inc i)<br/>\tset last (+ last xstr&lt;i&gt;)<br/>end for<br/>\u00a0<br/>out \"the first and last digits of 5^(4^(3^2)) are \" first \"...\" console<br/>out last \" (the result was \" (size xstr) \" digits long)\" endl endl console<br/>\u00a0<br/>if (and (and (= first \"62060698786608744707\") (= last \"92256259918212890625\")) (= (size xstr) 183231))<br/>\tout \"(pass)\" endl console<br/>else<br/>\tout \"FAIL\" endl console<br/>end if</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import bcd<br/>\u00a0<br/>#show+<br/>\u00a0<br/>main = &lt;<a class=\"__cf_email__\" data-cfemail=\"b59bf5dccdc1e5ed\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> take/$20; ^|T/~&amp; '...'<a class=\"__cf_email__\" data-cfemail=\"311c1c7149\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,'length: '<a class=\"__cf_email__\" data-cfemail=\"b89595f8d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+\u00a0%nP+ <a class=\"__cf_email__\" data-cfemail=\"e9858c878e9d81a99d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;@h\u00a0%vP power=&gt; &lt;5_,4_,3_,2_&gt;</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>n:=BN(5).pow(BN(4).pow(BN(3).pow(2)));<br/>s:=n.toString();<br/>\"%,d\".fmt(s.len()).println();<br/>println(s[0,20],\"...\",s[-20,*]);</pre>"}]}