{"task": "Priority_queue", "blocks": [{"lang": "Ada", "loc": 42, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Synchronized_Queue_Interfaces</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Unbounded_Priority_Queues</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Priority_Queues <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Containers</span>;<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>   <span class=\"kw3\">type</span> Queue_Element <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Priority\u00a0: Natural;<br/>      Content \u00a0: Unbounded_String;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw3\">function</span> Get_Priority <span class=\"br0\">(</span>Element\u00a0: Queue_Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Element.<span class=\"me1\">Priority</span>;<br/>   <span class=\"kw1\">end</span> Get_Priority;<br/>   <span class=\"kw3\">function</span> Before <span class=\"br0\">(</span>Left, Right\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Left &gt; Right;<br/>   <span class=\"kw1\">end</span> Before;<br/>   <span class=\"kw3\">package</span> String_Queues <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Synchronized_Queue_Interfaces<br/>     <span class=\"br0\">(</span>Element_Type =&gt; Queue_Element<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> String_Priority_Queues <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Unbounded_Priority_Queues<br/>     <span class=\"br0\">(</span>Queue_Interfaces =&gt; String_Queues,<br/>      Queue_Priority =&gt; Natural<span class=\"br0\">)</span>;<br/>\u00a0<br/>   My_Queue\u00a0: String_Priority_Queues.<span class=\"me1\">Queue</span>;<br/><span class=\"kw1\">begin</span><br/>   My_Queue.<span class=\"me1\">Enqueue</span> <span class=\"br0\">(</span>New_Item =&gt; <span class=\"br0\">(</span>Priority =&gt; <span class=\"nu0\">3</span>, Content =&gt; To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   My_Queue.<span class=\"me1\">Enqueue</span> <span class=\"br0\">(</span>New_Item =&gt; <span class=\"br0\">(</span>Priority =&gt; <span class=\"nu0\">4</span>, Content =&gt; To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   My_Queue.<span class=\"me1\">Enqueue</span> <span class=\"br0\">(</span>New_Item =&gt; <span class=\"br0\">(</span>Priority =&gt; <span class=\"nu0\">5</span>, Content =&gt; To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   My_Queue.<span class=\"me1\">Enqueue</span> <span class=\"br0\">(</span>New_Item =&gt; <span class=\"br0\">(</span>Priority =&gt; <span class=\"nu0\">1</span>, Content =&gt; To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   My_Queue.<span class=\"me1\">Enqueue</span> <span class=\"br0\">(</span>New_Item =&gt; <span class=\"br0\">(</span>Priority =&gt; <span class=\"nu0\">2</span>, Content =&gt; To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw1\">declare</span><br/>      Element\u00a0: Queue_Element;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> My_Queue.<span class=\"me1\">Current_Use</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         My_Queue.<span class=\"me1\">Dequeue</span> <span class=\"br0\">(</span>Element =&gt; Element<span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span>Natural'Image <span class=\"br0\">(</span>Element.<span class=\"me1\">Priority</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" =&gt; \"</span> &amp; To_String <span class=\"br0\">(</span>Element.<span class=\"me1\">Content</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Priority_Queues;</pre>"}, {"lang": "AutoHotkey", "loc": 60, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">;-----------------------------------</span><br/>PQ_TopItem<span class=\"br0\">(</span>Queue<span class=\"sy0\">,</span>Task<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t<span class=\"co1\">; remove and return top priority item </span><br/>\tTopPriority <span class=\"sy0\">:=</span> PQ_TopPriority<span class=\"br0\">(</span>Queue<span class=\"br0\">)</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>P <span class=\"sy0\">=</span> TopPriority<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>T<span class=\"sy0\">=</span>Task<span class=\"br0\">)</span>||!Task<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> T <span class=\"sy0\">,</span> Queue<span class=\"sy0\">.</span>Remove<span class=\"br0\">(</span>T<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_AddTask<span class=\"br0\">(</span>Queue<span class=\"sy0\">,</span>Task<span class=\"sy0\">,</span>Priority<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t<span class=\"co1\">; insert and return new task</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>T<span class=\"sy0\">=</span>Task<span class=\"br0\">)</span> ||\u00a0!<span class=\"br0\">(</span>Priority <span class=\"sy0\">&amp;&amp;</span> Task<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> Task<span class=\"sy0\">,</span>\tQueue<span class=\"br0\">[</span>Task<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Priority<br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_DelTask<span class=\"br0\">(</span>Queue<span class=\"sy0\">,</span> Task<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t<span class=\"co1\">; delete and return task</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>T <span class=\"sy0\">=</span> Task<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> Task<span class=\"sy0\">,</span>\tQueue<span class=\"sy0\">.</span>Remove<span class=\"br0\">(</span>Task<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_Peek<span class=\"br0\">(</span>Queue<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t\t\t<span class=\"co1\">; peek and return top priority task(s)</span><br/>\tTopPriority <span class=\"sy0\">:=</span> PQ_TopPriority<span class=\"br0\">(</span>Queue<span class=\"br0\">)</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>P <span class=\"sy0\">=</span> TopPriority<span class=\"br0\">)</span><br/>\t\t\tPeekList <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>PeekList?<span class=\"st0\">\"`n\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`t\"</span> T<br/>\t<span class=\"kw1\">return</span> PeekList<br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_Check<span class=\"br0\">(</span>Queue<span class=\"sy0\">,</span>Task<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t\t<span class=\"co1\">; check task and return its priority</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>T <span class=\"sy0\">=</span> Task<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> P<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_Edit<span class=\"br0\">(</span>Queue<span class=\"sy0\">,</span>Task<span class=\"sy0\">,</span>Priority<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t<span class=\"co1\">; Update task priority and return its new priority</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>T <span class=\"sy0\">=</span> Task<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> Priority<span class=\"sy0\">,</span>\tQueue<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"sy0\">:=</span>Priority<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_View<span class=\"br0\">(</span>Queue<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t\t\t<span class=\"co1\">; view current Queue</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\tRes <span class=\"sy0\">.=</span> P <span class=\"st0\">\"\u00a0: \"</span> T <span class=\"st0\">\"`n\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> Res<span class=\"sy0\">,</span> FMySort<br/>\t<span class=\"kw1\">return</span> <span class=\"st0\">\"Priority Queue=`n\"</span> Res<br/><span class=\"br0\">}</span><br/>MySort<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"st0\">\"(\\d+)\u00a0: (.*)\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span><span class=\"st0\">\"(\\d+)\u00a0: (.*)\"</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> x1<span class=\"sy0\">&gt;</span>y1?<span class=\"nu0\">1</span>:x1<span class=\"sy0\">&lt;</span>y1?<span class=\"sy0\">-</span><span class=\"nu0\">1</span>: x2<span class=\"sy0\">&gt;</span>y2?<span class=\"nu0\">1</span>:x2<span class=\"sy0\">&lt;</span>y2?<span class=\"sy0\">-</span><span class=\"nu0\">1</span>: <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;-----------------------------------</span><br/>PQ_TopPriority<span class=\"br0\">(</span>Queue<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t\t<span class=\"co1\">; return queue's top priority</span><br/>\tfor T<span class=\"sy0\">,</span> P in Queue<br/>\t\tTopPriority <span class=\"sy0\">:=</span> TopPriority?TopPriority:P\t<span class=\"sy0\">,</span> TopPriority <span class=\"sy0\">:=</span> TopPriority<span class=\"sy0\">&lt;</span>P?TopPriority:P<br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> TopPriority<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axiom", "loc": 27, "block": "<pre class=\"text highlighted_source\">)abbrev Domain ORDKE OrderedKeyEntry<br/>OrderedKeyEntry(Key:OrderedSet,Entry:SetCategory): Exports == Implementation where<br/>  Exports == OrderedSet with<br/>    construct: (Key,Entry) -&gt;\u00a0%<br/>    elt: (%,\"key\") -&gt; Key<br/>    elt: (%,\"entry\") -&gt; Entry<br/>  Implementation == add<br/>    Rep\u00a0:= Record(k:Key,e:Entry)<br/>    x,y:\u00a0%<br/>    construct(a,b) == construct(a,b)$Rep @\u00a0%<br/>    elt(x,\"key\"):Key == (<a class=\"__cf_email__\" data-cfemail=\"641c24360114\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>).k<br/>    elt(x,\"entry\"):Entry == (<a class=\"__cf_email__\" data-cfemail=\"7d053d2f180d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>).e<br/>    x &lt; y == x.key &lt; y.key<br/>    x = y == x.key = y.key<br/>    hash x == hash(x.key)<br/>    if Entry has CoercibleTo OutputForm then<br/>      coerce(x):OutputForm == bracket [(x.key)::OutputForm,(x.entry)::OutputForm]<br/>)abbrev Domain PRIORITY PriorityQueue<br/>S ==&gt; OrderedKeyEntry(Key,Entry)<br/>PriorityQueue(Key:OrderedSet,Entry:SetCategory): Exports == Implementation where<br/>  Exports == PriorityQueueAggregate S with<br/>    heap\u00a0: List S  -&gt;\u00a0%<br/>    setelt: (%,Key,Entry) -&gt; Entry<br/>  Implementation == Heap(S) add<br/>    setelt(x:%,key:Key,entry:Entry) == <br/>      insert!(construct(key,entry)$S,x)<br/>      entry</pre>"}, {"lang": "Batch File", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>setlocal enabledelayedexpansion<br/>\u00a0<br/>call\u00a0:push 10  \"item ten\"<br/>call\u00a0:push 2   \"item two\"<br/>call\u00a0:push 100 \"item one hundred\"<br/>call\u00a0:push 5   \"item five\"<br/>\u00a0<br/>call\u00a0:pop &amp; echo\u00a0!order!\u00a0!item!<br/>call\u00a0:pop &amp; echo\u00a0!order!\u00a0!item!<br/>call\u00a0:pop &amp; echo\u00a0!order!\u00a0!item!<br/>call\u00a0:pop &amp; echo\u00a0!order!\u00a0!item!<br/>call\u00a0:pop &amp; echo\u00a0!order!\u00a0!item!<br/>\u00a0<br/>goto:eof<br/>\u00a0<br/>\u00a0<br/>:push<br/>set temp=000%1<br/>set queu%temp:~-3%=%2<br/>goto:eof<br/>\u00a0<br/>:pop<br/>set queu &gt;nul 2&gt;nul<br/>if\u00a0%errorlevel% equ 1 (set order=-1&amp;set item=no more items &amp; goto:eof)  <br/>for /f \"tokens=1,2 delims==\"\u00a0%%a in ('set queu') do set\u00a0%%a=&amp; set order=%%a&amp; set item=%%~b&amp; goto:next<br/>:next<br/>set order=\u00a0%order:~-3%<br/>goto:eof</pre>"}, {"lang": "C", "loc": 72, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> priority<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> node_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    node_t <span class=\"sy0\">*</span>nodes<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> len<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> size<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> heap_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> push <span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>h<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> priority<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;=</span> h<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        h<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">?</span> h<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>        h<span class=\"sy0\">-&gt;</span>nodes <span class=\"sy0\">=</span> <span class=\"br0\">(</span>node_t <span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>nodes<span class=\"sy0\">,</span> h<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>node_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">priority</span> <span class=\"sy0\">&gt;</span> priority<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        i <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">priority</span> <span class=\"sy0\">=</span> priority<span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> data<span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pop <span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>h<span class=\"sy0\">-&gt;</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>h<span class=\"sy0\">-&gt;</span>len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    h<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">--;</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i<span class=\"sy0\">!=</span>h<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        k <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;=</span> h<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">&amp;&amp;</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">priority</span> <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">priority</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            k <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;=</span> h<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">&amp;&amp;</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">priority</span> <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">priority</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            k <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>nodes<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        i <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    heap_t <span class=\"sy0\">*</span>h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>heap_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> pop<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;queue&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">priority_queue</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> pq<span class=\"sy4\">;</span><br/>  pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>pq.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> pq.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> pq.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 60, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PriorityQueue<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            PriorityQueue PQ <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PriorityQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PQ<span class=\"sy0\">.</span><span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PQ<span class=\"sy0\">.</span><span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PQ<span class=\"sy0\">.</span><span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PQ<span class=\"sy0\">.</span><span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PQ<span class=\"sy0\">.</span><span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>PQ<span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> Val <span class=\"sy0\">=</span> PQ<span class=\"sy0\">.</span><span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Val<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">+</span> Val<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> PriorityQueue<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">SortedList</span> PseudoQueue<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> Empty<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> PseudoQueue<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> PriorityQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            PseudoQueue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">SortedList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> push<span class=\"br0\">(</span><span class=\"kw4\">object</span> Priority, <span class=\"kw4\">object</span> <span class=\"kw1\">Value</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            PseudoQueue<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>Priority, <span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ReturnValue <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"kw1\">null</span>, <span class=\"kw1\">null</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>PseudoQueue<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                ReturnValue<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> PseudoQueue<span class=\"sy0\">.</span><span class=\"me1\">GetKey</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                ReturnValue<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> PseudoQueue<span class=\"sy0\">.</span><span class=\"me1\">GetByIndex</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                PseudoQueue<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> ReturnValue<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 34, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;priority-queue's are implemented with association lists</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-pq <span class=\"br0\">(</span>alist<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-alist alist<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">;Will change the state of pq</span><br/><span class=\"co1\">;</span><br/><span class=\"br0\">(</span>define-modify-macro insert-pq <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>pq pair<span class=\"br0\">)</span> <span class=\"br0\">(</span>sort-alist <span class=\"br0\">(</span><span class=\"kw1\">cons</span> pair pq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-modify-macro remove-pq-aux <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">cdr</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> remove-pq <span class=\"br0\">(</span>pq<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>aux <span class=\"br0\">(</span>copy-alist <span class=\"sy0\">,</span>pq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>REMOVE-PQ-AUX <span class=\"sy0\">,</span>pq<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">car</span> aux<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">;Will not change the state of pq</span><br/><span class=\"co1\">;</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> insert-pq-non-destructive <span class=\"br0\">(</span>pair pq<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>sort-alist <span class=\"br0\">(</span><span class=\"kw1\">cons</span> pair pq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> remove-pq-non-destructive <span class=\"br0\">(</span>pq<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pq<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;testing</span><br/><span class=\"br0\">(</span>defparameter a <span class=\"br0\">(</span>make-pq '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> a<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>insert-pq a '<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> a<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> <span class=\"br0\">(</span>remove-pq a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> a<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> <span class=\"br0\">(</span>remove-pq a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> a<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 19, "block": "<pre class=\"clojure highlighted_source\">user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>data<span class=\"sy0\">.</span>priority<span class=\"sy0\">-</span><span class=\"kw1\">map</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; priority-map can be used as a priority queue</span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">def</span> p <span class=\"br0\">(</span>priority<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"st0\">\"Clear drains\"</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Feed cat\"</span> <span class=\"nu0\">4</span>, <span class=\"st0\">\"Make tea\"</span> <span class=\"nu0\">5</span>, <span class=\"st0\">\"Solve RC tasks\"</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#'user<span class=\"sy0\">/</span>p<br/>user<span class=\"sy0\">=&gt;</span> p<br/><span class=\"br0\">{</span><span class=\"st0\">\"Solve RC tasks\"</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"Clear drains\"</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Feed cat\"</span> <span class=\"nu0\">4</span>, <span class=\"st0\">\"Make tea\"</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; You can use assoc or conj to add items</span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> p <span class=\"st0\">\"Tax return\"</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><span class=\"st0\">\"Solve RC tasks\"</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"Tax return\"</span> <span class=\"nu0\">2</span>, <span class=\"st0\">\"Clear drains\"</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Feed cat\"</span> <span class=\"nu0\">4</span>, <span class=\"st0\">\"Make tea\"</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; peek to get first item, pop to give you back the priority-map with the first item removed </span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>peek p<span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Solve RC tasks\"</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Merge priority-maps together</span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">into</span> p <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Wax Car\"</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"Paint Fence\"</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"Sand Floor\"</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><span class=\"st0\">\"Solve RC tasks\"</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"Paint Fence\"</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"Clear drains\"</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Sand Floor\"</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Wax Car\"</span> <span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span> <span class=\"nu0\">4</span>, <span class=\"st0\">\"Make tea\"</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 80, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>PriorityQueue = <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Use closure style for object creation (so no \"new\" required).</span><br/>  <span class=\"co1\"># Private variables are toward top.</span><br/>  h = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  better = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    h<span class=\"br0\">[</span>a<span class=\"br0\">]</span>.<span class=\"me1\">priority</span> <span class=\"sy0\">&lt;</span> h<span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">priority</span><br/>\u00a0<br/>  swap = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">[</span>h<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span> h<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">]</span> = <span class=\"br0\">[</span>h<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span> h<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  sift_down = <span class=\"sy0\">-&gt;</span><br/>    max = h.<span class=\"me1\">length</span><br/>    n = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&lt;</span> max<br/>      c1 = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      c2 = c1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      best = n<br/>      best = c1 <span class=\"kw1\">if</span> c1 <span class=\"sy0\">&lt;</span> max <span class=\"kw2\">and</span> better<span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> best<span class=\"br0\">)</span><br/>      best = c2 <span class=\"kw1\">if</span> c2 <span class=\"sy0\">&lt;</span> max <span class=\"kw2\">and</span> better<span class=\"br0\">(</span>c2<span class=\"sy0\">,</span> best<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> best == n<br/>      swap n<span class=\"sy0\">,</span> best<br/>      n = best<br/>\u00a0<br/>  sift_up = <span class=\"sy0\">-&gt;</span><br/>    n = h.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      parent = Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> better parent<span class=\"sy0\">,</span> n<br/>      swap n<span class=\"sy0\">,</span> parent<br/>      n = parent<br/>\u00a0<br/>  <span class=\"co1\"># now return the public interface, which is an object that only</span><br/>  <span class=\"co1\"># has functions on it</span><br/>  self =<br/>    size<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>      h.<span class=\"me1\">length</span><br/>\u00a0<br/>    push<span class=\"sy0\">:</span> <span class=\"br0\">(</span>priority<span class=\"sy0\">,</span> value<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      elem =<br/>        priority<span class=\"sy0\">:</span> priority<br/>        value<span class=\"sy0\">:</span> value<br/>      h.<span class=\"me1\">push</span> elem<br/>      sift_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    pop<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"cannot pop from empty queue\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> h.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>      value = h<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span><br/>      last = h.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> h.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>        h<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = last<br/>        sift_down<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      value<br/>\u00a0<br/><span class=\"co1\"># test</span><br/>do <span class=\"sy0\">-&gt;</span>     <br/>  pq = PriorityQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  pq.<span class=\"me1\">push</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><br/>  pq.<span class=\"me1\">push</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><br/>  pq.<span class=\"me1\">push</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><br/>  pq.<span class=\"me1\">push</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><br/>  pq.<span class=\"me1\">push</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> pq.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    console.<span class=\"me1\">log</span> pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># test high performance</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100000</span><span class=\"br0\">]</span><br/>    priority = Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    pq.<span class=\"me1\">push</span> priority<span class=\"sy0\">,</span> priority<br/>\u00a0<br/>  v = pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"First random element was #{v}\"</span><br/>  <span class=\"kw1\">while</span> pq.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    new_v = pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"Queue broken\"</span> <span class=\"kw1\">if</span> new_v <span class=\"sy0\">&lt;</span> v<br/>    v = new_v<br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"Final random element was #{v}\"</span><br/>\u00a0</pre>"}, {"lang": "Component Pascal", "loc": 90, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> PQueues;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Boxes;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  Rank<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">RECORD</span><br/>    p<span class=\"sy0\">-:</span> <span class=\"kw4\">LONGINT</span>; <span class=\"coMULTI\">(* Priority *)</span><br/>    value<span class=\"sy0\">-:</span> Boxes.<span class=\"me1\">Object</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  PQueue<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">RECORD</span><br/>    a<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> Rank;<br/>    size<span class=\"sy0\">-:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> NewRank<span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>; v<span class=\"sy0\">:</span> Boxes.<span class=\"me1\">Object</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Rank;<br/>  <span class=\"kw1\">VAR</span><br/>    r<span class=\"sy0\">:</span> Rank;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>;r.<span class=\"me1\">p</span> <span class=\"sy0\">:=</span> p;r.<span class=\"me1\">value</span> <span class=\"sy0\">:=</span> v;<br/>    <span class=\"kw1\">RETURN</span> r<br/>  <span class=\"kw1\">END</span> NewRank;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> NewPQueue<span class=\"sy0\">*</span><span class=\"br0\">(</span>cap<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> PQueue;<br/>  <span class=\"kw1\">VAR</span><br/>    pq<span class=\"sy0\">:</span> PQueue;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>pq<span class=\"br0\">)</span>;pq.<span class=\"me1\">size</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>pq.<span class=\"me1\">a</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;pq.<span class=\"me1\">a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> NewRank<span class=\"br0\">(</span><span class=\"kw3\">MIN</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">RETURN</span> pq<br/>  <span class=\"kw1\">END</span> NewPQueue;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>pq<span class=\"sy0\">:</span> PQueue<span class=\"br0\">)</span> Push<span class=\"sy0\">*</span><span class=\"br0\">(</span>r<span class=\"sy0\">:</span>Rank<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>pq.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>    i <span class=\"sy0\">:=</span> pq.<span class=\"me1\">size</span>;<br/>    <span class=\"kw1\">WHILE</span> r.<span class=\"me1\">p</span> &lt; pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">p</span> <span class=\"kw1\">DO</span><br/>      pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>;i <span class=\"sy0\">:=</span> i <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">END</span>;<br/>    pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> r<br/>  <span class=\"kw1\">END</span> Push;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>pq<span class=\"sy0\">:</span> PQueue<span class=\"br0\">)</span> Pop<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Rank<span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    r<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> Rank;<br/>    i<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    ok<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    r <span class=\"sy0\">:=</span> pq.<span class=\"me1\">a</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>; <span class=\"coMULTI\">(* Priority object *)</span><br/>    y <span class=\"sy0\">:=</span> pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>pq.<span class=\"me1\">size</span><span class=\"br0\">]</span>; <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>pq.<span class=\"me1\">size</span><span class=\"br0\">)</span>; i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>; ok <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt;<span class=\"sy0\">=</span> pq.<span class=\"me1\">size</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span>ok <span class=\"kw1\">DO</span><br/>      j <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>j &lt; pq.<span class=\"me1\">size</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">p</span> &gt; pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">p</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">IF</span> y.<span class=\"me1\">p</span> &gt; pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">p</span> <span class=\"kw1\">THEN</span> pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>; i <span class=\"sy0\">:=</span> j <span class=\"kw1\">ELSE</span> ok <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    pq.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> y;<br/>    <span class=\"kw1\">RETURN</span> r<br/>  <span class=\"kw1\">END</span> Pop;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>pq<span class=\"sy0\">:</span> PQueue<span class=\"br0\">)</span> IsEmpty<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> pq.<span class=\"me1\">size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">END</span> IsEmpty;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Test<span class=\"sy0\">*</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    pq<span class=\"sy0\">:</span> PQueue;<br/>    r<span class=\"sy0\">:</span> Rank;<br/>    <span class=\"kw1\">PROCEDURE</span> ShowRank<span class=\"br0\">(</span>r<span class=\"sy0\">:</span>Rank<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">BEGIN</span><br/>      StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>r.<span class=\"me1\">p</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>r.<span class=\"me1\">value</span>.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>    <span class=\"kw1\">END</span> ShowRank;<br/>  <span class=\"kw1\">BEGIN</span><br/>    pq <span class=\"sy0\">:=</span> NewPQueue<span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span>;<br/>    pq.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewRank<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>Boxes.<span class=\"me1\">NewString</span><span class=\"br0\">(</span><span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    pq.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewRank<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>Boxes.<span class=\"me1\">NewString</span><span class=\"br0\">(</span><span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    pq.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewRank<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>Boxes.<span class=\"me1\">NewString</span><span class=\"br0\">(</span><span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    pq.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewRank<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>Boxes.<span class=\"me1\">NewString</span><span class=\"br0\">(</span><span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    pq.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewRank<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>Boxes.<span class=\"me1\">NewString</span><span class=\"br0\">(</span><span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    ShowRank<span class=\"br0\">(</span>pq.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    ShowRank<span class=\"br0\">(</span>pq.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    ShowRank<span class=\"br0\">(</span>pq.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    ShowRank<span class=\"br0\">(</span>pq.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    ShowRank<span class=\"br0\">(</span>pq.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Test;<br/>\u00a0<br/><span class=\"kw1\">END</span> PQueues.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">container</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> tuple T<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> heap <span class=\"sy0\">=</span> heapify<span class=\"br0\">(</span><span class=\"br0\">[</span>T<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         T<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         T<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         T<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                         T<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>heap.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>heap.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        heap.<span class=\"me1\">removeFront</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'tree<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define tasks <span class=\"br0\">(</span>make-bin-tree <span class=\"nu0\">3</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-insert tasks <span class=\"nu0\">2</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-insert tasks <span class=\"nu0\">5</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-insert tasks <span class=\"nu0\">1</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-insert tasks <span class=\"nu0\">4</span> <span class=\"st0\">\"Feed \ud83d\udc21\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Feed \ud83d\udc21\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-first tasks<span class=\"br0\">)</span> \u2192 <span class=\"kw1\">null</span><br/>\u00a0<br/><span class=\"co1\">;; similarly</span><br/><span class=\"br0\">(</span>bin-tree-pop-<span class=\"kw1\">last</span> tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>bin-tree-pop-<span class=\"kw1\">last</span> tasks<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"Feed \ud83d\udc21\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">; etc.</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 30, "block": "<pre class=\"text highlighted_source\">defmodule Priority do<br/>  def create, do:\u00a0:gb_trees.empty<br/>\u00a0<br/>  def insert( element, priority, queue ), do:\u00a0:gb_trees.enter( priority, element, queue )<br/>\u00a0<br/>  def peek( queue ) do<br/>    {_priority, element, _new_queue} =\u00a0:gb_trees.take_smallest( queue )<br/>    element<br/>  end<br/>\u00a0<br/>  def task do<br/>    items = [{3, \"Clear drains\"}, {4, \"Feed cat\"}, {5, \"Make tea\"}, {1, \"Solve RC tasks\"}, {2, \"Tax return\"}]<br/>    queue = Enum.reduce(items, create, fn({priority, element}, acc) -&gt; insert( element, priority, acc ) end)<br/>    IO.puts \"peek priority: #{peek( queue )}\"<br/>    Enum.reduce(1..length(items), queue, fn(_n, q) -&gt; write_top( q ) end)<br/>  end<br/>\u00a0<br/>  def top( queue ) do<br/>    {_priority, element, new_queue} =\u00a0:gb_trees.take_smallest( queue )<br/>    {element, new_queue}<br/>  end<br/>\u00a0<br/>  defp write_top( q ) do<br/>    {element, new_queue} = top( q )<br/>    IO.puts \"top priority: #{element}\"<br/>    new_queue<br/>  end<br/>end<br/>\u00a0<br/>Priority.task</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> priority_queue <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>create<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> insert<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> peek<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> top<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/gb_trees.html\"><span class=\"kw5\">gb_trees</span></a>:<span class=\"re3\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">insert</span><span class=\"br0\">(</span> <span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/gb_trees.html\"><span class=\"kw5\">gb_trees</span></a>:<span class=\"re3\">enter</span><span class=\"br0\">(</span> <span class=\"re5\">Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">peek</span><span class=\"br0\">(</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">_Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">_New_queue</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/gb_trees.html\"><span class=\"kw5\">gb_trees</span></a>:<span class=\"re3\">take_smallest</span><span class=\"br0\">(</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Element</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Items</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Queue</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Element</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">insert</span><span class=\"br0\">(</span> <span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Items</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"peek priority: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">peek</span><span class=\"br0\">(</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">_N</span><span class=\"sy1\">,</span> <span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">write_top</span><span class=\"br0\">(</span> <span class=\"re5\">Q</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Queue</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Items</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">top</span><span class=\"br0\">(</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">_Priority</span><span class=\"sy1\">,</span> <span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">New_queue</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/gb_trees.html\"><span class=\"kw5\">gb_trees</span></a>:<span class=\"re3\">take_smallest</span><span class=\"br0\">(</span> <span class=\"re5\">Queue</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">New_queue</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">write_top</span><span class=\"br0\">(</span> <span class=\"re5\">Q</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">New_queue</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">top</span><span class=\"br0\">(</span> <span class=\"re5\">Q</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"top priority: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Element</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">New_queue</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 103, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>RequireQualifiedAccess<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">module</span> PriorityQ <span class=\"sy0\">=</span><br/>\u00a0<br/><span class=\"co1\">//  type 'a treeElement = Element of uint32 * 'a</span><br/>  <span class=\"kw1\">type</span> <span class=\"st0\">'a treeElement = struct val k:uint32 val v:'</span>a <span class=\"kw1\">new</span><span class=\"br0\">(</span>k,v<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> k<span class=\"sy0\">=</span>k<span class=\"sy0\">;</span>v<span class=\"sy0\">=</span>v <span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">type</span> <span class=\"st0\">'a tree = Node of uint32 * '</span>a treeElement <span class=\"sy0\">*</span> <span class=\"st0\">'a tree list<br/>\u00a0<br/>  type '</span>a heap <span class=\"sy0\">=</span> <span class=\"st0\">'a tree list<br/>\u00a0<br/>  [&lt;CompilationRepresentation(CompilationRepresentationFlags.UseNullAsTrueValue)&gt;]<br/>  [&lt;NoEquality; NoComparison&gt;]<br/>  type '</span>a outerheap <span class=\"sy0\">=</span> | HeapEmpty | HeapNotEmpty <span class=\"kw1\">of</span> <span class=\"st0\">'a treeElement * '</span>a heap<br/>\u00a0<br/>  <span class=\"kw1\">let</span> empty <span class=\"sy0\">=</span> HeapEmpty<br/>\u00a0<br/>  <span class=\"kw1\">let</span> isEmpty <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> | HeapEmpty <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span> | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">inline</span> <span class=\"kw1\">private</span> rank <span class=\"br0\">(</span>Node<span class=\"br0\">(</span>r,_,_<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> r<br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">inline</span> <span class=\"kw1\">private</span> root <span class=\"br0\">(</span>Node<span class=\"br0\">(</span>_,x,_<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>\u00a0<br/>  <span class=\"kw1\">exception</span> Empty_Heap<br/>\u00a0<br/>  <span class=\"kw1\">let</span> peekMin <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> | HeapEmpty <span class=\"sy0\">-&gt;</span> None<br/>                         | HeapNotEmpty<span class=\"br0\">(</span><span class=\"kw3\">min</span>, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Some <span class=\"br0\">(</span><span class=\"kw3\">min</span>.<span class=\"me1\">k</span>, <span class=\"kw3\">min</span>.<span class=\"me1\">v</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> <span class=\"kw1\">private</span> findMin heap <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> heap <span class=\"kw1\">with</span> | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">raise</span> Empty_Heap <span class=\"co1\">//guarded so should never happen</span><br/>                    | <span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> root node,<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                    | topnode::heap<span class=\"st0\">' -&gt;<br/>                      let min,subheap = findMin heap'</span> <span class=\"kw1\">in</span> <span class=\"kw1\">let</span> rtn <span class=\"sy0\">=</span> root topnode<br/>                      <span class=\"kw1\">match</span> subheap <span class=\"kw1\">with</span><br/>                        | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> rtn.<span class=\"me1\">k</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">min</span>.<span class=\"me1\">k</span> <span class=\"kw1\">then</span> <span class=\"kw3\">min</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> rtn,<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                        | minnode::heap<span class=\"st0\">''</span> <span class=\"sy0\">-&gt;</span><br/>                          <span class=\"kw1\">let</span> rmn <span class=\"sy0\">=</span> root minnode<br/>                          <span class=\"kw1\">if</span> rtn.<span class=\"me1\">k</span> <span class=\"sy0\">&lt;=</span> rmn.<span class=\"me1\">k</span> <span class=\"kw1\">then</span> rtn,heap<br/>                          <span class=\"kw1\">else</span> rmn,minnode::topnode::heap<span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">private</span> mergeTree <span class=\"br0\">(</span>Node<span class=\"br0\">(</span>r,kv1,ts1<span class=\"br0\">)</span> <span class=\"kw1\">as</span> tree1<span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>_,kv2,ts2<span class=\"br0\">)</span> <span class=\"kw1\">as</span> tree2<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> kv1.<span class=\"me1\">k</span> <span class=\"sy0\">&gt;</span> kv2.<span class=\"me1\">k</span> <span class=\"kw1\">then</span> Node<span class=\"br0\">(</span>r<span class=\"sy0\">+</span>1u,kv2,tree1::ts2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> Node<span class=\"br0\">(</span>r<span class=\"sy0\">+</span>1u,kv1,tree2::ts1<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> <span class=\"kw1\">private</span> insTree <span class=\"br0\">(</span>newnode: <span class=\"st0\">'a tree) heap =<br/>    match heap with<br/>      | [] -&gt; [newnode]<br/>      | topnode::heap'</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rank newnode<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>rank topnode<span class=\"br0\">)</span> <span class=\"kw1\">then</span> newnode::heap<br/>                          <span class=\"kw1\">else</span> insTree <span class=\"br0\">(</span>mergeTree newnode topnode<span class=\"br0\">)</span> heap<span class=\"st0\">'<br/>\u00a0<br/>  let push k v = let kv = treeElement(k,v) in let nn = Node(0u,kv,[])<br/>                   function | HeapEmpty -&gt; HeapNotEmpty(kv,[nn])<br/>                            | HeapNotEmpty(min,heap) -&gt; let nmin = if k &gt; min.k then min else kv<br/>                                                        HeapNotEmpty(nmin,insTree nn heap)<br/>\u00a0<br/>  let rec private merge'</span> heap1 heap2 <span class=\"sy0\">=</span> <span class=\"co1\">//doesn't guaranty minimum tree node as head!!!</span><br/>    <span class=\"kw1\">match</span> heap1,heap2 <span class=\"kw1\">with</span><br/>      | _,<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> heap1<br/>      | <span class=\"br0\">[</span><span class=\"br0\">]</span>,_ <span class=\"sy0\">-&gt;</span> heap2<br/>      | topheap1::heap1<span class=\"st0\">',topheap2::heap2'</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">match</span> compare <span class=\"br0\">(</span>rank topheap1<span class=\"br0\">)</span> <span class=\"br0\">(</span>rank topheap2<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>          | <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> topheap1::merge<span class=\"st0\">' heap1'</span> heap2<br/>          | <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> topheap2::merge<span class=\"st0\">' heap1 heap2'</span><br/>          | _ <span class=\"sy0\">-&gt;</span> insTree <span class=\"br0\">(</span>mergeTree topheap1 topheap2<span class=\"br0\">)</span> <span class=\"br0\">(</span>merge<span class=\"st0\">' heap1'</span> heap2<span class=\"st0\">')<br/>\u00a0<br/>  let merge oheap1 oheap2 = match oheap1,oheap2 with<br/>                              | _,HeapEmpty -&gt; oheap1<br/>                              | HeapEmpty,_ -&gt; oheap2<br/>                              | HeapNotEmpty(min1,heap1),HeapNotEmpty(min2,heap2) -&gt;<br/>                                  let min = if min1.k &gt; min2.k then min2 else min1<br/>                                  HeapNotEmpty(min,merge'</span> heap1 heap2<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> <span class=\"kw1\">private</span> removeMinTree <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>                          | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">raise</span> Empty_Heap <span class=\"co1\">// will never happen as already guarded</span><br/>                          | <span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> node,<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                          | t::ts <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> t<span class=\"st0\">',ts'</span> <span class=\"sy0\">=</span> removeMinTree ts<br/>                                     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>root t<span class=\"br0\">)</span>.<span class=\"me1\">k</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>root t<span class=\"st0\">').k then t,ts else t'</span>,t::ts<span class=\"st0\">'<br/>\u00a0<br/>  let deleteMin =<br/>    function | HeapEmpty -&gt; HeapEmpty<br/>             | HeapNotEmpty(_,heap) -&gt;<br/>               match heap with<br/>                 | [] -&gt; HeapEmpty // should never occur: non empty heap with no elements<br/>                 | [Node(_,_,heap'</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> heap<span class=\"st0\">' with<br/>                                          | [] -&gt; HeapEmpty<br/>                                          | _ -&gt; let min,_ = findMin heap'</span><br/>                                                 HeapNotEmpty<span class=\"br0\">(</span><span class=\"kw3\">min</span>,heap<span class=\"st0\">')<br/>                 | _::_ -&gt; let Node(_,_,ts1),ts2 = removeMinTree heap<br/>                           let nheap = merge'</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> ts1<span class=\"br0\">)</span> ts2 <span class=\"kw1\">in</span> <span class=\"kw1\">let</span> <span class=\"kw3\">min</span>,_ <span class=\"sy0\">=</span> findMin nheap<br/>                           HeapNotEmpty<span class=\"br0\">(</span><span class=\"kw3\">min</span>,nheap<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> replaceMin k v pq <span class=\"sy0\">=</span> push k v <span class=\"br0\">(</span>deleteMin pq<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> fromSeq sq <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> pq <span class=\"br0\">(</span>k, v<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> push k v pq<span class=\"br0\">)</span> empty sq<br/>\u00a0<br/>  <span class=\"kw1\">let</span> popMin pq <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> peekMin pq <span class=\"kw1\">with</span><br/>                      | None <span class=\"sy0\">-&gt;</span> None<br/>                      | Some<span class=\"br0\">(</span>kv<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>kv, deleteMin pq<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> toSeq pq <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> popMin pq<br/>\u00a0<br/>  <span class=\"kw1\">let</span> sort sq <span class=\"sy0\">=</span> sq <span class=\"sy0\">|&gt;</span> fromSeq <span class=\"sy0\">|&gt;</span> toSeq<br/>\u00a0<br/>  <span class=\"kw1\">let</span> adjust f pq <span class=\"sy0\">=</span> pq <span class=\"sy0\">|&gt;</span> toSeq <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>k, v<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f k v<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> fromSeq</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">&lt;min-heap&gt; [ {<br/>    { 3 \"Clear drains\" }<br/>    { 4 \"Feed cat\" }<br/>    { 5 \"Make tea\" }<br/>    { 1 \"Solve RC tasks\" }<br/>    { 2 \"Tax return\" }<br/>  } swap heap-push-all <br/>] [<br/>  [ print ] slurp-heap<br/>] bi</pre>"}, {"lang": "Fortran", "loc": 102, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> priority_queue_mod<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"kw3\">type</span> node<br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>              <span class=\"sy0\">::</span> <span class=\"me2\">task</span><br/>  <span class=\"kw3\">integer</span>                          <span class=\"sy0\">::</span> <span class=\"me2\">priority</span><br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"kw3\">type</span> queue<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">buf</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>                 <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">top</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">enqueue</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">siftdown</span><br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> siftdown<span class=\"br0\">(</span>this, a<span class=\"br0\">)</span><br/>  class <span class=\"br0\">(</span>queue<span class=\"br0\">)</span>           <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">integer</span>                 <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, parent, child<br/>  associate <span class=\"br0\">(</span>x <span class=\"sy0\">=</span>&gt; this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><br/>  parent <span class=\"sy0\">=</span> a<br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>parent<span class=\"sy0\">*</span><span class=\"nu0\">2</span> &lt;<span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><br/>    child <span class=\"sy0\">=</span> parent<span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>child <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> &lt;<span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span>child<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>priority &gt; x<span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"sy0\">%</span>priority <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        child <span class=\"sy0\">=</span> child <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">%</span>priority &lt; x<span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"sy0\">%</span>priority<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      x<span class=\"br0\">(</span><span class=\"br0\">[</span>child, parent<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"br0\">[</span>parent, child<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      parent <span class=\"sy0\">=</span> child<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>  <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>      <br/>  <span class=\"kw1\">end</span> associate<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> top<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>  class<span class=\"br0\">(</span>queue<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>   <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>  res <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><br/>  this<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">call</span> this<span class=\"sy0\">%</span>siftdown<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> enqueue<span class=\"br0\">(</span>this, priority, task<span class=\"br0\">)</span><br/>  class<span class=\"br0\">(</span>queue<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">integer</span>                     <span class=\"sy0\">::</span> <span class=\"me2\">priority</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>            <span class=\"sy0\">::</span> <span class=\"me2\">task</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>                  <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>     <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>                     <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  x<span class=\"sy0\">%</span>priority <span class=\"sy0\">=</span> priority<br/>  x<span class=\"sy0\">%</span>task <span class=\"sy0\">=</span> task<br/>  this<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n <span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>.<span class=\"kw4\">not</span>.<span class=\"kw4\">allocated</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span>&lt;this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>tmp<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tmp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>this<span class=\"sy0\">%</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<br/>    <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>tmp, this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>  i <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<br/>  <span class=\"kw1\">do</span> <br/>    i <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">call</span> this<span class=\"sy0\">%</span>siftdown<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> <br/>\u00a0<br/><span class=\"kw1\">program</span> main<br/>  <span class=\"kw3\">use</span> priority_queue_mod<br/>\u00a0<br/>  <span class=\"kw3\">type</span> <span class=\"br0\">(</span>queue<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">q</span><br/>  <span class=\"kw3\">type</span> <span class=\"br0\">(</span>node<span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">x</span> <br/>\u00a0<br/>  <span class=\"kw1\">call</span> q<span class=\"sy0\">%</span>enqueue<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> q<span class=\"sy0\">%</span>enqueue<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> q<span class=\"sy0\">%</span>enqueue<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make Tea\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> q<span class=\"sy0\">%</span>enqueue<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> q<span class=\"sy0\">%</span>enqueue<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>q<span class=\"sy0\">%</span>n &gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>    x <span class=\"sy0\">=</span> q<span class=\"sy0\">%</span>top<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    print <span class=\"st0\">\"(g0,a,a)\"</span>, x<span class=\"sy0\">%</span>priority, <span class=\"st0\">\" -&gt; \"</span>, <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>task<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0<br/><span class=\"co1\">! Output:</span><br/><span class=\"co1\">! 5 -&gt; Make Tea</span><br/><span class=\"co1\">! 4 -&gt; Feed cat</span><br/><span class=\"co1\">! 3 -&gt; Clear drains</span><br/><span class=\"co1\">! 2 -&gt; Tax return</span><br/><span class=\"co1\">! 1 -&gt; Solve RC tasks</span><br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 22, "block": "<pre class=\"text highlighted_source\">import util.ordering<br/>native scala.collection.mutable.PriorityQueue<br/>\u00a0<br/>data Task( priority, description )<br/>\u00a0<br/>def comparator( Task(a, _), Task(b, _) )<br/>  | a &gt; b     = -1<br/>  | a &lt; b     =  1<br/>  | otherwise =  0<br/>\u00a0<br/>q = PriorityQueue( ordering(comparator) )<br/>\u00a0<br/>q.enqueue(<br/>  Task(3, 'Clear drains'),<br/>  Task(4, 'Feed cat'),<br/>  Task(5, 'Make tea'),<br/>  Task(1, 'Solve RC tasks'),<br/>  Task(2, 'Tax return')<br/>  )<br/>\u00a0<br/>while not q.isEmpty()<br/>  println( q.dequeue() )</pre>"}, {"lang": "Go", "loc": 43, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"container/heap\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Task <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    priority <span class=\"kw4\">int</span><br/>    name     <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> TaskPQ <span class=\"sy1\">[]</span>Task<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self TaskPQ<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>self<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self TaskPQ<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> self<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>priority &lt; self<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>priority<br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self TaskPQ<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> self<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> self<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> self<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> self<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self <span class=\"sy3\">*</span>TaskPQ<span class=\"sy1\">)</span> Push<span class=\"sy1\">(</span>x <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span> <span class=\"sy3\">*</span>self <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>self<span class=\"sy1\">,</span> x<span class=\"sy3\">.</span><span class=\"sy1\">(</span>Task<span class=\"sy1\">))</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self <span class=\"sy3\">*</span>TaskPQ<span class=\"sy1\">)</span> Pop<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>popped <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>    popped <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>self<span class=\"sy1\">)[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>self<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"sy3\">*</span>self <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>self<span class=\"sy1\">)[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>self<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    pq <span class=\"sy2\">:=</span> &amp;TaskPQ<span class=\"sy1\">{{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"sy1\">}}</span><br/>\u00a0<br/>    <span class=\"co1\">// heapify</span><br/>    heap<span class=\"sy3\">.</span><span class=\"me1\">Init</span><span class=\"sy1\">(</span>pq<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// enqueue</span><br/>    heap<span class=\"sy3\">.</span>Push<span class=\"sy1\">(</span>pq<span class=\"sy1\">,</span> Task<span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"sy1\">})</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> pq<span class=\"sy3\">.</span>Len<span class=\"sy1\">()</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <br/>        <span class=\"co1\">// dequeue</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>heap<span class=\"sy3\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">(</span>pq<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 18, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">groovy.transform.Canonical</span><br/>\u00a0<br/>@Canonical<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Task <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> Comparable<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> priority<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> name<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> compareTo<span class=\"br0\">(</span>Task o<span class=\"br0\">)</span> <span class=\"br0\">{</span> priority <span class=\"sy0\">&lt;=&gt;</span> o<span class=\"sy0\">?</span>.<span class=\"me1\">priority</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> PriorityQueue<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span> <span class=\"br0\">{</span><br/>    add <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Task<span class=\"br0\">(</span>priority: <span class=\"nu0\">3</span>, name: <span class=\"st0\">'Clear drains'</span><span class=\"br0\">)</span><br/>    add <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Task<span class=\"br0\">(</span>priority: <span class=\"nu0\">4</span>, name: <span class=\"st0\">'Feed cat'</span><span class=\"br0\">)</span><br/>    add <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Task<span class=\"br0\">(</span>priority: <span class=\"nu0\">5</span>, name: <span class=\"st0\">'Make tea'</span><span class=\"br0\">)</span><br/>    add <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Task<span class=\"br0\">(</span>priority: <span class=\"nu0\">1</span>, name: <span class=\"st0\">'Solve RC tasks'</span><span class=\"br0\">)</span><br/>    add <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Task<span class=\"br0\">(</span>priority: <span class=\"nu0\">2</span>, name: <span class=\"st0\">'Tax return'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>empty<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> remove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>PQueue<span class=\"sy0\">.</span>Prio<span class=\"sy0\">.</span>Min<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>toList <span class=\"br0\">(</span>fromList <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">import</span> Utils   <span class=\"co1\"># For Closure class</span><br/><span class=\"kw1\">import</span> Collections      <span class=\"co1\"># For Heap (dense priority queue) class</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   pq <span class=\"sy0\">:=</span> Heap<span class=\"br0\">(</span><span class=\"sy0\">,</span> Closure<span class=\"br0\">(</span><span class=\"st0\">\"[]\"</span><span class=\"sy0\">,</span>Arg<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   pq<span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   pq<span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   pq<span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   pq<span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   pq<span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">while</span> task <span class=\"sy0\">:=</span> pq<span class=\"sy0\">.</span><span class=\"kw4\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>task<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span>task<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 23, "block": "<pre class=\"j highlighted_source\">coclass <span class=\"st_h\">'priorityQueue'</span><br/>\u00a0<br/>PRI=: <span class=\"st_h\">''</span><br/>QUE=: <span class=\"st_h\">''</span><br/>\u00a0<br/>insert=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  p=. PRI,<span class=\"kw2\">x</span><br/>  q=. QUE,<span class=\"kw2\">y</span><br/>  <span class=\"kw1\">assert.</span> p -:&amp;$ q<br/>  <span class=\"kw1\">assert.</span> <span class=\"nu0\">1</span> = #$q<br/>  ord=: \\: p<br/>  QUE=: ord { q<br/>  PRI=: ord { p<br/>  i.<span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>topN=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  assert <span class=\"kw2\">y</span>&lt;:#PRI<br/>  r=. <span class=\"kw2\">y</span>{.QUE<br/>  PRI=: <span class=\"kw2\">y</span>}.PRI<br/>  QUE=: <span class=\"kw2\">y</span>}.QUE<br/>  r<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.PriorityQueue</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Task <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> priority<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Task<span class=\"br0\">(</span><span class=\"kw4\">int</span> p, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        priority <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>        name <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> priority <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> name<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>Task other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> priority <span class=\"sy0\">&lt;</span> other.<span class=\"me1\">priority</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> priority <span class=\"sy0\">&gt;</span> other.<span class=\"me1\">priority</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        PriorityQueue<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> pq <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PriorityQueue<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Task<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Task<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Task<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Task<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Task<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>pq.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>pq.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 50, "block": "<pre class=\"text highlighted_source\"># In the following, pq stands for \"priority queue\".  <br/>\u00a0<br/># Add an item with the given priority (an integer,<br/># or a string representing an integer)<br/># Input: a pq<br/>def pq_add(priority; item):<br/>  (priority|tostring) as $p<br/>  | if .priorities|index($p) then<br/>      if (.[$p] | index(item)) then . else .[$p] += [item] end<br/>    else .[$p] = [item] | .priorities = (.priorities + [$p] | sort)<br/>    end\u00a0;<br/>\u00a0<br/># emit [ item, pq ]<br/># Input: a pq<br/>def pq_pop:<br/>  .priorities as $keys<br/>  | if ($keys|length) == 0 then [ null, . ]<br/>    else<br/>      if (.[$keys[0]] | length) == 1<br/>      then .priorities =  .priorities[1:]<br/>      else .<br/>      end<br/>      | [ (.[$keys[0]])[0], (.[$keys[0]] = .[$keys[0]][1:]) ]<br/>    end\u00a0;<br/>\u00a0<br/># Emit the item that would be popped, or null if there is none<br/># Input: a pq<br/>def pq_peep:<br/>  .priorities as $keys<br/>  | if ($keys|length) == 0 then null<br/>    else (.[$keys[0]])[0] <br/>    end\u00a0;<br/>\u00a0<br/># Add a bunch of tasks, presented as an array of arrays<br/># Input: a pq<br/>def pq_add_tasks(list):<br/>  reduce list[] as $pair (.; . + pq_add( $pair[0]; $pair[1]) )\u00a0;<br/>\u00a0<br/># Pop all the tasks, producing a stream<br/># Input: a pq<br/>def pq_pop_tasks:<br/>  pq_pop as $pair<br/>  | if $pair[0] == null then empty<br/>    else $pair[0], ( $pair[1] | pq_pop_tasks )<br/>    end\u00a0;<br/>\u00a0<br/># Input: a bunch of tasks, presented as an array of arrays<br/>def prioritize:<br/>  . as $list | {} | pq_add_tasks($list) | pq_pop_tasks\u00a0;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Base.Collections<br/>\u00a0<br/>test = [\"Clear drains\" 3;<br/>        \"Feed cat\" 4;<br/>        \"Make tea\" 5;<br/>        \"Solve RC tasks\" 1;<br/>        \"Tax return\" 2]<br/>\u00a0<br/>task = PriorityQueue(Base.Order.Reverse)<br/>for i in 1:size(test)[1]<br/>    enqueue!(task, test[i,1], test[i,2])<br/>end<br/>\u00a0<br/>println(\"Tasks, completed according to priority:\")<br/>while\u00a0!isempty(task)<br/>    (t, p) = peek(task)<br/>    dequeue!(task)<br/>    println(\"    \\\"\", t, \"\\\" has priority \", p)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">PriorityQueue</span><br/>\u00a0<br/>internal data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Task<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> priority<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Task<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        priority <span class=\"sy0\">&lt;</span> other.<span class=\"me1\">priority</span> -<span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span><br/>        priority <span class=\"sy0\">&gt;</span> other.<span class=\"me1\">priority</span> -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> infix fun String.<span class=\"me1\">priority</span><span class=\"br0\">(</span>priority<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Task<span class=\"br0\">(</span>priority, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> PriorityQueue<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"st0\">\"Clear drains\"</span> priority <span class=\"nu0\">3</span>,<br/>                                 <span class=\"st0\">\"Feed cat\"</span> priority <span class=\"nu0\">4</span>,<br/>                                 <span class=\"st0\">\"Make tea\"</span> priority <span class=\"nu0\">5</span>,<br/>                                 <span class=\"st0\">\"Solve RC tasks\"</span> priority <span class=\"nu0\">1</span>,<br/>                                 <span class=\"st0\">\"Tax return\"</span> priority <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>q.<span class=\"me1\">any</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>q.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 59, "block": "<pre class=\"text highlighted_source\">define priorityQueue =&gt; type {<br/>    data<br/>        store        = map,<br/>        cur_priority = void<br/>\u00a0<br/>    public push(priority::integer, value) =&gt; {<br/>        local(store) = .`store`-&gt;find(#priority)<br/>\u00a0<br/>        if(#store-&gt;isA(::array)) =&gt; {<br/>            #store-&gt;insert(#value)<br/>            return<br/>        }<br/>        .`store`-&gt;insert(#priority=array(#value))<br/>\u00a0<br/>        .`cur_priority`-&gt;isA(::void) or #priority &lt; .`cur_priority`<br/>           \u00a0? .`cur_priority` = #priority<br/>    }<br/>\u00a0<br/>    public pop =&gt; {<br/>        .`cur_priority` == void<br/>           \u00a0? return void<br/>\u00a0<br/>        local(store)  = .`store`-&gt;find(.`cur_priority`)<br/>        local(retVal) =  #store-&gt;first<br/>\u00a0<br/>        #store-&gt;removeFirst&amp;size &gt; 0<br/>           \u00a0? return #retVal<br/>\u00a0<br/>        // Need to find next priority<br/>        .`store`-&gt;remove(.`cur_priority`)<br/>\u00a0<br/>        if(.`store`-&gt;size == 0) =&gt; {<br/>            .`cur_priority` = void<br/>        else<br/>            // There are better / faster ways to do this<br/>            // The keys are actually already sorted, but the order of<br/>            // storage in a map is not actually defined, can't rely on it<br/>            .`cur_priority` = .`store`-&gt;keys-&gt;asArray-&gt;sort&amp;first<br/>        }<br/>\u00a0<br/>        return #retVal<br/>    }<br/>\u00a0<br/>    public isEmpty =&gt; (.`store`-&gt;size == 0)<br/>\u00a0<br/>}<br/>\u00a0<br/>local(test) = priorityQueue<br/>\u00a0<br/>#test-&gt;push(2,`e`)<br/>#test-&gt;push(1,`H`)<br/>#test-&gt;push(5,`o`)<br/>#test-&gt;push(2,`l`)<br/>#test-&gt;push(5,`!`)<br/>#test-&gt;push(4,`l`)<br/>\u00a0<br/>while(not #test-&gt;isEmpty) =&gt; {<br/>    stdout(#test-&gt;pop)<br/>}</pre>"}, {"lang": "Lua", "loc": 50, "block": "<pre class=\"lua highlighted_source\">PriorityQueue <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    __index <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        put <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>self<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>            <span class=\"kw1\">local</span> q <span class=\"sy0\">=</span> self<span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> q <span class=\"kw1\">then</span><br/>                q <span class=\"sy0\">=</span> <span class=\"br0\">{</span>first <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> last <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>                self<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<br/>            <span class=\"kw1\">end</span><br/>            q<span class=\"sy0\">.</span>last <span class=\"sy0\">=</span> q<span class=\"sy0\">.</span>last <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            q<span class=\"br0\">[</span>q<span class=\"sy0\">.</span>last<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<br/>        <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>        pop <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> p<span class=\"sy0\">,</span> q <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> q<span class=\"sy0\">.</span>first <span class=\"sy0\">&lt;=</span> q<span class=\"sy0\">.</span>last <span class=\"kw1\">then</span><br/>                    <span class=\"kw1\">local</span> v <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>q<span class=\"sy0\">.</span>first<span class=\"br0\">]</span><br/>                    q<span class=\"br0\">[</span>q<span class=\"sy0\">.</span>first<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>                    q<span class=\"sy0\">.</span>first <span class=\"sy0\">=</span> q<span class=\"sy0\">.</span>first <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">return</span> p<span class=\"sy0\">,</span> v<br/>                <span class=\"kw1\">else</span><br/>                    self<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    __call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>cls<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> cls<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>PriorityQueue<span class=\"sy0\">,</span> PriorityQueue<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Usage:</span><br/>pq <span class=\"sy0\">=</span> PriorityQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>tasks <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'Clear drains'</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'Feed cat'</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">'Make tea'</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'Solve RC tasks'</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'Tax return'</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> task <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>tasks<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"Putting:\u00a0%d -\u00a0%s\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>task<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    pq<span class=\"sy0\">:</span>put<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>task<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> prio<span class=\"sy0\">,</span> task <span class=\"kw2\">in</span> pq<span class=\"sy0\">.</span>pop<span class=\"sy0\">,</span> pq <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"Popped:\u00a0%d -\u00a0%s\"</span><span class=\"sy0\">,</span> prio<span class=\"sy0\">,</span> task<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 118, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module UnOrderedArray {<br/>      Class PriorityQueue {<br/>      Private:<br/>            Dim Item()<br/>            many=0, level=0, first<br/>            cmp = lambda-&gt;0<br/>            Module Reduce {<br/>                  if .many&lt;.first*2 then exit<br/>                  If .level&lt;.many/2 then .many/=2\u00a0: Dim .Item(.many)<br/>            }<br/>      Public:<br/>            Module Clear {<br/>              Dim .Item() \\\\ erase all<br/>              .many&lt;=0 \\\\ default<br/>              .Level&lt;=0<br/>            }<br/>            Module PriorityQueue {<br/>                  If .many&gt;0 then Error \"Clear List First\"<br/>                  Read .many, .cmp<br/>                  .first&lt;=.many<br/>                  Dim .Item(.many)<br/>            }<br/>            Module Add {<br/>                 If .level=.many Then {<br/>                       If .many=0 then Error \"Define Size First\"<br/>                        Dim .Item(.many*2)<br/>                        .many*=2<br/>                 }<br/>                 Read Item<br/>                 If .level=0 Then {<br/>                       .Item(0)=Item<br/>                 } Else.if .cmp(.Item(0), Item)=-1 Then { \\\\ Item is max<br/>                       .Item(.level)=Item<br/>                       swap .Item(0), .Item(.level)<br/>                 } Else .Item(.level)=Item<br/>                 .level++<br/>            }<br/>            Function Peek {<br/>                  If .level=0 Then error \"empty\"<br/>                  =.Item(0)<br/>            }<br/>            Function Poll {<br/>                  If .level=0 Then error \"empty\"<br/>                  =.Item(0)<br/>                  If .level=2 Then {<br/>                  swap .Item(0), .Item(1)<br/>                  .Item(1)=0<br/>                  .Level&lt;=1<br/>                  } Else.If .level&gt;2 Then {<br/>                        .Level--<br/>                        Swap .Item(.level), .Item(0)<br/>                        .Item(.level)=0<br/>                        For I=.level-1 to 1 {<br/>                              If .cmp(.Item(I), .Item(I-1))=1 Then Swap .Item(I), .Item(I-1)<br/>                        }<br/>                  } else .level&lt;=0\u00a0: .Item(0)=0<br/>                  .Reduce<br/>            }<br/>            Module Remove {<br/>                  If .level=0 Then error \"empty\"<br/>                  Read Item<br/>                  k=true<br/>                  If .cmp(.Item(0), Item)=0 Then {<br/>                        Item=.Poll()<br/>                        K~  \\\\ k=false<br/>                  } Else.If .Level&gt;1 Then {<br/>                        I2=.Level-1<br/>                            For I=1 to I2 {<br/>                                    If k Then {<br/>                                           If .cmp(.Item(I), Item)=0 Then {<br/>                                                 If I&lt;I2 Then Swap .Item(I), .Item(I2)<br/>                                                 .Item(I2)=0<br/>                                                 k=false<br/>                                           }<br/>                                    } else exit<br/>                              }<br/>                       .Level--<br/>                  }<br/>                  If k Then Error \"Not Found\"<br/>                  .Reduce<br/>            }<br/>            Function Size {<br/>                  If .many=0 then Error \"Define Size First\"<br/>                  =.Level<br/>            }<br/>      }<br/>\u00a0<br/>      Class Item { X, S$<br/>            Module Item { Read .X, .S$}<br/>      }<br/>      Function PrintTop {<br/>            M=Queue.Peek()\u00a0: Print \"Item \";M.X, M.S$<br/>      }<br/>      Comp=Lambda -&gt; { Read A,B\u00a0: =COMPARE(A.X,B.X)}<br/>\u00a0<br/>      Queue=PriorityQueue(100,Comp)<br/>      Queue.Add Item(3, \"Clear drains\")<br/>      Call Local PrintTop()<br/>      Queue.Add Item(4  ,\"Feed cat\")<br/>      Call Local PrintTop()<br/>      Queue.Add Item(5  ,\"Make tea\")<br/>      Call Local PrintTop()<br/>      Queue.Add Item(1  ,\"Solve RC tasks\")<br/>      Call Local PrintTop()<br/>      Queue.Add Item(2  ,\"Tax return\")<br/>      Call Local PrintTop()<br/>      Print \"remove items\"<br/>      While true {<br/>            MM=Queue.Poll()<br/>            Print MM.X, MM.S$<br/>            Print \"Size=\"; Queue.Size()<br/>            If Queue.Size()=0 Then exit<br/>            Call Local PrintTop()<br/>      }     <br/>}<br/>UnOrderedArray<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">push = Function[{queue, priority, item}, <br/>   queue = SortBy[Append[queue, {priority, item}], First], HoldFirst];<br/>pop = Function[queue, <br/>   If[<a class=\"__cf_email__\" data-cfemail=\"94d8f1faf3e0fcd4e5e1f1e1f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> == 0, Null, <br/>    With[{item = queue[[-1, 2]]}, queue = <a class=\"__cf_email__\" data-cfemail=\"5d10322e291d2c28382838\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; item]], <br/>   HoldFirst];<br/>peek = Function[queue, <br/>   If[<a class=\"__cf_email__\" data-cfemail=\"cd81a8a3aab9a58dbcb8a8b8a8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> == 0, Null, Max[queue[[All, 1]]]], HoldFirst];<br/>merge = Function[{queue1, queue2}, <br/>   SortBy[Join[queue1, queue2], First], HoldAll];</pre>"}, {"lang": "Maxima", "loc": 82, "block": "<pre class=\"text highlighted_source\">/* Naive implementation using a sorted list of pairs [key, [item[1], ..., item[n]]].<br/>The key may be any number (integer or not). Items are extracted in FIFO order. */<br/>\u00a0<br/>defstruct(pqueue(q = []))$<br/>\u00a0<br/>/* Binary search */<br/>\u00a0<br/>find_key(q, p)\u00a0:= block(<br/>   [i: 1, j: length(q), k, c],<br/>   if j = 0 then false<br/>   elseif (c: q[i][1]) &gt;= p then<br/>      (if c = p then i else false)<br/>   elseif (c: q[j][1]) &lt;= p then<br/>      (if c = p then j else false)<br/>   else catch(<br/>      while j &gt;= i do (<br/>         k: quotient(i + j, 2),<br/>         if (c: q[k][1]) = p then throw(k)<br/>         elseif c &lt; p then i: k + 1 else j: k - 1<br/>      ),<br/>      false<br/>   )<br/>)$<br/>\u00a0<br/>pqueue_push(pq, x, p)\u00a0:= block(<br/>   [q: <a class=\"__cf_email__\" data-cfemail=\"c5b5b485b4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, k],<br/>   k: find_key(q, p),<br/>   if integerp(k) then q[k][2]: endcons(x, q[k][2])<br/>   else <a class=\"__cf_email__\" data-cfemail=\"1464655465\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: sort(cons([p, [x]], q)),<br/>   'done<br/>)$<br/>\u00a0<br/>pqueue_pop(pq)\u00a0:= block(<br/>   [q: <a class=\"__cf_email__\" data-cfemail=\"b0c0c1f0c1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, v, x],<br/>   if emptyp(q) then 'fail else (<br/>      p: q[1][1],<br/>      v: q[1][2],<br/>      x: v[1],<br/>      if length(v) &gt; 1 then q[1][2]: rest(v) else <a class=\"__cf_email__\" data-cfemail=\"4434350435\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: rest(q),<br/>      x<br/>   )<br/>)$<br/>\u00a0<br/>pqueue_print(pq)\u00a0:= block([t], while (t: pqueue_pop(pq)) # 'fail do disp(t))$<br/>\u00a0<br/>\u00a0<br/>/* An example */<br/>\u00a0<br/>a: new(pqueue)$<br/>\u00a0<br/>pqueue_push(a, \"take milk\", 4)$<br/>pqueue_push(a, \"take eggs\", 4)$<br/>pqueue_push(a, \"take wheat flour\", 4)$<br/>pqueue_push(a, \"take salt\", 4)$<br/>pqueue_push(a, \"take oil\", 4)$<br/>pqueue_push(a, \"carry out crepe recipe\", 5)$<br/>pqueue_push(a, \"savour\u00a0!\", 6)$<br/>pqueue_push(a, \"add strawberry jam\", 5 + 1/2)$<br/>pqueue_push(a, \"call friends\", 5 + 2/3)$<br/>pqueue_push(a, \"go to the supermarket and buy food\", 3)$<br/>pqueue_push(a, \"take a shower\", 2)$<br/>pqueue_push(a, \"get dressed\", 2)$<br/>pqueue_push(a, \"wake up\", 1)$<br/>pqueue_push(a, \"serve cider\", 5 + 3/4)$<br/>pqueue_push(a, \"buy also cider\", 3)$<br/>\u00a0<br/>pqueue_print(a);<br/>\"wake up\"<br/>\"take a shower\"<br/>\"get dressed\"<br/>\"go to the supermarket and buy food\"<br/>\"buy also cider\"<br/>\"take milk\"<br/>\"take butter\"<br/>\"take flour\"<br/>\"take salt\"<br/>\"take oil\"<br/>\"carry out recipe\"<br/>\"add strawberry jam\"<br/>\"call friends\"<br/>\"serve cider\"<br/>\"savour\u00a0!\"</pre>"}, {"lang": "Mercury", "loc": 35, "block": "<pre class=\"text highlighted_source\">:- module test_pqueue.<br/>\u00a0<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module int.<br/>:- import_module list.<br/>:- import_module pqueue.<br/>:- import_module string.<br/>\u00a0<br/>:- pred build_pqueue(pqueue(int,string)::in, pqueue(int,string)::out) is det.<br/>build_pqueue(!PQ)\u00a0:-<br/>  pqueue.insert(3, \"Clear drains\",  \u00a0!PQ),<br/>  pqueue.insert(4, \"Feed cat\",      \u00a0!PQ),<br/>  pqueue.insert(5, \"Make tea\",      \u00a0!PQ),<br/>  pqueue.insert(1, \"Solve RC tasks\",\u00a0!PQ),<br/>  pqueue.insert(2, \"Tax return\",    \u00a0!PQ).<br/>\u00a0<br/>:- pred display_pqueue(pqueue(int, string)::in, io::di, io::uo) is det.<br/>display_pqueue(PQ,\u00a0!IO)\u00a0:-<br/>  ( pqueue.remove(K, V, PQ, PQO) -&gt;<br/>      io.format(\"Key =\u00a0%d, Value =\u00a0%s\\n\", [i(K), s(V)],\u00a0!IO),<br/>      display_pqueue(PQO,\u00a0!IO)<br/> \u00a0;<br/>      true<br/>  ).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>  build_pqueue(pqueue.init, PQO),<br/>  display_pqueue(PQO,\u00a0!IO).</pre>"}, {"lang": "Nim", "loc": 60, "block": "<pre class=\"text highlighted_source\">type<br/>  PriElem[T] = tuple<br/>    data: T<br/>    pri: int<br/>\u00a0<br/>  PriQueue[T] = object<br/>    buf: seq[PriElem[T]]<br/>    count: int<br/>\u00a0<br/># first element not used to simplify indices<br/>proc initPriQueue[T](initialSize = 4): PriQueue[T] =<br/>  result.buf.newSeq(initialSize)<br/>  result.buf.setLen(1)<br/>  result.count = 0<br/>\u00a0<br/>proc add[T](q: var PriQueue[T], data: T, pri: int) =<br/>  var n = q.buf.len<br/>  var m = n div 2<br/>  q.buf.setLen(n + 1)<br/>\u00a0<br/>  # append at end, then up heap<br/>  while m &gt; 0 and pri &lt; q.buf[m].pri:<br/>    q.buf[n] = q.buf[m]<br/>    n = m<br/>    m = m div 2<br/>\u00a0<br/>  q.buf[n] = (data, pri)<br/>  q.count = q.buf.len - 1<br/>\u00a0<br/>proc pop[T](q: var PriQueue[T]): PriElem[T] =<br/>  assert q.buf.len &gt; 1<br/>  result = q.buf[1]<br/>\u00a0<br/>  var qn = q.buf.len - 1<br/>  var n = 1<br/>  var m = 2<br/>  while m &lt; qn:<br/>    if m + 1 &lt; qn and q.buf[m].pri &gt; q.buf[m+1].pri:<br/>      inc m<br/>\u00a0<br/>    if q.buf[qn].pri &lt;= q.buf[m].pri:<br/>      break<br/>\u00a0<br/>    q.buf[n] = q.buf[m]<br/>    n = m<br/>    m = m * 2<br/>\u00a0<br/>  q.buf[n] = q.buf[qn]<br/>  q.buf.setLen(q.buf.len - 1)<br/>  q.count = q.buf.len - 1<br/>\u00a0<br/>var p = initPriQueue[string]()<br/>p.add(\"Clear drains\", 3)<br/>p.add(\"Feed cat\", 4)<br/>p.add(\"Make tea\", 5)<br/>p.add(\"Solve RC tasks\", 1)<br/>p.add(\"Tax return\", 2)<br/>\u00a0<br/>while p.count &gt; 0:<br/>  echo p.pop()</pre>"}, {"lang": "Objective-C", "loc": 64, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>PQRetain<span class=\"br0\">(</span>CFAllocatorRef allocator, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>__bridge_retained <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>__bridge <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr;<br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> PQRelease<span class=\"br0\">(</span>CFAllocatorRef allocator, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">(</span>__bridge_transfer <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr;<br/><span class=\"br0\">}</span><br/>CFComparisonResult PQCompare<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr1, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr2, <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>unused<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>__bridge <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr1 compare<span class=\"sy0\">:</span><span class=\"br0\">(</span>__bridge <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr2<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Task <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> priority;<br/>  <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>name;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithPriority<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p andName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSComparisonResult<span class=\"br0\">)</span>compare<span class=\"sy0\">:</span><span class=\"br0\">(</span>Task <span class=\"sy0\">*</span><span class=\"br0\">)</span>other;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Task<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithPriority<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p andName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    priority <span class=\"sy0\">=</span> p;<br/>    name <span class=\"sy0\">=</span> <span class=\"br0\">[</span>n copy<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>description <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"%d,\u00a0%@\"</span>, priority, name<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSComparisonResult<span class=\"br0\">)</span>compare<span class=\"sy0\">:</span><span class=\"br0\">(</span>Task <span class=\"sy0\">*</span><span class=\"br0\">)</span>other <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>priority <span class=\"sy0\">==</span> other<span class=\"sy0\">-</span>&gt;priority<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> NSOrderedSame;<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>priority &lt; other<span class=\"sy0\">-</span>&gt;priority<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> NSOrderedAscending;<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> NSOrderedDescending;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    CFBinaryHeapCallBacks callBacks <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, PQRetain, PQRelease, <span class=\"kw2\">NULL</span>, PQCompare<span class=\"br0\">}</span>;<br/>    CFBinaryHeapRef pq <span class=\"sy0\">=</span> CFBinaryHeapCreate<span class=\"br0\">(</span><span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">&amp;</span>callBacks, <span class=\"kw2\">NULL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    CFBinaryHeapAddValue<span class=\"br0\">(</span>pq, <span class=\"br0\">[</span><span class=\"br0\">[</span>Task alloc<span class=\"br0\">]</span> initWithPriority<span class=\"sy0\">:</span><span class=\"nu0\">3</span> andName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    CFBinaryHeapAddValue<span class=\"br0\">(</span>pq, <span class=\"br0\">[</span><span class=\"br0\">[</span>Task alloc<span class=\"br0\">]</span> initWithPriority<span class=\"sy0\">:</span><span class=\"nu0\">4</span> andName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    CFBinaryHeapAddValue<span class=\"br0\">(</span>pq, <span class=\"br0\">[</span><span class=\"br0\">[</span>Task alloc<span class=\"br0\">]</span> initWithPriority<span class=\"sy0\">:</span><span class=\"nu0\">5</span> andName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Make tea\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    CFBinaryHeapAddValue<span class=\"br0\">(</span>pq, <span class=\"br0\">[</span><span class=\"br0\">[</span>Task alloc<span class=\"br0\">]</span> initWithPriority<span class=\"sy0\">:</span><span class=\"nu0\">1</span> andName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    CFBinaryHeapAddValue<span class=\"br0\">(</span>pq, <span class=\"br0\">[</span><span class=\"br0\">[</span>Task alloc<span class=\"br0\">]</span> initWithPriority<span class=\"sy0\">:</span><span class=\"nu0\">2</span> andName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Tax return\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>CFBinaryHeapGetCount<span class=\"br0\">(</span>pq<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Task <span class=\"sy0\">*</span>task <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>CFBinaryHeapGetMinimum<span class=\"br0\">(</span>pq<span class=\"br0\">)</span>;<br/>      NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, task<span class=\"br0\">)</span>;<br/>      CFBinaryHeapRemoveMinimumValue<span class=\"br0\">(</span>pq<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    CFRelease<span class=\"br0\">(</span>pq<span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">module</span> PQ <span class=\"sy0\">=</span> Base<span class=\"sy0\">.</span>PriorityQueue<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> tasks <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> pq <span class=\"sy0\">=</span> PQ<span class=\"sy0\">.</span>make <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>prio1, _<span class=\"br0\">)</span> <span class=\"br0\">(</span>prio2, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> prio1 <span class=\"sy0\">&gt;</span> prio2<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span>PQ<span class=\"sy0\">.</span>add pq<span class=\"br0\">)</span> tasks<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>PQ<span class=\"sy0\">.</span>is_empty pq<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> _, task <span class=\"sy0\">=</span> PQ<span class=\"sy0\">.</span>first pq <span class=\"kw1\">in</span><br/>    PQ<span class=\"sy0\">.</span>remove_first pq<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> task<br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> 5<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Heap<span class=\"sy0\">::</span><span class=\"me2\">Priority</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Heap<span class=\"sy0\">::</span><span class=\"me2\">Priority</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">highest_first</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># higher or lower number is more important</span><br/><span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"st0\">\"Clear drains\"</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"st0\">\"Feed cat\"</span><span class=\"sy0\">,</span>     <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"st0\">\"Make tea\"</span><span class=\"sy0\">,</span>     <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"st0\">\"Solve RC tasks\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"st0\">\"Tax return\"</span><span class=\"sy0\">,</span>     <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> PriorityQueue <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@!tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> insert <span class=\"br0\">(</span>Int <span class=\"re0\">$priority</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$task</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@!tasks</span><span class=\"br0\">[</span><span class=\"re0\">$priority</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"re0\">$task</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> get <span class=\"br0\">{</span> <span class=\"re0\">@!tasks</span><span class=\"sy0\">.</span><span class=\"kw3\">first</span><span class=\"br0\">(</span><span class=\"sy0\">?*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> is<span class=\"sy0\">-</span>empty <span class=\"br0\">{</span> <span class=\"sy0\">?</span><span class=\"kw3\">none</span> <span class=\"re0\">@!tasks</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$pq</span> <span class=\"sy0\">=</span> PriorityQueue<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>    <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Clear drains'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Feed cat'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Make tea'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Sleep'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Check email'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Solve RC tasks'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Exercise'</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Do taxes'</span><br/><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$priority</span><span class=\"sy0\">,</span> <span class=\"re0\">$task</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$pq</span><span class=\"sy0\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span> <span class=\"re0\">$priority</span><span class=\"sy0\">,</span> <span class=\"re0\">$task</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$pq</span><span class=\"sy0\">.</span><span class=\"me1\">get</span> <span class=\"kw1\">until</span> <span class=\"re0\">$pq</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>empty<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 54, "block": "<pre class=\"text highlighted_source\">integer tasklist = new_dict()<br/>\u00a0<br/>procedure add_task(integer priority, string desc)<br/>    integer k = getd_index(priority,tasklist)<br/>    if k=0 then<br/>        putd(priority,{desc},tasklist)<br/>    else<br/>        sequence descs = getd_by_index(k,tasklist)<br/>        putd(priority,append(descs,desc),tasklist)<br/>    end if<br/>end procedure<br/>\u00a0<br/>function list_task_visitor(integer priority, sequence descs, integer /*user_data*/)<br/>   \u00a0?{priority,descs}<br/>    return 1<br/>end function<br/>\u00a0<br/>procedure list_tasks()<br/>    traverse_dict(routine_id(\"list_task_visitor\"), 0, tasklist,true)<br/>end procedure<br/>\u00a0<br/>function pop_task_visitor(integer priority, sequence descs, integer rid)<br/>    string desc = descs[1]<br/>    descs = descs[2..$]<br/>    if length(descs)=0 then<br/>        deld(priority,tasklist)<br/>    else<br/>        putd(priority,descs,tasklist)<br/>    end if<br/>    call_proc(rid,{priority,desc})<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure pop_task(integer rid)<br/>    if dict_size(tasklist)!=0 then<br/>        traverse_dict(routine_id(\"pop_task_visitor\"), rid, tasklist,true)<br/>    end if<br/>end procedure<br/>\u00a0<br/>add_task(3,\"Clear drains\")<br/>add_task(4,\"Feed cat\")<br/>add_task(5,\"Make tea\")<br/>add_task(1,\"Solve RC tasks\")<br/>add_task(2,\"Tax return\")<br/>\u00a0<br/>procedure do_task(integer priority, string desc)<br/>   \u00a0?{priority,desc}<br/>end procedure<br/>\u00a0<br/>list_tasks()<br/>?\"===\"<br/>pop_task(routine_id(\"do_task\"))<br/>?\"===\"<br/>list_tasks()</pre>"}, {"lang": "PHP", "loc": 17, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$pq</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> SplPriorityQueue<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"st_h\">'Clear drains'</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"st_h\">'Feed cat'</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"st_h\">'Make tea'</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"st_h\">'Solve RC tasks'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"st_h\">'Tax return'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// This line causes extract() to return both the data and priority (in an associative array),</span><br/><span class=\"co1\">// Otherwise it would just return the data</span><br/><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setExtractFlags</span><span class=\"br0\">(</span>SplPriorityQueue<span class=\"sy0\">::</span><span class=\"me2\">EXTR_BOTH</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><span class=\"re0\">$pq</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/extract\"><span class=\"kw3\">extract</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\"># Insert item into priority queue<br/>(de insertPQ (Queue Prio Item)<br/>   (idx Queue (cons Prio Item) T) )<br/>\u00a0<br/># Remove and return top item from priority queue<br/>(de removePQ (Queue)<br/>   (cdar (idx Queue (peekPQ Queue) NIL)) )<br/>\u00a0<br/># Find top element in priority queue<br/>(de peekPQ (Queue)<br/>   (let V (val Queue)<br/>      (while (cadr V)<br/>         (setq V @) )<br/>      (car V) ) )<br/>\u00a0<br/># Merge second queue into first<br/>(de mergePQ (Queue1 Queue2)<br/>   (balance Queue1 (sort (conc (idx Queue1) (idx Queue2)))) )</pre>"}, {"lang": "Prolog", "loc": 29, "block": "<pre class=\"prolog highlighted_source\">priority<span class=\"sy3\">-</span>queue <span class=\"sy1\">:-</span><br/>  TL0 <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy3\">-</span><span class=\"st_h\">'Clear drains'</span><span class=\"sy4\">,</span><br/>         <span class=\"nu0\">4</span><span class=\"sy3\">-</span><span class=\"st_h\">'Feed cat'</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>  <span class=\"co1\">% we can create a priority queue from a list</span><br/>  list_to_heap<span class=\"br0\">(</span>TL0<span class=\"sy4\">,</span> Heap0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>  <span class=\"co1\">% alternatively we can start from an empty queue</span><br/>  <span class=\"co1\">% get from empty_heap/1.</span><br/>\u00a0<br/>  <span class=\"co1\">% now we add the other elements</span><br/>  add_to_heap<span class=\"br0\">(</span>Heap0<span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Make tea'</span><span class=\"sy4\">,</span> Heap1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  add_to_heap<span class=\"br0\">(</span>Heap1<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Solve RC tasks'</span><span class=\"sy4\">,</span> Heap2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  add_to_heap<span class=\"br0\">(</span>Heap2<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Tax return'</span><span class=\"sy4\">,</span> Heap3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>  <span class=\"co1\">% we list the content of the heap:</span><br/>  heap_to_list<span class=\"br0\">(</span>Heap3<span class=\"sy4\">,</span> TL1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st_h\">'Content of the queue'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> TL1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\u00a0<br/>  <span class=\"co1\">% now we retrieve the minimum-priority pair</span><br/>  get_from_heap<span class=\"br0\">(</span>Heap3<span class=\"sy4\">,</span> Priority<span class=\"sy4\">,</span> Key<span class=\"sy4\">,</span> Heap4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  format<span class=\"br0\">(</span><span class=\"st_h\">'Retrieve top of the queue\u00a0: Priority ~w, Element ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Priority<span class=\"sy4\">,</span> Key<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\u00a0<br/>  <span class=\"co1\">% we list the content of the heap:</span><br/>  heap_to_list<span class=\"br0\">(</span>Heap4<span class=\"sy4\">,</span> TL2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st_h\">'Content of the queue'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> TL2<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 119, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> taskList<br/>  List description.s<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">;implements FIFO queue</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> task<br/>  <span class=\"sy0\">*</span>tl.tList  <span class=\"co1\">;pointer to a list of task descriptions</span><br/>  Priority.i <span class=\"co1\">;tasks priority, lower value has more priority</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> priorityQueue<br/>  maxHeapSize.i <span class=\"co1\">;increases as needed</span><br/>  heapItemCount.i  <span class=\"co1\">;number of elements currently in heap</span><br/>  Array heap.task<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">;elements hold FIFO queues ordered by priorities, lowest first</span><br/>  map heapMap.taskList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">;holds lists of tasks with the same priority that are FIFO queues</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> insertPQ<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ.priorityQueue, description.s, p<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Str</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> description<br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>tl.taskList <span class=\"sy0\">=</span> AddMapElement<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Str</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> description<br/>\u00a0<br/>    <span class=\"kw1\">Protected</span> pos <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount<br/>\u00a0<br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>maxHeapSize<br/>      <span class=\"kw1\">Select</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>maxHeapSize<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span><br/>          <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>maxHeapSize <span class=\"sy0\">=</span> <span class=\"nu0\">128</span><br/>        <span class=\"kw1\">Default</span><br/>          <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>maxHeapSize <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">EndSelect</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap.task<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>maxHeapSize<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>    <span class=\"kw1\">While</span> pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">And</span> p <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority<br/>      <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">\\</span>tl <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>tl<br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority <span class=\"sy0\">=</span> p<br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s removePQ<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ.priorityQueue<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>tl.taskList <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>tl, description.s<br/>  <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  description <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span><span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>tl<span class=\"sy0\">\\</span>description<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    DeleteMapElement<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapMap<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Protected</span> pos<br/>    <span class=\"kw1\">Repeat</span><br/>      <span class=\"kw1\">Protected</span> child1 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Protected</span> child2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pos <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">If</span> child1 <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount<br/>        <span class=\"kw1\">Break</span> <br/>      <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>      <span class=\"kw1\">Protected</span> smallestChild<br/>      <span class=\"kw1\">If</span> child2 <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount<br/>        smallestChild <span class=\"sy0\">=</span> child1 <br/>      <span class=\"kw1\">ElseIf</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>child1<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>child2<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority<br/>        smallestChild <span class=\"sy0\">=</span> child1 <br/>      <span class=\"kw1\">Else</span><br/>        smallestChild <span class=\"sy0\">=</span> child2 <br/>      <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>smallestChild<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Break</span> <br/>      <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Swap</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">\\</span>tl, <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>smallestChild<span class=\"br0\">)</span><span class=\"sy0\">\\</span>tl<br/>      <span class=\"kw1\">Swap</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority, <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heap<span class=\"br0\">(</span>smallestChild<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Priority<br/>      pos <span class=\"sy0\">=</span> smallestChild<br/>    <span class=\"kw1\">ForEver</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> description<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isEmptyPQ<span class=\"br0\">(</span><span class=\"sy0\">*</span>PQ.priorityQueue<span class=\"br0\">)</span> <span class=\"co1\">;returns 1 if empty, otherwise returns 0</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>PQ<span class=\"sy0\">\\</span>heapItemCount<br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span>  <br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> PQ.priorityQueue<br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Clear drains\"</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Answer Phone 1\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Feed cat\"</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Answer Phone 2\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Make tea\"</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Sleep\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Check email\"</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Solve RC tasks\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Answer Phone 3\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Exercise\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Answer Phone 4\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  insertPQ<span class=\"br0\">(</span>PQ, <span class=\"st0\">\"Tax return\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> isEmptyPQ<span class=\"br0\">(</span>PQ<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>removePQ<span class=\"br0\">(</span>PQ<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> queue<br/><span class=\"sy0\">&gt;&gt;&gt;</span> pq <span class=\"sy0\">=</span> queue.<span class=\"me1\">PriorityQueue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> item <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>  pq.<span class=\"me1\">put</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> pq.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span>pq.<span class=\"me1\">get_nowait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'Solve RC tasks'</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'Tax return'</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'Clear drains'</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'Feed cat'</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">'Make tea'</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 26, "block": "<pre class=\"text highlighted_source\">PriorityQueue &lt;- function() {<br/>  keys &lt;- values &lt;- NULL<br/>  insert &lt;- function(key, value) {<br/>    ord &lt;- findInterval(key, keys)<br/>    keys &lt;&lt;- append(keys, key, ord)<br/>    values &lt;&lt;- append(values, value, ord)<br/>  }<br/>  pop &lt;- function() {<br/>    head &lt;- list(key=keys[1],value=values[[1]])<br/>    values &lt;&lt;- values[-1]<br/>    keys &lt;&lt;- keys[-1]<br/>    return(head)<br/>  }<br/>  empty &lt;- function() length(keys) == 0<br/>  environment()<br/>}<br/>\u00a0<br/>pq &lt;- PriorityQueue()<br/>pq$insert(3, \"Clear drains\")<br/>pq$insert(4, \"Feed cat\")<br/>pq$insert(5, \"Make tea\")<br/>pq$insert(1, \"Solve RC tasks\")<br/>pq$insert(2, \"Tax return\")<br/>while(!pq$empty()) {<br/>  with(pq$pop(), cat(key,\":\",value,\"\\n\"))<br/>}</pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require data/heap)<br/>\u00a0<br/>(define pq (make-heap (\u03bb(x y) (&lt;= (second x) (second y)))))<br/>\u00a0<br/>(define (insert! x pri) <br/>  (heap-add! pq (list pri x)))<br/>\u00a0<br/>(define (remove-min!)<br/>  (begin0 <br/>    (first (heap-min pq))<br/>    (heap-remove-min! pq)))<br/>\u00a0<br/>(insert! 3 \"Clear drains\")<br/>(insert! 4 \"Feed cat\")<br/>(insert! 5 \"Make tea\")<br/>(insert! 1 \"Solve RC tasks\")<br/>(insert! 2 \"Tax return\")<br/>\u00a0<br/>(remove-min!)<br/>(remove-min!)<br/>(remove-min!)<br/>(remove-min!)<br/>(remove-min!)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements a  priority queue   with  insert/display/delete  the top task.*/</span><br/>#=<span class=\"nu0\">0</span>;   @<span class=\"sy0\">.</span>=                                       <span class=\"coMULTI\">/*0 tasks;  nullify the priority queue.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550\u2550 inserting tasks.'</span>;     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">3</span>  <span class=\"st0\">\"Clear drains\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">4</span>  <span class=\"st0\">\"Feed cat\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">5</span>  <span class=\"st0\">\"Make tea\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">1</span>  <span class=\"st0\">\"Solve RC tasks\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">2</span>  <span class=\"st0\">\"Tax return\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">6</span>  <span class=\"st0\">\"Relax\"</span><br/>                                   <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>ins  <span class=\"nu0\">6</span>  <span class=\"st0\">\"Enjoy\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550\u2550 showing tasks.'</span>;       <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>show<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550\u2550 deletes top task.'</span>;    <span class=\"kw1\">say</span> <span class=\"sy0\">.</span>del<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*delete the top task.                 */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>del:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> #; <span class=\"kw1\">arg</span> p;  <span class=\"kw1\">if</span> p=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> p=<span class=\"sy0\">.</span>top<span class=\"br0\">(</span><span class=\"br0\">)</span>;    <a class=\"__cf_email__\" data-cfemail=\"cdb4f08d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>p;   @<span class=\"sy0\">.</span>p=;   <span class=\"kw1\">return</span> y<br/><span class=\"sy0\">.</span>ins:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> #; #=#+<span class=\"nu0\">1</span>;  @<span class=\"sy0\">.</span>#=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">return</span> #          <span class=\"coMULTI\">/*entry, P, task.*/</span><br/><span class=\"sy0\">.</span>show: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> #; <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;  <a class=\"__cf_email__\" data-cfemail=\"bee183fe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j;  <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> _;  <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>top:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> #;      top=;              top#=<br/>                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;  _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span> _==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                   <span class=\"kw1\">if</span> top==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> _<span class=\"sy0\">&gt;</span>top  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;    top=_;    top#=j;    <span class=\"kw3\">end</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">return</span> top#</pre>"}, {"lang": "Ruby", "loc": 82, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> PriorityQueueNaive<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>data=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@q</span> = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h, k<span class=\"sy0\">|</span> h<span class=\"br0\">[</span>k<span class=\"br0\">]</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    data.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>priority, item<span class=\"sy0\">|</span> <span class=\"re1\">@q</span><span class=\"br0\">[</span>priority<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> item<span class=\"br0\">}</span>  <span class=\"kw1\">if</span> data<br/>    <span class=\"re1\">@priorities</span> = <span class=\"re1\">@q</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> push<span class=\"br0\">(</span>priority, item<span class=\"br0\">)</span><br/>    <span class=\"re1\">@q</span><span class=\"br0\">[</span>priority<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> item<br/>    <span class=\"re1\">@priorities</span> = <span class=\"re1\">@q</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> pop<br/>    <span class=\"kw3\">p</span> = <span class=\"re1\">@priorities</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    item = <span class=\"re1\">@q</span><span class=\"br0\">[</span><span class=\"kw3\">p</span><span class=\"br0\">]</span>.<span class=\"me1\">shift</span><br/>    <span class=\"kw1\">if</span> <span class=\"re1\">@q</span><span class=\"br0\">[</span><span class=\"kw3\">p</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span>?<br/>      <span class=\"re1\">@q</span>.<span class=\"me1\">delete</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>      <span class=\"re1\">@priorities</span>.<span class=\"me1\">shift</span><br/>    <span class=\"kw1\">end</span><br/>    item<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> peek<br/>    <span class=\"kw1\">unless</span> empty?<br/>      <span class=\"re1\">@q</span><span class=\"br0\">[</span>@priorities<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> empty?<br/>    <span class=\"re1\">@priorities</span>.<span class=\"me1\">empty</span>?<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> each<br/>    <span class=\"re1\">@q</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>priority, items<span class=\"sy0\">|</span><br/>      items.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>item<span class=\"sy0\">|</span> <span class=\"kw1\">yield</span> priority, item<span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> dup<br/>    <span class=\"re1\">@q</span>.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"kw1\">class</span>.<span class=\"me1\">new</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>priority, items<span class=\"br0\">)</span>, obj<span class=\"sy0\">|</span><br/>      items.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>item<span class=\"sy0\">|</span> obj.<span class=\"me1\">push</span><span class=\"br0\">(</span>priority, item<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> merge<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">TypeError</span>  <span class=\"kw1\">unless</span> <span class=\"kw2\">self</span>.<span class=\"kw1\">class</span> == other.<span class=\"kw1\">class</span><br/>    pq = dup<br/>    other.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>priority, item<span class=\"sy0\">|</span> pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>priority, item<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    pq                  <span class=\"co1\"># return a new object</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> inspect<br/>    <span class=\"re1\">@q</span>.<span class=\"me1\">inspect</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>test = <span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"st0\">\"drink tea\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"st0\">\"eat biscuit\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">]</span>,<br/>  <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>pq = PriorityQueueNaive.<span class=\"me1\">new</span><br/>test.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>pr, str<span class=\"sy0\">|</span> pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>pr, str<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">until</span> pq.<span class=\"me1\">empty</span>? <br/>  <span class=\"kw3\">puts</span> pq.<span class=\"me1\">pop</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span><br/>test2 = test.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> pq1 = PriorityQueueNaive.<span class=\"me1\">new</span><span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> pq2 = PriorityQueueNaive.<span class=\"me1\">new</span><span class=\"br0\">(</span>test2<span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> pq3 = pq1.<span class=\"me1\">merge</span><span class=\"br0\">(</span>pq2<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"peek\u00a0: #{pq3.peek}\"</span><br/><span class=\"kw1\">until</span> pq3.<span class=\"me1\">empty</span>?<br/>  <span class=\"kw3\">puts</span> pq3.<span class=\"me1\">pop</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"peek\u00a0: #{pq3.peek}\"</span></pre>"}, {"lang": "Run BASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"<br/>#mem execute(\"CREATE TABLE queue (priority float,descr text)\")<br/>\u00a0<br/>' --------------------------------------------------------------<br/>' Insert items into the que<br/>' --------------------------------------------------------------<br/>#mem execute(\"INSERT INTO queue VALUES (3,'Clear drains')\")<br/>#mem execute(\"INSERT INTO queue VALUES (4,'Feed cat')\")<br/>#mem execute(\"INSERT INTO queue VALUES (5,'Make tea')\")<br/>#mem execute(\"INSERT INTO queue VALUES (1,'Solve RC tasks')\")<br/>#mem execute(\"INSERT INTO queue VALUES (2,'Tax return')\")<br/>\u00a0<br/>'--------------- insert priority between 4 and 5 -----------------<br/>#mem execute(\"INSERT INTO queue VALUES (4.5,'My Special Project')\") <br/>\u00a0<br/>what$ = \" -------------- Find first priority ---------------------\"<br/>mem$ = \"SELECT * FROM queue ORDER BY priority LIMIT 1\"<br/>gosub [getQueue]<br/>\u00a0<br/>what$ = \" -------------- Find last priority ---------------------\"<br/>mem$ = \"SELECT * FROM queue ORDER BY priority desc LIMIT 1\"<br/>gosub [getQueue]<br/>\u00a0<br/>what$ = \" -------------- Delete Highest Priority ---------------------\"<br/>mem$ = \"DELETE FROM queue WHERE priority = (select max(q.priority) FROM queue as q)\"<br/>#mem  execute(mem$)<br/>\u00a0<br/>what$ = \" -------------- List Priority Sequence ---------------------\"<br/>mem$ = \"SELECT * FROM queue ORDER BY priority\"<br/>gosub [getQueue]<br/>end<br/>\u00a0<br/>\u00a0<br/>[getQueue]<br/>print what$<br/>#mem  execute(mem$)<br/>rows    = #mem ROWCOUNT()<br/>print \"Priority    Description\"<br/>for i = 1 to rows<br/>  #row     = #mem #nextrow()<br/>  priority = #row priority()<br/>  descr$   = #row descr$()<br/>print priority;\"         \";descr$<br/>next i<br/>RETURN</pre>"}, {"lang": "Rust", "loc": 48, "block": "<pre class=\"text highlighted_source\">use std::collections::BinaryHeap;<br/>use std::cmp::Ordering;<br/>use std::borrow::Cow;<br/>\u00a0<br/>#[derive(Eq, PartialEq)]<br/>struct Item&lt;'a&gt; {<br/>    priority: usize,<br/>    task: Cow&lt;'a, str&gt;, // Takes either borrowed or owned string<br/>}<br/>\u00a0<br/>impl&lt;'a&gt; Item&lt;'a&gt; {<br/>    fn new&lt;T&gt;(p: usize, t: T) -&gt; Self<br/>        where T: Into&lt;Cow&lt;'a, str&gt;&gt;<br/>    {<br/>        Item {<br/>            priority: p,<br/>            task: t.into(),<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>// Manually implpement Ord so we have a min heap<br/>impl&lt;'a&gt; Ord for Item&lt;'a&gt; {<br/>    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {<br/>        other.priority.cmp(&amp;self.priority)<br/>    }<br/>}<br/>\u00a0<br/>// PartialOrd is required by Ord<br/>impl&lt;'a&gt; PartialOrd for Item&lt;'a&gt; {<br/>    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {<br/>        Some(self.cmp(other))<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    let mut queue = BinaryHeap::with_capacity(5);<br/>    queue.push(Item::new(3, \"Clear drains\"));<br/>    queue.push(Item::new(4, \"Feed cat\"));<br/>    queue.push(Item::new(5, \"Make tea\"));<br/>    queue.push(Item::new(1, \"Solve RC tasks\"));<br/>    queue.push(Item::new(2, \"Tax return\"));<br/>\u00a0<br/>    for item in queue {<br/>        println!(\"{}\", item.task);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">PriorityQueue</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Task<span class=\"br0\">(</span>prio<span class=\"sy0\">:</span>Int, text<span class=\"sy0\">:</span>String<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Ordered<span class=\"br0\">[</span>Task<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compare<span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Task<span class=\"br0\">)</span><span class=\"sy0\">=</span>that.<span class=\"me1\">prio</span> compare <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">prio</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//test</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q<span class=\"sy0\">=</span>PriorityQueue<span class=\"br0\">[</span>Task<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> ++ Seq<span class=\"br0\">(</span>Task<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Clear drains\"</span><span class=\"br0\">)</span>, Task<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"Feed cat\"</span><span class=\"br0\">)</span>,<br/>  Task<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Make tea\"</span><span class=\"br0\">)</span>, Task<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Solve RC tasks\"</span><span class=\"br0\">)</span>, Task<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"Tax return\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>q.<span class=\"me1\">nonEmpty</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>q dequeue<span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 30, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> PriorityQueue <span class=\"br0\">{</span><br/>    has tasks = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    method insert <span class=\"br0\">(</span>Number priority <span class=\"br0\">{</span> _ <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, task<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> range<span class=\"br0\">(</span>tasks.<span class=\"me1\">len</span>, priority<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tasks<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        tasks<span class=\"br0\">[</span>priority<span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method get      <span class=\"br0\">{</span> tasks.<span class=\"me1\">first</span> <span class=\"br0\">{</span>\u00a0!.<span class=\"me1\">is_empty</span> <span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> shift <span class=\"br0\">}</span><br/>    method is_empty <span class=\"br0\">{</span> tasks.<span class=\"me1\">all</span>   <span class=\"br0\">{</span>  .<span class=\"me1\">is_empty</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var pq = PriorityQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"st0\">'Clear drains'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"st0\">'Feed cat'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"st0\">'Make tea'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">9</span>, <span class=\"st0\">'Sleep'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"st0\">'Check email'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"st0\">'Solve RC tasks'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">9</span>, <span class=\"st0\">'Exercise'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"st0\">'Do taxes'</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span><br/>    pq.<span class=\"me1\">insert</span><span class=\"br0\">(</span>pair...<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say pq.<span class=\"me1\">get</span> <span class=\"kw1\">while</span>\u00a0!pq.<span class=\"me1\">is_empty</span></pre>"}, {"lang": "Standard ML", "loc": 29, "block": "<pre class=\"text highlighted_source\">structure TaskPriority = struct<br/>  type priority = int<br/>  val compare = Int.compare<br/>  type item = int * string<br/>  val priority\u00a0: item -&gt; int = #1<br/>end<br/>\u00a0<br/>structure PQ = LeftPriorityQFn (TaskPriority)<br/>;<br/>\u00a0<br/>let<br/>  val tasks = [<br/>    (3, \"Clear drains\"),<br/>    (4, \"Feed cat\"),<br/>    (5, \"Make tea\"),<br/>    (1, \"Solve RC tasks\"),<br/>    (2, \"Tax return\")]<br/>  val pq = foldl PQ.insert PQ.empty tasks<br/>  (* or val pq = PQ.fromList tasks *)<br/>  fun aux pq' =<br/>    case PQ.next pq' of<br/>      NONE =&gt; ()<br/>    | SOME ((prio, name), pq'') =&gt; (<br/>        print (Int.toString prio ^ \", \" ^ name ^ \"\\n\");<br/>        aux pq''<br/>      )<br/>in<br/>  aux pq<br/>end</pre>"}, {"lang": "Swift", "loc": 56, "block": "<pre class=\"text highlighted_source\">class Task\u00a0: Comparable, CustomStringConvertible {<br/>  var priority\u00a0: Int<br/>  var name: String<br/>  init(priority: Int, name: String) {<br/>    self.priority = priority<br/>    self.name = name<br/>  }<br/>  var description: String {<br/>    return \"\\(priority), \\(name)\"<br/>  }<br/>}<br/>func ==(t1: Task, t2: Task) -&gt; Bool {<br/>  return t1.priority == t2.priority<br/>}<br/>func &lt;(t1: Task, t2: Task) -&gt; Bool {<br/>  return t1.priority &lt; t2.priority<br/>}<br/>\u00a0<br/>struct TaskPriorityQueue {<br/>  let heap\u00a0: CFBinaryHeapRef = {<br/>    var callBacks = CFBinaryHeapCallBacks(version: 0, retain: {<br/>      UnsafePointer(Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer($1)).retain().toOpaque())<br/>      }, release: {<br/>        Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer($1)).release()<br/>      }, copyDescription: nil, compare: { (ptr1, ptr2, _) in<br/>        let t1\u00a0: Task = Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer(ptr1)).takeUnretainedValue()<br/>        let t2\u00a0: Task = Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer(ptr2)).takeUnretainedValue()<br/>        return t1 == t2\u00a0? CFComparisonResult.CompareEqualTo\u00a0: t1 &lt; t2\u00a0? CFComparisonResult.CompareLessThan\u00a0: CFComparisonResult.CompareGreaterThan<br/>    })<br/>    return CFBinaryHeapCreate(nil, 0, &amp;callBacks, nil)<br/>  }()<br/>  var count\u00a0: Int { return CFBinaryHeapGetCount(heap) }<br/>  mutating func push(t: Task) {<br/>    CFBinaryHeapAddValue(heap, UnsafePointer(Unmanaged.passUnretained(t).toOpaque()))<br/>  }<br/>  func peek() -&gt; Task {<br/>    return Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer(CFBinaryHeapGetMinimum(heap))).takeUnretainedValue()<br/>  }<br/>  mutating func pop() -&gt; Task {<br/>    let result = Unmanaged&lt;Task&gt;.fromOpaque(COpaquePointer(CFBinaryHeapGetMinimum(heap))).takeUnretainedValue()<br/>    CFBinaryHeapRemoveMinimumValue(heap)<br/>    return result<br/>  }<br/>}<br/>\u00a0<br/>var pq = TaskPriorityQueue()<br/>\u00a0<br/>pq.push(Task(priority: 3, name: \"Clear drains\"))<br/>pq.push(Task(priority: 4, name: \"Feed cat\"))<br/>pq.push(Task(priority: 5, name: \"Make tea\"))<br/>pq.push(Task(priority: 1, name: \"Solve RC tasks\"))<br/>pq.push(Task(priority: 2, name: \"Tax return\"))<br/>\u00a0<br/>while pq.count\u00a0!= 0 {<br/>  print(pq.pop())<br/>}</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"me1\">prioqueue</span><br/>\u00a0<br/><span class=\"kw1\">set</span> pq <span class=\"br0\">[</span>struct::<span class=\"me1\">prioqueue</span><span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>priority task<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">3</span> <span class=\"st0\">\"Clear drains\"</span><br/>    <span class=\"nu0\">4</span> <span class=\"st0\">\"Feed cat\"</span><br/>    <span class=\"nu0\">5</span> <span class=\"st0\">\"Make tea\"</span><br/>    <span class=\"nu0\">1</span> <span class=\"st0\">\"Solve RC tasks\"</span><br/>    <span class=\"nu0\">2</span> <span class=\"st0\">\"Tax return\"</span><br/><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Insert into the priority queue</span><br/>    <span class=\"re0\">$pq</span> put <span class=\"re0\">$task</span> <span class=\"re0\">$priority</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Drain the queue, in priority-sorted order</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$pq</span> size<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Remove the front-most item from the priority queue</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"re0\">$pq</span> get<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XLISP", "loc": 35, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-class priority-queue<br/>\t<span class=\"br0\">(</span>instance-variables queue lowest-priority most-urgent<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>priority-queue 'initialize limit<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">defun</span> setup <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> queue x <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x limit<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>setup <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> lowest-priority limit<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> most-urgent limit<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> queue <span class=\"br0\">(</span>make-vector <span class=\"br0\">(</span>+ limit <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>setup <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\tself <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>priority-queue 'push item priority<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>integerp priority<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> priority <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> priority lowest-priority<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">progn</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> most-urgent <span class=\"br0\">(</span><span class=\"kw1\">min</span> priority most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> queue priority <span class=\"br0\">(</span><span class=\"kw1\">nconc</span> <span class=\"br0\">(</span>vector-ref queue priority<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> item <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>priority-queue 'pop<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">defun</span> find-next <span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> q lowest-priority<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>vector-ref queue q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tq<br/>\t\t\t<span class=\"br0\">(</span>find-next <span class=\"br0\">(</span>+ q <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>define item <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>vector-ref queue most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> queue most-urgent <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>vector-ref queue most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> most-urgent <span class=\"br0\">(</span>find-next most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\titem <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>priority-queue 'peek<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>vector-ref queue most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>priority-queue 'emptyp<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> most-urgent lowest-priority<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>vector-ref queue most-urgent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 20, "block": "<pre class=\"text highlighted_source\">class PQ{<br/>   fcn init(numLevels=10){  // 0..numLevels, bigger # == lower priorty<br/>      var [const] queue=(1).pump(numLevels+1,List.createLong(numLevels).write,L().copy);<br/>   }<br/>   fcn add(item,priorty){ queue[priorty].append(item); }<br/>   fcn peek{ if(q:=queue.filter1()) return(q[-1]);   Void }// --&gt;Void if empty<br/>   fcn pop { if(q:=queue.filter1()) return(q.pop()); Void }// --&gt;Void if empty<br/>   var [private] state=L();<br/>   fcn [private] next{ // iterate<br/>      qi,ii:=state;<br/>      foreach n in ([qi..queue.len()-1]){<br/>         q:=queue[n];<br/>\t if(ii&gt;=q.len()) ii=0;<br/>\t else{ state.clear().append(n,ii+1); return(q[ii]) }<br/>      }<br/>      Void.Stop<br/>   }<br/>   fcn walker{ state.clear().append(0,0); Walker(next) } // iterator front end<br/>   fcn toString{ \"PQ(%d) items\".fmt(queue.reduce(fcn(sum,q){ sum+q.len() },0)) }<br/>}</pre>"}]}