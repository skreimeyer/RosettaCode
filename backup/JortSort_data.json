{"task": "JortSort", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Jortsort <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Jort_Sort<span class=\"br0\">(</span>List: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span><br/>\t<span class=\"br0\">(</span>Positive, Character, Array_Type =&gt; String<span class=\"br0\">)</span>;<br/>      Second_List: String\u00a0:= List;<br/>   <span class=\"kw1\">begin</span><br/>      Sort<span class=\"br0\">(</span>Second_List<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Second_List = List;<br/>   <span class=\"kw1\">end</span> Jort_Sort;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"abbigail\"</span><span class=\"st0\">\" sorted: \"</span> &amp; Boolean'Image<span class=\"br0\">(</span>Jort_Sort<span class=\"br0\">(</span><span class=\"st0\">\"abbigail\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"abbey\"</span><span class=\"st0\">\" sorted: \"</span> &amp; Boolean'Image<span class=\"br0\">(</span>Jort_Sort<span class=\"br0\">(</span><span class=\"st0\">\"abbey\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Jortsort;</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\">JortSort<span class=\"br0\">(</span>Array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tsorted<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor index<span class=\"sy0\">,</span> val in Array<br/>\t\tsorted<span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/>\tfor key<span class=\"sy0\">,</span> val in sorted<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>key<span class=\"sy0\">&lt;&gt;</span>Array<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 57, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> number_of_digits<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> NumberOfDigits<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>NumberOfDigits<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>x<span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>NumberOfDigits<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        x<span class=\"sy0\">=</span>x<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> NumberOfDigits<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"sy0\">*</span> convert_array<span class=\"br0\">(</span><span class=\"kw4\">char</span> array<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> NumberOfElements<span class=\"br0\">)</span>  <span class=\"co1\">//converts integer arguments from char to int</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>convertedArray<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>NumberOfElements<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> originalElement<span class=\"sy0\">,</span> convertedElement<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>convertedElement<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> originalElement<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> convertedElement<span class=\"sy0\">&lt;</span>NumberOfElements<span class=\"sy0\">;</span> convertedElement<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>       convertedArray<span class=\"br0\">[</span>convertedElement<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>array<span class=\"br0\">[</span>originalElement<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       originalElement<span class=\"sy0\">+=</span>number_of_digits<span class=\"br0\">(</span>convertedArray<span class=\"br0\">[</span>convertedElement<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">//computes where is the beginning of the next element</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> convertedArray<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> isSorted<span class=\"br0\">(</span><span class=\"kw4\">int</span> array<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> numberOfElements<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sorted<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> counter<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>counter<span class=\"sy0\">&lt;</span>numberOfElements<span class=\"sy0\">;</span>counter<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>counter<span class=\"sy0\">!=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> array<span class=\"br0\">[</span>counter<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>array<span class=\"br0\">[</span>counter<span class=\"br0\">]</span><span class=\"br0\">)</span> sorted<span class=\"sy0\">--;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sorted<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"sy0\">*</span> convertedArray<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    convertedArray<span class=\"sy0\">=</span>convert_array<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>argv<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> argc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>isSorted<span class=\"br0\">(</span>convertedArray<span class=\"sy0\">,</span> argc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Did you forgot to turn on your brain?! This array is already sorted!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>argc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Am I really supposed to sort this? Sort it by yourself!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Am I really supposed to sort this? Bhahahaha!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>convertedArray<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 64, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt; </span><br/>\u00a0<br/><span class=\"kw2\">class</span> jortSort <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>    <span class=\"kw4\">bool</span> jort_sort<span class=\"br0\">(</span> T<span class=\"sy2\">*</span> o, <span class=\"kw4\">size_t</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        T<span class=\"sy2\">*</span> n <span class=\"sy1\">=</span> copy_array<span class=\"br0\">(</span> o, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sort_array<span class=\"br0\">(</span> n, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">bool</span> r <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy1\">=</span> check<span class=\"br0\">(</span> o, n, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> n<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>    T<span class=\"sy2\">*</span> copy_array<span class=\"br0\">(</span> T<span class=\"sy2\">*</span> o, <span class=\"kw4\">size_t</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        T<span class=\"sy2\">*</span> z <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> T<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">memcpy</span><span class=\"br0\">(</span> z, o, s <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> T <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"co1\">//std::copy( o, o + s, z );</span><br/>        <span class=\"kw1\">return</span> z<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>    <span class=\"kw4\">void</span> sort_array<span class=\"br0\">(</span> T<span class=\"sy2\">*</span> n, <span class=\"kw4\">size_t</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span> n, n <span class=\"sy2\">+</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/>    <span class=\"kw4\">bool</span> check<span class=\"br0\">(</span> T<span class=\"sy2\">*</span> n, T<span class=\"sy2\">*</span> o, <span class=\"kw4\">size_t</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> o<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>jortSort js<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> displayTest<span class=\"br0\">(</span> T<span class=\"sy2\">*</span> o, <span class=\"kw4\">size_t</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span> o, o <span class=\"sy2\">+</span> s, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": -&gt; The array is \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> js.<span class=\"me1\">jort_sort</span><span class=\"br0\">(</span> o, s <span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"sorted!\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"not sorted!\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> oStr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"5\"</span>, <span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"D\"</span>, <span class=\"st0\">\"R\"</span>, <span class=\"st0\">\"S\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    displayTest<span class=\"br0\">(</span> oStr, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">swap</span><span class=\"br0\">(</span> oStr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, oStr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    displayTest<span class=\"br0\">(</span> oStr, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> oInt<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    displayTest<span class=\"br0\">(</span> oInt, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">swap</span><span class=\"br0\">(</span> oInt<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, oInt<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    displayTest<span class=\"br0\">(</span> oInt, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> JortSort<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"kw1\">where</span> T <span class=\"sy0\">:</span> IComparable, IEquatable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"co1\">// sort the array</span><br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span> originalArray <span class=\"sy0\">=</span> <span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> array<span class=\"sy0\">.</span><span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Array<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// compare to see if it was originally sorted</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> originalArray<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Equals<span class=\"br0\">(</span>originalArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> jort<span class=\"sy0\">-</span><span class=\"kw1\">sort</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"kw1\">sort</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> jort-sort <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>equalp <span class=\"br0\">(</span>copy-seq x<span class=\"br0\">)</span> <span class=\"br0\">(</span>sort x #'<span class=\"sy0\">&lt;</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">module</span> jortsort<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span> <span class=\"sy0\">:</span> sort<span class=\"sy0\">,</span> SwapStrategy<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> jortSort<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">auto</span> originalArray <span class=\"sy0\">=</span> array.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>\tsort<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"a &lt; b\"</span><span class=\"sy0\">,</span> SwapStrategy.<span class=\"me1\">stable</span><span class=\"br0\">)</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> originalArray <span class=\"sy0\">==</span> array<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"apple\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"banana\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"orange\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 6, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; jortsort = fn list -&gt; list == Enum.sort(list) end<br/>#Function&lt;6.90072148/1 in\u00a0:erl_eval.expr/5&gt;<br/>iex(2)&gt; jortsort.([1,2,3,4])<br/>true<br/>iex(3)&gt; jortsort.([1,2,5,4])<br/>false</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: kernel sorting\u00a0;<br/>: jortsort ( seq --\u00a0? ) dup natural-sort =\u00a0;</pre>"}, {"lang": "FreeBASIC", "loc": 62, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Although it's possible to create generic sorting routines using macros in FreeBASIC</span><br/><span class=\"co1\">' here we will just use Integer arrays.</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, first <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, last <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> length = last - first + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <br/>  <span class=\"kw1\">Dim</span> pivot <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = a<span class=\"br0\">(</span>first + length\\ <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> lft <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = first <br/>  <span class=\"kw1\">Dim</span> rgt <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = last <br/>  <span class=\"kw1\">While</span> lft &lt;= rgt<br/>    <span class=\"kw1\">While</span> a<span class=\"br0\">(</span>lft<span class=\"br0\">)</span> &lt; pivot<br/>      lft +=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">While</span> a<span class=\"br0\">(</span>rgt<span class=\"br0\">)</span> &gt; pivot<br/>      rgt -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">If</span> lft &lt;= rgt <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Swap</span> a<span class=\"br0\">(</span>lft<span class=\"br0\">)</span>, a<span class=\"br0\">(</span>rgt<span class=\"br0\">)</span><br/>       lft += <span class=\"nu0\">1</span><br/>       rgt -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>  <span class=\"kw1\">Wend</span><br/>  quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, first, rgt<span class=\"br0\">)</span><br/>  quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, lft, last<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> jortSort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"co1\">' copy the array</span><br/>  <span class=\"kw1\">Dim</span> lb <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span>lb <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"co1\">' this could be done more quickly using memcpy</span><br/>  <span class=\"co1\">' but we just copy element by element here </span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = lb <span class=\"kw1\">To</span> ub<br/>    b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">' sort \"b\"</span><br/>  quickSort<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span>, lb, ub<span class=\"br0\">)</span><br/>  <span class=\"co1\">' now compare with \"a\" to see if it's already sorted</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = lb <span class=\"kw1\">To</span> ub<br/>    <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt;&gt; b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printResults<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\" =&gt; \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>jortSort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\"sorted\"</span>, <span class=\"st0\">\"not sorted\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>printResults<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>PrintResults<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>  <span class=\"st0\">\"log\"</span><br/>  <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>jortSort<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">213</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">}))</span> <span class=\"co1\">//false</span><br/>  log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>jortSort<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}))</span>       <span class=\"co1\">//false </span><br/>  log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>jortSort<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">22</span><span class=\"sy1\">,</span> <span class=\"nu0\">22</span><span class=\"sy1\">}))</span>    <span class=\"co1\">//true</span><br/>  log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>jortSort<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}))</span>       <span class=\"co1\">//true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> jortSort<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>  c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">))</span><br/>  <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>  sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> c <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> v <span class=\"sy3\">==</span> a<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>      <span class=\"kw1\">continue</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>  <span class=\"sy1\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"br0\">)</span><br/>\u00a0<br/>jortSort <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>jortSort list <span class=\"sy0\">=</span> list <span class=\"sy0\">==</span> sort list</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   jortSort=: -: /:~</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> JortSort <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>jortSort<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> jortSort<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> jortSort <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span> array <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// sort the array</span><br/>  <span class=\"kw1\">var</span> originalArray <span class=\"sy0\">=</span> array.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  array.<span class=\"me1\">sort</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> a <span class=\"sy0\">-</span> b<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// compare to see if it was originally sorted</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> originalArray.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>originalArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!==</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def jortsort: . == sort;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>jortsort(A) = sort(A) == A<br/>\u00a0</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">jortsort:{<a class=\"__cf_email__\" data-cfemail=\"2850565068\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;x}</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> jortSort<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> a.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    b.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> printResults<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>a.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> + <span class=\"st0\">\" =&gt; \"</span> + <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>jortSort<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"sorted\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"not sorted\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    printResults<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    printResults<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span>, <span class=\"st0\">'E'</span><span class=\"br0\">)</span><br/>    printResults<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span>, <span class=\"st0\">'A'</span>, <span class=\"st0\">'E'</span>, <span class=\"st0\">'B'</span><span class=\"br0\">)</span><br/>    printResults<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> copy <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> new <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> new<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> new<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> jortSort <span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> originalArray <span class=\"sy0\">=</span> copy<span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>    <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>originalArray <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> originalArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">jortSort\u00a0:= proc(arr)<br/>\tlocal copy:<br/>\tcopy\u00a0:= sort(Array([seq(arr[i], i=1..numelems(arr))])):<br/>\treturn ArrayTools:-IsEqual(copy,arr):<br/>end proc:<br/>#Examples<br/>jortSort(Array([5,6,7,2,1]));<br/>jortSort(Array([-5,0,7,12,21]));<br/>jortSort(Array(StringTools:-Explode(\"abcdefg\")));</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">jortSort[list_]\u00a0:= list == Sort[list];<br/>Print[jortSort[Range[100]]];<br/>Print[jortSort[RandomSample[Range[100]]]];</pre>"}, {"lang": "Objeck", "loc": 12, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">function</span> <span class=\"sy0\">:</span> JortSort<span class=\"br0\">(</span>elems <span class=\"sy0\">:</span> CompareVector<span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>  sorted <span class=\"sy0\">:=</span> CompareVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>elems<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  sorted<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> sorted<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>sorted<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Compare</span><span class=\"br0\">(</span>elems<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> jortSortList lst <span class=\"sy0\">=</span><br/>  lst <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> lst</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: jortSort  dup sort ==\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 12, "block": "<pre class=\"oorexx highlighted_source\">jortSort: <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> list<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* Determine if list is sorted<br/>* &lt;&lt; is used to avoid numeric comparison<br/>* 3 4e-1 is sorted<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>list,i<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>list,i-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Leave</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> <span class=\"br0\">(</span>i=<span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"br0\">(</span>list=<span class=\"st0\">''</span><span class=\"br0\">)</span>  <br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">jortSort<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">==</span>v</pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> jortsort <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">=</span><a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Default standard string comparison</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$#s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">unless</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> jort<span class=\"sy0\">-</span><span class=\"kw3\">sort</span> <span class=\"br0\">{</span> <span class=\"re0\">@_</span> eqv <span class=\"re0\">@_</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">type JortSort(sequence s)<br/>    return s=sort(s)<br/>end type</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(de jortSort (L) (= L (sort L)))<br/>(jortSort (1 2 3))<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> jortsort<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">-not</span> <span class=\"br0\">(</span><span class=\"kw1\">Compare-Object</span> <span class=\"re0\">$a</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span><span class=\"br0\">)</span> <span class=\"kw5\">-SyncWindow</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>jortsort <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>jortsort <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> isSort<span class=\"br0\">(</span>liste<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">ForEach</span> liste\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span>liste<span class=\"sy0\">+</span><span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span>\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"] = \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> jortSort<span class=\"br0\">(</span>liste<span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"True\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"False\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span>  <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b jortSort<span class=\"br0\">(</span>List jortS.s<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> cpy.s<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: CopyList<span class=\"br0\">(</span>jortS<span class=\"br0\">(</span><span class=\"br0\">)</span>,cpy<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">SortList</span><span class=\"br0\">(</span>cpy<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_Ascending<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> jortS<span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <span class=\"kw2\">SelectElement</span><span class=\"br0\">(</span>cpy<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"kw2\">ListIndex</span><span class=\"br0\">(</span>jortS<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> jortS<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>cpy<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> l1.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span>\u00a0: <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>l1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: l1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">90</span>,<span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>isSort<span class=\"br0\">(</span>l1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">SortList</span><span class=\"br0\">(</span>l1<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_Ascending<span class=\"br0\">)</span>\u00a0: isSort<span class=\"br0\">(</span>l1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> jortSort<span class=\"br0\">(</span>myarray<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>myarray<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>myarray<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> data <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'s'</span><span class=\"sy0\">,</span> <span class=\"st0\">'u'</span><span class=\"sy0\">,</span> <span class=\"st0\">'x'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'CVGH'</span><span class=\"sy0\">,</span> <span class=\"st0\">'PQRST'</span><span class=\"br0\">]</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'jortSort(%r) is\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>data<span class=\"sy0\">,</span> jortSort<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>jortSort<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">False</span><br/>jortSort<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">False</span><br/>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">True</span><br/>jortSort<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'s'</span><span class=\"sy0\">,</span> <span class=\"st0\">'u'</span><span class=\"sy0\">,</span> <span class=\"st0\">'x'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">True</span><br/>jortSort<span class=\"br0\">(</span><span class=\"st0\">'CVGH'</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">False</span><br/>jortSort<span class=\"br0\">(</span><span class=\"st0\">'PQRST'</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 3, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(define (jort-sort l [&lt;? &lt;])<br/>  (equal? l (sort l &lt;?)))</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  verifies  that  an array  is sorted  using  a   jortSort   algorithm.   */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $                                      <span class=\"coMULTI\">/*obtain the list of numbers from C.L. */</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> $=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span>                          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'array items='</span>  <span class=\"kw6\">space</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*display the list to the terminal.    */</span><br/><span class=\"kw1\">if</span> jortSort<span class=\"br0\">(</span>$<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">'The array is sorted.'</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"The array isn't sorted.\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>eSort:    <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;                    <a class=\"__cf_email__\" data-cfemail=\"68005528\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>0       <span class=\"coMULTI\">/*exchange sort.*/</span><br/>                    <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;                 h=h%2<br/>                      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> @<span class=\"sy0\">.</span>0-h;          j=i;      k=h+i<br/>                        <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>j;        <a class=\"__cf_email__\" data-cfemail=\"23571e63\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j;    @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"2d47106d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k;    @<span class=\"sy0\">.</span>k=t<br/>                        <span class=\"kw1\">if</span> h<span class=\"sy0\">&gt;</span>=j  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;      j=j-h;    k=k-h<br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while @.k&lt;@.j*/</span><br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*i*/</span><br/>                    <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*while h&gt;1*/</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>jortSort: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   @<span class=\"sy0\">.</span>0=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*assign # items in list. */</span><br/>                      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> @<span class=\"sy0\">.</span>0;\u00a0!<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x,j<span class=\"br0\">)</span>; @<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j <span class=\"coMULTI\">/*save a copy of original.*/</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">call</span> eSort                                          <span class=\"coMULTI\">/*sort with exchange sort.*/</span><br/>                      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> @<span class=\"sy0\">.</span>0<br/>                      <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span><a class=\"__cf_email__\" data-cfemail=\"4a77770a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*the array isn't sorted. */</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                                            <span class=\"coMULTI\">/*the array is    sorted. */</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aList = [4,2,3,1]<br/>see jortSort(aList) + nl<br/>\u00a0<br/>func jortSort array<br/>     originalArray = array<br/>     array = sort(array)<br/>     for i= 1 to len(originalArray)<br/>         if originalArray[i]\u00a0!= array[i] return false ok<br/>     next<br/>     return true  <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> jort_sort<span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">array</span> == <span class=\"kw3\">array</span>.<span class=\"me1\">sort</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">use std::cmp::{Ord, Eq};<br/>\u00a0<br/>fn jort_sort&lt;T: Ord + Eq + Clone&gt;(array: Vec&lt;T&gt;) -&gt; bool {<br/>    // sort the array<br/>    let mut sorted_array = array.to_vec();<br/>    sorted_array.sort();<br/>\u00a0<br/>    // compare to see if it was originally sorted<br/>    for i in 0..array.len() {<br/>        if array[i]\u00a0!= sorted_array[i] {<br/>            return false;<br/>        }<br/>    }<br/>\u00a0<br/>    return true;<br/>}</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> jortSort<span class=\"br0\">[</span>K<span class=\"sy0\">:</span>Ordering<span class=\"br0\">]</span><span class=\"br0\">(</span> a<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>K<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">sorted</span>.<span class=\"me1\">deep</span> <span class=\"sy0\">==</span> a.<span class=\"me1\">deep</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">func jort_sort<span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">array</span> == <span class=\"kw3\">array</span>.<span class=\"me1\">sort</span> <span class=\"br0\">}</span>;</pre>"}, {"lang": "SSEM", "loc": 25, "block": "<pre class=\"text highlighted_source\">11011000000000100000000000000000   0. -27 to c<br/>00000000000000110000000000000000   1. Test<br/>11101000000000000000000000000000   2. 23 to CI<br/>10011000000001100000000000000000   3. c to 25<br/>10011000000000100000000000000000   4. -25 to c<br/>01011000000000010000000000000000   5. Sub. 26<br/>00000000000000110000000000000000   6. Test<br/>10101000000001000000000000000000   7. Add 21 to CI<br/>00011000000000000000000000000000   8. 24 to CI<br/>10011000000000100000000000000000   9. -25 to c<br/>01011000000001100000000000000000  10. c to 26<br/>00000000000000100000000000000000  11. -0 to c<br/>10101000000000010000000000000000  12. Sub. 21<br/>00000000000001100000000000000000  13. c to 0<br/>00000000000000100000000000000000  14. -0 to c<br/>00000000000001100000000000000000  15. c to 0<br/>01101000000000000000000000000000  16. 22 to CI<br/>11111000000000100000000000000000  17. -31 to c<br/>00000000000001110000000000000000  18. Stop<br/>10101000000000100000000000000000  19. -21 to c<br/>00000000000001110000000000000000  20. Stop<br/>10000000000000000000000000000000  21. 1<br/>11111111111111111111111111111111  22. -1<br/>00001000000000000000000000000000  23. 16<br/>01001000000000000000000000000000  24. 18</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func jortSort&lt;T:Comparable&gt;(array: [T]) -&gt; Bool {<br/>    return array == sorted(array)<br/>}</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"kw1\">proc</span> jortsort <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$list</span><span class=\"br0\">]</span>    <span class=\"sy0\">;</span><span class=\"co1\"># ensure canonical list form</span><br/>    <span class=\"kw1\">set</span> options <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$args</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$options</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span> eq <span class=\"re0\">$list</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 25, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> JortSort(s)<br/>\tJortSort = <span class=\"kw5\">True</span><br/>\tarrPreSort = Split(s,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw4\">Set</span> arrSorted = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\t<span class=\"co1\">'Populate the resorted arraylist.<br/></span>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrPreSort)<br/>\t\tarrSorted.Add(arrPreSort(i))<br/>\t<span class=\"kw3\">Next</span><br/>\tarrSorted.Sort()<br/>\t<span class=\"co1\">'Compare the elements of both arrays.<br/></span>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrPreSort)<br/>\t\t<span class=\"kw3\">If</span> arrPreSort(j) &lt;&gt; arrSorted(j) <span class=\"kw3\">Then</span><br/>\t\t\tJortSort = <span class=\"kw5\">False</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write JortSort(<span class=\"st0\">\"1,2,3,4,5\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write JortSort(<span class=\"st0\">\"1,2,3,5,4\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write JortSort(<span class=\"st0\">\"a,b,c\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write JortSort(<span class=\"st0\">\"a,c,b\"</span>)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn jort(list){ False!=list.reduce(fcn(a,b){ (a&gt;b) and return(Void.Stop,False); b }) }</pre>"}]}