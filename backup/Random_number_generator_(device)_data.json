{"task": "Random_number_generator_(device)", "blocks": [{"lang": "Ada", "loc": 13, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Random <span class=\"kw1\">is</span><br/>   Number\u00a0: Integer;<br/>   Random_File\u00a0: Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>.<span class=\"me1\">File_Type</span>;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>.<span class=\"me1\">Open</span> <span class=\"br0\">(</span>File =&gt; Random_File,<br/>                               Mode =&gt; Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>.<span class=\"me1\">In_File</span>,<br/>                               Name =&gt; <span class=\"st0\">\"/dev/random\"</span><span class=\"br0\">)</span>;<br/>   Integer'Read <span class=\"br0\">(</span>Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>.<span class=\"me1\">Stream</span> <span class=\"br0\">(</span>Random_File<span class=\"br0\">)</span>, Number<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Streams</span>.<span class=\"me1\">Stream_IO</span>.<span class=\"me1\">Close</span> <span class=\"br0\">(</span>Random_File<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Number:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Number<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Random;</pre>"}, {"lang": "Batch File", "loc": 3, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      SYS \"SystemFunction036\", ^random%, 4<br/>      PRINT ~random%</pre>"}, {"lang": "C", "loc": 25, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define RANDOM_PATH \"/dev/urandom\"</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> v<span class=\"sy0\">;</span><br/>        FILE <span class=\"sy0\">*</span>fin<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fin <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>RANDOM_PATH<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s: unable to open file<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> RANDOM_PATH<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> buf<span class=\"sy0\">,</span> fin<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">sizeof</span> buf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s: not enough bytes (expected\u00a0%u)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                        RANDOM_PATH<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span> <span class=\"kw4\">sizeof</span> buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        v <span class=\"sy0\">=</span> buf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> buf<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> 8UL <span class=\"sy0\">|</span> buf<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> 16UL <span class=\"sy0\">|</span> buf<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> 24UL<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 10, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;random&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">random_device</span> rd<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">uniform_int_distribution</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> dist<span class=\"sy4\">;</span> <span class=\"co1\">// long is guaranteed to be 32 bits</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Random Number: \"</span> <span class=\"sy1\">&lt;&lt;</span> dist<span class=\"br0\">(</span>rd<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 14, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Security.Cryptography</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> GetRandomInt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RNGCryptoServiceProvider<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  rng<span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  result <span class=\"sy0\">=</span> BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ChucK", "loc": 1, "block": "<pre class=\"c highlighted_source\"> Math.<span class=\"me1\">random2</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> </pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> random-int32 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s <span class=\"st0\">\"/dev/random\"</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"br0\">(</span>unsigned-byte <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>read-byte s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Mt19937 gen<span class=\"sy0\">;</span><br/>  gen.<span class=\"me1\">seed</span><span class=\"br0\">(</span>unpredictableSeed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">auto</span> n <span class=\"sy0\">=</span> gen.<span class=\"me1\">front</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>random-seed <span class=\"st0\">\"simon\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">2275215386</span><br/><span class=\"br0\">(</span>random-seed <span class=\"st0\">\"simon\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">2275215386</span> <span class=\"co1\">;; the same</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>random-seed <span class=\"br0\">(</span>current-time-milliseconds <span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">4061857345</span><br/><span class=\"br0\">(</span>random-seed <span class=\"br0\">(</span>current-time-milliseconds <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">1322611152</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">variable rnd<br/>\u00a0<br/>: randoms ( n -- )<br/>  s\" /dev/random\" r/o open-file throw<br/>  swap 0 do<br/>    dup rnd 1 cells rot read-file throw drop<br/>    rnd @ .<br/>  loop<br/>  close-file throw\u00a0;</pre>"}, {"lang": "Fortran", "loc": 26, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">! Test Linux urandom in Fortran</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">program</span>    urandom_test<br/>  <span class=\"kw3\">use</span> iso_c_binding, <span class=\"kw1\">only</span> <span class=\"sy0\">:</span> c_long<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">RANDOM_PATH</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"/dev/urandom\"</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">funit</span>, ios<br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>c_long<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">buf</span><br/>\u00a0<br/>  open<span class=\"br0\">(</span>newunit<span class=\"sy0\">=</span>funit, <span class=\"kw1\">file</span><span class=\"sy0\">=</span>RANDOM_PATH, <span class=\"kw1\">access</span><span class=\"sy0\">=</span><span class=\"st0\">\"stream\"</span>, <span class=\"kw1\">form</span><span class=\"sy0\">=</span><span class=\"st0\">\"UNFORMATTED\"</span>, <span class=\"sy0\">&amp;</span><br/>       <span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>ios, <span class=\"kw1\">status</span><span class=\"sy0\">=</span><span class=\"st0\">\"old\"</span>, <span class=\"kw1\">action</span><span class=\"sy0\">=</span><span class=\"st0\">\"read\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> ios <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">stop</span> <span class=\"st0\">\"Error opening file: \"</span><span class=\"sy0\">//</span>RANDOM_PATH<br/>\u00a0<br/>  read<span class=\"br0\">(</span>funit<span class=\"br0\">)</span> buf<br/>\u00a0<br/>  close<span class=\"br0\">(</span>funit<span class=\"br0\">)</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A,I64)'</span><span class=\"br0\">)</span> <span class=\"st0\">\"Integer:     \"</span>, buf<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A,B64)'</span><span class=\"br0\">)</span> <span class=\"st0\">\"Binary:      \"</span>, buf<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A,Z64)'</span><span class=\"br0\">)</span> <span class=\"st0\">\"Hexadecimal: \"</span>, buf<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> urandom_test<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 10, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span> , <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"co1\">'generate 10 cryptographic random integers in the range 1 To 100</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"nu0\">100</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GlovePIE", "loc": 1, "block": "<pre class=\"text highlighted_source\">var.rand=random(10)</pre>"}, {"lang": "Go", "loc": 34, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"crypto/rand\"</span><br/>    <span class=\"st0\">\"encoding/binary\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    testRandom<span class=\"sy1\">(</span><span class=\"st0\">\"crypto/rand\"</span><span class=\"sy1\">,</span> rand<span class=\"sy3\">.</span><span class=\"me1\">Reader</span><span class=\"sy1\">)</span><br/>    testRandom<span class=\"sy1\">(</span><span class=\"st0\">\"dev/random\"</span><span class=\"sy1\">,</span> newDevRandom<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newDevRandom<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>f <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=os.File\"><span class=\"kw5\">os.<span class=\"me1\">File</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> err error<br/>    <span class=\"kw1\">if</span> f<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span><span class=\"st0\">\"/dev/random\"</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> testRandom<span class=\"sy1\">(</span>label <span class=\"kw4\">string</span><span class=\"sy1\">,</span> src <a href=\"http://golang.org/search?q=io.Reader\"><span class=\"kw5\">io.<span class=\"me1\">Reader</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> label<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> r <span class=\"kw4\">int32</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> binary<span class=\"sy3\">.</span>Read<span class=\"sy1\">(</span>src<span class=\"sy1\">,</span> binary<span class=\"sy3\">.</span>LittleEndian<span class=\"sy1\">,</span> &amp;r<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rng <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> java.<span class=\"me1\">security</span>.<a href=\"http://www.google.de/search?as_q=SecureRandom&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">SecureRandom</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"nu0\">5</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>n <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rand<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    f <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"/dev/urandom\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Cannot get to urandom!\"</span><span class=\"br0\">)</span><br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>n <span class=\"kw1\">do</span> x <span class=\"sy0\">:=</span> x<span class=\"sy0\">*</span><span class=\"nu0\">256</span> <span class=\"sy0\">+</span> <span class=\"kw4\">ord</span><span class=\"br0\">(</span><span class=\"kw4\">reads</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\"><span class=\"nu0\">256</span>#.a.i.<span class=\"nu0\">1</span>!:<span class=\"nu0\">11</span><span class=\"st_h\">'/dev/urandom'</span>;<span class=\"nu0\">0</span> <span class=\"nu0\">4</span></pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.security.SecureRandom</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RandomExample <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asecurerandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SecureRandom</span></a> rng <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asecurerandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SecureRandom</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Prints a random signed 32-bit integer. */</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>rng.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>od -t x -An /dev/urandom | tr -d \" \" | fold -w 8 | jq -R -f uniform.jq</pre>"}, {"lang": "Julia", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const rdev = \"/dev/random\"<br/>rstream = try<br/>    open(rdev, \"r\")<br/>catch<br/>    false<br/>end<br/>\u00a0<br/>if isa(rstream, IOStream)<br/>    b = readbytes(rstream, 4)<br/>    close(rstream)<br/>    i = reinterpret(Int32, b)[1]<br/>    println(\"A hardware random number is:  \", i)<br/>else<br/>    println(\"The hardware random number stream, \", rdev, \", was unavailable.\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env runhaskell<br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Entropy<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Binary<span class=\"sy0\">.</span>Get<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Lazy <span class=\"kw1\">as</span> B<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  bytes <span class=\"sy0\">&lt;-</span> getEntropy <span class=\"nu0\">4</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>runGet getWord32be <span class=\"sy0\">$</span> B<span class=\"sy0\">.</span>fromChunks <span class=\"br0\">[</span>bytes<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">SecureRandom</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rng <span class=\"sy0\">=</span> SecureRandom<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rn1 <span class=\"sy0\">=</span> rng.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rn2 <span class=\"sy0\">=</span> rng.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newSeed <span class=\"sy0\">=</span> rn1.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> rn2<br/>    rng.<span class=\"me1\">setSeed</span><span class=\"br0\">(</span>newSeed<span class=\"br0\">)</span>    <span class=\"co1\">// reseed using the previous 2 random numbers</span><br/>    println<span class=\"br0\">(</span>rng.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// get random 32-bit number and print it</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">file(`/dev/urandom`)-&gt;readSomeBytes(4)-&gt;export32bits</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">rand32[]\u00a0:= RandomInteger[{-2^31, 2^31 - 1}]</pre>"}, {"lang": "NetRexx", "loc": 33, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">BigInteger</span><br/>\u00a0<br/>randomDevNameFile = File<br/>randomDevNameList = <span class=\"br0\">[</span><span class=\"st0\">'/dev/random'</span>, <span class=\"st0\">'/dev/urandom'</span><span class=\"br0\">]</span> <span class=\"co1\">-- list of random data source devices</span><br/>randomDevIStream = InputStream<br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">loop</span> dn = <span class=\"nu0\">0</span> to randomDevNameList.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    randomDevNameFile = File<span class=\"br0\">(</span>randomDevNameList<span class=\"br0\">[</span>dn<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> randomDevNameFile.<span class=\"kw6\">exists</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> dn <span class=\"co1\">-- We're done! Use this device</span><br/>    randomDevNameFile = null <span class=\"co1\">-- ensure we don't use a non-existant device</span><br/>    <span class=\"kw3\">end</span> dn<br/>  <span class=\"kw1\">if</span> randomDevNameFile == null <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> FileNotFoundException<span class=\"br0\">(</span><span class=\"st0\">'Cannot locate a random data source device on this system'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- read 8 bytes from the random data source device, convert it into a BigInteger then display the result</span><br/>  randomBytes = byte<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>  randomDevIStream = BufferedInputStream<span class=\"br0\">(</span>FileInputStream<span class=\"br0\">(</span>randomDevNameFile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  randomDevIStream.<span class=\"me0\">read</span><span class=\"br0\">(</span>randomBytes, <span class=\"nu0\">0</span>, randomBytes.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>  randomDevIStream.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  randomNum = BigInteger<span class=\"br0\">(</span>randomBytes<span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span>randomNum.<span class=\"me0\">longValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"st0\">'0x'</span>Rexx<span class=\"br0\">(</span>Long.<span class=\"me0\">toHexString</span><span class=\"br0\">(</span>randomNum.<span class=\"me0\">longValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw3\">catch</span> ex = IOException<br/>  ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>To run the program in a loop 10 times from a bash shell prompt use:<br/>for ((i=0; i&lt;10; ++i)); do java &lt;program_name&gt;; done # Shell loop to run the command 10 times<br/>*/</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">var f = open(\"/dev/urandom\")<br/>var r: int32<br/>discard f.readBuffer(addr r, 4)<br/>close(f)<br/>echo r</pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> input_rand_int ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> i1 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_char\"><span class=\"kw3\">input_char</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> i2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_char\"><span class=\"kw3\">input_char</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> i3 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_char\"><span class=\"kw3\">input_char</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> i4 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_char\"><span class=\"kw3\">input_char</span></a> ic<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  i1 lor <span class=\"br0\">(</span>i2 <span class=\"kw1\">lsl</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> lor <span class=\"br0\">(</span>i3 <span class=\"kw1\">lsl</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> lor <span class=\"br0\">(</span>i4 <span class=\"kw1\">lsl</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <span class=\"st0\">\"/dev/urandom\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ri31 <span class=\"sy0\">=</span> input_rand_int ic <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span> ri31<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">rnd<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">extern</span><span class=\"br0\">(</span><span class=\"st0\">\"cat /dev/urandom|tr -dc '[:digit:]'|fold -w\"</span>n<span class=\"st0\">\"|head -1\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 12, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> RandomNumberDevice<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  byteFile<span class=\"sy1\">:</span> <span class=\"kw4\">file</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  randomByte<span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  assign<span class=\"br0\">(</span>byteFile<span class=\"sy1\">,</span> <span class=\"st0\">'/dev/urandom'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  reset <span class=\"br0\">(</span>byteFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">read</span>  <span class=\"br0\">(</span>byteFile<span class=\"sy1\">,</span> randomByte<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  close <span class=\"br0\">(</span>byteFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The random byte is: '</span><span class=\"sy1\">,</span> randomByte<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Crypt<span class=\"sy0\">::</span><span class=\"me2\">Random</span><span class=\"sy0\">::</span><span class=\"me2\">Seed</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$source</span> <span class=\"sy0\">=</span> Crypt<span class=\"sy0\">::</span><span class=\"me2\">Random</span><span class=\"sy0\">::</span><span class=\"me2\">Seed</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> NonBlocking <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># Allow non-blocking sources like /dev/urandom</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">$source</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">random_values</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"co1\"># A method returning an array of 32-bit values</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> experimental <span class=\"sy0\">:</span><span class=\"kw3\">pack</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$UR</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"st0\">\"/dev/urandom\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>bin<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't open /dev/urandom: $!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@random</span><span class=\"sy0\">-</span>spigot <span class=\"sy0\">=</span> <span class=\"re0\">$UR</span><span class=\"sy0\">.</span><span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"nu0\">1024</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span><span class=\"st0\">\"L*\"</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@random</span><span class=\"sy0\">-</span>spigot<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 55, "block": "<pre class=\"text highlighted_source\">integer res  -- 1=failure, 0=success<br/>atom rint = 0   -- random 32-bit int<br/>\u00a0<br/>#ilASM{<br/>        mov eax,1<br/>        cpuid<br/>        bt ecx,30<br/>        mov edi,1 -- exit code: failure<br/>        jnc\u00a0:exit<br/>\u00a0<br/>        -- rdrand sets CF=0 if no random number<br/>        -- was available. Intel documentation<br/>        -- recommends 10 retries in a tight loop<br/>        mov ecx,11<br/>   \u00a0::loop1<br/>        sub ecx, 1<br/>        jz\u00a0:exit -- exit code is set already<br/>        rdrand eax<br/>        -- (the above generates exception #C000001D if not supported)<br/>--      rdtsc<br/>        jnc\u00a0:loop1<br/>\u00a0<br/>        lea edi,[rint]<br/>        call\u00a0:%pStoreMint<br/>        xor edi,edi<br/>\u00a0<br/>   \u00a0::exit<br/>        mov [res],edi<br/>        xor ebx,ebx     -- important!<br/>      }<br/>\u00a0<br/>?{res,rint}<br/>\u00a0<br/>if res=0 then   -- (success)<br/>\u00a0<br/>    --<br/>    -- To convert a signed 32-bit int to an unsigned one:<br/>    --<br/>    --  method 1<br/>--  atom urint1 = rint<br/>--  if urint1&lt;0 then urint1+=#100000000 end if<br/>    atom urint1 = rint+iff(rint&lt;0?#100000000:0)<br/>\u00a0<br/>    --  method 2<br/>    atom pMem = allocate(4)<br/>    poke4(pMem,rint)<br/>    atom urint2 = peek4u(pMem)<br/>    free(pMem)<br/>\u00a0<br/>    --  method 3<br/>    atom urint3 = bytes_to_int(int_to_bytes(rint,4),signed:=false)<br/>\u00a0<br/>   \u00a0?{urint1,urint2,urint3}<br/>\u00a0<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (in \"/dev/urandom\" (rd 4))<br/>-&gt; 2917110327</pre>"}, {"lang": "PowerShell", "loc": 33, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>RandomInteger<br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipelineByPropertyName<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> <br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateScript<span class=\"br0\">(</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-ge</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$InputObject</span> <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$rng</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> System.Security.Cryptography.RNGCryptoServiceProvider<br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"kw3\">in</span> <span class=\"re0\">$InputObject</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$bytes</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> Byte<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>Argument <span class=\"re0\">$count</span><br/>            <span class=\"re0\">$rng</span>.GetBytes<span class=\"br0\">(</span><span class=\"re0\">$bytes</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>System.BitConverter<span class=\"br0\">]</span>::ToInt32<span class=\"br0\">(</span><span class=\"re0\">$bytes</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    End <br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Remove-Variable</span> <span class=\"kw5\">-Name</span> rng <span class=\"kw5\">-Scope</span> Local<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "ProDOS", "loc": 1, "block": "<pre class=\"text highlighted_source\">printline -random- </pre>"}, {"lang": "PureBasic", "loc": 4, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> OpenCryptRandom<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  MyRandom <span class=\"sy0\">=</span> CryptRandom<span class=\"br0\">(</span>#MAXLONG<span class=\"br0\">)</span><br/>  CloseCryptRandom<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>rand <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">SystemRandom</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>rand.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;; Assuming a device to provide random bits:<br/>(call-with-input-file* \"/dev/random\"<br/>  (\u03bb(i) (integer-bytes-&gt;integer (read-bytes 4 i) #f)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 5, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates and displays a random  32-bit  number  using the  RANDOM  BIF.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">10</span>                                <span class=\"coMULTI\">/*ensure REXX has enough decimal digits*/</span><br/>_=<span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">16</span>                                          <span class=\"coMULTI\">/*a handy\u2500dandy constant to have around*/</span><br/>r#= <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, _-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> _    +    <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, _-<span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*generate an unsigned 32-bit random #.*/</span><br/><span class=\"kw1\">say</span> r#                                           <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nr = 10<br/>for i = 1 to nr <br/>    see random(i) + nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'securerandom'</span><br/>SecureRandom.<span class=\"me1\">random_number</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 14, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::{OsRng, Rng};<br/>\u00a0<br/>fn main() {<br/>    // because `OsRng` opens files, it may fail<br/>    let mut rng = match OsRng::new() {<br/>        Ok(v) =&gt; v,<br/>        Err(e) =&gt; panic!(\"Failed to obtain OS RNG: {}\", e)<br/>    };<br/>\u00a0<br/>    let rand_num: u32 = rng.gen();<br/>    println!(\"{}\", rand_num);<br/>}</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">SecureRandom</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RandomExample <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> SecureRandom <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newSeed<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span> <span class=\"sy0\">*</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">setSeed</span><span class=\"br0\">(</span>newSeed<span class=\"br0\">)</span> <span class=\"co1\">// reseed using the previous 2 random numbers</span><br/>    println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// get random 32-bit number and print it</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func urandom<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    const device = <span class=\"sy0\">%</span>f<span class=\"st0\">'/dev/urandom'</span>;<br/>\u00a0<br/>    device.<span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;:raw'</span>, \\var fh, \\var err<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">||</span> die <span class=\"st0\">\"Can't open `#{device}': #{err}\"</span>;<br/>\u00a0<br/>    fh.<span class=\"me1\">sysread</span><span class=\"br0\">(</span>\\var noise, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>    <span class=\"st0\">'L'</span>.<span class=\"me1\">unpack</span><span class=\"br0\">(</span>noise<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say urandom<span class=\"br0\">(</span><span class=\"br0\">)</span>;    <span class=\"co1\"># sample: 3517432564</span></pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Allow override of device name</span><br/><span class=\"kw1\">proc</span> systemRandomInteger <span class=\"br0\">{</span><span class=\"br0\">{</span>device <span class=\"st0\">\"/dev/random\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$device</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">binary</span> <span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"st0\">\"I\"</span> x<br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"text highlighted_source\">od -An -N 4 -t u4 /dev/urandom</pre>"}, {"lang": "X86 Assembly", "loc": 2, "block": "<pre class=\"text highlighted_source\">L: rdrand eax<br/>jnc L</pre>"}, {"lang": "XPL0", "loc": 3, "block": "<pre class=\"text highlighted_source\">code Ran=1;<br/>int R;<br/>R:= Ran($7FFF_FFFF)</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">const RANDOM_PATH=\"/dev/urandom\";<br/>\u00a0<br/>fin,buf:=File(RANDOM_PATH,\"r\"), fin.read(4);<br/>fin.close();  // GC would also close the file<br/>println(buf.toBigEndian(0,4));  // 4 bytes @ offset 0</pre>"}]}