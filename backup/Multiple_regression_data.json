{"task": "Multiple_regression", "blocks": [{"lang": "Ada", "loc": 38, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Element_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   Zero\u00a0: Element_Type;<br/>   One\u00a0: Element_Type;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Matrices <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Vector <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Element_Type;<br/>   <span class=\"kw3\">type</span> Matrix <span class=\"kw1\">is</span><br/>     <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Element_Type;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>   <span class=\"kw3\">function</span> Invert <span class=\"br0\">(</span>Source\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>   <span class=\"kw3\">function</span> Reduced_Row_Echelon_Form <span class=\"br0\">(</span>Source\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>   <span class=\"kw3\">function</span> Regression_Coefficients<br/>     <span class=\"br0\">(</span>Source    \u00a0: Vector;<br/>      Regressors\u00a0: Matrix<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>       Vector;<br/>   <span class=\"kw3\">function</span> To_Column_Vector<br/>     <span class=\"br0\">(</span>Source\u00a0: Matrix;<br/>      Row   \u00a0: Positive\u00a0:= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>   Vector;<br/>   <span class=\"kw3\">function</span> To_Matrix<br/>     <span class=\"br0\">(</span>Source       \u00a0: Vector;<br/>      Column_Vector\u00a0: Boolean\u00a0:= True<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>          Matrix;<br/>   <span class=\"kw3\">function</span> To_Row_Vector<br/>     <span class=\"br0\">(</span>Source\u00a0: Matrix;<br/>      Column\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>   Vector;<br/>   <span class=\"kw3\">function</span> Transpose <span class=\"br0\">(</span>Source\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>\u00a0<br/>   Size_Mismatch    \u00a0: <span class=\"kw1\">exception</span>;<br/>   Not_Square_Matrix\u00a0: <span class=\"kw1\">exception</span>;<br/>   Not_Invertible   \u00a0: <span class=\"kw1\">exception</span>;<br/><span class=\"kw1\">end</span> Matrices;</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      INSTALL @lib$+\"ARRAYLIB\"<br/>\u00a0<br/>      DIM y(14), x(2,14), c(2)<br/>      y() = 52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29, \\<br/>      \\     63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46<br/>      x() =  1.47,  1.50,  1.52,  1.55,  1.57,  1.60,  1.63,  1.65, \\<br/>      \\      1.68,  1.70,  1.73,  1.75,  1.78,  1.80,  1.83<br/>\u00a0<br/>      FOR row% = DIM(x(),1) TO 0 STEP -1<br/>        FOR col% = 0 TO DIM(x(),2)<br/>          x(row%,col%) = x(0,col%) ^ row%<br/>        NEXT<br/>      NEXT row%<br/>\u00a0<br/>      PROCmultipleregression(y(), x(), c())<br/>      FOR i% = 0 TO DIM(c(),1)\u00a0: PRINT c(i%) \"  \";\u00a0: NEXT<br/>      PRINT<br/>      END<br/>\u00a0<br/>      DEF PROCmultipleregression(y(), x(), c())<br/>      LOCAL m(), t()<br/>      DIM m(DIM(x(),1), DIM(x(),1)), t(DIM(x(),2),DIM(x(),1))<br/>      PROC_transpose(x(), t())<br/>      m() = x().t()<br/>      PROC_invert(m())<br/>      t() = t().m()<br/>      c() = y().t()<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 44, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;gsl/gsl_matrix.h&gt;</span><br/><span class=\"co2\">#include &lt;gsl/gsl_math.h&gt;</span><br/><span class=\"co2\">#include &lt;gsl/gsl_multifit.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> w<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\t<span class=\"nu16\">52.21</span><span class=\"sy0\">,</span> <span class=\"nu16\">53.12</span><span class=\"sy0\">,</span> <span class=\"nu16\">54.48</span><span class=\"sy0\">,</span> <span class=\"nu16\">55.84</span><span class=\"sy0\">,</span> <span class=\"nu16\">57.20</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu16\">58.57</span><span class=\"sy0\">,</span> <span class=\"nu16\">59.93</span><span class=\"sy0\">,</span> <span class=\"nu16\">61.29</span><span class=\"sy0\">,</span> <span class=\"nu16\">63.11</span><span class=\"sy0\">,</span> <span class=\"nu16\">64.47</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu16\">66.28</span><span class=\"sy0\">,</span> <span class=\"nu16\">68.10</span><span class=\"sy0\">,</span> <span class=\"nu16\">69.92</span><span class=\"sy0\">,</span> <span class=\"nu16\">72.19</span><span class=\"sy0\">,</span> <span class=\"nu16\">74.46</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">double</span> h<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\t<span class=\"nu16\">1.47</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.50</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.52</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.55</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.57</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu16\">1.60</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.63</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.65</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.68</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.70</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu16\">1.73</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.75</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.78</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.80</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.83</span>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_matrix <span class=\"sy0\">*</span>X <span class=\"sy0\">=</span> gsl_matrix_calloc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector <span class=\"sy0\">*</span>Y <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector <span class=\"sy0\">*</span>beta <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tgsl_vector_set<span class=\"br0\">(</span>Y<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> w<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tgsl_matrix_set<span class=\"br0\">(</span>X<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tgsl_matrix_set<span class=\"br0\">(</span>X<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> h<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tgsl_matrix_set<span class=\"br0\">(</span>X<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> h<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> h<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> chisq<span class=\"sy0\">;</span><br/>\tgsl_matrix <span class=\"sy0\">*</span>cov <span class=\"sy0\">=</span> gsl_matrix_alloc<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_multifit_linear_workspace <span class=\"sy0\">*</span> wspc <span class=\"sy0\">=</span> gsl_multifit_linear_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_multifit_linear<span class=\"br0\">(</span>X<span class=\"sy0\">,</span> Y<span class=\"sy0\">,</span> beta<span class=\"sy0\">,</span> cov<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>chisq<span class=\"sy0\">,</span> wspc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Beta:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%g\"</span><span class=\"sy0\">,</span> gsl_vector_get<span class=\"br0\">(</span>beta<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tgsl_matrix_free<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_matrix_free<span class=\"br0\">(</span>cov<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector_free<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector_free<span class=\"br0\">(</span>beta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_multifit_linear_free<span class=\"br0\">(</span>wspc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">MathNet.Numerics.LinearRegression</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">MathNet.Numerics.LinearAlgebra</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">MathNet.Numerics.LinearAlgebra.Double</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> col <span class=\"sy0\">=</span> DenseVector<span class=\"sy0\">.</span><span class=\"me1\">OfArray</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1.47</span>, <span class=\"nu0\">1.50</span>, <span class=\"nu0\">1.52</span>, <span class=\"nu0\">1.55</span>, <span class=\"nu0\">1.57</span>, <span class=\"nu0\">1.60</span>, <span class=\"nu0\">1.63</span>, <span class=\"nu0\">1.65</span>,<br/>            <span class=\"nu0\">1.68</span>, <span class=\"nu0\">1.70</span>, <span class=\"nu0\">1.73</span>, <span class=\"nu0\">1.75</span>, <span class=\"nu0\">1.78</span>, <span class=\"nu0\">1.80</span>, <span class=\"nu0\">1.83</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> X <span class=\"sy0\">=</span> DenseMatrix<span class=\"sy0\">.</span><span class=\"me1\">OfColumns</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Vector<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> col<span class=\"sy0\">.</span><span class=\"me1\">PointwisePower</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, col, col<span class=\"sy0\">.</span><span class=\"me1\">PointwisePower</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> DenseVector<span class=\"sy0\">.</span><span class=\"me1\">OfArray</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">52.21</span>, <span class=\"nu0\">53.12</span>, <span class=\"nu0\">54.48</span>, <span class=\"nu0\">55.84</span>, <span class=\"nu0\">57.20</span>, <span class=\"nu0\">58.57</span>, <span class=\"nu0\">59.93</span>,<br/>            <span class=\"nu0\">61.29</span>, <span class=\"nu0\">63.11</span>, <span class=\"nu0\">64.47</span>, <span class=\"nu0\">66.28</span>, <span class=\"nu0\">68.10</span>, <span class=\"nu0\">69.92</span>, <span class=\"nu0\">72.19</span>, <span class=\"nu0\">74.46</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> \u03b2 <span class=\"sy0\">=</span> MultipleRegression<span class=\"sy0\">.</span><span class=\"me1\">QR</span><span class=\"br0\">(</span>X, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>\u03b2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 35, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; Solve a linear system AX=B where A is symmetric and positive definite, so it can be Cholesky decomposed.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> linsys <span class=\"br0\">(</span>A B<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">car</span>  <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"br0\">(</span>array-dimensions B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>y <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> n        <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'long-<span class=\"kw1\">float</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0L0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>X <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>n <span class=\"sy0\">,</span>m<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'long-<span class=\"kw1\">float</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0L0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">L</span> <span class=\"br0\">(</span>chol A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; A=LL'</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for col from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- m <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>       <span class=\"co1\">;; Forward substitution: y = L\\B</span><br/>       <span class=\"br0\">(</span>loop for k from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>             <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> y k<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">aref</span> B k col<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- k <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                  sum <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k j<span class=\"br0\">)</span><br/>                                         <span class=\"br0\">(</span><span class=\"kw1\">aref</span> y j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"co1\">;; Back substitution. x=L'\\y</span><br/>       <span class=\"br0\">(</span>loop for k from <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> downto <span class=\"nu0\">0</span><br/>             <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> X k col<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">aref</span> y k<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>loop for j from <span class=\"br0\">(</span>+ k <span class=\"nu0\">1</span><span class=\"br0\">)</span> to <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                  sum <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> j k<span class=\"br0\">)</span><br/>                                         <span class=\"br0\">(</span><span class=\"kw1\">aref</span> X j col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">L</span> k k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    X<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Solve a linear least squares problem. Ax=b, with A being mxn, with m&gt;n.</span><br/><span class=\"co1\">;; Solves the linear system A'Ax=A'b.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> lsqr <span class=\"br0\">(</span>A b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>linsys <span class=\"br0\">(</span>mmul <span class=\"br0\">(</span>mtp A<span class=\"br0\">)</span> A<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>mmul <span class=\"br0\">(</span>mtp A<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(setq X1 '[0 1 2 3 4 5 6 7 8 9 10])<br/>(setq X2 '[0 1 1 3 3 7 6 7 3 9 8])<br/>(setq Y '[1 6 17 34 57 86 121 162 209 262 321])<br/>(calc-eval<br/> (format \"fit(a*X1+b*X2+c,[X1,X2],[a,b,c],[%s\u00a0%s\u00a0%s])\" X1 X2 Y))<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 82, "block": "<pre class=\"text highlighted_source\">PROGRAM MULTIPLE_REGRESSION<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>CONST N=14,M=2,Q=3\u00a0! number of points and M.R. polynom degree<br/>\u00a0<br/>DIM X[N],Y[N]     \u00a0! data points<br/>DIM S[N],T[N]     \u00a0! linear system coefficient<br/>DIM A[M,Q]        \u00a0! sistem to be solved<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>   DATA(1.47,1.50,1.52,1.55,1.57,1.60,1.63,1.65,1.68,1.70,1.73,1.75,1.78,1.80,1.83)<br/>   DATA(52.21,53.12,54.48,55.84,57.20,58.57,59.93,61.29,63.11,64.47,66.28,68.10,69.92,72.19,74.46)<br/>\u00a0<br/>   FOR I%=0 TO N DO<br/>     READ(X[I%])<br/>   END FOR<br/>\u00a0<br/>   FOR I%=0 TO N DO<br/>     READ(Y[I%])<br/>   END FOR<br/>\u00a0<br/>   FOR K%=0 TO 2*M DO<br/>      S[K%]=0  T[K%]=0<br/>      FOR I%=0 TO N DO<br/>         S[K%]=S[K%]+X[I%]^K%<br/>         IF K%&lt;=M THEN T[K%]=T[K%]+Y[I%]*X[I%]^K% END IF<br/>      END FOR<br/>   END FOR<br/>\u00a0<br/>! build linear system<br/>\u00a0<br/>   FOR ROW%=0 TO M DO<br/>     FOR COL%=0 TO M DO<br/>       A[ROW%,COL%]=S[ROW%+COL%]<br/>     END FOR<br/>     A[ROW%,COL%]=T[ROW%]<br/>   END FOR<br/>\u00a0<br/>   PRINT(\"LINEAR SYSTEM COEFFICENTS\") PRINT<br/>   FOR I%=0 TO M DO<br/>     FOR J%=0 TO M+1 DO<br/>        WRITE(\" ######.#\";A[I%,J%];)<br/>     END FOR<br/>     PRINT<br/>   END FOR<br/>   PRINT<br/>\u00a0<br/>   FOR J%=0 TO M DO<br/>         FOR I%=J% TO M DO<br/>              EXIT IF A[I%,J%]&lt;&gt;0<br/>         END FOR<br/>         IF I%=M+1 THEN<br/>             PRINT(\"SINGULAR MATRIX\u00a0!\")<br/>            \u00a0!$STOP<br/>         END IF<br/>         FOR K%=0 TO M+1 DO<br/>             SWAP(A[J%,K%],A[I%,K%])<br/>         END FOR<br/>         Y=1/A[J%,J%]<br/>         FOR K%=0 TO M+1 DO<br/>             A[J%,K%]=Y*A[J%,K%]<br/>         END FOR<br/>         FOR I%=0 TO M DO<br/>             IF I%&lt;&gt;J% THEN<br/>                 Y=-A[I%,J%]<br/>                 FOR K%=0 TO M+1 DO<br/>                    A[I%,K%]=A[I%,K%]+Y*A[J%,K%]<br/>                 END FOR<br/>             END IF<br/>         END FOR<br/>   END FOR<br/>   PRINT<br/>\u00a0<br/>   PRINT(\"SOLUTIONS\") PRINT<br/>   FOR I%=0 TO M DO<br/>      PRINT(\"c\";I%;\"=\";)<br/>      WRITE(\"#####.#######\";A[I%,M+1])<br/>   END FOR<br/>\u00a0<br/>END PROGRAM</pre>"}, {"lang": "Fortran", "loc": 86, "block": "<pre class=\"fortran highlighted_source\"><span class=\"sy0\">*-----------------------------------------------------------------------</span><br/><span class=\"sy0\">*</span> MR <span class=\"sy0\">-</span> multiple regression using the SLATEC library routine DHFTI<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span> Finds the <span class=\"kw4\">nearest</span> approximation <span class=\"kw1\">to</span> BETA <span class=\"kw3\">in</span> the system of linear equations<span class=\"sy0\">:</span><br/><span class=\"sy0\">*</span>                     <br/><span class=\"sy0\">*</span>              X<span class=\"br0\">(</span>j,i<span class=\"br0\">)</span> . <span class=\"me1\">BETA</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span> <span class=\"kw1\">where</span>   <br/><span class=\"sy0\">*</span>                  <span class=\"nu0\">1</span> ... <span class=\"me1\">j</span> ... <span class=\"me1\">N</span>  <br/><span class=\"sy0\">*</span>                  <span class=\"nu0\">1</span> ... <span class=\"me1\">i</span> ... <span class=\"me1\">K</span><br/><span class=\"sy0\">*</span> and               <br/><span class=\"sy0\">*</span>                  K <span class=\"kw2\">.<span class=\"me1\">LE</span>.</span> N<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span> INPUT ARRAYS ARE DESTROYED<span class=\"co1\">!</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>___Name___________Type_______________In<span class=\"sy0\">/</span>Out____Description_____________<br/><span class=\"sy0\">*</span>   X<span class=\"br0\">(</span>N,K<span class=\"br0\">)</span>         <span class=\"kw3\">Double</span> <span class=\"kw4\">precision</span>   <span class=\"kw3\">In</span>        Predictors<br/><span class=\"sy0\">*</span>   Y<span class=\"br0\">(</span>N<span class=\"br0\">)</span>           <span class=\"kw3\">Double</span> <span class=\"kw4\">precision</span>   Both      On input<span class=\"sy0\">:</span>   N Observations<br/><span class=\"sy0\">*</span>                                               On output<span class=\"sy0\">:</span>  K beta weights<br/><span class=\"sy0\">*</span>   N              <span class=\"kw3\">Integer</span>            <span class=\"kw3\">In</span>        <span class=\"kw1\">Number</span> of observations<br/><span class=\"sy0\">*</span>   K              <span class=\"kw3\">Integer</span>            <span class=\"kw3\">In</span>        <span class=\"kw1\">Number</span> of predictor variables<br/><span class=\"sy0\">*</span>   DWORK<span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>K<span class=\"br0\">)</span>   <span class=\"kw3\">Double</span> <span class=\"kw4\">precision</span>   Neither   Workspace<br/><span class=\"sy0\">*</span>   IWORK<span class=\"br0\">(</span>K<span class=\"br0\">)</span>       <span class=\"kw3\">Integer</span>            Neither   Workspace<br/><span class=\"sy0\">*-----------------------------------------------------------------------</span><br/>      <span class=\"kw1\">SUBROUTINE</span> MR <span class=\"br0\">(</span>X, Y, N, K, DWORK, IWORK<span class=\"br0\">)</span><br/>       <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>       <span class=\"kw3\">INTEGER</span> K, N, IWORK<br/>       <span class=\"kw3\">DOUBLE</span> <span class=\"kw4\">PRECISION</span> X, Y, DWORK<br/>       <span class=\"kw3\">DIMENSION</span> X<span class=\"br0\">(</span>N,K<span class=\"br0\">)</span>, Y<span class=\"br0\">(</span>N<span class=\"br0\">)</span>, DWORK<span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>K<span class=\"br0\">)</span>, IWORK<span class=\"br0\">(</span>K<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">*</span>         local variables<br/>       <span class=\"kw3\">INTEGER</span> I, J<br/>       <span class=\"kw3\">DOUBLE</span> <span class=\"kw4\">PRECISION</span> TAU, TOT<br/>\u00a0<br/><span class=\"sy0\">*</span>        maximum of <span class=\"kw4\">all</span> column sums of magnitudes<br/>       TAU <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>.<br/>       <span class=\"kw1\">DO</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, K<br/>         TOT <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>.<br/>         <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, N<br/>           TOT <span class=\"sy0\">=</span> TOT <span class=\"sy0\">+</span> <span class=\"kw4\">ABS</span><span class=\"br0\">(</span>X<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TOT &gt; TAU<span class=\"br0\">)</span> TAU <span class=\"sy0\">=</span> TOT<br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>       TAU <span class=\"sy0\">=</span> TAU <span class=\"sy0\">*</span> <span class=\"kw4\">EPSILON</span><span class=\"br0\">(</span>TAU<span class=\"br0\">)</span>        <span class=\"co1\">! tolerance argument</span><br/>\u00a0<br/><span class=\"sy0\">*</span>            <span class=\"kw1\">call</span> <span class=\"kw1\">function</span><br/>       <span class=\"kw1\">CALL</span> DHFTI <span class=\"br0\">(</span>X, N, N, K, Y, N, <span class=\"nu0\">1</span>, TAU, <br/>     $  J, DWORK<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, DWORK<span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, DWORK<span class=\"br0\">(</span>N<span class=\"sy0\">+</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, IWORK<span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>J &lt; K<span class=\"br0\">)</span> PRINT <span class=\"sy0\">*</span>, <span class=\"st0\">'mr: solution is rank deficient!'</span><br/>       <span class=\"kw1\">RETURN</span><br/>      <span class=\"kw1\">END</span>  <span class=\"co1\">! of MR</span><br/>\u00a0<br/><span class=\"sy0\">*-----------------------------------------------------------------------</span><br/>      <span class=\"kw1\">PROGRAM</span> t_mr        <span class=\"co1\">! polynomial regression example</span><br/>       <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>       <span class=\"kw3\">INTEGER</span> N, K<br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>N<span class=\"sy0\">=</span><span class=\"nu0\">15</span>, K<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">INTEGER</span> IWORK<span class=\"br0\">(</span>K<span class=\"br0\">)</span>, I, J<br/>       <span class=\"kw3\">DOUBLE</span> <span class=\"kw4\">PRECISION</span> XIN<span class=\"br0\">(</span>N<span class=\"br0\">)</span>, X<span class=\"br0\">(</span>N,K<span class=\"br0\">)</span>, Y<span class=\"br0\">(</span>N<span class=\"br0\">)</span>, DWORK<span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>K<span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> XIN <span class=\"sy0\">/</span> <span class=\"nu0\">1.47</span>, <span class=\"nu0\">1.50</span>, <span class=\"nu0\">1.52</span>, <span class=\"nu0\">1.55</span>, <span class=\"nu0\">1.57</span>, <span class=\"nu0\">1.60</span>, <span class=\"nu0\">1.63</span>, <span class=\"nu0\">1.65</span>, <span class=\"nu0\">1.68</span>, <br/>     $            <span class=\"nu0\">1.70</span>, <span class=\"nu0\">1.73</span>, <span class=\"nu0\">1.75</span>, <span class=\"nu0\">1.78</span>, <span class=\"nu0\">1.80</span>, <span class=\"nu0\">1.83</span> <span class=\"sy0\">/</span><br/>       <span class=\"kw3\">DATA</span> Y <span class=\"sy0\">/</span> <span class=\"nu0\">52.21</span>, <span class=\"nu0\">53.12</span>, <span class=\"nu0\">54.48</span>, <span class=\"nu0\">55.84</span>, <span class=\"nu0\">57.20</span>, <span class=\"nu0\">58.57</span>, <span class=\"nu0\">59.93</span>, <span class=\"nu0\">61.29</span>,<br/>     $          <span class=\"nu0\">63.11</span>, <span class=\"nu0\">64.47</span>, <span class=\"nu0\">66.28</span>, <span class=\"nu0\">68.10</span>, <span class=\"nu0\">69.92</span>, <span class=\"nu0\">72.19</span>, <span class=\"nu0\">74.46</span> <span class=\"sy0\">/</span><br/>\u00a0<br/><span class=\"sy0\">*</span>              make coefficient matrix<br/>       <span class=\"kw1\">DO</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, K<br/>         <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, N<br/>           X<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span> <span class=\"sy0\">=</span> XIN<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">**</span><span class=\"br0\">(</span>J<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"sy0\">*</span>               solve<br/>       <span class=\"kw1\">CALL</span> MR <span class=\"br0\">(</span>X, Y, N, K, DWORK, IWORK<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">*</span>               print <span class=\"kw3\">result</span><br/>  <span class=\"nu0\">10</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">'beta: '</span>, $<span class=\"br0\">)</span><br/>  <span class=\"nu0\">20</span>   FORMAT <span class=\"br0\">(</span>F12.4, $<span class=\"br0\">)</span><br/>  <span class=\"nu0\">30</span>   FORMAT <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       PRINT <span class=\"nu0\">10</span><br/>       <span class=\"kw1\">DO</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, K<br/>         PRINT <span class=\"nu0\">20</span>, Y<span class=\"br0\">(</span>J<span class=\"br0\">)</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>       <br/>       PRINT <span class=\"nu0\">30</span><br/>       <span class=\"kw1\">STOP</span> <span class=\"st0\">'program complete'</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"github.com/gonum/matrix/mat64\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> givens<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy3\">*</span>mat64<span class=\"sy3\">.</span>Dense<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    height <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">47</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">52</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">55</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">57</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">60</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">63</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">65</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">68</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">70</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">73</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">75</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">78</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">80</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">83</span><span class=\"sy1\">}</span><br/>    weight <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">52</span><span class=\"sy3\">.</span><span class=\"nu0\">21</span><span class=\"sy1\">,</span> <span class=\"nu0\">53</span><span class=\"sy3\">.</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">54</span><span class=\"sy3\">.</span><span class=\"nu0\">48</span><span class=\"sy1\">,</span> <span class=\"nu0\">55</span><span class=\"sy3\">.</span><span class=\"nu0\">84</span><span class=\"sy1\">,</span> <span class=\"nu0\">57</span><span class=\"sy3\">.</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">58</span><span class=\"sy3\">.</span><span class=\"nu0\">57</span><span class=\"sy1\">,</span> <span class=\"nu0\">59</span><span class=\"sy3\">.</span><span class=\"nu0\">93</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">61</span><span class=\"sy3\">.</span><span class=\"nu0\">29</span><span class=\"sy1\">,</span> <span class=\"nu0\">63</span><span class=\"sy3\">.</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy3\">.</span><span class=\"nu0\">47</span><span class=\"sy1\">,</span> <span class=\"nu0\">66</span><span class=\"sy3\">.</span><span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"nu0\">68</span><span class=\"sy3\">.</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">69</span><span class=\"sy3\">.</span><span class=\"nu0\">92</span><span class=\"sy1\">,</span> <span class=\"nu0\">72</span><span class=\"sy3\">.</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span> <span class=\"nu0\">74</span><span class=\"sy3\">.</span><span class=\"nu0\">46</span><span class=\"sy1\">}</span><br/>    degree <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><br/>    x <span class=\"sy2\">=</span> Vandermonde<span class=\"sy1\">(</span>height<span class=\"sy1\">,</span> degree<span class=\"sy1\">)</span><br/>    y <span class=\"sy2\">=</span> mat64<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>weight<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> weight<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Vandermonde<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> degree <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>mat64<span class=\"sy3\">.</span>Dense <span class=\"sy1\">{</span><br/>    x <span class=\"sy2\">:=</span> mat64<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">),</span> degree<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> degree<span class=\"sy1\">;</span> j<span class=\"sy1\">,</span> p <span class=\"sy2\">=</span> j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> p<span class=\"sy3\">*</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            x<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y <span class=\"sy2\">:=</span> givens<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%.4f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> mat64<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>mat64<span class=\"sy3\">.</span>QR<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Solve<span class=\"sy1\">(</span>y<span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><span class=\"sy0\">.</span>LinearAlgebra<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><span class=\"sy0\">.</span>LinearAlgebra<span class=\"sy0\">.</span>LAPACK<br/>\u00a0<br/>m <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>m <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">&gt;&lt;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <br/>  <span class=\"br0\">[</span><span class=\"nu0\">7.589183</span><span class=\"sy0\">,</span><span class=\"nu0\">1.703609</span><span class=\"sy0\">,-</span><span class=\"nu0\">4.477162</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">-</span><span class=\"nu0\">4.597851</span><span class=\"sy0\">,</span><span class=\"nu0\">9.434889</span><span class=\"sy0\">,-</span><span class=\"nu0\">6.543450</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">0.4588202</span><span class=\"sy0\">,-</span><span class=\"nu0\">6.115153</span><span class=\"sy0\">,</span><span class=\"nu0\">1.331191</span><span class=\"br0\">]</span><br/>\u00a0<br/>v <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>v <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">&gt;&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1.745005</span><span class=\"sy0\">,-</span><span class=\"nu0\">4.448092</span><span class=\"sy0\">,-</span><span class=\"nu0\">4.160842</span><span class=\"br0\">]</span></pre>"}, {"lang": "Hy", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>import<br/>  <span class=\"br0\">[</span>numpy <span class=\"br0\">[</span>ones column-stack<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>numpy<span class=\"sy0\">.</span><span class=\"kw1\">random</span> <span class=\"br0\">[</span>randn<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>numpy<span class=\"sy0\">.</span>linalg <span class=\"br0\">[</span>lstsq<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>setv n <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>setv x1 <span class=\"br0\">(</span>randn n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>setv x2 <span class=\"br0\">(</span>randn n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>setv y <span class=\"br0\">(</span>+ <span class=\"nu0\">3</span> <span class=\"br0\">(</span>* <span class=\"nu0\">1</span> x1<span class=\"br0\">)</span> <span class=\"br0\">(</span>* -<span class=\"nu0\">2</span> x2<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"sy0\">.</span>25 x1 x2<span class=\"br0\">)</span> <span class=\"br0\">(</span>randn n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>lstsq<br/>  <span class=\"br0\">(</span>column-stack <span class=\"br0\">(</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ones n<span class=\"br0\">)</span> x1 x2 <span class=\"br0\">(</span>* x1 x2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   <span class=\"co1\">NB. Wikipedia data</span><br/>   <span class=\"kw2\">x</span>=: <span class=\"nu0\">1.47</span> <span class=\"nu0\">1.50</span> <span class=\"nu0\">1.52</span> <span class=\"nu0\">1.55</span> <span class=\"nu0\">1.57</span> <span class=\"nu0\">1.60</span> <span class=\"nu0\">1.63</span> <span class=\"nu0\">1.65</span> <span class=\"nu0\">1.68</span> <span class=\"nu0\">1.70</span> <span class=\"nu0\">1.73</span> <span class=\"nu0\">1.75</span> <span class=\"nu0\">1.78</span> <span class=\"nu0\">1.80</span> <span class=\"nu0\">1.83</span><br/>   <span class=\"kw2\">y</span>=: <span class=\"nu0\">52.21</span> <span class=\"nu0\">53.12</span> <span class=\"nu0\">54.48</span> <span class=\"nu0\">55.84</span> <span class=\"nu0\">57.20</span> <span class=\"nu0\">58.57</span> <span class=\"nu0\">59.93</span> <span class=\"nu0\">61.29</span> <span class=\"nu0\">63.11</span> <span class=\"nu0\">64.47</span> <span class=\"nu0\">66.28</span> <span class=\"nu0\">68.10</span> <span class=\"nu0\">69.92</span> <span class=\"nu0\">72.19</span> <span class=\"nu0\">74.46</span><br/>\u00a0<br/>   <span class=\"kw2\">y</span>\u00a0%. <span class=\"kw2\">x</span> ^/ i.<span class=\"nu0\">3</span>   <span class=\"co1\">NB. calculate coefficients b1, b2 and b3 for 2nd degree polynomial</span><br/><span class=\"nu0\">128.813</span> <span class=\"nu0\">_143.162</span> <span class=\"nu0\">61.9603</span></pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">x = [1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63, 1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83]<br/>y = [52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46]<br/>X = [x.^0 x.^1 x.^2];<br/>b = X \\ y</pre>"}, {"lang": "JavaScript", "loc": 47, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// modifies the matrix \"in place\"</span><br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">inverse</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">throw</span> <span class=\"st0\">\"can't invert a non-square matrix\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>   <br/>\u00a0<br/>    <span class=\"kw1\">var</span> I <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> IdentityMatrix<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>I.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">toReducedRowEchelonForm</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">splice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ColumnVector<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span>ary.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>ColumnVector.<span class=\"kw1\">prototype</span> <span class=\"sy0\">=</span> Matrix.<span class=\"kw1\">prototype</span><br/>\u00a0<br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">regression_coefficients</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> x_t <span class=\"sy0\">=</span> x.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> x_t.<span class=\"me1\">mult</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">mult</span><span class=\"br0\">(</span>x_t<span class=\"br0\">)</span>.<span class=\"me1\">mult</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// the Ruby example</span><br/><span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ColumnVector<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ColumnVector<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>y.<span class=\"me1\">regression_coefficients</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// the Tcl example</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ColumnVector<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>    <span class=\"nu0\">52.21</span><span class=\"sy0\">,</span> <span class=\"nu0\">53.12</span><span class=\"sy0\">,</span> <span class=\"nu0\">54.48</span><span class=\"sy0\">,</span> <span class=\"nu0\">55.84</span><span class=\"sy0\">,</span> <span class=\"nu0\">57.20</span><span class=\"sy0\">,</span> <span class=\"nu0\">58.57</span><span class=\"sy0\">,</span> <span class=\"nu0\">59.93</span><span class=\"sy0\">,</span> <span class=\"nu0\">61.29</span><span class=\"sy0\">,</span> <br/>    <span class=\"nu0\">63.11</span><span class=\"sy0\">,</span> <span class=\"nu0\">64.47</span><span class=\"sy0\">,</span> <span class=\"nu0\">66.28</span><span class=\"sy0\">,</span> <span class=\"nu0\">68.10</span><span class=\"sy0\">,</span> <span class=\"nu0\">69.92</span><span class=\"sy0\">,</span> <span class=\"nu0\">72.19</span><span class=\"sy0\">,</span> <span class=\"nu0\">74.46</span><br/><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>x <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1.47</span><span class=\"sy0\">,</span><span class=\"nu0\">1.50</span><span class=\"sy0\">,</span><span class=\"nu0\">1.52</span><span class=\"sy0\">,</span><span class=\"nu0\">1.55</span><span class=\"sy0\">,</span><span class=\"nu0\">1.57</span><span class=\"sy0\">,</span><span class=\"nu0\">1.60</span><span class=\"sy0\">,</span><span class=\"nu0\">1.63</span><span class=\"sy0\">,</span><span class=\"nu0\">1.65</span><span class=\"sy0\">,</span><span class=\"nu0\">1.68</span><span class=\"sy0\">,</span><span class=\"nu0\">1.70</span><span class=\"sy0\">,</span><span class=\"nu0\">1.73</span><span class=\"sy0\">,</span><span class=\"nu0\">1.75</span><span class=\"sy0\">,</span><span class=\"nu0\">1.78</span><span class=\"sy0\">,</span><span class=\"nu0\">1.80</span><span class=\"sy0\">,</span><span class=\"nu0\">1.83</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>        <span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>y.<span class=\"me1\">regression_coefficients</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Kotlin", "loc": 121, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.31</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> DoubleArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>operator fun Matrix.<span class=\"me1\">times</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows2 <span class=\"sy0\">=</span> other.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols2 <span class=\"sy0\">=</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span>cols1 <span class=\"sy0\">==</span> rows2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>cols2<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until cols2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until rows2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trans <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>cols<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until rows<span class=\"br0\">)</span> trans<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> trans<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">all</span> <span class=\"br0\">{</span> it.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> len <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Not a square matrix\"</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> aug <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> len<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> aug<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"co1\">// augment by identity matrix to right</span><br/>        aug<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i + len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <span class=\"br0\">}</span><br/>    aug.<span class=\"me1\">toReducedRowEchelonForm</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inv <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span> DoubleArray<span class=\"br0\">(</span>len<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"co1\">// remove identity matrix to left</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in len until <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> len<span class=\"br0\">)</span> inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j - len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> aug<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> inv<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">toReducedRowEchelonForm</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lead <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rowCount <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colCount <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until rowCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>colCount <span class=\"sy0\">&lt;=</span> lead<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> r<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>lead<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rowCount <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                i <span class=\"sy0\">=</span> r<br/>                lead++<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>colCount <span class=\"sy0\">==</span> lead<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>lead<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> div <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>lead<span class=\"br0\">]</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until colCount<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> /<span class=\"sy0\">=</span> div<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until rowCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">!=</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mult <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>lead<span class=\"br0\">]</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until colCount<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> -<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mult<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        lead++<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printVector<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Vector<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>v.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun multipleRegression<span class=\"br0\">(</span>y<span class=\"sy0\">:</span> Vector, x<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Vector <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arrayOf<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// convert 'y' to column vector</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cx <span class=\"sy0\">=</span> x.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\">// convert 'x' to column vector array</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> cx<span class=\"br0\">)</span>.<span class=\"me1\">inverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> cy<span class=\"br0\">)</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">3.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v <span class=\"sy0\">=</span> multipleRegression<span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><br/>    printVector<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>\u00a0<br/>    y <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><br/>    x <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    v <span class=\"sy0\">=</span> multipleRegression<span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><br/>    printVector<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>\u00a0<br/>    y <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">52.21</span>, <span class=\"nu0\">53.12</span>, <span class=\"nu0\">54.48</span>, <span class=\"nu0\">55.84</span>, <span class=\"nu0\">57.20</span>, <span class=\"nu0\">58.57</span>, <span class=\"nu0\">59.93</span>, <span class=\"nu0\">61.29</span>,<br/>                      <span class=\"nu0\">63.11</span>, <span class=\"nu0\">64.47</span>, <span class=\"nu0\">66.28</span>, <span class=\"nu0\">68.10</span>, <span class=\"nu0\">69.92</span>, <span class=\"nu0\">72.19</span>, <span class=\"nu0\">74.46</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.47</span>, <span class=\"nu0\">1.50</span>, <span class=\"nu0\">1.52</span>, <span class=\"nu0\">1.55</span>, <span class=\"nu0\">1.57</span>, <span class=\"nu0\">1.60</span>, <span class=\"nu0\">1.63</span>, <span class=\"nu0\">1.65</span>, <span class=\"nu0\">1.68</span>, <span class=\"nu0\">1.70</span>,<br/>                          <span class=\"nu0\">1.73</span>, <span class=\"nu0\">1.75</span>, <span class=\"nu0\">1.78</span>, <span class=\"nu0\">1.80</span>, <span class=\"nu0\">1.83</span><span class=\"br0\">)</span><br/>    x <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>DoubleArray<span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">}</span>, a, a.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">toDoubleArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    v <span class=\"sy0\">=</span> multipleRegression<span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><br/>    printVector<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">x = {1.47, 1.50 , 1.52, 1.55, 1.57, 1.60, 1.63, 1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83};<br/>y = {52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46};<br/>X = {x^0, x^1, x^2};<br/>b = y.PseudoInverse[X]<br/>\u00a0<br/>-&gt;{128.813, -143.162, 61.9603}</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">  n=<span class=\"nu0\">100</span>; k=<span class=\"nu0\">10</span>; <br/>  y = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randn.html\"><span class=\"kw2\">randn</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>,n<span class=\"br0\">)</span>;  <span class=\"co1\">% generate random vector y</span><br/>  X = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randn.html\"><span class=\"kw2\">randn</span></a> <span class=\"br0\">(</span>k,n<span class=\"br0\">)</span>;  <span class=\"co1\">% generate random matrix X</span><br/>  b = y / X<br/>  b = <span class=\"nu0\">0.1457109</span>  -<span class=\"nu0\">0.0777564</span>  -<span class=\"nu0\">0.0712427</span>  -<span class=\"nu0\">0.0166193</span>   <span class=\"nu0\">0.0292955</span>  -<span class=\"nu0\">0.0079111</span>   <span class=\"nu0\">0.2265894</span>  -<span class=\"nu0\">0.0561589</span>  -<span class=\"nu0\">0.1752146</span>  -<span class=\"nu0\">0.2577663</span> </pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">pseudoinv<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>sz<span class=\"sy0\">=</span><span class=\"kw1\">matsize</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">,</span>T<span class=\"sy0\">=</span><span class=\"kw1\">conj</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"br0\">)</span>~<span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>sz<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>sz<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>T<span class=\"sy0\">/</span><span class=\"br0\">(</span>M<span class=\"sy0\">*</span>T<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>T<span class=\"sy0\">*</span>M<span class=\"br0\">)</span><span class=\"sy0\">^-</span><span class=\"nu1\">1</span><span class=\"sy0\">*</span>T<span class=\"br0\">)</span><br/><span class=\"kw1\">addhelp</span><span class=\"br0\">(</span>pseudoinv<span class=\"sy0\">,</span> <span class=\"st0\">\"pseudoinv(M): Moore pseudoinverse of the matrix M.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>y<span class=\"sy0\">*</span>pseudoinv<span class=\"br0\">(</span>X<span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Clifford<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@height</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1.47</span> <span class=\"nu0\">1.50</span> <span class=\"nu0\">1.52</span> <span class=\"nu0\">1.55</span> <span class=\"nu0\">1.57</span> <span class=\"nu0\">1.60</span> <span class=\"nu0\">1.63</span> <span class=\"nu0\">1.65</span> <span class=\"nu0\">1.68</span> <span class=\"nu0\">1.70</span> <span class=\"nu0\">1.73</span> <span class=\"nu0\">1.75</span> <span class=\"nu0\">1.78</span> <span class=\"nu0\">1.80</span> <span class=\"nu0\">1.83</span><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@weight</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">52.21</span> <span class=\"nu0\">53.12</span> <span class=\"nu0\">54.48</span> <span class=\"nu0\">55.84</span> <span class=\"nu0\">57.20</span> <span class=\"nu0\">58.57</span> <span class=\"nu0\">59.93</span> <span class=\"nu0\">61.29</span> <span class=\"nu0\">63.11</span> <span class=\"nu0\">64.47</span> <span class=\"nu0\">66.28</span> <span class=\"nu0\">68.10</span> <span class=\"nu0\">69.92</span> <span class=\"nu0\">72.19</span> <span class=\"nu0\">74.46</span><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@weight</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$h0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@e</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">@weight</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$h1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@height</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$h2</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"re0\">@height</span> <span class=\"kw1\">X</span><span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@e</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h0</span>\u2227<span class=\"re0\">$h1</span>\u2227<span class=\"re0\">$h2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$I2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$I</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Real</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"\u03b1 = \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span>\u2227<span class=\"re0\">$h1</span>\u2227<span class=\"re0\">$h2</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"\u03b2 = \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span>\u2227<span class=\"re0\">$h2</span>\u2227<span class=\"re0\">$h0</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"\u03b3 = \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span>\u2227<span class=\"re0\">$h0</span>\u2227<span class=\"re0\">$h1</span><span class=\"br0\">)</span>\u00b7<span class=\"re0\">$I</span><span class=\"sy0\">.</span><span class=\"me1\">reversion</span><span class=\"sy0\">/</span><span class=\"re0\">$I2</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 54, "block": "<pre class=\"text highlighted_source\">constant N = 15, M=3<br/>sequence x = {1.47,1.50,1.52,1.55,1.57,<br/>              1.60,1.63,1.65,1.68,1.70,<br/>              1.73,1.75,1.78,1.80,1.83},<br/>         y = {52.21,53.12,54.48,55.84,57.20,<br/>              58.57,59.93,61.29,63.11,64.47,<br/>              66.28,68.10,69.92,72.19,74.46},<br/>         s = repeat(0,N),<br/>         t = repeat(0,N),<br/>         a = repeat(repeat(0,M+1),M)<br/>\u00a0<br/>    for k=1 to 2*M do<br/>        for i=1 to N do<br/>            s[k] += power(x[i],k-1)<br/>            if k&lt;=M then t[k] += y[i]*power(x[i],k-1) end if<br/>        end for<br/>    end for<br/>\u00a0<br/>    -- build linear system<br/>\u00a0<br/>    for row=1 to M do<br/>        for col=1 to M do<br/>            a[row,col] = s[row+col-1]<br/>        end for<br/>        a[row,M+1] = t[row]<br/>    end for<br/>\u00a0<br/>    puts(1,\"Linear system coefficents:\\n\")<br/>    pp(a,{pp_Nest,1,pp_IntFmt,\"%7.1f\",pp_FltFmt,\"%7.1f\"})<br/>\u00a0<br/>    for j=1 to M do<br/>        integer i = j<br/>        while a[i,j]=0 do i += 1 end while<br/>        if i=M+1 then<br/>           \u00a0?\"SINGULAR MATRIX\u00a0!\"<br/>           \u00a0?9/0<br/>        end if<br/>        for k=1 to M+1 do<br/>            {a[j,k],a[i,k]} = {a[i,k],a[j,k]}<br/>        end for<br/>        atom Y = 1/a[j,j]<br/>        a[j] = sq_mul(a[j],Y)<br/>        for i=1 to M do<br/>            if i&lt;&gt;j then<br/>                Y=-a[i,j]<br/>                for k=1 to M+1 do<br/>                    a[i,k] += Y*a[j,k]<br/>                end for<br/>            end if<br/>        end for<br/>    end for<br/>\u00a0<br/>    puts(1,\"Solutions:\\n\")<br/>   \u00a0?columnize(a,M+1)[1]</pre>"}, {"lang": "PicoLisp", "loc": 43, "block": "<pre class=\"text highlighted_source\">(scl 20)<br/>\u00a0<br/># Matrix transposition<br/>(de matTrans (Mat)<br/>   (apply mapcar Mat list) )<br/>\u00a0<br/># Matrix multiplication<br/>(de matMul (Mat1 Mat2)<br/>   (mapcar<br/>      '((Row)<br/>         (apply mapcar Mat2<br/>            '(@ (sum */ Row (rest) (1.0 .))) ) )<br/>      Mat1 ) )<br/>\u00a0<br/># Matrix identity<br/>(de matIdent (N)<br/>   (let L (need N (1.0) 0)<br/>      (mapcar '(() (copy (rot L))) L) ) )<br/>\u00a0<br/># Reduced row echelon form<br/>(de reducedRowEchelonForm (Mat)<br/>   (let (Lead 1  Cols (length (car Mat)))<br/>      (for (X Mat X (cdr X))<br/>         (NIL<br/>            (loop<br/>               (T (seek '((R) (n0 (get R 1 Lead))) X)<br/>                  @ )<br/>               (T (&gt; (inc 'Lead) Cols)) ) )<br/>         (xchg @ X)<br/>         (let D (get X 1 Lead)<br/>            (map<br/>               '((R) (set R (*/ (car R) 1.0 D)))<br/>               (car X) ) )<br/>         (for Y Mat<br/>            (unless (== Y (car X))<br/>               (let N (- (get Y Lead))<br/>                  (map<br/>                     '((Dst Src)<br/>                        (inc Dst (*/ N (car Src) 1.0)) )<br/>                     Y<br/>                     (car X) ) ) ) )<br/>         (T (&gt; (inc 'Lead) Cols)) ) )<br/>   Mat )</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> numpy <span class=\"kw1\">as</span> np<br/>\u00a0<br/>height <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1.47</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.50</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.52</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.55</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.57</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.60</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.63</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">1.65</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.68</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.70</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.73</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.75</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.78</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.80</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.83</span><span class=\"br0\">]</span><br/>weight <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">52.21</span><span class=\"sy0\">,</span> <span class=\"nu0\">53.12</span><span class=\"sy0\">,</span> <span class=\"nu0\">54.48</span><span class=\"sy0\">,</span> <span class=\"nu0\">55.84</span><span class=\"sy0\">,</span> <span class=\"nu0\">57.20</span><span class=\"sy0\">,</span> <span class=\"nu0\">58.57</span><span class=\"sy0\">,</span> <span class=\"nu0\">59.93</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">61.29</span><span class=\"sy0\">,</span> <span class=\"nu0\">63.11</span><span class=\"sy0\">,</span> <span class=\"nu0\">64.47</span><span class=\"sy0\">,</span> <span class=\"nu0\">66.28</span><span class=\"sy0\">,</span> <span class=\"nu0\">68.10</span><span class=\"sy0\">,</span> <span class=\"nu0\">69.92</span><span class=\"sy0\">,</span> <span class=\"nu0\">72.19</span><span class=\"sy0\">,</span> <span class=\"nu0\">74.46</span><span class=\"br0\">]</span><br/>\u00a0<br/>X <span class=\"sy0\">=</span> np.<span class=\"me1\">mat</span><span class=\"br0\">(</span>height**np.<span class=\"me1\">arange</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">[</span>:<span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>y <span class=\"sy0\">=</span> np.<span class=\"me1\">mat</span><span class=\"br0\">(</span>weight<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>y * X.<span class=\"me1\">T</span> * <span class=\"br0\">(</span>X*X.<span class=\"me1\">T</span><span class=\"br0\">)</span>.<span class=\"me1\">I</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">## Wikipedia Data<br/>x &lt;- c(1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63, 1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83)<br/>}<br/>y &lt;- c(52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46)<br/>\u00a0<br/>lm( y ~ x + I(x^2))</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define T matrix-transpose)<br/>\u00a0<br/>(define (fit X y)<br/>  (matrix-solve (matrix* (T X) X) (matrix* (T X) y)))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> regression_coefficients y, x<br/>  y = <span class=\"kw4\">Matrix</span>.<span class=\"me1\">column_vector</span> y.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> i.<span class=\"me1\">to_f</span> <span class=\"br0\">}</span><br/>  x = <span class=\"kw4\">Matrix</span>.<span class=\"me1\">columns</span> x.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>xi<span class=\"sy0\">|</span> xi.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> i.<span class=\"me1\">to_f</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>x.<span class=\"me1\">t</span> <span class=\"sy0\">*</span> x<span class=\"br0\">)</span>.<span class=\"me1\">inverse</span> <span class=\"sy0\">*</span> x.<span class=\"me1\">t</span> <span class=\"sy0\">*</span> y<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Stata", "loc": 7, "block": "<pre class=\"text highlighted_source\">clear<br/>set seed 17760704<br/>set obs 200<br/>forv i=1/4 {<br/>\tgen x`i'=rnormal()<br/>}<br/>gen y=1.5+0.8*x1-0.7*x2+1.1*x3-1.7*x4+rnormal()</pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">linearalgebra</span><br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> multipleRegression <span class=\"br0\">{</span><br/>    <span class=\"kw1\">namespace</span> export regressionCoefficients<br/>    <span class=\"kw1\">namespace</span> import\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"sy0\">*</span><br/>\u00a0<br/>    <span class=\"co1\"># Matrix inversion is defined in terms of Gaussian elimination</span><br/>    <span class=\"co1\"># Note that we assume (correctly) that we have a square matrix</span><br/>    <span class=\"kw1\">proc</span> invert <span class=\"br0\">{</span>matrix<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tsolveGauss <span class=\"re0\">$matrix</span> <span class=\"br0\">[</span>mkIdentity <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span>shape <span class=\"re0\">$matrix</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Implement the Ordinary Least Squares method</span><br/>    <span class=\"kw1\">proc</span> regressionCoefficients <span class=\"br0\">{</span>y x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tmatmul <span class=\"br0\">[</span>matmul <span class=\"br0\">[</span>invert <span class=\"br0\">[</span>matmul <span class=\"re0\">$x</span> <span class=\"br0\">[</span>transpose <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">namespace</span> import multipleRegression::<span class=\"me1\">regressionCoefficients</span></pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">regression_coefficients = lapack..dgelsd</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>height:=GSL.VectorFromData(1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63,<br/>\t\t   1.65, 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83);<br/>weight:=GSL.VectorFromData(52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93,<br/>\t\t   61.29, 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46);<br/>v:=GSL.polyFit(height,weight,2);<br/>v.format().println();<br/>GSL.Helpers.polyString(v).println();<br/>GSL.Helpers.polyEval(v,height).format().println();</pre>"}]}