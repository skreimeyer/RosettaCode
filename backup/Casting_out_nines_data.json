{"task": "Casting_out_nines", "blocks": [{"lang": "360 Assembly", "loc": 64, "block": "<pre class=\"text highlighted_source\">*      Casting out nines         08/02/2017<br/>CASTOUT CSECT<br/>       USING  CASTOUT,R13        base register<br/>       B      72(R15)            skip savearea<br/>       DC     17F'0'             savearea<br/>       STM    R14,R12,12(R13)    prolog<br/>       ST     R13,4(R15)         \" &lt;-<br/>       ST     R15,8(R13)         \" -&gt;<br/>       LR     R13,R15            \" addressability<br/>       L      R1,LOW             low<br/>       XDECO  R1,XDEC            edit low<br/>       MVC    PGT+4(4),XDEC+8    output low<br/>       L      R1,HIGH            high <br/>       XDECO  R1,XDEC            edit high<br/>       MVC    PGT+12(4),XDEC+8   output low<br/>       L      R1,BASE            base<br/>       XDECO  R1,XDEC            edit base<br/>       MVC    PGT+24(4),XDEC+8   output base<br/>       XPRNT  PGT,L'PGT          print buffer<br/>       L      R2,BASE            base<br/>       BCTR   R2,0               -1<br/>       ST     R2,RM              rm=base-1<br/>       LA     R8,PG              ipg=0<br/>       SR     R7,R7              j=0<br/>       L      R6,LOW             i=low<br/>       DO WHILE=(C,R6,LE,HIGH)   do i=low to high<br/>         LR     R5,R6              i<br/>         SR     R4,R4              clear for div<br/>         D      R4,RM              /rm<br/>         LR     R2,R4              r2=i mod rm<br/>         LR     R5,R6              i<br/>         MR     R4,R6              i*i<br/>         SR     R4,R4              clear for div<br/>         D      R4,RM              /rm<br/>         IF CR,R2,EQ,R4 THEN       if (i//rm)=(i*i//rm) then<br/>           LA     R7,1(R7)           j=j+1<br/>           XDECO  R6,XDEC            edit i<br/>           MVC    0(4,R8),XDEC+8     output i<br/>           LA     R8,4(R8)           ipg=ipg+4<br/>           IF C,R7,EQ,=F'20' THEN    if j=20 then<br/>             XPRNT  PG,L'PG            print buffer<br/>             LA     R8,PG              ipg=0<br/>             SR     R7,R7              j=0<br/>             MVC    PG,=CL80' '        clear buffer<br/>           ENDIF  ,                  end if<br/>         ENDIF  ,                  end if<br/>         LA     R6,1(R6)           i=i+1<br/>       ENDDO  ,                  end do i<br/>       IF LTR,R7,NE,R7 THEN      if j&lt;&gt;0  then<br/>         XPRNT  PG,L'PG            print buffer<br/>       ENDIF  ,                  end if  <br/>       L      R13,4(0,R13)       epilog <br/>       LM     R14,R12,12(R13)    \" restore<br/>       XR     R15,R15            \" rc=0<br/>       BR     R14                exit<br/>LOW    DC     F'1'               low<br/>HIGH   DC     F'500'             high<br/>BASE   DC     F'10'              base<br/>RM     DS     F                  rm<br/>PGT    DC     CL80'for  ... to  ...    base ...'    buffer<br/>PG     DC     CL80' '                               buffer<br/>XDEC   DS     CL12               temp for xdeco<br/>       YREGS<br/>       END    CASTOUT</pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// Casting Out Nines</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Nigel Galloway. June 24th., 2012</span><br/><span class=\"co1\">//</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> Base <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> N <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> c1 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> c2 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> k<span class=\"sy1\">&lt;</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>Base,N<span class=\"br0\">)</span><span class=\"sy4\">;</span> k<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tc1<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy2\">%</span><span class=\"br0\">(</span>Base<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"br0\">(</span>k<span class=\"sy2\">*</span>k<span class=\"br0\">)</span><span class=\"sy2\">%</span><span class=\"br0\">(</span>Base<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tc2<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> k <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Trying \"</span> <span class=\"sy1\">&lt;&lt;</span> c2 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" numbers instead of \"</span> <span class=\"sy1\">&lt;&lt;</span> c1 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" numbers saves \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">100</span> <span class=\"sy2\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>c2<span class=\"sy2\">/</span>c1<span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"nu0\">100</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"%\"</span> <span class=\"sy1\">&lt;&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;A macro was used to ensure that the filter is inlined.  </span><br/><span class=\"co1\">;;Larry Hignight.  Last updated on 7/3/2012.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> kaprekar-number-filter <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"sy0\">,</span>n <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* <span class=\"sy0\">,</span>n <span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> test <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>start <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>stop <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>collect t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>nums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i from start to stop <span class=\"kw1\">do</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>kaprekar-number-filter i base<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> collect <span class=\"br0\">(</span>push i nums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>incf count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~d potential Kaprekar numbers remain (~~~$% filtered out).~%\"</span><br/>\t    count <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- stop count<span class=\"br0\">)</span> stop<span class=\"br0\">)</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> collect <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> castOut<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> base<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> end<span class=\"sy0\">=</span><span class=\"nu0\">999999</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> ran <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x <span class=\"sy0\">=</span> start <span class=\"sy0\">/</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> y <span class=\"sy0\">=</span> start <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> ran<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> k <span class=\"sy0\">=</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> start<span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> end<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">~=</span> k<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        x<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    castOut<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    castOut<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    castOut<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">288</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Free Pascal", "loc": 42, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> castout9<span class=\"sy1\">;</span><br/><span class=\"co2\">{$ifdef fpc}{$mode delphi}{$endif}</span><br/><span class=\"kw1\">uses</span> generics<span class=\"sy1\">.</span><span class=\"me1\">collections</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  TIntegerList <span class=\"sy3\">=</span> TSortedList&lt;integer&gt;<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> co9<span class=\"br0\">(</span><span class=\"kw1\">const</span> start<span class=\"sy1\">,</span>base<span class=\"sy1\">,</span>lim<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span>kaprekars<span class=\"sy1\">:</span><span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  C1<span class=\"sy1\">:</span><span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  C2<span class=\"sy1\">:</span><span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  S<span class=\"sy1\">:</span>TIntegerlist<span class=\"sy1\">;</span><br/>  k<span class=\"sy1\">,</span>i<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  S<span class=\"sy1\">:</span><span class=\"sy3\">=</span>TIntegerlist<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> start <span class=\"kw1\">to</span> lim <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    inc<span class=\"br0\">(</span>C1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> k <span class=\"kw1\">mod</span> <span class=\"br0\">(</span>base<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span>k<span class=\"sy3\">*</span>k<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"br0\">(</span>base<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      inc<span class=\"br0\">(</span>C2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      S<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Valid subset: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> Kaprekars <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> s<span class=\"sy1\">.</span><span class=\"me1\">contains</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'invalid '</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> s <span class=\"kw1\">do</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'The Kaprekars in this range ['</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> kaprekars <span class=\"kw1\">do</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'] are included'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Trying '</span><span class=\"sy1\">,</span>C2<span class=\"sy1\">,</span> <span class=\"st0\">' numbers instead of '</span><span class=\"sy1\">,</span> C1<span class=\"sy1\">,</span><span class=\"st0\">' saves '</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"sy3\">-</span><span class=\"br0\">(</span>C2 <span class=\"sy3\">*</span> <span class=\"nu0\">100</span> <span class=\"sy3\">/</span>C1<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">',%.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  S<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span> <br/>  co9<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">99</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">45</span><span class=\"sy1\">,</span><span class=\"nu0\">55</span><span class=\"sy1\">,</span><span class=\"nu0\">99</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  co9<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">45</span><span class=\"sy1\">,</span><span class=\"nu0\">55</span><span class=\"sy1\">,</span><span class=\"nu0\">99</span><span class=\"sy1\">,</span><span class=\"nu0\">297</span><span class=\"sy1\">,</span><span class=\"nu0\">703</span><span class=\"sy1\">,</span><span class=\"nu0\">999</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Go", "loc": 168, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// A casting out nines algorithm.</span><br/>\u00a0<br/><span class=\"co1\">// Quoting from: http://mathforum.org/library/drmath/view/55926.html</span><br/><span class=\"coMULTI\">/*<br/>First, for any number we can get a single digit, which I will call the <br/>\"check digit,\" by repeatedly adding the digits. That is, we add the <br/>digits of the number, then if there is more than one digit in the <br/>result we add its digits, and so on until there is only one digit <br/>left.<br/>\u00a0<br/>...<br/>\u00a0<br/>You may notice that when you add the digits of 6395, if you just <br/>ignore the 9, and the 6+3 = 9, you still end up with 5 as your check <br/>digit. This is because any 9's make no difference in the result. <br/>That's why the process is called \"casting out\" nines. Also, at any <br/>step in the process, you can add digits, not just at the end: to do <br/>8051647, I can say 8 + 5 = 13, which gives 4; plus 1 is 5, plus 6 is <br/>11, which gives 2, plus 4 is 6, plus 7 is 13 which gives 4. I never <br/>have to work with numbers bigger than 18.<br/>*/</span><br/><span class=\"co1\">// The twist is that co9Peterson returns a function to do casting out nines</span><br/><span class=\"co1\">// in any specified base from 2 to 36.</span><br/><span class=\"kw4\">func</span> co9Peterson<span class=\"sy1\">(</span>base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>cob <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> error<span class=\"sy1\">),</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> base &lt; <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> base &gt; <span class=\"nu0\">36</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"co9Peterson:\u00a0%d invalid base\"</span><span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// addDigits adds two digits in the specified base.</span><br/>    <span class=\"co1\">// People perfoming casting out nines by hand would usually have their</span><br/>    <span class=\"co1\">// addition facts memorized.  In a program, a lookup table might be</span><br/>    <span class=\"co1\">// analogous, but we expediently use features of the programming language</span><br/>    <span class=\"co1\">// to add digits in the specified base.</span><br/>    addDigits <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        ai<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseInt<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>a<span class=\"sy1\">),</span> base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> err<br/>        <span class=\"sy1\">}</span><br/>        bi<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseInt<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">),</span> base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> err<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> strconv<span class=\"sy3\">.</span>FormatInt<span class=\"sy1\">(</span>ai<span class=\"sy3\">+</span>bi<span class=\"sy1\">,</span> base<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// a '9' in the specified base.  that is, the greatest digit.</span><br/>    s9 <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>FormatInt<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>base<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> base<span class=\"sy1\">)</span><br/>    b9 <span class=\"sy2\">:=</span> s9<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    <span class=\"co1\">// define result function.  The result function may return an error</span><br/>    <span class=\"co1\">// if n is not a valid number in the specified base.</span><br/>    cob <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">byte</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> <span class=\"st0\">'0'</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>n<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span> <span class=\"co1\">// for each digit of the number</span><br/>            d <span class=\"sy2\">:=</span> n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> d <span class=\"sy3\">==</span> b9<span class=\"sy1\">:</span> <span class=\"co1\">// if the digit is '9' of the base, cast it out</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"co1\">// if the result so far is 0, the digit becomes the result</span><br/>            <span class=\"kw1\">case</span> r <span class=\"sy3\">==</span> <span class=\"st0\">'0'</span><span class=\"sy1\">:</span><br/>                r <span class=\"sy2\">=</span> d<br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// otherwise, add the new digit to the result digit</span><br/>            s<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> addDigits<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> err<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> s <span class=\"sy3\">==</span> s9<span class=\"sy1\">:</span> <span class=\"co1\">// if the sum is \"9\" of the base, cast it out</span><br/>                r <span class=\"sy2\">=</span> <span class=\"st0\">'0'</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"co1\">// if the sum is a single digit, it becomes the result</span><br/>            <span class=\"kw1\">case</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>                r <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// otherwise, reduce this two digit intermediate result before</span><br/>            <span class=\"co1\">// continuing.</span><br/>            r<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> cob<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> err<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Subset code required by task.  Given a base and a range specified with</span><br/><span class=\"co1\">// beginning and ending number in that base, return candidate Kaprekar numbers</span><br/><span class=\"co1\">// based on the observation that k%(base-1) must equal (k*k)%(base-1).</span><br/><span class=\"co1\">// For the\u00a0% operation, rather than the language built-in operator, use</span><br/><span class=\"co1\">// the method of casting out nines, which in fact implements\u00a0%(base-1).</span><br/><span class=\"kw4\">func</span> subset<span class=\"sy1\">(</span>base <span class=\"kw4\">int</span><span class=\"sy1\">,</span> begin<span class=\"sy1\">,</span> end <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// convert begin, end to native integer types for easier iteration</span><br/>    begin64<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseInt<span class=\"sy1\">(</span>begin<span class=\"sy1\">,</span> base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"subset begin:\u00a0%v\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    end64<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseInt<span class=\"sy1\">(</span>end<span class=\"sy1\">,</span> base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"subset end:\u00a0%v\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// generate casting out nines function for specified base</span><br/>    cob<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> co9Peterson<span class=\"sy1\">(</span>base<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> begin64<span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> end64<span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        ks <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>FormatInt<span class=\"sy1\">(</span>k<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>        rk<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> cob<span class=\"sy1\">(</span>ks<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span> <span class=\"co1\">// assertion</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>err<span class=\"sy1\">)</span> <span class=\"co1\">// this would indicate a bug in subset</span><br/>        <span class=\"sy1\">}</span><br/>        rk2<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> cob<span class=\"sy1\">(</span>strconv<span class=\"sy3\">.</span>FormatInt<span class=\"sy1\">(</span>k<span class=\"sy3\">*</span>k<span class=\"sy1\">,</span> base<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span> <span class=\"co1\">// assertion</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>err<span class=\"sy1\">)</span> <span class=\"co1\">// this would indicate a bug in subset</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// test for candidate Kaprekar number</span><br/>        <span class=\"kw1\">if</span> rk <span class=\"sy3\">==</span> rk2 <span class=\"sy1\">{</span><br/>            s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> ks<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> testCases <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    base       <span class=\"kw4\">int</span><br/>    begin<span class=\"sy1\">,</span> end <span class=\"kw4\">string</span><br/>    kaprekar   <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/><span class=\"sy1\">}{</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"100\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"45\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"55\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"99\"</span><span class=\"sy1\">}},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"st0\">\"10\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"gg\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"3d\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"d4\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"gg\"</span><span class=\"sy1\">}},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Test case base =\u00a0%d, begin =\u00a0%s, end =\u00a0%s:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>            tc<span class=\"sy3\">.</span>base<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>begin<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>end<span class=\"sy1\">)</span><br/>        s<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> subset<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span>base<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>begin<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>end<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Subset:  \"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Kaprekar:\"</span><span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>kaprekar<span class=\"sy1\">)</span><br/>        sx <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> k <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> tc<span class=\"sy3\">.</span>kaprekar <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> sx <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Fail:\"</span><span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> <span class=\"st0\">\"not in subset\"</span><span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> s<span class=\"sy1\">[</span>sx<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> k <span class=\"sy1\">{</span><br/>                    sx<span class=\"sy2\">++</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"sy1\">}</span><br/>                sx<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Valid subset.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">co9 n<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">8</span> <span class=\"sy0\">=</span> n<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> co9 <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> digits <span class=\"nu0\">10</span> n<br/>\u00a0<br/>task2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> co9 n <span class=\"sy0\">==</span> co9 <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>\u00a0<br/>task3 k <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` k <span class=\"sy0\">==</span> n <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` k<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">castout=: <span class=\"nu0\">1</span>\u00a0:<span class=\"nu0\">0</span><br/>   [: <span class=\"sy0\">(</span>#~  ] =&amp;<span class=\"sy0\">((</span><span class=\"kw2\">m</span>-<span class=\"nu0\">1</span><span class=\"sy0\">)</span>&amp;|<span class=\"sy0\">)</span> *:<span class=\"sy0\">)</span> &lt;. + [: i. <span class=\"sy0\">(</span>+*<span class=\"sy0\">)</span>@-~<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CastingOutNines <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">288</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> castOut<span class=\"br0\">(</span><span class=\"kw4\">int</span> base, <span class=\"kw4\">int</span> start, <span class=\"kw4\">int</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ran <span class=\"sy0\">=</span> IntStream<br/>                .<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">filter</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> start <span class=\"sy0\">/</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">:</span> ran<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> start<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> end<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>                result.<span class=\"me1\">add</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            x<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 47, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> main<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> bs<span class=\"sy0\">,</span> pbs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    bs <span class=\"sy0\">=</span> bs <span class=\"sy0\">||</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    pbs <span class=\"sy0\">=</span> pbs <span class=\"sy0\">||</span> <span class=\"nu0\">10</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'start:'</span><span class=\"sy0\">,</span> toString<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' end:'</span><span class=\"sy0\">,</span> toString<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">' base:'</span><span class=\"sy0\">,</span> bs<span class=\"sy0\">,</span> <span class=\"st0\">' printBase:'</span><span class=\"sy0\">,</span> pbs<span class=\"br0\">)</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;castOutNine: '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    castOutNine<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;kaprekar: '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    kaprekar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;&lt;br&gt;'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> castOutNine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> s<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> bsm1 <span class=\"sy0\">=</span> bs <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> e<span class=\"sy0\">;</span> n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> bsm1 <span class=\"sy0\">==</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> bsm1<span class=\"br0\">)</span> k <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                document.<span class=\"me1\">write</span><span class=\"br0\">(</span>toString<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;trying '</span><span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> <span class=\"st0\">' numbers instead of '</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> e <span class=\"sy0\">-</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">' numbers saves '</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"sy0\">-</span> k <span class=\"sy0\">/</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">toFixed</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'%'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> kaprekar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> e<span class=\"sy0\">;</span> n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isKaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> document.<span class=\"me1\">write</span><span class=\"br0\">(</span>toString<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> isKaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/>                .<span class=\"me1\">toString</span><span class=\"br0\">(</span>bs<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> e <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> e<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>s.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> bs<span class=\"br0\">)</span><br/>                <span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>s.<span class=\"me1\">substr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> bs<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;&amp;</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> toString<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span>pbs<span class=\"br0\">)</span><br/>            .<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>main<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>main<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span> <span class=\"sy0\">*</span> <span class=\"nu0\">16</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>main<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span> <span class=\"sy0\">*</span> <span class=\"nu0\">17</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><br/>main<span class=\"br0\">(</span>parseInt<span class=\"br0\">(</span><span class=\"st0\">'10'</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> parseInt<span class=\"br0\">(</span><span class=\"st0\">'gg'</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\">def co9:<br/>  def digits: tostring | explode | map(. - 48);  # \"0\" is 48<br/>  if . == 9 then 0<br/>  elif 0 &lt;= . and . &lt;= 8 then .<br/>  else digits | add | co9<br/>  end;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">co9(x) = x == 9 \u00a0? 0\u00a0: <br/>         1&lt;=x&lt;=8\u00a0? x\u00a0: <br/>         co9(sum(digits(x)))</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun castOut<span class=\"br0\">(</span>base<span class=\"sy0\">:</span> Int, start<span class=\"sy0\">:</span> Int, end<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> base - <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ran <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until b<span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it <span class=\"sy0\">%</span> b <span class=\"sy0\">==</span> <span class=\"br0\">(</span>it <span class=\"sy0\">*</span> it<span class=\"br0\">)</span> <span class=\"sy0\">%</span> b <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> start / b<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in ran<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k <span class=\"sy0\">=</span> b <span class=\"sy0\">*</span> x + n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> start<span class=\"br0\">)</span> continue<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> end<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        x++<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>castOut<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">288</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">Co9[n_, b_: 10]\u00a0:= <br/>  With[{ans = FixedPoint[<a class=\"__cf_email__\" data-cfemail=\"85d1eaf1e4e9c5ccebf1e0e2e0f7c1ece2ecf1f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[#, b] &amp;, n]}, <br/>   If[ans == b - 1, 0, ans]];</pre>"}, {"lang": "Nim", "loc": 23, "block": "<pre class=\"text highlighted_source\">import sequtils<br/>\u00a0<br/>iterator castOut(base = 10, start = 1, ending = 999_999): int =<br/>  var ran: seq[int] = @[]<br/>  for y in 0 ..&lt; base-1:<br/>    if y mod (base - 1) == (y*y) mod (base - 1):<br/>      ran.add(y)<br/>\u00a0<br/>  var x = start div (base - 1)<br/>  var y = start mod (base - 1)<br/>\u00a0<br/>  block outer:<br/>    while true:<br/>      for n in ran:<br/>        let k = (base - 1) * x + n<br/>        if k &lt; start:<br/>          continue<br/>        if k &gt; ending:<br/>          break outer<br/>        yield k<br/>      inc x<br/>\u00a0<br/>echo toSeq(castOut(base=16, start=1, ending=255))</pre>"}, {"lang": "Objeck", "loc": 20, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> CastingNines <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    base <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    N <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    c1 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    c2 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>base<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Power</span><span class=\"br0\">(</span>N<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> k<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      c1<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy0\">%</span><span class=\"br0\">(</span>base<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k<span class=\"sy0\">*</span>k<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span>base<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        c2<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Trying \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>c2<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" numbers instead of \"</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>c1<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" numbers saves \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>c2<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>c1<br/>      <span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\"><span class=\"br0\">{</span>base<span class=\"sy0\">=</span><span class=\"nu1\">10</span><span class=\"sy0\">;</span><br/>N<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><br/>c1<span class=\"sy0\">=</span>c2<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>base<span class=\"sy0\">^</span>N<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>  c1<span class=\"sy0\">++;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy0\">%</span><span class=\"br0\">(</span>base<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> k<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">%</span><span class=\"br0\">(</span>base<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    c2<span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">print1</span><span class=\"br0\">(</span>k<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Trying \"</span>c2<span class=\"st0\">\" numbers instead of \"</span>c1<span class=\"st0\">\" numbers saves \"</span> <span class=\"nu1\">100</span>.<span class=\"sy0\">-</span><span class=\"br0\">(</span>c2<span class=\"sy0\">/</span>c1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">100</span> <span class=\"st0\">\"%\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 33, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> co9 <span class=\"br0\">{</span>  <span class=\"co1\"># Follows the simple procedure asked for in Part 1</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  co9<span class=\"br0\">(</span><span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> showadd <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"( $n [\"</span><span class=\"sy0\">,</span>co9<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"] + $m [\"</span><span class=\"sy0\">,</span>co9<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"] ) [\"</span><span class=\"sy0\">,</span>co9<span class=\"br0\">(</span>co9<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>co9<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"]\"</span><span class=\"sy0\">,</span> <br/>        <span class=\"st0\">\"   =   \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span><span class=\"st0\">\" [\"</span><span class=\"sy0\">,</span>co9<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> co9filter <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$base</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$base</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$beg</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span><span class=\"sy0\">,</span> <span class=\"re0\">$basem1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"re0\">*$base</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@list</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"re0\">$basem1</span> <span class=\"sy0\">==</span> <span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"re0\">$basem1</span> <span class=\"br0\">}</span> <span class=\"re0\">$beg</span> <span class=\"sy0\">..</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">$end</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@list</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@list</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Part 1: Create a simple filter and demonstrate using simple example.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>showadd<span class=\"br0\">(</span><span class=\"nu0\">6395</span><span class=\"sy0\">,</span> <span class=\"nu0\">1259</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Part 2: Use this to filter a range with co9(k) == co9(k^2).<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> co9<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> co9<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Part 3: Use efficient method on range.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$base</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@l</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> co9filter<span class=\"br0\">(</span><span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"[@l]<span class=\"es0\">\\n</span>In base\u00a0%d, trying\u00a0%d numbers instead of\u00a0%d saves\u00a0%.4f%%<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>         <span class=\"re0\">$base</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> cast<span class=\"sy0\">-</span>out<span class=\"br0\">(</span>\\BASE <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> \\MIN <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> \\MAX <span class=\"sy0\">=</span> BASE<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> \\B9 <span class=\"sy0\">=</span> BASE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@ran</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$_</span> <span class=\"sy0\">%</span> B9 <span class=\"sy0\">==</span> <span class=\"re0\">$_</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">%</span> B9 <span class=\"kw1\">for</span> <span class=\"sy0\">^</span>B9<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> MIN <span class=\"kw1\">div</span> B9<span class=\"sy0\">;</span><br/>  gather <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@ran</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> \\k <span class=\"sy0\">=</span> B9 <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>      take k <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;=</span> MIN<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$x</span><span class=\"sy0\">++;</span><br/>  <span class=\"br0\">}</span> <span class=\"sy0\">...^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> MAX<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> cast<span class=\"sy0\">-</span>out<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> cast<span class=\"sy0\">-</span>out <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> cast<span class=\"sy0\">-</span>out <span class=\"nu0\">17</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">procedure co9(integer start, integer base, integer lim, sequence kaprekars)<br/>integer c1=0,<br/>        c2=0<br/>sequence s = {}<br/>    for k=start to lim do<br/>        c1 += 1<br/>        if mod(k,base-1)=mod(k*k,base-1) then<br/>            c2 += 1<br/>            s &amp;= k<br/>        end if<br/>    end for<br/>    string msg = \"Valid subset\\n\"<br/>    for i=1 to length(kaprekars) do<br/>        if not find(kaprekars[i],s) then<br/>            msg = \"***INVALID***\\n\"<br/>            exit<br/>        end if<br/>    end for<br/>    if length(s)&gt;40 then s[20..-20] = {\"...\"} end if<br/>   \u00a0?s<br/>    puts(1,\"Kaprekar numbers:\")<br/>   \u00a0?kaprekars<br/>    puts(1,msg)<br/>    printf(1,\"Trying\u00a0%d numbers instead of\u00a0%d saves\u00a0%3.2f%%\\n\\n\",{c2,c1,100-(c2/c1)*100})<br/>end procedure<br/>\u00a0<br/>co9(1, 10, 99, {1,9,45,55,99})<br/>co9(0(17)10, 17, 17*17, {0(17)3d,0(17)d4,0(17)gg})<br/>co9(1, 10, 1000, {1,9,45,55,99,297,703,999})</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(de kaprekar (N)<br/>   (let L (cons 0 (chop (* N N)))<br/>      (for ((I . R) (cdr L) R (cdr R))<br/>         (NIL (gt0 (format R)))<br/>         (T (= N (+ @ (format (head I L)))) N) ) ) )<br/>\u00a0<br/>(de co9 (N)<br/>   (until<br/>      (&gt; 9<br/>         (setq N<br/>            (sum<br/>               '((N) (unless (= \"9\" N) (format N)))<br/>               (chop N) ) ) ) )<br/>   N )<br/>\u00a0<br/>(println 'Part1:)      <br/>(println<br/>   (=<br/>      (co9 (+ 6395 1259))<br/>      (co9 (+ (co9 6395) (co9 1259))) ) )<br/>\u00a0<br/>(println 'Part2:)<br/>(println<br/>   (filter<br/>      '((N) (= (co9 N) (co9 (* N N))))<br/>      (range 1 100) ) )<br/>(println   <br/>   (filter kaprekar (range 1 100)) )<br/>\u00a0<br/>(println 'Part3 '- 'base17:)<br/>(println<br/>   (filter<br/>      '((N) (= (% N 16) (% (* N N) 16)))<br/>      (range 1 100) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Casting out Nines</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Nigel Galloway: June 27th., 2012,</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">def</span> CastOut<span class=\"br0\">(</span>Base<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> Start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> End<span class=\"sy0\">=</span><span class=\"nu0\">999999</span><span class=\"br0\">)</span>:<br/>  ran <span class=\"sy0\">=</span> <span class=\"br0\">[</span>y <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> y%<span class=\"br0\">(</span>Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>y*y<span class=\"br0\">)</span>%<span class=\"br0\">(</span>Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  x<span class=\"sy0\">,</span>y <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>Start<span class=\"sy0\">,</span> Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> ran:<br/>      k <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span>*x + n<br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">&lt;</span> Start:<br/>        <span class=\"kw1\">continue</span><br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> End:<br/>        <span class=\"kw1\">return</span><br/>      <span class=\"kw1\">yield</span> k<br/>    x +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">for</span> V <span class=\"kw1\">in</span> CastOut<span class=\"br0\">(</span>Base<span class=\"sy0\">=</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span>Start<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>End<span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span>V<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">' '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math)<br/>\u00a0<br/>(define (digits n)<br/>  (map (compose1 string-&gt;number string)<br/>       (string-&gt;list (number-&gt;string n))))<br/>\u00a0<br/>(define (cast-out-nines n)<br/>  (with-modulus 9<br/>    (for/fold ([sum 0]) ([d (digits n)])<br/>      (mod+ sum d))))</pre>"}, {"lang": "REXX", "loc": 40, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates the  casting\u2500out\u2500nines  algorithm  (with Kaprekar numbers). */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI base <span class=\"sy0\">.</span>                           <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> LO==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> LO==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; LO=<span class=\"nu0\">1</span>; HI=<span class=\"nu0\">1000</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*Not specified?   Then use the default*/</span><br/><span class=\"kw1\">if</span> HI==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> HI==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> HI=LO                  <span class=\"coMULTI\">/* \"      \"          \"   \"   \"     \"   */</span><br/><span class=\"kw1\">if</span> base==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> base==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> base=<span class=\"nu0\">10</span>            <span class=\"coMULTI\">/* \"      \"          \"   \"   \"     \"   */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>HI<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>          <span class=\"coMULTI\">/*insure enough decimal digits for HI\u00b2.*/</span><br/>numbers=castOut<span class=\"br0\">(</span>LO, HI, base<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*generate a list of (cast out) numbers*/</span><br/>@cast_out= <span class=\"st0\">'cast-out-'</span>  <span class=\"sy0\">||</span> <span class=\"br0\">(</span>base-<span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"st0\">\"test\"</span>   <span class=\"coMULTI\">/*construct a shortcut text for output.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'For'</span>     LO     <span class=\"st0\">\"through\"</span>     HI<span class=\"st0\">', the following passed the'</span>       @cast_out<span class=\"st0\">\":\"</span><br/><span class=\"kw1\">say</span> numbers;         <span class=\"kw1\">say</span>                         <span class=\"coMULTI\">/*display the list of cast out numbers.*/</span><br/>q=HI-LO+<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*Q:   is the range of numbers in list.*/</span><br/>p=<span class=\"kw6\">words</span><span class=\"br0\">(</span>numbers<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*P\"    \"  \" number  \"    \"     \"   \"  */</span><br/>pc=<span class=\"kw6\">format</span><span class=\"br0\">(</span>p<span class=\"sy0\">/</span>q <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, , <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>  <span class=\"sy0\">||</span>  <span class=\"st0\">'%'</span>           <span class=\"coMULTI\">/*calculate the percentage (%) cast out*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'For'</span>   q   <span class=\"st0\">\"numbers,\"</span>   p   <span class=\"st0\">'passed the'</span>    @cast_out    <span class=\"st0\">\"(\"</span>pc<span class=\"st0\">') for base'</span>    base<span class=\"st0\">\".\"</span><br/><span class=\"kw1\">if</span> base<span class=\"sy0\">\\</span>==<span class=\"nu0\">10</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">exit</span>                          <span class=\"coMULTI\">/*if radix isn't ten, then exit program*/</span><br/>Kaps=Kaprekar<span class=\"br0\">(</span>LO, HI<span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*generate a list of Kaprekar numbers. */</span><br/><span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span>   <span class=\"st0\">'The Kaprekar numbers in the same range are:'</span>   Kaps<br/><span class=\"kw1\">say</span><br/>      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>Kaps<span class=\"br0\">)</span>;    x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Kaps, i<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*verify 'em in list.*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>x, numbers<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                     <span class=\"coMULTI\">/*it's OK so far \u00b7\u00b7\u00b7 */</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Kaprekar number'</span>   x   <span class=\"st0\">\"isn't in the numbers list.\"</span>     <span class=\"coMULTI\">/*oops\u2500ay!           */</span><br/>      <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>                                                      <span class=\"coMULTI\">/*go spank the coder.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'All Kaprekar numbers are in the'</span>     @cast_out     <span class=\"st0\">\"numbers list.\"</span>             <span class=\"coMULTI\">/*OK*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>castOut:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> low,high,radix;       rm=<span class=\"kw6\">word</span><span class=\"br0\">(</span>radix <span class=\"nu0\">10</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span>;         $=<br/>                          <span class=\"kw1\">do</span> j=low  <span class=\"kw2\">to</span>  <span class=\"kw6\">word</span><span class=\"br0\">(</span>high low, <span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*test a range of numbers. */</span><br/>                          <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>rm == j<span class=\"sy0\">*</span>j<span class=\"sy0\">//</span>rm  <span class=\"kw3\">then</span> $=$ j    <span class=\"coMULTI\">/*did number pass the test?*/</span><br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                        <span class=\"coMULTI\">/* [\u2191]  Then add # to list.*/</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*strip and leading blanks from result.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Kaprekar: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L,H;   $=;   <span class=\"kw1\">if</span> L<span class=\"sy0\">&lt;</span>=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> $=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*add unity if in range*/</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, L<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> H;        s=j<span class=\"sy0\">*</span>j   <span class=\"coMULTI\">/*a slow way to find Kaprekar numbers. */</span><br/>                <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span><br/>                <span class=\"kw1\">if</span> j==<span class=\"kw6\">left</span><span class=\"br0\">(</span>s, m<span class=\"br0\">)</span> + <span class=\"kw6\">substr</span><span class=\"br0\">(</span>s, m+<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  $=$ j;  <span class=\"kw1\">leave</span>;   <span class=\"kw3\">end</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span>                      <span class=\"coMULTI\">/*     [\u2191]  found a Kaprekar number.   */</span><br/>            <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*return Kaprekar numbers to invoker.  */</span></pre>"}, {"lang": "Ring", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Casting out nines<br/>\u00a0<br/>co9(1, 10, 99, [1,9,45,55,99])<br/>co9(1, 10, 1000, [1,9,45,55,99,297,703,999])<br/>\u00a0<br/>func co9(start,base,lim,kaprekars)<br/>c1=0<br/>c2=0<br/>s = []<br/>for k = start to lim<br/>     c1 = c1 + 1<br/>      if k\u00a0% (base-1) = (k*k)\u00a0% (base-1) <br/>         c2 = c2 + 1<br/>         add(s,k)<br/>      ok<br/>next<br/>msg = \"Valid subset\" + nl<br/>for i = 1 to len(kaprekars) <br/>     if not find(s,kaprekars[i])<br/>       msg = \"***Invalid***\" + nl<br/>       exit<br/>     ok<br/>next<br/>showarray(s)<br/>see \"Kaprekar numbers:\" + nl<br/>showarray(kaprekars)<br/>see msg<br/>see \"Trying \" + c2 + \" numbers instead of \" + c1 + \" saves \" + (100-(c2/c1)*100) + \"%\" + nl + nl<br/>\u00a0<br/>func showarray(vect)<br/>        see \"{\"<br/>        svect = \"\"<br/>        for n = 1 to len(vect)<br/>              svect = svect + vect[n] + \", \"<br/>        next<br/>        svect = left(svect, len(svect) - 2)<br/>        see svect + \"}\" + nl<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> kaprekar<span class=\"br0\">{</span><br/>    <span class=\"co1\">// PART 1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> co<span class=\"sy0\">_</span>base <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int,base<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span><span class=\"br0\">(</span>base-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span>base-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">//PART 2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> get<span class=\"sy0\">_</span>cands<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int,base<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                                List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>co<span class=\"sy0\">_</span>base<span class=\"br0\">(</span>n,base<span class=\"br0\">)</span><span class=\"br0\">)</span>               n <span class=\"sy0\">::</span> get<span class=\"sy0\">_</span>cands<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span>,base<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>                                    get<span class=\"sy0\">_</span>cands<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span>,base<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//PART 3</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> base <span class=\"sy0\">=</span> <span class=\"nu0\">31</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Candidates for Kaprekar numbers found by casting out method with base\u00a0%d:\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>get<span class=\"sy0\">_</span>cands<span class=\"br0\">(</span><span class=\"nu0\">1000</span>,base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func bitset: castOut (in integer: base, in integer: start, in integer: ending) is func<br/>  result<br/>    var bitset: casted is {};<br/>  local<br/>    var bitset: ran is {};<br/>    var integer: x is 0;<br/>    var integer: n is 0;<br/>    var integer: k is 0;<br/>    var boolean: finished is FALSE;<br/>  begin<br/>    for x range 0 to base - 2 do<br/>      if x rem pred(base) = x ** 2 rem pred(base) then<br/>        incl(ran, x);<br/>      end if;<br/>    end for;<br/>    x\u00a0:= start div pred(base);<br/>    repeat<br/>      for n range ran until finished do<br/>        k\u00a0:= pred(base) * x + n;<br/>        if k &gt;= start then<br/>          if k &gt; ending then<br/>            finished\u00a0:= TRUE;<br/>          else<br/>            incl(casted, k);<br/>          end if;<br/>        end if;<br/>      end for;<br/>      incr(x);<br/>    until finished;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(castOut(16, 1, 255));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 23, "block": "<pre class=\"ruby highlighted_source\">func cast_out<span class=\"br0\">(</span>base = <span class=\"nu0\">10</span>, min = <span class=\"nu0\">1</span>, max = <span class=\"br0\">(</span>base<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var b9  = base<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    var ran = b9.<span class=\"me1\">range</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n<span class=\"sy0\">%</span>b9 == <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n <span class=\"sy0\">%</span> b9<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    var x = min<span class=\"sy0\">//</span>b9<br/>    var r = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        ran.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>            var k = <span class=\"br0\">(</span>b9<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw2\">return</span> r <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span><br/>            r <span class=\"sy0\">&lt;&lt;</span> k <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span>= min<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"sy0\">++</span>x<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say cast_out<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>say cast_out<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>say cast_out<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 39, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> co9 <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$x</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Extended to the general case</span><br/><span class=\"kw1\">proc</span> coBase <span class=\"br0\">{</span>x <span class=\"br0\">{</span>base <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$base</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> digits <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> / <span class=\"re0\">$base</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> digits <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">%</span> <span class=\"re0\">$base</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$digits</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Simple helper</span><br/><span class=\"kw1\">proc</span> percent <span class=\"br0\">{</span>part whole<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%.2f%%\"</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$whole</span> - <span class=\"re0\">$part</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span> / <span class=\"re0\">$whole</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"In base 10...\"</span><br/><span class=\"kw1\">set</span> satisfying <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>co9 <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"br0\">[</span>co9 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> satisfying <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$satisfying</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Trying [llength $satisfying] numbers instead of 99 numbers saves [percent [llength $satisfying] 99]\"</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"In base 16...\"</span><br/><span class=\"kw1\">set</span> satisfying <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>coBase <span class=\"re0\">$i</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span> == <span class=\"br0\">[</span>coBase <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> satisfying <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$satisfying</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Trying [llength $satisfying] numbers instead of 255 numbers saves [percent [llength $satisfying] 255]\"</span></pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn castOut(base=10, start=1, end=999999){<br/>   base-=1;<br/>   ran:=(0).filter(base,'wrap(n){ n%base == (n*n)%base });<br/>   result:=Sink(List); <br/>   foreach a,b in ([start/base ..],ran){  // foreach{ foreach {} }<br/>      k\u00a0:= base*a + b;<br/>      if (k &lt; start) continue;<br/>      if (k &gt; end) return(result.close());<br/>      result.write(k);<br/>   }<br/>   // doesn't get here<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 14, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> Base=<span class=\"nu0\">10</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> N=<span class=\"nu0\">2</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> c1=<span class=\"nu0\">0</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> c2=<span class=\"nu0\">0</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> k=<span class=\"nu0\">1</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> k&gt;=<span class=\"br0\">(</span>Base^N<span class=\"br0\">)</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> c1=c1+<span class=\"nu0\">1</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> FN m<span class=\"br0\">(</span>k,Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span>=FN m<span class=\"br0\">(</span>k*k,Base-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> c2=c2+<span class=\"nu0\">1</span>: <span class=\"kw1\">PRINT</span> k;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">90</span> <span class=\"kw1\">LET</span> k=k+<span class=\"nu0\">1</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">'\"Trying \";c2;\" numbers instead of \";c1;\" numbers saves \";100-(c2/c1)*100;\"%\"</span><br/><span class=\"nu0\">160</span> STOP <br/><span class=\"nu0\">170</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b<br/>\u00a0</pre>"}]}