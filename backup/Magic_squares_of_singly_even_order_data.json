{"task": "Magic_squares_of_singly_even_order", "blocks": [{"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">6&gt;&gt;&gt;&gt;&gt;:00p:2/vv1:%g01p04:%g00::p03*2%g01/g00::<a class=\"__cf_email__\" data-cfemail=\"eac7dbb5aa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\\00g/10g/3*4vv&gt;0g\\-1-30g+1+10g%10g*\\30g+1+10g%1+ +<br/>:%4+*2/g01g0&lt;vv4*`\\g02\\!`\\0:-!-g02/2g03g04-3*2\\-\\3<br/>*:p02/4-2:p01&lt;&gt;0g00g20g-`+!!*+10g:**+.:00g%!9+,:^:</pre>"}, {"lang": "C", "loc": 119, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>   <span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/>   <span class=\"co2\">#include&lt;ctype.h&gt;</span><br/>   <span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/>   <span class=\"kw4\">int</span><span class=\"sy0\">**</span> oddMagicSquare<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> squareSize <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"sy0\">**</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>value <span class=\"sy0\">&lt;=</span> squareSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    r<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    r <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    c<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">--;</span><br/>                c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">--;</span><br/>                c<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"sy0\">**</span> singlyEvenMagicSquare<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> halfN <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> subGridSize <span class=\"sy0\">=</span> size <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"sy0\">**</span> subGrid <span class=\"sy0\">=</span> oddMagicSquare<span class=\"br0\">(</span>halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> gridFactors<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"sy0\">**</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> grid <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>c <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> subGrid<span class=\"br0\">[</span>r <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> gridFactors<span class=\"br0\">[</span>grid<span class=\"br0\">]</span> <span class=\"sy0\">*</span> subGridSize<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> nColsLeft <span class=\"sy0\">=</span> halfN <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nColsRight <span class=\"sy0\">=</span> nColsLeft <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> halfN<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> nColsLeft <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> nColsRight<br/>                        <span class=\"sy0\">||</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> nColsLeft <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> tmp <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> numDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tn <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t\tcount<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> printMagicSquare<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span> square<span class=\"sy0\">,</span><span class=\"kw4\">int</span> rows<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rows<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>rows<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*s%d\"</span><span class=\"sy0\">,</span>rows <span class=\"sy0\">-</span> numDigits<span class=\"br0\">(</span>square<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>square<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant:\u00a0%d \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> rows <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"sy0\">||</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;integer specifying rows in magic square&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\tn <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tprintMagicSquare<span class=\"br0\">(</span>singlyEvenMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 111, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> magicSqr<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span> <br/>    magicSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> sqr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    ~magicSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> sqr <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> sqr<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> sqr <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> sqr<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> d<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> d <span class=\"sy2\">%</span> <span class=\"nu0\">4</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> d <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        sz <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>        sqr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>sz <span class=\"sy2\">*</span> sz<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> sqr, <span class=\"nu0\">0</span>, sz <span class=\"sy2\">*</span> sz <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Singly Even Magic Square: \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" x \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"It's Magic Sum is: \"</span> <span class=\"sy1\">&lt;&lt;</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        ostringstream cvr<span class=\"sy4\">;</span> cvr <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> cvr.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> l <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> sqr<span class=\"br0\">[</span>yy <span class=\"sy2\">+</span> x<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> siamese<span class=\"br0\">(</span> <span class=\"kw4\">int</span> from, <span class=\"kw4\">int</span> to <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> oneSide <span class=\"sy1\">=</span> to <span class=\"sy2\">-</span> from, curCol <span class=\"sy1\">=</span> oneSide <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, curRow <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, count <span class=\"sy1\">=</span> oneSide <span class=\"sy2\">*</span> oneSide, s <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> count <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span> done <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw2\">false</span> <span class=\"sy1\">==</span> done <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> curCol <span class=\"sy1\">&gt;=</span> oneSide <span class=\"br0\">)</span> curCol <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> curRow <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> curRow <span class=\"sy1\">=</span> oneSide <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>                done <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> sqr<span class=\"br0\">[</span>curCol <span class=\"sy2\">+</span> sz <span class=\"sy2\">*</span> curRow<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    curCol <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> curRow <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span> curCol <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> curCol <span class=\"sy1\">=</span> oneSide <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span> curRow <span class=\"sy1\">&gt;=</span> oneSide <span class=\"br0\">)</span> curRow <span class=\"sy2\">-</span><span class=\"sy1\">=</span> oneSide<span class=\"sy4\">;</span><br/>\u00a0<br/>                    done <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            sqr<span class=\"br0\">[</span>curCol <span class=\"sy2\">+</span> sz <span class=\"sy2\">*</span> curRow<span class=\"br0\">]</span> <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span><br/>            s<span class=\"sy2\">++</span><span class=\"sy4\">;</span> count<span class=\"sy2\">--</span><span class=\"sy4\">;</span> curCol<span class=\"sy2\">++</span><span class=\"sy4\">;</span> curRow<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> sz <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, ns <span class=\"sy1\">=</span> n <span class=\"sy2\">*</span> sz, size <span class=\"sy1\">=</span> sz <span class=\"sy2\">*</span> sz, add1 <span class=\"sy1\">=</span> size <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, add3 <span class=\"sy1\">=</span> size <span class=\"sy2\">/</span> <span class=\"nu0\">4</span>, add2 <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"sy2\">*</span> add3<span class=\"sy4\">;</span><br/>\u00a0<br/>        siamese<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, n <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> row <span class=\"sy1\">=</span> r <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> sqr<span class=\"br0\">[</span>c <span class=\"sy2\">-</span> n <span class=\"sy2\">+</span> row<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>                sqr<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> row<span class=\"br0\">]</span> <span class=\"sy1\">=</span> m <span class=\"sy2\">+</span> add1<span class=\"sy4\">;</span><br/>                sqr<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> row <span class=\"sy2\">+</span> ns<span class=\"br0\">]</span> <span class=\"sy1\">=</span> m <span class=\"sy2\">+</span> add3<span class=\"sy4\">;</span><br/>                sqr<span class=\"br0\">[</span>c <span class=\"sy2\">-</span> n <span class=\"sy2\">+</span> row <span class=\"sy2\">+</span> ns<span class=\"br0\">]</span> <span class=\"sy1\">=</span> m <span class=\"sy2\">+</span> add2<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> lc <span class=\"sy1\">=</span> <span class=\"br0\">(</span> sz <span class=\"sy2\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">4</span>, co <span class=\"sy1\">=</span> sz <span class=\"sy2\">-</span> <span class=\"br0\">(</span> lc <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> row <span class=\"sy1\">=</span> r <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span>    <br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> co<span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>                sqr<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> row<span class=\"br0\">]</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> add3<span class=\"sy4\">;</span><br/>                sqr<span class=\"br0\">[</span>c <span class=\"sy2\">+</span> row <span class=\"sy2\">+</span> ns<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> add3<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> row <span class=\"sy1\">=</span> r <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span>    <br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> lc<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> cc <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> r <span class=\"sy1\">==</span> lc <span class=\"br0\">)</span> cc<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>                sqr<span class=\"br0\">[</span>cc <span class=\"sy2\">+</span> row<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> add2<span class=\"sy4\">;</span><br/>                sqr<span class=\"br0\">[</span>cc <span class=\"sy2\">+</span> row <span class=\"sy2\">+</span> ns<span class=\"br0\">]</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> add2<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> sz <span class=\"sy2\">*</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> sz <span class=\"sy2\">*</span> sz <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> inc<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>a <span class=\"sy1\">==</span> sz <span class=\"br0\">)</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> dec<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">--</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> a <span class=\"sy1\">=</span> sz <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> checkPos<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span> isInside<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> isInside<span class=\"br0\">(</span> y <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>sqr<span class=\"br0\">[</span>sz <span class=\"sy2\">*</span> y <span class=\"sy2\">+</span> x<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> isInside<span class=\"br0\">(</span> <span class=\"kw4\">int</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> s <span class=\"sy1\">&lt;</span> sz <span class=\"sy3\">&amp;&amp;</span> s <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"sy2\">*</span> sqr<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> sz<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    magicSqr s<span class=\"sy4\">;</span> s.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 88, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>row<span class=\"sy0\">;</span> magicSquareSinglyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>x<span class=\"sy0\">;</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writef<span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareOdd<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    enforce<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Base must be odd and &gt;2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> gridSize <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>value <span class=\"sy0\">&lt;=</span> gridSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                r <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                c<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r<span class=\"sy0\">--;</span><br/>            c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r<span class=\"sy0\">--;</span><br/>            c<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            r<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareSinglyEven<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    enforce<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Base must be a positive multiple of four plus 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> halfN <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> subSquareSize <span class=\"sy0\">=</span> size <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> subSquare <span class=\"sy0\">=</span> magicSquareOdd<span class=\"br0\">(</span>halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> quadrantFactors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> quadrant <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>c <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> subSquare<span class=\"br0\">[</span>r <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> quadrantFactors<span class=\"br0\">[</span>quadrant<span class=\"br0\">]</span> <span class=\"sy0\">*</span> subSquareSize<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> nColsLeft <span class=\"sy0\">=</span> halfN <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> nColsRight <span class=\"sy0\">=</span> nColsLeft <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> halfN<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> nColsLeft <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> nColsRight<br/>                <span class=\"sy0\">||</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> nColsLeft <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw4\">int</span> tmp <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 48, "block": "<pre class=\"text highlighted_source\">defmodule Magic_square do<br/>  @lux \u00a0%{ L: [4, 1, 2, 3], U: [1, 4, 2, 3], X: [1, 4, 3, 2] }<br/>\u00a0<br/>  def singly_even(n) when rem(n-2,4)!=0, do: raise ArgumentError, \"must be even, but not divisible by 4.\"<br/>  def singly_even(2), do: raise ArgumentError, \"2x2 magic square not possible.\"<br/>  def singly_even(n) do<br/>    n2 = div(n, 2)<br/>    oms = odd_magic_square(n2)<br/>    mat = make_lux_matrix(n2)<br/>    square = synthesis(n2, oms, mat)<br/>    IO.puts to_string(n, square)<br/>    square<br/>  end<br/>\u00a0<br/>  defp odd_magic_square(m) do       # zero beginning, it is 4 multiples.<br/>    for i &lt;- 0..m-1, j &lt;- 0..m-1, into:\u00a0%{},<br/>        do: {{i,j}, (m*(rem(i+j+1+div(m,2),m)) + rem(i+2*j-5+2*m, m)) * 4}<br/>  end<br/>\u00a0<br/>  defp make_lux_matrix(m) do<br/>    center = div(m, 2)<br/>    lux = List.duplicate(:L, center+1) ++ [:U] ++ List.duplicate(:X, m-center-2)<br/>    (for {x,i} &lt;- Enum.with_index(lux), j &lt;- 0..m-1, into:\u00a0%{}, do: {{i,j}, x})<br/>    |&gt; Map.put({center,   center},\u00a0:U)<br/>    |&gt; Map.put({center+1, center},\u00a0:L)<br/>  end<br/>\u00a0<br/>  defp synthesis(m, oms, mat) do<br/>    range = 0..m-1<br/>    Enum.reduce(range, [], fn i,acc -&gt;<br/>      {row0, row1} = Enum.reduce(range, {[],[]}, fn j,{r0,r1} -&gt;<br/>                       x = oms[{i,j}]<br/>                       [lux0, lux1, lux2, lux3] = @lux[mat[{i,j}]]<br/>                       {[x+lux0, x+lux1 | r0], [x+lux2, x+lux3 | r1]}<br/>                     end)<br/>      [row0, row1 | acc]<br/>    end)<br/>  end<br/>\u00a0<br/>  defp to_string(n, square) do<br/>    format = String.duplicate(\"~#{length(to_char_list(n*n))}w \", n) &lt;&gt; \"\\n\"<br/>    Enum.map_join(square, fn row -&gt;<br/>     \u00a0:io_lib.format(format, row)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Magic_square.singly_even(6)</pre>"}, {"lang": "FreeBASIC", "loc": 147, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-03-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co1\">' singly even magic square 6, 10, 14, 18...</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Err_msg<span class=\"br0\">(</span>msg <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> msg<br/>    <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Sleep</span> <span class=\"nu0\">5000</span>, <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> se_magicsq<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, filename <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' filename &lt;&gt; \"\" then save square in a file</span><br/>    <span class=\"co1\">' filename can contain directory name</span><br/>    <span class=\"co1\">' if filename exist it will be overwriten, no error checking</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">6</span> <span class=\"kw1\">Then</span><br/>        Err_msg<span class=\"br0\">(</span> <span class=\"st0\">\"Error: n is to small\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n -<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        Err_msg <span class=\"st0\">\"Error: not possible to make singly\"</span> + _<br/>                 <span class=\"st0\">\" even magic square size \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> sq<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> magic_sum = n * <span class=\"br0\">(</span>n ^ <span class=\"nu0\">2</span> +<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> sq_d_2 = n \\ <span class=\"nu0\">2</span>, q2 = sq_d_2 ^ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> l = <span class=\"br0\">(</span>n -<span class=\"nu0\">2</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x = sq_d_2 \\ <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span>, y = <span class=\"nu0\">1</span>, nr = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> frmt = <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>n * n<span class=\"br0\">)</span><span class=\"br0\">)</span> +<span class=\"nu0\">1</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' fill pattern A C</span><br/>    <span class=\"co1\">'              D B</span><br/>    <span class=\"co1\">' main loop for creating magic square in section A</span><br/>    <span class=\"co1\">' the value for B,C and D is derived from A</span><br/>    <span class=\"co1\">' uses the FreeBASIC odd order magic square routine</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">If</span> sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            sq<span class=\"br0\">(</span>x         , y         <span class=\"br0\">)</span> = nr          <span class=\"co1\">' A</span><br/>            sq<span class=\"br0\">(</span>x + sq_d_2, y + sq_d_2<span class=\"br0\">)</span> = nr + q2     <span class=\"co1\">' B</span><br/>            sq<span class=\"br0\">(</span>x + sq_d_2, y         <span class=\"br0\">)</span> = nr + q2 * <span class=\"nu0\">2</span> <span class=\"co1\">' C</span><br/>            sq<span class=\"br0\">(</span>x         , y + sq_d_2<span class=\"br0\">)</span> = nr + q2 * <span class=\"nu0\">3</span> <span class=\"co1\">' D</span><br/>            <span class=\"kw1\">If</span> nr <span class=\"kw1\">Mod</span> sq_d_2 = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                y += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Else</span><br/>                x += <span class=\"nu0\">1</span>\u00a0: y -= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            nr += <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">If</span> x &gt; sq_d_2 <span class=\"kw1\">Then</span><br/>            x = <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><br/>                x += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Loop</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">If</span> y &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            y = sq_d_2<br/>            <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><br/>                y -= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Loop</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> nr &gt; q2<br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">' swap left side</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sq_d_2<br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> l<br/>            <span class=\"kw1\">Swap</span> sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, sq<span class=\"br0\">(</span>x,y + sq_d_2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"co1\">' make indent</span><br/>    y = <span class=\"br0\">(</span>sq_d_2 \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span> +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Swap</span> sq<span class=\"br0\">(</span><span class=\"nu0\">1</span>, y<span class=\"br0\">)</span>, sq<span class=\"br0\">(</span><span class=\"nu0\">1</span>, y + sq_d_2<span class=\"br0\">)</span> <span class=\"co1\">' was swapped, restore to orignal value</span><br/>    <span class=\"kw1\">Swap</span> sq<span class=\"br0\">(</span>l +<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span>, sq<span class=\"br0\">(</span>l +<span class=\"nu0\">1</span>, y + sq_d_2<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' swap right side</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sq_d_2<br/>        <span class=\"kw1\">For</span> x = n - l +<span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">Swap</span> sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, sq<span class=\"br0\">(</span>x,y + sq_d_2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' check columms and rows</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        nr = <span class=\"nu0\">0</span>\u00a0: l  = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            nr += sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>            l  += sq<span class=\"br0\">(</span>y,x<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">If</span> nr &lt;&gt; magic_sum <span class=\"kw1\">Or</span> l &lt;&gt; magic_sum <span class=\"kw1\">Then</span><br/>            Err_msg <span class=\"st0\">\"Error: value &lt;&gt; magic_sum\"</span><br/>            <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' check diagonals</span><br/>    nr = <span class=\"nu0\">0</span>\u00a0: l = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        nr += sq<span class=\"br0\">(</span>x, x<span class=\"br0\">)</span><br/>        l  += sq<span class=\"br0\">(</span>n - x +<span class=\"nu0\">1</span>, n - x +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">If</span> nr &lt;&gt; magic_sum <span class=\"kw1\">Or</span> l &lt;&gt; magic_sum <span class=\"kw1\">Then</span><br/>        Err_msg <span class=\"st0\">\"Error: value &lt;&gt; magic_sum\"</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"co1\">' printing square's on screen bigger when</span><br/>    <span class=\"co1\">' n &gt; 19 results in a wrapping of the line</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Single even magic square size: \"</span>; n; <span class=\"st0\">\"*\"</span>; n<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The magic sum = \"</span>; magic_sum<br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' output magic square to a file with the name provided</span><br/>    <span class=\"kw1\">If</span> filename &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span><br/>        nr = <span class=\"kw1\">FreeFile</span><br/>        <span class=\"kw1\">Open</span> filename <span class=\"kw1\">For</span> <span class=\"kw1\">Output</span> <span class=\"kw1\">As</span> <span class=\"co2\">#nr</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"Single even magic square size: \"; n; \"*\"; n</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"The magic sum = \"; magic_sum</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>        <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, Using frmt; sq(x,y);</span><br/>            <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Close</span> <span class=\"co2\">#nr</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>se_magicsq<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">\"magicse6.txt\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 102, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> magicSquareOdd<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">3</span> <span class=\"sy3\">||</span> n<span class=\"sy3\">%</span><span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"base must be odd and &gt; 2\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    value <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    gridSize <span class=\"sy2\">:=</span> n <span class=\"sy3\">*</span> n<br/>    c<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    result <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        result<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> value &lt;<span class=\"sy2\">=</span> gridSize <span class=\"sy1\">{</span><br/>        result<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> value<br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                r<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                r <span class=\"sy2\">=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>                c<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            r<span class=\"sy2\">--</span><br/>            c <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> result<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            r<span class=\"sy2\">--</span><br/>            c<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            r<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        value<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> magicSquareSinglyEven<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">6</span> <span class=\"sy3\">||</span> <span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"nu0\">4</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"base must be a positive multiple of 4 plus 2\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    size <span class=\"sy2\">:=</span> n <span class=\"sy3\">*</span> n<br/>    halfN <span class=\"sy2\">:=</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>    subSquareSize <span class=\"sy2\">:=</span> size <span class=\"sy3\">/</span> <span class=\"nu0\">4</span><br/>    subSquare<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> magicSquareOdd<span class=\"sy1\">(</span>halfN<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> err<br/>    <span class=\"sy1\">}</span><br/>    quadrantFactors <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    result <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        result<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; n<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; n<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            quadrant <span class=\"sy2\">:=</span> r<span class=\"sy3\">/</span>halfN<span class=\"sy3\">*</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> c<span class=\"sy3\">/</span>halfN<br/>            result<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> subSquare<span class=\"sy1\">[</span>r<span class=\"sy3\">%</span>halfN<span class=\"sy1\">][</span>c<span class=\"sy3\">%</span>halfN<span class=\"sy1\">]</span><br/>            result<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> quadrantFactors<span class=\"sy1\">[</span>quadrant<span class=\"sy1\">]</span> <span class=\"sy3\">*</span> subSquareSize<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    nColsLeft <span class=\"sy2\">:=</span> halfN <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>    nColsRight <span class=\"sy2\">:=</span> nColsLeft <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; halfN<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; n<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> c &lt; nColsLeft <span class=\"sy3\">||</span> c &gt;<span class=\"sy2\">=</span> n<span class=\"sy3\">-</span>nColsRight <span class=\"sy3\">||</span><br/>                <span class=\"sy1\">(</span>c <span class=\"sy3\">==</span> nColsLeft &amp;&amp; r <span class=\"sy3\">==</span> nColsLeft<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; r <span class=\"sy3\">==</span> nColsLeft <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                tmp <span class=\"sy2\">:=</span> result<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>                result<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> result<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>halfN<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>                result<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>halfN<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> tmp<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">6</span><br/>    msse<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> magicSquareSinglyEven<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> msse <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> row <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d \"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>n<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 106, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Map<span class=\"sy0\">.</span>Strict <span class=\"kw1\">as</span> M<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromJust<span class=\"sy0\">,</span> isJust<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Monoid <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>magic <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>magic n <span class=\"sy0\">=</span> mapAsTable <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>hiResMap n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Order of square -&gt; sequence numbers keyed by cartesian coordinates</span><br/>hiResMap <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>hiResMap n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> mapLux <span class=\"sy0\">=</span> luxMap n<br/>      mapSiam <span class=\"sy0\">=</span> siamMap n<br/>  <span class=\"kw1\">in</span> M<span class=\"sy0\">.</span>fromList <span class=\"sy0\">$</span><br/>     foldMap<br/>       <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>xy<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>           luxNums xy <span class=\"br0\">(</span>fromJust <span class=\"br0\">(</span>M<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> xy mapLux<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>M<span class=\"sy0\">.</span>toList mapSiam<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- LUX table coordinate -&gt; L|U|X -&gt; initial number -&gt; 4 numbered coordinates</span><br/>luxNums <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>luxNums xy lux n <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\x d <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>hiRes xy<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <span class=\"kw1\">case</span> lux <span class=\"kw1\">of</span><br/>    <span class=\"st0\">'L'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"st0\">'U'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"st0\">'X'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Size of square -&gt; integers keyed by coordinates -&gt; rows of integers</span><br/>mapAsTable <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>mapAsTable nCols xyMap <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> axis <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> nCols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>fromJust <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> M<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> xyMap<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>     <span class=\"br0\">(</span>axis <span class=\"sy0\">&gt;&gt;=</span> \\y <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>axis <span class=\"sy0\">&gt;&gt;=</span> \\x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Dimension of LUX table -&gt; LUX symbols keyed by coordinates</span><br/>luxMap <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>luxMap n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>M<span class=\"sy0\">.</span>fromList <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><br/>    <span class=\"br0\">(</span>\\y xs <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\x c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>luxPattern n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- LUX dimension -&gt; square of L|U|X cells with two mixed rows</span><br/>luxPattern <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>luxPattern n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"br0\">[</span>ls<span class=\"sy0\">,</span> us<span class=\"br0\">]</span> <span class=\"sy0\">=</span> replicate n <span class=\"sy0\">&lt;$&gt;</span> <span class=\"st0\">\"LU\"</span><br/>      <span class=\"br0\">[</span>lRow<span class=\"sy0\">,</span> xRow<span class=\"br0\">]</span> <span class=\"sy0\">=</span> replicate d <span class=\"sy0\">&lt;$&gt;</span> <span class=\"st0\">\"LX\"</span><br/>  <span class=\"kw1\">in</span> replicate n lRow <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">[</span>ls <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">'U'</span>\u00a0: ls<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">[</span>us <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">'L'</span>\u00a0: us<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&gt;</span><br/>     replicate <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> xRow<br/>\u00a0<br/><span class=\"co1\">-- Highest zero-based index of grid -&gt; Siamese indices keyed by coordinates</span><br/>siamMap <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>siamMap n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> uBound <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/>      sPath uBound sMap <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> n <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> newMap <span class=\"sy0\">=</span> M<span class=\"sy0\">.</span>insert <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> n sMap<br/>        <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> y <span class=\"sy0\">==</span> uBound <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> uBound <span class=\"nu0\">2</span><br/>             <span class=\"kw1\">then</span> newMap<br/>             <span class=\"kw1\">else</span> sPath uBound newMap <span class=\"br0\">(</span>nextSiam uBound sMap <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> sPath uBound <span class=\"br0\">(</span>M<span class=\"sy0\">.</span>fromList <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">-- Highest index of square -&gt; Siam xys so far -&gt; xy -&gt; next xy coordinate</span><br/>nextSiam <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>nextSiam uBound sMap <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> alt <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> a <span class=\"sy0\">&gt;</span> uBound <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uBound<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- Top right corner\u00a0?</span><br/>        <span class=\"sy0\">|</span> a <span class=\"sy0\">&gt;</span> uBound <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"co1\">-- beyond right edge\u00a0?</span><br/>        <span class=\"sy0\">|</span> b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> uBound<span class=\"br0\">)</span> <span class=\"co1\">-- above top edge\u00a0?</span><br/>        <span class=\"sy0\">|</span> isJust <span class=\"br0\">(</span>M<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> sMap<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">-- already filled\u00a0?</span><br/>        <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"co1\">-- Up one, right one.</span><br/>  <span class=\"kw1\">in</span> alt <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- LUX cell coordinate -&gt; four coordinates at higher resolution</span><br/>hiRes <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>hiRes <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">[</span>col<span class=\"sy0\">,</span> row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>col1<span class=\"sy0\">,</span> row1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span>col<span class=\"sy0\">,</span> row<span class=\"br0\">]</span><br/>  <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>col<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>col1<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>col<span class=\"sy0\">,</span> row1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>col1<span class=\"sy0\">,</span> row1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- TESTS ----------------------------------------------------------------------</span><br/>checked <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span><br/>checked square <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    diagonals <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    h:t <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">&lt;$&gt;</span> square <span class=\"sy0\">&lt;&gt;</span> transpose square <span class=\"sy0\">&lt;&gt;</span> diagonals square<br/>\u00a0<br/>table <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>table delim rows <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> justifyRight c n s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">(</span>replicate n c <span class=\"sy0\">&lt;&gt;</span> s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> intercalate delim <span class=\"sy0\">&lt;$&gt;</span><br/>     transpose<br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"sy0\">=&lt;&lt;</span> justifyRight <span class=\"st0\">' '</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> transpose rows<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span><br/>  \\n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> test <span class=\"sy0\">=</span> magic n<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"br0\">(</span>table <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span> test<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> checked test<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>odd =: i:@&lt;<a class=\"__cf_email__\" data-cfemail=\"0c224c21\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: |.\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>&amp;|:^:<span class=\"nu0\">2</span> &gt;:@<a class=\"__cf_email__\" data-cfemail=\"61084f21\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,~<br/>t =: <span class=\"sy0\">((</span>*: * <a class=\"__cf_email__\" data-cfemail=\"d8b1f698ec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">)</span> +\"<span class=\"nu0\">0</span> <span class=\"nu0\">2</span> odd<span class=\"sy0\">)</span>@-:<br/>l =: <span class=\"sy0\">(</span>f=:$~ # , #<span class=\"sy0\">)</span>@<span class=\"sy0\">((</span>&lt;. , &gt;.<span class=\"sy0\">)</span>@%&amp;<span class=\"nu0\">4</span> # <span class=\"sy0\">(</span>1: , 0:<span class=\"sy0\">))</span><br/>sh =: &lt;:@-: * <span class=\"sy0\">(</span>bn=:-: # 2:<span class=\"sy0\">)</span> #: <span class=\"sy0\">(</span>2: ^ &lt;<a class=\"__cf_email__\" data-cfemail=\"2a046a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%&amp;<span class=\"nu0\">4</span><span class=\"sy0\">)</span><br/>lm =: sh |.\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  l <br/>rm =: <a class=\"__cf_email__\" data-cfemail=\"197f597b77\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> #: &lt;:@<span class=\"sy0\">(</span>2: ^ &lt;:@&lt;<a class=\"__cf_email__\" data-cfemail=\"240a64\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%&amp;<span class=\"nu0\">4</span><span class=\"sy0\">)</span><br/>a =: <span class=\"sy0\">((</span><a class=\"__cf_email__\" data-cfemail=\"725f5c321e1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * {<a class=\"__cf_email__\" data-cfemail=\"16385662\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span> + lm * {:@t<span class=\"sy0\">)</span><br/>b =: <span class=\"sy0\">((</span><a class=\"__cf_email__\" data-cfemail=\"24090a645649\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <span class=\"nu0\">1</span>&amp;{@t<span class=\"sy0\">)</span> + rm * <span class=\"nu0\">2</span>&amp;{@t<span class=\"sy0\">)</span><br/>c =: <span class=\"sy0\">((</span>rm * <span class=\"nu0\">1</span>&amp;{@t<span class=\"sy0\">)</span> + <a class=\"__cf_email__\" data-cfemail=\"9cb1b2dceef1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <span class=\"nu0\">2</span>&amp;{@t<span class=\"sy0\">)</span><br/>d =: <span class=\"sy0\">((</span>lm * {<a class=\"__cf_email__\" data-cfemail=\"cee08eba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span> + <a class=\"__cf_email__\" data-cfemail=\"b5989bf5d9d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * {:@t<span class=\"sy0\">)</span><br/><span class=\"kw2\">m</span> =: <span class=\"sy0\">(</span>a ,\"<span class=\"nu0\">1</span> c<span class=\"sy0\">)</span> , d ,\"<span class=\"nu0\">1</span> b<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 85, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MagicSquareSinglyEven <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> magicSquareSinglyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">:</span> row<span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Magic constant:\u00a0%d \"</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareOdd<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base must be odd and &gt; 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> gridSize <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>value <span class=\"sy0\">&lt;=</span> gridSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    r<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    r <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    c<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">--;</span><br/>                c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">--;</span><br/>                c<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                r<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareSinglyEven<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base must be a positive \"</span><br/>                    <span class=\"sy0\">+</span> <span class=\"st0\">\"multiple of 4 plus 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> halfN <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> subSquareSize <span class=\"sy0\">=</span> size <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> subSquare <span class=\"sy0\">=</span> magicSquareOdd<span class=\"br0\">(</span>halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> quadrantFactors <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> quadrant <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>c <span class=\"sy0\">/</span> halfN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> subSquare<span class=\"br0\">[</span>r <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> quadrantFactors<span class=\"br0\">[</span>quadrant<span class=\"br0\">]</span> <span class=\"sy0\">*</span> subSquareSize<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> nColsLeft <span class=\"sy0\">=</span> halfN <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nColsRight <span class=\"sy0\">=</span> nColsLeft <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> halfN<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> nColsLeft <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> nColsRight<br/>                        <span class=\"sy0\">||</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> nColsLeft <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> tmp <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    result<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 70, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun magicSquareOdd<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> || n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Base must be odd and &gt; 2\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gridSize <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c <span class=\"sy0\">=</span> n / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>++value <span class=\"sy0\">&lt;=</span> gridSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> r++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                r <span class=\"sy0\">=</span> n - <span class=\"nu0\">1</span><br/>                c++<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r--<br/>            c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>r - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r--<br/>            c++<br/>        <span class=\"br0\">}</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> r++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun magicSquareSinglyEven<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span> || <span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Base must be a positive multiple of 4 plus 2\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> halfN <span class=\"sy0\">=</span> n / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subSquareSize <span class=\"sy0\">=</span> size / <span class=\"nu0\">4</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subSquare <span class=\"sy0\">=</span> magicSquareOdd<span class=\"br0\">(</span>halfN<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> quadrantFactors <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> quadrant <span class=\"sy0\">=</span> r / halfN <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>  + c / halfN<br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> subSquare<span class=\"br0\">[</span>r <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">%</span> halfN<span class=\"br0\">]</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> quadrantFactors<span class=\"br0\">[</span>quadrant<span class=\"br0\">]</span> <span class=\"sy0\">*</span> subSquareSize<br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nColsLeft <span class=\"sy0\">=</span> halfN / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nColsRight <span class=\"sy0\">=</span> nColsLeft - <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until halfN<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> nColsLeft || c <span class=\"sy0\">&gt;=</span> n - nColsRight || <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> nColsLeft <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">==</span> nColsLeft<span class=\"br0\">)</span> continue<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>r + halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>                result<span class=\"br0\">[</span>r + halfN<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>            <span class=\"br0\">}</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>ia in magicSquareSinglyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in ia<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%2d  \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant ${(n * n + 1) * n / 2}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre>35  1  6 26 19 24\n 3 32  7 21 23 25\n31  9  2 22 27 20\n 8 28 33 17 10 15\n30  5 34 12 14 16\n 4 36 29 13 18 11\n\nThe magic number is 111</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre>35  1  6 26 19 24\n 3 32  7 21 23 25\n31  9  2 22 27 20\n 8 28 33 17 10 15\n30  5 34 12 14 16\n 4 36 29 13 18 11\n\nThe magic number is 111</pre>"}, {"lang": "Python", "loc": 86, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>\u00a0<br/>LOG_10 <span class=\"sy0\">=</span> <span class=\"nu0\">2.302585092994</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># build odd magic square</span><br/><span class=\"kw1\">def</span> build_oms<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> s\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        s +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    i <span class=\"sy0\">=</span> s // <span class=\"nu0\">2</span><br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> p <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>s * s<span class=\"br0\">)</span>:<br/>        q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<br/>        ti <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> ti <span class=\"sy0\">&gt;=</span> s: ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        tj <span class=\"sy0\">=</span> j - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> tj <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: tj <span class=\"sy0\">=</span> s - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> q<span class=\"br0\">[</span>ti<span class=\"br0\">]</span><span class=\"br0\">[</span>tj<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>            ti <span class=\"sy0\">=</span> i<br/>            tj <span class=\"sy0\">=</span> j + <span class=\"nu0\">1</span><br/>        i <span class=\"sy0\">=</span> ti<br/>        j <span class=\"sy0\">=</span> tj<br/>        p <span class=\"sy0\">=</span> p + <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">,</span> s<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># build singly even magic square</span><br/><span class=\"kw1\">def</span> build_sems<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> s\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        s +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> s\u00a0% <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        s +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    z <span class=\"sy0\">=</span> s // <span class=\"nu0\">2</span><br/>    b <span class=\"sy0\">=</span> z * z<br/>    c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> * b<br/>    d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> * b<br/>    o <span class=\"sy0\">=</span> build_oms<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> z<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> z<span class=\"br0\">)</span>:<br/>            a <span class=\"sy0\">=</span> o<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>            q<span class=\"br0\">[</span>i + z<span class=\"br0\">]</span><span class=\"br0\">[</span>j + z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a + b<br/>            q<span class=\"br0\">[</span>i + z<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a + c<br/>            q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j + z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a + d<br/>\u00a0<br/>    lc <span class=\"sy0\">=</span> z // <span class=\"nu0\">2</span><br/>    rc <span class=\"sy0\">=</span> lc<br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> z<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> lc <span class=\"kw1\">or</span> i <span class=\"sy0\">&gt;</span> s - rc <span class=\"kw1\">or</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> lc <span class=\"kw1\">and</span> j <span class=\"sy0\">==</span> lc<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> j <span class=\"sy0\">==</span> lc<span class=\"br0\">)</span>:<br/>                    t <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>                    q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j + z<span class=\"br0\">]</span><br/>                    q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j + z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<br/>\u00a0<br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">,</span> s<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> format_sqr<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> l<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> l - <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        s <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> + s<br/>    <span class=\"kw1\">return</span> s + <span class=\"st0\">\" \"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> display<span class=\"br0\">(</span>q<span class=\"br0\">)</span>:<br/>    s <span class=\"sy0\">=</span> q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" - {0} x {1}<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + <span class=\"kw3\">math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>s * s<span class=\"br0\">)</span> / LOG_10<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span>:<br/>            stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span>format_sqr<span class=\"br0\">(</span><span class=\"st0\">\"{0}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Magic sum: {0}<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>s * <span class=\"br0\">(</span><span class=\"br0\">(</span>s * s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> // <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Singly Even Magic Square\"</span><span class=\"br0\">)</span><br/>display<span class=\"br0\">(</span>build_sems<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 40, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> odd_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  n.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> n.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> n<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j<span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> single_even_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"must be even, but not divisible by 4.\"</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> == <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"2x2 magic square not possible.\"</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">2</span><br/>\u00a0<br/>  order = <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><br/>  odd_square = odd_magic_square<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  to_add = <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> f<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><br/>  quarts = to_add.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> odd_square.<span class=\"me1\">dup</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span>row.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>el<span class=\"sy0\">|</span> el<span class=\"sy0\">+</span>f<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  sq = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  quarts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>quarts<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>d1,d2<span class=\"sy0\">|</span> sq <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>d1,d2<span class=\"br0\">]</span>.<span class=\"me1\">flatten</span><span class=\"br0\">}</span><br/>  quarts<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>quarts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>d1,d2<span class=\"sy0\">|</span> sq <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>d1,d2<span class=\"br0\">]</span>.<span class=\"me1\">flatten</span><span class=\"br0\">}</span><br/>\u00a0<br/>  sq = sq.<span class=\"me1\">transpose</span><br/>  order.<span class=\"me1\">times</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> sq<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">rotate</span>!<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  swap<span class=\"br0\">(</span>sq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>order<span class=\"br0\">]</span>, sq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">-</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  swap<span class=\"br0\">(</span>sq<span class=\"br0\">[</span>order<span class=\"br0\">]</span><span class=\"br0\">[</span>order<span class=\"br0\">]</span>, sq<span class=\"br0\">[</span>order<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">-</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> sq<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">rotate</span>!<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  randomize<span class=\"br0\">(</span>sq<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> swap<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>  a,b = b,a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> randomize<span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>  square.<span class=\"me1\">shuffle</span>.<span class=\"me1\">transpose</span>.<span class=\"me1\">shuffle</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> to_string<span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>  n = square.<span class=\"me1\">size</span><br/>  fmt = <span class=\"st0\">\"%#{(n*n).to_s.size + 1}d\"</span> <span class=\"sy0\">*</span> n<br/>  square.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>str,row<span class=\"sy0\">|</span> str <span class=\"sy0\">&lt;&lt;</span> fmt <span class=\"sy0\">%</span> row <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> to_string<span class=\"br0\">(</span>single_even_magic_square<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 54, "block": "<pre class=\"text highlighted_source\">class MagicSquareSinglyEven{<br/>   fcn init(n){ var result=magicSquareSinglyEven(n) }<br/>   fcn toString{<br/>      sink,n:=Sink(String),result.len();  // num collumns<br/>      fmt:=\"%2s \";<br/>      foreach row in (result)<br/>         { sink.write(row.apply('wrap(n){ fmt.fmt(n) }).concat(),\"\\n\") }<br/>      sink.write(\"\\nMagic constant:\u00a0%d\".fmt((n*n + 1)*n/2));<br/>      sink.close();<br/>   }<br/>   fcn magicSquareOdd(n){<br/>      if (n&lt;3 or n%2==0) throw(Exception.ValueError(\"base must be odd and &gt; 2\"));<br/>      value,gridSize,c,r:=0, n*n, n/2, 0;<br/>      result:=n.pump(List(),n.pump(List(),0).copy);  // array[n,n] of zero<br/>\u00a0<br/>      while((value+=1)&lt;=gridSize){<br/>\t result[r][c]=value;<br/>\t if(r==0){<br/>\t    if(c==n-1) r+=1;<br/>            else{ r=n-1; c+=1; }<br/>\t }<br/>\t else if(c==n-1){ r-=1; c=0; }<br/>\t else if(result[r-1][c+1]==0){ r-=1; c+=1; }<br/>\t else r+=1;<br/>      }<br/>      result;<br/>   }<br/>   fcn magicSquareSinglyEven(n){<br/>      if (n&lt;6 or (n-2)%4!=0)<br/>\t throw(Exception.ValueError(\"base must be a positive multiple of 4 +2\"));<br/>      size,halfN,subSquareSize:=n*n,  n/2, size/4;<br/>\u00a0<br/>      subSquare:=magicSquareOdd(halfN);<br/>      quadrantFactors:=T(0, 2, 3, 1);<br/>      result:=n.pump(List(),n.pump(List(),0).copy);  // array[n,n] of zero<br/>\u00a0<br/>      foreach r,c in (n,n){<br/>         quadrant:=(r/halfN)*2 + (c/halfN);<br/>\t result[r][c]=subSquare[r%halfN][c%halfN];<br/>\t result[r][c]+=quadrantFactors[quadrant]*subSquareSize;<br/>      }<br/>      nColsLeft,nColsRight:=halfN/2, nColsLeft-1;<br/>      foreach r,c in (halfN,n){<br/>         if ( c&lt;nColsLeft or c&gt;=(n-nColsRight) or <br/>              (c==nColsLeft and r==nColsLeft) ){<br/>\t    if(c==0 and r==nColsLeft) continue;<br/>\t    tmp:=result[r][c];<br/>\t    result[r][c]=result[r+halfN][c];<br/>\t    result[r+halfN][c]=tmp;<br/>\t }<br/>      }<br/>      result<br/>   }   <br/>}</pre>"}]}