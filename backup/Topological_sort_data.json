{"task": "Topological_sort", "blocks": [{"lang": "Ada", "loc": 52, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Vectors</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Containers</span>;<br/>\u00a0<br/><span class=\"kw3\">package</span> Digraphs <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Node_Idx_With_Null <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Natural;<br/>   <span class=\"kw3\">subtype</span> Node_Index <span class=\"kw1\">is</span> Node_Idx_With_Null <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Node_Idx_With_Null</span>'Last;<br/>   <span class=\"co1\">-- a Node_Index is a number from 1, 2, 3, ... and the representative of a node</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Graph_Type <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- make sure Node is in Graph (possibly without connections)</span><br/>   <span class=\"kw3\">procedure</span> Add_Node<br/>     <span class=\"br0\">(</span>Graph: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Graph_Type'Class; Node: Node_Index<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- insert an edge From-&gt;To into Graph; do nothing if already there</span><br/>   <span class=\"kw3\">procedure</span> Add_Connection<br/>     <span class=\"br0\">(</span>Graph: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Graph_Type'Class; From, To: Node_Index<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- get the largest Node_Index used in any Add_Node or Add_Connection op.</span><br/>   <span class=\"co1\">-- iterate over all nodes of Graph: \"for I in 1 .. Graph.Node_Count loop ...\"</span><br/>   <span class=\"kw3\">function</span> Node_Count<span class=\"br0\">(</span>Graph: Graph_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Node_Idx_With_Null;<br/>\u00a0<br/>   <span class=\"co1\">-- remove an edge From-&gt;To from Fraph; do nothing if not there</span><br/>   <span class=\"co1\">-- Graph.Node_Count is not changed</span><br/>   <span class=\"kw3\">procedure</span> Del_Connection<br/>     <span class=\"br0\">(</span>Graph: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Graph_Type'Class; From, To: Node_Index<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- check if an edge From-&gt;to exists in Graph</span><br/>   <span class=\"kw3\">function</span> Connected<br/>     <span class=\"br0\">(</span>Graph: Graph_Type; From, To: Node_Index<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/>\u00a0<br/>   <span class=\"co1\">-- data structure to store a list of nodes</span><br/>   <span class=\"kw3\">package</span> Node_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Vectors<span class=\"br0\">(</span>Positive, Node_Index<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- get a list of all nodes From-&gt;Somewhere in Graph</span><br/>   <span class=\"kw3\">function</span> All_Connections<br/>     <span class=\"br0\">(</span>Graph: Graph_Type; From: Node_Index<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Node_Vec.<span class=\"me1\">Vector</span>;<br/>\u00a0<br/>   Graph_Is_Cyclic: <span class=\"kw1\">exception</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- a depth-first search to find a topological sorting of the nodes</span><br/>   <span class=\"co1\">-- raises Graph_Is_Cyclic if no topological sorting is possible</span><br/>   <span class=\"kw3\">function</span> Top_Sort<br/>     <span class=\"br0\">(</span>Graph: Graph_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Node_Vec.<span class=\"me1\">Vector</span>;<br/>\u00a0<br/><span class=\"kw3\">private</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Conn_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Vectors<span class=\"br0\">(</span>Node_Index, Node_Vec.<span class=\"me1\">Vector</span>, Node_Vec.<span class=\"st0\">\"=\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Graph_Type <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Conn_Vec.<span class=\"me1\">Vector</span> <span class=\"kw3\">with</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Digraphs;</pre>"}, {"lang": "Bracmat", "loc": 49, "block": "<pre class=\"text highlighted_source\">(     (\"des_system_lib\".std synopsys \"std_cell_lib\" \"des_system_lib\" dw02 dw01 ramlib ieee)<br/>      (dw01.ieee dw01 dware gtech)<br/>      (dw02.ieee dw02 dware)<br/>      (dw03.std synopsys dware dw03 dw02 dw01 ieee gtech)<br/>      (dw04.dw04 ieee dw01 dware gtech)<br/>      (dw05.dw05 ieee dware)<br/>      (dw06.dw06 ieee dware)<br/>      (dw07.ieee dware)<br/>      (dware.ieee dware)<br/>      (gtech.ieee gtech)<br/>      (ramlib.std ieee)<br/>      (\"std_cell_lib\".ieee \"std_cell_lib\")<br/>      (synopsys.)<br/>      (cycle-11.cycle-12)<br/>      (cycle-12.cycle-11)<br/>      (cycle-21.dw01 cycle-22 dw02 dw03)<br/>      (cycle-22.cycle-21 dw01 dw04)<br/> \u00a0:\u00a0?libdeps<br/>&amp;\u00a0:?indeps<br/>&amp; ( toposort<br/>  =   A Z res module dependants todo done<br/>    .  \u00a0!arg:(?todo.?done)<br/>      &amp; ( areDone<br/>        =   <br/>          .  \u00a0!arg:<br/>            |    \u00a0!arg<br/>               \u00a0:   (\u00a0%@<br/>                   \u00a0: [%(\u00a0!module+!done+!indeps:?+(?\u00a0!sjt\u00a0?)+?<br/>                        |   ~(!libdeps:? (!sjt.?)\u00a0?)<br/>                          &amp;\u00a0!sjt\u00a0!indeps:?indeps<br/>                        )<br/>                    )<br/>                   \u00a0?arg<br/>              &amp; areDone$!arg<br/>        )<br/>      &amp; (    \u00a0!todo<br/>           \u00a0:  \u00a0?A<br/>                (?module.?dependants&amp;areDone$!dependants)<br/>                (\u00a0?Z<br/>                &amp; toposort$(!A\u00a0!Z.!done\u00a0!module):?res<br/>                )<br/>          &amp;\u00a0!res<br/>        | (!todo.!done)<br/>        )<br/>  )<br/>&amp; toposort$(!libdeps.):(?cycles.?res)<br/>&amp; out$(\"<br/>compile order:\"\u00a0!indeps\u00a0!res \"\\ncycles:\"\u00a0!cycles)<br/>);</pre>"}, {"lang": "C", "loc": 122, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> input<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>\t<span class=\"st0\">\"des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw01             ieee dw01 dware gtech<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw02             ieee dw02 dware<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw04             dw04 ieee dw01 dware gtech<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw05             dw05 ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw06             dw06 ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dw07             ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"dware            ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"gtech            ieee gtech<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"ramlib           std ieee<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"std_cell_lib     ieee std_cell_lib<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"synopsys<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"cycle_11\t  cycle_12<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"cycle_12\t  cycle_11<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"cycle_21\t  dw01 cycle_22 dw02 dw03<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"cycle_22\t  cycle_21 dw01 dw04\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> item_t item_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>item<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> item_t <span class=\"br0\">{</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"sy0\">;</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deps<span class=\"sy0\">,</span> n_deps<span class=\"sy0\">,</span> idx<span class=\"sy0\">,</span> depth<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> get_item<span class=\"br0\">(</span>item <span class=\"sy0\">*</span>list<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>len<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\titem lst <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>list<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tlst <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>list <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>lst<span class=\"sy0\">,</span> <span class=\"sy0\">++*</span>len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>item_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ti <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>lst <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>item_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlst<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">idx</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\tlst<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> add_dep<span class=\"br0\">(</span>item it<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>it<span class=\"sy0\">-&gt;</span>idx <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\tit<span class=\"sy0\">-&gt;</span>deps <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>it<span class=\"sy0\">-&gt;</span>deps<span class=\"sy0\">,</span> <span class=\"br0\">(</span>it<span class=\"sy0\">-&gt;</span>n_deps <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tit<span class=\"sy0\">-&gt;</span>deps<span class=\"br0\">[</span>it<span class=\"sy0\">-&gt;</span>n_deps<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> parse_input<span class=\"br0\">(</span>item <span class=\"sy0\">*</span>ret<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n_items <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> parent<span class=\"sy0\">,</span> idx<span class=\"sy0\">;</span><br/>\titem list <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>word<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>we<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> input<span class=\"sy0\">;</span> <span class=\"sy0\">;</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=</span> strtok_r<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> word <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> word <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>word <span class=\"sy0\">=</span> strtok_r<span class=\"br0\">(</span>word<span class=\"sy0\">,</span> <span class=\"st0\">\" <span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>we<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\tidx <span class=\"sy0\">=</span> get_item<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>list<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>n_items<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i<span class=\"br0\">)</span> parent <span class=\"sy0\">=</span> idx<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span>    add_dep<span class=\"br0\">(</span>list <span class=\"sy0\">+</span> parent<span class=\"sy0\">,</span> idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"sy0\">*</span>ret <span class=\"sy0\">=</span> list<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> n_items<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* recursively resolve compile order; negative means loop */</span><br/><span class=\"kw4\">int</span> get_depth<span class=\"br0\">(</span>item list<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> idx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> bad<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> max<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">deps</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>t <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">depth</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> t<span class=\"sy0\">;</span><br/>\u00a0<br/>\tlist<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">=</span> bad<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>max <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">n_deps</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>t <span class=\"sy0\">=</span> get_depth<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">deps</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> bad<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tmax <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>max <span class=\"sy0\">&lt;</span> t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> max <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> list<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">=</span> max<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> bad <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> max<span class=\"sy0\">,</span> min<span class=\"sy0\">;</span><br/>\titem items<span class=\"sy0\">;</span><br/>\tn <span class=\"sy0\">=</span> parse_input<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>items<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">&amp;&amp;</span> get_depth<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> bad<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> bad<span class=\"sy0\">--;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> max <span class=\"sy0\">=</span> min <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span> max <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">depth</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">&lt;</span> min<span class=\"br0\">)</span> min <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">depth</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Compile order:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> min<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"   [unorderable]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>\t   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d:\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>items<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">depth</span> <span class=\"sy0\">==</span> i<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span><span class=\"sy0\">,</span> items<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 189, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/>\u00a0<br/>template <span class=\"sy0\">&lt;</span>typename Goal<span class=\"sy0\">&gt;</span><br/>class topological_sorter<br/><span class=\"br0\">{</span><br/>protected<span class=\"sy0\">:</span><br/>\t<span class=\"kw4\">struct</span> relations<br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy0\">::</span><span class=\"kw4\">size_t</span><br/>\t\t\tdependencies<span class=\"sy0\">;</span><br/>\t\tstd<span class=\"sy0\">::</span><span class=\"me2\">set</span><span class=\"sy0\">&lt;</span>Goal<span class=\"sy0\">&gt;</span><br/>\t\t\tdependents<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\tstd<span class=\"sy0\">::</span><span class=\"me2\">map</span><span class=\"sy0\">&lt;</span>Goal<span class=\"sy0\">,</span> relations<span class=\"sy0\">&gt;</span> <br/>\t\tmap<span class=\"sy0\">;</span>\t<br/>public<span class=\"sy0\">:</span>\t<br/>\t<span class=\"kw4\">void</span><br/>\t\tadd_goal<span class=\"br0\">(</span>Goal const<span class=\"sy0\">&amp;</span> goal<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tmap<span class=\"br0\">[</span>goal<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">void</span><br/>\t\tadd_dependency<span class=\"br0\">(</span>Goal const<span class=\"sy0\">&amp;</span> goal<span class=\"sy0\">,</span> Goal const<span class=\"sy0\">&amp;</span> dependency<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>dependency <span class=\"sy0\">==</span> goal<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\tauto<span class=\"sy0\">&amp;</span><br/>\t\t\tdependents <span class=\"sy0\">=</span> map<span class=\"br0\">[</span>dependency<span class=\"br0\">]</span>.<span class=\"me1\">dependents</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>dependents.<span class=\"me1\">find</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span> <span class=\"sy0\">==</span> dependents.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tdependents.<span class=\"me1\">insert</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"sy0\">++</span>map<span class=\"br0\">[</span>goal<span class=\"br0\">]</span>.<span class=\"me1\">dependencies</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\ttemplate <span class=\"sy0\">&lt;</span>typename Container<span class=\"sy0\">&gt;</span><br/>\t<span class=\"kw4\">void</span><br/>\t\tadd_dependencies<span class=\"br0\">(</span>Goal const<span class=\"sy0\">&amp;</span> goal<span class=\"sy0\">,</span> Container const<span class=\"sy0\">&amp;</span> dependencies<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> dependency <span class=\"sy0\">:</span> dependencies<span class=\"br0\">)</span><br/>\t\t\tadd_dependency<span class=\"br0\">(</span>goal<span class=\"sy0\">,</span> dependency<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\ttemplate <span class=\"sy0\">&lt;</span>typename ResultContainer<span class=\"sy0\">,</span> typename CyclicContainer<span class=\"sy0\">&gt;</span><br/>\t<span class=\"kw4\">void</span><br/>\t\tdestructive_sort<span class=\"br0\">(</span>ResultContainer<span class=\"sy0\">&amp;</span> sorted<span class=\"sy0\">,</span> CyclicContainer<span class=\"sy0\">&amp;</span> unsortable<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tsorted.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tunsortable.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> lookup <span class=\"sy0\">:</span> map<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span><br/>\t\t\t\tgoal <span class=\"sy0\">=</span> lookup.<span class=\"me1\">first</span><span class=\"sy0\">,</span><br/>\t\t\t\trelations <span class=\"sy0\">=</span> lookup.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>relations.<span class=\"me1\">dependencies</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\tsorted.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"kw4\">size_t</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> index <span class=\"sy0\">&lt;</span> sorted.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>index<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> goal <span class=\"sy0\">:</span> map<span class=\"br0\">[</span>sorted<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">dependents</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>map<span class=\"br0\">[</span>goal<span class=\"br0\">]</span>.<span class=\"me1\">dependencies</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tsorted.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> lookup <span class=\"sy0\">:</span> map<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span><br/>\t\t\t\tgoal <span class=\"sy0\">=</span> lookup.<span class=\"me1\">first</span><span class=\"sy0\">,</span><br/>\t\t\t\trelations <span class=\"sy0\">=</span> lookup.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>relations.<span class=\"me1\">dependencies</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\tunsortable.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\ttemplate <span class=\"sy0\">&lt;</span>typename ResultContainer<span class=\"sy0\">,</span> typename CyclicContainer<span class=\"sy0\">&gt;</span><br/>\t<span class=\"kw4\">void</span><br/>\t\tsort<span class=\"br0\">(</span>ResultContainer<span class=\"sy0\">&amp;</span> sorted<span class=\"sy0\">,</span> CyclicContainer<span class=\"sy0\">&amp;</span> unsortable<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ttopological_sorter<span class=\"sy0\">&lt;</span>Goal<span class=\"sy0\">&gt;</span><br/>\t\t\ttemporary <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">;</span><br/>\t\ttemporary.<span class=\"me1\">destructive_sort</span><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span> unsortable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">void</span><br/>\t\tclear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tmap.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>\tExample usage with text strings<br/>*/</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/>using namespace <br/>\tstd<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span><br/>\tdisplay_heading<span class=\"br0\">(</span>string const<span class=\"sy0\">&amp;</span> message<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tcout <span class=\"sy0\">&lt;&lt;</span> endl <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"~ \"</span> <span class=\"sy0\">&lt;&lt;</span> message <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" ~\"</span> <span class=\"sy0\">&lt;&lt;</span> endl<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> <br/>\tdisplay_results<span class=\"br0\">(</span>string const<span class=\"sy0\">&amp;</span> input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\ttopological_sorter<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span><br/>\t\tsorter<span class=\"sy0\">;</span><br/>\tvector<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span><br/>\t\tsorted<span class=\"sy0\">,</span> <br/>\t\tunsortable<span class=\"sy0\">;</span><br/>\tstringstream <br/>\t\tlines<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring <br/>\t\tline<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>getline<span class=\"br0\">(</span>lines<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstringstream <br/>\t\t\tbuffer<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstring <br/>\t\t\tgoal<span class=\"sy0\">,</span> <br/>\t\t\tdependency<span class=\"sy0\">;</span><br/>\t\tbuffer <span class=\"sy0\">&gt;&gt;</span> goal<span class=\"sy0\">;</span><br/>\t\tsorter.<span class=\"me1\">add_goal</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>buffer <span class=\"sy0\">&gt;&gt;</span> dependency<span class=\"br0\">)</span>         <br/>\t\t\tsorter.<span class=\"me1\">add_dependency</span><span class=\"br0\">(</span>goal<span class=\"sy0\">,</span> dependency<span class=\"br0\">)</span><span class=\"sy0\">;</span>          <br/>\t<span class=\"br0\">}</span><br/>\tsorter.<span class=\"me1\">destructive_sort</span><span class=\"br0\">(</span>sorted<span class=\"sy0\">,</span> unsortable<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>sorted.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\tdisplay_heading<span class=\"br0\">(</span><span class=\"st0\">\"Error: no independent variables found!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tdisplay_heading<span class=\"br0\">(</span><span class=\"st0\">\"Result\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> goal <span class=\"sy0\">:</span> sorted<span class=\"br0\">)</span><br/>\t\t\tcout <span class=\"sy0\">&lt;&lt;</span> goal <span class=\"sy0\">&lt;&lt;</span> endl<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>unsortable.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tdisplay_heading<span class=\"br0\">(</span><span class=\"st0\">\"Error: cyclic dependencies detected!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> goal <span class=\"sy0\">:</span> unsortable<span class=\"br0\">)</span><br/>\t\t\tcout <span class=\"sy0\">&lt;&lt;</span> goal <span class=\"sy0\">&lt;&lt;</span> endl<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span>\t<br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> <br/>\tmain<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> argv<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span>  <br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argc <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstring <br/>\t\t\texample <span class=\"sy0\">=</span> <br/>\t\t<span class=\"st0\">\"des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw01             ieee dw01 dware gtech<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw02             ieee dw02 dware<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw04             dw04 ieee dw01 dware gtech<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw05             dw05 ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw06             dw06 ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dw07             ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"dware            ieee dware<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"gtech            ieee gtech<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"ramlib           std ieee<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"std_cell_lib     ieee std_cell_lib<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"synopsys<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"cycle_11\t  cycle_12<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"cycle_12\t  cycle_11<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"cycle_21\t  dw01 cycle_22 dw02 dw03<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"cycle_22\t  cycle_21 dw01 dw04\"</span><span class=\"sy0\">;</span><br/>\t\tdisplay_heading<span class=\"br0\">(</span><span class=\"st0\">\"Example: each line starts with a goal followed by it's dependencies\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcout <span class=\"sy0\">&lt;&lt;</span> example <span class=\"sy0\">&lt;&lt;</span> endl<span class=\"sy0\">;</span>\t<br/>\t\tdisplay_results<span class=\"br0\">(</span>example<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdisplay_heading<span class=\"br0\">(</span><span class=\"st0\">\"Enter lines of data (press enter when finished)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstring<br/>\t\t\tline<span class=\"sy0\">,</span> <br/>\t\t\tdata<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>getline<span class=\"br0\">(</span>cin<span class=\"sy0\">,</span> line<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>line.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tdata <span class=\"sy0\">+=</span> line <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>data.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tdisplay_results<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tifstream<br/>\t\t\tfile<span class=\"br0\">(</span><span class=\"sy0\">*</span>argv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">typedef</span> istreambuf_iterator<span class=\"sy0\">&lt;</span>char<span class=\"sy0\">&gt;</span><br/>\t\t\titerator<span class=\"sy0\">;</span><br/>\t\tdisplay_results<span class=\"br0\">(</span>string<span class=\"br0\">(</span>iterator<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">,</span> iterator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++17", "loc": 152, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;unordered_map&gt;</span><br/><span class=\"co2\">#include &lt;unordered_set&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/>template <span class=\"sy0\">&lt;</span>typename ValueType<span class=\"sy0\">&gt;</span><br/>class topological_sorter<br/><span class=\"br0\">{</span><br/>public<span class=\"sy0\">:</span><br/>    using value_type <span class=\"sy0\">=</span> ValueType<span class=\"sy0\">;</span><br/>\u00a0<br/>protected<span class=\"sy0\">:</span><br/>    <span class=\"kw4\">struct</span> relations<br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy0\">::</span><span class=\"kw4\">size_t</span> dependencies <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">unordered_set</span><span class=\"sy0\">&lt;</span>value_type<span class=\"sy0\">&gt;</span> dependents <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    std<span class=\"sy0\">::</span><span class=\"me2\">unordered_map</span><span class=\"sy0\">&lt;</span>value_type<span class=\"sy0\">,</span> relations<span class=\"sy0\">&gt;</span> _map <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>public<span class=\"sy0\">:</span><br/>    <span class=\"kw4\">void</span> add<span class=\"br0\">(</span><span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>object<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        _map.<span class=\"me1\">try_emplace</span><span class=\"br0\">(</span>object<span class=\"sy0\">,</span> relations <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> add<span class=\"br0\">(</span><span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>object<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>dependency<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dependency <span class=\"sy0\">==</span> object<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> <span class=\"sy0\">&amp;</span>dependents <span class=\"sy0\">=</span> _map<span class=\"br0\">[</span>dependency<span class=\"br0\">]</span>.<span class=\"me1\">dependents</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dependents.<span class=\"me1\">find</span><span class=\"br0\">(</span>object<span class=\"br0\">)</span> <span class=\"sy0\">==</span> std<span class=\"sy0\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>dependents<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            dependents.<span class=\"me1\">insert</span><span class=\"br0\">(</span>object<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"sy0\">++</span>_map<span class=\"br0\">[</span>object<span class=\"br0\">]</span>.<span class=\"me1\">dependencies</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    template <span class=\"sy0\">&lt;</span>typename Container<span class=\"sy0\">&gt;</span><br/>    <span class=\"kw4\">void</span> add<span class=\"br0\">(</span><span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>object<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> Container <span class=\"sy0\">&amp;</span>dependencies<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> <span class=\"kw4\">const</span> <span class=\"sy0\">&amp;</span>dependency <span class=\"sy0\">:</span> dependencies<span class=\"br0\">)</span> add<span class=\"br0\">(</span>object<span class=\"sy0\">,</span> dependency<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> add<span class=\"br0\">(</span><span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>object<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> std<span class=\"sy0\">::</span><span class=\"me2\">initializer_list</span><span class=\"sy0\">&lt;</span>value_type<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&amp;</span>dependencies<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        add<span class=\"sy0\">&lt;</span>std<span class=\"sy0\">::</span><span class=\"me2\">initializer_list</span><span class=\"sy0\">&lt;</span>value_type<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>object<span class=\"sy0\">,</span> dependencies<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    template<span class=\"sy0\">&lt;</span>typename... <span class=\"me1\">Args</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"kw4\">void</span> add<span class=\"br0\">(</span><span class=\"kw4\">const</span> value_type <span class=\"sy0\">&amp;</span>object<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> Args<span class=\"sy0\">&amp;</span>... <span class=\"me1\">dependencies</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>add<span class=\"br0\">(</span>object<span class=\"sy0\">,</span> dependencies<span class=\"br0\">)</span><span class=\"sy0\">,</span> ...<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> sort<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">vector</span><span class=\"sy0\">&lt;</span>value_type<span class=\"sy0\">&gt;</span> sorted<span class=\"sy0\">,</span> cycled<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> map <span class=\"br0\">{</span> _map <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">[</span>object<span class=\"sy0\">,</span> relations<span class=\"br0\">]</span> <span class=\"sy0\">:</span> map<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>relations.<span class=\"me1\">dependencies</span><span class=\"br0\">)</span> sorted.<span class=\"me1\">emplace_back</span><span class=\"br0\">(</span>object<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>decltype<span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"me2\">size</span><span class=\"br0\">(</span>sorted<span class=\"br0\">)</span><span class=\"br0\">)</span> idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> idx <span class=\"sy0\">&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">size</span><span class=\"br0\">(</span>sorted<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>idx<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> object <span class=\"sy0\">:</span> map<span class=\"br0\">[</span>sorted<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">dependents</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!--</span>map<span class=\"br0\">[</span>object<span class=\"br0\">]</span>.<span class=\"me1\">dependencies</span><span class=\"br0\">)</span> sorted.<span class=\"me1\">emplace_back</span><span class=\"br0\">(</span>object<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">[</span>object<span class=\"sy0\">,</span> relations<span class=\"br0\">]</span> <span class=\"sy0\">:</span> map<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>relations.<span class=\"me1\">dependencies</span><span class=\"br0\">)</span> cycled.<span class=\"me1\">emplace_back</span><span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>object<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> std<span class=\"sy0\">::</span><span class=\"me2\">pair</span><span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>sorted<span class=\"br0\">)</span><span class=\"sy0\">,</span> std<span class=\"sy0\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>cycled<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        _map.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>\tExample usage with shared_ptr to class<br/>*/</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;memory&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    using namespace std<span class=\"sy0\">::</span><span class=\"me2\">string_literals</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">struct</span> task<br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">string</span> message<span class=\"sy0\">;</span><br/>\u00a0<br/>        task<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy0\">::</span><span class=\"me2\">string</span> <span class=\"sy0\">&amp;</span>v<span class=\"br0\">)</span> <span class=\"sy0\">:</span> message <span class=\"br0\">{</span> v <span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        ~task<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> message<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" - destroyed\"</span> <span class=\"sy0\">&lt;&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">endl</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    using task_ptr <span class=\"sy0\">=</span> std<span class=\"sy0\">::</span><span class=\"me2\">shared_ptr</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>    std<span class=\"sy0\">::</span><span class=\"me2\">vector</span><span class=\"sy0\">&lt;</span>task_ptr<span class=\"sy0\">&gt;</span> tasks<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// defining simple tasks</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"A - depends on B and C\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>    <span class=\"co1\">//0</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"B - depends on none\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>       <span class=\"co1\">//1</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"C - depends on D and E\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>    <span class=\"co1\">//2</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"D - depends on none\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>       <span class=\"co1\">//3</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"E - depends on F, G and H\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"co1\">//4</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"F - depends on I\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>          <span class=\"co1\">//5</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"G - depends on none\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>       <span class=\"co1\">//6</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"H - depends on none\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>       <span class=\"co1\">//7</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">make_shared</span><span class=\"sy0\">&lt;</span>task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"I - depends on none\"</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>       <span class=\"co1\">//8</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    topological_sorter<span class=\"sy0\">&lt;</span>task_ptr<span class=\"sy0\">&gt;</span> resolver<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// now setting relations between them as described above</span><br/>    resolver.<span class=\"me1\">add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//resolver.add(tasks[1]); // no need for this since the task was already mentioned as a dependency</span><br/>    resolver.<span class=\"me1\">add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//resolver.add(tasks[3]); // no need for this since the task was already mentioned as a dependency</span><br/>    resolver.<span class=\"me1\">add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// using templated add with fold expression</span><br/>    resolver.<span class=\"me1\">add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//resolver.add(tasks[6]); // no need for this since the task was already mentioned as a dependency</span><br/>    <span class=\"co1\">//resolver.add(tasks[7]); // no need for this since the task was already mentioned as a dependency</span><br/>\u00a0<br/>    <span class=\"co1\">//resolver.add(tasks[3], tasks[0]); // uncomment this line to test cycled dependency</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">[</span>sorted<span class=\"sy0\">,</span> cycled<span class=\"br0\">]</span> <span class=\"sy0\">=</span> resolver.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"me2\">empty</span><span class=\"br0\">(</span>cycled<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> d<span class=\"sy0\">:</span> sorted<span class=\"br0\">)</span><br/>            std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> d<span class=\"sy0\">-&gt;</span>message <span class=\"sy0\">&lt;&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">endl</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"Cycled dependencies detected: \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> const<span class=\"sy0\">&amp;</span> d<span class=\"sy0\">:</span> cycled<span class=\"br0\">)</span><br/>            std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> d<span class=\"sy0\">-&gt;</span>message<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">endl</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">//tasks.clear(); // uncomment this line to distroy all tasks in sorted order.</span><br/>\u00a0<br/>    std<span class=\"sy0\">::</span><span class=\"me2\">cout</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"exiting...\"</span> <span class=\"sy0\">&lt;&lt;</span> std<span class=\"sy0\">::</span><span class=\"me2\">endl</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 142, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">namespace</span> Algorithms<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> TopologicalSorter<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">class</span> Relations<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Dependencies <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">public</span> HashSet<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span> Dependents <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> Dictionary<span class=\"sy0\">&lt;</span>ValueType, Relations<span class=\"sy0\">&gt;</span> _map <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span>ValueType, Relations<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>ValueType obj<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>_map<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">)</span> _map<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>obj, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Relations<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>ValueType obj, ValueType dependency<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dependency<span class=\"sy0\">.</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>_map<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>dependency<span class=\"br0\">)</span><span class=\"br0\">)</span> _map<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>dependency, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Relations<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> dependents <span class=\"sy0\">=</span> _map<span class=\"br0\">[</span>dependency<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Dependents</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dependents<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                dependents<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>_map<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">)</span> _map<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>obj, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Relations<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"sy0\">++</span>_map<span class=\"br0\">[</span>obj<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Dependencies</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>ValueType obj, IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span> dependencies<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> dependency <span class=\"kw1\">in</span> dependencies<span class=\"br0\">)</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>obj, dependency<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>ValueType obj, <span class=\"kw1\">params</span> ValueType<span class=\"br0\">[</span><span class=\"br0\">]</span> dependencies<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">Add</span><span class=\"br0\">(</span>obj, dependencies <span class=\"kw1\">as</span> IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Tuple<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span>, IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;&gt;</span> Sort<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span> sorted <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, cycled <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> map <span class=\"sy0\">=</span> _map<span class=\"sy0\">.</span><span class=\"me1\">ToDictionary</span><span class=\"br0\">(</span>kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"me1\">Key</span>, kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            sorted<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>map<span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Dependencies</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"me1\">Key</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> idx <span class=\"sy0\">&lt;</span> sorted<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>idx<span class=\"br0\">)</span> sorted<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>map<span class=\"br0\">[</span>sorted<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Dependents</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>k <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">--</span>map<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Dependencies</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            cycled<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>map<span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Dependencies</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>kvp <span class=\"sy0\">=&gt;</span> kvp<span class=\"sy0\">.</span><span class=\"me1\">Key</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;</span>, IEnumerable<span class=\"sy0\">&lt;</span>ValueType<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>sorted, cycled<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _map<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>\tExample usage with Task object<br/>*/</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ExampleApplication<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">Algorithms</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Task<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Message<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> tasks <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span><br/>            <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"A - depends on B and C\"</span> <span class=\"br0\">}</span>,    <span class=\"co1\">//0</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"B - depends on none\"</span> <span class=\"br0\">}</span>,       <span class=\"co1\">//1</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"C - depends on D and E\"</span> <span class=\"br0\">}</span>,    <span class=\"co1\">//2</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"D - depends on none\"</span> <span class=\"br0\">}</span>,       <span class=\"co1\">//3</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"E - depends on F, G and H\"</span> <span class=\"br0\">}</span>, <span class=\"co1\">//4</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"F - depends on I\"</span> <span class=\"br0\">}</span>,          <span class=\"co1\">//5</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"G - depends on none\"</span> <span class=\"br0\">}</span>,       <span class=\"co1\">//6</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"H - depends on none\"</span> <span class=\"br0\">}</span>,       <span class=\"co1\">//7</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Task<span class=\"br0\">{</span> Message <span class=\"sy0\">=</span> <span class=\"st0\">\"I - depends on none\"</span> <span class=\"br0\">}</span>,       <span class=\"co1\">//8</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            TopologicalSorter<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span> resolver <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TopologicalSorter<span class=\"sy0\">&lt;</span>Task<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// now setting relations between them as described above</span><br/>            resolver<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//resolver.Add(tasks[1]); // no need for this since the task was already mentioned as a dependency</span><br/>            resolver<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> tasks<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//resolver.Add(tasks[3]); // no need for this since the task was already mentioned as a dependency</span><br/>            resolver<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            resolver<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>tasks<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, tasks<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//resolver.Add(tasks[6]); // no need for this since the task was already mentioned as a dependency</span><br/>            <span class=\"co1\">//resolver.Add(tasks[7]); // no need for this since the task was already mentioned as a dependency</span><br/>\u00a0<br/>            <span class=\"co1\">//resolver.Add(tasks[3], tasks[0]); // uncomment this line to test cycled dependency</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> resolver<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> sorted <span class=\"sy0\">=</span> result<span class=\"sy0\">.</span><span class=\"me1\">Item1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> cycled <span class=\"sy0\">=</span> result<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>cycled<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> d <span class=\"kw1\">in</span> sorted<span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>d<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Cycled dependencies detected: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> d <span class=\"kw1\">in</span> cycled<span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{d.Message[0]} \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"exiting...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 73, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>seq<span class=\"sy0\">-</span>utils<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dep<br/>  <span class=\"st0\">\"Constructs a single-key dependence, represented as a map from<br/>   item to a set of items, ensuring that item is not in the set.\"</span><br/>  <span class=\"br0\">[</span>item items<span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span>item <span class=\"br0\">(</span>difference <span class=\"br0\">(</span><span class=\"kw1\">set</span> items<span class=\"br0\">)</span> <span class=\"br0\">(</span>list item<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> empty<span class=\"sy0\">-</span>dep<br/>  <span class=\"st0\">\"Constructs a single-key dependence from item to an empty set.\"</span><br/>  <span class=\"br0\">[</span>item<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>dep item '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> pair<span class=\"sy0\">-</span>dep<br/>  <span class=\"st0\">\"Invokes dep after destructuring item and items from the argument.\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span>item items<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>dep item items<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> default<span class=\"sy0\">-</span>deps<br/>  <span class=\"st0\">\"Constructs a default dependence map taking every item<br/>   in the argument to an empty set\"</span><br/>  <span class=\"br0\">[</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> merge<span class=\"sy0\">-</span>with union <span class=\"br0\">(</span><span class=\"kw1\">map</span> empty<span class=\"sy0\">-</span>dep <span class=\"br0\">(</span>flatten items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> declared<span class=\"sy0\">-</span>deps<br/>  <span class=\"st0\">\"Constructs a dependence map from a list containaining<br/>   alternating items and list of their predecessor items.\"</span><br/>  <span class=\"br0\">[</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> merge<span class=\"sy0\">-</span>with union <span class=\"br0\">(</span><span class=\"kw1\">map</span> pair<span class=\"sy0\">-</span>dep <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">2</span> items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> deps<br/>  <span class=\"st0\">\"Constructs a full dependence map containing both explicitly<br/>   represented dependences and default empty dependences for<br/>   items without explicit predecessors.\"</span><br/>  <span class=\"br0\">[</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">merge</span> <span class=\"br0\">(</span>default<span class=\"sy0\">-</span>deps items<span class=\"br0\">)</span> <span class=\"br0\">(</span>declared<span class=\"sy0\">-</span>deps items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> no<span class=\"sy0\">-</span>dep<span class=\"sy0\">-</span>items<br/>  <span class=\"st0\">\"Returns all keys from the argument which have no (i.e. empty) dependences.\"</span><br/>  <span class=\"br0\">[</span>deps<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"br0\">(</span>deps <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">keys</span> deps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> remove<span class=\"sy0\">-</span>items<br/>  <span class=\"st0\">\"Returns a dependence map with the specified items removed from keys<br/>   and from all dependence sets of remaining keys.\"</span><br/>  <span class=\"br0\">[</span>deps items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>items<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span><span class=\"kw1\">remove</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> items<span class=\"br0\">)</span><br/>        remaining<span class=\"sy0\">-</span><span class=\"kw1\">keys</span>  <span class=\"br0\">(</span>difference <span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">keys</span> deps<span class=\"br0\">)</span><span class=\"br0\">)</span> items<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span><span class=\"kw1\">remove</span><span class=\"br0\">)</span><br/>        remaining<span class=\"sy0\">-</span>deps  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span>dep x <span class=\"br0\">(</span>difference <span class=\"br0\">(</span>deps x<span class=\"br0\">)</span> items<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span><span class=\"kw1\">remove</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">merge</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> remaining<span class=\"sy0\">-</span>deps remaining<span class=\"sy0\">-</span><span class=\"kw1\">keys</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> topo<span class=\"sy0\">-</span>sort<span class=\"sy0\">-</span>deps<br/>  <span class=\"st0\">\"Given a dependence map, returns either a list of items in which each item<br/>   follows all of its predecessors, or a string showing the items among which<br/>   there is a cyclic dependence preventing a linear order.\"</span><br/>  <span class=\"br0\">[</span>deps<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>remaining<span class=\"sy0\">-</span>deps deps<br/>         result         '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> remaining<span class=\"sy0\">-</span>deps<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> result<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ready<span class=\"sy0\">-</span>items <span class=\"br0\">(</span>no<span class=\"sy0\">-</span>dep<span class=\"sy0\">-</span>items remaining<span class=\"sy0\">-</span>deps<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> ready<span class=\"sy0\">-</span>items<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"ERROR: cycles remain among \"</span> <span class=\"br0\">(</span><span class=\"kw1\">keys</span> remaining<span class=\"sy0\">-</span>deps<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>items remaining<span class=\"sy0\">-</span>deps ready<span class=\"sy0\">-</span>items<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">concat</span> ready<span class=\"sy0\">-</span>items result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> topo<span class=\"sy0\">-</span><span class=\"kw1\">sort</span><br/>  <span class=\"st0\">\"Given a list of alternating items and predecessor lists, constructs a<br/>   full dependence map and then applies topo-sort-deps to that map.\"</span><br/>  <span class=\"br0\">[</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>topo<span class=\"sy0\">-</span>sort<span class=\"sy0\">-</span>deps <span class=\"br0\">(</span>deps items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 98, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>toposort = <span class=\"br0\">(</span>targets<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># targets is hash of sets, where keys are parent nodes and</span><br/>  <span class=\"co1\"># where values are sets that contain nodes that must precede the parent</span><br/>\u00a0<br/>  <span class=\"co1\"># Start by identifying obviously independent nodes</span><br/>  independents = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  do <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> k <span class=\"kw1\">of</span> targets<br/>      <span class=\"kw1\">if</span> targets<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">cnt</span> == <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">delete</span> targets<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>        independents.<span class=\"me1\">push</span> k<br/>\u00a0<br/>  <span class=\"co1\"># Note reverse dependencies for theoretical O(M+N) efficiency.</span><br/>  reverse_deps = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  do <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> k <span class=\"kw1\">of</span> targets<br/>      <span class=\"kw1\">for</span> child <span class=\"kw1\">of</span> targets<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">v</span><br/>        reverse_deps<span class=\"br0\">[</span>child<span class=\"br0\">]</span> <span class=\"sy0\">?</span>= <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        reverse_deps<span class=\"br0\">[</span>child<span class=\"br0\">]</span>.<span class=\"me1\">push</span> k<br/>\u00a0<br/>  <span class=\"co1\"># Now be greedy--start with independent nodes, then start </span><br/>  <span class=\"co1\"># breaking dependencies, and keep going as long as we still</span><br/>  <span class=\"co1\"># have independent nodes left.    </span><br/>  result = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">while</span> independents.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    k = independents.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    result.<span class=\"me1\">push</span> k<br/>    <span class=\"kw1\">for</span> parent <span class=\"kw1\">in</span> reverse_deps<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      set_remove targets<span class=\"br0\">[</span>parent<span class=\"br0\">]</span><span class=\"sy0\">,</span> k<br/>      <span class=\"kw1\">if</span> targets<span class=\"br0\">[</span>parent<span class=\"br0\">]</span>.<span class=\"me1\">cnt</span> == <span class=\"nu0\">0</span><br/>        independents.<span class=\"me1\">push</span> parent<br/>        <span class=\"kw3\">delete</span> targets<span class=\"br0\">[</span>parent<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\"># Show unresolvable dependencies</span><br/>  <span class=\"kw1\">for</span> k <span class=\"kw1\">of</span> targets<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"WARNING: node #{k} is part of cyclical dependency\"</span><br/>  result<br/>\u00a0<br/>parse_deps = <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># parse string data, remove self-deps, and fill in gaps</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># e.g. this would transform {a: \"a b c\", d: \"e\"} to this:</span><br/>  <span class=\"co1\">#   a: set(b, c)</span><br/>  <span class=\"co1\">#   b: set()</span><br/>  <span class=\"co1\">#   c: set()</span><br/>  <span class=\"co1\">#   d: set(e)</span><br/>  <span class=\"co1\">#   e: set()</span><br/>  targets = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  deps = set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw1\">of</span> data<br/>    targets<span class=\"br0\">[</span>k<span class=\"br0\">]</span> = set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    children = v.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> child <span class=\"kw1\">in</span> children<br/>      <span class=\"kw1\">continue</span> <span class=\"kw1\">if</span> child == <span class=\"st0\">''</span><br/>      set_add targets<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> child <span class=\"kw1\">unless</span> child == k<br/>      set_add deps<span class=\"sy0\">,</span> child<br/>\u00a0<br/>  <span class=\"co1\"># make sure even leaf nodes are in targets</span><br/>  <span class=\"kw1\">for</span> dep <span class=\"kw1\">of</span> deps.<span class=\"me1\">v</span><br/>    <span class=\"kw1\">if</span> dep <span class=\"kw2\">not</span> <span class=\"kw1\">of</span> targets<br/>      targets<span class=\"br0\">[</span>dep<span class=\"br0\">]</span> = set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  targets<br/>\u00a0<br/>set = <span class=\"sy0\">-&gt;</span><br/>  cnt<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>  v<span class=\"sy0\">:</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>set_add = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> s.<span class=\"me1\">v</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span><br/>  s.<span class=\"me1\">cnt</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  s.<span class=\"me1\">v</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>\u00a0<br/>set_remove = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>s.<span class=\"me1\">v</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span><br/>  s.<span class=\"me1\">cnt</span> <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">delete</span> s.<span class=\"me1\">v</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span><br/>\u00a0<br/>data =<br/>  des_system_lib<span class=\"sy0\">:</span>   <span class=\"st0\">\"std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee\"</span><br/>  dw01<span class=\"sy0\">:</span>             <span class=\"st0\">\"ieee dw01 dware gtech\"</span><br/>  dw02<span class=\"sy0\">:</span>             <span class=\"st0\">\"ieee dw02 dware\"</span><br/>  dw03<span class=\"sy0\">:</span>             <span class=\"st0\">\"std synopsys dware dw03 dw02 dw01 ieee gtech\"</span><br/>  dw04<span class=\"sy0\">:</span>             <span class=\"st0\">\"dw04 ieee dw01 dware gtech\"</span><br/>  dw05<span class=\"sy0\">:</span>             <span class=\"st0\">\"dw05 ieee dware\"</span><br/>  dw06<span class=\"sy0\">:</span>             <span class=\"st0\">\"dw06 ieee dware\"</span><br/>  dw07<span class=\"sy0\">:</span>             <span class=\"st0\">\"ieee dware\"</span><br/>  dware<span class=\"sy0\">:</span>            <span class=\"st0\">\"ieee dware\"</span><br/>  gtech<span class=\"sy0\">:</span>            <span class=\"st0\">\"ieee gtech\"</span><br/>  ramlib<span class=\"sy0\">:</span>           <span class=\"st0\">\"std ieee\"</span><br/>  std_cell_lib<span class=\"sy0\">:</span>     <span class=\"st0\">\"ieee std_cell_lib\"</span><br/>  synopsys<span class=\"sy0\">:</span>         <span class=\"st0\">\"\"</span><br/>\u00a0<br/>\u00a0<br/>targets = parse_deps<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> toposort targets<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 47, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> topological-sort <span class=\"br0\">(</span>graph <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Graph is an association list whose keys are objects and whose<br/>values are lists of objects on which the corresponding key depends.<br/>Test is used to compare elements, and should be a suitable test for<br/>hash-tables.  Topological-sort returns two values.  The first is a<br/>list of objects sorted toplogically.  The second is a boolean<br/>indicating whether all of the objects in the input graph are present<br/>in the topological ordering (i.e., the first value).\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>entries <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>entry <span class=\"br0\">(</span>vertex<span class=\"br0\">)</span><br/>             <span class=\"st0\">\"Return the entry for vertex.  Each entry is a cons whose<br/>              car is the number of outstanding dependencies of vertex<br/>              and whose cdr is a list of dependants of vertex.\"</span><br/>             <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>entry presentp<span class=\"br0\">)</span> <span class=\"br0\">(</span>gethash vertex entries<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> presentp entry<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash vertex entries<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">;; populate entries initially</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>vertex graph<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>vertex <span class=\"sy0\">&amp;</span>rest dependencies<span class=\"br0\">)</span> vertex<br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ventry <span class=\"br0\">(</span>entry vertex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>dependency dependencies<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dentry <span class=\"br0\">(</span>entry dependency<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> test dependency vertex<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>incf <span class=\"br0\">(</span><span class=\"kw1\">car</span> ventry<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>push vertex <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> dentry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">;; L is the list of sorted elements, and S the set of vertices</span><br/>      <span class=\"co1\">;; with no outstanding dependencies.</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">L</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>S <span class=\"br0\">(</span>loop for entry being each hash-<span class=\"kw1\">value</span> of entries<br/>                     using <span class=\"br0\">(</span>hash-key vertex<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> entry<span class=\"br0\">)</span><span class=\"br0\">)</span> collect vertex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">;; Until there are no vertices with no outstanding dependencies,</span><br/>        <span class=\"co1\">;; process vertices from S, adding them to L.</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>v <span class=\"br0\">(</span>pop S<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ventry <span class=\"br0\">(</span>entry v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>remhash v entries<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>dependant <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> ventry<span class=\"br0\">)</span> <span class=\"br0\">(</span>push v <span class=\"kw1\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>decf <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>entry dependant<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>push dependant S<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">;; return (1) the list of sorted items, (2) whether all items</span><br/>        <span class=\"co1\">;; were sorted, and (3) if there were unsorted vertices, the</span><br/>        <span class=\"co1\">;; hash table mapping these vertices to their dependants</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>all-sorted-p <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>hash-table-count entries<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>values <span class=\"br0\">(</span>nreverse <span class=\"kw1\">L</span><span class=\"br0\">)</span><br/>                  all-sorted-p<br/>                  <span class=\"br0\">(</span>unless all-sorted-p<br/>                    entries<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 74, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">final</span> <span class=\"kw4\">class</span> ArgumentException <span class=\"sy0\">:</span> <span class=\"kw3\">Exception</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">string</span> text<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> TDependencies <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> topoSort<span class=\"br0\">(</span>TDependencies d<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow @safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">,</span> v<span class=\"sy0\">;</span> d<span class=\"br0\">)</span><br/>        d<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> s <span class=\"sy0\">!=</span> k<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> s<span class=\"sy0\">;</span> d.<span class=\"me1\">byValue</span>.<span class=\"me1\">join</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">!</span><span class=\"kw2\">in</span> d<span class=\"br0\">)</span><br/>            d<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sorted<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ordered<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> item<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> dep<span class=\"sy0\">;</span> d<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dep.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>                ordered <span class=\"sy0\">~=</span> item<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ordered.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            sorted <span class=\"sy0\">~=</span> ordered.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        TDependencies dd<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> item<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> dep<span class=\"sy0\">;</span> d<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ordered.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                dd<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dep.<span class=\"me1\">dup</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>ordered.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        d <span class=\"sy0\">=</span> dd<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">//if (!d.empty)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> ArgumentException<span class=\"br0\">(</span>format<span class=\"br0\">(</span><br/>            <span class=\"st0\">\"A cyclic dependency exists amongst:<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sorted<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> data <span class=\"sy0\">=</span><br/><span class=\"st0\">\"des_system_lib std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>dw01           ieee dw01 dware gtech<br/>dw02           ieee dw02 dware<br/>dw03           std synopsys dware dw03 dw02 dw01 ieee gtech<br/>dw04           dw04 ieee dw01 dware gtech<br/>dw05           dw05 ieee dware<br/>dw06           dw06 ieee dware<br/>dw07           ieee dware<br/>dware          ieee dware<br/>gtech          ieee gtech<br/>ramlib         std ieee<br/>std_cell_lib   ieee std_cell_lib<br/>synopsys\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    TDependencies deps<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> line<span class=\"sy0\">;</span> data.<span class=\"me1\">splitLines</span><span class=\"br0\">)</span><br/>        deps<span class=\"br0\">[</span>line.<span class=\"me1\">split</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> line.<span class=\"me1\">split</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> depw <span class=\"sy0\">=</span> deps.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> idx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> subOrder<span class=\"sy0\">;</span> depw.<span class=\"me1\">topoSort</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"#%d\u00a0:\u00a0%s\"</span><span class=\"sy0\">,</span> idx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  subOrder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"sy0\">;</span><br/>    depw <span class=\"sy0\">=</span> deps.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    depw<span class=\"br0\">[</span><span class=\"st0\">\"dw01\"</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\"dw04\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> subOrder<span class=\"sy0\">;</span> depw.<span class=\"me1\">topoSort</span><span class=\"br0\">)</span> <span class=\"co1\">// Should throw.</span><br/>        subOrder.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 49, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeQueue <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elib<span class=\"sy0\">:</span>vat.<span class=\"me1\">makeQueue</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> topoSort<span class=\"br0\">(</span>data <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/Map\"><span class=\"kw6\">Map</span></a><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/any\"><span class=\"kw6\">any</span></a><span class=\"sy0\">,</span> Set<span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/any\"><span class=\"kw6\">any</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Tables of nodes and edges</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> forwardEdges <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> reverseCount <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> init<span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      reverseCount<span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>      forwardEdges<span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> node <span class=\"sy0\">=&gt;</span> deps <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> data <span class=\"br0\">{</span><br/>        init<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> dep <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> deps <span class=\"br0\">{</span> init<span class=\"br0\">(</span>dep<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># 'data' holds the dependencies. Compute the other direction.</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> node <span class=\"sy0\">=&gt;</span> deps <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> data <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> dep <span class=\"sy0\">?</span> <span class=\"br0\">(</span>dep <span class=\"sy0\">!=</span> node<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> deps <span class=\"br0\">{</span><br/>            forwardEdges<span class=\"br0\">[</span>dep<span class=\"br0\">]</span>.<span class=\"me1\">addElement</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>            reverseCount<span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Queue containing all elements that have no (initial or remaining) incoming edges</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ready <span class=\"sy0\">:=</span> makeQueue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> node <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">==</span><span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> reverseCount <span class=\"br0\">{</span><br/>      ready.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> result <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>ready.<span class=\"me1\">optDequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>~ node <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/notNull\"><span class=\"kw6\">notNull</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result with<span class=\"sy0\">=</span> node<br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> next <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> forwardEdges<span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># Decrease count of incoming edges and enqueue if none</span><br/>            <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>reverseCount<span class=\"br0\">[</span>next<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">isZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                ready.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        forwardEdges.<span class=\"me1\">removeKey</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>forwardEdges.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">aboveZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/throw\"><span class=\"kw6\">throw</span></a><span class=\"br0\">(</span><span class=\"st0\">`Topological sort failed: $forwardEdges remains`</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    return result<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 28, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define dependencies<br/>'<span class=\"br0\">(</span><span class=\"br0\">(</span>des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw01             ieee dw01 dware gtech<span class=\"br0\">)</span> <span class=\"co1\">;; bad graph add dw04</span><br/><span class=\"br0\">(</span>dw02             ieee dw02 dware <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw04             dw04 ieee dw01 dware gtech<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw05             dw05 ieee dware<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw06             dw06 ieee dware<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dw07             ieee dware<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dware            ieee dware<span class=\"br0\">)</span> <br/><span class=\"br0\">(</span>gtech            ieee gtech<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ramlib           std ieee <span class=\"br0\">)</span> <br/><span class=\"br0\">(</span>std_cell_lib     ieee std_cell_lib<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>synopsys         <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; build dependency graph</span><br/><span class=\"co1\">;;  a depends on b</span><br/><span class=\"co1\">;;  add arc (arrow) a --&gt; b</span><br/><span class=\"br0\">(</span>lib 'graph<span class=\"sy0\">.</span>lib<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>a-<span class=\"sy0\">&gt;</span>b  g a b<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">equal</span>? a b<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>graph-make-arc g <span class=\"br0\">(</span>graph-make-vertex g a<span class=\"br0\">)</span> <span class=\"br0\">(</span>graph-make-vertex g b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>add-dependencies g dep-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for* <span class=\"br0\">(</span><span class=\"br0\">(</span>dep dep-<span class=\"kw1\">list</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>b <span class=\"br0\">(</span>rest dep<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a-<span class=\"sy0\">&gt;</span>b  g b <span class=\"br0\">(</span>first dep<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 46, "block": "<pre class=\"text highlighted_source\">defmodule Topological do<br/>  def sort(library) do<br/>    g =\u00a0:digraph.new<br/>    Enum.each(library, fn {l,deps} -&gt;<br/>     \u00a0:digraph.add_vertex(g,l)           # noop if library already added<br/>      Enum.each(deps, fn d -&gt; add_dependency(g,l,d) end)<br/>    end)<br/>    if t =\u00a0:digraph_utils.topsort(g) do<br/>      print_path(t)<br/>    else<br/>      IO.puts \"Unsortable contains circular dependencies:\"<br/>      Enum.each(:digraph.vertices(g), fn v -&gt;<br/>        if vs =\u00a0:digraph.get_short_cycle(g,v), do: print_path(vs)<br/>      end)<br/>    end<br/>  end<br/>\u00a0<br/>  defp print_path(l), do: IO.puts Enum.join(l, \" -&gt; \")<br/>\u00a0<br/>  defp add_dependency(_g,l,l), do:\u00a0:ok<br/>  defp add_dependency(g,l,d) do<br/>   \u00a0:digraph.add_vertex(g,d)   # noop if dependency already added                                                                                                                                                                                                                       <br/>   \u00a0:digraph.add_edge(g,d,l)   # Dependencies represented as an edge d -&gt; l<br/>  end<br/>end<br/>\u00a0<br/>libraries = [<br/>  des_system_lib:   ~w[std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee]a,<br/>  dw01:             ~w[ieee dw01 dware gtech]a,<br/>  dw02:             ~w[ieee dw02 dware]a,<br/>  dw03:             ~w[std synopsys dware dw03 dw02 dw01 ieee gtech]a,<br/>  dw04:             ~w[dw04 ieee dw01 dware gtech]a,<br/>  dw05:             ~w[dw05 ieee dware]a,<br/>  dw06:             ~w[dw06 ieee dware]a,<br/>  dw07:             ~w[ieee dware]a,<br/>  dware:            ~w[ieee dware]a,<br/>  gtech:            ~w[ieee gtech]a,<br/>  ramlib:           ~w[std ieee]a,<br/>  std_cell_lib:     ~w[ieee std_cell_lib]a,<br/>  synopsys:         []<br/>]<br/>Topological.sort(libraries)<br/>\u00a0<br/>IO.puts \"\"<br/>bad_libraries = Keyword.update!(libraries,\u00a0:dw01, &amp;[:dw04 | &amp;1])<br/>Topological.sort(bad_libraries)</pre>"}, {"lang": "Erlang", "loc": 73, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>topological_sort<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">LIBRARIES</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">{</span>des_system_lib<span class=\"sy1\">,</span>   <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> synopsys<span class=\"sy1\">,</span> std_cell_lib<span class=\"sy1\">,</span> des_system_lib<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> ramlib<span class=\"sy1\">,</span> ieee<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw01<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw02<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw03<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> synopsys<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> dw03<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw04<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw04<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw05<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw05<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw06<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw06<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw07<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dware<span class=\"sy1\">,</span>            <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>gtech<span class=\"sy1\">,</span>            <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>ramlib<span class=\"sy1\">,</span>           <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> ieee<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>std_cell_lib<span class=\"sy1\">,</span>     <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> std_cell_lib<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>synopsys<span class=\"sy1\">,</span>         <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">BAD_LIBRARIES</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">{</span>des_system_lib<span class=\"sy1\">,</span>   <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> synopsys<span class=\"sy1\">,</span> std_cell_lib<span class=\"sy1\">,</span> des_system_lib<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> ramlib<span class=\"sy1\">,</span> ieee<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw01<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> dw04<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw02<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw03<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> synopsys<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> dw03<span class=\"sy1\">,</span> dw02<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw04<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw04<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dw01<span class=\"sy1\">,</span> dware<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw05<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw05<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw06<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>dw06<span class=\"sy1\">,</span> ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dw07<span class=\"sy1\">,</span>             <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>dware<span class=\"sy1\">,</span>            <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> dware<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>gtech<span class=\"sy1\">,</span>            <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> gtech<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>ramlib<span class=\"sy1\">,</span>           <span class=\"br0\">[</span>std<span class=\"sy1\">,</span> ieee<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>std_cell_lib<span class=\"sy1\">,</span>     <span class=\"br0\">[</span>ieee<span class=\"sy1\">,</span> std_cell_lib<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>         <span class=\"br0\">{</span>synopsys<span class=\"sy1\">,</span>         <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">top_sort</span><span class=\"br0\">(</span>?<span class=\"re4\">LIBRARIES</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">top_sort</span><span class=\"br0\">(</span>?<span class=\"re4\">BAD_LIBRARIES</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">top_sort</span><span class=\"br0\">(</span><span class=\"re5\">Library</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">G</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Deps</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                          <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"re3\">add_vertex</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"co1\">% noop if library already added                                                                                                                                                                                                    </span><br/>                          <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                                                <span class=\"re3\">add_dependency</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span><br/>                                        <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Deps</span><span class=\"br0\">)</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Library</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">T</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/digraph_utils.html\"><span class=\"kw5\">digraph_utils</span></a>:<span class=\"re3\">topsort</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <span class=\"re5\">T</span> <span class=\"kw1\">of</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Unsortable contains circular dependencies:~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                                  <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">short_cycle</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                                      false <span class=\"sy1\">-&gt;</span><br/>                                          <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/>                                      <span class=\"re5\">Vs</span> <span class=\"sy1\">-&gt;</span><br/>                                          <span class=\"re3\">print_path</span><span class=\"br0\">(</span><span class=\"re5\">Vs</span><span class=\"br0\">)</span><br/>                                  <span class=\"kw1\">end</span><br/>                          <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"re3\">vertices</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">print_path</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print_path</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>            <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s -&gt; \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">V</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>                          <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sublist</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">last</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">add_dependency</span><span class=\"br0\">(</span><span class=\"re5\">_G</span><span class=\"sy1\">,</span><span class=\"re5\">_L</span><span class=\"sy1\">,</span><span class=\"re5\">_L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">add_dependency</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"re3\">add_vertex</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"co1\">% noop if dependency already added                                                                                                                                                                                                                       </span><br/>    <a href=\"http://erlang.org/doc/man/digraph.html\"><span class=\"kw5\">digraph</span></a>:<span class=\"re3\">add_edge</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">% Dependencies represented as an edge D -&gt; L</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 71, "block": "<pre class=\"text highlighted_source\">variable nodes 0 nodes\u00a0! \\ linked list of nodes<br/>\u00a0<br/>: node. ( body -- )<br/>    body&gt; &gt;name name&gt;string type\u00a0;<br/>\u00a0<br/>: nodeps ( body -- )<br/>    \\ the word referenced by body has no (more) dependencies to resolve<br/>    ['] drop over\u00a0! node. space\u00a0;<br/>\u00a0<br/>: processing ( body1 ... bodyn body -- body1 ... bodyn )<br/>    \\ the word referenced by body is in the middle of resolving dependencies<br/>    2dup &lt;&gt; if \\ unless it is a self-reference (see task description)<br/>\t['] drop over\u00a0!<br/>\t.\" (cycle: \" dup node. &gt;r 1 begin \\ print the cycle<br/>\t    dup pick dup <a class=\"__cf_email__\" data-cfemail=\"8cfecc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt;&gt; while<br/>\t\tspace node. 1+ repeat<br/>\t.\" ) \" 2drop r&gt;<br/>\tthen drop\u00a0;<br/>\u00a0<br/>: &gt;processing ( body -- body )<br/>    ['] processing over\u00a0!\u00a0;<br/>\u00a0<br/>: node ( \"name\" -- )<br/>    \\ define node \"name\" and initialize it to having no dependences<br/>    create<br/>    ['] nodeps , \\ on definition, a node has no dependencies<br/>    nodes @ , lastxt nodes\u00a0! \\ linked list of nodes<br/>  does&gt; ( -- )<br/>    dup @ execute\u00a0; \\ perform xt associated with node<br/>\u00a0<br/>: define-nodes ( \"names\" &lt;newline&gt; -- )<br/>    \\ define all the names that don't exist yet as nodes<br/>    begin<br/>\tparse-name dup while<br/>\t    2dup find-name 0= if<br/>\t\t2dup nextname node then<br/>\t    2drop repeat<br/>    2drop\u00a0;<br/>\u00a0<br/>: deps ( \"name\" \"deps\" &lt;newline&gt; -- )<br/>    \\ name is after deps.  Implementation: Define missing nodes, then<br/>    \\ define a colon definition for <br/>    &gt;in @ define-nodes &gt;in\u00a0!<br/>    '\u00a0:noname ]] &gt;processing [[ source &gt;in @ /string evaluate ]] nodeps\u00a0; [[<br/>    swap &gt;body\u00a0! 0 parse 2drop\u00a0;<br/>\u00a0<br/>: all-nodes ( -- )<br/>    \\ call all nodes, and they then print their dependences and themselves<br/>    nodes begin<br/>\t@ dup while<br/>\t    dup execute<br/>\t    &gt;body cell+ repeat<br/>    drop\u00a0;<br/>\u00a0<br/>deps des_system_lib std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>deps dw01           ieee dw01 dware gtech<br/>deps dw02           ieee dw02 dware<br/>deps dw03           std synopsys dware dw03 dw02 dw01 ieee gtech<br/>deps dw04           dw04 ieee dw01 dware gtech<br/>deps dw05           dw05 ieee dware<br/>deps dw06           dw06 ieee dware<br/>deps dw07           ieee dware<br/>deps dware          ieee dware<br/>deps gtech          ieee gtech<br/>deps ramlib         std ieee<br/>deps std_cell_lib   ieee std_cell_lib<br/>deps synopsys<br/>\\ to test the cycle recognition (overwrites dependences for dw1 above)<br/>deps dw01           ieee dw01 dware gtech dw04<br/>\u00a0<br/>all-nodes</pre>"}, {"lang": "Fortran", "loc": 24, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> TSORT<span class=\"br0\">(</span>NL,ND,IDEP,IORD,IPOS,NO<span class=\"br0\">)</span><br/>      <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>      <span class=\"kw3\">INTEGER</span> NL,ND,NO,IDEP<span class=\"br0\">(</span>ND,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,IORD<span class=\"br0\">(</span>NL<span class=\"br0\">)</span>,IPOS<span class=\"br0\">(</span>NL<span class=\"br0\">)</span>,I,J,K,IL,IR,IPL,IPR<br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">10</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,NL<br/>      IORD<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span>I<br/>   <span class=\"nu0\">10</span> IPOS<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span>I<br/>      K<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>   <span class=\"nu0\">20</span> J<span class=\"sy0\">=</span>K<br/>      K<span class=\"sy0\">=</span>NL<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">30</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,ND<br/>      IL<span class=\"sy0\">=</span>IDEP<span class=\"br0\">(</span>I,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      IR<span class=\"sy0\">=</span>IDEP<span class=\"br0\">(</span>I,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      IPL<span class=\"sy0\">=</span>IPOS<span class=\"br0\">(</span>IL<span class=\"br0\">)</span><br/>      IPR<span class=\"sy0\">=</span>IPOS<span class=\"br0\">(</span>IR<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>IL.<span class=\"me1\">EQ</span>.<span class=\"me1\">IR</span> <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> IPL.<span class=\"me1\">GE</span>.<span class=\"me1\">K</span> <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> IPL.<span class=\"me1\">LT</span>.<span class=\"me1\">J</span> <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> IPR.<span class=\"me1\">LT</span>.<span class=\"me1\">J</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">30</span><br/>      K<span class=\"sy0\">=</span>K<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      IPOS<span class=\"br0\">(</span>IORD<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>IPL<br/>      IPOS<span class=\"br0\">(</span>IL<span class=\"br0\">)</span><span class=\"sy0\">=</span>K<br/>      IORD<span class=\"br0\">(</span>IPL<span class=\"br0\">)</span><span class=\"sy0\">=</span>IORD<span class=\"br0\">(</span>K<span class=\"br0\">)</span><br/>      IORD<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span>IL<br/>   <span class=\"nu0\">30</span> <span class=\"kw1\">CONTINUE</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>K.<span class=\"me1\">GT</span>.<span class=\"me1\">J</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span><br/>      NO<span class=\"sy0\">=</span>J<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FunL", "loc": 61, "block": "<pre class=\"text highlighted_source\">def topsort( graph ) =    <br/>  val L = seq()<br/>  val S = seq()<br/>  val g = dict( graph )<br/>\u00a0<br/>  for (v, es) &lt;- g<br/>    g(v) = seq( es )<br/>\u00a0<br/>  for (v, es) &lt;- g if es.isEmpty()<br/>    S.append( v )<br/>\u00a0<br/>  while not S.isEmpty()<br/>    val n = S.remove( 0 )<br/>    L.append( n )<br/>\u00a0<br/>    for (m, es) &lt;- g if n in es<br/>      if (es -= n).isEmpty()<br/>        S.append( m )<br/>\u00a0<br/>  for (v, es) &lt;- g<br/>    if not es.isEmpty()<br/>      return None<br/>\u00a0<br/>  Some( L.toList() )<br/>\u00a0<br/>dependencies = '''<br/>  des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>  dw01             ieee dw01 dware gtech<br/>  dw02             ieee dw02 dware<br/>  dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/>  dw04             dw04 ieee dw01 dware gtech<br/>  dw05             dw05 ieee dware<br/>  dw06             dw06 ieee dware<br/>  dw07             ieee dware<br/>  dware            ieee dware<br/>  gtech            ieee gtech<br/>  ramlib           std ieee<br/>  std_cell_lib     ieee std_cell_lib<br/>  synopsys         <br/>  '''<br/>\u00a0<br/>// convert dependencies data into a directed graph<br/>graph = dict()<br/>deps = set()<br/>\u00a0<br/>for l &lt;- WrappedString( dependencies ).lines() if l.trim()\u00a0!= ''<br/>  case list(l.trim().split('\\\\s+')) of<br/>    [a] -&gt; graph(a) = []<br/>    h:t -&gt;<br/>      d = set( t )<br/>      d -= h                  // remove self dependencies<br/>      graph(h) = d<br/>      deps ++= t<br/>\u00a0<br/>// add graph vertices for dependencies not appearing in left column<br/>for e &lt;- deps if e not in graph<br/>  graph(e) = []<br/>\u00a0<br/>case topsort( graph ) of<br/>  None -&gt; println( 'un-orderable' )<br/>  Some( ordering ) -&gt; println( ordering )</pre>"}, {"lang": "Go", "loc": 140, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> data <span class=\"sy2\">=</span> <span class=\"co2\">`<br/>LIBRARY          LIBRARY DEPENDENCIES<br/>=======          ====================<br/>des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>dw01             ieee dw01 dware gtech<br/>dw02             ieee dw02 dware<br/>dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/>dw04             dw04 ieee dw01 dware gtech<br/>dw05             dw05 ieee dware<br/>dw06             dw06 ieee dware<br/>dw07             ieee dware<br/>dware            ieee dware<br/>gtech            ieee gtech<br/>ramlib           std ieee<br/>std_cell_lib     ieee std_cell_lib<br/>synopsys         `</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    g<span class=\"sy1\">,</span> in<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> parseLibComp<span class=\"sy1\">(</span>data<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    order<span class=\"sy1\">,</span> cyclic <span class=\"sy2\">:=</span> topSortKahn<span class=\"sy1\">(</span>g<span class=\"sy1\">,</span> in<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> cyclic <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Cyclic:\"</span><span class=\"sy1\">,</span> cyclic<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Order:\"</span><span class=\"sy1\">,</span> order<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> graph <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">][]</span><span class=\"kw4\">string</span><br/><span class=\"kw1\">type</span> inDegree <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"co1\">// parseLibComp parses the text format of the task and returns a graph</span><br/><span class=\"co1\">// representation and a list of the in-degrees of each node.  The returned graph</span><br/><span class=\"co1\">// represents compile order rather than dependency order.  That is, for each map</span><br/><span class=\"co1\">// map key n, the map elements are libraries that depend on n being compiled</span><br/><span class=\"co1\">// first.</span><br/><span class=\"kw4\">func</span> parseLibComp<span class=\"sy1\">(</span>data <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>g graph<span class=\"sy1\">,</span> in inDegree<span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// small sanity check on input</span><br/>    lines <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Split</span><span class=\"sy1\">(</span>data<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>lines<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">3</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>strings<span class=\"sy3\">.</span>HasPrefix<span class=\"sy1\">(</span>lines<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> <span class=\"st0\">\"=\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"data format\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// toss header lines</span><br/>    lines <span class=\"sy2\">=</span> lines<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">:]</span><br/>    <span class=\"co1\">// scan and interpret input, build graph</span><br/>    g <span class=\"sy2\">=</span> graph<span class=\"sy1\">{}</span><br/>    in <span class=\"sy2\">=</span> inDegree<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> line <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lines <span class=\"sy1\">{</span><br/>        libs <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>line<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>libs<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span> <span class=\"co1\">// allow blank lines</span><br/>        <span class=\"sy1\">}</span><br/>        lib <span class=\"sy2\">:=</span> libs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        g<span class=\"sy1\">[</span>lib<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> g<span class=\"sy1\">[</span>lib<span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> dep <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> libs<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>            in<span class=\"sy1\">[</span>dep<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> in<span class=\"sy1\">[</span>dep<span class=\"sy1\">]</span><br/>            <span class=\"kw1\">if</span> dep <span class=\"sy3\">==</span> lib <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span> <span class=\"co1\">// ignore self dependencies</span><br/>            <span class=\"sy1\">}</span><br/>            successors <span class=\"sy2\">:=</span> g<span class=\"sy1\">[</span>dep<span class=\"sy1\">]</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>successors<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    g<span class=\"sy1\">[</span>dep<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>successors<span class=\"sy1\">,</span> lib<span class=\"sy1\">)</span><br/>                    in<span class=\"sy1\">[</span>lib<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> dep <span class=\"sy3\">==</span> successors<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">break</span> <span class=\"co1\">// ignore duplicate dependencies</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> g<span class=\"sy1\">,</span> in<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// General purpose topological sort, not specific to the application of</span><br/><span class=\"co1\">// library dependencies.  Adapted from Wikipedia pseudo code, one main</span><br/><span class=\"co1\">// difference here is that this function does not consume the input graph.</span><br/><span class=\"co1\">// WP refers to incoming edges, but does not really need them fully represented.</span><br/><span class=\"co1\">// A count of incoming edges, or the in-degree of each node is enough.  Also,</span><br/><span class=\"co1\">// WP stops at cycle detection and doesn't output information about the cycle.</span><br/><span class=\"co1\">// A little extra code at the end of this function recovers the cyclic nodes.</span><br/><span class=\"kw4\">func</span> topSortKahn<span class=\"sy1\">(</span>g graph<span class=\"sy1\">,</span> in inDegree<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>order<span class=\"sy1\">,</span> cyclic <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> L<span class=\"sy1\">,</span> S <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    <span class=\"co1\">// rem for \"remaining edges,\" this function makes a local copy of the</span><br/>    <span class=\"co1\">// in-degrees and consumes that instead of consuming an input.</span><br/>    rem <span class=\"sy2\">:=</span> inDegree<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy1\">,</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> in <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// accumulate \"set of all nodes with no incoming edges\"</span><br/>            S <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>S<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// initialize rem from in-degree</span><br/>            rem<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>S<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>S<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"co1\">// \"remove a node n from S\"</span><br/>        n <span class=\"sy2\">:=</span> S<span class=\"sy1\">[</span>last<span class=\"sy1\">]</span><br/>        S <span class=\"sy2\">=</span> S<span class=\"sy1\">[:</span>last<span class=\"sy1\">]</span><br/>        L <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>L<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span> <span class=\"co1\">// \"add n to tail of L\"</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// WP pseudo code reads \"for each node m...\" but it means for each</span><br/>            <span class=\"co1\">// node m *remaining in the graph.*  We consume rem rather than</span><br/>            <span class=\"co1\">// the graph, so \"remaining in the graph\" for us means rem[m] &gt; 0.</span><br/>            <span class=\"kw1\">if</span> rem<span class=\"sy1\">[</span>m<span class=\"sy1\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                rem<span class=\"sy1\">[</span>m<span class=\"sy1\">]</span><span class=\"sy2\">--</span>         <span class=\"co1\">// \"remove edge from the graph\"</span><br/>                <span class=\"kw1\">if</span> rem<span class=\"sy1\">[</span>m<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"co1\">// if \"m has no other incoming edges\"</span><br/>                    S <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>S<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span> <span class=\"co1\">// \"insert m into S\"</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// \"If graph has edges,\" for us means a value in rem is &gt; 0.</span><br/>    <span class=\"kw1\">for</span> c<span class=\"sy1\">,</span> in <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rem <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> in &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// recover cyclic nodes</span><br/>            <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> nb <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy1\">[</span>c<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> rem<span class=\"sy1\">[</span>nb<span class=\"sy1\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    cyclic <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>cyclic<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>cyclic<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> cyclic<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> L<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 39, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>combs <span class=\"nu0\">0</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>combs <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>combs k <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>x:<span class=\"br0\">)</span> <span class=\"br0\">(</span>combs <span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">++</span> combs k xs<br/>\u00a0<br/>depLibs <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>depLibs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"des_system_lib\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw01\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee dw01 dware gtech\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw02\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee dw02 dware\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw03\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"std synopsys dware dw03 dw02 dw01 ieee gtech\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw04\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"dw04 ieee dw01 dware gtech\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw05\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"dw05 ieee dware\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw06\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"dw06 ieee dware\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dw07\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee dware\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"dware\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee dware\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"gtech\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee gtech\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"ramlib\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"std ieee\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"std_cell_lib\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ieee std_cell_lib\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">(</span><span class=\"st0\">\"synopsys\"</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/>toposort xs<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a><span class=\"br0\">)</span> cycleDetect <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Dependency cycle detected for libs \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> cycleDetect <br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>              <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> makePrecede <span class=\"br0\">[</span><span class=\"br0\">]</span> dB<br/>\u00a0<br/>   <span class=\"kw1\">where</span> dB <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y \\\\ x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">***</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> xs<br/>\u00a0<br/>         makePrecede ts <span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span>xs<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> nub <span class=\"sy0\">$</span> <span class=\"kw1\">case</span> elemIndex x ts <span class=\"kw1\">of</span><br/>                                          Just i  <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> first<span class=\"br0\">(</span><span class=\"sy0\">++</span>xs<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> i ts<br/>                                          <span class=\"sy0\">_</span>       <span class=\"sy0\">-&gt;</span> ts <span class=\"sy0\">++</span> xs <span class=\"sy0\">++</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>\u00a0<br/>         cycleDetect <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><br/>                       <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"kw1\">as</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span>bs<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a `intersect` bs<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span>b `intersect`<span class=\"kw1\">as</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"sy0\">$</span> combs <span class=\"nu0\">2</span> dB</pre>"}, {"lang": "Icon and Unicon", "loc": 115, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">record</span> graph<span class=\"br0\">(</span>nodes<span class=\"sy1\">,</span>arcs<span class=\"br0\">)</span><br/><span class=\"kw2\">global</span> ex_name<span class=\"sy1\">,</span> in_name<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   show<span class=\"br0\">(</span>tsort<span class=\"br0\">(</span>getgraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> tsort<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>   t <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> g<span class=\"sy1\">.</span><span class=\"me1\">nodes</span> <span class=\"sy1\">--</span> pnodes<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">~==</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      t <span class=\"sy1\">||:=</span> <span class=\"st0\">\"(\"</span><span class=\"sy1\">||</span>n<span class=\"sy1\">||</span><span class=\"st0\">\")\"</span><br/>      g <span class=\"sy1\">:=</span> <span class=\"kw4\">delete</span><span class=\"br0\">(</span>g<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span> g<span class=\"sy1\">.</span><span class=\"me1\">nodes</span> <span class=\"sy1\">==</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> t<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"graph contains the cycle:\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy1\">,</span>genpath<span class=\"br0\">(</span>fn <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>g<span class=\"sy1\">.</span><span class=\"me1\">nodes</span><span class=\"sy1\">,</span>fn<span class=\"sy1\">,</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## pnodes(g) -- return the predecessor nodes of g</span><br/><span class=\"co1\">#     (those that have an arc from them)</span><br/><span class=\"kw1\">procedure</span> pnodes<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>   <span class=\"kw2\">static</span> labels<span class=\"sy1\">,</span> fromnodes<br/>   <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>           labels <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">ucase</span><br/>           fromnodes <span class=\"sy1\">:=</span> <span class=\"st0\">'ACEGIKMOQSUWY'</span><br/>           <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw4\">cset</span><span class=\"br0\">(</span><span class=\"kw4\">select</span><span class=\"br0\">(</span>g<span class=\"sy1\">.</span><span class=\"me1\">arcs</span><span class=\"sy1\">,</span>labels<span class=\"sy1\">,</span> fromnodes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## select(s,image,object) - efficient node selection</span><br/><span class=\"kw1\">procedure</span> <span class=\"kw4\">select</span><span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"sy1\">,</span>object<span class=\"br0\">)</span><br/>   slen <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>s<br/>   ilen <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span><span class=\"kw4\">image</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> slen <span class=\"sy1\">&lt;=</span> ilen <span class=\"kw1\">then</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>object<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span>slen<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span>slen<span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">)</span><br/>          <span class=\"kw1\">else</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>object<span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span>ilen<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"kw4\">select</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+</span>ilen<span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"sy1\">,</span>object<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## delete(g,x) -- deletes all nodes in x from graph g</span><br/><span class=\"co1\">#     note that arcs must be deleted as well</span><br/><span class=\"kw1\">procedure</span> <span class=\"kw4\">delete</span><span class=\"br0\">(</span>g<span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>   t <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   g<span class=\"sy1\">.</span><span class=\"me1\">arcs</span> <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> arc <span class=\"sy1\">:=</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">upto</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>arc<span class=\"br0\">)</span> <span class=\"kw1\">then</span> t <span class=\"sy1\">||:=</span> arc<br/>   <span class=\"kw1\">return</span> graph<span class=\"br0\">(</span>g<span class=\"sy1\">.</span><span class=\"me1\">nodes</span><span class=\"sy1\">--</span>x<span class=\"sy1\">,</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">## getgraph() -- read and construct a graph</span><br/><span class=\"co1\">#      graph is described via sets of arcs, as in:</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#           from to1 to2 to3</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># external names are converted to single character names for efficiency</span><br/><span class=\"co1\"># self-referential arcs are ignored</span><br/><span class=\"kw1\">procedure</span> getgraph<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">static</span> labels<br/>   <span class=\"kw1\">initial</span> labels <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">cset</span></span><br/>   ex_name <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   in_name <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   count <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   arcstr <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   nodes <span class=\"sy1\">:=</span> <span class=\"st0\">''</span><br/>   <span class=\"kw1\">every</span> line <span class=\"sy1\">:=</span> <span class=\"sy1\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>       nextWord <span class=\"sy1\">:=</span> <span class=\"kw1\">create</span> genWords<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> nfrom <span class=\"sy1\">:=</span> <span class=\"sy1\">@</span>nextWord <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>           <span class=\"sy1\">/</span>in_name<span class=\"br0\">[</span>nfrom<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">cset</span></span><span class=\"br0\">[</span>count <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>           <span class=\"sy1\">/</span>ex_name<span class=\"br0\">[</span>in_name<span class=\"br0\">[</span>nfrom<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> nfrom<br/>           nodes <span class=\"sy1\">++:=</span> in_name<span class=\"br0\">[</span>nfrom<span class=\"br0\">]</span><br/>           <span class=\"kw1\">while</span> nto <span class=\"sy1\">:=</span> <span class=\"sy1\">@</span>nextWord <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>               <span class=\"kw1\">if</span> nfrom <span class=\"sy1\">~==</span> nto <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>                   <span class=\"sy1\">/</span>in_name<span class=\"br0\">[</span>nto<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">cset</span></span><span class=\"br0\">[</span>count <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                   <span class=\"sy1\">/</span>ex_name<span class=\"br0\">[</span>in_name<span class=\"br0\">[</span>nto<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> nto<br/>                   nodes <span class=\"sy1\">++:=</span> in_name<span class=\"br0\">[</span>nto<span class=\"br0\">]</span><br/>                   arcstr <span class=\"sy1\">||:=</span> in_name<span class=\"br0\">[</span>nfrom<span class=\"br0\">]</span> <span class=\"sy1\">||</span> in_name<span class=\"br0\">[</span>nto<span class=\"br0\">]</span><br/>                   <span class=\"br0\">}</span><br/>               <span class=\"br0\">}</span><br/>           <span class=\"br0\">}</span><br/>       <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> graph<span class=\"br0\">(</span>nodes<span class=\"sy1\">,</span>arcstr<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># generate all 'words' in string</span><br/><span class=\"kw1\">procedure</span> genWords<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> wchars<br/>    <span class=\"kw1\">initial</span> wchars <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">cset</span></span> <span class=\"sy1\">--</span> <span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><br/>    s <span class=\"sy1\">?</span>  <span class=\"kw1\">while</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span>wchars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">\\</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>wchars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">\\</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## show(t) - return the external names (in order) for the nodes in t</span><br/><span class=\"co1\">#  Each output line contains names that are independent of each other</span><br/><span class=\"kw1\">procedure</span> show<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>   line <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>t <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">case</span> n <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>         <span class=\"st0\">\"(\"</span> <span class=\"sy1\">:</span> line <span class=\"sy1\">||:=</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>(\"</span><br/>         <span class=\"st0\">\")\"</span> <span class=\"sy1\">:</span> line<span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\")\"</span><br/>         <span class=\"kw1\">default</span> <span class=\"sy1\">:</span> line <span class=\"sy1\">||:=</span> ex_name<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## genpath(f,t,g) -- generate paths from f to t in g</span><br/><span class=\"kw1\">procedure</span> genpath<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>t<span class=\"sy1\">,</span>g<span class=\"sy1\">,</span> seen<span class=\"br0\">)</span><br/>   <span class=\"sy1\">/</span>seen <span class=\"sy1\">:=</span> <span class=\"st0\">''</span><br/>   seen <span class=\"sy1\">++:=</span> f<br/>   sn <span class=\"sy1\">:=</span> nnodes<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>g<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> t <span class=\"sy1\">**</span> sn <span class=\"sy1\">==</span> t <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> ex_name<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy1\">||</span> ex_name<span class=\"br0\">[</span>t<span class=\"br0\">]</span><br/>   <span class=\"kw1\">suspend</span> ex_name<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy1\">||</span> genpath<span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>sn <span class=\"sy1\">--</span>seen<span class=\"br0\">)</span><span class=\"sy1\">,</span>t<span class=\"sy1\">,</span>g<span class=\"sy1\">,</span>seen<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">## nnodes(f,g) -- compute all nodes that could follow f in g</span><br/><span class=\"kw1\">procedure</span> nnodes<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>g<span class=\"br0\">)</span><br/>   t <span class=\"sy1\">:=</span> <span class=\"st0\">''</span><br/>   g<span class=\"sy1\">.</span><span class=\"me1\">arcs</span> <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> arc <span class=\"sy1\">:=</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> arc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> f <span class=\"kw1\">then</span> t <span class=\"sy1\">++:=</span> arc<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">dependencySort=: monad define<br/>  parsed=. &lt;@;:;.<span class=\"nu0\">_2</span> <span class=\"kw2\">y</span><br/>  names=. {.&amp;&gt;parsed<br/>  depends=. <span class=\"sy0\">(</span>&gt; <a class=\"__cf_email__\" data-cfemail=\"0a374a6324\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@#<span class=\"sy0\">)</span> names e.S:<span class=\"nu0\">1</span> parsed<br/>  depends=. <span class=\"sy0\">(</span>+. +./ .*.~<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span> depends<br/>  assert.-.<span class=\"nu0\">1</span> e. <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span>|:depends<br/>  <span class=\"sy0\">(</span>-.&amp;names ~.;parsed<span class=\"sy0\">)</span>,names /: +/\"<span class=\"nu0\">1</span> depends<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 77, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TopologicalSort <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"std, ieee, des_system_lib, dw01, dw02, dw03, dw04, dw05,\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"st0\">\"dw06, dw07, dware, gtech, ramlib, std_cell_lib, synopsys\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Graph g <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Graph<span class=\"br0\">(</span>s, <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">14</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">13</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">12</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">14</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">11</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">8</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">8</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">9</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">10</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">11</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">12</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">12</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span><span class=\"nu0\">13</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Topologically sorted order: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>g.<span class=\"me1\">topoSort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Graph <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> vertices<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> adjacency<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> numVertices<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Graph<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> edges<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        vertices <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        numVertices <span class=\"sy0\">=</span> vertices.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        adjacency <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> edge <span class=\"sy0\">:</span> edges<span class=\"br0\">)</span><br/>            adjacency<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> topoSort<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> todo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numVertices<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            todo.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            outer<span class=\"sy0\">:</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>todo.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> r <span class=\"sy0\">:</span> todo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hasDependency<span class=\"br0\">(</span>r, todo<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        todo.<span class=\"me1\">remove</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>vertices<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                         <span class=\"co1\">// no need to worry about concurrent modification</span><br/>                        <span class=\"kw1\">continue</span> outer<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Graph has cycles\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> hasDependency<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> r, List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> todo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> c <span class=\"sy0\">:</span> todo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>adjacency<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 58, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> libs <span class=\"sy0\">=</span><br/>  `des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>  dw01             ieee dw01 dware gtech<br/>  dw02             ieee dw02 dware<br/>  dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/>  dw04             dw04 ieee dw01 dware gtech<br/>  dw05             dw05 ieee dware<br/>  dw06             dw06 ieee dware<br/>  dw07             ieee dware<br/>  dware            ieee dware<br/>  gtech            ieee gtech<br/>  ramlib           std ieee<br/>  std_cell_lib     ieee std_cell_lib<br/>  synopsys`<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// A map of the input data, with the keys as the packages, and the values as</span><br/><span class=\"co1\">// and array of packages on which it depends.</span><br/><span class=\"kw1\">const</span> D <span class=\"sy0\">=</span> libs<br/>  .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>  .<span class=\"me1\">map</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">!=</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    p.<span class=\"kw1\">set</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">!==</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> e <span class=\"sy0\">:</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> Map<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>...<span class=\"me1\">D</span>.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  D.<span class=\"kw1\">set</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> D.<span class=\"kw1\">get</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// The above map rotated so that it represents a DAG of the form</span><br/><span class=\"co1\">// Map {</span><br/><span class=\"co1\">//    A =&gt; [ A, B, C],</span><br/><span class=\"co1\">//    B =&gt; [C],</span><br/><span class=\"co1\">//    C =&gt; []</span><br/><span class=\"co1\">// }</span><br/><span class=\"co1\">// where each key represents a node, and the array contains the edges.</span><br/><span class=\"kw1\">const</span> G <span class=\"sy0\">=</span> <span class=\"br0\">[</span>...<span class=\"me1\">D</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>  p.<span class=\"kw1\">set</span><span class=\"br0\">(</span><br/>    c<span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span>...<span class=\"me1\">D</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> D.<span class=\"kw1\">get</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">includes</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">new</span> Map<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// An array of leaf nodes; nodes with 0 in degrees.</span><br/><span class=\"kw1\">const</span> Q <span class=\"sy0\">=</span> <span class=\"br0\">[</span>...<span class=\"me1\">D</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> D.<span class=\"kw1\">get</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// The result array.</span><br/><span class=\"kw1\">const</span> S <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>while <span class=\"br0\">(</span>Q.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">const</span> u <span class=\"sy0\">=</span> Q.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  S.<span class=\"me1\">push</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  G.<span class=\"kw1\">get</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    D.<span class=\"kw1\">set</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> D.<span class=\"kw1\">get</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">!==</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>D.<span class=\"kw1\">get</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Q.<span class=\"me1\">push</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'Solution:'</span><span class=\"sy0\">,</span> S<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 51, "block": "<pre class=\"text highlighted_source\"># independent/0 emits an array of the dependencies that have no dependencies<br/># Input: an object representing a normalized dependency graph<br/>def independent:<br/>  . as $G<br/>  | reduce keys[] as $key <br/>      ([];<br/>       . +  ((reduce $G[$key][] as $node<br/>               ([];<br/>                if ($G[$node] == null or ($G[$node]|length)==0) then . + [$node] <br/>                else . <br/>                end ))))<br/>  | unique;<br/>\u00a0<br/># normalize/0 eliminates self-dependencies in the input dependency graph.<br/># Input: an object representing a dependency graph.<br/>def normalize:<br/>  . as $G<br/>  | reduce keys[] as $key <br/>      ($G; <br/>       .[$key] as $nodes<br/>       | if $nodes and ($nodes|index($key)) then .[$key] = $nodes - [$key] else . end);<br/>\u00a0<br/>\u00a0<br/># minus/1 removes all the items in ary from each of the values in the input object<br/># Input: an object representing a dependency graph<br/>def minus(ary):<br/>  . as $G | reduce keys[] as $key ($G; $G[$key] -= ary);<br/>\u00a0<br/># tsort/0 emits the topologically sorted nodes of the input,<br/># in \"&gt;\" order.<br/># Input is assumed to be an object representing a dependency<br/># graph and need not be normalized.<br/>def tsort: <br/>  # _sort: input: [L, Graph], where L is the tsort so far<br/>  def _tsort:<br/>\u00a0<br/>    def done: [.[]] | all( length==0 );<br/>\u00a0<br/>    .[0] as $L | .[1] as $G <br/>    | if ($G|done) then $L + (($G|keys) - $L)<br/>      else<br/>         ($G|independent) as $I <br/>         | if (($I|length) == 0)<br/>           then error(\"the dependency graph is cyclic: \\($G)\") <br/>           else [ ($L + $I), ($G|minus($I))] | _tsort<br/>           end<br/>      end;<br/>\u00a0<br/>  normalize | [[], .] | _tsort\u00a0;<br/>\u00a0<br/>tsort</pre>"}, {"lang": "Julia", "loc": 37, "block": "<pre class=\"text highlighted_source\">function toposort(data::Dict{T,Set{T}}) where T<br/>    data = copy(data)<br/>    for (k, v) in data<br/>        delete!(v, k)<br/>    end<br/>    extraitems = setdiff(reduce(\u222a, values(data)), keys(data))<br/>    for item in extraitems<br/>        data[item] = Set{T}()<br/>    end<br/>    rst = Vector{T}()<br/>    while true<br/>        ordered = Set(item for (item, dep) in data if isempty(dep))<br/>        if isempty(ordered) break end<br/>        append!(rst, ordered)<br/>        data = Dict{T,Set{T}}(item =&gt; setdiff(dep, ordered) for (item, dep) in data if item \u2209 ordered)<br/>    end<br/>    @assert isempty(data) \"a cyclic dependency exists amongst $(keys(data))\"<br/>    return rst<br/>end<br/>\u00a0<br/>data = Dict{String,Set{String}}(<br/>    \"des_system_lib\" =&gt; Set(split(\"std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee\")),<br/>    \"dw01\" =&gt;           Set(split(\"ieee dw01 dware gtech\")),<br/>    \"dw02\" =&gt;           Set(split(\"ieee dw02 dware\")),<br/>    \"dw03\" =&gt;           Set(split(\"std synopsys dware dw03 dw02 dw01 ieee gtech\")),<br/>    \"dw04\" =&gt;           Set(split(\"dw04 ieee dw01 dware gtech\")),<br/>    \"dw05\" =&gt;           Set(split(\"dw05 ieee dware\")),<br/>    \"dw06\" =&gt;           Set(split(\"dw06 ieee dware\")),<br/>    \"dw07\" =&gt;           Set(split(\"ieee dware\")),<br/>    \"dware\" =&gt;          Set(split(\"ieee dware\")),<br/>    \"gtech\" =&gt;          Set(split(\"ieee gtech\")),<br/>    \"ramlib\" =&gt;         Set(split(\"std ieee\")),<br/>    \"std_cell_lib\" =&gt;   Set(split(\"ieee std_cell_lib\")),<br/>    \"synopsys\" =&gt;       Set(),<br/>    )<br/>\u00a0<br/>println(\"# Topologically sorted:\\n - \", join(toposort(data), \"\\n - \"))</pre>"}, {"lang": "Kotlin", "loc": 69, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"std, ieee, des_system_lib, dw01, dw02, dw03, dw04, dw05, \"</span> +<br/>        <span class=\"st0\">\"dw06, dw07, dware, gtech, ramlib, std_cell_lib, synopsys\"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> deps <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span><br/>     <span class=\"nu0\">2</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">14</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">13</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">12</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">1</span>,<br/>     <span class=\"nu0\">3</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span> to <span class=\"nu0\">10</span>, <span class=\"nu0\">3</span> to <span class=\"nu0\">11</span>,<br/>     <span class=\"nu0\">4</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span> to <span class=\"nu0\">10</span>,<br/>     <span class=\"nu0\">5</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">14</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">10</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span> to <span class=\"nu0\">11</span>,<br/>     <span class=\"nu0\">6</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">6</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span> to <span class=\"nu0\">10</span>, <span class=\"nu0\">6</span> to <span class=\"nu0\">11</span>,<br/>     <span class=\"nu0\">7</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span> to <span class=\"nu0\">10</span>,<br/>     <span class=\"nu0\">8</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">8</span> to <span class=\"nu0\">10</span>,<br/>     <span class=\"nu0\">9</span> to <span class=\"nu0\">1</span>, <span class=\"nu0\">9</span> to <span class=\"nu0\">10</span>,<br/>     <span class=\"nu0\">10</span> to <span class=\"nu0\">1</span>,<br/>     <span class=\"nu0\">11</span> to <span class=\"nu0\">1</span>,<br/>     <span class=\"nu0\">12</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">12</span> to <span class=\"nu0\">1</span>,<br/>     <span class=\"nu0\">13</span> to <span class=\"nu0\">1</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Graph<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, edges<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int,Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vertices <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numVertices <span class=\"sy0\">=</span> vertices.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> adjacency <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>numVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span> BooleanArray<span class=\"br0\">(</span>numVertices<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>edge in edges<span class=\"br0\">)</span> adjacency<span class=\"br0\">[</span>edge.<span class=\"me1\">first</span><span class=\"br0\">]</span><span class=\"br0\">[</span>edge.<span class=\"me1\">second</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun hasDependency<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, todo<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in todo<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>adjacency<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun topoSort<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;?</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> todo <span class=\"sy0\">=</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>numVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><span class=\"sy0\">!</span>todo.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, r<span class=\"br0\">)</span> in todo.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hasDependency<span class=\"br0\">(</span>r, todo<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        todo.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>vertices<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        continue<span class=\"sy0\">@</span>outer<br/>                     <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> Exception<span class=\"br0\">(</span><span class=\"st0\">\"Graph has cycles\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> Exception<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> Graph<span class=\"br0\">(</span>s, deps<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Topologically sorted order:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>g.<span class=\"me1\">topoSort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// now insert 3 to 6 at index 10 of deps</span><br/>    deps.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">3</span> to <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g2 <span class=\"sy0\">=</span> Graph<span class=\"br0\">(</span>s, deps<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Following the addition of dw04 to the dependencies of dw01:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>g2.<span class=\"me1\">topoSort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 19, "block": "<pre class=\"text highlighted_source\">TopologicalSort[<br/>    Graph[Flatten[# /. {l_, ld_}\u00a0:&gt; <br/>        Map[# -&gt; l &amp;, <br/>         DeleteCases[ld, l]]]]] /. {_TopologicalSort -&gt; $Failed} &amp;@<br/> {{\"des_system_lib\", {\"std\", \"synopsys\", \"std_cell_lib\", <br/>    \"des_system_lib\", \"dw02\", \"dw01\", \"ramlib\", \"ieee\"}},<br/>  {\"dw01\", {\"ieee\", \"dw01\", \"dware\", \"gtech\"}},<br/>  {\"dw02\", {\"ieee\", \"dw02\", \"dware\"}},<br/>  {\"dw03\", {\"std\", \"synopsys\", \"dware\", \"dw03\", \"dw02\", \"dw01\", <br/>    \"ieee\", \"gtech\"}},<br/>  {\"dw04\", {\"dw04\", \"ieee\", \"dw01\", \"dware\", \"gtech\"}},<br/>  {\"dw05\", {\"dw05\", \"ieee\", \"dware\"}},<br/>  {\"dw06\", {\"dw06\", \"ieee\", \"dware\"}},<br/>  {\"dw07\", {\"ieee\", \"dware\"}},<br/>  {\"dware\", {\"ieee\", \"dware\"}},<br/>  {\"gtech\", {\"ieee\", \"gtech\"}},<br/>  {\"ramlib\", {\"std\", \"ieee\"}},<br/>  {\"std_cell_lib\", {\"ieee\", \"std_cell_lib\"}},<br/>  {\"synopsys\", {}}}</pre>"}, {"lang": "Object Pascal", "loc": 414, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>program topologicalsortrosetta;<br/>\u00a0<br/>{*<br/>Topological sorter to parse e.g. dependencies.<br/>Written for FreePascal 2.4.x/2.5.1. Probably works in Delphi, but you'd have to<br/>change some units.<br/>*}<br/>{$IFDEF FPC}<br/>// FreePascal-specific setup<br/>{$mode objfpc}<br/>uses {$IFDEF UNIX}<br/>  cwstring, {* widestring support for unix *} {$IFDEF UseCThreads}<br/>  cthreads, {$ENDIF UseCThreads} {$ENDIF UNIX}<br/>  Classes,<br/>  SysUtils;<br/>{$ENDIF}<br/>\u00a0<br/>type<br/>  RNodeIndex = record<br/>    NodeName: WideString; //Name of the node<br/>    //Index: integer; //Index number used in DepGraph. For now, we can distill the index from the array index. If we want to use a TList or similar, we'd need an index property<br/>    Order: integer;  //Order when sorted<br/>  end;<br/>\u00a0<br/>  RDepGraph = record<br/>    Node: integer;  //Refers to Index in NodeIndex<br/>    DependsOn: integer; //The Node depends on this other Node.<br/>  end;<br/>\u00a0<br/>  { TTopologicalSort }<br/>\u00a0<br/>  TTopologicalSort = class(TObject)<br/>  private<br/>    Nodes: array of RNodeIndex;<br/>    DependencyGraph: array of RDepGraph;<br/>    FCanBeSorted: boolean;<br/>    function SearchNode(NodeName: WideString): integer;<br/>    function SearchIndex(NodeID: integer): WideString;<br/>    function DepFromNodeID(NodeID: integer): integer;<br/>    function DepFromDepID(DepID: integer): integer;<br/>    function DepFromNodeIDDepID(NodeID, DepID: integer): integer;<br/>    procedure DelDependency(const Index: integer);<br/>  public<br/>    constructor Create;<br/>    destructor Destroy; override;<br/>    procedure SortOrder(var Output: TStringList);<br/>    procedure AddNode(NodeName: WideString);<br/>    procedure AddDependency(NodeName, DependsOn: WideString);<br/>    procedure AddNodeDependencies(NodeAndDependencies: TStringList);<br/>    //Each string has node, and the nodes it depends on. This allows insertion of an entire dependency graph at once<br/>    //procedure DelNode(NodeName: Widestring);<br/>    procedure DelDependency(NodeName, DependsOn: WideString);<br/>\u00a0<br/>    property CanBeSorted: boolean read FCanBeSorted;<br/>\u00a0<br/>  end;<br/>\u00a0<br/>const<br/>  INVALID = -1;<br/>  // index not found for index search functions, no sort order defined, or record invalid/deleted<br/>\u00a0<br/>  function TTopologicalSort.SearchNode(NodeName: WideString): integer;<br/>  var<br/>    Counter: integer;<br/>  begin<br/>    // Return -1 if node not found. If node found, return index in array<br/>    Result\u00a0:= INVALID;<br/>    for Counter\u00a0:= 0 to High(Nodes) do<br/>    begin<br/>      if Nodes[Counter].NodeName = NodeName then<br/>      begin<br/>        Result\u00a0:= Counter;<br/>        break;<br/>      end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  function TTopologicalSort.SearchIndex(NodeID: integer): WideString;<br/>    //Look up name for the index<br/>  begin<br/>    if (NodeID &gt; 0) and (NodeID &lt;= High(Nodes)) then<br/>    begin<br/>      Result\u00a0:= Nodes[NodeID].NodeName;<br/>    end<br/>    else<br/>    begin<br/>      Result\u00a0:= 'ERROR'; //something's fishy, this shouldn't happen<br/>    end;<br/>  end;<br/>\u00a0<br/>  function TTopologicalSort.DepFromNodeID(NodeID: integer): integer;<br/>    // Look for Node index number in the dependency graph<br/>    // and return the first node found. If nothing found, return -1<br/>  var<br/>    Counter: integer;<br/>  begin<br/>    Result\u00a0:= INVALID;<br/>    for Counter\u00a0:= 0 to High(DependencyGraph) do<br/>    begin<br/>      if DependencyGraph[Counter].Node = NodeID then<br/>      begin<br/>        Result\u00a0:= Counter;<br/>        break;<br/>      end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  function TTopologicalSort.DepFromDepID(DepID: integer): integer;<br/>    // Look for dependency index number in the dependency graph<br/>    // and return the index for the first one found. If nothing found, return -1<br/>  var<br/>    Counter: integer;<br/>  begin<br/>    Result\u00a0:= INVALID;<br/>    for Counter\u00a0:= 0 to High(DependencyGraph) do<br/>    begin<br/>      if DependencyGraph[Counter].DependsOn = DepID then<br/>      begin<br/>        Result\u00a0:= Counter;<br/>        break;<br/>      end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  function TTopologicalSort.DepFromNodeIDDepID(NodeID, DepID: integer): integer;<br/>    // Shows index for the dependency from NodeID on DepID, or INVALID if not found<br/>  var<br/>    Counter: integer;<br/>  begin<br/>    Result\u00a0:= INVALID;<br/>    for Counter\u00a0:= 0 to High(DependencyGraph) do<br/>    begin<br/>      if DependencyGraph[Counter].Node = NodeID then<br/>        if DependencyGraph[Counter].DependsOn = DepID then<br/>        begin<br/>          Result\u00a0:= Counter;<br/>          break;<br/>        end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.DelDependency(const Index: integer);<br/>  // Removes dependency from array.<br/>  // Is fastest when the dependency is near the top of the array<br/>  // as we're copying the remaining elements.<br/>  var<br/>    Counter: integer;<br/>    OriginalLength: integer;<br/>  begin<br/>    OriginalLength\u00a0:= Length(DependencyGraph);<br/>    if Index = OriginalLength - 1 then<br/>    begin<br/>      SetLength(DependencyGraph, OriginalLength - 1);<br/>    end;<br/>    if Index &lt; OriginalLength - 1 then<br/>    begin<br/>      for Counter\u00a0:= Index to OriginalLength - 2 do<br/>      begin<br/>        DependencyGraph[Counter]\u00a0:= DependencyGraph[Counter + 1];<br/>      end;<br/>      SetLength(DependencyGraph, OriginalLength - 1);<br/>    end;<br/>    if Index &gt; OriginalLength - 1 then<br/>    begin<br/>      // This could happen when deleting on an empty array:<br/>      raise Exception.Create('Tried to delete index ' + IntToStr(Index) +<br/>        ' while the maximum index was ' + IntToStr(OriginalLength - 1));<br/>    end;<br/>  end;<br/>\u00a0<br/>  constructor TTopologicalSort.Create;<br/>  begin<br/>    inherited Create;<br/>  end;<br/>\u00a0<br/>  destructor TTopologicalSort.Destroy;<br/>  begin<br/>    // Clear up data just to make sure:<br/>    Finalize(DependencyGraph);<br/>    Finalize(Nodes);<br/>    inherited;<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.SortOrder(var Output: TStringList);<br/>  var<br/>    Counter: integer;<br/>    NodeCounter: integer;<br/>    OutputSortOrder: integer;<br/>    DidSomething: boolean; //used to detect cycles (circular references)<br/>    Node: integer;<br/>  begin<br/>    OutputSortOrder\u00a0:= 0;<br/>    DidSomething\u00a0:= True; // prime the loop below<br/>    FCanBeSorted\u00a0:= True; //hope for the best.<br/>    while (DidSomething = True) do<br/>    begin<br/>      // 1. Find all nodes (now) without dependencies, output them first and remove the dependencies:<br/>      // 1.1 Nodes that are not present in the dependency graph at all:<br/>      for Counter\u00a0:= 0 to High(Nodes) do<br/>      begin<br/>        if DepFromNodeID(Counter) = INVALID then<br/>        begin<br/>          if DepFromDepID(Counter) = INVALID then<br/>          begin<br/>            // Node doesn't occur in either side of the dependency graph, so it has sort order 0:<br/>            DidSomething\u00a0:= True;<br/>            if (Nodes[Counter].Order = INVALID) or<br/>              (Nodes[Counter].Order &gt; OutputSortOrder) then<br/>            begin<br/>              // Enter sort order if the node doesn't have a lower valid order already.<br/>              Nodes[Counter].Order\u00a0:= OutputSortOrder;<br/>            end;<br/>          end; //Invalid Dep<br/>        end; //Invalid Node<br/>      end; //Count<br/>      // Done with the first batch, so we can increase the sort order:<br/>      OutputSortOrder\u00a0:= OutputSortOrder + 1;<br/>      // 1.2 Nodes that are only present on the right hand side of the dep graph:<br/>      DidSomething\u00a0:= False;<br/>      // reverse order so we can delete dependencies without passing upper array<br/>      for Counter\u00a0:= High(DependencyGraph) downto 0 do<br/>      begin<br/>        Node\u00a0:= DependencyGraph[Counter].DependsOn; //the depended node<br/>        if (DepFromNodeID(Node) = INVALID) then<br/>        begin<br/>          DidSomething\u00a0:= True;<br/>          //Delete dependency so we don't hit it again:<br/>          DelDependency(Counter);<br/>          if (Nodes[Node].Order = INVALID) or (Nodes[Node].Order &gt; OutputSortOrder) then<br/>          begin<br/>            // Enter sort order if the node doesn't have a lower valid order already.<br/>            Nodes[Node].Order\u00a0:= OutputSortOrder;<br/>          end;<br/>        end;<br/>        OutputSortOrder\u00a0:= OutputSortOrder + 1; //next iteration<br/>      end;<br/>      // 2. Go back to 1 until we can't do more work, and do some bookkeeping:<br/>      OutputSortOrder\u00a0:= OutputSortOrder + 1;<br/>    end; //outer loop for 1 to 2<br/>    OutputSortOrder\u00a0:= OutputSortOrder - 1; //fix unused last loop.<br/>\u00a0<br/>    // 2. If we have dependencies left, we have a cycle; exit.<br/>    if (High(DependencyGraph) &gt; 0) then<br/>    begin<br/>      FCanBeSorted\u00a0:= False; //indicate we have a cycle<br/>      Output.Add('Cycle (circular dependency) detected, cannot sort further. Dependencies left:');<br/>      for Counter\u00a0:= 0 to High(DependencyGraph) do<br/>      begin<br/>        Output.Add(SearchIndex(DependencyGraph[Counter].Node) +<br/>          ' depends on: ' + SearchIndex(DependencyGraph[Counter].DependsOn));<br/>      end;<br/>    end<br/>    else<br/>    begin<br/>      // No cycle:<br/>      // Now parse results, if we have them<br/>      for Counter\u00a0:= 0 to OutputSortOrder do<br/>      begin<br/>        for NodeCounter\u00a0:= 0 to High(Nodes) do<br/>        begin<br/>          if Nodes[NodeCounter].Order = Counter then<br/>          begin<br/>            Output.Add(Nodes[NodeCounter].NodeName);<br/>          end;<br/>        end; //output each result<br/>      end; //order iteration<br/>    end; //cycle detection<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.AddNode(NodeName: WideString);<br/>  var<br/>    NodesNewLength: integer;<br/>  begin<br/>    // Adds node; make sure we don't add duplicate entries<br/>    if SearchNode(NodeName) = INVALID then<br/>    begin<br/>      NodesNewLength\u00a0:= Length(Nodes) + 1;<br/>      SetLength(Nodes, NodesNewLength);<br/>      Nodes[NodesNewLength - 1].NodeName\u00a0:= NodeName; //Arrays are 0 based<br/>      //Nodes[NodesNewLength -1].Index\u00a0:=  //If we change the object to a tlist or something, we already have an index property<br/>      Nodes[NodesNewLength - 1].Order\u00a0:= INVALID; //default value<br/>    end;<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.AddDependency(NodeName, DependsOn: WideString);<br/>  begin<br/>    // Make sure both nodes in the dependency exist as a node<br/>    if SearchNode(NodeName) = INVALID then<br/>    begin<br/>      Self.AddNode(NodeName);<br/>    end;<br/>    if SearchNode(DependsOn) = INVALID then<br/>    begin<br/>      Self.AddNode(DependsOn);<br/>    end;<br/>    // Add the dependency, only if we don't depend on ourselves:<br/>    if NodeName &lt;&gt; DependsOn then<br/>    begin<br/>      SetLength(DependencyGraph, Length(DependencyGraph) + 1);<br/>      DependencyGraph[High(DependencyGraph)].Node\u00a0:= SearchNode(NodeName);<br/>      DependencyGraph[High(DependencyGraph)].DependsOn\u00a0:= SearchNode(DependsOn);<br/>    end;<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.AddNodeDependencies(NodeAndDependencies: TStringList);<br/>  // Takes a stringlist containing a list of strings. Each string contains node names<br/>  // separated by spaces. The first node depends on the others. It is permissible to have<br/>  // only one node name, which doesn't depend on anything.<br/>  // This procedure will add the dependencies and the nodes in one go.<br/>  var<br/>    Deplist: TStringList;<br/>    StringCounter: integer;<br/>    NodeCounter: integer;<br/>  begin<br/>    if Assigned(NodeAndDependencies) then<br/>    begin<br/>      DepList\u00a0:= TStringList.Create;<br/>      try<br/>        for StringCounter\u00a0:= 0 to NodeAndDependencies.Count - 1 do<br/>        begin<br/>          // For each string in the argument: split into names, and process:<br/>          DepList.Delimiter\u00a0:= ' '; //use space to separate the entries<br/>          DepList.StrictDelimiter\u00a0:= False; //allows us to ignore double spaces in input.<br/>          DepList.DelimitedText\u00a0:= NodeAndDependencies[StringCounter];<br/>          for NodeCounter\u00a0:= 0 to DepList.Count - 1 do<br/>          begin<br/>            if NodeCounter = 0 then<br/>            begin<br/>              // Add the first node, which might be the only one.<br/>              Self.AddNode(Deplist[0]);<br/>            end;<br/>\u00a0<br/>            if NodeCounter &gt; 0 then<br/>            begin<br/>              // Only add dependency from the second item onwards<br/>              // The AddDependency code will automatically add Deplist[0] to the Nodes, if required<br/>              Self.AddDependency(DepList[0], DepList[NodeCounter]);<br/>            end;<br/>          end;<br/>        end;<br/>      finally<br/>        DepList.Free;<br/>      end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  procedure TTopologicalSort.DelDependency(NodeName, DependsOn: WideString);<br/>  // Delete the record.<br/>  var<br/>    NodeID: integer;<br/>    DependsID: integer;<br/>    Dependency: integer;<br/>  begin<br/>    NodeID\u00a0:= Self.SearchNode(NodeName);<br/>    DependsID\u00a0:= Self.SearchNode(DependsOn);<br/>    if (NodeID &lt;&gt; INVALID) and (DependsID &lt;&gt; INVALID) then<br/>    begin<br/>      // Look up dependency and delete it.<br/>      Dependency\u00a0:= Self.DepFromNodeIDDepID(NodeID, DependsID);<br/>      if (Dependency &lt;&gt; INVALID) then<br/>      begin<br/>        Self.DelDependency(Dependency);<br/>      end;<br/>    end;<br/>  end;<br/>\u00a0<br/>  // Main program:<br/>var<br/>  InputList: TStringList; //Lines of dependencies<br/>  TopSort: TTopologicalSort; //Topological sort object<br/>  OutputList: TStringList; //Sorted dependencies<br/>  Counter: integer;<br/>begin<br/>\u00a0<br/>  //Actual sort<br/>  InputList\u00a0:= TStringList.Create;<br/>  // Add rosetta code sample input separated by at least one space in the lines<br/>  InputList.Add(<br/>    'des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee');<br/>  InputList.Add('dw01             ieee dw01 dware gtech');<br/>  InputList.Add('dw02             ieee dw02 dware');<br/>  InputList.Add('dw03             std synopsys dware dw03 dw02 dw01 ieee gtech');<br/>  InputList.Add('dw04             dw04 ieee dw01 dware gtech');<br/>  InputList.Add('dw05             dw05 ieee dware');<br/>  InputList.Add('dw06             dw06 ieee dware');<br/>  InputList.Add('dw07             ieee dware');<br/>  InputList.Add('dware            ieee dware');<br/>  InputList.Add('gtech            ieee gtech');<br/>  InputList.Add('ramlib           std ieee');<br/>  InputList.Add('std_cell_lib     ieee std_cell_lib');<br/>  InputList.Add('synopsys');<br/>  TopSort\u00a0:= TTopologicalSort.Create;<br/>  OutputList\u00a0:= TStringList.Create;<br/>  try<br/>    TopSort.AddNodeDependencies(InputList); //read in nodes<br/>    TopSort.SortOrder(OutputList); //perform the sort<br/>    for Counter\u00a0:= 0 to OutputList.Count - 1 do<br/>    begin<br/>      writeln(OutputList[Counter]);<br/>    end;<br/>  except<br/>    on E: Exception do<br/>    begin<br/>      Writeln(stderr, 'Error: ', DateTimeToStr(Now),<br/>        ': Error sorting. Technical details: ',<br/>        E.ClassName, '/', E.Message);<br/>    end;<br/>  end; //try<br/>  OutputList.Free;<br/>  TopSort.Free;<br/>  InputList.Free;<br/>end.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 54, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> dep_libs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"des_system_lib\"</span>, <span class=\"br0\">[</span><span class=\"st0\">\"std\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"synopsys\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"std_cell_lib\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"des_system_lib\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw02\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw01\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ramlib\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw01\"</span>,           <span class=\"co1\">(*\"dw04\"::*)</span><span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw01\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"gtech\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw02\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw02\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw03\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"std\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"synopsys\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw03\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw02\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw01\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"gtech\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw04\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"dw04\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dw01\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"gtech\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw05\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"dw05\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw06\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"dw06\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dw07\"</span>,           <span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"dware\"</span>,          <span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dware\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"gtech\"</span>,          <span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"gtech\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"ramlib\"</span>,         <span class=\"br0\">[</span><span class=\"st0\">\"std\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ieee\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"std_cell_lib\"</span>,   <span class=\"br0\">[</span><span class=\"st0\">\"ieee\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"std_cell_lib\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"synopsys\"</span>,       <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> dep_libs <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f <span class=\"br0\">(</span>lib, deps<span class=\"br0\">)</span> <span class=\"sy0\">=</span>  <span class=\"co1\">(* remove self dependency *)</span><br/>    <span class=\"br0\">(</span>lib,<br/>     <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> d <span class=\"sy0\">-&gt;</span> d <span class=\"sy0\">&lt;&gt;</span> lib<span class=\"br0\">)</span> deps<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map f dep_libs<br/>\u00a0<br/><span class=\"kw1\">let</span> rev_unique <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem x acc <span class=\"kw1\">then</span> acc <span class=\"kw1\">else</span> x<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> libs <span class=\"sy0\">=</span>  <span class=\"co1\">(* list items, each being unique *)</span><br/>  rev_unique <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>flatten<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>lib, deps<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> lib<span class=\"sy0\">::</span>deps<span class=\"br0\">)</span> dep_libs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> get_deps lib <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>assoc lib dep_libs<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> res <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc later todo progress <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> todo, later <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>, _ <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> progress<br/>      <span class=\"kw1\">then</span> aux acc <span class=\"br0\">[</span><span class=\"br0\">]</span> later <span class=\"kw1\">false</span><br/>      <span class=\"kw1\">else</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinvalid_arg\"><span class=\"kw3\">invalid_arg</span></a> <span class=\"st0\">\"un-orderable data\"</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs, _ <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> deps <span class=\"sy0\">=</span> get_deps x <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> ok <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>for_all <span class=\"br0\">(</span><span class=\"kw1\">fun</span> dep <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem dep acc<span class=\"br0\">)</span> deps <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> ok<br/>      <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> later xs <span class=\"kw1\">true</span><br/>      <span class=\"kw1\">else</span> aux acc <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>later<span class=\"br0\">)</span> xs progress<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> starts, todo <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>partition <span class=\"br0\">(</span><span class=\"kw1\">fun</span> lib <span class=\"sy0\">-&gt;</span> get_deps lib <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> libs <span class=\"kw1\">in</span><br/>  aux starts <span class=\"br0\">[</span><span class=\"br0\">]</span> todo <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"result: \\n \"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\", \"</span> res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oz", "loc": 86, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Deps = <span class=\"kw1\">unit</span><span class=\"br0\">(</span><br/>            des_system_lib: <span class=\"br0\">[</span>std synopsys std_cell_lib des_system_lib<br/>                             dw02 dw01 ramlib ieee<span class=\"br0\">]</span><br/>            dw01: <span class=\"br0\">[</span>ieee dw01 dware gtech<span class=\"br0\">]</span><br/>            dw02: <span class=\"br0\">[</span>ieee dw02 dware<span class=\"br0\">]</span><br/>            dw03: <span class=\"br0\">[</span>std synopsys dware dw03 dw02 dw01 ieee gtech<span class=\"br0\">]</span><br/>            dw04: <span class=\"br0\">[</span>dw04 ieee dw01 dware gtech<span class=\"br0\">]</span><br/>            dw05: <span class=\"br0\">[</span>dw05 ieee dware<span class=\"br0\">]</span><br/>            dw06: <span class=\"br0\">[</span>dw06 ieee dware<span class=\"br0\">]</span><br/>            dw07: <span class=\"br0\">[</span>ieee dware<span class=\"br0\">]</span><br/>            dware: <span class=\"br0\">[</span>ieee dware<span class=\"br0\">]</span><br/>            gtech: <span class=\"br0\">[</span>ieee gtech<span class=\"br0\">]</span><br/>            ramlib: <span class=\"br0\">[</span>std ieee<span class=\"br0\">]</span><br/>            std_cell_lib: <span class=\"br0\">[</span>ieee std_cell_lib<span class=\"br0\">]</span><br/>            synopsys:nil<br/>            <span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">%% Describe possible solutions</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">TopologicalOrder</span> Solution<span class=\"br0\">}</span><br/>     FullDeps = <span class=\"br0\">{</span>Complete Deps<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"co1\">%% The solution is a record that maps library names</span><br/>     <span class=\"co1\">%% to finite domain variables.</span><br/>     <span class=\"co1\">%% The smaller the value, the earlier it must be compiled</span><br/>     Solution = <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>record sol <span class=\"br0\">{</span>Arity FullDeps<span class=\"br0\">}</span> 1<span class=\"sy0\">#</span><span class=\"br0\">{</span>Width FullDeps<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"co1\">%% for every lib on the left side</span><br/>     <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>forAllInd FullDeps<br/>      <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> LibName Dependants<span class=\"br0\">}</span><br/>         <span class=\"co1\">%% ... and every dependant on the right side</span><br/>         <span class=\"kw1\">for</span> Dependant <span class=\"kw1\">in</span> Dependants <span class=\"kw1\">do</span><br/>            <span class=\"co1\">%% propagate compilation order</span><br/>            <span class=\"kw1\">if</span> Dependant <span class=\"sy0\">\\=</span> LibName <span class=\"kw1\">then</span><br/>               Solution<span class=\"sy0\">.</span>LibName <span class=\"sy0\">&gt;:</span> Solution<span class=\"sy0\">.</span>Dependant<br/>            <span class=\"kw1\">end</span><br/>         <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"co1\">%% enumerate solutions</span><br/>     <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>distribute naive Solution<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% adds empty list of dependencies for libs that only occur on the right side</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Complete</span> Dep<span class=\"br0\">}</span><br/>     AllLibs = <span class=\"br0\">{</span>Nub <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>foldL Dep Append nil<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Adjoin<br/>      <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>toRecord <span class=\"kw1\">unit</span> <span class=\"br0\">{</span>Map AllLibs <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> L<span class=\"br0\">}</span> L<span class=\"sy0\">#</span>nil <span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>      Dep<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% removes duplicates</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Nub</span> Xs<span class=\"br0\">}</span><br/>     D = <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>new<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> Xs <span class=\"kw1\">do</span> D<span class=\"sy0\">.</span>X <span class=\"sy0\">:=</span> <span class=\"kw1\">unit</span> <span class=\"kw1\">end</span><br/>     <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>keys D<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% print grouped by parallelizable jobs</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">PrintSolution</span> Sol<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span><span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>foldL Sol Value<span class=\"sy0\">.</span>max 1<span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> Lib <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Arity <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>filter Sol <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span> X <span class=\"sy0\">==</span> I <span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo Lib<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">GetOrderedLibs</span> Sol<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Map<br/>      <span class=\"br0\">{</span>Sort <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>toListInd Sol<span class=\"br0\">}</span> CompareSecond<span class=\"br0\">}</span><br/>      SelectFirst<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">CompareSecond</span> A B<span class=\"br0\">}</span> A<span class=\"sy0\">.</span>2 <span class=\"sy0\">&lt;</span> B<span class=\"sy0\">.</span>2 <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SelectFirst</span> X<span class=\"br0\">}</span> X<span class=\"sy0\">.</span>1 <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">case</span> <span class=\"br0\">{</span>SearchOne TopologicalOrder<span class=\"br0\">}</span><br/>  <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Un-orderable.\"</span><span class=\"br0\">}</span><br/>  <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">[</span>Sol<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"A possible topological ordering: \"</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>GetOrderedLibs Sol<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"<span class=\"es0\">\\n</span>BONUS - grouped by parallelizable compile jobs:\"</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>PrintSolution Sol<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Pascal", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> print_topo_sort <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%deps</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%ba</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$before</span><span class=\"sy0\">,</span> <span class=\"re0\">$afters_aref</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%deps</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$after</span> <span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$afters_aref</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"re0\">$before</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$before</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$after</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">||=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">@afters</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span> <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%ba</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@afters<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"re0\">@ba</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%ba</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">!!</span><span class=\"re0\">%ba</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Cycle found! \"</span><span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%ba</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"---<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%deps</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    des_system_lib <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std synopsys std_cell_lib des_system_lib dw02<br/>                                                        dw01 ramlib ieee <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw01           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dw01 dware gtech                         <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw02           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dw02 dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw03           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std synopsys dware dw03 dw02 dw01 ieee gtech  <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw04           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw04 ieee dw01 dware gtech                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw05           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw05 ieee dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw06           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw06 ieee dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw07           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dware                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dware          <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dware                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    gtech          <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee gtech                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    ramlib         <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std ieee                                      <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    std_cell_lib   <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee std_cell_lib                             <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    synopsys       <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>                                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$deps</span><span class=\"br0\">{</span><span class=\"st_h\">'dw01'</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'dw04'</span><span class=\"sy0\">;</span> <span class=\"co1\"># Add unresolvable dependency</span><br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> print_topo_sort <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%deps</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%ba</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$before</span><span class=\"sy0\">,</span> <span class=\"re0\">$afters_aref</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%deps</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$after</span> <span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$afters_aref</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"re0\">$before</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$before</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$after</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">||=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">@afters</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span> <span class=\"re0\">$ba</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%ba</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@afters<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"re0\">@ba</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%ba</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">!!</span><span class=\"re0\">%ba</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Cycle found! \"</span><span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%ba</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"---<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%deps</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    des_system_lib <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std synopsys std_cell_lib des_system_lib dw02<br/>                                                        dw01 ramlib ieee <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw01           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dw01 dware gtech                         <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw02           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dw02 dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw03           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std synopsys dware dw03 dw02 dw01 ieee gtech  <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw04           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw04 ieee dw01 dware gtech                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw05           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw05 ieee dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw06           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> dw06 ieee dware                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dw07           <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dware                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    dware          <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee dware                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    gtech          <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee gtech                                    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    ramlib         <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> std ieee                                      <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    std_cell_lib   <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> ieee std_cell_lib                             <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    synopsys       <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>                                               <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$deps</span><span class=\"br0\">{</span><span class=\"st_h\">'dw01'</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'dw04'</span><span class=\"sy0\">;</span> <span class=\"co1\"># Add unresolvable dependency</span><br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 37, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> print_topo_sort <span class=\"br0\">(</span> <span class=\"re0\">%deps</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%ba</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">%deps</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$before</span><span class=\"sy0\">,</span> <span class=\"re0\">@afters</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@afters</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$after</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">%ba</span><span class=\"br0\">{</span><span class=\"re0\">$before</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$before</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$after</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">%ba</span><span class=\"br0\">{</span><span class=\"re0\">$after</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"re0\">%ba</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span> <span class=\"kw1\">not</span> <span class=\"sy0\">*.</span><span class=\"me1\">value</span> <span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@afters</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"sy0\">~</span><span class=\"re0\">@afters</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">%ba</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span><span class=\"sy0\">:</span><span class=\"kw3\">delete</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">%ba</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">{</span><span class=\"re0\">@afters</span><span class=\"br0\">}</span><span class=\"sy0\">:</span><span class=\"kw3\">delete</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"re0\">%ba</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"Cycle found! {%ba.keys.sort}\"</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">'---'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%deps</span> <span class=\"sy0\">=</span><br/>    des_system_lib <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std synopsys std_cell_lib des_system_lib dw02<br/>                                                     dw01 ramlib ieee <span class=\"sy0\">&gt;,</span><br/>    dw01           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dw01 dware gtech                         <span class=\"sy0\">&gt;,</span><br/>    dw02           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dw02 dware                               <span class=\"sy0\">&gt;,</span><br/>    dw03           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std synopsys dware dw03 dw02 dw01 ieee gtech  <span class=\"sy0\">&gt;,</span><br/>    dw04           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw04 ieee dw01 dware gtech                    <span class=\"sy0\">&gt;,</span><br/>    dw05           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw05 ieee dware                               <span class=\"sy0\">&gt;,</span><br/>    dw06           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw06 ieee dware                               <span class=\"sy0\">&gt;,</span><br/>    dw07           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dware                                    <span class=\"sy0\">&gt;,</span><br/>    dware          <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dware                                    <span class=\"sy0\">&gt;,</span><br/>    gtech          <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee gtech                                    <span class=\"sy0\">&gt;,</span><br/>    ramlib         <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std ieee                                      <span class=\"sy0\">&gt;,</span><br/>    std_cell_lib   <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee std_cell_lib                             <span class=\"sy0\">&gt;,</span><br/>    synopsys       <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span>                                               <span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">%deps</span><span class=\"sy0\">&lt;</span>dw01<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>ieee dw01 dware gtech dw04<span class=\"sy0\">&gt;;</span> <span class=\"co1\"># Add unresolvable dependency</span><br/>print_topo_sort<span class=\"br0\">(</span><span class=\"re0\">%deps</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(de sortDependencies (Lst)<br/>   (setq Lst                              # Build a flat list<br/>      (uniq<br/>         (mapcan<br/>            '((L)<br/>               (put (car L) 'dep (cdr L)) # Store dependencies in 'dep' properties<br/>               (copy L) )<br/>            (mapcar uniq Lst) ) ) )       # without self-dependencies<br/>   (make<br/>      (while Lst<br/>         (ifn (find '((This) (not (: dep))) Lst)   # Found non-depending lib?<br/>            (quit \"Can't resolve dependencies\" Lst)<br/>            (del (link @) 'Lst)                    # Yes: Store in result<br/>            (for This Lst                          # and remove from 'dep's<br/>               (=: dep (delete @ (: dep))) ) ) ) ) )</pre>"}, {"lang": "PowerShell", "loc": 99, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">#Input Data</span><br/><span class=\"re0\">$a</span><span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"566b16\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"st0\">\"<br/>des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>dw01             ieee dw01 dware gtech<br/>dw02             ieee dw02 dware<br/>dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/>dw04             dw04 ieee dw01 dware gtech<br/>dw05             dw05 ieee dware<br/>dw06             dw06 ieee dware<br/>dw07             ieee dware<br/>dware            ieee dware<br/>gtech            ieee gtech<br/>ramlib           std ieee<br/>std_cell_lib     ieee std_cell_lib<br/>synopsys         <br/>\"</span><span class=\"sy0\">@</span><br/><span class=\"co1\">#Convert to Object[]</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"kw3\">switch</span> <span class=\"br0\">(</span> <span class=\"re0\">$a</span>.split<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$b</span><span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.split<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">New-Object</span> PSObject <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>            Library <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            <span class=\"st0\">\"Library Dependencies\"</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> $<span class=\"br0\">(</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span><span class=\"re0\">$b</span>.length<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-match</span> <span class=\"st0\">'\\w'</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">#Add pure dependencies</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>    <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"st0\">\"Library Dependencies\"</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$d</span><span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        $<span class=\"br0\">(</span>:andl <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"kw4\">-match</span> <span class=\"re0\">$i</span>.Library<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$false</span><br/>                <span class=\"kw3\">break</span> andl<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$c</span><span class=\"sy0\">+=</span><span class=\"kw1\">New-Object</span> PSObject <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>            Library<span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>            <span class=\"st0\">\"Library Dependencies\"</span><span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"85b8c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">#Associate with a dependency value</span><br/><span class=\"co1\">##Initial Dependency Value</span><br/><span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> Library <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> Library<span class=\"sy0\">,</span><span class=\"st0\">\"Library Dependencies\"</span><span class=\"sy0\">,@</span><span class=\"br0\">{</span><br/>    Name<span class=\"sy0\">=</span><span class=\"st0\">\"Dep Value\"</span><br/>    Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>        <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">##Modify Dependency Value, perform check for incorrect dependency</span><br/><span class=\"co1\">##Dep Value is determined by a parent child relationship, if a library is a parent, all libraries dependant on it are children</span><br/><span class=\"kw3\">for</span><span class=\"br0\">(</span> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$d</span>.count; <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$errmsg</span><span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span> <span class=\"re0\">$d</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-ne</span> <span class=\"re0\">$i</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">#Foreach other Child Library where this is a dependency, increase the Dep Value of the Child</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> $<span class=\"br0\">(</span>\u00a0:orl <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$k</span> <span class=\"kw3\">in</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Library Dependencies\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$k</span> <span class=\"kw4\">-match</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Library <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw3\">in</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Library Dependencies\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw4\">-match</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>.Library <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$errmsg</span><span class=\"sy0\">=</span><span class=\"st0\">\"Error Cyclic Dependency {0}&lt;-&gt;{1}\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.Library<span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>.Library<br/>                        <span class=\"kw3\">break</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"re0\">$true</span><br/>                <span class=\"kw3\">break</span> orl<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">#If the child has already been processed, increase the Dep Value of its children</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$l</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span> <span class=\"re0\">$d</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-ne</span> <span class=\"re0\">$j</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw3\">if</span><span class=\"br0\">(</span> $<span class=\"br0\">(</span>\u00a0:orl2 <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$m</span> <span class=\"kw3\">in</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$l</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Library Dependencies\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$m</span> <span class=\"kw4\">-match</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>.Library <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"re0\">$true</span><br/>                            <span class=\"kw3\">break</span> orl2<br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$l</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Dep Value\"</span><span class=\"sy0\">+=</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Dep Value\"</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Dep Value\"</span><span class=\"sy0\">+=</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>.<span class=\"st0\">\"Dep Value\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$errmsg</span> <span class=\"kw4\">-ne</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$errmsg</span><br/>            <span class=\"re0\">$d</span><span class=\"sy0\">=</span><span class=\"re0\">$null</span><br/>            <span class=\"kw3\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">#Sort and Display</span><br/><span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$d</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$d</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> <span class=\"st0\">\"Dep Value\"</span><span class=\"sy0\">,</span>Library <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <br/>        <span class=\"st0\">\"{0,-14} LIBRARY DEPENDENCIES<span class=\"es0\">`n</span>{1,-14} ====================\"</span> <span class=\"kw4\">-f</span> <span class=\"st0\">\"LIBRARY\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=======\"</span><br/>    <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"{0,-14} $($_.\"</span>Library Dependencies<span class=\"st0\">\")\"</span> <span class=\"kw4\">-f</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Library<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 119, "block": "<pre class=\"purebasic highlighted_source\">#EndOfDataMarker$ <span class=\"sy0\">=</span> <span class=\"st0\">\"::EndOfData::\"</span><br/><span class=\"kw1\">DataSection</span><br/>  <span class=\"co1\">;\"LIBRARY: [LIBRARY_DEPENDENCY_1 LIBRARY_DEPENDENCY_2 ... LIBRARY_DEPENDENCY_N]</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"des_system_lib: [std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw01: [ieee dw01 dware gtech]\"</span><br/>  <span class=\"co1\">;Data.s \"dw01: [ieee dw01 dware gtech dw04]\"\u00a0;comment the previous line and uncomment this one for cyclic dependency</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw02: [ieee dw02 dware]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw03: [std synopsys dware dw03 dw02 dw01 ieee gtech]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw04: [dw04 ieee dw01 dware gtech]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw05: [dw05 ieee dware]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw06: [dw06 ieee dware]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dw07: [ieee dware]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"dware: [ieee dware]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"gtech: [ieee gtech]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ramlib: [std ieee]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"std_cell_lib: [ieee std_cell_lib]\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"synopsys: nil\"</span><br/>  <span class=\"kw1\">Data</span>.s #EndOfDataMarker$<br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> DAG_node<br/>  Value.s<br/>  forRemoval.i <span class=\"co1\">;flag marks elements that should be removed the next time they are accessed</span><br/>  List dependencies.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Error\"</span>,<span class=\"st0\">\"Unable to open console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"co1\">;// initialize Directed Acyclic Graph //</span><br/><span class=\"kw1\">Define</span> i, itemData.s, firstBracketPos<br/><span class=\"kw1\">NewList</span> DAG.DAG_node<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw1\">Read</span>.s itemData<br/>  itemData <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span>itemData<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> itemData <span class=\"sy0\">&lt;&gt;</span> #EndOfDataMarker$<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;add library</span><br/>    DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>itemData, <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>itemData, <span class=\"st0\">\":\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;parse library dependencies</span><br/>    firstBracketPos <span class=\"sy0\">=</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>itemData, <span class=\"st0\">\"[\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> firstBracketPos<br/>      itemData <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>itemData, firstBracketPos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>itemData, <span class=\"st0\">\"]\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> firstBracketPos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>itemData, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>itemData, i, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span> <br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">Until</span> itemData <span class=\"sy0\">=</span> #EndOfDataMarker$<br/>\u00a0<br/><span class=\"co1\">;// process DAG //</span><br/><span class=\"co1\">;create DAG entry for nodes listed in dependencies but without their own entry</span><br/>NewMap libraries<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    libraries<span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>    <span class=\"kw1\">If</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<br/>      <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;remove self-dependencies</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>libraries<span class=\"br0\">(</span><span class=\"br0\">)</span>,DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><br/>    DeleteMapElement<span class=\"br0\">(</span>libraries<span class=\"br0\">(</span><span class=\"br0\">)</span>,DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">ResetList</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ForEach</span> libraries<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> MapKey<span class=\"br0\">(</span>libraries<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>ClearMap<span class=\"br0\">(</span>libraries<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;process DAG() repeatedly until no changes occur</span><br/><span class=\"kw1\">NewList</span> compileOrder.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span> <br/>  noChangesMade <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>forRemoval<br/>      <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"co1\">;remove dependencies that have been placed in the compileOrder</span><br/>      <span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>libraries<span class=\"br0\">(</span><span class=\"br0\">)</span>,DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">Next</span><br/>      <span class=\"co1\">;add DAG() entry to compileOrder if it has no more dependencies</span><br/>      <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>dependencies<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>compileOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        compileOrder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<br/>        libraries<span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True <span class=\"co1\">;mark the library for removal as a dependency</span><br/>        DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>forRemoval <span class=\"sy0\">=</span> #True<br/>        noChangesMade <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">Until</span> noChangesMade<br/>\u00a0<br/><span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Cyclic dependencies detected in:\"</span> <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> DAG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Compile order:\"</span> <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> compileOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> compileOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndIf</span> <br/>\u00a0<br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 36, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/>data <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'des_system_lib'</span>:   <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw01'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee dw01 dware gtech'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw02'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee dw02 dware'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw03'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'std synopsys dware dw03 dw02 dw01 ieee gtech'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw04'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'dw04 ieee dw01 dware gtech'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw05'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'dw05 ieee dware'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw06'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'dw06 ieee dware'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dw07'</span>:             <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee dware'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'dware'</span>:            <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee dware'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'gtech'</span>:            <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee gtech'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'ramlib'</span>:           <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'std ieee'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'std_cell_lib'</span>:     <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'ieee std_cell_lib'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'synopsys'</span>:         <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> toposort2<span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw1\">in</span> data.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        v.<span class=\"me1\">discard</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"co1\"># Ignore self dependencies</span><br/>    extra_items_in_deps <span class=\"sy0\">=</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw2\">set</span>.<span class=\"me1\">union</span><span class=\"sy0\">,</span> data.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"kw2\">set</span><span class=\"br0\">(</span>data.<span class=\"me1\">keys</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    data.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"br0\">{</span>item:<span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> item <span class=\"kw1\">in</span> extra_items_in_deps<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        ordered <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>item <span class=\"kw1\">for</span> item<span class=\"sy0\">,</span>dep <span class=\"kw1\">in</span> data.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> dep<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> ordered:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">yield</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>ordered<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        data <span class=\"sy0\">=</span> <span class=\"br0\">{</span>item: <span class=\"br0\">(</span>dep - ordered<span class=\"br0\">)</span> <span class=\"kw1\">for</span> item<span class=\"sy0\">,</span>dep <span class=\"kw1\">in</span> data.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> item <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> ordered<span class=\"br0\">}</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> data<span class=\"sy0\">,</span> <span class=\"st0\">\"A cyclic dependency exists amongst\u00a0%r\"</span>\u00a0% data<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span> toposort2<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>deps &lt;- list(<br/>\"des_system_lib\" = c(\"std\", \"synopsys\", \"std_cell_lib\", \"des_system_lib\", \"dw02\", \"dw01\", \"ramlib\", \"ieee\"),<br/>\"dw01\" = c(\"ieee\", \"dw01\", \"dware\", \"gtech\", \"dw04\"),<br/>\"dw02\" = c(\"ieee\", \"dw02\", \"dware\"),<br/>\"dw03\" = c(\"std\", \"synopsys\", \"dware\", \"dw03\", \"dw02\", \"dw01\", \"ieee\", \"gtech\"),<br/>\"dw04\" = c(\"dw04\", \"ieee\", \"dw01\", \"dware\", \"gtech\"),<br/>\"dw05\" = c(\"dw05\", \"ieee\", \"dware\"),<br/>\"dw06\" = c(\"dw06\", \"ieee\", \"dware\"),<br/>\"dw07\" = c(\"ieee\", \"dware\"),<br/>\"dware\" = c(\"ieee\", \"dware\"),<br/>\"gtech\" = c(\"ieee\", \"gtech\"),<br/>\"ramlib\" = c(\"std\", \"ieee\"),<br/>\"std_cell_lib\" = c(\"ieee\", \"std_cell_lib\"),<br/>\"synopsys\" = c())<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 60, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define G <br/>  (make-hash <br/>   '((des_system_lib . (std synopsys std_cell_lib des_system_lib dw02<br/>                            dw01 ramlib ieee))<br/>     (dw01           . (ieee dw01 dware gtech))<br/>     (dw02           . (ieee dw02 dware))<br/>     (dw03           . (std synopsys dware dw03 dw02 dw01 ieee gtech))<br/>     (dw04           . (dw04 ieee dw01 dware gtech))<br/>     (dw05           . (dw05 ieee dware))<br/>     (dw06           . (dw06 ieee dware))<br/>     (dw07           . (ieee dware))<br/>     (dware          . (ieee dware))<br/>     (gtech          . (ieee gtech))<br/>     (ramlib         . (std ieee))<br/>     (std_cell_lib   . (ieee std_cell_lib))<br/>     (synopsys       . ()))))<br/>\u00a0<br/>(define (clean G)<br/>  (define G* (hash-copy G))<br/>  (for ([(from tos) G])<br/>   \u00a0; remove self dependencies<br/>    (hash-set! G* from (remove from tos))<br/>   \u00a0; make sure all nodes are present in the ht<br/>    (for ([to tos]) (hash-update! G* to (\u03bb(_)_) '())))<br/>  G*)<br/>\u00a0<br/>(define (incoming G)<br/>  (define in (make-hash))<br/>  (for* ([(from tos) G] [to tos])<br/>    (hash-update! in to (\u03bb(fs) (cons from fs)) '()))<br/>  in)<br/>\u00a0<br/>(define (nodes G)       (hash-keys G))<br/>(define (out G n)       (hash-ref G n '()))<br/>(define (remove! G n m) (hash-set! G n (remove m (out G n))))<br/>\u00a0<br/>(define (topo-sort G)<br/>  (define n (length (nodes G)))<br/>  (define in (incoming G))<br/>  (define (no-incoming? n) (empty? (hash-ref in n '())))<br/>  (let loop ([L '()] [S (list-&gt;set (filter no-incoming? (nodes G)))])<br/>    (cond [(set-empty? S)<br/>           (if (= (length L) n)<br/>               L<br/>               (error 'topo-sort (~a \"cycle detected\" G)))]<br/>          [else <br/>           (define n   (set-first S))<br/>           (define S\\n (set-rest S))                <br/>           (for ([m (out G n)])<br/>             (remove! G n m)<br/>             (remove! in m n)<br/>             (when (no-incoming? m)<br/>               (set! S\\n (set-add S\\n m))))<br/>           (loop (cons n L) S\\n)])))<br/>\u00a0<br/>(topo-sort (clean G))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm does a topological sort (orders such that no item precedes a dependent item).*/</span><br/>iDep<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;        iPos<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;           iOrd<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>       <span class=\"coMULTI\">/*initialize some stemmed arrays to  0.*/</span><br/>nL=<span class=\"nu0\">15</span>;          nd=<span class=\"nu0\">44</span>;             nc=<span class=\"nu0\">69</span>         <span class=\"coMULTI\">/*     \"       \"  \"parms\"  and indices.*/</span><br/>label= <span class=\"st0\">'DES_SYSTEM_LIB  DW01  DW02  DW03  DW04  DW05  DW06  DW07  DWARE  GTECH  RAMLIB'</span>,<br/>       <span class=\"st0\">'STD_CELL_LIB  SYNOPSYS  STD  IEEE'</span><br/>iCode=<span class=\"nu0\">1</span> <span class=\"nu0\">14</span> <span class=\"nu0\">13</span> <span class=\"nu0\">12</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">11</span> <span class=\"nu0\">15</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">15</span> <span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">15</span> <span class=\"nu0\">3</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">14</span> <span class=\"nu0\">213</span> <span class=\"nu0\">9</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">15</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">15</span> <span class=\"nu0\">2</span>,<br/>      <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">8</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">39</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"nu0\">15</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">0</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">12</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>j=<span class=\"nu0\">0</span><br/>            <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span><br/>            iL=<span class=\"kw6\">word</span><span class=\"br0\">(</span>iCode, i<span class=\"br0\">)</span>;       <span class=\"kw1\">if</span> iL==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>               <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;           i=i + <span class=\"nu0\">1</span><br/>               iR=<span class=\"kw6\">word</span><span class=\"br0\">(</span>iCode, i<span class=\"br0\">)</span>;    <span class=\"kw1\">if</span> iR==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>               j=j + <span class=\"nu0\">1</span><br/>               iDep<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>1= iL<br/>               iDep<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>2= iR<br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>            <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*i*/</span><br/><span class=\"kw1\">call</span> tsort<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550compile order\u2550\u2550\u2550'</span><br/>@=  <span class=\"st0\">'libraries found.)'</span><br/>#=<span class=\"nu0\">0</span>;                             <span class=\"kw1\">do</span> o=nO  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nO;  #= #+<span class=\"nu0\">1</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>label, iOrd<span class=\"sy0\">.</span>o<span class=\"br0\">)</span><br/>                                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*o*/</span>;             <span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #= <span class=\"st0\">'no'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'   ('</span>#   @;        <span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550unordered libraries\u2550\u2550\u2550'</span><br/>#=<span class=\"nu0\">0</span>;                             <span class=\"kw1\">do</span> u=nO+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> nL;        #= #+<span class=\"nu0\">1</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>label, iOrd<span class=\"sy0\">.</span>u<span class=\"br0\">)</span><br/>                                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*u*/</span>;             <span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #= <span class=\"st0\">'no'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'   ('</span>#   <span class=\"st0\">\"unordered\"</span>  @<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tSort: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> iDep<span class=\"sy0\">.</span> iOrd<span class=\"sy0\">.</span> iPos<span class=\"sy0\">.</span> nd nL nO<br/>                                  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nL;  iOrd<span class=\"sy0\">.</span>i=i;   iPos<span class=\"sy0\">.</span>i=i<br/>                                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>       k=<span class=\"nu0\">1</span><br/>                                  <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> k<span class=\"sy0\">&lt;</span>=j;              j=k<br/>                                  k=nL + <span class=\"nu0\">1</span><br/>                                      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nd<br/>                                      iL =iDep<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>1     \u00a0;      iR =iPos<span class=\"sy0\">.</span>iL<br/>                                      ipL=iPos<span class=\"sy0\">.</span>iL      \u00a0;      ipR=iPos<span class=\"sy0\">.</span>iR<br/>                                      <span class=\"kw1\">if</span> iL==iR <span class=\"sy0\">|</span> ipL<span class=\"sy0\">&gt;.</span>k <span class=\"sy0\">|</span> ipL<span class=\"sy0\">&lt;</span>j <span class=\"sy0\">|</span> ipR<span class=\"sy0\">&lt;</span>j  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                      k=k - <span class=\"nu0\">1</span><br/>                                      _=iOrd<span class=\"sy0\">.</span>k         \u00a0;      iPos<span class=\"sy0\">.</span>_ =ipL<br/>                                                               iPos<span class=\"sy0\">.</span>iL=k<br/>                                      iOrd<span class=\"sy0\">.</span>ipL=iOrd<span class=\"sy0\">.</span>k  \u00a0;      iOrd<span class=\"sy0\">.</span>k =iL<br/>                                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>                                  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*until*/</span><br/>       nO=j - <span class=\"nu0\">1</span>;   <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 38, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'tsort'</span><br/><span class=\"kw1\">class</span> <span class=\"kw4\">Hash</span><br/>  <span class=\"kw1\">include</span> TSort<br/>  <span class=\"kw1\">alias</span> tsort_each_node each_key<br/>  <span class=\"kw1\">def</span> tsort_each_child<span class=\"br0\">(</span>node, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>    fetch<span class=\"br0\">(</span>node<span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>depends = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>DATA.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>  key, <span class=\"sy0\">*</span>libs = line.<span class=\"kw3\">split</span><br/>  depends<span class=\"br0\">[</span>key<span class=\"br0\">]</span> = libs<br/>  libs.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>lib<span class=\"sy0\">|</span> depends<span class=\"br0\">[</span>lib<span class=\"br0\">]</span> <span class=\"sy0\">||</span>= <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">p</span> depends.<span class=\"me1\">tsort</span><br/>  depends<span class=\"br0\">[</span><span class=\"st0\">\"dw01\"</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"dw04\"</span><br/>  <span class=\"kw3\">p</span> depends.<span class=\"me1\">tsort</span><br/><span class=\"kw1\">rescue</span> <span class=\"re2\">TSort::Cyclic</span> <span class=\"sy0\">=&gt;</span> e<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>cycle detected: #{e}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>__END__<br/>des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/>dw01             ieee dw01 dware gtech<br/>dw02             ieee dw02 dware<br/>dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/>dw04             dw04 ieee dw01 dware gtech<br/>dw05             dw05 ieee dware<br/>dw06             dw06 ieee dware<br/>dw07             ieee dware<br/>dware            ieee dware<br/>gtech            ieee gtech<br/>ramlib           std ieee<br/>std_cell_lib     ieee std_cell_lib<br/>synopsys</pre>"}, {"lang": "Sidef", "loc": 42, "block": "<pre class=\"ruby highlighted_source\">func print_topo_sort <span class=\"br0\">(</span>deps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var ba = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/>    deps.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>before, afters<span class=\"sy0\">|</span><br/>        afters.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>after<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>before\u00a0!= after<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                ba<span class=\"br0\">{</span>before<span class=\"br0\">}</span><span class=\"br0\">{</span>after<span class=\"br0\">}</span> = <span class=\"nu0\">1</span>;<br/>            <span class=\"br0\">}</span>;<br/>            ba<span class=\"br0\">{</span>after<span class=\"br0\">}</span> \\\\= <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        var afters = ba.<span class=\"me1\">keys</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> ba<span class=\"br0\">{</span>k<span class=\"br0\">}</span>.<span class=\"me1\">values</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">sort</span>;<br/>        afters.<span class=\"me1\">len</span> <span class=\"sy0\">||</span> <span class=\"kw1\">break</span>;<br/>        say afters.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>        ba.<span class=\"me1\">delete</span><span class=\"br0\">(</span>afters...<span class=\"br0\">)</span>;<br/>        ba.<span class=\"me1\">values</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> v.<span class=\"me1\">delete</span><span class=\"br0\">(</span>afters...<span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/>    <span class=\"br0\">}</span>;<br/>\u00a0<br/>    say <span class=\"br0\">(</span>ba.<span class=\"me1\">len</span>\u00a0? <span class=\"st0\">\"Cicle found! #{ba.keys.sort}\"</span>\u00a0: <span class=\"st0\">\"---\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var deps = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>    des_system_lib <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std synopsys std_cell_lib des_system_lib dw02<br/>                                                     dw01 ramlib ieee <span class=\"sy0\">&gt;</span>,<br/>    dw01           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dw01 dware gtech                         <span class=\"sy0\">&gt;</span>,<br/>    dw02           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dw02 dware                               <span class=\"sy0\">&gt;</span>,<br/>    dw03           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std synopsys dware dw03 dw02 dw01 ieee gtech  <span class=\"sy0\">&gt;</span>,<br/>    dw04           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw04 ieee dw01 dware gtech                    <span class=\"sy0\">&gt;</span>,<br/>    dw05           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw05 ieee dware                               <span class=\"sy0\">&gt;</span>,<br/>    dw06           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> dw06 ieee dware                               <span class=\"sy0\">&gt;</span>,<br/>    dw07           <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dware                                    <span class=\"sy0\">&gt;</span>,<br/>    dware          <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee dware                                    <span class=\"sy0\">&gt;</span>,<br/>    gtech          <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee gtech                                    <span class=\"sy0\">&gt;</span>,<br/>    ramlib         <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> std ieee                                      <span class=\"sy0\">&gt;</span>,<br/>    std_cell_lib   <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span> ieee std_cell_lib                             <span class=\"sy0\">&gt;</span>,<br/>    synopsys       <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span>                                               <span class=\"sy0\">&gt;</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/>print_topo_sort<span class=\"br0\">(</span>deps<span class=\"br0\">)</span>;<br/>deps<span class=\"br0\">{</span>:dw01<span class=\"br0\">}</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'dw04'</span><span class=\"br0\">)</span>;     <span class=\"co1\"># Add unresolvable dependency</span><br/>print_topo_sort<span class=\"br0\">(</span>deps<span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 37, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> topsort <span class=\"br0\">{</span>data<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Clean the data</span><br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>node depends<span class=\"br0\">}</span> <span class=\"re0\">$data</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact <span class=\"re0\">$depends</span> <span class=\"re0\">$node</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> depends <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$depends</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t    dict <span class=\"kw1\">set</span> data <span class=\"re0\">$node</span> <span class=\"re0\">$depends</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> node <span class=\"re0\">$depends</span> <span class=\"br0\">{</span>dict <span class=\"kw2\">lappend</span> data <span class=\"re0\">$node</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Do the sort</span><br/>    <span class=\"kw1\">set</span> sorted <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Find available nodes</span><br/>\t<span class=\"kw1\">set</span> avail <span class=\"br0\">[</span>dict keys <span class=\"br0\">[</span>dict filter <span class=\"re0\">$data</span> value <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$avail</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict size <span class=\"re0\">$data</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">error</span> <span class=\"st0\">\"graph is cyclic, possibly involving nodes <span class=\"es0\">\\\"</span>[dict keys $data]<span class=\"es0\">\\\"</span>\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$sorted</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># Note that the lsort is only necessary for making the results more like other langs</span><br/>\t<span class=\"kw2\">lappend</span> sorted <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"re0\">$avail</span><span class=\"br0\">]</span><br/>        <span class=\"co1\"># Remove from working copy of graph</span><br/>\tdict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>node depends<span class=\"br0\">}</span> <span class=\"re0\">$data</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">foreach</span> n <span class=\"re0\">$avail</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact <span class=\"re0\">$depends</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> depends <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$depends</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t\t    dict <span class=\"kw1\">set</span> data <span class=\"re0\">$node</span> <span class=\"re0\">$depends</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> node <span class=\"re0\">$avail</span> <span class=\"br0\">{</span><br/>\t    dict unset data <span class=\"re0\">$node</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 30, "block": "<pre class=\"bash highlighted_source\">$ <span class=\"kw2\">awk</span> <span class=\"st_h\">'{ for (i = 1; i &lt;= NF; i++) print $i, $1 }'</span> <span class=\"sy0\">&lt;&lt;!</span> <span class=\"sy0\">|</span> tsort<br/><span class=\"sy0\">&gt;</span> des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee<br/><span class=\"sy0\">&gt;</span> dw01             ieee dw01 dware gtech<br/><span class=\"sy0\">&gt;</span> dw02             ieee dw02 dware<br/><span class=\"sy0\">&gt;</span> dw03             std synopsys dware dw03 dw02 dw01 ieee gtech<br/><span class=\"sy0\">&gt;</span> dw04             dw04 ieee dw01 dware gtech<br/><span class=\"sy0\">&gt;</span> dw05             dw05 ieee dware<br/><span class=\"sy0\">&gt;</span> dw06             dw06 ieee dware<br/><span class=\"sy0\">&gt;</span> dw07             ieee dware<br/><span class=\"sy0\">&gt;</span> dware            ieee dware<br/><span class=\"sy0\">&gt;</span> gtech            ieee gtech<br/><span class=\"sy0\">&gt;</span> ramlib           std ieee<br/><span class=\"sy0\">&gt;</span> std_cell_lib     ieee std_cell_lib<br/><span class=\"sy0\">&gt;</span> synopsys         <br/><span class=\"sy0\">&gt;</span> <span class=\"sy0\">!</span><br/>ieee<br/>dware<br/>dw02<br/>dw05<br/>dw06<br/>dw07<br/>gtech<br/>dw01<br/>dw04<br/>std_cell_lib<br/>synopsys<br/>std<br/>dw03<br/>ramlib<br/>des_system_lib</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">tsort = ~&amp;nmnNCjA*imSLs2nSjiNCSPT; @NiX ^=lxPrnSPX ^(~&amp;rlPlT,~&amp;rnPrmPljA*<a class=\"__cf_email__\" data-cfemail=\"b6f2f6c4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)^|/~&amp; ~&amp;m!=rnSPlX</pre>"}, {"lang": "VBScript", "loc": 81, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>class topological<br/>\t<span class=\"kw4\">dim</span> dictDependencies<br/>\t<span class=\"kw4\">dim</span> dictReported<br/>\t<span class=\"kw4\">dim</span> depth<br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> class_initialize<br/>\t\t<span class=\"kw4\">set</span> dictDependencies = <span class=\"kw2\">createobject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\t\t<span class=\"kw4\">set</span> dictReported = <span class=\"kw2\">createobject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\t\tdepth = 0<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> reset<br/>\t\tdictReported.removeall<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw4\">property</span> <span class=\"kw4\">let</span> dependencies( s )<br/>\t\t<span class=\"co1\">'assuming token tab token-list newline<br/></span>\t\t<span class=\"kw4\">dim</span> i, j ,k<br/>\t\t<span class=\"kw4\">dim</span> aList<br/>\t\t<span class=\"kw4\">dim</span> dep<br/>\t\t<span class=\"kw4\">dim</span> a1<br/>\t\taList = Split( s, vbNewLine )<br/>\t\t<span class=\"co1\">'~ remove empty lines at end<br/></span>\t\t<span class=\"kw3\">do</span> <span class=\"kw3\">while</span> aList( <span class=\"kw4\">UBound</span>( aList ) ) = vbnullstring<br/>\t\t\t<span class=\"kw4\">redim</span> <span class=\"kw4\">preserve</span> aList( <span class=\"kw4\">UBound</span>( aList ) - 1 )<br/>\t\t<span class=\"kw3\">loop</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( aList ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( aList )<br/>\t\t\taList( i ) = Split( aList( i ), vbTab, 2 )<br/>\t\t\ta1 = Split( aList( i )( 1 ), <span class=\"st0\">\" \"</span> )<br/>\t\t\tk = 0<br/>\t\t\t<span class=\"kw3\">for</span> j = <span class=\"kw4\">lbound</span>( a1) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(a1)<br/>\t\t\t\t<span class=\"kw3\">if</span> a1(j) &lt;&gt; aList(i)(0) <span class=\"kw3\">then</span><br/>\t\t\t\t\ta1(k) = a1(j)<br/>\t\t\t\t\tk = k + 1<br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">next</span><br/>\t\t\t<span class=\"kw4\">redim</span> <span class=\"kw4\">preserve</span> a1(k-1)<br/>\t\t\taList(i)(1) = a1<br/>\t\t<span class=\"kw3\">next</span><br/>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( aList ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( aList )<br/>\t\t\tdep = aList(i)(0)<br/>\t\t\t<span class=\"kw3\">if</span> <span class=\"kw3\">not</span> dictDependencies.Exists( dep ) <span class=\"kw3\">then</span><br/>\t\t\t\tdictDependencies.add dep, aList(i)(1)<br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">next</span><br/>\u00a0<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> resolve( s )<br/>\t\t<span class=\"kw4\">dim</span> i <br/>\t\t<span class=\"kw4\">dim</span> deps<br/>\t\t<span class=\"co1\">'~ wscript.echo string(depth,\"!\"),s<br/></span>\t\tdepth = depth + 1<br/>\t\t<span class=\"kw3\">if</span> dictDependencies.Exists(s) <span class=\"kw3\">then</span><br/>\t\t\tdeps = dictDependencies(s)<br/>\t\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>(deps) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(deps)<br/>\t\t\t\tresolve deps(i)<br/>\t\t\t<span class=\"kw3\">next</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"kw3\">not</span> seen(s) <span class=\"kw3\">then</span><br/>\t\t\twscript.echo s<br/>\t\t\tsee s<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\tdepth = depth - 1<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">function</span> seen( key )<br/>\t\tseen = dictReported.Exists( key )<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> see( key )<br/>\t\tdictReported.add key, <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw4\">property</span> <span class=\"kw4\">get</span> keys<br/>\t\tkeys = dictDependencies.keys<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 330, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"co1\">' Adapted from:</span><br/><span class=\"co1\">' http://tawani.blogspot.com/2009/02/topological-sorting-and-cyclic.html</span><br/><span class=\"co1\">' added/changed:</span><br/><span class=\"co1\">' - conversion to VB.Net (.Net 2 framework)</span><br/><span class=\"co1\">' - added Rosetta Code dependency format parsing</span><br/><span class=\"co1\">' - check &amp; removal of self-dependencies before sorting</span><br/><span class=\"kw1\">Module</span> Program<br/>\t<span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Dim</span> Fields <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> Field<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' You can also add Dependson using code like:</span><br/>\t\t<span class=\"co1\">' .DependsOn = New String() {\"ieee\", \"dw01\", \"dware\"} _</span><br/>\u00a0<br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"des_system_lib\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw01\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee dw01 dware gtech\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw02\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee dw02 dware\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw03\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"std synopsys dware dw03 dw02 dw01 ieee gtech\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw04\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"dw04 ieee dw01 dware gtech\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw05\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"dw05 ieee dware\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw06\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"dw06 ieee dware\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dw07\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee dware\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"dware\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee dware\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"gtech\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee gtech\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ramlib\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"std ieee\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"std_cell_lib\"</span>, _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ieee std_cell_lib\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> _\t\t\t<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\tfields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"synopsys\"</span> _<br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span>\t\t<br/>\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Input:\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> ThisField <span class=\"kw1\">As</span> field <span class=\"kw1\">In</span> fields<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>ThisField<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">If</span> ThisField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"kw1\">IsNot</span> <span class=\"kw1\">Nothing</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t<span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> item <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"kw1\">In</span> ThisField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" -{0}\"</span>, item<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">Next</span><br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\u00a0<br/>\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>vbLf <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"...Sorting...\"</span> <span class=\"sy0\">&amp;</span> vbLf<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">Dim</span> sortOrder <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> getTopologicalSortOrder<span class=\"br0\">(</span>fields<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> sortOrder<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">Dim</span> field <span class=\"sy0\">=</span> fields<span class=\"br0\">(</span>sortOrder<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>field<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">' Write up dependencies, too:</span><br/>\t\t\t<span class=\"co1\">'If field.DependsOn IsNot Nothing Then</span><br/>\t\t\t<span class=\"co1\">'\tFor Each item As String In field.DependsOn</span><br/>\t\t\t<span class=\"co1\">'\t\tConsole.WriteLine(\" -{0}\", item)</span><br/>\t\t\t<span class=\"co1\">'\tNext</span><br/>\t\t\t<span class=\"co1\">'End If</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to continue . . . \"</span><span class=\"br0\">)</span><br/>\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> CheckDependencies <span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> Fields <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> Field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' Make sure all objects we depend on are part of the field list</span><br/>\t\t<span class=\"co1\">' themselves, as there may be dependencies that are not specified as fields themselves.</span><br/>\t\t<span class=\"co1\">' Remove dependencies on fields themselves.Y\t\t\t</span><br/>\t\t<span class=\"kw1\">Dim</span> AField <span class=\"kw1\">As</span> Field, ADependency <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> Fields<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\tAField<span class=\"sy0\">=</span>fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">If</span> AField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"kw1\">IsNot</span> <span class=\"kw1\">Nothing</span>  <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <a href=\"http://www.google.com/search?q=UBOUND+site:msdn.microsoft.com\"><span class=\"kw7\">Ubound</span></a><span class=\"br0\">(</span>AField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">)</span><br/>\t\t\t\t\tADependency <span class=\"sy0\">=</span> Afield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"co1\">' We ignore fields that depends on themselves:</span><br/>\t\t\t\t\t<span class=\"kw1\">If</span> AField<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">&lt;&gt;</span> ADependency <span class=\"kw1\">then</span><br/>\t\t\t\t\t\t<span class=\"kw1\">If</span> ListContainsVertex<span class=\"br0\">(</span>fields, ADependency<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t\t\t\t<span class=\"co1\">' Add the dependent object to the field list, as it</span><br/>\t\t\t\t\t\t\t<span class=\"co1\">' needs to be there, without any dependencies</span><br/>\t\t\t\t\t\t\tFields<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Field<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> _<br/>\t\t\t\t\t\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> ADependency _<br/>\t\t\t\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t\t\t<span class=\"kw1\">Next</span> j<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t<span class=\"kw1\">Next</span> i\t<br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> RemoveSelfDependencies <span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> Fields <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> Field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' Make sure our fields don't depend on themselves.</span><br/>\t\t<span class=\"co1\">' If they do, remove the dependency.</span><br/>\t\t<span class=\"kw1\">Dim</span> InitialUbound <span class=\"kw1\">as</span> <span class=\"kw2\">Integer</span><br/>\t\t<span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> AField <span class=\"kw1\">As</span> Field <span class=\"kw1\">In</span> Fields\t\t\t<br/>\t\t\t<span class=\"kw1\">If</span> AField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"kw1\">IsNot</span> <span class=\"kw1\">Nothing</span> <span class=\"kw1\">Then</span><br/>\t\t\t\tInitialUbound <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=UBOUND+site:msdn.microsoft.com\"><span class=\"kw7\">Ubound</span></a><span class=\"br0\">(</span>AField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> InitialUbound <span class=\"kw1\">to</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw1\">If</span> Afield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Afield<span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t\t\t<span class=\"co1\">' This field depends on itself, so remove</span><br/>\t\t\t\t\t\t<span class=\"kw1\">For</span> j <span class=\"kw1\">as</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> i <span class=\"kw1\">To</span> <a href=\"http://www.google.com/search?q=UBOUND+site:msdn.microsoft.com\"><span class=\"kw7\">UBound</span></a><span class=\"br0\">(</span>AField<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\t\t\t\t\tAfield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>Afield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">Next</span><br/>\t\t\t\t\t\t<span class=\"kw1\">ReDim</span> Preserve Afield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=UBOUND+site:msdn.microsoft.com\"><span class=\"kw7\">UBound</span></a><span class=\"br0\">(</span>Afield<span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t\t\t<span class=\"kw1\">Next</span><br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span>\t\t\t<br/>\t\t<span class=\"kw1\">Next</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span>\t<br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> ListContainsVertex<span class=\"br0\">(</span>Fields <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> Field<span class=\"br0\">)</span>, VertexName <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span><br/>\t<span class=\"co1\">' Check to see if the list of Fields already contains a vertext called VertexName</span><br/>\t<span class=\"kw1\">Dim</span> Found <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> fields<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">If</span> Fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Name</span> <span class=\"sy0\">=</span> VertexName <span class=\"kw1\">Then</span><br/>\t\t\t\tFound <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><br/>\t\t\t\t<span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t\t<span class=\"kw1\">Return</span> Found<br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> getTopologicalSortOrder<span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> Fields <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> Field<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' Gets sort order. Will also add required dependencies to</span><br/>\t\t<span class=\"co1\">' Fields.</span><br/>\u00a0<br/>\t\t<span class=\"co1\">' Make sure we don't have dependencies on ourselves.</span><br/>\t\t<span class=\"co1\">' We'll just get rid of them.</span><br/>\t\tRemoveSelfDependencies<span class=\"br0\">(</span>Fields<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"co1\">'First check depencies, add them to Fields if required:</span><br/>\t\tCheckDependencies<span class=\"br0\">(</span>Fields<span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' Now we have the correct Fields list, so we can proceed:</span><br/>\t\t<span class=\"kw1\">Dim</span> g <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> TopologicalSorter<span class=\"br0\">(</span>fields<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Dim</span> _indexes <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Dictionary<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span>, <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">(</span>fields<span class=\"sy0\">.</span><span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"co1\">'add vertex names to our lookup dictionaey</span><br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> fields<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t_indexes<span class=\"br0\">(</span>fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span><span class=\"me1\">AddVertex</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\u00a0<br/>\t\t<span class=\"co1\">'add edges</span><br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> fields<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">If</span> fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span> <span class=\"kw1\">IsNot</span> <span class=\"kw1\">Nothing</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t<span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tg<span class=\"sy0\">.</span><span class=\"me1\">AddEdge</span><span class=\"br0\">(</span>i, _indexes<span class=\"br0\">(</span>fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">DependsOn</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">Next</span><br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> result<br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Class</span> Field<br/>\t\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Property</span> Name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>\t\t\t<span class=\"kw1\">Get</span><br/>\t\t\t\t<span class=\"kw1\">Return</span> m_Name<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Get</span><br/>\t\t\t<span class=\"kw1\">Set</span><br/>\t\t\t\tm_Name <span class=\"sy0\">=</span> Value<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Set</span><br/>\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Property</span><br/>\t\t<span class=\"kw1\">Private</span> m_Name <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>\t\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Property</span> DependsOn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">Get</span><br/>\t\t\t\t<span class=\"kw1\">Return</span> m_DependsOn<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Get</span><br/>\t\t\t<span class=\"kw1\">Set</span><br/>\t\t\t\tm_DependsOn <span class=\"sy0\">=</span> Value<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Set</span><br/>\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">Property</span><br/>\t\t<span class=\"kw1\">Private</span> m_DependsOn <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Class</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span><br/><span class=\"kw1\">Class</span> TopologicalSorter<br/>\t<span class=\"co1\">''source adapted from:</span><br/>\t<span class=\"co1\">''http://tawani.blogspot.com/2009/02/topological-sorting-and-cyclic.html</span><br/>\t<span class=\"co1\">''which was adapted from:</span><br/>\t<span class=\"co1\">''http://www.java2s.com/Code/Java/Collections-Data-Structure/Topologicalsorting.htm</span><br/>\t#Region <span class=\"st0\">\"- Private Members -\"</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">ReadOnly</span> _vertices <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">' list of vertices</span><br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">ReadOnly</span> _matrix <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span>,<span class=\"br0\">)</span><br/>\t<span class=\"co1\">' adjacency matrix</span><br/>\t<span class=\"kw1\">Private</span> _numVerts <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\t<span class=\"co1\">' current number of vertices</span><br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">ReadOnly</span> _sortedArray <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">' Sorted vertex labels</span><br/>\u00a0<br/>\t<a href=\"http://www.google.com/search?q=%23END+site:msdn.microsoft.com\"><span class=\"kw3\">#End</span></a> Region<br/>\u00a0<br/>\t#Region <span class=\"st0\">\"- CTors -\"</span><br/>\u00a0<br/>\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> <span class=\"kw1\">New</span><span class=\"br0\">(</span>size <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\t\t_vertices <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t_matrix <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t_numVerts <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t_matrix<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">Next</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t\t\t<span class=\"co1\">' sorted vert labels</span><br/>\t\t_sortedArray <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<a href=\"http://www.google.com/search?q=%23END+site:msdn.microsoft.com\"><span class=\"kw3\">#End</span></a> Region<br/>\u00a0<br/>\t#Region <span class=\"st0\">\"- Public Methods -\"</span><br/>\u00a0<br/>\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Function</span> AddVertex<span class=\"br0\">(</span>vertex <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\t\t_vertices<span class=\"br0\">(</span>System<span class=\"sy0\">.</span><span class=\"me1\">Threading</span><span class=\"sy0\">.</span><span class=\"me1\">Interlocked</span><span class=\"sy0\">.</span><span class=\"me1\">Increment</span><span class=\"br0\">(</span>_numVerts<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> vertex<br/>\t\t<span class=\"kw1\">Return</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> AddEdge<span class=\"br0\">(</span>start <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"br0\">[</span><span class=\"kw1\">end</span><span class=\"br0\">]</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\t\t_matrix<span class=\"br0\">(</span>start, <span class=\"br0\">[</span><span class=\"kw1\">end</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Function</span> Sort<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">' Topological sort</span><br/>\t\t<span class=\"kw1\">While</span> _numVerts <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"co1\">' while vertices remain,</span><br/>\t\t\t<span class=\"co1\">' get a vertex with no successors, or -1</span><br/>\t\t\t<span class=\"kw1\">Dim</span> currentVertex <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> noSuccessors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">If</span> currentVertex <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t<span class=\"co1\">' must be a cycle</span><br/>\t\t\t\t<span class=\"kw1\">Throw</span> <span class=\"kw1\">New</span> Exception<span class=\"br0\">(</span><span class=\"st0\">\"Graph has cycles\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">' insert vertex label in sorted array (start at end)</span><br/>\t\t\t_sortedArray<span class=\"br0\">(</span>_numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> _vertices<span class=\"br0\">(</span>currentVertex<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">' delete vertex</span><br/>\t\t\tdeleteVertex<span class=\"br0\">(</span>currentVertex<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">While</span><br/>\u00a0<br/>\t\t<span class=\"co1\">' vertices all gone; return sortedArray</span><br/>\t\t<span class=\"kw1\">Return</span> _sortedArray<br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\t<a href=\"http://www.google.com/search?q=%23END+site:msdn.microsoft.com\"><span class=\"kw3\">#End</span></a> Region<br/>\u00a0<br/>\t#Region <span class=\"st0\">\"- Private Helper Methods -\"</span><br/>\u00a0<br/>\t<span class=\"co1\">' returns vert with no successors (or -1 if no such verts)</span><br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> noSuccessors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\t\t<span class=\"kw1\">For</span> row <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">Dim</span> isEdge <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><br/>\t\t\t<span class=\"co1\">' edge from row to column in adjMat</span><br/>\t\t\t<span class=\"kw1\">For</span> col <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw1\">If</span> _matrix<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>\t\t\t\t\t<span class=\"co1\">' if edge to another,</span><br/>\t\t\t\t\tisEdge <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><br/>\t\t\t\t\t\t<span class=\"co1\">' this vertex has a successor try another</span><br/>\t\t\t\t\t<span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>\t\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t\t<span class=\"kw1\">Next</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isEdge <span class=\"kw1\">Then</span><br/>\t\t\t\t<span class=\"co1\">' if no edges, has no successors</span><br/>\t\t\t\t<span class=\"kw1\">Return</span> row<br/>\t\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t\t<span class=\"kw1\">Return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"co1\">' no</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> deleteVertex<span class=\"br0\">(</span>delVert <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">' if not last vertex, delete from vertexList</span><br/>\t\t<span class=\"kw1\">If</span> delVert <span class=\"sy0\">&lt;&gt;</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>\t\t\t<span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> delVert <span class=\"kw1\">To</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t\t_vertices<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> _vertices<span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">Next</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">For</span> row <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> delVert <span class=\"kw1\">To</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t\tmoveRowUp<span class=\"br0\">(</span>row, _numVerts<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">Next</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">For</span> col <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> delVert <span class=\"kw1\">To</span> _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t\tmoveColLeft<span class=\"br0\">(</span>col, _numVerts <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">Next</span><br/>\t\t<span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\t\t_numVerts <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"co1\">' one less vertex</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> moveRowUp<span class=\"br0\">(</span>row <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, length <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">For</span> col <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t_matrix<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> _matrix<span class=\"br0\">(</span>row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, col<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> moveColLeft<span class=\"br0\">(</span>col <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, length <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">For</span> row <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t_matrix<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> _matrix<span class=\"br0\">(</span>row, col <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Next</span><br/>\t<span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\t<a href=\"http://www.google.com/search?q=%23END+site:msdn.microsoft.com\"><span class=\"kw3\">#End</span></a> Region<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">fcn topoSort(data){ // data is L( L(root,L(leaves)),...)<br/>   allDs:=data.pump(List,fcn(rds){ T(Void.Write,Void.Write,rds[1]) }).copy();<br/>   roots:=Dictionary(data); // dictionary of root:leaves<br/>   L:=List();<br/>   S:=data.pump(List,'wrap([(r,_)]){ if(allDs.holds(r)) Void.Skip else r }).copy();<br/>   while(S){        //while S is non-empty do<br/>      (n:=S.pop())\u00a0: L.append(_); //remove a node n from S, add n to tail of L<br/>      foreach m in (ds:=roots.find(n,List)){ //node m with an edge e from n to m <br/>\t allDs.del(allDs.index(m)); <br/>\t if (Void==allDs.find(m)) S.append(m); //m has no other incoming edges<br/>      } roots.del(n);  // remove edge e from the graph<br/>   }<br/>   if(roots) throw(Exception.ValueError(\"Cycle: \"+roots.keys));<br/>   L<br/>}</pre>"}]}