{"task": "Create_an_HTML_table", "blocks": [{"lang": "360 Assembly", "loc": 63, "block": "<pre class=\"text highlighted_source\">*        Create an HTML table      19/02/2017<br/>CREHTML  CSECT<br/>         USING  CREHTML,R13<br/>         B      72(R15)<br/>         DC     17F'0'<br/>         STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15            end of prolog<br/>         LA     R8,RND<br/>         XPRNT  PGBODY,64          &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;<br/>         XPRNT  PGTAB,64           &lt;table border=1 ... cellspacing=0&gt;<br/>         SR     R6,R6              row=0<br/>       DO WHILE=(C,R6,LE,NROWS)    do row=0 to nrows<br/>       IF LTR,R6,Z,R6 THEN           if row=0<br/>         XPRNT  PGTRTH,64              &lt;tr&gt;&lt;th&gt;&lt;/th&gt;<br/>       ELSE     ,                    else<br/>         XDECO  R6,XDEC                edit row<br/>         MVC    PGTR+8(1),XDEC+11      output row heading<br/>         XPRNT  PGTR,64                &lt;tr&gt;&lt;th&gt;.&lt;/th&gt;<br/>       ENDIF    ,                    endif<br/>         LA     R7,1                 col=1<br/>       DO WHILE=(C,R7,LE,NCOLS)      do col=1 to ncols<br/>       IF LTR,R6,Z,R6 THEN             if row=0<br/>         LR     R1,R7                    col<br/>         LA     R4,TCAR-1(R1)            tcar(col) <br/>         MVC    PGTH+4(1),0(R4)          output heading<br/>         XPRNT  PGTH,64                  &lt;th&gt;.&lt;/th&gt;<br/>       ELSE     ,                      else<br/>         L      R2,0(R8)                 value<br/>         XDECO  R2,XDEC                  edit value<br/>         MVC    PGTD+18(4),XDEC+8        output cell value<br/>         XPRNT  PGTD,64                  &lt;td align=\"right\"&gt;....&lt;/td&gt;<br/>         LA     R8,4(R8)                 next value<br/>       ENDIF    ,                      endif<br/>         LA     R7,1(R7)               col++<br/>       ENDDO    ,                    enddo col<br/>         XPRNT  PGETR,64             &lt;/tr&gt;<br/>         LA     R6,1(R6)             row++<br/>       ENDDO    ,                  enddo row <br/>         XPRNT  PGETAB,64          &lt;/table&gt;<br/>         XPRNT  PGEBODY,64         &lt;/body&gt;&lt;/html&gt;<br/>         L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14                exit<br/>NROWS    DC     F'4'               number of rows<br/>NCOLS    DC     F'3'               number of columns<br/>TCAR     DC     CL3'XYZ'<br/>RND      DC     F'7055',F'5334',F'5795',F'2895',F'3019',F'7747'<br/>         DC     F'140',F'7607',F'8144',F'7090',F'475',F'4140'<br/>PGBODY   DC     CL64'&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;'<br/>PGTAB    DC     CL64'&lt;table border=1 cellpadding=10 cellspacing=0&gt;'<br/>PGTRTH   DC     CL64'&lt;tr&gt;&lt;th&gt;&lt;/th&gt;'<br/>PGTH     DC     CL64'&lt;th&gt;.&lt;/th&gt;'<br/>PGETR    DC     CL64'&lt;/tr&gt;'<br/>PGTR     DC     CL64'&lt;tr&gt;&lt;th&gt;.&lt;/th&gt;'<br/>PGTD     DC     CL64'&lt;td align=\"right\"&gt;....&lt;/td&gt;'<br/>PGETAB   DC     CL64'&lt;/table&gt;'<br/>PGEBODY  DC     CL64'&lt;/body&gt;&lt;/html&gt;'<br/>XDEC     DS     CL12<br/>         YREGS<br/>         END    CREHTML</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Item_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> To_String<span class=\"br0\">(</span>Item: Item_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Put<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Put_Line<span class=\"br0\">(</span>Line: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> HTML_Table <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> U_String <span class=\"kw1\">is</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Unbounded_String</span>;<br/>   <span class=\"kw3\">function</span> Convert<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> U_String <span class=\"kw3\">renames</span><br/>     Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">To_Unbounded_String</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Item_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Item_Type;<br/>   <span class=\"kw3\">type</span> Header_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> U_String;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Items: Item_Array; Column_Heads: Header_Array<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> HTML_Table;</pre>"}, {"lang": "Agena", "loc": 55, "block": "<pre class=\"text highlighted_source\">notNumbered    \u00a0:= 0; # possible values for html table row numbering<br/>numberedLeft   \u00a0:= 1; #    \"        \"    \"    \"    \"    \"     \"<br/>numberedRight  \u00a0:= 2; #    \"        \"    \"    \"    \"    \"     \"<br/>\u00a0<br/>alignCentre    \u00a0:= 0; # possible values for html table column alignment<br/>alignLeft      \u00a0:= 1; #    \"        \"    \"    \"    \"     \"        \"<br/>alignRight     \u00a0:= 2; #    \"        \"    \"    \"    \"     \"        \"<br/>\u00a0<br/># write an html table to a file<br/>writeHtmlTable\u00a0:= proc( fh, t\u00a0:: table ) is<br/>    local align\u00a0:= \"align='\";<br/>    case t.columnAlignment<br/>      of alignLeft  then align\u00a0:= align &amp; \"left'\"<br/>      of alignRight then align\u00a0:= align &amp; \"right'\"<br/>    else                 align\u00a0:= align &amp;  \"center'\"<br/>    esac;<br/>    local put      \u00a0:= proc( text   \u00a0:: string ) is io.write( fh, text &amp; \"\\n\" ) end;<br/>    local thElement\u00a0:= proc( content\u00a0:: string ) is put( \"&lt;th \" &amp; align &amp; \"&gt;\" &amp; content &amp; \"&lt;/th&gt;\" ) end;<br/>    local tdElement\u00a0:= proc( content           ) is put( \"&lt;td \" &amp; align &amp; \"&gt;\" &amp; content &amp; \"&lt;/td&gt;\" ) end;<br/>    # table element<br/>    put( \"&lt;table\"<br/>       &amp; \" cellspacing='\" &amp; t.cellSpacing &amp; \"'\"<br/>       &amp;  \" colspacing='\" &amp; t.colSpacing  &amp; \"'\"<br/>       &amp;      \" border='\" &amp; t.border      &amp; \"'\"<br/>       &amp; \"&gt;\"<br/>       );<br/>    # table headings<br/>    put( \"&lt;tr&gt;\" );<br/>    if t.rowNumbering =  numberedLeft then thElement( \"\" ) fi;<br/>    for col to size t.headings do thElement( t.headings[ col ] ) od;<br/>    if t.rowNumbering = numberedRight then thElement( \"\" ) fi;<br/>    put( \"&lt;/tr&gt;\" );<br/>    # table rows<br/>    for row to size t.data do<br/>        put( \"&lt;tr&gt;\" );<br/>        if t.rowNumbering =  numberedLeft then thElement( row &amp; \"\" ) fi;<br/>        for col to size t.data[ row ] do tdElement( t.data[ row, col ] ) od;<br/>        if t.rowNumbering = numberedRight then thElement( row &amp; \"\" ) fi;<br/>        put( \"&lt;/tr&gt;\" )<br/>    od;<br/>    # end of table<br/>    put( \"&lt;/table&gt;\" )<br/>end\u00a0;<br/>\u00a0<br/># create an html table and print it to standard output<br/>scope<br/>    local t\u00a0:= [];<br/>    t.cellSpacing, t.colSpacing\u00a0:= 0, 0;<br/>    t.border         \u00a0:= 1;<br/>    t.columnAlignment\u00a0:= alignRight;<br/>    t.rowNumbering   \u00a0:= numberedLeft;<br/>    t.headings       \u00a0:= [ \"A\", \"B\", \"C\" ];<br/>    t.data           \u00a0:= [ [ 1001, 1002, 1003 ], [ 21, 22, 23 ], [ 201, 202, 203 ] ];<br/>    writeHtmlTable( io.stdout, t )<br/>epocs</pre>"}, {"lang": "ALGOL 68", "loc": 78, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> not numbered     <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span> <span class=\"coMULTI\"># possible values for HTMLTABLE row numbering    #</span><br/><span class=\"kw3\">INT</span> numbered left    <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span> <span class=\"coMULTI\">#    \"        \"    \"      \"      \"      \"        #</span><br/><span class=\"kw3\">INT</span> numbered right   <span class=\"sy1\">=</span> 2<span class=\"sy1\">;</span> <span class=\"coMULTI\">#    \"        \"    \"      \"      \"      \"        #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> align centre     <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span> <span class=\"coMULTI\"># possible values for HTMLTABLE column alignment #</span><br/><span class=\"kw3\">INT</span> align left       <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span> <span class=\"coMULTI\">#   \"        \"    \"      \"         \"       \"     #</span><br/><span class=\"kw3\">INT</span> align right      <span class=\"sy1\">=</span> 2<span class=\"sy1\">;</span> <span class=\"coMULTI\">#   \"        \"    \"      \"         \"       \"     #</span><br/>\u00a0<br/><span class=\"coMULTI\"># allowable content for the HTML table - extend the UNION and TOSTRING     #</span><br/><span class=\"coMULTI\">#                                        operator to add additional modes  #</span><br/><span class=\"kw4\">MODE</span> HTMLTABLEDATA   <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> TOSTRING          <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HTMLTABLEDATA content <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">CASE</span> content<br/>      <span class=\"kw2\">IN</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span>    i <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">REAL</span>   r <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> r<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"sy1\">:</span> s<br/>     <span class=\"kw2\">OUT</span> <span class=\"st0\">\"Unsupported HTMLTABLEDATA content\"</span><br/>    <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># MODE to hold an html table                                               #</span><br/><span class=\"kw4\">MODE</span> HTMLTABLE       <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>    0 <span class=\"br0\">]</span><span class=\"kw3\">STRING</span>        headings<br/>                             <span class=\"sy1\">,</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span> 0<span class=\"sy1\">,</span> 0 <span class=\"br0\">]</span>HTMLTABLEDATA data<br/>                             <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>   row numbering<br/>                             <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>   column alignment<br/>                             <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>   cell spacing<br/>                             <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>   col spacing<br/>                             <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>   border<br/>                             <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># write an html table to a file                                            #</span><br/><span class=\"kw4\">PROC</span> write html table <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"sy1\">,</span> HTMLTABLE t <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw3\">STRING</span> align <span class=\"sy1\">=</span> <span class=\"st0\">\"align=\"</span><span class=\"st0\">\"\"</span><br/>                 <span class=\"sy1\">+</span> <span class=\"kw2\">CASE</span> column alignment <span class=\"kw6\">OF</span> t <span class=\"kw2\">IN</span> <span class=\"st0\">\"left\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"right\"</span> <span class=\"kw2\">OUT</span> <span class=\"st0\">\"center\"</span> <span class=\"kw2\">ESAC</span><br/>                 <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">PROC</span> th element <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"sy1\">,</span> HTMLTABLE t<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> content <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;th \"</span> <span class=\"sy1\">+</span> align <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;\"</span> <span class=\"sy1\">+</span> content <span class=\"sy1\">+</span> <span class=\"st0\">\"&lt;/th&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">PROC</span> td element <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"sy1\">,</span> HTMLTABLE t<span class=\"sy1\">,</span> HTMLTABLEDATA content <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;td \"</span> <span class=\"sy1\">+</span> align <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;\"</span> <span class=\"sy1\">+</span> TOSTRING content <span class=\"sy1\">+</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># table element #</span><br/>    put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;table\"</span><br/>            <span class=\"sy1\">+</span> <span class=\"st0\">\" cellspacing=\"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> cell spacing <span class=\"kw6\">OF</span> t<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>            <span class=\"sy1\">+</span>  <span class=\"st0\">\" colspacing=\"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> col spacing  <span class=\"kw6\">OF</span> t<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>            <span class=\"sy1\">+</span>      <span class=\"st0\">\" border=\"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> border       <span class=\"kw6\">OF</span> t<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>            <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;\"</span><br/>            <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>            <span class=\"br0\">)</span><br/>       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># table headings                                                       #</span><br/>    put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> row numbering <span class=\"kw6\">OF</span> t <span class=\"sy1\">=</span>  numbered left <span class=\"kw2\">THEN</span> th element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> headings <span class=\"kw6\">OF</span> t <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> headings <span class=\"kw6\">OF</span> t <span class=\"kw2\">DO</span><br/>        th element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"br0\">(</span> headings <span class=\"kw6\">OF</span> t <span class=\"br0\">)</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> row numbering <span class=\"kw6\">OF</span> t <span class=\"sy1\">=</span> numbered right <span class=\"kw2\">THEN</span> th element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># table rows                                                           #</span><br/>    <span class=\"kw2\">FOR</span> row <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> data <span class=\"kw6\">OF</span> t <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> data <span class=\"kw6\">OF</span> t <span class=\"kw2\">DO</span><br/>        put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> row numbering <span class=\"kw6\">OF</span> t <span class=\"sy1\">=</span>  numbered left <span class=\"kw2\">THEN</span> th element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> row<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> data <span class=\"kw6\">OF</span> t <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> data <span class=\"kw6\">OF</span> t <span class=\"kw2\">DO</span><br/>            td element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"br0\">(</span> data <span class=\"kw6\">OF</span> t <span class=\"br0\">)</span><span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> row numbering <span class=\"kw6\">OF</span> t <span class=\"sy1\">=</span> numbered right <span class=\"kw2\">THEN</span> th element<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> row<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># end of table                                                         #</span><br/>    put<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># write html table #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># create an HTMLTABLE and print it to standard output                      #</span><br/>HTMLTABLE t<span class=\"sy1\">;</span><br/>cell spacing     <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> col spacing <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>border           <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>column alignment <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> align right<span class=\"sy1\">;</span><br/>row numbering    <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> numbered left<span class=\"sy1\">;</span><br/>headings         <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"C\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>data             <span class=\"kw6\">OF</span> t <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> 1001<span class=\"sy1\">,</span> 1002<span class=\"sy1\">,</span> 1003 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> 21<span class=\"sy1\">,</span> 22<span class=\"sy1\">,</span> 23 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> 201<span class=\"sy1\">,</span> 202<span class=\"sy1\">,</span> 203 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>write html table<span class=\"br0\">(</span> stand out<span class=\"sy1\">,</span> t <span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 10, "block": "<pre class=\"autohotkey highlighted_source\">out <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>table style<span class=\"sy0\">=</span><span class=\"st0\">\"text-align:center; border: 1px solid\"</span><span class=\"sy0\">&gt;&lt;</span>th<span class=\"sy0\">&gt;&lt;/</span>th<span class=\"sy0\">&gt;&lt;</span>th<span class=\"sy0\">&gt;</span>X<span class=\"sy0\">&lt;/</span>th<span class=\"sy0\">&gt;&lt;</span>th<span class=\"sy0\">&gt;</span>Y<span class=\"sy0\">&lt;/</span>th<span class=\"sy0\">&gt;&lt;</span>th<span class=\"sy0\">&gt;</span>Z<span class=\"sy0\">&lt;/</span>th<span class=\"sy0\">&gt;&lt;</span>tr<span class=\"sy0\">&gt;</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">4</span><br/>    out <span class=\"sy0\">.=</span> <span class=\"st0\">\"`r`n&lt;tr&gt;&lt;th&gt;\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\"&lt;/th&gt;&lt;td&gt;\"</span> Rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span> Rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span> Rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><br/>out <span class=\"sy0\">.=</span> <span class=\"st0\">\"`r`n&lt;/table&gt;\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> out<br/>\u00a0<br/>Rand<span class=\"br0\">(</span>u<span class=\"sy0\">=</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% u<br/>    <span class=\"kw1\">return</span> n<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 9, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>   <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>  &lt;thead align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;\"</span><br/>   <span class=\"kw5\">printf</span> <span class=\"st0\">\"    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;Z&lt;/td&gt;&lt;/tr&gt;<span class=\"es0\">\\n</span>  &lt;/thead&gt;<span class=\"es0\">\\n</span>  &lt;tbody align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;<span class=\"es0\">\\n</span>\"</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">10</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw5\">printf</span> <span class=\"st0\">\"    &lt;tr&gt;&lt;td&gt;%2i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;/tr&gt;<span class=\"es0\">\\n</span>\"</span>,i, <span class=\"nu0\">10</span><span class=\"sy3\">*</span>i, <span class=\"nu0\">100</span><span class=\"sy3\">*</span>i, <span class=\"nu0\">1000</span><span class=\"sy3\">*</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw5\">print</span> <span class=\"st0\">\"  &lt;/tbody&gt;<span class=\"es0\">\\n</span>&lt;/table&gt;<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 41, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>:: It's easier and neater to create the variables holding the random 4 digit numbers ahead of time</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,12<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a rand<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=<span class=\"sy0\">!</span><span class=\"re2\">random</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 9999<br/><span class=\"co2\"><br/>:: The command output of everything within the brackets is sent to the file \"table.html\", overwriting anything already in there</span><br/><span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>html<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>head<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>/head<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>body<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>table border=1 cellpadding=10 cellspacing=0<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>X<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>Y<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>Z<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>1<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand1</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand2</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand3</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>2<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand4</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand5</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand6</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>3<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand7</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand8</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand9</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>th<span class=\"co3\">^&gt;</span>4<span class=\"co3\">^&lt;</span>/th<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand10</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand11</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>td align=\"right\"<span class=\"co3\">^&gt;</span><span class=\"sy0\">%</span><span class=\"re3\">rand12</span><span class=\"sy0\">%</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/table<span class=\"co3\">^&gt;</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/body<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>/html<span class=\"co3\">^&gt;</span><br/><span class=\"sy0\">)</span> <span class=\"sy0\">&gt;</span> table.html<br/>start table.html<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 31, "block": "<pre class=\"text highlighted_source\">      ncols% = 3<br/>      nrows% = 4<br/>\u00a0<br/>      *spool temp.htm<br/>\u00a0<br/>      PRINT \"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\"<br/>      PRINT \"&lt;table border=1 cellpadding=10 cellspacing=0&gt;\"<br/>\u00a0<br/>      FOR row% = 0 TO nrows%<br/>        IF row% = 0 THEN<br/>          PRINT \"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"\u00a0;<br/>        ELSE<br/>          PRINT \"&lt;tr&gt;&lt;th&gt;\"\u00a0; row% \"&lt;/th&gt;\"\u00a0;<br/>        ENDIF<br/>        FOR col% = 1 TO ncols%<br/>          IF row% = 0 THEN<br/>            PRINT \"&lt;th&gt;\" CHR$(87 + col%) \"&lt;/th&gt;\"\u00a0;<br/>          ELSE<br/>            PRINT \"&lt;td align=\"\"right\"\"&gt;\"\u00a0; RND(9999) \"&lt;/td&gt;\"\u00a0;<br/>          ENDIF<br/>        NEXT col%<br/>        PRINT \"&lt;/tr&gt;\"<br/>      NEXT row%<br/>\u00a0<br/>      PRINT \"&lt;/table&gt;\"<br/>      PRINT \"&lt;/body&gt;&lt;/html&gt;\"<br/>\u00a0<br/>      *spool<br/>\u00a0<br/>      SYS \"ShellExecute\", @hwnd%, 0, \"temp.htm\", 0, 0, 1<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 66, "block": "<pre class=\"text highlighted_source\">(  ( makeTable<br/>  =     headTexts<br/>        minRowNr<br/>        maxRowNr<br/>        headCells<br/>        cells<br/>        rows<br/>        Generator<br/>        Table<br/>    .   get$\"xmlio.bra\"             { A library that converts from Bracmat format to XML or HTML }<br/>      &amp;\u00a0!arg:(?headTexts.?minRowNr.?maxRowNr.?Generator)<br/>      &amp; ( headCells<br/>        =   cellText<br/>          .    \u00a0!arg:%?cellText\u00a0?arg<br/>              &amp; (th.,!cellText) headCells$!arg<br/>            | <br/>        )<br/>      &amp; ( cells<br/>        =   cellText cellTexts numberGenerator<br/>          .      \u00a0!arg<br/>               \u00a0: (%?cellText\u00a0?cellTexts.(=?numberGenerator))<br/>              &amp;   (td.,numberGenerator$)<br/>                  cells$(!cellTexts.'$numberGenerator)<br/>            | <br/>        )<br/>      &amp; ( rows<br/>        =   headTexts rowNr maxRowNr Generator<br/>          .    \u00a0!arg:(?headTexts.?rowNr.?maxRowNr.?Generator)<br/>              &amp;\u00a0!rowNr:~&gt;!maxRowNr<br/>              &amp;   ( tr<br/>                  .   <br/>                    ,   (td.,!rowNr)<br/>                        cells$(!headTexts.!Generator)<br/>                  )<br/>                  \\n<br/>                  rows$(!headTexts.!rowNr+1.!maxRowNr.!Generator)<br/>            | <br/>        )<br/>      &amp;   ( table<br/>          .   <br/>            ,   ( thead<br/>                .   (align.right)<br/>                  , \\n (tr.,(th.,\" \") headCells$!headTexts)<br/>                )<br/>                \\n<br/>                ( tbody<br/>                .   (align.right)<br/>                  ,   \\n<br/>                        rows<br/>                      $ (!headTexts.!minRowNr.!maxRowNr.!Generator)<br/>                )<br/>          )<br/>       \u00a0:\u00a0?Table<br/>      &amp; str$((XMLIO.convert)$!Table)      { Call library function to create HTML }<br/>  )<br/>&amp;   makeTable<br/>  $ ( X Y Z                               { Column headers }<br/>    . 1                                   { Lowest row number }<br/>    . 4                                   { Highest row number }<br/>    .                                     { Function that generates numbers 9, 10, ...}<br/>      ' ( cnt<br/>        .   (cnt=$(new$(==8)))            { This creates an object 'cnt' with scope as a local function variable that survives between calls. }<br/>          &amp;\u00a0!(cnt.)+1:?(cnt.)<br/>        )<br/>    )<br/>)</pre>"}, {"lang": "C", "loc": 16, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table style=<span class=\"es1\">\\\"</span>text-align:center; border: 1px solid<span class=\"es1\">\\\"</span>&gt;&lt;th&gt;&lt;/th&gt;\"</span><br/>\t\t<span class=\"st0\">\"&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;%d&lt;/th&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 68, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;boost/array.hpp&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> makeGap<span class=\"br0\">(</span> <span class=\"kw4\">int</span> gap , std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> text <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> gap <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>      text.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   boost<span class=\"sy4\">::</span><span class=\"me2\">array</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> , <span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span> chars <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'X'</span> , <span class=\"st0\">'Y'</span> , <span class=\"st0\">'Z'</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> headgap <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> bodygap <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> tablegap <span class=\"sy1\">=</span> <span class=\"nu0\">6</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> rowgap <span class=\"sy1\">=</span> <span class=\"nu0\">9</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> tabletext<span class=\"br0\">(</span> <span class=\"st0\">\"&lt;html&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> headgap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;head&gt;&lt;/head&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> bodygap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;body&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;table&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;thead align=<span class=\"es1\">\\\"</span>right<span class=\"es1\">\\\"</span>&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap, tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy4\">;</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span>chars.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/td&gt;\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/thead&gt;\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;tbody align=<span class=\"es1\">\\\"</span>right<span class=\"es1\">\\\"</span>&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> row <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> row <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span> <span class=\"sy4\">;</span> row<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      makeGap<span class=\"br0\">(</span> rowgap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> oss <span class=\"sy4\">;</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span> <span class=\"sy4\">;</span><br/>      oss <span class=\"sy1\">&lt;&lt;</span> row <span class=\"sy4\">;</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> oss.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> col <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> col <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy4\">;</span> col<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t oss.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"kw4\">int</span> randnumber <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10000</span> <span class=\"sy4\">;</span><br/>\t oss <span class=\"sy1\">&lt;&lt;</span> randnumber <span class=\"sy4\">;</span><br/>\t tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy4\">;</span><br/>\t tabletext.<span class=\"me1\">append</span><span class=\"br0\">(</span> oss.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/td&gt;\"</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   makeGap<span class=\"br0\">(</span> tablegap <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/tbody&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> tablegap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/table&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   makeGap<span class=\"br0\">(</span> bodygap , tabletext <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/body&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   tabletext <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"&lt;/html&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">ofstream</span> htmltable<span class=\"br0\">(</span> <span class=\"st0\">\"testtable.html\"</span> , std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">out</span> <span class=\"sy3\">|</span> std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">trunc</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   htmltable <span class=\"sy1\">&lt;&lt;</span> tabletext <span class=\"sy4\">;</span><br/>   htmltable.<span class=\"me1\">close</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 34, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> prog<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> MainClass<br/>\t<span class=\"br0\">{</span>\t\t<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tStringBuilder s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tRandom rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;thead align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"XYZ\"</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/thead&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tbody align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span><span class=\"sy0\">+</span>i<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"sy0\">+</span>rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t\t<br/>\t\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tbody&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ts<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>html<span class=\"sy0\">-</span>table<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> 'hiccup<span class=\"sy0\">.</span>core<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">&lt;</span>tr<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span>el sq<span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>:<span class=\"me1\">tr</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">[</span>el<span class=\"br0\">]</span><span class=\"br0\">)</span> sq<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>html<br/>  <span class=\"br0\">[</span>:<span class=\"me1\">table</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>tr<span class=\"sy0\">&gt;</span>\u00a0:<span class=\"me1\">th</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span> \\X \\Y \\Z<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> #<span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>tr<span class=\"sy0\">&gt;</span>\u00a0:<span class=\"me1\">td</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 34, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># This is one of many ways to create a table.  CoffeeScript plays nice</span><br/><span class=\"co1\"># with any templating solution built for JavaScript, and of course you</span><br/><span class=\"co1\"># can build tables in the browser using DOM APIs.  This approach is just</span><br/><span class=\"co1\"># brute force string manipulation.</span><br/>\u00a0<br/>table = <span class=\"br0\">(</span>header_row<span class=\"sy0\">,</span> rows<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"st0\">\"\"\"<br/>  &lt;table&gt;<br/>  #{header_row}<br/>  #{rows.join '<span class=\"es0\">\\n</span>'}<br/>  &lt;/table&gt;<br/>  \"\"\"</span><br/>\u00a0<br/>tr = <span class=\"br0\">(</span>cells<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"&lt;tr&gt;#{cells.join ''}&lt;/tr&gt;\"</span><br/>th = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"&lt;th align='right'&gt;#{s}&lt;/th&gt;\"</span><br/>td = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"&lt;td align='right'&gt;#{s}&lt;/td&gt;\"</span><br/>rand_n = <span class=\"sy0\">-&gt;</span> Math.<span class=\"me1\">floor</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10000</span><br/>\u00a0<br/>header_cols = <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">'X'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Y'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Z'</span><span class=\"br0\">]</span><br/>header_row = tr <span class=\"br0\">(</span>th s <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> header_cols<span class=\"br0\">)</span><br/>\u00a0<br/>rows = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>  rows.<span class=\"me1\">push</span> tr <span class=\"br0\">[</span><br/>    th<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    td rand_n<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    td rand_n<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    td rand_n<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>html = table header_row<span class=\"sy0\">,</span> rows<br/>console.<span class=\"me1\">log</span> html<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(ql:quickload\u00a0:closure-html)<br/>(use-package\u00a0:closure-html)<br/>(serialize-lhtml<br/> `(table nil<br/>\t (tr nil ,@(mapcar (lambda (x)<br/>\t\t\t     (list 'th nil x))<br/>\t\t\t   '(\"\" \"X\" \"Y\" \"Z\")))<br/>\t ,@(loop for i from 1 to 4<br/>\t      collect `(tr nil<br/>\t\t\t   (th nil ,(format nil \"~a\" i))<br/>\t\t\t   ,@(loop repeat 3 collect `(td nil ,(format nil \"~a\" (random 10000)))))))<br/> (make-string-sink))<br/>\u00a0</pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  writeln<span class=\"br0\">(</span><span class=\"st_h\">`&lt;table style=\"text-align:center; border: 1px solid\"&gt;`</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;%d&lt;/th&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"sy0\">,</span><br/>             i<span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 23, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> CreateHTMLTable<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> AddTableRow<span class=\"br0\">(</span>aRowNo<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'  &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;'</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span>aRowNo<span class=\"sy1\">,</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;table&gt;'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>AddTableRow<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;/table&gt;'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "EchoLisp", "loc": 28, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; styles - </span><br/><span class=\"br0\">(</span>style 'td <span class=\"st0\">\"text-align:right\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>style 'table <span class=\"st0\">\"border-spacing: 10px;border:1px solid red\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>style 'th <span class=\"st0\">\"color:blue;\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; generic html5 builder</span><br/><span class=\"co1\">;; pushes &lt;tag style=..&gt; (proc content) &lt;/tag&gt;</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span>  <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag tag html<span class=\"sy0\">-</span>proc content <span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>style tag<span class=\"br0\">)</span><br/>\t\t \t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;%s style='%a'&gt;\"</span> tag <span class=\"br0\">(</span>style tag<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t \t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;%s&gt;\"</span> tag <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>html<span class=\"sy0\">-</span>proc content<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;/%s&gt; \"</span> tag <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; html procs\u00a0: 1 tag, 1 proc</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>raw content<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"%s\"</span> content<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>header headers<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>h headers<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'th h<span class=\"sy0\">-</span>raw h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>row row<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>item row<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'td h<span class=\"sy0\">-</span>raw item<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>table table <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'tr h<span class=\"sy0\">-</span>header <span class=\"br0\">(</span>first table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">;; add row-num  i at head of row</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">(</span>row <span class=\"br0\">(</span>rest table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'tr h<span class=\"sy0\">-</span>row <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule Table do<br/>  defp put_rows(n) do<br/>    Enum.map_join(1..n, fn i -&gt;<br/>      \"&lt;tr align=right&gt;&lt;th&gt;#{i}&lt;/th&gt;\" &lt;&gt;<br/>      Enum.map_join(1..3, fn _ -&gt;<br/>        \"&lt;td&gt;#{:rand.uniform(2000)}&lt;/td&gt;\"<br/>      end) &lt;&gt; \"&lt;/tr&gt;\\n\"<br/>    end)<br/>  end<br/>\u00a0<br/>  def create_table(n\\\\3) do<br/>    \"&lt;table border=1&gt;\\n\" &lt;&gt;<br/>    \"&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;\\n\" &lt;&gt;<br/>    put_rows(n) &lt;&gt;<br/>    \"&lt;/table&gt;\"<br/>  end<br/>end<br/>\u00a0<br/>IO.puts Table.create_table</pre>"}, {"lang": "Erlang", "loc": 27, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> create_html_table <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>external_format<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> html_table<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">external_format</span><span class=\"br0\">(</span> <span class=\"re5\">XML</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">remove_quoutes</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/xmerl.html\"><span class=\"kw5\">xmerl</span></a>:<span class=\"re3\">export_simple_content</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">XML</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> xmerl_xml<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">html_table</span><span class=\"br0\">(</span> <span class=\"re5\">Table_options</span><span class=\"sy1\">,</span> <span class=\"re5\">Headers</span><span class=\"sy1\">,</span> <span class=\"re5\">Contents</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Header</span> <span class=\"sy3\">=</span> <span class=\"re3\">html_table_header</span><span class=\"br0\">(</span> <span class=\"re5\">Headers</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Records</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">html_table_record</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Contents</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>table<span class=\"sy1\">,</span> <span class=\"re5\">Table_options</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Header</span> | <span class=\"re5\">Records</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Headers</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Contents</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">external_format</span><span class=\"br0\">(</span> <span class=\"re3\">html_table</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span>border<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>cellpadding<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Headers</span><span class=\"sy1\">,</span> <span class=\"re5\">Contents</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">html_table_header</span><span class=\"br0\">(</span> <span class=\"re5\">Items</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>tr<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>th<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Items</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">html_table_record</span><span class=\"br0\">(</span> <span class=\"re5\">Items</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>tr<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>td<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Items</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">remove_quoutes</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 10, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"  &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;\"</span><span class=\"sy2\">,</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;td&gt;%d&lt;/td&gt;\"</span><span class=\"sy2\">,</span><span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;/tr&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 44, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Xml</span><br/>\u00a0<br/><span class=\"kw1\">type</span> XmlDocument <span class=\"kw1\">with</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Add</span> element <span class=\"sy0\">=</span><br/>        this.<span class=\"me1\">AppendChild</span> element<br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Element</span> name <span class=\"sy0\">=</span><br/>        this.<span class=\"me1\">CreateElement</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>\u00a0:<span class=\"sy0\">&gt;</span> XmlNode<br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>name, <span class=\"br0\">(</span>attr\u00a0: <span class=\"br0\">(</span><span class=\"kw4\">string</span> <span class=\"sy0\">*</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span> list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> node <span class=\"sy0\">=</span> this.<span class=\"me1\">CreateElement</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> attr <span class=\"kw1\">do</span><br/>            node.<span class=\"me1\">SetAttribute</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> a, <span class=\"kw3\">snd</span> a<span class=\"br0\">)</span><br/>        node<br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>name, <span class=\"br0\">(</span>text\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> node <span class=\"sy0\">=</span> this.<span class=\"me1\">CreateElement</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>        node.<span class=\"me1\">AppendChild</span><span class=\"br0\">(</span>this.<span class=\"me1\">Text</span> text<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>        node<br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Text</span> text <span class=\"sy0\">=</span><br/>        this.<span class=\"me1\">CreateTextNode</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">type</span> XmlNode <span class=\"kw1\">with</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">Add</span> element <span class=\"sy0\">=</span><br/>        this.<span class=\"me1\">AppendChild</span> element<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> head <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> xd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> XmlDocument<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> html <span class=\"sy0\">=</span> xd.<span class=\"me1\">Add</span> <span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"html\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>html.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"head\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"title\"</span>, <span class=\"st0\">\"RosettaCode: Create_an_HTML_table\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> table <span class=\"sy0\">=</span> html.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"body\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"table\"</span>, <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"style\"</span>, <span class=\"st0\">\"text-align:right\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> tr1 <span class=\"sy0\">=</span> table.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"tr\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> th <span class=\"kw1\">in</span> head <span class=\"kw1\">do</span><br/>    tr1.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, th<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> tr <span class=\"sy0\">=</span> table.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"tr\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tr.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, i.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        tr.<span class=\"me1\">Add</span><span class=\"br0\">(</span>xd.<span class=\"me1\">Element</span><span class=\"br0\">(</span><span class=\"st0\">\"td\"</span>, <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>\u00a0<br/><span class=\"kw1\">let</span> xw <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> XmlTextWriter<span class=\"br0\">(</span>System.<span class=\"me1\">Console</span>.<span class=\"me1\">Out</span><span class=\"br0\">)</span><br/>xw.<span class=\"me1\">Formatting</span> <span class=\"sy0\">&lt;-</span> Formatting.<span class=\"me1\">Indented</span><br/>xd.<span class=\"me1\">WriteContentTo</span><span class=\"br0\">(</span>xw<span class=\"br0\">)</span></pre>"}, {"lang": "Forth", "loc": 66, "block": "<pre class=\"text highlighted_source\">include random.hsf<br/>\u00a0<br/>\\ parser routines<br/>:  totag<br/>               [char] &lt; PARSE pad place              \\ parse input up to '&lt;' char<br/>                -1 &gt;in +!                            \\ move the interpreter pointer back 1 char<br/>                pad count type \u00a0;<br/>\u00a0<br/>: '\"'        [char] \" emit\u00a0;<br/>: '\"..'      '\"'  space\u00a0;                            \\ output a quote char with trailing space<br/>\u00a0<br/>: toquote                                            \\ parse input to \" then print as quoted text<br/>              '\"' [char] \" PARSE pad place<br/>              pad count type '\"..'\u00a0;<br/>\u00a0<br/>: &gt;          [char] &gt; emit space \u00a0;                  \\ output the '&gt;' with trailing space<br/>\u00a0<br/>\\ Create some HTML extensions to the Forth interpreter<br/>: &lt;table&gt;         .\" &lt;table&gt;\" cr\u00a0;         \u00a0: &lt;/table&gt;   .\" &lt;/table&gt;\"  cr\u00a0;<br/>: &lt;table          .\" &lt;table \"\u00a0;<br/>: style=\"         .\" style=\"  toquote\u00a0;<br/>: align=\"         .\" align=\"  toquote\u00a0;<br/>: border=\"        .\" border=\" toquote\u00a0;<br/>: width=\"         .\" width=\"  toquote\u00a0;<br/>: cellspacing=\"   .\" cellspacing=\"  toquote\u00a0;<br/>: colspacing=\"    .\" colspacing=\"   toquote\u00a0;<br/>\u00a0<br/>: &lt;tr&gt;       .\" &lt;tr&gt;\" cr\u00a0;                 \u00a0: &lt;/tr&gt;      .\" &lt;/tr&gt;\"  cr\u00a0;<br/>: &lt;td&gt;       .\" &lt;td&gt; \"  totag \u00a0;           \u00a0: &lt;/td&gt;      .\" &lt;/td&gt;\"  cr\u00a0;<br/>: &lt;td        .\" &lt;td \"\u00a0;<br/>: &lt;thead&gt;    .\" &lt;thead&gt;\"\u00a0;                 \u00a0: &lt;/thead&gt;   .\" &lt;/thead&gt;\"\u00a0;<br/>: &lt;th&gt;       .\" &lt;th&gt;\"\u00a0;                    \u00a0: &lt;/th&gt;      .\" &lt;/th&gt;\"  cr\u00a0;<br/>: &lt;th        .\" &lt;th \" \u00a0;<br/>: &lt;tbody     .\" &lt;tbody \"\u00a0;                 \u00a0: &lt;/tbody&gt;   .\" &lt;/tbody&gt; \"\u00a0;<br/>: &lt;caption&gt;  cr .\" &lt;caption&gt;\"  totag \u00a0;    \u00a0: &lt;/caption&gt; .\" &lt;/caption&gt;\"  cr\u00a0;<br/>\u00a0<br/>\\ Write the source code that generates HTML in our EXTENDED FORTH<br/>cr<br/>&lt;table border=\" 1\" width=\" 30%\" &gt;<br/>&lt;caption&gt; This table was created with FORTH HTML tags&lt;/caption&gt;<br/>&lt;tr&gt;<br/>&lt;th align=\" right\" &gt;       &lt;/th&gt;<br/>&lt;th align=\" right\" &gt; .\" A\" &lt;/th&gt;<br/>&lt;th align=\" right\" &gt; .\" B\" &lt;/th&gt;<br/>&lt;th align=\" right\" &gt; .\" C\" &lt;/th&gt;<br/>&lt;/tr&gt;<br/>&lt;tr&gt;<br/>&lt;th align=\" right\" &gt;        1 . &lt;/th&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;/tr&gt;<br/>&lt;tr&gt;<br/>&lt;th align=\" right\" &gt;        2 . &lt;/th&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;/tr&gt;<br/>&lt;tr&gt;<br/>&lt;th align=\" right\" &gt;        3 . &lt;/th&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;td align=\" right\" &gt; 1000 RND . &lt;/td&gt;<br/>&lt;/tr&gt;<br/>&lt;/table&gt;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 492, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw1\">MODULE</span> PARAMETERS\t<span class=\"co1\">!Assorted oddities that assorted routines pick and choose from.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span> I AM\t\t<span class=\"co1\">!Assuage finicky compilers.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>IAM <span class=\"sy0\">=</span> <span class=\"st0\">\"Gnash\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!I AM!</span><br/>       <span class=\"kw3\">INTEGER</span>\t\tLUSERCODE\t<span class=\"co1\">!One day, I'll get around to devising some string protocol.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">28</span>\tUSERCODE\t\t<span class=\"co1\">!I'm not too sure how long this can be.</span><br/>       <span class=\"kw3\">DATA</span>\t\tUSERCODE,LUSERCODE<span class=\"sy0\">/</span><span class=\"st0\">\"\"</span>,<span class=\"nu0\">0</span><span class=\"sy0\">/</span><span class=\"co1\">!Especially before I have a text.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> PARAMETERS<br/>\u00a0<br/>      <span class=\"kw1\">MODULE</span> ASSISTANCE<br/>      <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Assorted routines that seem to be of general use but don't seem worth isolating..</span><br/>      <span class=\"kw1\">Subroutine</span> Croak<span class=\"br0\">(</span>Gasp<span class=\"br0\">)</span>\t<span class=\"co1\">!A dying message, when horror is suddenly encountered.</span><br/><span class=\"co1\">Casts out some final words and STOP, relying on the SubInOut stuff to have been used.</span><br/><span class=\"co1\">Cut down from the full version of April MMI, that employed the SubIN and SubOUT protocol..</span><br/>       <span class=\"kw3\">Character</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> Gasp\t<span class=\"co1\">!The last gasp.</span><br/>       <span class=\"kw3\">COMMON</span> KBD,MSG<br/>       WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> GASP<br/>    <span class=\"nu0\">1</span>  FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Oh dear! \"</span>,A<span class=\"br0\">)</span><br/>       <span class=\"kw1\">STOP</span> <span class=\"st0\">\"I STOP now. Farewell...\"</span>\t<span class=\"co1\">!Whatever pit I was in, I'm gone.</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">Subroutine</span> Croak\t<span class=\"co1\">!That's it.</span><br/>\u00a0<br/>       <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> LSTNB<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>  <span class=\"co1\">!Sigh. Last Not Blank.</span><br/><span class=\"co1\">Concocted yet again by R.N.McLean (whom God preserve) December MM.</span><br/><span class=\"co1\">Code checking reveals that the Compaq compiler generates a copy of the string and then finds the length of that when using the latter-day intrinsic LEN_TRIM. Madness!</span><br/><span class=\"co1\">Can't   DO WHILE (L.GT.0 .AND. TEXT(L:L).LE.' ')\t!Control chars. regarded as spaces.</span><br/><span class=\"co1\">Curse the morons who think it good that the compiler MIGHT evaluate logical expressions fully.</span><br/><span class=\"co1\">Crude GO TO rather than a DO-loop, because compilers use a loop counter as well as updating the index variable.</span><br/><span class=\"co1\">Comparison runs of GNASH showed a saving of ~3% in its mass-data reading through the avoidance of DO in LSTNB alone.</span><br/><span class=\"co1\">Crappy code for character comparison of varying lengths is avoided by using ICHAR which is for single characters only.</span><br/><span class=\"co1\">Checking the indexing of CHARACTER variables for bounds evoked astounding stupidities, such as calculating the length of TEXT(L:L) by subtracting L from L!</span><br/><span class=\"co1\">Comparison runs of GNASH showed a saving of ~25-30% in its mass data scanning for this, involving all its two-dozen or so single-character comparisons, not just in LSTNB.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>,<span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span><span class=\"sy0\">::</span> <span class=\"me2\">TEXT</span>\t<span class=\"co1\">!The bumf. If there must be copy-in, at least there need not be copy back.</span><br/>        <span class=\"kw3\">INTEGER</span> L\t\t<span class=\"co1\">!The length of the bumf.</span><br/>         L <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t\t<span class=\"co1\">!So, what is it?</span><br/>    <span class=\"nu0\">1</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span>\t<span class=\"co1\">!Are we there yet?</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">GT</span>.<span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span>\t<span class=\"co1\">!Control chars are regarded as spaces also.</span><br/>         L <span class=\"sy0\">=</span> L <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Step back one.</span><br/>         <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>    <span class=\"nu0\">2</span>    LSTNB <span class=\"sy0\">=</span> L\t\t<span class=\"co1\">!The last non-blank, possibly zero.</span><br/>        <span class=\"kw1\">RETURN</span>\t\t\t<span class=\"co1\">!Unsafe to use LSTNB as a variable.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> LSTNB\t<span class=\"co1\">!Compilers can bungle it.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"kw1\">FUNCTION</span> I2FMT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!These are all the same.</span><br/>        <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> N\t\t\t<span class=\"co1\">!But, the compiler doesn't offer generalisations.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Negative numbers cop a sign.</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.<span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!But there's not much room left.</span><br/>             I2FMT <span class=\"sy0\">=</span> <span class=\"st0\">\"-!\"</span>\t<span class=\"co1\">!So this means 'overflow'.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise, room for one negative digit.</span><br/>             I2FMT <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">//</span><span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> N<span class=\"br0\">)</span>\t<span class=\"co1\">!Thus. Presume adjacent character codes, etc.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!So much for negative numbers.</span><br/>         <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.10<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Single digit positive?</span><br/>           I2FMT <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">//</span><span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> N<span class=\"br0\">)</span>\t<span class=\"co1\">!Yes. This.</span><br/>         <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.100<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Two digit positive?</span><br/>           I2FMT <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">10</span>      <span class=\"sy0\">+</span> <span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yes.</span><br/>     <span class=\"nu0\">1</span>            <span class=\"sy0\">//</span><span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>N,<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">!These.</span><br/>         <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise,</span><br/>           I2FMT <span class=\"sy0\">=</span> <span class=\"st0\">\"+!\"</span> \t<span class=\"co1\">!Positive overflow.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for that.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> I2FMT\t<span class=\"co1\">!No WRITE and FORMAT unlimbering.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> I8FMT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Oh for proper strings.</span><br/>        <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> N<br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> HIC<br/>         WRITE <span class=\"br0\">(</span>HIC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> N<br/>    <span class=\"nu0\">1</span>    FORMAT <span class=\"br0\">(</span>I8<span class=\"br0\">)</span><br/>         I8FMT <span class=\"sy0\">=</span> HIC<br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> I8FMT<br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">42</span> <span class=\"kw1\">FUNCTION</span> ERRORWORDS<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for an explanation. One day, the system may offer coherent messages.</span><br/><span class=\"co1\">Curious collection of encountered codes. Will they differ on other systems?</span><br/><span class=\"co1\">Compaq's compiler was taken over by unintel; http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/bldaps_for/common/bldaps_rterrs.htm</span><br/><span class=\"co1\">contains a schedule of error numbers that matched those I'd found for Compaq, and so some assumptions are added.</span><br/><span class=\"co1\">Copying all (hundreds!) is excessive; these seem possible for the usage so far made of error diversion.</span><br/><span class=\"co1\">Compaq's compiler interface (\"visual\" blah) has a help offering, which can provide error code information.</span><br/><span class=\"co1\">Compaq messages also appear in http://cens.ioc.ee/local/man/CompaqCompilers/cf/dfuum028.htm#tab_runtime_errors</span><br/><span class=\"co1\">Combines IOSTAT codes (file open, read etc) with STAT codes (allocate/deallocate) as their numbers are distinct.</span><br/><span class=\"co1\">Completeness and context remains a problem. Excess brevity means cause and effect can be confused.</span><br/>        <span class=\"kw3\">INTEGER</span> IT\t\t\t<span class=\"co1\">!The error code in question.</span><br/>        <span class=\"kw3\">INTEGER</span> LASTKNOWN \t\t<span class=\"co1\">!Some codes I know about.</span><br/>        <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LASTKNOWN <span class=\"sy0\">=</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span>\t<span class=\"co1\">!But only a few, discovered by experiment and mishap.</span><br/>        <span class=\"kw3\">TYPE</span> HINT\t\t\t<span class=\"co1\">!For them, I can supply a table.</span><br/>         <span class=\"kw3\">INTEGER</span>\tCODE\t\t<span class=\"co1\">!The code number. (But, different systems..??)</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">42</span>\tEXPLICATION\t<span class=\"co1\">!An explanation. Will it be the answer?</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> HINT\t\t\t<span class=\"co1\">!Simple enough.</span><br/>        <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>HINT<span class=\"br0\">)</span> <span class=\"kw4\">ERROR</span><span class=\"br0\">(</span>LASTKNOWN<span class=\"br0\">)</span>\t<span class=\"co1\">!So, let's have a collection.</span><br/>        <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span><span class=\"kw4\">ERROR</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>\t\t<span class=\"co1\">!With these values.</span><br/>     <span class=\"nu0\">1</span>   HINT<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"st0\">\"End-of-file at the start of reading!\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!From examples supplied with the Compaq compiler involving IOSTAT.</span><br/>     <span class=\"nu0\">2</span>   HINT<span class=\"br0\">(</span> <span class=\"nu0\">0</span>,<span class=\"st0\">\"No worries.\"</span><span class=\"br0\">)</span>,\t\t\t<span class=\"co1\">!Apparently the only standard value.</span><br/>     <span class=\"nu0\">3</span>   HINT<span class=\"br0\">(</span> <span class=\"nu0\">9</span>,<span class=\"st0\">\"Permissions - read only?\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">4</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"st0\">\"File already exists!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">5</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">17</span>,<span class=\"st0\">\"Syntax error in NameList input.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">6</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">18</span>,<span class=\"st0\">\"Too many values for the recipient.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">7</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">19</span>,<span class=\"st0\">\"Invalid naming of a variable.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">8</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">24</span>,<span class=\"st0\">\"Surprise end-of-file during read!\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!From example source.</span><br/>     <span class=\"nu0\">9</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">25</span>,<span class=\"st0\">\"Invalid record number!\"</span><span class=\"br0\">)</span>,<br/>     o   HINT<span class=\"br0\">(</span><span class=\"nu0\">29</span>,<span class=\"st0\">\"File name not found.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">1</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">30</span>,<span class=\"st0\">\"Unavailable - exclusive use?\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">2</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">32</span>,<span class=\"st0\">\"Invalid fileunit number!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">3</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">35</span>,<span class=\"st0\">\"'Binary' form usage is rejected.\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!From example source.</span><br/>     <span class=\"nu0\">4</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">36</span>,<span class=\"st0\">\"Record number for a non-existing record!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">5</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">37</span>,<span class=\"st0\">\"No record length has been specified.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">6</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">38</span>,<span class=\"st0\">\"I/O error during a write!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">7</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">39</span>,<span class=\"st0\">\"I/O error during a read!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">8</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">41</span>,<span class=\"st0\">\"Insufficient memory available!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">9</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">43</span>,<span class=\"st0\">\"Malformed file name.\"</span><span class=\"br0\">)</span>,<br/>     o   HINT<span class=\"br0\">(</span><span class=\"nu0\">47</span>,<span class=\"st0\">\"Attempting a write, but read-only is set.\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">1</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">66</span>,<span class=\"st0\">\"Output overflows single record size.\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!This one from experience.</span><br/>     <span class=\"nu0\">2</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">67</span>,<span class=\"st0\">\"Input demand exceeds single record size.\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!These two are for unformatted I/O.</span><br/>     <span class=\"nu0\">3</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">151</span>,<span class=\"st0\">\"Can't allocate: already allocated!\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!These different numbers are for memory allocation failures.</span><br/>     <span class=\"nu0\">4</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">153</span>,<span class=\"st0\">\"Can't deallocate: not allocated!\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">5</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">173</span>,<span class=\"st0\">\"The fingered item was not allocated!\"</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!Such as an ordinary array that was not allocated.</span><br/>     <span class=\"nu0\">6</span>   HINT<span class=\"br0\">(</span><span class=\"nu0\">179</span>,<span class=\"st0\">\"Size exceeds addressable memory!\"</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">INTEGER</span> I\t\t<span class=\"co1\">!A stepper.</span><br/>         <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> LASTKNOWN,<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t<span class=\"co1\">!So, step through the known codes.</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IT <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> <span class=\"kw4\">ERROR</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>.<span class=\"me1\">CODE</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!This one?</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next.</span><br/>    <span class=\"nu0\">1</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Fail with I = 0.</span><br/>           ERRORWORDS <span class=\"sy0\">=</span> I8FMT<span class=\"br0\">(</span>IT<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\" is a novel code!\"</span>\t<span class=\"co1\">!Reveal the mysterious number.</span><br/>          <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!But otherwise, it is found.</span><br/>           ERRORWORDS <span class=\"sy0\">=</span> <span class=\"kw4\">ERROR</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EXPLICATION</span>\t<span class=\"co1\">!And these words might even apply.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But on all systems?</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ERRORWORDS\t<span class=\"co1\">!Hopefully, helpful.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> ASSISTANCE<br/>\u00a0<br/>      <span class=\"kw1\">MODULE</span> LOGORRHOEA<br/>       <span class=\"kw1\">CONTAINS</span><br/>        <span class=\"kw1\">SUBROUTINE</span> ECART<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Produces trace output with many auxiliary details.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The text to be annotated.</span><br/>         <span class=\"kw3\">COMMON</span> KBD,MSG\t\t<span class=\"co1\">!I/O units.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Just roll the text.</span><br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Trace: \"</span>,A<span class=\"br0\">)</span>\t<span class=\"co1\">!Lacks the names of the invoking routine, and that which invoked it.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> ECART<br/>       <span class=\"kw1\">SUBROUTINE</span> WRITE<span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,TEXT,ON<span class=\"br0\">)</span>\t<span class=\"co1\">!We get here in the end. Cast forth some pearls.</span><br/><span class=\"co1\">C   Once upon a time, there was just confusion between ASCII and EBCDIC character codes and glyphs,</span><br/><span class=\"co1\">c after many variant collections caused annoyance. Now I see that modern computing has introduced</span><br/><span class=\"co1\">c many new variations, so that one text editor may display glyphs differing from those displayed</span><br/><span class=\"co1\">c by another editor and also different from those displayed when a programme writes to the screen</span><br/><span class=\"co1\">c in \"teletype\" mode, which is to say, employing the character/glyph combination of the moment.</span><br/><span class=\"co1\">c And in particular, decimal points and degree symbols differ and annoyance has grown.</span><br/><span class=\"co1\">c   So, on re-arranging SAY to not send output to multiple distinations depending on the value of OUT,</span><br/><span class=\"co1\">c except for the special output to MSG that is echoed to TRAIL, it became less messy to make an assault</span><br/><span class=\"co1\">c on the text that goes to MSG, but after it was sent to TRAIL. I would have preferred to fiddle the</span><br/><span class=\"co1\">c \"code page\" for text output that determines what glyph to show for which code, but not only</span><br/><span class=\"co1\">c is it unclear how to do this, even if facilities were available, I suspect that the screen display</span><br/><span class=\"co1\">c software only loads the mysterious code page during startup.</span><br/><span class=\"co1\">c   This fiddling means that any write to MSG should be done last, and writes of text literals</span><br/><span class=\"co1\">c should not include characters that will be fiddled, as text literals may be protected against change.</span><br/><span class=\"co1\">C   Somewhere along the way, the cent character (\u00a2) has disappeared. Perhaps it will return in \"unicode\".</span><br/>        <span class=\"kw3\">USE</span> ASSISTANCE\t\t<span class=\"co1\">!But might still have difficulty.</span><br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!The destination.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The message. Possibly damaged. Any trailing spaces will be sent forth.</span><br/>        <span class=\"kw3\">LOGICAL</span> ON\t\t<span class=\"co1\">!Whether to terminate the line... TRUE sez that someone will be carrying on.</span><br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">IOSTAT</span>\t\t<span class=\"co1\">!Furrytran gibberish.</span><br/><span class=\"co1\">c        INCLUDE \"cIOUnits.for\"\t!I/O unit numbers.</span><br/>        <span class=\"kw3\">COMMON</span> KBD,MSG<br/><span class=\"co1\">c        INTEGER*2,SAVE:: I Be\t!Self-identification.</span><br/><span class=\"co1\">c         CALL SUBIN(\"Write\",I Be)\t!Hullo!</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">999</span>\t<span class=\"co1\">!Goodbye?</span><br/><span class=\"co1\">c         IF (IOGOOD(OUT)) THEN\t!Is this one in good heart?</span><br/><span class=\"co1\">c           IF (IOCOUNT(OUT).LE.0 .AND. OUT.NE.MSG) THEN\t!Is it attached to a file?</span><br/><span class=\"co1\">c             IF (IONAME(OUT).EQ.\"\") IONAME(OUT) = \"Anome\"\t!\"No name\".</span><br/><span class=\"co1\">c     1         //I2FMT(OUT)//\".txt\"\t!Clutch at straws.</span><br/><span class=\"co1\">c             IF (.NOT.OPEN(OUT,IONAME(OUT),\"REPLACE\",\"WRITE\")) THEN\t!Just in time?</span><br/><span class=\"co1\">c               IOGOOD(OUT) = .FALSE.\t!No! Strangle further usage.</span><br/><span class=\"co1\">c               GO TO 999\t\t!Can't write, so give up!</span><br/><span class=\"co1\">c             END IF\t\t\t!It might be better to hit the WRITE and fail.</span><br/><span class=\"co1\">c           END IF\t\t!We should be ready now.</span><br/><span class=\"co1\">c           IF (OUT.EQ.MSG .AND. SCRAGTEXTOUT) CALL SCRAG(TEXT)\t!Output to the screen is recoded for the screen.</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ON<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Now for the actual output at last. This is annoying.</span><br/>             WRITE <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,<span class=\"nu0\">1</span>,<span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">666</span>,<span class=\"kw1\">IOSTAT</span> <span class=\"sy0\">=</span> <span class=\"kw1\">IOSTAT</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Splurt.</span><br/>    <span class=\"nu0\">1</span>        FORMAT <span class=\"br0\">(</span>A,$<span class=\"br0\">)</span>\t<span class=\"co1\">!Don't move on to a new line. (The \"$\"! Is it not obvious?)</span><br/><span class=\"co1\">c             IOPART(OUT) = IOPART(OUT) + 1\t!Thus count a part-line in case someone fusses.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t<span class=\"co1\">!But mostly, write and advance.</span><br/>             WRITE <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,<span class=\"nu0\">2</span>,<span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">666</span>,<span class=\"kw1\">IOSTAT</span> <span class=\"sy0\">=</span> <span class=\"kw1\">IOSTAT</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!Splurt.</span><br/>    <span class=\"nu0\">2</span>        FORMAT <span class=\"br0\">(</span>A<span class=\"br0\">)</span>\t\t<span class=\"co1\">!*-style \"free\" format chops at 80 or some such.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!So much for last-moment dithering.</span><br/><span class=\"co1\">c           IOCOUNT(OUT) = IOCOUNT(OUT) + 1\t!Count another write (whole or part) so as to be not zero..</span><br/><span class=\"co1\">c         END IF\t\t\t!So much for active passages.</span><br/><span class=\"co1\">c  999    CALL SUBOUT(\"Write\")\t!I am closing.</span><br/>  <span class=\"nu0\">999</span>   <span class=\"kw1\">RETURN</span>\t\t\t<span class=\"co1\">!Done.</span><br/><span class=\"co1\">Confusions.</span><br/>  <span class=\"nu0\">666</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>.<span class=\"me1\">NE</span>.<span class=\"me1\">MSG</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> CROAK<span class=\"br0\">(</span><span class=\"st0\">\"Can't write to unit \"</span><span class=\"sy0\">//</span>I2FMT<span class=\"br0\">(</span><span class=\"kw3\">OUT</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Why not?</span><br/><span class=\"co1\">c     1    //\" (file \"//IONAME(OUT)(1:LSTNB(IONAME(OUT)))\t!Possibly, no more disc space! In which case, this may fail also!</span><br/>     <span class=\"nu0\">2</span>    <span class=\"sy0\">//</span><span class=\"st0\">\") message \"</span><span class=\"sy0\">//</span>ERRORWORDS<span class=\"br0\">(</span><span class=\"kw1\">IOSTAT</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Hopefully, helpful.</span><br/>     <span class=\"nu0\">3</span>    <span class=\"sy0\">//</span><span class=\"st0\">\" length \"</span><span class=\"sy0\">//</span>I8FMT<span class=\"br0\">(</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\", this: \"</span><span class=\"sy0\">//</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!The instigation.</span><br/>        <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Constipation!\"</span>\t<span class=\"co1\">!Just so.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> WRITE\t<span class=\"co1\">!The moving hand having writ, moves on.</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> SAY<span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!And maybe a copy to the trail file as well.</span><br/>        <span class=\"kw3\">USE</span> PARAMETERS\t\t<span class=\"co1\">!Odds and ends.</span><br/>        <span class=\"kw3\">USE</span> ASSISTANCE\t\t<span class=\"co1\">!Just a little.</span><br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!The orifice.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The blather. Can be modified if to MSG and certain characters are found.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">120</span> IS\t<span class=\"co1\">!For a snatched question.</span><br/>        <span class=\"kw3\">INTEGER</span> L\t\t<span class=\"co1\">!A finger.</span><br/><span class=\"co1\">c        INCLUDE \"cIOUnits.for\"\t!I/O unit numbers.</span><br/>        <span class=\"kw3\">COMMON</span> KBD,MSG<br/><span class=\"co1\">c        INTEGER*2,SAVE:: I Be\t!Self-identification.</span><br/><span class=\"co1\">c         CALL SUBIN(\"Say\",I Be)\t!Me do be Me, I say!</span><br/><span class=\"co1\">Chop off trailing spaces.</span><br/>         L <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t\t<span class=\"co1\">!What I say may be rather brief.</span><br/>    <span class=\"nu0\">1</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!So, is there a last character to look at?</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">LE</span>.<span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Yes. Is it boring?</span><br/>             L <span class=\"sy0\">=</span> L <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yes! Trim it!</span><br/>             <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!And check afresh.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!A DO-loop has overhead with its iteration count as well.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Function LEN_TRIM copies the text first!!</span><br/><span class=\"co1\">Contemplate the disposition of TEXT(1:L)</span><br/><span class=\"co1\">c         IF (OUT.NE.MSG) THEN\t!Normal stuff?</span><br/>           <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Roll.</span><br/><span class=\"co1\">c          ELSE\t\t\t!Echo what goes to MSG to the TRAIL file.</span><br/><span class=\"co1\">c           CALL WRITE(TRAIL,TEXT(1:L),.FALSE.)\t!Thus.</span><br/><span class=\"co1\">c           CALL WRITE(  MSG,TEXT(1:L),.FALSE.)\t!Splot to the screen.</span><br/><span class=\"co1\">c           IF (.NOT.BLABBERMOUTH) THEN\t\t!Do we know restraint?</span><br/><span class=\"co1\">c             IF (IOCOUNT(MSG).GT.BURP) THEN\t!Yes. Consider it.</span><br/><span class=\"co1\">c               WRITE (MSG,100) IOCOUNT(MSG)\t!Alas, triggered. So remark on quantity,</span><br/><span class=\"co1\">c  100          FORMAT (//I9,\" lines! Your spirit might flag.\"\t!Hint. (Not copied to the TRAIL file)</span><br/><span class=\"co1\">c     1          /,\" Type quit to set GIVEOVER to TRUE, with hope for \"</span><br/><span class=\"co1\">c     2           ,\"a speedy palliation,\",</span><br/><span class=\"co1\">c     3          /,\"   or QUIT to abandon everything, here, now\",</span><br/><span class=\"co1\">c     4          /,\"   or blabber to abandon further restraint,\",</span><br/><span class=\"co1\">c     5          /,\"   or anything else to carry on:\")</span><br/><span class=\"co1\">c               IS = REPLY(\"QUIT, quit, blabber or continue\")\t!And ask.</span><br/><span class=\"co1\">c               IF (IS.EQ.\"QUIT\") CALL CROAK(\"Enough of this!\")\t!No UPDATE, nothing.</span><br/><span class=\"co1\">c               CALL UPCASE(IS)\t\t!Now we're past the nice distinction, simplify.</span><br/><span class=\"co1\">c               IF (IS.EQ.\"QUIT\") GIVEOVER = .TRUE.\t!Signal to those who listen.</span><br/><span class=\"co1\">c               IF (IS.EQ.\"BLABBER\") BLABBERMOUTH = .TRUE.\t!Well?</span><br/><span class=\"co1\">c               IF (GIVEOVER) WRITE (MSG,101)\t\t\t!Announce hope.</span><br/><span class=\"co1\">c  101          FORMAT (\"Let's hope that the babbler notices...\")\t!Like, IF (GIVEOVER) GO TO ...</span><br/><span class=\"co1\">c               IF (.NOT.GIVEOVER) WRITE (MSG,102)\t!Alternatively, firm resolve.</span><br/><span class=\"co1\">c  102          FORMAT(\"Onwards with renewed vigour!\")\t!Fight the good fight.</span><br/><span class=\"co1\">c               BURP = IOCOUNT(MSG) + ENOUGH\t!The next pause to come.</span><br/><span class=\"co1\">c             END IF\t\t\t!So much for last-moment restraint.</span><br/><span class=\"co1\">c           END IF\t\t\t!So much for restraint.</span><br/><span class=\"co1\">c         END IF\t\t\t!So much for selection.</span><br/><span class=\"co1\">c         CALL SUBOUT(\"Say\")\t!I am merely the messenger.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SAY\t<span class=\"co1\">!Enough said.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> SAYON<span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Roll to the screen and to the trail file as well.</span><br/><span class=\"co1\">C This differs by not ending the line so that further output can be appended to it.</span><br/>        <span class=\"kw3\">USE</span> ASSISTANCE<br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!The orifice.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The blather.</span><br/>        <span class=\"kw3\">INTEGER</span> L\t\t<span class=\"co1\">!A finger.</span><br/><span class=\"co1\">c        INCLUDE \"cIOUnits.for\"\t!I/O unit numbers.</span><br/>        <span class=\"kw3\">COMMON</span> KBD,MSG<br/><span class=\"co1\">c        INTEGER*2,SAVE:: I Be\t!Self-identification.</span><br/><span class=\"co1\">c         CALL SUBIN(\"SayOn\",I Be)\t!Me do be another. Me, I say on!</span><br/>         L <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!How much say I on?</span><br/>    <span class=\"nu0\">1</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!I say on anything?</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">LE</span>.<span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!I end it spaceish?</span><br/>             L <span class=\"sy0\">=</span> L <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Yes. Trim such.</span><br/>             <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!And look afresh.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for trailing off.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Continue with L fingering the last non-blank.</span><br/><span class=\"co1\">c         IF (OUT.EQ.MSG) CALL WRITE(TRAIL,TEXT(1:L),.TRUE.)\t!Writes to the screen go also to the TRAIL.</span><br/>                         <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span>  <span class=\"kw3\">OUT</span>,TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!It is said, and more is expected.</span><br/><span class=\"co1\">c         CALL SUBOUT(\"SayOn\")\t!I am merely the messenger.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SAYON\t<span class=\"co1\">!And further messages impend.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> LOGORRHOEA<br/>\u00a0<br/>      <span class=\"kw1\">MODULE</span> HTMLSTUFF\t<span class=\"co1\">!Assists with the production of decorated output.</span><br/><span class=\"co1\">Can't say I think much of the scheme. How about &lt;+blah&gt; ... &lt;-blah&gt; rather than the assymetric &lt;blah&gt; ... &lt;/blah&gt;?</span><br/><span class=\"co1\">Cack-handed comment format as well...</span><br/>       <span class=\"kw3\">USE</span> PARAMETERS\t<span class=\"co1\">!To ascertain who I AM.</span><br/>       <span class=\"kw3\">USE</span> ASSISTANCE\t<span class=\"co1\">!To get at LSTNB.</span><br/>       <span class=\"kw3\">USE</span> LOGORRHOEA\t<span class=\"co1\">!To get at SAYON and SAY.</span><br/>       <span class=\"kw3\">INTEGER</span> INDEEP,HOLE\t<span class=\"co1\">!I keep track of some details.</span><br/>       <span class=\"kw3\">PRIVATE</span> INDEEP,HOLE\t<span class=\"co1\">!Amongst myselves.</span><br/>       <span class=\"kw3\">DATA</span> INDEEP,HOLE<span class=\"sy0\">/</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!Initially, I'm not doing anything.</span><br/><span class=\"co1\">Choose amongst output formats.</span><br/>       <span class=\"kw3\">INTEGER</span> LASTFILETYPENAME\t\t<span class=\"co1\">!Certain file types are recognised.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LASTFILETYPENAME <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Thus, three options.</span><br/>       <span class=\"kw3\">INTEGER</span> OUTTYPE,OUTTXT,OUTCSV,OUTHTML\t<span class=\"co1\">!The recognition.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span> OUTSTYLE,FILETYPENAME<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>LASTFILETYPENAME<span class=\"br0\">)</span>\t<span class=\"co1\">!Via the tail end of a file name.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>FILETYPENAME <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\".txt\"</span>,<span class=\"st0\">\".CSV\"</span>,<span class=\"st0\">\".HTML\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Thusly. Note that WHATFILETYPE will not recognise \".txt\" directly.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>OUTTXT <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,OUTCSV <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,OUTHTML <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Mnemonics.</span><br/>       <span class=\"kw3\">DATA</span> OUTSTYLE<span class=\"sy0\">/</span><span class=\"st0\">\"\"</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!So OUTTYPE = OUTTXT. But if an output file is specified, its file type will be inspected.</span><br/>       <span class=\"kw3\">TYPE</span> HTMLMNEMONIC\t<span class=\"co1\">!I might as well get systematic, as these are global names.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span> <span class=\"nu0\">9</span> COMMAH\t\t<span class=\"co1\">!This looks like a comma</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span> <span class=\"nu0\">9</span> COMMAD\t\t<span class=\"co1\">!And in another context, so does this.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span> <span class=\"nu0\">6</span> SPACE\t\t<span class=\"co1\">!Some spaces are to be atomic.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">18</span> RED\t\t<span class=\"co1\">!Decoration and</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span> <span class=\"nu0\">7</span> DER\t\t<span class=\"co1\">!noitaroceD.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> HTMLMNEMONIC\t<span class=\"co1\">!That's enough for now.</span><br/>       <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>HTMLMNEMONIC<span class=\"br0\">)</span> HTMLA\t<span class=\"co1\">!I'll have one set, please.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HTMLA <span class=\"sy0\">=</span> HTMLMNEMONIC<span class=\"br0\">(</span>\t<span class=\"co1\">!With these values.</span><br/>     <span class=\"nu0\">1</span>  <span class=\"st0\">\"&lt;/th&gt;&lt;th&gt;\"</span>,\t\t\t<span class=\"co1\">!But .html has its variants. For a heading.</span><br/>     <span class=\"nu0\">2</span>  <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span>,\t\t\t<span class=\"co1\">!For a table datum.</span><br/>     <span class=\"nu0\">3</span>  <span class=\"st0\">\"&amp;nbsp;\"</span>,\t\t\t<span class=\"co1\">!A space that is not to be split.</span><br/>     <span class=\"nu0\">4</span>  <span class=\"st0\">'&lt;font color=\"red\"&gt;'</span>,\t\t<span class=\"co1\">!Dabble in decoration.</span><br/>     <span class=\"nu0\">5</span>  <span class=\"st0\">'&lt;/font&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Grrrr. A font is for baptismal water.</span><br/>      <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Mysterious assistants.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTML<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Rolls some text, with suitable indentation.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The text.</span><br/><span class=\"co1\">c        INCLUDE \"cIOUnits.for\"\t!I/O unit numbers.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!Possibly boring.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Some indenting desired?</span><br/>           <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span>HOLE,<span class=\"kw4\">REPEAT</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>,INDEEP<span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yep. SAYON trims trailing spaces.</span><br/><span class=\"co1\">c           IF (HOLE.EQ.MSG) CALL WRITE(TRAIL,REPEAT(\" \",INDEEP),.TRUE.)\t!So I must copy.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Enough indenting.</span><br/>         <span class=\"kw1\">CALL</span> SAY<span class=\"br0\">(</span>HOLE,TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Say the piece and end the line.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTML\t<span class=\"co1\">!Maintain stacks? Check entry/exit matching?</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTML3<span class=\"br0\">(</span>HEAD,BUMF,TAIL<span class=\"br0\">)</span>\t<span class=\"co1\">!Rolls some text, with suitable indentation.</span><br/><span class=\"co1\">Checks the BUMF for decimal points only. HTMLALINE handles text to HTML for troublesome characters, replacing them with special names for the desired glyph.</span><br/><span class=\"co1\">Confusion might arise, if &amp; is in BUMF and is not to be converted. \"&amp;amp;\" vs \"&amp;so on\"; similar worries with &lt; and &gt;.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HEAD\t<span class=\"co1\">!If not \"\", the start of the line, with indentation supplied.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> BUMF\t<span class=\"co1\">!The main body of the text.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TAIL\t<span class=\"co1\">!If not \"\", this is for the end of the line.</span><br/>        <span class=\"kw3\">INTEGER</span> LB,L1,L2\t<span class=\"co1\">!A length and some fingers for scanning.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> MUMBLE\t<span class=\"co1\">!These symbols may not be presented properly.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> MUTTER\t<span class=\"co1\">!But these encodements may be interpreted as desired.</span><br/>        <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>MUMBLE <span class=\"sy0\">=</span> <span class=\"st0\">\"\u00b7\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!I want certain glyphs, but encodement varies.</span><br/>        <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>MUTTER <span class=\"sy0\">=</span> <span class=\"st0\">\"&amp;middot;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!As does recognition.</span><br/><span class=\"co1\">c        INCLUDE \"cIOUnits.for\"\t!I/O unit numbers.</span><br/>        <span class=\"kw3\">COMMON</span> KBD,MSG<br/><span class=\"co1\">Commence with a new line?</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>HEAD.<span class=\"me1\">NE</span>.<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Is a line to be started? (Spaces are equivalent to \"\" as well)</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Some indentation is good.</span><br/>             <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span>HOLE,<span class=\"kw4\">REPEAT</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>,INDEEP<span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yep. SAYON trims trailing spaces.</span><br/><span class=\"co1\">c             IF (HOLE.EQ.MSG) CALL WRITE(TRAIL,\t!So I must copy for the log.</span><br/><span class=\"co1\">c     1        REPEAT(\" \",INDEEP),.TRUE.)\t!Hopefully, not generated a second time.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!The accountancy may be bungled.</span><br/>             <span class=\"kw1\">CALL</span> ECART<span class=\"br0\">(</span><span class=\"st0\">\"HTML huh? InDeep=\"</span><span class=\"sy0\">//</span>I8FMT<span class=\"br0\">(</span>INDEEP<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!So, complain.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Also, REPEAT has misbehaved.</span><br/>           <span class=\"kw1\">CALL</span> SAYON<span class=\"br0\">(</span>HOLE,HEAD<span class=\"br0\">)</span>\t<span class=\"co1\">!Thus a suitable indentation.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for a starter.</span><br/><span class=\"co1\">Cast forth the bumf. Any trailing spaces will be dropped by SAYON.</span><br/>         LB <span class=\"sy0\">=</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>BUMF<span class=\"br0\">)</span>\t\t<span class=\"co1\">!How much bumf? Trailing spaces will be rolled.</span><br/>         L1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Waiting to be sent.</span><br/>         L2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!Syncopation.</span><br/>    <span class=\"nu0\">1</span>    L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Advance to the next character to be inspected..</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2.<span class=\"me1\">GT</span>.<span class=\"me1\">LB</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span>\t<span class=\"co1\">!Is there another?</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>BUMF<span class=\"br0\">(</span>L2<span class=\"sy0\">:</span>L2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.<span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>MUMBLE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Yes. Advance through the untroublesome.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L1.<span class=\"me1\">LT</span>.<span class=\"me1\">L2</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A hit. Have any untroubled ones been passed?</span><br/>           <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span>HOLE,BUMF<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yes. Send them forth.</span><br/><span class=\"co1\">c           IF (HOLE.EQ.MSG) CALL WRITE(TRAIL,BUMF(L1:L2 - 1),.TRUE.)\t!With any trailing spaces included.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!Now to do something in place of BUMF(L2)</span><br/>         L1 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Moving the marker past it, like.</span><br/>         <span class=\"kw1\">CALL</span> SAYON<span class=\"br0\">(</span>HOLE,MUTTER<span class=\"br0\">)</span>\t<span class=\"co1\">!The replacement for BUMF(L2 as was).</span><br/>         <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Continue scanning.</span><br/>    <span class=\"nu0\">2</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2.<span class=\"me1\">GT</span>.<span class=\"me1\">L1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Any tail end, but not ending the output line.</span><br/>           <span class=\"kw1\">CALL</span> WRITE<span class=\"br0\">(</span>HOLE,BUMF<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yes. Away it goes.</span><br/><span class=\"co1\">c           IF (HOLE.EQ.MSG) CALL WRITE(TRAIL,BUMF(L1:L2 - 1),.TRUE.)\t!And logged.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!So much for the bumf.</span><br/><span class=\"co1\">Consider ending the line.</span><br/>    <span class=\"nu0\">3</span>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TAIL.<span class=\"me1\">NE</span>.<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SAY<span class=\"br0\">(</span>HOLE,TAIL<span class=\"br0\">)</span>\t<span class=\"co1\">!Enough!</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTML3\t<span class=\"co1\">!Maintain stacks? Check entry/exit matching?</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLSTART<span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,TITLE,DESC<span class=\"br0\">)</span>\t<span class=\"co1\">!Roll forth some gibberish.</span><br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!The mouthpiece, mentioned once only at the start, and remembered for future use.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TITLE\t<span class=\"co1\">!This should be brief.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> DESC\t<span class=\"co1\">!This a little less brief.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> METAH\t<span class=\"co1\">!Some repetition.</span><br/>        <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>METAH <span class=\"sy0\">=</span> <span class=\"st0\">'&lt;Meta Name=\"'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The syntax is dubious.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> D\t\t<span class=\"co1\">!YYYYMMDD</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span> T\t\t<span class=\"co1\">!HHMMSS.FFF</span><br/>         HOLE <span class=\"sy0\">=</span> <span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!Keep a local copy to save on parameters.</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!We start.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">'&lt;!DOCTYPE HTML PUBLIC \"'</span>\t<span class=\"co1\">!Before we begin, we wave hands.</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span><span class=\"st0\">'-//W3C//DTD HTML 4.01 Transitional//EN\"'</span>\t<span class=\"co1\">!Otherwise \"nowrap\" is objected to, as in http://validator.w3.org/check</span><br/>     <span class=\"nu0\">2</span>    <span class=\"sy0\">//</span><span class=\"st0\">' \"http://www.w3.org/TR/html4/loose.dtd\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Endless blather.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">'&lt;HTML lang=\"en-NZ\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!  H E R E   W E   G O\u00a0!</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Its content.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;Head&gt;\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!And the first decoration begins.</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\t\t\t\t<span class=\"co1\">!Its content.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;Title&gt;\"</span><span class=\"sy0\">//</span>I AM<span class=\"sy0\">//</span><span class=\"st0\">\" \"</span>\t<span class=\"co1\">!This appears in the web page tag.</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span> TITLE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LSTNB<span class=\"br0\">(</span>TITLE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span><span class=\"st0\">\"&lt;/Title&gt;\"</span><span class=\"br0\">)</span><span class=\"co1\">!So it should be short.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">'&lt;Meta http-equiv=\"Content-Type\"'</span>\t<span class=\"co1\">!Crazed gibberish.</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span><span class=\"st0\">' content=\"text/html; charset=utf-8\"&gt;'</span><span class=\"br0\">)</span> \t\t<span class=\"co1\">!But said to be worthy.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span>METAH<span class=\"sy0\">//</span><span class=\"st0\">'Description\" Content=\"'</span><span class=\"sy0\">//</span>DESC<span class=\"sy0\">//</span><span class=\"st0\">'\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Hopefully, helpful.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span>METAH<span class=\"sy0\">//</span><span class=\"st0\">'Generator\"   Content=\"'</span><span class=\"sy0\">//</span>I AM<span class=\"sy0\">//</span><span class=\"st0\">'\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!I said.</span><br/>         <span class=\"kw1\">CALL</span> <span class=\"kw4\">DATE_AND_TIME</span><span class=\"br0\">(</span>DATE <span class=\"sy0\">=</span> D,TIME <span class=\"sy0\">=</span> T<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Not assignments, but attachments.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span>METAH<span class=\"sy0\">//</span><span class=\"st0\">'Created\"     Content=\"'</span>\t\t<span class=\"co1\">!Convert the timestamp</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span>D<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">//</span>D<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">:</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">//</span>D<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Into an international standard.</span><br/>     <span class=\"nu0\">2</span>    <span class=\"sy0\">//</span><span class=\"st0\">\" \"</span><span class=\"sy0\">//</span>T<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\":\"</span><span class=\"sy0\">//</span>T<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\":\"</span><span class=\"sy0\">//</span>T<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">'\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!For date and time.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LUSERCODE.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span>METAH\t\t\t<span class=\"co1\">!Possibly, the user's code is known.</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span><span class=\"st0\">'Author\"      Content=\"'</span><span class=\"sy0\">//</span>USERCODE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LUSERCODE<span class=\"br0\">)</span>\t<span class=\"co1\">!If so, reveal.</span><br/>     <span class=\"nu0\">2</span>    <span class=\"sy0\">//</span><span class=\"st0\">'\"&gt; &lt;!-- User code as reported by GetLog.--&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Disclaiming responsibility...</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Finishing the content of the header.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/Head&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Enough of that.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;BODY&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!A fresh line seems polite.</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\t\t<span class=\"co1\">!Its content follows..</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLSTART\t<span class=\"co1\">!Others will follow on. Hopefully, correctly.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLSTOP\t<span class=\"co1\">!And hopefully, this will be a good closure.</span><br/><span class=\"co1\">Could be more sophisticated and track the stack via INDEEP+- and names, to enable a desperate close-off if INDEEP is not 2.</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">NE</span>.2<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> ECART<span class=\"br0\">(</span><span class=\"st0\">\"Misclosure! InDeep not 2 but\"</span>\t<span class=\"co1\">!But,</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span>I8FMT<span class=\"br0\">(</span>INDEEP<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!It may not be.</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Retreat to the first level.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/BODY&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!End the \"body\".</span><br/>         INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Retreat to the start level.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/HTML&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!End the whole thing.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLSTOP\t<span class=\"co1\">!Ah...</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTSTART<span class=\"br0\">(</span>B,SUMMARY<span class=\"br0\">)</span>\t<span class=\"co1\">!Start a table.</span><br/>        <span class=\"kw3\">INTEGER</span> B\t\t<span class=\"co1\">!Border thickness.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> SUMMARY\t<span class=\"co1\">!Some well-chosen words.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;Table border=\"</span><span class=\"sy0\">//</span>I2FMT<span class=\"br0\">(</span>B<span class=\"br0\">)</span>\t<span class=\"co1\">!Just so. Text digits, or, digits in text?</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span><span class=\"st0\">' summary=\"'</span><span class=\"sy0\">//</span>SUMMARY<span class=\"sy0\">//</span><span class=\"st0\">'\"&gt;'</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Not displayed, but potentially used by non-display agencies...</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Another level dug.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTSTART<span class=\"co1\">!That part was easy.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTSTOP\t<span class=\"co1\">!And the ending is easy too.</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Withdraw a level.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/Table&gt;\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Hopefully, aligning.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTSTOP\t<span class=\"co1\">!The bounds are easy.</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTHEADSTART\t<span class=\"co1\">!Start a table's heading.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;tHead&gt;\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Thus.</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Dig deeper.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTHEADSTART\t<span class=\"co1\">!Content should follow.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTHEADSTOP\t\t<span class=\"co1\">!And now, enough.</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Retreat a level.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tHead&gt;\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!And end the head.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTHEADSTOP\t<span class=\"co1\">!At the neck of the body?</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTHEAD<span class=\"br0\">(</span>N,TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Cast forth a whole-span table heading.</span><br/>        <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!The count of columns to be spanned.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!A brief description to place there.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th colspan=\"</span>,I8FMT<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">' align=\"center\"&gt;'</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Start the specification.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LSTNB<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"st0\">\"&lt;/th&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This text, possibly verbose.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTHEAD\t\t<span class=\"co1\">!Thus, all contained on one line.</span><br/>\u00a0<br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTBODYSTART\t<span class=\"co1\">!Start on the table body.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">'&lt;tBody&gt; &lt;!--Profuse \"align\" usage '</span>\t<span class=\"co1\">!Simple, but I'm unhappy.</span><br/>     <span class=\"nu0\">1</span>    <span class=\"sy0\">//</span><span class=\"st0\">'for all cells can be factored out to \"row\" '</span>\t<span class=\"co1\">!Alas, so far as I can make out.</span><br/>     <span class=\"nu0\">2</span>    <span class=\"sy0\">//</span><span class=\"st0\">'but not to \"body\"--&gt;'</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!And I don't think much of the \"comment\" formalism, either.</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Anyway, we're ready with the alignment.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTBODYSTART\t<span class=\"co1\">!Others will provide the body.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTBODYSTOP\t<span class=\"co1\">!And, they've had enough.</span><br/>         INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!So, up out of the hole.</span><br/>         <span class=\"kw1\">CALL</span> HTML<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tBody&gt;\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Take a breath.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTBODYSTOP\t<span class=\"co1\">!And wander off.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTROWTEXT<span class=\"br0\">(</span>TEXT,N<span class=\"br0\">)</span>\t<span class=\"co1\">!Roll a row of column headings.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The headings.</span><br/>        <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!Their number.</span><br/>        <span class=\"kw3\">INTEGER</span> I,L\t\t<span class=\"co1\">!Assistants.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;\"</span>,<span class=\"st0\">\"\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Start a row of headings-to-come, and don't end the line.</span><br/>         <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t\t\t<span class=\"co1\">!Step through the headings.</span><br/>           L <span class=\"sy0\">=</span> LSTNB<span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Trailing spaces are to be ignored.</span><br/>           <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Thus discovering blank texts.</span><br/>             <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"&lt;th&gt;&amp;nbsp;&lt;/th&gt;\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This prevents the cell being collapsed.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!But for those with text,</span><br/>             <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"&lt;th&gt;\"</span><span class=\"sy0\">//</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\"&lt;/th&gt;\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Roll it.</span><br/>           <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for that text.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t\t<span class=\"co1\">!On to the next.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"\"</span>,<span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Finish the row, and thus the line.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTROWTEXT\t<span class=\"co1\">!So much for texts.</span><br/>       <span class=\"kw1\">SUBROUTINE</span> HTMLTROWINTEGER<span class=\"br0\">(</span>V,N<span class=\"br0\">)</span>\t<span class=\"co1\">!Now for all integers.</span><br/>        <span class=\"kw3\">INTEGER</span> V<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The integers.</span><br/>        <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!Their number.</span><br/>        <span class=\"kw3\">INTEGER</span> I\t<span class=\"co1\">!A stepper.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">'&lt;tr align=\"right\"&gt;'</span>,<span class=\"st0\">\"\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Start a row of entries.</span><br/>         <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t\t\t<span class=\"co1\">!Work through the row's values.</span><br/>           <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"sy0\">//</span>I8FMT<span class=\"br0\">(</span>V<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">\"&lt;/td&gt;\"</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!One by one.</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t\t<span class=\"co1\">!On to the next.</span><br/>         <span class=\"kw1\">CALL</span> HTML3<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"\"</span>,<span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Finish the row, and thus the line.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> HTMLTROWINTEGER\t<span class=\"co1\">!All the same type is not troublesome.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> HTMLSTUFF\t<span class=\"co1\">!Enough already.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> MAKETABLE<br/>      <span class=\"kw3\">USE</span> PARAMETERS<br/>      <span class=\"kw3\">USE</span> ASSISTANCE<br/>      <span class=\"kw3\">USE</span> HTMLSTUFF<br/>      <span class=\"kw3\">INTEGER</span> KBD,MSG<br/>      <span class=\"kw3\">INTEGER</span> NCOLS\t\t<span class=\"co1\">!The usage of V must conform to this!</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>NCOLS <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Specified number of columns.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span> COLNAME<span class=\"br0\">(</span>NCOLS<span class=\"br0\">)</span>\t<span class=\"co1\">!And they have names.</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>COLNAME <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"X\"</span>,<span class=\"st0\">\"Y\"</span>,<span class=\"st0\">\"Z\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!As specified.</span><br/>      <span class=\"kw3\">INTEGER</span> V<span class=\"br0\">(</span>NCOLS<span class=\"br0\">)</span>\t\t<span class=\"co1\">!A scratchpad for a line's worth.</span><br/>      <span class=\"kw3\">COMMON</span> KBD,MSG\t\t<span class=\"co1\">!I/O units.</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t\t<span class=\"co1\">!Keyboard.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t\t<span class=\"co1\">!Screen.</span><br/>      <span class=\"kw1\">CALL</span> GETLOG<span class=\"br0\">(</span>USERCODE<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Who has poked me into life?</span><br/>      LUSERCODE <span class=\"sy0\">=</span> LSTNB<span class=\"br0\">(</span>USERCODE<span class=\"br0\">)</span>\t<span class=\"co1\">!Ah, text gnashing.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> HTMLSTART<span class=\"br0\">(</span>MSG,<span class=\"st0\">\"Powers\"</span>,<span class=\"st0\">\"Table of integer powers\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Output to the screen will do.</span><br/>       <span class=\"kw1\">CALL</span> HTMLTSTART<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"st0\">\"Successive powers of successive integers\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Start the table.</span><br/>        <span class=\"kw1\">CALL</span> HTMLTHEADSTART\t\t\t\t\t\t<span class=\"co1\">!The table heading.</span><br/>         <span class=\"kw1\">CALL</span> HTMLTHEAD<span class=\"br0\">(</span>NCOLS,<span class=\"st0\">\"Successive powers\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!A full-width heading.</span><br/>         <span class=\"kw1\">CALL</span> HTMLTROWTEXT<span class=\"br0\">(</span>COLNAME,NCOLS<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">!Headings for each column.</span><br/>        <span class=\"kw1\">CALL</span> HTMLTHEADSTOP\t\t\t\t\t\t<span class=\"co1\">!So much for the heading.</span><br/>        <span class=\"kw1\">CALL</span> HTMLTBODYSTART\t\t\t\t\t\t<span class=\"co1\">!Now for the content.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">10</span>\t\t<span class=\"co1\">!This should be enough.</span><br/>          V<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I\t\t<span class=\"co1\">!The unheaded row number.</span><br/>          V<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<span class=\"sy0\">**</span><span class=\"nu0\">2</span>\t\t<span class=\"co1\">!Its square.</span><br/>          V<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<span class=\"sy0\">**</span><span class=\"nu0\">3</span>\t\t<span class=\"co1\">!Cube.</span><br/>          V<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<span class=\"sy0\">**</span><span class=\"nu0\">4</span>\t\t<span class=\"co1\">!Fourth power.</span><br/>          <span class=\"kw1\">CALL</span> HTMLTROWINTEGER<span class=\"br0\">(</span>V,NCOLS<span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">!Show a row's worth..</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next line.</span><br/>        <span class=\"kw1\">CALL</span> HTMLTBODYSTOP\t\t\t\t\t\t<span class=\"co1\">!No more content.</span><br/>       <span class=\"kw1\">CALL</span> HTMLTSTOP\t\t\t\t\t\t\t<span class=\"co1\">!End the table.</span><br/>      <span class=\"kw1\">CALL</span> HTMLSTOP<br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 36, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"html/template\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> row <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    X<span class=\"sy1\">,</span> Y<span class=\"sy1\">,</span> Z <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> tmpl <span class=\"sy2\">=</span> <span class=\"co2\">`&lt;table&gt;<br/>    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;<br/>{{range $ix, $row\u00a0:= .}}    &lt;tr&gt;&lt;td&gt;{{$ix}}&lt;/td&gt;<br/>        &lt;td&gt;{{$row.X}}&lt;/td&gt;<br/>        &lt;td&gt;{{$row.Y}}&lt;/td&gt;<br/>        &lt;td&gt;{{$row.Z}}&lt;/td&gt;&lt;/tr&gt;<br/>{{end}}&lt;/table&gt;<br/>`</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// create template</span><br/>    ct <span class=\"sy2\">:=</span> template<span class=\"sy3\">.</span><span class=\"me1\">Must</span><span class=\"sy1\">(</span>template<span class=\"sy3\">.</span><span class=\"me1\">New</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">Parse</span><span class=\"sy1\">(</span>tmpl<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// make up data</span><br/>    data <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>row<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> data <span class=\"sy1\">{</span><br/>        data<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> row<span class=\"sy1\">{</span>r<span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> r<span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> r<span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// apply template to data</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> ct<span class=\"sy3\">.</span>Execute<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> data<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 20, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">groovy.xml.MarkupBuilder</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> createTable<span class=\"br0\">(</span>columns, rowCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> writer <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=StringWriter&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">StringWriter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> MarkupBuilder<span class=\"br0\">(</span>writer<span class=\"br0\">)</span>.<span class=\"me1\">table</span><span class=\"br0\">(</span>style: <span class=\"st0\">'border:1px solid;text-align:center;'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tr <span class=\"br0\">{</span><br/>            th<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            columns.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> title <span class=\"sy0\">-&gt;</span> th<span class=\"br0\">(</span>title<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">rowCount</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span><br/>            tr <span class=\"br0\">{</span><br/>                td<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>                columns.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> td<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    writer.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> createTable<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'X'</span>, <span class=\"st0\">'Y'</span>, <span class=\"st0\">'Z'</span><span class=\"br0\">]</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Text<span class=\"sy0\">.</span>Blaze<span class=\"sy0\">.</span>Html5 <span class=\"kw1\">as</span> B<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Blaze<span class=\"sy0\">.</span>Html<span class=\"sy0\">.</span>Renderer<span class=\"sy0\">.</span>Pretty <span class=\"br0\">(</span>renderHtml<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>RandomGen<span class=\"sy0\">,</span> getStdGen<span class=\"sy0\">,</span> randomRs<span class=\"sy0\">,</span> split<span class=\"br0\">)</span><br/>\u00a0<br/>makeTable<br/>  <span class=\"sy0\">::</span> RandomGen g<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> g <span class=\"sy0\">-&gt;</span> B<span class=\"sy0\">.</span>Html<br/>makeTable headings nRows gen <span class=\"sy0\">=</span><br/>  B<span class=\"sy0\">.</span>table <span class=\"sy0\">$</span><br/>  <span class=\"kw1\">do</span> B<span class=\"sy0\">.</span>thead <span class=\"sy0\">$</span> B<span class=\"sy0\">.</span>tr <span class=\"sy0\">$</span> forM<span class=\"sy0\">_</span> <span class=\"br0\">(</span>B<span class=\"sy0\">.</span>toHtml <span class=\"sy0\">&lt;$&gt;</span> headings<span class=\"br0\">)</span> B<span class=\"sy0\">.</span>th<br/>     B<span class=\"sy0\">.</span>tbody <span class=\"sy0\">$</span><br/>       forM<span class=\"sy0\">_</span><br/>         <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> nRows<span class=\"br0\">]</span> <span class=\"sy0\">$</span> unfoldr <span class=\"br0\">(</span>Just <span class=\"sy0\">.</span> split<span class=\"br0\">)</span> gen<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>             B<span class=\"sy0\">.</span>tr <span class=\"sy0\">$</span><br/>             forM<span class=\"sy0\">_</span><br/>               <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> headings<span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: randomRs <span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>B<span class=\"sy0\">.</span>td <span class=\"sy0\">.</span> B<span class=\"sy0\">.</span>toHtml<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  g <span class=\"sy0\">&lt;-</span> getStdGen<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> renderHtml <span class=\"sy0\">$</span> makeTable <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span> g</pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> r <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;<span class=\"es0\">\\n</span>    &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;\"</span><span class=\"sy1\">,</span>r<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;%d&lt;/td&gt;\"</span><span class=\"sy1\">,?</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span>  <span class=\"co1\"># random 4 digit numbers per cell</span><br/>   <span class=\"br0\">}</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;<span class=\"es0\">\\n</span>&lt;/table&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> printf </pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\">ele=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  nm=. <span class=\"kw2\">x</span>-.LF<br/>  lf=. <span class=\"kw2\">x</span>-.nm<br/> \u00a0;<span class=\"sy0\">(</span><span class=\"st_h\">'&lt;'</span>,nm,<span class=\"st_h\">'&gt;'</span><span class=\"sy0\">)</span> ,L:<span class=\"nu0\">0</span> <span class=\"kw2\">y</span> ,L:<span class=\"nu0\">0</span> <span class=\"st_h\">'&lt;/'</span>,nm,<span class=\"st_h\">'&gt;'</span>,lf<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>hTbl=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  rows=. <span class=\"st_h\">'td'</span> &lt;@ele\"<span class=\"nu0\">1</span> \":&amp;.&gt;<span class=\"kw2\">y</span><br/>  <span class=\"st_h\">'table'</span> ele <span class=\"sy0\">(</span><span class=\"st_h\">'tr'</span>,LF<span class=\"sy0\">)</span> &lt;@ele <span class=\"sy0\">(</span><span class=\"st_h\">'th'</span> ele <span class=\"kw2\">x</span><span class=\"sy0\">)</span>; rows<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/javax/swing/text/html/HTML.html\"><span class=\"kw117\">HTML</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> array2HTML<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> html = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> elem:array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\thtml.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;th&gt;\"</span> + elem.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\"&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> row = array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\thtml.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> elem:row<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\thtml.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span> + elem.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\thtml.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\thtml.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> html.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ints = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"X\"</span>,<span class=\"st0\">\"Y\"</span>,<span class=\"st0\">\"Z\"</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">3</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"nu0\">4</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">11</span>,<span class=\"nu0\">12</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>array2HTML<span class=\"br0\">(</span>ints<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 35, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;&lt;</span>head<span class=\"sy0\">&gt;&lt;</span>title<span class=\"sy0\">&gt;</span>Table maker<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"application/javascript\"</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"co1\">// normally, don't do this: at least name it something other than \"a\"</span><br/>Node.<span class=\"kw1\">prototype</span>.<span class=\"me1\">a</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw1\">this</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ce<span class=\"br0\">(</span>tag<span class=\"sy0\">,</span> txt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span>tag<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx.<span class=\"me1\">textContent</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>txt <span class=\"sy0\">===</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> txt<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> make_table<span class=\"br0\">(</span>cols<span class=\"sy0\">,</span> rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> tbl <span class=\"sy0\">=</span> ce<span class=\"br0\">(</span><span class=\"st0\">'table'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> tr <span class=\"sy0\">=</span> ce<span class=\"br0\">(</span><span class=\"st0\">'tr'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> th<span class=\"sy0\">;</span><br/>\u00a0<br/>\ttbl.<span class=\"me1\">a</span><span class=\"br0\">(</span>tr.<span class=\"me1\">a</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span><span class=\"st0\">'th'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> z <span class=\"sy0\">=</span> <span class=\"st0\">'Z'</span>.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> z <span class=\"sy0\">-</span> cols <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> l <span class=\"sy0\">&lt;=</span> z<span class=\"sy0\">;</span> l<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\ttr.<span class=\"me1\">a</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span><span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;=</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttbl.<span class=\"me1\">a</span><span class=\"br0\">(</span>tr <span class=\"sy0\">=</span> ce<span class=\"br0\">(</span><span class=\"st0\">'tr'</span><span class=\"br0\">)</span>.<span class=\"me1\">a</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span><span class=\"st0\">'th'</span><span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> cols<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\ttr.<span class=\"me1\">a</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span><span class=\"st0\">'td'</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tdocument.<span class=\"me1\">body</span><br/>\t\t.<span class=\"me1\">a</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span><span class=\"st0\">'style'</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"st0\">'td, th {border: 1px solid #696;'</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"st0\">'padding:.4ex} td {text-align: right }'</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"st0\">'table { border-collapse: collapse}'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t.<span class=\"me1\">a</span><span class=\"br0\">(</span>tbl<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;&lt;/</span>head<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;&lt;</span>script<span class=\"sy0\">&gt;</span>make_table<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;&lt;/</span>body<span class=\"sy0\">&gt;&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\">def html_row:<br/>  \"&lt;tr&gt;\",<br/>  \"  \\(.[] | \"&lt;td&gt;\\(.)&lt;/td&gt;\")\",<br/>  \"&lt;/tr&gt;\";<br/>\u00a0<br/>def html_header:<br/>  \"&lt;thead align = 'right'&gt;\",<br/>  \"  \\(html_row)\",<br/>  \"&lt;/thead&gt;\";<br/>\u00a0<br/> def html_table(header):<br/>  \"&lt;table&gt;\",<br/>  \"  \\(header | html_header)\",<br/>  \"  &lt;tbody align = 'right'&gt;\",<br/>  \"    \\(.[] | html_row)\",<br/>  \"  &lt;/tbody\",<br/>  \"&lt;/table&gt;\";<br/>\u00a0<br/># Prepend the sequence number<br/>def html_table_with_sequence(header):<br/>  length as $length<br/>  | . as $in<br/>  | [range(0;length) | [.+1] + $in[.]] |  html_table(header);</pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">function tag(x::Pair, attr::Pair...)<br/>    t, b = x<br/>    attrstr = join(\" $n=\\\"$p\\\"\" for (n, p) in attr)<br/>    return \"&lt;$t$attrstr&gt;$b&lt;/$t&gt;\"<br/>end<br/>\u00a0<br/>colnames = split(\",X,Y,Z\", ',')<br/>\u00a0<br/>header = join(tag(:th =&gt; txt) for txt in colnames) * \"\\n\"<br/>rows   = collect(tag(:tr =&gt; join(tag(:td =&gt; i,\u00a0:style =&gt; \"font-weight: bold;\") * join(tag(:td =&gt; rand(1000:9999)) for j in 1:3))) for i in 1:6)<br/>body   = \"\\n\" * join(rows, '\\n') * \"\\n\"<br/>table  = tag(:table =&gt; string('\\n', header, body, '\\n'),\u00a0:style =&gt; \"width: 60%\")<br/>println(table)</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> <span class=\"st0\">\"   \"</span>  <span class=\"co1\">// indent</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>sb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;html&gt;<span class=\"es1\">\\n</span>&lt;head&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;style&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"table, th, td  { border: 1px solid black; }<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"th, td { text-align: right; }<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/style&gt;<span class=\"es1\">\\n</span>&lt;/head&gt;<span class=\"es1\">\\n</span>&lt;body&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;table style=<span class=\"es1\">\\\"</span>width:60%<span class=\"es1\">\\\"</span>&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"$i&lt;thead&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"$i$i&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"st0\">'X'</span>..<span class=\"st0\">'Z'</span><span class=\"br0\">)</span> append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;th&gt;$c&lt;/th&gt;\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"$i&lt;/thead&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"$i&lt;tbody&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\"$i$i&lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            append<span class=\"br0\">(</span>f.<span class=\"me1\">format</span><span class=\"br0\">(</span>j, r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>, r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>, r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>      <br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"$i&lt;/tbody&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        append<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/body&gt;<span class=\"es1\">\\n</span>&lt;/html&gt;\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 21, "block": "<pre class=\"text highlighted_source\">define rand4dig =&gt; integer_random(9999, 1)<br/>\u00a0<br/>local(<br/>\toutput = '&lt;table border=2 cellpadding=5  cellspace=0&gt;\\n&lt;tr&gt;'<br/>)<br/>\u00a0<br/>with el in ('&amp;#160;,X,Y,Z') -&gt; split(',') do {<br/>\t#output -&gt; append('&lt;th&gt;' + #el + '&lt;/th&gt;')<br/>}<br/>#output -&gt; append('&lt;/tr&gt;\\n')<br/>\u00a0<br/>loop(5) =&gt; {<br/>\t#output -&gt; append('&lt;tr&gt;\\n&lt;td style=\"font-weight: bold;\"&gt;' + loop_count + '&lt;/td&gt;')<br/>\tloop(3) =&gt; {<br/>\t\t#output -&gt; append('&lt;td&gt;' + rand4dig + '&lt;/td&gt;')<br/>\t}<br/>\t#output -&gt; append('&lt;/tr&gt;\\n')<br/>}<br/>#output -&gt; append('&lt;/table&gt;\\n')<br/>\u00a0<br/>#output</pre>"}, {"lang": "Liberty BASIC", "loc": 42, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">nomainwin</span><br/>\u00a0<br/>    quote$ <span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>\u00a0<br/>    html$  <span class=\"sy0\">=</span><span class=\"st0\">\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\"</span><br/>\u00a0<br/>    html$ <span class=\"sy0\">=</span>html$ <span class=\"sy0\">+</span><span class=\"st0\">\"&lt;table border =\"</span> <span class=\"sy0\">+</span>quote$ <span class=\"sy0\">+</span><span class=\"st0\">\"6\"</span><span class=\"sy0\">+</span> quote$ <span class=\"sy0\">+</span><span class=\"st0\">\" solid rules =none\u00a0; cellspacing =\"</span> <span class=\"sy0\">+</span>quote$ <span class=\"sy0\">+</span><span class=\"st0\">\"10\"</span> <span class=\"sy0\">+</span>quote$ <span class=\"sy0\">+</span><span class=\"st0\">\"&gt; &lt;th&gt; &lt;/th&gt; &lt;th&gt; X &lt;/th&gt; &lt;th&gt; Y &lt;/th&gt; &lt;th&gt; Z &lt;/th&gt;\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>        d1$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>        d2$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        d3$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        d4$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        html$ <span class=\"sy0\">=</span>html$ <span class=\"sy0\">+</span><span class=\"st0\">\"&lt;tr align =\"</span>; quote$; <span class=\"st0\">\"right\"</span>; quote$; <span class=\"st0\">\"&gt; &lt;th&gt;\"</span>; d1$; <span class=\"st0\">\" &lt;/th&gt; &lt;td&gt;\"</span> <span class=\"sy0\">+</span>d2$ <span class=\"sy0\">+</span><span class=\"st0\">\" &lt;/td&gt; &lt;td&gt;\"</span> <span class=\"sy0\">+</span>d3$ <span class=\"sy0\">+</span><span class=\"st0\">\" &lt;/td&gt; &lt;td&gt;\"</span> <span class=\"sy0\">+</span>d4$ <span class=\"sy0\">+</span><span class=\"st0\">\" &lt;/td&gt; &lt;/tr&gt;\"</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    html$ <span class=\"sy0\">=</span>html$ <span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/table&gt;\"</span><br/>\u00a0<br/>    html$ <span class=\"sy0\">=</span>html$ <span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/body&gt;&lt;/html&gt;\"</span><br/>\u00a0<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"table.html\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">output</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>o<br/>        <span class=\"sy0\">#</span>o html$;<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>o<br/>\u00a0<br/>    address$ <span class=\"sy0\">=</span><span class=\"st0\">\"table.html\"</span><br/>    <span class=\"kw1\">run</span> <span class=\"st0\">\"explorer.exe \"</span>; address$<br/>\u00a0<br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">5000</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">wait</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">kill</span> <span class=\"st0\">\"table.html\"</span><br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> quit w$<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w$<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 25, "block": "<pre class=\"text highlighted_source\">on htmlTable (data)<br/>  str = \"&lt;table&gt;\"<br/>\u00a0<br/>  -- table head<br/>  put \"&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;\" after str<br/>  repeat with cell in data[1]<br/>    put \"&lt;th&gt;\"&amp;cell&amp;\"&lt;/th&gt;\" after str<br/>  end repeat<br/>  put \"&lt;/tr&gt;&lt;/thead&gt;\" after str<br/>\u00a0<br/>  -- table body<br/>  put \"&lt;tbody&gt;\" after str<br/>  cnt = data.count<br/>  repeat with i = 2 to cnt<br/>    put \"&lt;tr&gt;&lt;td&gt;\"&amp;(i-1)&amp;\"&lt;/td&gt;\" after str<br/>    repeat with cell in data[i]<br/>      put \"&lt;td&gt;\"&amp;cell&amp;\"&lt;/td&gt;\" after str<br/>    end repeat<br/>    put \"&lt;/tr&gt;\" after str<br/>  end repeat<br/>  put \"&lt;/tbody&gt;\" after str<br/>\u00a0<br/>  put \"&lt;/table&gt;\" after str<br/>  return str<br/>end</pre>"}, {"lang": "Lua", "loc": 24, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> htmlTable <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> html <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;table&gt;<span class=\"es1\">\\n</span>&lt;tr&gt;<span class=\"es1\">\\n</span>&lt;th&gt;&lt;/th&gt;<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> heading <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        html <span class=\"sy0\">=</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;th&gt;\"</span> <span class=\"sy0\">..</span> heading <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/th&gt;\"</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"kw1\">end</span><br/>    html <span class=\"sy0\">=</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"kw1\">for</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>data <span class=\"kw1\">do</span><br/>        html <span class=\"sy0\">=</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;tr&gt;<span class=\"es1\">\\n</span>&lt;th&gt;\"</span> <span class=\"sy0\">..</span> row <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/th&gt;<span class=\"es1\">\\n</span>\"</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> field <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            html <span class=\"sy0\">=</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">..</span> field <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>\"</span><br/>        <span class=\"kw1\">end</span><br/>        html <span class=\"sy0\">=</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> html <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> tableData <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>htmlTable<span class=\"br0\">(</span>tableData<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">x\u00a0:= RandomInteger[10];<br/>Print[\"&lt;table&gt;\", \"\\n\",\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\"]<br/>Scan[Print[\"&lt;tr&gt;&lt;td&gt;\", #, \"&lt;/td&gt;&lt;td&gt;\", x, \"&lt;/td&gt;&lt;td&gt;\", x, \"&lt;/td&gt;&lt;td&gt;\",\"&lt;/td&gt;&lt;/tr&gt;\"] &amp; , Range[3]]<br/>Print[\"&lt;/table&gt;\"]</pre>"}, {"lang": "MATLAB / Octave", "loc": 12, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> htmltable<span class=\"br0\">(</span>fid,table,Label<span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'&lt;table&gt;\\n  &lt;thead align = \"right\"&gt;\\n'</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">3</span>,<br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;Z&lt;/td&gt;&lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody align = \"right\"&gt;\\n'</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">else</span><br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;'</span><span class=\"br0\">)</span>;<br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'&lt;td&gt;%s&lt;/td&gt;'</span>,Label<span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'&lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody align = \"right\"&gt;\\n'</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>; <br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'    &lt;tr&gt;&lt;td&gt;%2i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;td&gt;%5i&lt;/td&gt;&lt;/tr&gt;\\n'</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>table,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;table'<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'  &lt;/tbody&gt;\\n&lt;/table&gt;\\n'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Modula-2", "loc": 47, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> testCGI;<br/>\u00a0<br/><span class=\"kw1\">FROM</span>  InOut       <span class=\"kw1\">IMPORT</span>  WriteCard<span class=\"sy0\">,</span> WriteLn<span class=\"sy0\">,</span> WriteString<span class=\"sy0\">,</span> WriteBf;<br/><span class=\"kw1\">FROM</span>  Arguments   <span class=\"kw1\">IMPORT</span>  ArgTable<span class=\"sy0\">,</span> GetEnv;<br/><span class=\"kw1\">FROM</span>  Strings     <span class=\"kw1\">IMPORT</span>  Assign<span class=\"sy0\">,</span> Length<span class=\"sy0\">,</span> String;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>  EnvVars             <span class=\"sy0\">:</span> ArgTable;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReadEnvVar;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>   Value          <span class=\"sy0\">:</span> String;<br/>      i              <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;table border=\"1\" cellpadding=\"4\" width=\"80%\" align=\"center\"&gt;'</span><span class=\"br0\">)</span>;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;tr&gt;&lt;th&gt;Index&lt;/th&gt;&lt;th&gt;Length&lt;/th&gt;&lt;th&gt;Content&lt;/th&gt;&lt;/tr&gt;'</span><span class=\"br0\">)</span>;<br/>   i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">LOOP</span><br/>      <span class=\"kw1\">IF</span>  EnvVars^ <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span>  <span class=\"kw1\">THEN</span>  <span class=\"kw1\">EXIT</span>  <span class=\"kw1\">END</span>;<br/>      Assign <span class=\"br0\">(</span>Value<span class=\"sy0\">,</span> EnvVars^ <span class=\"br0\">[</span>i<span class=\"br0\">]</span>^<span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;tr&gt;&lt;td align=\"center\"&gt;'</span><span class=\"br0\">)</span>;<br/>      WriteCard <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;/td&gt;&lt;td align=\"center\"&gt;'</span><span class=\"br0\">)</span>;<br/>      WriteCard <span class=\"br0\">(</span>Length <span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;/td&gt;&lt;td&gt;'</span><span class=\"br0\">)</span>;    WriteString <span class=\"br0\">(</span>Value<span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span>;<br/>      WriteLn;<br/>      <span class=\"kw3\">INC</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>   <span class=\"kw1\">END</span>;<br/>   WriteString<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> ReadEnvVar;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   GetEnv <span class=\"br0\">(</span>EnvVars<span class=\"br0\">)</span>;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'Content-type:text/html'</span><span class=\"br0\">)</span>;<br/>   WriteLn;<br/>   WriteLn;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;html&gt;&lt;head&gt;'</span><span class=\"br0\">)</span>;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;title&gt;CGI with the Mocka Modula-2 compiler&lt;/title&gt;'</span><span class=\"br0\">)</span>;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;/head&gt;&lt;body&gt;'</span><span class=\"br0\">)</span>;<br/>   WriteLn;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;center&gt;&lt;h2&gt;CGI environment passed along by your browser&lt;/h2&gt;&lt;/center&gt;&lt;p&gt;'</span><span class=\"br0\">)</span>;<br/>   ReadEnvVar;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'&lt;/body&gt;&lt;/html&gt;'</span><span class=\"br0\">)</span>;<br/>   WriteLn;<br/>   WriteBf<br/><span class=\"kw1\">END</span> testCGI.</pre>"}, {"lang": "NetRexx", "loc": 123, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- create some test data.  Put the data in a Rexx indexed string</span><br/>maxI = <span class=\"nu0\">1000</span><br/>rng = Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>xyz = <span class=\"st0\">''</span><br/>xyz<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span>; xyz<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">'. X Y Z'</span> <span class=\"co1\">-- use a dot to indicate an empty cell</span><br/><span class=\"kw1\">loop</span> r_ = <span class=\"nu0\">1</span> for <span class=\"nu0\">5</span><br/>  ra = r_ rng.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>maxI<span class=\"br0\">)</span> rng.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>maxI<span class=\"br0\">)</span> rng.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>maxI<span class=\"br0\">)</span><br/>  xyz<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = r_ + <span class=\"nu0\">1</span>; xyz<span class=\"br0\">[</span>r_ + <span class=\"nu0\">1</span><span class=\"br0\">]</span> = ra<br/>  <span class=\"kw3\">end</span> r_<br/>\u00a0<br/><span class=\"co1\">-- build an HTML string</span><br/>html = htmlHeader<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>html = html <span class=\"sy0\">||</span> htmlTable<span class=\"br0\">(</span>xyz<span class=\"br0\">)</span><br/>html = html <span class=\"sy0\">||</span> htmlFooter<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- display HTML at standard output device</span><br/><span class=\"kw1\">say</span> html<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- HTML boilerplate header</span><br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method htmlHeader<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\" xml:lang=\"en-US\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;head&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"/&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;title&gt;RCreateHTMLTable&lt;/title&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;style type=\"text/css\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;!--\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'/* &lt;![DATA[ */\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'body {font-family: \"Lucida Grande\", \"Geneva\", \"Verdana\", \"Helvetica Neue\", \"Helvetica\", \"DejaVu Sans\", \"Arial\", sans-serif;}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'table, th, td {table-layout: fixed; border: 1px solid black; border-collapse: collapse; padding: 0.25em; font-size: 85%;}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'th, td {width: 6em;}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'th {color: white; background-color: green;}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'td {text-align: right;}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'p.classname {\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  font-size: inherit;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'/* ]] */\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'//--&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/style&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/head&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;body&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;h1&gt;Rosetta Code &amp;ndash; NetRexx Sample Output&lt;/h2&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;h2&gt;&lt;a href=\"http://rosettacode.org/wiki/Create_an_HTML_table\"&gt;Create an HTML table&lt;/a&gt;&lt;/h2&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- HTML footer</span><br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method htmlFooter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;/body&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/html&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Create the table</span><br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method htmlTable<span class=\"br0\">(</span>rows, caption = <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;table&gt;\\n'</span><br/>  <span class=\"kw1\">if</span> caption.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    html = html -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;caption&gt;'</span>caption<span class=\"st0\">'&lt;/caption&gt;\\n'</span> -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;thead&gt;\\n'</span> -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">end</span><br/>  html = html -<br/>      <span class=\"sy0\">||</span> htmlCsvTableRow<span class=\"br0\">(</span>rows<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"st0\">'th'</span><span class=\"br0\">)</span><span class=\"st0\">'\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/thead&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;tbody&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> r_ = <span class=\"nu0\">2</span> to rows<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    html = html -<br/>        <span class=\"sy0\">||</span> htmlCsvTableRow<span class=\"br0\">(</span>rows<span class=\"br0\">[</span>r_<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> r_<br/>  html = html -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/tbody&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/table&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Add a row to the table</span><br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method htmlCsvTableRow<span class=\"br0\">(</span>row, tag = <span class=\"st0\">'td'</span>, sep = <span class=\"st0\">' '</span>, emptyCell = <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  <span class=\"kw1\">if</span> tag = null <span class=\"kw3\">then</span> tag = <span class=\"st0\">'td'</span><br/>  row = row.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'t'</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- replace HTML special characters with symbol entities</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;'</span>, <span class=\"st0\">'&amp;amp;'</span><span class=\"br0\">)</span> <span class=\"co1\">-- need to do this one first to avoid double translation</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'\"'</span>, <span class=\"st0\">'&amp;quot;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span>, <span class=\"st0\">'&amp;apos;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>, <span class=\"st0\">'&amp;lt;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span>, <span class=\"st0\">'&amp;gt;'</span><span class=\"br0\">)</span><br/>  elmts = <span class=\"st0\">''</span><br/>  elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>  e_ = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> while row.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">parse</span> row elmt <span class=\"br0\">(</span>sep<span class=\"br0\">)</span> row<br/>    <span class=\"kw1\">if</span> elmt == emptyCell <span class=\"kw3\">then</span> elmt = <span class=\"st0\">'&amp;nbsp;'</span> <span class=\"co1\">-- replace empy cells with non-breaking spaces</span><br/>    e_ = e_ + <span class=\"nu0\">1</span>; elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = e_; elmts<span class=\"br0\">[</span>e_<span class=\"br0\">]</span> = elmt<br/>    <span class=\"kw3\">end</span><br/>  html = <span class=\"st0\">'&lt;tr&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> e_ = <span class=\"nu0\">1</span> to elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    html = html -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;'</span>tag<span class=\"st0\">'&gt;'</span>elmts<span class=\"br0\">[</span>e_<span class=\"br0\">]</span><span class=\"st0\">'&lt;/'</span>tag<span class=\"st0\">'&gt;\\n'</span> -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">end</span> e_<br/>  html = html -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/tr&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 56, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">; file:   html-table.lsp</span><br/><span class=\"co1\">; url:    http://rosettacode.org/wiki/Create_an_HTML_table</span><br/><span class=\"co1\">; author: oofoe 2012-01-29</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#seed\"><span class=\"kw1\">seed</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#time-of-day\"><span class=\"kw1\">time-of-day</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; Initialize random number generator.</span><br/>\u00a0<br/><span class=\"co1\">; The \"tab\" variable tracks the HTML indent. \"pad\" composes a line</span><br/><span class=\"co1\">; with the appropriate indent and a terminal newline.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> tab <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>pad text<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dup\"><span class=\"kw1\">dup</span></a> <span class=\"st0\">\"  \"</span> tab<span class=\"br0\">)</span> text <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; NewLISP allows almost any character in an identifier, so I can name</span><br/><span class=\"co1\">; my functions after the HTML elements they invoke. This one formats a</span><br/><span class=\"co1\">; single table data cell.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>td<span class=\"sy1\">&gt;</span> text<span class=\"br0\">)</span> <span class=\"br0\">(</span>pad <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"st0\">\"&lt;td&gt;\"</span> text <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; \"&lt;tr&gt;\" will accept either a number of arguments, each one to be</span><br/><span class=\"co1\">; formatted as a table cell, or a single list argument, which is</span><br/><span class=\"co1\">; broken into table cells. For convenience, I format each list item</span><br/><span class=\"co1\">; with the \"&lt;td&gt;\" function so I can feed it raw lists.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>tr<span class=\"sy1\">&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>data <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#args\"><span class=\"kw1\">args</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>s    <span class=\"br0\">(</span>pad <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#list%3F\"><span class=\"kw1\">list?</span></a> <span class=\"br0\">(</span>data <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> data <span class=\"br0\">(</span>data <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#inc\"><span class=\"kw1\">inc</span></a> tab<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dolist\"><span class=\"kw1\">dolist</span></a> <span class=\"br0\">(</span>el data<span class=\"br0\">)</span> <span class=\"br0\">(</span>extend s <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>td<span class=\"sy1\">&gt;</span> el<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dec\"><span class=\"kw1\">dec</span></a> tab<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>extend s <span class=\"br0\">(</span>pad <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; By defining \"&lt;table&gt;\" as a macro, I ensure that the rows won't be</span><br/><span class=\"co1\">; evaluated until I've got the table started, which preserves the</span><br/><span class=\"co1\">; formatting.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define-macro\"><span class=\"kw1\">define-macro</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>table<span class=\"sy1\">&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">(</span>pad <span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#inc\"><span class=\"kw1\">inc</span></a> tab<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#doargs\"><span class=\"kw1\">doargs</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">(</span>extend s <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dec\"><span class=\"kw1\">dec</span></a> tab<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>extend s <span class=\"br0\">(</span>pad <span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s<br/>    <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Test</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#print\"><span class=\"kw1\">print</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>table<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>tr<span class=\"sy1\">&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"st0\">\"X\"</span> <span class=\"st0\">\"Y\"</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>tr<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cons\"><span class=\"kw1\">cons</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#rand\"><span class=\"kw1\">rand</span></a> <span class=\"nu0\">1000</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>tr<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cons\"><span class=\"kw1\">cons</span></a> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#rand\"><span class=\"kw1\">rand</span></a> <span class=\"nu0\">1000</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>tr<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cons\"><span class=\"kw1\">cons</span></a> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#rand\"><span class=\"kw1\">rand</span></a> <span class=\"nu0\">1000</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import math, htmlgen<br/>randomize()<br/>\u00a0<br/>template randTD(): expr = td($random(1000..9999))<br/>proc randTR(x): auto =<br/>  tr(td($x, style=\"font-weight: bold\"), randTD, randTD, randTD)<br/>\u00a0<br/>echo table(<br/>  tr(th\"\", th\"X\", th\"Y\", th\"Z\"),<br/>  randTR 1,<br/>  randTR 2,<br/>  randTR 3,<br/>  randTR 4,<br/>  randTR 5)</pre>"}, {"lang": "Objeck", "loc": 35, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>\ufeff<span class=\"kw1\">class</span> CreateTable <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    s <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;thead align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    td <span class=\"sy0\">:=</span> <span class=\"st0\">\"XYZ\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>td<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/thead&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tbody align = <span class=\"es0\">\\\"</span>right<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span>        <br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tbody&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    s<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 23, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> buf <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>add_string buf <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;thead align='right'&gt;\"</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v <span class=\"sy0\">-&gt;</span><br/>    s <span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">^</span> v <span class=\"sy0\">^</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"st0\">\"X\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;/thead&gt;\"</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;tbody align='right'&gt;\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>    s <span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span> <span class=\"sy0\">^</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> i <span class=\"sy0\">^</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>        s <span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">^</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    s <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;/tbody&gt;\"</span><span class=\"sy0\">;</span><br/>  s <span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>contents buf<span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 41, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>\u00a0<br/><span class=\"br0\">[</span>Roads<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Module<span class=\"sy0\">.</span>link <span class=\"br0\">[</span><span class=\"st0\">'x-ozlib://wmeyer/roads/Roads.ozf'</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Table</span> Session<span class=\"br0\">}</span><br/>   html<span class=\"br0\">(</span><br/>      head<span class=\"br0\">(</span>title<span class=\"br0\">(</span><span class=\"st0\">\"Show a table with row and column headings\"</span><span class=\"br0\">)</span><br/>\t   style<span class=\"br0\">(</span>type:<span class=\"st0\">\"text/css\"</span><br/>\t\t css<span class=\"br0\">(</span>td <span class=\"st0\">'text-align'</span>:center<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      body<span class=\"br0\">(</span><br/>\t <span class=\"br0\">{</span>TagFromList table<br/>\t  tr<span class=\"br0\">(</span>th th<span class=\"br0\">(</span><span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> th<span class=\"br0\">(</span><span class=\"st0\">\"Y\"</span><span class=\"br0\">)</span> th<span class=\"br0\">(</span><span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"sy0\">|</span><br/>\t  <span class=\"br0\">{</span>CreateRows 3 5<span class=\"br0\">}</span><br/>\t <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">CreateRows</span> NumCols NumRows<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>map <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 NumRows 1<span class=\"br0\">}</span><br/>    <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Row<span class=\"br0\">}</span><br/>       <span class=\"br0\">{</span>TagFromList tr<br/>\ttd<span class=\"br0\">(</span> <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString Row<span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t<span class=\"sy0\">|</span><br/>\t<span class=\"br0\">{</span>List<span class=\"sy0\">.</span>map <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 NumCols 1<span class=\"br0\">}</span><br/>\t <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Col<span class=\"br0\">}</span><br/>\t    SequentialNumber = <span class=\"br0\">(</span>Row<span class=\"sy0\">-</span>1<span class=\"br0\">)</span><span class=\"sy0\">*</span>NumCols <span class=\"sy0\">+</span> Col<br/>\t <span class=\"kw1\">in</span><br/>\t    td<span class=\"br0\">(</span> <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString SequentialNumber<span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t <span class=\"kw1\">end</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>TagFromList = List<span class=\"sy0\">.</span>toTuple<br/>\u00a0<br/><span class=\"kw1\">in</span><br/>\u00a0<br/><span class=\"br0\">{</span>Roads<span class=\"sy0\">.</span>registerFunction table Table<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>Roads<span class=\"sy0\">.</span>run<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">html<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span>i<span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">9999</span><span class=\"br0\">)</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 17, "block": "<pre class=\"text highlighted_source\">&lt;@ SDCLIT&gt;<br/>\t&lt;@ DTBLIT&gt;<br/>\t\t&lt;@ DTRLITLIT&gt;<br/>\t\t\t&lt;@ DTDLITLIT&gt;|[style]background-color:white&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;X&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;Y&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;Z&lt;/@&gt;|[style]width:100%; background-color:brown;color:white; text-align:center&lt;/@&gt;<br/>\t\t&lt;@ ITEFORLIT&gt;10|<br/>\t\t\t&lt;@ DTRLITCAP&gt;<br/>\t\t\t&lt;@ DTDPOSFORLIT&gt;...|[style]background-color:Brown; color:white; text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t|[style]background-color:white;color:black&lt;/@&gt;<br/>\t\t&lt;/@&gt; <br/>\t&lt;/@&gt;<br/>|Number Table&lt;/@&gt;</pre>"}, {"lang": "Peloton", "loc": 17, "block": "<pre class=\"text highlighted_source\">&lt;@ SDCLIT&gt;<br/>\t&lt;@ DTBLIT&gt;<br/>\t\t&lt;@ DTRLITLIT&gt;<br/>\t\t\t&lt;@ DTDLITLIT&gt;|[style]background-color:white&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;X&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;Y&lt;/@&gt;<br/>\t\t\t&lt;@ DTD&gt;Z&lt;/@&gt;|[style]width:100%; background-color:brown;color:white; text-align:center&lt;/@&gt;<br/>\t\t&lt;@ ITEFORLIT&gt;10|<br/>\t\t\t&lt;@ DTRLITCAP&gt;<br/>\t\t\t&lt;@ DTDPOSFORLIT&gt;...|[style]background-color:Brown; color:white; text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t&lt;@ DTDCAPLIT&gt;&lt;@ SAYR!ILI2&gt;1|9999&lt;/@&gt;|[style]width:50;text-align:right&lt;/@&gt;<br/>\t\t\t|[style]background-color:white;color:black&lt;/@&gt;<br/>\t\t&lt;/@&gt; <br/>\t&lt;/@&gt;<br/>|Number Table&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@heading</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>X Y Z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a>   <span class=\"st_h\">'&lt;table&gt;&lt;thead&gt;&lt;td&gt;'</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"st0\">\"&lt;th&gt;$_&lt;/th&gt;\"</span> <span class=\"br0\">}</span> <span class=\"re0\">@heading</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>        <span class=\"st0\">\"&lt;/thead&gt;&lt;tbody&gt;\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rows</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a>   <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;$_&lt;/th&gt;\"</span><span class=\"sy0\">,</span> <br/>                <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"&lt;/td&gt;\"</span> <span class=\"br0\">}</span> <span class=\"re0\">@heading</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a>   <span class=\"st0\">\"&lt;/tbody&gt;&lt;/table&gt;\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@header</span> <span class=\"sy0\">=</span>  <span class=\"sy0\">&lt;</span><span class=\"re0\">&amp;nbsp</span><span class=\"sy0\">;</span> <span class=\"kw1\">X</span> Y Z<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tag <span class=\"br0\">(</span><span class=\"re0\">$tag</span><span class=\"sy0\">,</span> <span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"re0\">$param</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"&lt;$tag\"</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span><span class=\"re0\">$param</span> <span class=\"sy0\">??</span> <span class=\"st0\">\" $param\"</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"&gt;$string\"</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"&lt;/$tag&gt;\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$table</span> <span class=\"sy0\">=</span> tag<span class=\"br0\">(</span><span class=\"st_h\">'tr'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> tag<span class=\"br0\">(</span><span class=\"st_h\">'th'</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@header</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$row</span> <span class=\"br0\">{</span> <br/>    <span class=\"re0\">$table</span> <span class=\"sy0\">~=</span>  tag<span class=\"br0\">(</span><span class=\"st_h\">'tr'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> tag<span class=\"br0\">(</span><span class=\"st_h\">'td'</span><span class=\"sy0\">,</span> <span class=\"re0\">$row</span><span class=\"sy0\">,</span> <span class=\"st_h\">'align=\"right\"'</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">~</span> <span class=\"br0\">(</span>tag<span class=\"br0\">(</span><span class=\"st_h\">'td'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">,</span> <span class=\"st_h\">'align=\"right\"'</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..^</span><span class=\"re0\">@header</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> tag<span class=\"br0\">(</span><span class=\"st_h\">'table'</span><span class=\"sy0\">,</span> <span class=\"re0\">$table</span><span class=\"sy0\">,</span> <span class=\"st_h\">'cellspacing=4 style=\"text-align:right; border: 1px solid;\"'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 14, "block": "<pre class=\"text highlighted_source\">puts(1,\"&lt;table&gt;\\n\")<br/>puts(1,\"  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;\")<br/>for j=1 to 3 do<br/>    printf(1,\"&lt;th&gt;%s&lt;/th&gt;\",'W'+j)<br/>end for<br/>puts(1,\"&lt;/tr&gt;\\n\")<br/>for i=1 to 3 do<br/>    printf(1,\"  &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;\",i)<br/>    for j=1 to 3 do<br/>        printf(1,\"&lt;td&gt;%d&lt;/td&gt;\",rand(10000))<br/>    end for<br/>    puts(1,\"&lt;/tr&gt;\\n\")<br/>end for<br/>puts(1,\"&lt;/table&gt;\")</pre>"}, {"lang": "PHP", "loc": 37, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co4\">/**<br/> * @author Elad Yosifon<br/> * @desc HTML Table - normal style<br/> */</span><br/><span class=\"re0\">$cols</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">'X'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Y'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Z'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$html</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'&lt;html&gt;&lt;body&gt;&lt;table&gt;&lt;colgroup&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$cols</span> <span class=\"kw1\">as</span> <span class=\"re0\">$col</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;col style=\"text-align: left;\" /&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$col</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$cols</span> <span class=\"kw1\">as</span> <span class=\"re0\">$col</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"&lt;td&gt;<span class=\"es4\">{$col}</span>&lt;/td&gt;\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$col</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$rows</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;tr&gt;'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$cols</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$col</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;td&gt;'</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$key</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'&lt;/td&gt;'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$col</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;/tr&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$html</span> <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"re0\">$html</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(load \"@lib/xhtml.l\")<br/>\u00a0<br/>(&lt;table&gt; NIL NIL '(NIL (NIL \"X\") (NIL \"Y\") (NIL \"Z\"))<br/>   (for N 3<br/>      (&lt;row&gt; NIL N 124 456 789) ) )</pre>"}, {"lang": "PL/I", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Create an HTML table.  6/2011  */<br/>\u00a0<br/>create: procedure options (main);<br/>\u00a0<br/>\u00a0<br/>create_table: procedure (headings, table_contents);<br/>\u00a0<br/>   declare headings(*) character (10) varying;<br/>   declare table_contents(*, *) fixed;<br/>   declare (i, row, col) fixed;<br/>\u00a0<br/>   put skip edit ('&lt;table&gt;') (a);<br/>   /* Headings. */<br/>   put skip edit ('&lt;tr&gt;&lt;th&gt;&lt;/th&gt; ') (a);<br/>                               /* For an empty column heading */<br/>   do i = 1 to hbound(headings);<br/>      put edit ('&lt;th&gt;', headings(i), '&lt;/th&gt; ' ) (a);<br/>   end;<br/>   put edit ('&lt;/tr&gt;') (a);<br/>\u00a0<br/>   /* Table contents. */<br/>\u00a0<br/>   do row = 1 to hbound(table_contents, 1);<br/>      /* row number */<br/>      put skip edit ('&lt;tr&gt;&lt;td&gt;', row, '&lt;/td&gt; ') (a);<br/>      /* row contents */<br/>      do col = 1 to hbound(table_contents, 2);<br/>         put edit ('&lt;td&gt;', table_contents(row, col), '&lt;/td&gt; ' ) (a);<br/>      end;<br/>      put edit ('&lt;/tr&gt;') (a);<br/>   end;<br/>   put skip edit ('&lt;/table&gt;' ) (a);<br/>end create_table;<br/>\u00a0<br/>   declare headings (3) character (1) static initial ('X', 'Y', 'Z');<br/>\u00a0<br/>   declare table_contents(3, 3) fixed static initial (<br/>      4, -3, 8,<br/>      7, 2, -6,<br/>      11, 1, 15);<br/>\u00a0<br/>   call create_table (headings, table_contents);<br/>\u00a0<br/>end create;</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\"># Converts Microsoft .NET Framework objects into HTML that can be displayed in a Web browser.</span><br/><span class=\"kw1\">ConvertTo-Html</span> <span class=\"kw5\">-inputobject</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Date</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Create a PowerShell object using a HashTable</span><br/><span class=\"re0\">$object</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        <span class=\"st0\">'A'</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>        <span class=\"st0\">'B'</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>        <span class=\"st0\">'C'</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$object</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ConvertTo-Html</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/><span class=\"kw1\">def</span> rand9999<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">random</span>.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> tag<span class=\"br0\">(</span>attr<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> **kwargs<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> tag<span class=\"sy0\">,</span> txt <span class=\"kw1\">in</span> kwargs.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'&lt;{tag}{attr}&gt;{txt}&lt;/{tag}&gt;'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>**<span class=\"kw2\">locals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    header <span class=\"sy0\">=</span> tag<span class=\"br0\">(</span>tr<span class=\"sy0\">=</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>tag<span class=\"br0\">(</span>th<span class=\"sy0\">=</span>txt<span class=\"br0\">)</span> <span class=\"kw1\">for</span> txt <span class=\"kw1\">in</span> <span class=\"st0\">',X,Y,Z'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>    rows <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>tag<span class=\"br0\">(</span>tr<span class=\"sy0\">=</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>tag<span class=\"br0\">(</span><span class=\"st0\">' style=\"font-weight: bold;\"'</span><span class=\"sy0\">,</span> td<span class=\"sy0\">=</span>i<span class=\"br0\">)</span><br/>                                    + <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>tag<span class=\"br0\">(</span>td<span class=\"sy0\">=</span>rand9999<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                              <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    table <span class=\"sy0\">=</span> tag<span class=\"br0\">(</span>table<span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> + header + rows + <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>table<span class=\"br0\">)</span></pre>"}, {"lang": "PureBasic", "loc": 42, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/>Title.s<span class=\"sy0\">=</span><span class=\"st0\">\"Create an HTML table\"</span><br/>\u00a0<br/>head.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>head.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;\"</span><span class=\"sy0\">+</span>Title.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>tablehead.s<br/>tablehead.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;table border=1 cellpadding=10 cellspacing=0&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>tablehead.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>index<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>tablebody.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/><span class=\"kw1\">for</span> row<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>tablebody.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/th&gt;\"</span><br/><span class=\"kw1\">for</span> col<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span><br/>tablebody.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;td align=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"right\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">9999</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/td&gt;\"</span><br/><span class=\"kw1\">next</span> <br/>tablebody.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> <br/>\u00a0<br/>tablefoot.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>tablefoot.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>foot.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>foot.s<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>FileName.s<span class=\"sy0\">=</span><span class=\"st0\">\"Create_an_HTML_table.html\"</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">CreateFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,FileName.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,head.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,tablehead.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,tablebody.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,tablefoot.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,foot.s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Debug</span> <span class=\"st0\">\"Not WriteString\u00a0:\"</span><span class=\"sy0\">+</span>FileName.s<br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"co1\">; RunProgram(FileName.s)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require xml)<br/>\u00a0<br/>(define xexpr<br/>  `(html<br/>    (head)<br/>    (body<br/>     (table<br/>      (tr (td) (td \"X\") (td \"Y\") (td \"Z\"))<br/>      ,@(for/list ([i (in-range 1 4)])<br/>          `(tr (td ,(~a i))<br/>               (td ,(~a (random 10000)))<br/>               (td ,(~a (random 10000)))<br/>               (td ,(~a (random 10000)))))))))<br/>\u00a0<br/>(display-xml/content (xexpr-&gt;xml xexpr))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 18, "block": "<pre class=\"text highlighted_source\">import IO;<br/>import util::Math;<br/>\u00a0<br/>str html(str title, str content) = item(\"html\", item(\"title\", title) + item(\"body\", content));<br/>str item(str op, str content) = \"\\&lt;&lt;op&gt;\\&gt;&lt;content&gt;\\&lt;/&lt;op&gt;\\&gt;\";<br/>str table(str content) = item(\"table border=\\\"0\\\"\", content);<br/>str tr(str content) = item(\"tr\", content);<br/>str td(str content) = item(\"td\", content);<br/>\u00a0<br/>public str generateTable(int rows){<br/>\tint i(){return arbInt(10000);};<br/>\trows = (tr(td(\"\")+td(\"X\")+td(\"Y\")+td(\"Z\")) <br/>\t\t\t| it + tr(td(\"&lt;x&gt;\")+td(\"&lt;i()&gt;\")+td(\"&lt;i()&gt;\")+td(\"&lt;i()&gt;\"))<br/>\t\t\t| x &lt;- [1..rows]);<br/>\twriteFile(|file:///location|, <br/>\t           html(\"Rosetta Code Table\", table(rows)));<br/>\treturn \"written\";<br/>}</pre>"}, {"lang": "Retro", "loc": 13, "block": "<pre class=\"text highlighted_source\">needs casket::html'<br/>with casket::html'<br/>\u00a0<br/>: rnd ( -$ ) random 1000 mod toString\u00a0;<br/>\u00a0<br/>[ [ [     ] td [ \"x\" ] td [ \"y\" ] td [ \"z\" ] td ] tr<br/>  [ [ \"1\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>  [ [ \"2\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>  [ [ \"3\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>  [ [ \"4\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>  [ [ \"5\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>  [ [ \"6\" ] td [ rnd ] td [ rnd ] td [ rnd ] td ] tr<br/>] table</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  creates (and displays)  an  HTML table of five rows  and  three columns.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> rows <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> rows==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> rows==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> rows=<span class=\"nu0\">5</span>            <span class=\"coMULTI\">/*no ROWS specified?  Then use default.*/</span><br/>      cols = <span class=\"nu0\">3</span>                                   <span class=\"coMULTI\">/*specify three columns for the table. */</span><br/>   maxRand = <span class=\"nu0\">9999</span>                                <span class=\"coMULTI\">/*4-digit numbers, allows negative nums*/</span><br/>headerInfo = <span class=\"st0\">'X Y Z'</span>                             <span class=\"coMULTI\">/*specifify column header information. */</span><br/>      oFID = <span class=\"st0\">'a_table.html'</span>                      <span class=\"coMULTI\">/*name of the  output  file.           */</span><br/>         w = <span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/*number of writes to the output file. */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;html&gt;\"</span><br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;head&gt;&lt;/head&gt;\"</span><br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;body&gt;\"</span><br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;table border=5  cellpadding=20  cellspace=0&gt;\"</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> r=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> rows                                <span class=\"coMULTI\">/* [\u2193]  handle row  0 as being special.*/</span><br/>  <span class=\"kw1\">if</span> r==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"</span>        <span class=\"coMULTI\">/*when it's     the zeroth row.        */</span><br/>           <span class=\"kw3\">else</span> <span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;\"</span>  r  <span class=\"st0\">\"&lt;/th&gt;\"</span> <span class=\"coMULTI\">/*  \"    \"  not  \"    \"     \"          */</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols                           <span class=\"coMULTI\">/* [\u2193]  for row 0,  add the header info*/</span><br/>      <span class=\"kw1\">if</span> r==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;th&gt;\"</span>   <span class=\"kw6\">word</span><span class=\"br0\">(</span>headerInfo,c<span class=\"br0\">)</span>   <span class=\"st0\">\"&lt;/th&gt;\"</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;td align=right&gt;\"</span>    rnd<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"st0\">\"&lt;/td&gt;\"</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;/body&gt;\"</span><br/><span class=\"kw1\">call</span> wrt  <span class=\"st0\">\"&lt;/html&gt;\"</span><br/><span class=\"kw1\">say</span>;         <span class=\"kw1\">say</span>  w    <span class=\"st0\">' records were written to the output file: '</span>   oFID<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>rnd: <span class=\"kw1\">return</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,maxRand<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>-maxRand,<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*RANDOM doesn't generate negative ints*/</span><br/>wrt: <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> oFID,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u25ba'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   w=w+<span class=\"nu0\">1</span>;    <span class=\"kw1\">return</span>          <span class=\"coMULTI\">/*write.*/</span></pre>"}, {"lang": "Ring", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project: Create an HTML table<br/>\u00a0<br/>load \"stdlib.ring\"<br/>\u00a0<br/>str = \"\"<br/>ncols = 3<br/>nrows = 4 <br/>\u00a0<br/>str = str + \"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\" + windowsnl()<br/>str = str + \"&lt;table border=1 cellpadding=10 cellspacing=0&gt;\" + windowsnl()<br/>\u00a0<br/>for row = 0 to nrows<br/>     if row = 0<br/>        str = str + \"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;\"<br/>    else<br/>        str = str + \"&lt;tr&gt;&lt;th&gt;\" + row + \"&lt;/th&gt;\" <br/>    ok<br/>    for col = 1 to ncols<br/>         if row = 0 <br/>            str = str + \"&lt;th&gt;\" + char(87 + col) + \"&lt;/th&gt;\"<br/>         else<br/>            str = str + \"&lt;td align=\" + '\"right\"' + \"&gt;\" + random(9999) + \"&lt;/td&gt;\" <br/>         ok<br/>    next <br/>    str = str + windowsnl() + \"&lt;/tr&gt;\" +windowsnl()<br/>next<br/>\u00a0<br/>str = str + \"&lt;/table&gt;\" + windowsnl()<br/>str = str + \"&lt;/body&gt;&lt;/html&gt;\" + windowsnl()<br/>\u00a0<br/>remove(\"temp.htm\")<br/>write(\"temp.htm\",str)<br/>see str + nl<br/>systemcmd(\"temp.htm\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> r<br/>  <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>STDOUT <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">tap</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>html<span class=\"sy0\">|</span><br/>  html <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"&lt;table&gt;\"</span><br/>  <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">'X'</span>, <span class=\"st0\">'Y'</span>, <span class=\"st0\">'Z'</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>r ,r ,r<span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>r ,r ,r<span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>r ,r ,r<span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>r ,r ,r<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"br0\">]</span>.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row, index<span class=\"sy0\">|</span><br/>    html <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><br/>    html <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"&lt;td&gt;#{index &gt; 0\u00a0? index\u00a0: nil }&lt;/td&gt;\"</span><br/>    html <span class=\"sy0\">&lt;&lt;</span> row.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> <span class=\"st0\">\"&lt;td&gt;#{e}&lt;/td&gt;\"</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    html <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  html <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">html \"&lt;table border=1&gt;&lt;tr align=center&gt;&lt;td&gt;Row&lt;/td&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;Z&lt;/td&gt;&lt;/tr&gt;\"<br/>for i = 1 to 5<br/>  html \"&lt;tr align=right&gt;\"<br/>  for j = 1 to 4<br/>    if j = 1 then html \"&lt;td&gt;\";i;\"&lt;/td&gt;\" else html \"&lt;td&gt;\";i;j;\"&lt;/td&gt;\"<br/>  next j<br/>html \"&lt;/tr&gt;\"<br/>next i<br/>html \"&lt;/table&gt;\"</pre>"}, {"lang": "Rust", "loc": 26, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>\u00a0<br/>fn random_cell&lt;R: Rng&gt;(rng: &amp;mut R) -&gt; u32 {<br/>    // Anything between 0 and 10_000 (exclusive) has 4 digits or fewer. Using `gen_range::&lt;u32&gt;`<br/>    // is faster for smaller RNGs.  Because the parameters are constant, the compiler can do all<br/>    // the range construction at compile time, removing the need for<br/>    // `rand::distributions::range::Range`<br/>    rng.gen_range(0, 10_000)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut rng = rand::thread_rng(); // Cache the RNG for reuse<br/>\u00a0<br/>    println!(\"&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;Z&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;\");<br/>\u00a0<br/>    for row in 0..3 {<br/>        let x = random_cell(&amp;mut rng);<br/>        let y = random_cell(&amp;mut rng);<br/>        let z = random_cell(&amp;mut rng);<br/>        println!(\"&lt;tr&gt;&lt;th&gt;{}&lt;/th&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;\", row, x, y, z);<br/>    }<br/>\u00a0<br/>    println!(\"&lt;/table&gt;\");<br/>}</pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TableGenerator <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"st0\">\"X\"</span>, <span class=\"st0\">\"Y\"</span>, <span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">23</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">13</span>, <span class=\"nu0\">32</span>, <span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generateTable<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Any<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">&lt;</span>table<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">{</span>data.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>row, rownum<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rownum <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> Nil <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> rownum<span class=\"br0\">)</span> +<span class=\"sy0\">:</span> row<span class=\"br0\">}</span>.<br/>      <span class=\"me1\">map</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span>tr<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">{</span>row.<span class=\"me1\">map</span><span class=\"br0\">(</span>cell <span class=\"sy0\">=&gt;</span><br/>        <span class=\"sy0\">&lt;</span>td<span class=\"sy0\">&gt;</span><br/>          <span class=\"br0\">{</span>cell<span class=\"br0\">}</span><br/>        <span class=\"sy0\">&lt;</span>/td<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;</span>/tr<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;</span>/table<span class=\"sy0\">&gt;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>generateTable<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> table #<span class=\"br0\">(</span><br/>                #<span class=\"br0\">(</span><span class=\"st0\">\"\"</span> <span class=\"st0\">\"X\"</span> <span class=\"st0\">\"Y\"</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><br/>                #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                #<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                #<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> r <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> r <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> c <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> c <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> table r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;th&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> table r<span class=\"br0\">)</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 18, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: line is 0;<br/>    var integer: column is 0;<br/>  begin<br/>    writeln(\"&lt;table style=\\\"text-align:center; border: 1px solid\\\"&gt;\");<br/>    writeln(\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\");<br/>    for line range 1 to 3 do<br/>      write(\"&lt;tr&gt;&lt;th&gt;\" &lt;&amp; line &lt;&amp; \"&lt;/th&gt;\");<br/>      for column range 1 to 3 do<br/>        write(\"&lt;td&gt;\" &lt;&amp; rand(0, 9999) &lt;&amp; \"&lt;/td&gt;\");<br/>      end for;<br/>      writeln(\"&lt;/tr&gt;\");<br/>    end for;<br/>    writeln(\"&lt;/table&gt;\")<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 50, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> HTML <span class=\"br0\">{</span><br/>    method _attr<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        h.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> <span class=\"sy0\">%</span>Q<span class=\"st0\">' #{k}=\"#{h{k}}\"'</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method _tag<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h, name, value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"&lt;#{name}\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">self</span>._attr<span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'&gt;'</span> <span class=\"sy0\">+</span> value <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;/#{name}&gt;\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method table<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h, <span class=\"sy0\">*</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">self</span>._tag<span class=\"br0\">(</span>h, <span class=\"st0\">'table'</span>, data.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    method table<span class=\"br0\">(</span><span class=\"sy0\">*</span>data<span class=\"br0\">)</span>         <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">table</span><span class=\"br0\">(</span><span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, data...<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Table <span class=\"sy0\">&lt;</span> HTML <span class=\"br0\">{</span><br/>    method th<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h, value<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">self</span>._tag<span class=\"br0\">(</span>h, <span class=\"st0\">'th'</span>, value<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    method th<span class=\"br0\">(</span>value<span class=\"br0\">)</span>         <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">th</span><span class=\"br0\">(</span><span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, value<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    method tr<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h, <span class=\"sy0\">*</span>rows<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">self</span>._tag<span class=\"br0\">(</span>h, <span class=\"st0\">'tr'</span>, rows.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    method tr<span class=\"br0\">(</span><span class=\"sy0\">*</span>rows<span class=\"br0\">)</span>         <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, rows...<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    method td<span class=\"br0\">(</span><span class=\"kw4\">Hash</span> h, value<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">self</span>._tag<span class=\"br0\">(</span>h, <span class=\"st0\">'td'</span>, value<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    method td<span class=\"br0\">(</span>value<span class=\"br0\">)</span>         <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">td</span><span class=\"br0\">(</span><span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, value<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var header = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nbsp; X Y Z<span class=\"br0\">)</span>;<br/>var rows = <span class=\"nu0\">5</span>;<br/>\u00a0<br/>var html = HTML.<span class=\"me1\">new</span>;<br/>var table = Table.<span class=\"me1\">new</span>;<br/>\u00a0<br/>say html.<span class=\"me1\">table</span><span class=\"br0\">(</span><br/>    <span class=\"co1\"># attributes</span><br/>    <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><br/>        cellspacing <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span>,<br/>        style <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"text-align:right; border: 1px solid;\"</span><br/>     <span class=\"br0\">)</span>,<br/>\u00a0<br/>    <span class=\"co1\"># header</span><br/>    table.<span class=\"me1\">tr</span><span class=\"br0\">(</span>header.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>elem<span class=\"sy0\">|</span> table.<span class=\"me1\">th</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span><span class=\"br0\">}</span>...<span class=\"br0\">)</span>,<br/>\u00a0<br/>    <span class=\"co1\"># rows</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">rows</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        table.<span class=\"me1\">tr</span><span class=\"br0\">(</span><br/>            table.<span class=\"me1\">td</span><span class=\"br0\">(</span>:<span class=\"br0\">(</span>align <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'right'</span><span class=\"br0\">)</span>, i<span class=\"br0\">)</span>,<br/>            <span class=\"br0\">(</span>header.<span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span><br/>                table.<span class=\"me1\">td</span><span class=\"br0\">(</span><span class=\"kw4\">Hash</span><span class=\"br0\">(</span>align <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'right'</span><span class=\"br0\">)</span>, <span class=\"nu0\">10000</span>.<span class=\"kw3\">rand</span>.<span class=\"me1\">int</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span>...<br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>...<br/><span class=\"br0\">)</span>;</pre>"}, {"lang": "Standard ML", "loc": 34, "block": "<pre class=\"text highlighted_source\">(*<br/> * val mkHtmlTable\u00a0: ('a list * 'b list) -&gt; ('a -&gt; string * 'b -&gt; string) <br/> * \t\t\t-&gt; (('a * 'b) -&gt; string) -&gt; string<br/> * The int list is list of colums, the function returns the values<br/> * at a given colum and row.<br/> * returns the HTML code of the generated table.<br/> *)<br/>fun mkHtmlTable (columns, rows) (rowToStr, colToStr) values =<br/>\tlet<br/>\t  val text = ref \"&lt;table border=1 cellpadding=10 cellspacing=0&gt;\\n&lt;tr&gt;&lt;td&gt;&lt;/td&gt;\"<br/>\tin<br/>\t  (* Add headers *)<br/>\t  map (fn colum =&gt; text\u00a0:=\u00a0!text ^ \"&lt;th&gt;\" ^ (colToStr colum) ^ \"&lt;/th&gt;\") columns;<br/>\u00a0<br/>\t  text\u00a0:=\u00a0!text ^ \"&lt;/tr&gt;\\n\";<br/>\t  (* Add data rows *)<br/>\t  map (fn row =&gt;<br/>\t\t(* row name *)<br/>\t  \t(text\u00a0:=\u00a0!text ^ \"&lt;tr&gt;&lt;th&gt;\" ^ (rowToStr row) ^ \"&lt;/th&gt;\";<br/>\t\t(* data *)<br/>\t\t map (fn col =&gt; text\u00a0:=\u00a0!text ^ \"&lt;td&gt;\" ^ (values (row, col)) ^ \"&lt;/td&gt;\") columns;<br/>\t\t text\u00a0:=\u00a0!text ^ \"&lt;/tr&gt;\\n\")<br/>\t      ) rows;<br/>\t \u00a0!text ^ \"&lt;/table&gt;\"<br/>\tend<br/>\u00a0<br/>fun mkHtmlWithBody (title, body) = \"&lt;html&gt;\\n&lt;head&gt;\\n&lt;title&gt;\" ^ title ^ \"&lt;/title&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n\" ^ body ^ \"\\n&lt;/body&gt;\\n&lt;/html&gt;\\n\"<br/>\u00a0<br/>fun samplePage () = mkHtmlWithBody (\"Sample Page\",<br/>\t\t\tmkHtmlTable ([1.0,2.0,3.0,4.0,5.0], [1.0,2.0,3.0,4.0])<br/>\t\t\t            (Real.toString, Real.toString)<br/>\t\t\t\t    (fn (a, b) =&gt; Real.toString (Math.pow (a, b))))<br/>\u00a0<br/>val _ = print (samplePage ())</pre>"}, {"lang": "Stata", "loc": 37, "block": "<pre class=\"text highlighted_source\">program mat2html<br/>local nr = rowsof(`1')<br/>local nc = colsof(`1')<br/>local rn `: rownames `1''<br/>local cn `: colnames `1''<br/>tempname f<br/>qui file open `f' using `2', write text replace<br/>file write `f' \"&lt;!doctype html&gt;\" _n<br/>file write `f' \"&lt;html&gt;\" _n<br/>file write `f' \"&lt;head&gt;\" _n<br/>file write `f' `\"&lt;meta charset=\"UTF-8\"&gt;\"' _n<br/>file write `f' \"&lt;/head&gt;\" _n<br/>file write `f' \"&lt;body&gt;\" _n<br/>file write `f' `\"&lt;table border=\"1\"&gt;\"' _n<br/>* write column names<br/>file write `f' \"&lt;tr&gt;\" _n<br/>file write `f' \"&lt;td&gt;&lt;/td&gt;\" _n<br/>forv j = 1/`nc' {<br/>\tlocal s `: word `j' of `cn''<br/>\tfile write `f' `\"&lt;td&gt;`s'&lt;/td&gt;\"' _n<br/>}<br/>file write `f' \"&lt;/tr&gt;\" _n<br/>* write row names &amp; data<br/>forv i = 1/`nr' {<br/>\tfile write `f' \"&lt;tr&gt;\" _n<br/>\tlocal s `: word `i' of `rn''<br/>\tfile write `f' `\"&lt;td&gt;`s'&lt;/td&gt;\"' _n<br/>\tforv j = 1/`nc' {<br/>\t\tfile write `f' `\"&lt;td&gt;`=el(`1',`i',`j')'&lt;/td&gt;\"' _n<br/>\t}<br/>\tfile write `f' \"&lt;/tr&gt;\" _n<br/>}<br/>file write `f' \"&lt;/table&gt;\" _n<br/>file write `f' \"&lt;/body&gt;\" _n<br/>file write `f' \"&lt;/html&gt;\" _n<br/>file close `f'<br/>end</pre>"}, {"lang": "Tcl", "loc": 41, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Make ourselves a very simple templating lib; just two commands</span><br/><span class=\"kw1\">proc</span> TAG <span class=\"br0\">{</span>name args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> body <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> result <span class=\"st0\">\"&lt;$name\"</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>t v<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$args</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">append</span> result <span class=\"st0\">\" $t=<span class=\"es0\">\\\"</span>\"</span> <span class=\"re0\">$v</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">append</span> result <span class=\"st0\">\"&gt;\"</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw2\">subst</span> <span class=\"re0\">$body</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"st0\">\"&lt;/$name&gt;\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> FOREACH <span class=\"br0\">{</span>var lst str<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$var</span> v<br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw2\">subst</span> <span class=\"re0\">$str</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> v <span class=\"re0\">$lst</span> <span class=\"br0\">{</span><span class=\"kw2\">append</span> result <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Build the data we're displaying</span><br/><span class=\"kw1\">set</span> titles <span class=\"br0\">{</span><span class=\"st0\">\"\"</span> <span class=\"st0\">\"X\"</span> <span class=\"st0\">\"Y\"</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> data <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Inspired by the Go solution, but with extra arbitrary digits to show 4-char wide values</span><br/>    <span class=\"kw2\">lappend</span> data <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">3010</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span>+<span class=\"nu0\">1298</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">2579</span>+<span class=\"nu0\">2182</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Write the table to standard out</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>TAG table border <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>TAG tr bgcolor <span class=\"co1\">#f0f0f0 {</span><br/>\t<span class=\"br0\">[</span>FOREACH head <span class=\"re0\">$titles</span> <span class=\"br0\">{</span><br/>\t    <span class=\"br0\">[</span>TAG th <span class=\"br0\">{</span><span class=\"re0\">$head</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>FOREACH row <span class=\"re0\">$data</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">[</span>TAG tr bgcolor <span class=\"co1\">#ffffff {</span><br/>\t    <span class=\"br0\">[</span>FOREACH col <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">[</span>TAG td align right <span class=\"br0\">{</span><span class=\"re0\">$col</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TUSCRIPT", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>tablefile=\"table.html\"<br/>ERROR/STOP CREATE (tablefile,FDF-o,-std-)<br/>ACCESS d: WRITE/ERASE/RECORDS/utf8 $tablefile s,tablecontent<br/>tablecontent=*<br/>WRITE d \"&lt;!DOCTYPE html system&gt;\"<br/>WRITE d \"&lt;html&gt;&lt;head&gt;&lt;title&gt;create html table&lt;/title&gt;&lt;/head&gt;\"<br/>WRITE d \"&lt;body&gt;&lt;table&gt;&lt;thead align='right'&gt;\"<br/>WRITE d \"&lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;x&lt;/th&gt;&lt;th&gt;y&lt;/th&gt;&lt;th&gt;z&lt;/th&gt;&lt;/tr&gt;\"<br/>WRITE d \"&lt;/thead&gt;\"<br/>WRITE d \"&lt;tbody align='right'&gt;\"<br/>LOOP n=1,5<br/>x=RANDOM_NUMBERS (1,9999,1)<br/>y=RANDOM_NUMBERS (1,9999,1)<br/>z=RANDOM_NUMBERS (1,9999,1)<br/>WRITE d \"&lt;tr&gt;&lt;td&gt;{n}&lt;/td&gt;&lt;td&gt;{x}&lt;/td&gt;&lt;td&gt;{y}&lt;/td&gt;&lt;td&gt;{z}&lt;/td&gt;&lt;/tr&gt;\"<br/>ENDLOOP<br/>WRITE d \"&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\"<br/>ENDACCESS d<br/>BROWSE $tablefile<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 38, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> emit_table <span class=\"br0\">{</span><br/>    nameref <span class=\"re2\">d</span>=<span class=\"re4\">$1</span><br/>    <span class=\"kw3\">typeset</span> <span class=\"re5\">-i</span> <span class=\"re2\">idx</span>=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;table&gt;\"</span><br/>    emit_row th <span class=\"st0\">\"\"</span> <span class=\"st0\">\"<span class=\"es3\">${d[idx++][@]}</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>\u00a0; idx<span class=\"sy0\">&lt;</span><span class=\"co1\">${#d[@]}</span>; idx++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        emit_row td <span class=\"re1\">$idx</span> <span class=\"st0\">\"<span class=\"es3\">${d[idx][@]}</span>\"</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> emit_row <span class=\"br0\">{</span><br/>    <span class=\"kw3\">typeset</span> <span class=\"re2\">tag</span>=<span class=\"re4\">$1</span>; <span class=\"kw3\">shift</span><br/>    <span class=\"kw3\">typeset</span> <span class=\"re2\">row</span>=<span class=\"st0\">\"&lt;tr&gt;\"</span><br/>    <span class=\"kw1\">for</span> elem; <span class=\"kw1\">do</span><br/>        row+=$<span class=\"br0\">(</span><span class=\"kw3\">printf</span> <span class=\"st0\">\"&lt;%s&gt;%s&lt;/%s&gt;\"</span> <span class=\"st0\">\"<span class=\"es2\">$tag</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$elem</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${tag## *}</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>    row+=<span class=\"st0\">\"&lt;/tr&gt;\"</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$row</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> addrow <span class=\"br0\">{</span><br/>    nameref <span class=\"re2\">d</span>=<span class=\"re4\">$1</span><br/>    <span class=\"kw3\">typeset</span> <span class=\"re2\">n</span>=<span class=\"co1\">${#d[@]}</span><br/>    <span class=\"kw3\">typeset</span> <span class=\"re5\">-i</span> i<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span><span class=\"re4\">$2</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        d<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re1\">$RANDOM</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10000</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">n</span>=<span class=\"nu0\">3</span><br/><span class=\"kw3\">typeset</span> <span class=\"re5\">-a</span> data<br/>data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=<span class=\"br0\">(</span><span class=\"st0\">\"X\"</span> <span class=\"st0\">\"Y\"</span> <span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">}</span>; <span class=\"kw1\">do</span><br/>    addrow data <span class=\"re1\">$n</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/>emit_table data</pre>"}, {"lang": "Ursa", "loc": 18, "block": "<pre class=\"text highlighted_source\">decl ursa.util.random random<br/>\u00a0<br/>out \"&lt;table&gt;\" endl console<br/>\u00a0<br/># generate header<br/>out \"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\" endl console<br/>\u00a0<br/># generate five rows<br/>decl int i<br/>for (set i 1) (&lt; i 6) (inc i)<br/>        out \"&lt;tr&gt;&lt;td style=\\\"font-weight: bold;\\\"&gt;\" i \"&lt;/td&gt;\" console<br/>        out \"&lt;td&gt;\" (int (+ 1000 (random.getint 8999))) \"&lt;/td&gt;\" console<br/>        out \"&lt;td&gt;\" (int (+ 1000 (random.getint 8999))) \"&lt;/td&gt;\" console<br/>        out \"&lt;td&gt;\" (int (+ 1000 (random.getint 8999))) \"&lt;/td&gt;\" console<br/>        out \"&lt;/tr&gt;\" endl console<br/>end for<br/>\u00a0<br/>out \"&lt;/table&gt;\" endl console</pre>"}, {"lang": "VBA", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Sub BuildHTMLTable()<br/>'simple HTML table, represented as a string matrix \"cells\"<br/>Const nRows = 6<br/>Const nCols = 4<br/>Dim cells(1 To nRows, 1 To nCols) As String<br/>Dim HTML As String 'the HTML table<br/>Dim temp As String<br/>Dim attr As String<br/>\u00a0<br/>' fill table<br/>' first row with titles<br/>cells(1, 1) = \"\"<br/>cells(1, 2) = \"X\"<br/>cells(1, 3) = \"Y\"<br/>cells(1, 4) = \"Z\"<br/>'next rows with index &amp; random numbers<br/>For i = 2 To nRows<br/>  cells(i, 1) = Format$(i - 1)<br/>  For j = 2 To nCols<br/>    cells(i, j) = Format$(Int(Rnd() * 10000))<br/>  Next j<br/>Next i<br/>\u00a0<br/>'build the HTML<br/>HTML = \"\"<br/>For i = 1 To nRows<br/>  temp = \"\"<br/>  'first row as header row<br/>  If i = 1 Then attr = \"th\" Else attr = \"td\"<br/>  For j = 1 To nCols<br/>    temp = temp &amp; HTMLWrap(cells(i, j), attr)<br/>  Next j<br/>  HTML = HTML &amp; HTMLWrap(temp, \"tr\")<br/>Next i<br/>HTML = HTMLWrap(HTML, \"table\", \"style=\"\"text-align:center; border: 1px solid\"\"\")<br/>Debug.Print HTML<br/>End Sub<br/>\u00a0<br/>Public Function HTMLWrap(s As String, tag As String, ParamArray attributes()) As String<br/>  'returns string s wrapped in HTML tag with optional \"attribute=value\" strings<br/>  'ex.: HTMLWrap(\"Link text\", \"a\", \"href=\"\"http://www.somesite.org\"\"\")<br/>  'returns: &lt;a href=\"http://www.somesite.org\"&gt;Link text&lt;/a&gt;<br/>\u00a0<br/>  Dim sOpenTag As String<br/>  Dim sClosingTag As String<br/>\u00a0<br/>  sOpenTag = \"&lt;\" &amp; tag<br/>  For Each attr In attributes<br/>    sOpenTag = sOpenTag &amp; \" \" &amp; attr<br/>  Next<br/>  sOpenTag = sOpenTag &amp; \"&gt;\"<br/>  sClosingTag = \"&lt;/\" &amp; tag &amp; \"&gt;\"<br/>  HTMLWrap = sOpenTag &amp; s &amp; sClosingTag<br/>End Function<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 42, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>\u00a0<br/><span class=\"co1\">'Open the input csv file for reading. The file is in the same folder as the script.<br/></span><span class=\"kw4\">Set</span> objInFile = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp;_<br/>\t<span class=\"st0\">\"\\in.csv\"</span>,1)<br/>\u00a0<br/><span class=\"co1\">'Create the output html file.<br/></span><span class=\"kw4\">Set</span> objOutHTML = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp;_<br/>\t<span class=\"st0\">\"\\out.html\"</span>,2,<span class=\"kw5\">True</span>)<br/>\u00a0<br/><span class=\"co1\">'Write the html opening tags.<br/></span>objOutHTML.Write <span class=\"st0\">\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\"</span> &amp; vbCrLf<br/>\u00a0<br/><span class=\"co1\">'Declare table properties.<br/></span>objOutHTML.Write <span class=\"st0\">\"&lt;table border=1 cellpadding=10 cellspacing=0&gt;\"</span> &amp; vbCrLf<br/>\u00a0<br/><span class=\"co1\">'Write column headers.<br/></span>objOutHTML.Write <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;/tr&gt;\"</span> &amp; vbCrLf<br/>\u00a0<br/><span class=\"co1\">'Go through each line of the input csv file and write to the html output file.<br/></span>n = 1<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> objInFile.AtEndOfStream<br/>\t<span class=\"kw4\">line</span> = objInFile.ReadLine<br/>\t<span class=\"kw3\">If</span> Len(<span class=\"kw4\">line</span>) &gt; 0 <span class=\"kw3\">Then</span><br/>\t\ttoken = Split(<span class=\"kw4\">line</span>,<span class=\"st0\">\",\"</span>)<br/>\t\tobjOutHTML.Write <span class=\"st0\">\"&lt;tr align=\"</span><span class=\"st0\">\"right\"</span><span class=\"st0\">\"&gt;&lt;td&gt;\"</span> &amp; n &amp; <span class=\"st0\">\"&lt;/td&gt;\"</span><br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(token)<br/>\t\t\tobjOutHTML.Write <span class=\"st0\">\"&lt;td&gt;\"</span> &amp; token(i) &amp; <span class=\"st0\">\"&lt;/td&gt;\"</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tobjOutHTML.Write <span class=\"st0\">\"&lt;/tr&gt;\"</span> &amp; vbCrLf<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\tn = n + 1<br/><span class=\"kw3\">Loop</span><br/>\u00a0<br/><span class=\"co1\">'Write the html closing tags.<br/></span>objOutHTML.Write <span class=\"st0\">\"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\"</span><br/>\u00a0<br/>objInFile.<span class=\"kw3\">Close</span><br/>objOutHTML.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objFSO = <span class=\"kw5\">Nothing</span><br/>\u00a0</pre>"}, {"lang": "XSLT", "loc": 58, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;?xml</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">encoding</span>=<span class=\"st0\">\"UTF-8\"</span><span class=\"re2\">?&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span><span class=\"re2\">&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:output</span> <span class=\"re0\">method</span>=<span class=\"st0\">\"html\"</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"4.01\"</span> <span class=\"re0\">indent</span>=<span class=\"st0\">\"yes\"</span><span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc-1\">&lt;!-- Most XSLT processors have some way to supply a different value for this parameter --&gt;</span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"column-count\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"3\"</span><span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;html<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;head<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;title<span class=\"re2\">&gt;</span></span></span>Rosetta Code: Create an HTML table (XSLT)<span class=\"sc3\"><span class=\"re1\">&lt;/title<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/head<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;body<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span><span class=\"re2\">/&gt;</span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/body<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/html<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:variable</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"values\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"/*/*\"</span><span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc-1\">&lt;!--</span><br/><span class=\"sc-1\">        Rendering HTML from XSLT is so basic as to be trivial. The trickier part of this transform is taking the</span><br/><span class=\"sc-1\">        single-column list of numbers in the input and folding it into multiple columns. A common strategy is to only</span><br/><span class=\"sc-1\">        apply templates to every Nth value in the list, but then to have that template pull in the skipped values to</span><br/><span class=\"sc-1\">        form a row.</span><br/><span class=\"sc-1\">    --&gt;</span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/numbers\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;table<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;tr<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;th</span><span class=\"re2\">/&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;th<span class=\"re2\">&gt;</span></span></span>X<span class=\"sc3\"><span class=\"re1\">&lt;/th<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;th<span class=\"re2\">&gt;</span></span></span>Y<span class=\"sc3\"><span class=\"re1\">&lt;/th<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;th<span class=\"re2\">&gt;</span></span></span>Z<span class=\"sc3\"><span class=\"re1\">&lt;/th<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/tr<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!--</span><br/><span class=\"sc-1\">                Here, we have the template applied to every Nth input element rather than every element. In XSLT,</span><br/><span class=\"sc-1\">                indices are 1-based, so the start index of every row mod N is 1.</span><br/><span class=\"sc-1\">            --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"number[position() mod $column-count = 1]\"</span><span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/table<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"number\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;tr<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;th<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"position()\"</span><span class=\"re2\">/&gt;</span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/th<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!--</span><br/><span class=\"sc-1\">                Here, we compensate for the skipping by including the skipped values in the processing for this value.</span><br/><span class=\"sc-1\">            --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:for-each</span> <span class=\"re0\">select</span>=<span class=\"st0\">\". | following-sibling::number[position() &amp;lt; $column-count]\"</span><span class=\"re2\">&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;td<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\".\"</span><span class=\"re2\">/&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;/td<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:for-each<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/tr<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">table:=0'|&lt;table style=\"text-align:center; border: 1px solid\"&gt;|<br/>         \"&lt;th&gt;&lt;/th&gt;&lt;th&gt;X&lt;/th&gt;&lt;th&gt;Y&lt;/th&gt;&lt;th&gt;Z&lt;/th&gt;&lt;tr&gt;\";<br/>table=Sink(table);<br/>foreach n in ([1..3]){<br/>   table.write(\"\\n   &lt;tr&gt;&lt;th&gt;\",n,\"&lt;/th&gt;\");<br/>   foreach n in (3){ table.write(\"&lt;td&gt;\",(0).random(10000),\"&lt;/td&gt;\"); }<br/>   table.write(\"&lt;/tr&gt;\");<br/>}<br/>table.write(\"\\n&lt;/table&gt;\\n\").close().print();</pre>"}]}