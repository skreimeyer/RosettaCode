{"task": "Perfect_shuffle", "blocks": [{"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> ada.<span class=\"me1\">text_io</span>;<span class=\"kw3\">use</span> ada.<span class=\"me1\">text_io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> perfect_shuffle <span class=\"kw1\">is</span><br/>  <span class=\"kw3\">function</span> count_shuffle <span class=\"br0\">(</span>half_size\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span><br/>    <span class=\"kw3\">subtype</span> index <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span> * half_size - <span class=\"nu0\">1</span>;<br/>    <span class=\"kw3\">subtype</span> index_that_move <span class=\"kw1\">is</span> index <span class=\"kw3\">range</span> index'first+<span class=\"nu0\">1</span>..<span class=\"me1\">index</span>'last-<span class=\"nu0\">1</span>;<br/>    <span class=\"kw3\">type</span> deck <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> index;<br/>    initial, d, next\u00a0: deck;<br/>    count\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> index <span class=\"kw1\">loop</span> initial <span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0:= i; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    d\u00a0:= initial;<br/>    <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> index_that_move <span class=\"kw1\">loop</span> <br/>        next <span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw1\">if</span> d <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> d<span class=\"br0\">(</span>i<span class=\"br0\">)</span>/<span class=\"nu0\">2</span> <span class=\"kw1\">else</span> d<span class=\"br0\">(</span>i<span class=\"br0\">)</span>/<span class=\"nu0\">2</span> + half_size<span class=\"br0\">)</span>; <br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;      <br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> next <span class=\"br0\">(</span>index_that_move<span class=\"br0\">)</span>= initial<span class=\"br0\">(</span>index_that_move<span class=\"br0\">)</span>;<br/>      d\u00a0:= next;<br/>      count\u00a0:= count + <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    <span class=\"kw1\">return</span> count;<br/>  <span class=\"kw1\">end</span> count_shuffle;<br/>  test\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10</span>_000<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> size <span class=\"kw3\">of</span> test <span class=\"kw1\">loop</span><br/>    put_line <span class=\"br0\">(</span><span class=\"st0\">\"For\"</span> &amp; size'img &amp; <span class=\"st0\">\" cards, there are \"</span>&amp; count_shuffle <span class=\"br0\">(</span>size / <span class=\"nu0\">2</span><span class=\"br0\">)</span>'img &amp; <span class=\"st0\">\" shuffles needed.\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> perfect_shuffle;</pre>"}, {"lang": "ALGOL 68", "loc": 58, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns an array of the specified length, initialised to an ascending sequence of integers #</span><br/><span class=\"kw4\">OP</span>   DECK <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> length <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> length <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> i <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># DECK #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># in-place shuffles the deck as per the task requirements #</span><br/><span class=\"coMULTI\"># LWB deck is assumed to be 1 #</span><br/><span class=\"kw4\">PROC</span> shuffle <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> deck <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> deck <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> left pos  <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> right pos <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> deck <span class=\"kw12\">OVER</span> 2 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">BY</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span><br/>             result<span class=\"br0\">[</span> left pos  <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> deck<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>             result<span class=\"br0\">[</span> right pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> deck<span class=\"br0\">[</span> i     <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>             left pos  <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>             right pos <span class=\"sy1\">+:=</span> 1<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> deck <span class=\"kw2\">DO</span> deck<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># SHUFFLE #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># compares two integer arrays for equality #</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> a <span class=\"sy1\">/=</span> <span class=\"kw8\">LWB</span> b <span class=\"kw16\">OR</span> <span class=\"kw8\">UPB</span> a <span class=\"sy1\">/=</span> <span class=\"kw8\">UPB</span> b<br/>     <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># the arrays have different bounds #</span><br/>         <span class=\"kw7\">FALSE</span><br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"kw3\">BOOL</span> result <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">WHILE</span> result <span class=\"sy1\">:=</span> a<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">=</span> b<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># = #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># compares two integer arrays for inequality #</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">/=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span> <span class=\"br0\">(</span> a <span class=\"sy1\">=</span> b <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the number of shuffles required to return a deck of the specified length #</span><br/><span class=\"coMULTI\"># back to its original state #</span><br/><span class=\"kw4\">PROC</span> count shuffles <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> length <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"br0\">[</span><span class=\"br0\">]</span>            <span class=\"kw3\">INT</span> original deck  <span class=\"sy1\">=</span> DECK length<span class=\"sy1\">;</span><br/>         <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> length <span class=\"br0\">]</span><span class=\"kw3\">INT</span> shuffled deck <span class=\"sy1\">:=</span> original deck<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span>   count         <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> shuffle<span class=\"br0\">(</span> shuffled deck <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>               shuffled deck <span class=\"sy1\">/=</span> original deck<br/>         <span class=\"kw2\">DO</span><br/>             count <span class=\"sy1\">+:=</span> 1<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         count<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># count shuffles #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the shuffling #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> lengths <span class=\"sy1\">=</span> <span class=\"br0\">(</span> 8<span class=\"sy1\">,</span> 24<span class=\"sy1\">,</span> 52<span class=\"sy1\">,</span> 100<span class=\"sy1\">,</span> 1020<span class=\"sy1\">,</span> 1024<span class=\"sy1\">,</span> 10 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> l <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> lengths <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> lengths <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> lengths<span class=\"br0\">[</span> l <span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> count shuffles<span class=\"br0\">(</span> lengths<span class=\"br0\">[</span> l <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 6, "block": "<pre class=\"autohotkey highlighted_source\">Shuffle<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tn <span class=\"sy0\">:=</span> cards<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>\tres <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% n<br/>\t\tres<span class=\"sy0\">.</span>push<span class=\"br0\">(</span>cards<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> res<span class=\"sy0\">.</span>push<span class=\"br0\">(</span>cards<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">round</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 111, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* ===&gt; INCLUDES &lt;============================================================*/</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ===&gt; CONSTANTS &lt;===========================================================*/</span><br/><span class=\"co2\">#define N_DECKS 7</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> kDecks<span class=\"br0\">[</span>N_DECKS<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ===&gt; FUNCTION PROTOTYPES &lt;=================================================*/</span><br/><span class=\"kw4\">int</span> CreateDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> InitDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> DuplicateDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>dest<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>orig<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> InitedDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> ShuffleDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> FreeDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>deck <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ===&gt; FUNCTION DEFINITIONS &lt;================================================*/</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> nCards<span class=\"sy0\">,</span> nShuffles<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>N_DECKS<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nCards <span class=\"sy0\">=</span> kDecks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span>CreateDeck<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>deck<span class=\"sy0\">,</span>nCards<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span> stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Error: malloc() failed!<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        InitDeck<span class=\"br0\">(</span> deck<span class=\"sy0\">,</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        nShuffles <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            ShuffleDeck<span class=\"br0\">(</span> deck<span class=\"sy0\">,</span> nCards <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">++</span>nShuffles<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span>InitedDeck<span class=\"br0\">(</span>deck<span class=\"sy0\">,</span>nCards<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"Cards count:\u00a0%d, shuffles required:\u00a0%d.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> nCards<span class=\"sy0\">,</span> nShuffles <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        FreeDeck<span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>deck <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> CreateDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>tmp <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> deck <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><br/>        tmp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span> nCards<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>tmp<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> tmp<span class=\"sy0\">!=</span>NULL <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>deck<span class=\"sy0\">=</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">!=</span>NULL <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* (?success) (:failure) */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> InitDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> deck <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>nCards<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i <span class=\"br0\">)</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> DuplicateDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>dest<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>orig<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> orig <span class=\"sy0\">!=</span> NULL <span class=\"sy0\">&amp;&amp;</span> CreateDeck<span class=\"br0\">(</span>dest<span class=\"sy0\">,</span>nCards<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>dest<span class=\"sy0\">,</span> orig<span class=\"sy0\">,</span> nCards<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>orig<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* success */</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* failure */</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> InitedDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>nCards<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> i <span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* not inited */</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* inited */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> ShuffleDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nCards <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>copy <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> DuplicateDeck<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>copy<span class=\"sy0\">,</span>deck<span class=\"sy0\">,</span>nCards<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> i<span class=\"sy0\">=</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>nCards<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            deck<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> copy<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            deck<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> copy<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>nCards<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        FreeDeck<span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>copy <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* success */</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* failure */</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> FreeDeck<span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>deck <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>deck <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>deck <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>deck <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 40, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> pShuffle<span class=\"br0\">(</span> <span class=\"kw4\">int</span> t <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v, o, r<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> t<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        o.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    r <span class=\"sy1\">=</span> o<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> t2 <span class=\"sy1\">=</span> t <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, c <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v <span class=\"sy1\">=</span> r<span class=\"sy4\">;</span><br/>        r.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> t2<span class=\"sy4\">;</span> x <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> x<span class=\"sy2\">--</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> v<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> t2 <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            r.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> v<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        std<span class=\"sy4\">::</span><span class=\"me2\">reverse</span><span class=\"br0\">(</span> r.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, r.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">equal</span><span class=\"br0\">(</span> o.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, o.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, r.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> c<span class=\"sy4\">;</span><br/>        c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> s<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Cards count: \"</span> <span class=\"sy1\">&lt;&lt;</span> s<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", shuffles required: \"</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> pShuffle<span class=\"br0\">(</span> s<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\".<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 33, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> PerfectShuffle<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> input <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> numbers <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, input<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{input} cards: {ShuffleThrough(numbers).Count()}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> ShuffleThrough<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> original<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            T<span class=\"br0\">[</span><span class=\"br0\">]</span> copy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>original<span class=\"sy0\">.</span><span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> copy <span class=\"sy0\">=</span> Shuffle<span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">SequenceEqual</span><span class=\"br0\">(</span>original, copy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> Shuffle<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>array<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Length must be even.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> half <span class=\"sy0\">=</span> array<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        T<span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> T<span class=\"br0\">[</span>array<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, r <span class=\"sy0\">=</span> half<span class=\"sy0\">;</span> l <span class=\"sy0\">&lt;</span> half<span class=\"sy0\">;</span> t<span class=\"sy0\">+=</span><span class=\"nu0\">2</span>, l<span class=\"sy0\">++</span>, r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> perfect<span class=\"sy0\">-</span>shuffle <span class=\"br0\">[</span>deck<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>half <span class=\"br0\">(</span><span class=\"kw1\">split-at</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> deck<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> deck<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">interleave</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> half<span class=\"br0\">)</span> <span class=\"br0\">(</span>last half<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> solve <span class=\"br0\">[</span>deck<span class=\"sy0\">-</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>original <span class=\"br0\">(</span><span class=\"kw1\">range</span> deck<span class=\"sy0\">-</span>size<span class=\"br0\">)</span> <br/>        trials <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> perfect<span class=\"sy0\">-</span>shuffle original<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        predicate #<span class=\"br0\">(</span><span class=\"sy0\">=</span> original <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%5s:\u00a0%s\"</span> deck<span class=\"sy0\">-</span>size<br/>      <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>some identity <span class=\"br0\">(</span>map<span class=\"sy0\">-</span>indexed <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>i x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>predicate x<span class=\"br0\">)</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> trials<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> solve <span class=\"br0\">[</span><span class=\"nu0\">8</span> <span class=\"nu0\">24</span> <span class=\"nu0\">52</span> <span class=\"nu0\">100</span> <span class=\"nu0\">1020</span> <span class=\"nu0\">1024</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> perfect-shuffle <span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>half <span class=\"br0\">(</span>floor <span class=\"br0\">(</span><span class=\"kw1\">length</span> deck<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>left <span class=\"br0\">(</span>subseq deck <span class=\"nu0\">0</span> half<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>right <span class=\"br0\">(</span><span class=\"kw1\">nthcdr</span> half deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapcan</span> #'<span class=\"kw1\">list</span> left right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> solve <span class=\"br0\">(</span>deck-size<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with original <span class=\"sy0\">=</span> <span class=\"br0\">(</span>loop for n from <span class=\"nu0\">1</span> to deck-size collect n<span class=\"br0\">)</span><br/>        for trials from <span class=\"nu0\">1</span><br/>        for deck <span class=\"sy0\">=</span> original then shuffled<br/>        for shuffled <span class=\"sy0\">=</span> <span class=\"br0\">(</span>perfect-shuffle deck<span class=\"br0\">)</span><br/>        until <span class=\"br0\">(</span><span class=\"kw1\">equal</span> shuffled original<span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span>format t <span class=\"st0\">\"~5D: ~4D~%\"</span> deck-size trials<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>solve <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">52</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">1020</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>solve <span class=\"nu0\">10000</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> sizes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>_000<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>s<span class=\"sy0\">;</span> sizes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%5s\u00a0:\u00a0%5s\"</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> perfectShuffle<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> perfectShuffle<span class=\"br0\">(</span><span class=\"kw4\">int</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span> <span class=\"sy0\">:</span> enforce<span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>size<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span> <span class=\"sy0\">:</span> copy<span class=\"sy0\">,</span> equal<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> orig <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> size<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> process<span class=\"sy0\">;</span><br/>    process.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span><br/>    copy<span class=\"br0\">(</span>orig<span class=\"sy0\">,</span> process<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> count<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> count<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        process <span class=\"sy0\">=</span> roundRobin<span class=\"br0\">(</span>process<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>$<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> process<span class=\"br0\">[</span>$<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equal<span class=\"br0\">(</span>orig<span class=\"sy0\">,</span> process<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"st0\">\"How did this get here?\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; shuffler\u00a0: a permutation vector which interleaves both halves of deck</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>make-shuffler n<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">(</span>make-vector n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in-range <span class=\"nu0\">0</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> s i <span class=\"br0\">(</span>/ i <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in-range <span class=\"nu0\">0</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> s <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>/ n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>vector-ref s i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; output\u00a0: (n . # of shuffles needed to go back)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>magic-shuffle n<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>odd? n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"magic-shuffle:odd input\"</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>deck <span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>vector <span class=\"br0\">(</span>iota n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; (0 1 ... n-1)</span><br/>\t\t\t<span class=\"br0\">(</span>dock <span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>vector <span class=\"br0\">(</span>iota n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; keep trace or init deck</span><br/>\t\t\t<span class=\"br0\">(</span>shuffler <span class=\"br0\">(</span>make-shuffler n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <br/>\t\t<span class=\"br0\">(</span>for/sum <span class=\"br0\">(</span><span class=\"br0\">(</span>i Infinity<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (in-naturals missing  in EchoLisp v2.9)</span><br/>\t\t\t<span class=\"br0\">(</span>vector-permute<span class=\"sy0\">!</span> deck shuffler<span class=\"br0\">)</span> <span class=\"co1\">;; permutes in place</span><br/>\t\t    #<span class=\"sy0\">:</span><span class=\"kw1\">break</span> <span class=\"br0\">(</span>eqv? deck dock<span class=\"br0\">)</span> <span class=\"co1\">;; compare to first</span><br/>\t\t\t<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Perfect do<br/>  def shuffle(n) do<br/>    start = Enum.to_list(1..n)<br/>    m = div(n, 2)<br/>    shuffle(start, magic_shuffle(start, m), m, 1)<br/>  end<br/>\u00a0<br/>  defp shuffle(start, start, _, step), do: step<br/>  defp shuffle(start, deck, m, step) do<br/>    shuffle(start, magic_shuffle(deck, m), m, step+1)<br/>  end<br/>\u00a0<br/>  defp magic_shuffle(deck, len) do<br/>    {left, right} = Enum.split(deck, len)<br/>    Enum.zip(left, right)<br/>    |&gt; Enum.map(&amp;Tuple.to_list/1)<br/>    |&gt; List.flatten<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([8, 24, 52, 100, 1020, 1024, 10000], fn n -&gt;<br/>  step = Perfect.shuffle(n)<br/>  IO.puts \"#{n}\u00a0: #{step}\"<br/>end)</pre>"}, {"lang": "F#", "loc": 17, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> perfectShuffle xs <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  xs<br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i x<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> i<span class=\"sy0\">&lt;</span>h <span class=\"kw1\">then</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span>h<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, x<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sortBy</span> <span class=\"kw3\">fst</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span><br/>\u00a0<br/><span class=\"kw1\">let</span> orderCount n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> spin count ys <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> xs<span class=\"sy0\">=</span>ys <span class=\"kw1\">then</span> count<br/>    <span class=\"kw1\">else</span> ys <span class=\"sy0\">|&gt;</span> perfectShuffle <span class=\"sy0\">|&gt;</span> spin <span class=\"br0\">(</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  xs <span class=\"sy0\">|&gt;</span> perfectShuffle <span class=\"sy0\">|&gt;</span> spin <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"nu0\">24</span><span class=\"sy0\">;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">1020</span><span class=\"sy0\">;</span> <span class=\"nu0\">1024</span><span class=\"sy0\">;</span> <span class=\"nu0\">10000</span> <span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">|&gt;</span> orderCount <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%d\u00a0%d\"</span> n<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">USING: arrays formatting kernel math prettyprint sequences<br/>sequences.merged\u00a0;<br/>IN: rosetta-code.perfect-shuffle<br/>\u00a0<br/>CONSTANT: test-cases { 8 24 52 100 1020 1024 10000 }<br/>\u00a0<br/>: shuffle ( seq -- seq' ) halves 2merge\u00a0;<br/>\u00a0<br/>: shuffle-count ( n -- m )<br/>    &lt;iota&gt; &gt;array 0 swap dup [ 2dup = ] [ shuffle [ 1 + ] 2dip ]<br/>    do until 2drop\u00a0;<br/>\u00a0<br/>\"Deck size\" \"Number of shuffles required\" \"%-11s\u00a0%-11s\\n\" printf<br/>test-cases [ dup shuffle-count \"%-11d\u00a0%-11d\\n\" printf ] each</pre>"}, {"lang": "Go", "loc": 59, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Deck <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tCards <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\tlength <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NewDeck<span class=\"sy1\">(</span>deckSize <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>res <span class=\"sy3\">*</span>Deck<span class=\"sy1\">){</span><br/>\t<span class=\"kw1\">if</span> deckSize <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"Deck size must be even\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tres <span class=\"sy2\">=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>Deck<span class=\"sy1\">)</span><br/>\tres<span class=\"sy3\">.</span>Cards <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> deckSize<span class=\"sy1\">)</span><br/>\tres<span class=\"sy3\">.</span>length <span class=\"sy2\">=</span> deckSize<br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span>_ <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span>  res<span class=\"sy3\">.</span>Cards<span class=\"sy1\">{</span><br/>\t\tres<span class=\"sy3\">.</span>Cards<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span>shuffleDeck<span class=\"sy1\">(){</span><br/>\ttmp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span>d<span class=\"sy3\">.</span>length<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span> &lt;d<span class=\"sy3\">.</span>length<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span><span class=\"nu2\">i</span><span class=\"sy2\">++</span>  <span class=\"sy1\">{</span><br/>\t\ttmp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy3\">.</span>Cards<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\ttmp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy3\">.</span>Cards<span class=\"sy1\">[</span>d<span class=\"sy3\">.</span>length <span class=\"sy3\">/</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t<span class=\"sy1\">}</span><br/>\td<span class=\"sy3\">.</span>Cards <span class=\"sy2\">=</span> tmp<br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> isEqualTo<span class=\"sy1\">(</span>c Deck<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>res <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> d<span class=\"sy3\">.</span>length <span class=\"sy2\">!=</span> c<span class=\"sy3\">.</span>length <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"Decks aren't equally sized\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tres <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d<span class=\"sy3\">.</span>Cards<span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> v <span class=\"sy2\">!=</span> c<span class=\"sy3\">.</span>Cards<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>\t\t\tres <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">(){</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span>v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">24</span><span class=\"sy1\">,</span><span class=\"nu0\">52</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">1020</span><span class=\"sy1\">,</span><span class=\"nu0\">1024</span><span class=\"sy1\">,</span><span class=\"nu0\">10000</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Cards count:\u00a0%d, shuffles required:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span>v<span class=\"sy1\">,</span>ShufflesRequired<span class=\"sy1\">(</span>v<span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ShufflesRequired<span class=\"sy1\">(</span>deckSize <span class=\"kw4\">int</span><span class=\"sy1\">)(</span>res <span class=\"kw4\">int</span><span class=\"sy1\">){</span><br/>\tdeck <span class=\"sy2\">:=</span> NewDeck<span class=\"sy1\">(</span>deckSize<span class=\"sy1\">)</span><br/>\tRef <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>deck<br/>\tdeck<span class=\"sy3\">.</span>shuffleDeck<span class=\"sy1\">()</span><br/>\tres<span class=\"sy2\">++</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span><span class=\"sy3\">!</span>deck<span class=\"sy3\">.</span>isEqualTo<span class=\"sy1\">(</span>Ref<span class=\"sy1\">);</span>deck<span class=\"sy3\">.</span>shuffleDeck<span class=\"sy1\">(){</span><br/>\t\tres<span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\">shuffle <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span>   <br/>shuffle lst <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> lst `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> lst<br/>              <span class=\"kw1\">in</span> foldMap <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> a b<br/>\u00a0<br/>findCycle <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>findCycle f x <span class=\"sy0\">=</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">/=</span> x<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> f <span class=\"br0\">(</span>f x<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> report <span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    report n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"deck of \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\" cards: \"</span><br/>                         <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>countSuffles n<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" shuffles!\"</span><span class=\"br0\">)</span><br/>    countSuffles n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span>findCycle shuffle <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   shuf=: /: $ /:@$ <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>\"<span class=\"nu0\">_</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PerfectShuffle <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sizes <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10</span>_000<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> size <span class=\"sy0\">:</span> sizes<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%5d\u00a0:\u00a0%5d%n\"</span>, size, perfectShuffle<span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> perfectShuffle<span class=\"br0\">(</span><span class=\"kw4\">int</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"size must be even\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> half <span class=\"sy0\">=</span> size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, size<span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> original <span class=\"sy0\">=</span> a.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> aa <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> count<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>a, <span class=\"nu0\">0</span>, aa, <span class=\"nu0\">0</span>, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> half<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                a<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> aa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                a<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> aa<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> half<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>a, original<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 122, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// shuffleCycleLength\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw1\">const</span> shuffleCycleLength <span class=\"sy0\">=</span> deckSize <span class=\"sy0\">=&gt;</span><br/>        firstCycle<span class=\"br0\">(</span>shuffle<span class=\"sy0\">,</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> deckSize<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">all</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// shuffle\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> shuffle <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        concat<span class=\"br0\">(</span>zip.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> splitAt<span class=\"br0\">(</span>div<span class=\"br0\">(</span>length<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// firstycle\u00a0:: Eq a =&gt; (a -&gt; a) -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> firstCycle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        until<span class=\"br0\">(</span><br/>            m <span class=\"sy0\">=&gt;</span> EqArray<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> m.<span class=\"me1\">current</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span> fx <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>m.<span class=\"me1\">current</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    current<span class=\"sy0\">:</span> fx<span class=\"sy0\">,</span><br/>                    all<span class=\"sy0\">:</span> m.<span class=\"me1\">all</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>fx<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                current<span class=\"sy0\">:</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                all<span class=\"sy0\">:</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Two arrays equal\u00a0?</span><br/>    <span class=\"co1\">// EqArray\u00a0:: [a] -&gt; [b] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> EqArray <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"br0\">[</span>nx<span class=\"sy0\">,</span> ny<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>xs.<span class=\"me1\">length</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> nx <span class=\"sy0\">===</span> ny <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            nx <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> ys<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> EqArray<span class=\"br0\">(</span>xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS</span><br/>\u00a0<br/>    <span class=\"co1\">// zip\u00a0:: [a] -&gt; [b] -&gt; [(a,b)]</span><br/>    <span class=\"kw1\">const</span> zip <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>xs.<span class=\"me1\">length</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// splitAt\u00a0:: Int -&gt; [a] -&gt; ([a],[a])</span><br/>    <span class=\"kw1\">const</span> splitAt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// div\u00a0:: Num -&gt; Num -&gt; Int</span><br/>    <span class=\"kw1\">const</span> div <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> go <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> p<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> go<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> go<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// range\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> range <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// length\u00a0:: [a] -&gt; Int</span><br/>    <span class=\"co1\">// length\u00a0:: Text -&gt; Int</span><br/>    <span class=\"kw1\">const</span> length <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// maximumBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; a</span><br/>    <span class=\"kw1\">const</span> maximumBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> <span class=\"br0\">(</span><br/>            f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> a<br/>        <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> transpose <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_<span class=\"sy0\">,</span> iCol<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> row<span class=\"br0\">[</span>iCol<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// replicateS\u00a0:: Int -&gt; String -&gt; String</span><br/>    <span class=\"kw1\">const</span> replicateS <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> s<span class=\"sy0\">,</span><br/>            o <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> o <span class=\"sy0\">=</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            v <span class=\"sy0\">=</span> v.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/>    <span class=\"kw1\">const</span> justifyRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        n <span class=\"sy0\">&gt;</span> strText.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>replicateS<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"br0\">)</span> <span class=\"sy0\">+</span> strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> strText<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST</span><br/>    <span class=\"kw1\">return</span> transpose<span class=\"br0\">(</span>transpose<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span><span class=\"st0\">'Deck'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Shuffles'</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><br/>                <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> shuffleCycleLength<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                    .<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span>col <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> <span class=\"co1\">// Right-justified number columns</span><br/>                <span class=\"kw1\">const</span> width <span class=\"sy0\">=</span> length<span class=\"br0\">(</span><br/>                    maximumBy<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> length<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> length<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> col<span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> col.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> justifyRight<span class=\"br0\">(</span>width<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 28, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function perfect_shuffle(a::Array)::Array<br/>    if isodd(length(a)) error(\"cannot perform perfect shuffle on odd-length array\") end<br/>\u00a0<br/>    rst = zeros(a)<br/>    mid = div(length(a), 2)<br/>    for i in 1:mid<br/>        rst[2i-1], rst[2i] = a[i], a[mid+i]<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>function count_perfect_shuffles(decksize::Int)::Int<br/>    a = collect(1:decksize)<br/>    b, c = perfect_shuffle(a), 1<br/>    while a\u00a0!= b<br/>        b = perfect_shuffle(b)<br/>        c += 1<br/>    end<br/>    return c<br/>end<br/>\u00a0<br/>println(\"    Deck  n.Shuffles\")<br/>for i in (8, 24, 52, 100, 1020, 1024, 10000, 100000)<br/>    count = count_perfect_shuffles(i)<br/>    @printf(\"%7i%7i\\n\", i, count)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 41, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun areSame<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray, b<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun perfectShuffle<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>a.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hSize <span class=\"sy0\">=</span> a.<span class=\"me1\">size</span> / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until hSize<span class=\"br0\">)</span> b<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in hSize until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        b<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        j +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun countShuffles<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>a.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> a.<span class=\"me1\">size</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> a<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> perfectShuffle<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>        count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>areSame<span class=\"br0\">(</span>a, c<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count<br/>        b <span class=\"sy0\">=</span> c<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Deck size  Num shuffles\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"---------  ------------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sizes <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>size in sizes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count <span class=\"sy0\">=</span> countShuffles<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>-9d<span class=\"st0\">\".format(size)}     $count\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Perform weave shuffle</span><br/><span class=\"kw1\">function</span> shuffle <span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> pile1<span class=\"sy0\">,</span> pile2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> card <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>cards <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>pile1<span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> card <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">#</span>cards <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>cards <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>pile2<span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    cards <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> card <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>pile1 <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>cards<span class=\"sy0\">,</span> pile1<span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>cards<span class=\"sy0\">,</span> pile2<span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> cards<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return boolean indicating whether or not the cards are in order</span><br/><span class=\"kw1\">function</span> inOrder <span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>cards<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> k <span class=\"sy0\">~=</span> v <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Count the number of shuffles needed before the cards are in order again</span><br/><span class=\"kw1\">function</span> countShuffles <span class=\"br0\">(</span>deckSize<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> deck<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> deckSize <span class=\"kw1\">do</span> deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">repeat</span><br/>        deck <span class=\"sy0\">=</span> shuffle<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>        count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">until</span> inOrder<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">}</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Output\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> case <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>case<span class=\"sy0\">,</span> countShuffles<span class=\"br0\">(</span>case<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">shuffle[deck_]\u00a0:= Apply[Riffle, TakeDrop[deck, Length[deck]/2]];<br/>shuffleCount[n_]\u00a0:= Block[{count=0}, NestWhile[shuffle, shuffle[Range[n]], (count++; OrderedQ[#] )&amp;];count];<br/>Map[shuffleCount, {8, 24, 52, 100, 1020, 1024, 10000}]</pre>"}, {"lang": "MATLAB", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>New<span class=\"br0\">]</span>=PerfectShuffle<span class=\"br0\">(</span>Nitems, Nturns<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>Nitems,<span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"co1\">%only if even number</span><br/>        X=<span class=\"nu0\">1</span>:Nitems; <span class=\"co1\">%define deck</span><br/>        <span class=\"kw1\">for</span> c=<span class=\"nu0\">1</span>:Nturns <span class=\"co1\">%defines one shuffle</span><br/>            X=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span>X,Nitems/<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>'; <span class=\"co1\">%split the deck in two and stack halves</span><br/>            X=X<span class=\"br0\">(</span>:<span class=\"br0\">)</span>'; <span class=\"co1\">%mix the halves</span><br/>        <span class=\"kw1\">end</span><br/>        New=X; <span class=\"co1\">%result of multiple shufflings</span><br/>    <span class=\"kw1\">end</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: shuffle(l)     l size 2 / dup l left swap l right zip expand\u00a0;<br/>: nbShuffles(l)  1 l while( shuffle dup l &lt;&gt; ) [ 1 under+ ] drop\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">magic<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>v<span class=\"br0\">[</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>i<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>shuffles_slow<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>o<span class=\"sy0\">=</span>v<span class=\"sy0\">,</span>s<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>v<span class=\"sy0\">=</span>magic<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span>o<span class=\"sy0\">,</span>s<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>s<span class=\"sy0\">;</span><br/>shuffles<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">znorder</span><span class=\"br0\">(</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">5000</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>shuffles_slow<span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>all<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> perfect_shuffle <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$mid</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"re0\">$mid</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span><span class=\"re0\">$mid</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$size</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@shuffled</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">++;</span> <span class=\"re0\">@shuffled</span> <span class=\"sy0\">=</span> perfect_shuffle<span class=\"br0\">(</span><span class=\"re0\">@shuffled</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">until</span> all <span class=\"br0\">{</span> <span class=\"re0\">$shuffled</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$deck</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$#shuffled</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%5d cards:\u00a0%4d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> perfect<span class=\"sy0\">-</span>shuffle <span class=\"br0\">(</span><span class=\"re0\">@deck</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$mid</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    flat <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$mid</span><span class=\"br0\">]</span> <span class=\"kw1\">Z</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$mid</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$size</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> <span class=\"sy0\">^</span><span class=\"re0\">$size</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"kw1\">until</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"br0\">]</span> <span class=\"re0\">@deck</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span><span class=\"sy0\">++;</span><br/>        <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> perfect<span class=\"sy0\">-</span>shuffle <span class=\"re0\">@deck</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%5d cards:\u00a0%4d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">function perfect_shuffle(sequence deck)<br/>integer mp = length(deck)/2<br/>sequence res = deck<br/>    integer k = 1<br/>    for i=1 to mp do<br/>        res[k] = deck[i]        k += 1<br/>        res[k] = deck[i+mp]     k += 1<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>constant testsizes = {8, 24, 52, 100, 1020, 1024, 10000}<br/>for i=1 to length(testsizes) do<br/>    sequence deck = tagset(testsizes[i])<br/>    sequence work = perfect_shuffle(deck)<br/>    integer count = 1<br/>    while work!=deck do<br/>        work = perfect_shuffle(work)<br/>        count += 1<br/>    end while<br/>    printf(1,\"%5d cards:\u00a0%4d\\n\", {testsizes[i],count})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de perfectShuffle (Lst)<br/>   (mapcan '((B A) (list A B))<br/>      (cdr (nth Lst (/ (length Lst) 2)))<br/>      Lst ) )<br/>\u00a0<br/>(for N (8 24 52 100 1020 1024 10000)<br/>   (let (Lst (range 1 N)  L Lst  Cnt 1)<br/>      (until (= Lst (setq L (perfectShuffle L)))<br/>         (inc 'Cnt) )<br/>      (tab (5 6) N Cnt) ) )</pre>"}, {"lang": "Python", "loc": 47, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">doctest</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> flatten<span class=\"br0\">(</span>lst<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    &gt;&gt;&gt; flatten([[3,2],[1,2]])<br/>    [3, 2, 1, 2]<br/>    \"\"\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>i <span class=\"kw1\">for</span> sublst <span class=\"kw1\">in</span> lst <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> sublst<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> magic_shuffle<span class=\"br0\">(</span>deck<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    &gt;&gt;&gt; magic_shuffle([1,2,3,4])<br/>    [1, 3, 2, 4]<br/>    \"\"\"</span><br/>    half <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span> // <span class=\"nu0\">2</span> <br/>    <span class=\"kw1\">return</span> flatten<span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span>deck<span class=\"br0\">[</span>:half<span class=\"br0\">]</span><span class=\"sy0\">,</span> deck<span class=\"br0\">[</span>half:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> after_how_many_is_equal<span class=\"br0\">(</span>shuffle_type<span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>end<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    &gt;&gt;&gt; after_how_many_is_equal(magic_shuffle,[1,2,3,4],[1,2,3,4])<br/>    2<br/>    \"\"\"</span><br/>\u00a0<br/>    start <span class=\"sy0\">=</span> shuffle_type<span class=\"br0\">(</span>start<span class=\"br0\">)</span><br/>    counter <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> start <span class=\"sy0\">!=</span> end:<br/>        start <span class=\"sy0\">=</span> shuffle_type<span class=\"br0\">(</span>start<span class=\"br0\">)</span><br/>        counter +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> counter<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw3\">doctest</span>.<span class=\"me1\">testmod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Length of the deck of cards | Perfect shuffles needed to obtain the same deck back\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> length <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1020</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span>:<br/>        deck <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        shuffles_needed <span class=\"sy0\">=</span> after_how_many_is_equal<span class=\"br0\">(</span>magic_shuffle<span class=\"sy0\">,</span>deck<span class=\"sy0\">,</span>deck<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"{} | {}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>length<span class=\"sy0\">,</span>shuffles_needed<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "R", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>wave.shuffle &lt;- function(n) {<br/>  deck &lt;- 1:n ## create the original deck<br/>  new.deck &lt;- c(matrix(data = deck, ncol = 2, byrow = TRUE)) ## shuffle the deck once<br/>  counter &lt;- 1 ## track the number of loops<br/>  ## defining a loop that shuffles the new deck until identical with the original one <br/>  ## and in the same time increses the counter with 1 per loop<br/>  while (!identical(deck, new.deck)) { ## logical condition<br/>    new.deck &lt;- c(matrix(data = new.deck, ncol = 2, byrow = TRUE)) ## shuffle<br/>    counter &lt;- counter + 1 ## add 1 to the number of loops<br/>  }<br/>  return(counter) ## final result - total number of loops until the condition is met<br/>}<br/>test.values &lt;- c(8, 24, 52, 100, 1020, 1024, 10000) ## the set of the test values<br/>test &lt;- sapply(test.values, wave.shuffle) ## apply the wave.shuffle function on each element<br/>names(test) &lt;- test.values ## name the result<br/>test ## print the result out<br/>\u00a0<br/>&gt; test<br/>    8    24    52   100  1020  1024 10000 <br/>    3    11     8    30  1018    10   300<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require racket/list)<br/>\u00a0<br/>(define (perfect-shuffle l)<br/>  (define-values (as bs) (split-at l (/ (length l) 2)))<br/>  (foldr (\u03bb (a b d) (list* a b d)) null as bs))<br/>\u00a0<br/>(define (perfect-shuffles-needed n)<br/>  (define-values (_ rv)<br/>    (for/fold ((d (perfect-shuffle (range n))) (i 1))<br/>              ((_ (in-naturals))<br/>               #:break (apply &lt; d))<br/>      (values (perfect-shuffle d) (add1 i))))<br/>  rv)<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal? (perfect-shuffle '(1 2 3 4)) '(1 3 2 4))<br/>\u00a0<br/>  (define (test-perfect-shuffles-needed n e)<br/>    (define psn (perfect-shuffles-needed n))<br/>    (printf \"Deck size:\\t~a\\tShuffles needed:\\t~a\\t(~a)~%\" n psn e)<br/>    (check-equal? psn e))<br/>\u00a0<br/>  (for-each test-perfect-shuffles-needed<br/>            '(8 24 52 100 1020 1024 10000)<br/>            '(3 11  8  30 1018   10   300)))</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs a  \"perfect shuffle\"  for a number of  even numbered  decks.    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> X                                      <span class=\"coMULTI\">/*optional list of test cases from C.L.*/</span><br/><span class=\"kw1\">if</span> X=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> X=<span class=\"nu0\">8</span> <span class=\"nu0\">24</span> <span class=\"nu0\">52</span> <span class=\"nu0\">100</span> <span class=\"nu0\">1020</span> <span class=\"nu0\">1024</span> <span class=\"nu0\">10000</span>      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>X, <span class=\"kw6\">words</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*used for right\u2500aligning the numbers. */</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span>;  y=<span class=\"kw6\">word</span><span class=\"br0\">(</span>X,j<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*use numbers in the test suite (list).*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y;       @<span class=\"sy0\">.</span>k=k;      <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span> <span class=\"coMULTI\">/*generate a deck to be used (shuffled)*/</span><br/>      <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> eq<span class=\"br0\">(</span><span class=\"br0\">)</span>;  <span class=\"kw1\">call</span> magic; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*t*/</span> <span class=\"coMULTI\">/*shuffle until  before  equals  after.*/</span><br/>\u00a0<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'deck size:'</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>y,w<span class=\"br0\">)</span><span class=\"st0\">\",\"</span>       <span class=\"kw6\">right</span><span class=\"br0\">(</span>t,w<span class=\"br0\">)</span>      <span class=\"st0\">'perfect shuffles.'</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>eq:    <span class=\"kw1\">do</span>\u00a0?=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y;   <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>?<span class=\"sy0\">\\</span>==?  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;   <span class=\"kw3\">end</span>;           <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>magic: z=<span class=\"nu0\">0</span>                                       <span class=\"coMULTI\">/*set the  Z  pointer  (used as index).*/</span><br/>       h=y%2                                     <span class=\"coMULTI\">/*get the half\u2500way (midpoint) pointer. */</span><br/>                <span class=\"kw1\">do</span> s=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> h;  z=z+<span class=\"nu0\">1</span>;  h=h+<span class=\"nu0\">1</span>    <span class=\"coMULTI\">/*traipse through the card deck pips.  */</span><br/>               \u00a0!<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"057f3845\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>s;        z=z+<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*assign left half; then bump pointer. */</span><br/>               \u00a0!<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"58226518\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>h                          <span class=\"coMULTI\">/*   \"   right  \"                      */</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*s*/</span>                      <span class=\"coMULTI\">/*perform a perfect shuffle of the deck*/</span><br/>\u00a0<br/>                <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y;  @<span class=\"sy0\">.</span>r=!<span class=\"sy0\">.</span>r;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*re\u2500assign to the original card deck. */</span><br/>       <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> perfect_shuffle<span class=\"br0\">(</span>deck_size = <span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>\tdeck = <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">deck_size</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>\tshuffled_deck = <span class=\"br0\">[</span>deck.<span class=\"me1\">first</span><span class=\"br0\">(</span>deck_size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, deck.<span class=\"me1\">last</span><span class=\"br0\">(</span>deck_size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"nu0\">1</span>.<span class=\"me1\">step</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>\t\t<span class=\"kw2\">return</span> i <span class=\"kw1\">if</span> deck == <span class=\"br0\">(</span>shuffled_deck = shuffled_deck.<span class=\"me1\">transpose</span>.<span class=\"me1\">flatten</span><span class=\"br0\">)</span><br/>\t\tshuffled_deck = <span class=\"br0\">[</span>shuffled_deck.<span class=\"me1\">shift</span><span class=\"br0\">(</span>deck_size <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, shuffled_deck<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"Perfect Shuffles Required for Deck Size #{i}: #{perfect_shuffle(i)}\"</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 23, "block": "<pre class=\"text highlighted_source\">extern crate itertools;<br/>\u00a0<br/>fn shuffle&lt;T&gt;(mut deck: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt; {<br/>    let index = deck.len() / 2;<br/>    let right_half = deck.split_off(index);<br/>    itertools::interleave(deck, right_half).collect()<br/>}<br/>\u00a0<br/>fn main() {<br/>    for &amp;size in &amp;[8, 24, 52, 100, 1020, 1024, 10_000] {<br/>        let original_deck: Vec&lt;_&gt; = (0..size).collect();<br/>        let mut deck = original_deck.clone();<br/>        let mut iterations = 0;<br/>        loop {<br/>            deck = shuffle(deck);<br/>            iterations += 1;<br/>            if deck == original_deck {<br/>                break;<br/>            }<br/>        }<br/>        println!(\"{: &gt;5}: {: &gt;4}\", size, iterations);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PerfectShuffle <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sizes <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> perfectShuffle<span class=\"br0\">(</span>size<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>size <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"Card deck must be even\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>half, a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>size / <span class=\"nu0\">2</span>, Array.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> original <span class=\"sy0\">=</span> a.<span class=\"me1\">clone</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> aa <span class=\"sy0\">=</span> a.<span class=\"me1\">clone</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until half<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        a<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> aa<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        a<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> aa<span class=\"br0\">(</span>i + half<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">deep</span> <span class=\"sy0\">==</span> original.<span class=\"me1\">deep</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count<br/>      count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"nu0\">0</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>size <span class=\"sy0\">&lt;</span>- sizes<span class=\"br0\">)</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"$size%5d\u00a0: ${perfectShuffle(size)}%5d\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 28, "block": "<pre class=\"text highlighted_source\">function New=PerfectShuffle(Nitems,Nturns)<br/>    if modulo(Nitems,2)==0 then<br/>        X=1:Nitems;<br/>        for c=1:Nturns<br/>            X=matrix(X,Nitems/2,2)';<br/>            X=X(:);<br/>        end<br/>        New=X';<br/>    end<br/>endfunction<br/>\u00a0<br/>Result=[];<br/>Q=[8, 24, 52, 100, 1020, 1024, 10000];<br/>for n=Q<br/>    Same=0;<br/>    T=0;<br/>    Compare=[];<br/>    while ~Same<br/>        T=T+1;<br/>        R=PerfectShuffle(n,T);<br/>        Compare = find(R-(1:n));<br/>        if Compare == [] then<br/>            Same = 1;<br/>        end<br/>    end<br/>    Result=[Result;T];<br/>end<br/>disp([Q', Result])</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func perfect_shuffle<span class=\"br0\">(</span>deck<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     deck<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> zip.<span class=\"me1\">flat</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">8</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">52</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1020</span>, <span class=\"nu0\">1024</span>, <span class=\"nu0\">10000</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>size<span class=\"sy0\">|</span><br/>    var deck = @<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    var shuffled = deck<br/>\u00a0<br/>    var n = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Inf</span> <span class=\"sy0\">-&gt;</span> lazy.<span class=\"me1\">first</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>shuffled = perfect_shuffle<span class=\"br0\">(</span>shuffled<span class=\"br0\">)</span><span class=\"br0\">)</span> == deck<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%5d cards:\u00a0%4d<span class=\"es0\">\\n</span>\"</span>, size, n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 46, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> shuffle <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> perfect <span class=\"br0\">{</span>deck<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$deck</span><span class=\"br0\">]</span><span class=\"sy0\">%</span>2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"Deck must be of even length!\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> <span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$deck</span><span class=\"br0\">]</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> top <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$deck</span> <span class=\"nu0\">0</span> <span class=\"re0\">$split</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> btm <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$deck</span> <span class=\"re0\">$split</span> end<span class=\"br0\">]</span><br/>        <span class=\"kw1\">foreach</span> a <span class=\"re0\">$top</span> b <span class=\"re0\">$btm</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> res <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> cycle_length <span class=\"br0\">{</span>transform deck<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> d <span class=\"re0\">$deck</span><br/>        <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"re0\">$transform</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">incr</span> i<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> eq <span class=\"re0\">$deck</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> range <span class=\"br0\">{</span>a <span class=\"br0\">{</span>b <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> b <span class=\"re0\">$a</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> a <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> res <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> res <span class=\"re0\">$a</span><br/>            <span class=\"kw2\">incr</span> a<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">argv</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw2\">package</span> require <span class=\"kw3\">tcltest</span><br/><span class=\"kw3\">tcltest</span>::<span class=\"me1\">test</span> <span class=\"st0\">\"Test perfect shuffle cycles\"</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> -body <span class=\"br0\">{</span><br/>    lmap size <span class=\"br0\">{</span><span class=\"nu0\">8</span> <span class=\"nu0\">24</span> <span class=\"nu0\">52</span> <span class=\"nu0\">100</span> <span class=\"nu0\">1020</span> <span class=\"nu0\">1024</span> <span class=\"nu0\">10000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        shuffle::<span class=\"me1\">cycle_length</span> perfect <span class=\"br0\">[</span>range <span class=\"re0\">$size</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> -result <span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">11</span> <span class=\"nu0\">8</span> <span class=\"nu0\">30</span> <span class=\"nu0\">1018</span> <span class=\"nu0\">10</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 62, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> T, Arr, X <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   Arr = Array(8, 24, 52, 100, 1020, 1024, 10000)<br/>   <span class=\"kw3\">For</span> X = <span class=\"kw4\">LBound</span>(Arr) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Arr)<br/>      C = 0<br/>      <span class=\"kw2\">Call</span> PerfectShuffle(T, CLng(Arr(X)), C)<br/>      Debug.<span class=\"kw4\">Print</span> Right(<span class=\"kw1\">String</span>(19, <span class=\"st0\">\" \"</span>) &amp; <span class=\"st0\">\"For \"</span> &amp; Arr(X) &amp; <span class=\"st0\">\" cards =&gt; \"</span>, 19) &amp; C &amp; <span class=\"st0\">\" shuffles needed.\"</span><br/>      Erase T<br/>   <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> PerfectShuffle(tb, NbCards <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Count <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>)<br/><span class=\"kw4\">Dim</span> arr1, arr2, StrInit <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, StrTest <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>   tb = CreateArray(1, NbCards)<br/>   StrInit = Join(tb, <span class=\"st0\">\" \"</span>)<br/>   <span class=\"kw3\">Do</span><br/>      Count = Count + 1<br/>      <span class=\"kw2\">Call</span> DivideArr(tb, arr1, arr2)<br/>      tb = RemakeArray(arr1, arr2)<br/>      StrTest = Join(tb, <span class=\"st0\">\" \"</span>)<br/>   <span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> StrTest &lt;&gt; StrInit<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> CreateArray(First <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Length <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, T() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   <span class=\"kw3\">If</span> IsEven(Length) <span class=\"kw3\">Then</span><br/>      <span class=\"kw4\">ReDim</span> T(Length - 1)<br/>      <span class=\"kw3\">For</span> i = First <span class=\"kw3\">To</span> First + Length - 1<br/>         T(C) = i<br/>         C = C + 1<br/>      <span class=\"kw3\">Next</span> i<br/>      CreateArray = T<br/>   <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> DivideArr(A, B, C)<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   B = A<br/>   <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> B(<span class=\"kw4\">UBound</span>(A) \\ 2)<br/>   <span class=\"kw4\">ReDim</span> C(<span class=\"kw4\">UBound</span>(B))<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(C) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(C)<br/>      C(i) = A(i + <span class=\"kw4\">UBound</span>(B) + 1)<br/>   <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> RemakeArray(A1, A2) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, T() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   <span class=\"kw4\">ReDim</span> T((<span class=\"kw4\">UBound</span>(A2) * 2) + 1)<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(T) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(T) - 1 <span class=\"kw3\">Step</span> 2<br/>      T(i) = A1(C)<br/>      T(i + 1) = A2(C)<br/>      C = C + 1<br/>   <span class=\"kw3\">Next</span><br/>   RemakeArray = T<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> IsEven(Number <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    IsEven = (Number <span class=\"kw4\">Mod</span> 2 = 0)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn perfectShuffle(numCards){<br/>   deck,shuffle,n,N:=numCards.pump(List),deck,0,numCards/2;<br/>   do{ shuffle=shuffle[0,N].zip(shuffle[N,*]).flatten(); n+=1 }<br/>   while(deck!=shuffle);<br/>   n<br/>}<br/>foreach n in (T(8,24,52,100,1020,1024,10000)){<br/>   println(\"%5d\u00a0:\u00a0%d\".fmt(n,perfectShuffle(n)));<br/>}</pre>"}]}