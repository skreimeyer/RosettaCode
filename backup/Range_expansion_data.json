{"task": "Range_expansion", "blocks": [{"lang": "8th", "loc": 61, "block": "<pre class=\"text highlighted_source\">\\ Given a low and high limit, create an array containing the numbers in the<br/>\\ range, inclusive:<br/>: n:gen-range \\ low hi -- a<br/>  \\ make sure they are in order:<br/>  2dup n:&gt; if swap then<br/>  \\ fill the array with the values:<br/>  [] ' a:push <br/>  2swap loop\u00a0;<br/>\u00a0<br/>\\ Take a string, either \"X\" or \"X-Y\", and correctly return either a number (if<br/>\\ \"X\") or an array of numbers (if \"X-Y\"):<br/>: n:expand-one \\ s -- n | a[n,..m]<br/>  \\ First see if we can parse a number.  This works in the \"X\" case:<br/>  dup &gt;n null? if<br/>    \\ Failed &gt;n because it's (possibly) \"X-Y\"<br/>    drop<br/>    \\ not a valid number, might be a range<br/>    \\ We'll use a capturing regex to handle the different cases correctly:<br/>    /(-?[0-9]+)-(-?[0-9]+)/ tuck r:match <br/>\u00a0<br/>    \\ If the regex matches three (the whole string, plus the two captured<br/>    \\ expressions) then it's a valid \"X-Y\":<br/>    3 n:= if<br/>      1 r:@ &gt;n swap 2 r:@ &gt;n nip<br/>      \\ generate the range:<br/>      n:gen-range<br/>    else<br/>      \\ The regex didn't match, so we got garbage.  Therefore, return a 'null':<br/>      drop null<br/>    then<br/>  else<br/>    \\ It was a \"X\", just drop the original string:<br/>    nip<br/>  then <br/> \u00a0;<br/>\u00a0<br/>\\ Take an array (possibly) containing other arrays, and flatten any contained<br/>\\ arrays so the result is a simple array:<br/>: a:flatten \\ a1 -- a2<br/>  [] &gt;r<br/>  (<br/>    nip<br/>    array?  if<br/>      a:flatten r&gt; swap a:+ &gt;r<br/>    else<br/>      r&gt; swap a:push &gt;r<br/>    then<br/>  ) a:each drop r&gt;\u00a0;<br/>\u00a0<br/>\\ Take a comma-delimited string of ranges, and expand it into an array of<br/>\\ numbers:<br/>: n:range-expand \\ str -- a<br/>  \",\" s:/<br/>  ' n:expand-one a:map<br/>  a:flatten\u00a0;<br/>\u00a0<br/>\\ Process a list:<br/>\"-6,-3--1,3-5,7-11,14,15,17-20\" <br/>n:range-expand<br/>\\ print the expanded list:<br/>. cr bye</pre>"}, {"lang": "Ada", "loc": 66, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Test_Range_Expansion <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Sequence <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>   <span class=\"kw3\">function</span> Expand <span class=\"br0\">(</span>Text\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Sequence <span class=\"kw1\">is</span><br/>      To   \u00a0: Integer\u00a0:= Text'First;<br/>      Count\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      Low  \u00a0: Integer;<br/>      <span class=\"kw3\">function</span> Get <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>         From\u00a0: Integer\u00a0:= To;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> Text <span class=\"br0\">(</span>To<span class=\"br0\">)</span> = '-' <span class=\"kw1\">then</span><br/>            To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">while</span> To &lt;= Text'Last <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">case</span> Text <span class=\"br0\">(</span>To<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>               <span class=\"kw3\">when</span> ',' | '-' =&gt; <span class=\"kw3\">exit</span>;<br/>               <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">return</span> Integer'Value <span class=\"br0\">(</span>Text <span class=\"br0\">(</span>From..<span class=\"me1\">To</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Get;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> To &lt;= Text'Last <span class=\"kw1\">loop</span> <span class=\"co1\">-- Counting items of the list</span><br/>         Low\u00a0:= Get;<br/>         <span class=\"kw1\">if</span> To &gt; Text'Last <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Text <span class=\"br0\">(</span>To<span class=\"br0\">)</span> = ',' <span class=\"kw1\">then</span><br/>            Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">else</span><br/>            To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>            Count\u00a0:= Count + Get - Low + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result\u00a0: Sequence <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Count</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         Count\u00a0:= <span class=\"nu0\">0</span>;<br/>         To\u00a0:= Text'First;<br/>         <span class=\"kw1\">while</span> To &lt;= Text'Last <span class=\"kw1\">loop</span> <span class=\"co1\">-- Filling the list</span><br/>            Low\u00a0:= Get;<br/>            <span class=\"kw1\">if</span> To &gt; Text'Last <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Text <span class=\"br0\">(</span>To<span class=\"br0\">)</span> = ',' <span class=\"kw1\">then</span><br/>               Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>               Result <span class=\"br0\">(</span>Count<span class=\"br0\">)</span>\u00a0:= Low;<br/>            <span class=\"kw1\">else</span><br/>               To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>               <span class=\"kw1\">for</span> Item <span class=\"kw3\">in</span> Low..<span class=\"me1\">Get</span> <span class=\"kw1\">loop</span><br/>                  Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>                  Result <span class=\"br0\">(</span>Count<span class=\"br0\">)</span>\u00a0:= Item;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            To\u00a0:= To + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">return</span>;<br/>   <span class=\"kw1\">end</span> Expand;<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>S\u00a0: Sequence<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      First\u00a0: Boolean\u00a0:= True;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> S'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> First <span class=\"kw1\">then</span><br/>            First\u00a0:= False;<br/>         <span class=\"kw1\">else</span><br/>            Put <span class=\"br0\">(</span>','<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>S <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/><span class=\"kw1\">begin</span><br/>   Put <span class=\"br0\">(</span>Expand <span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Range_Expansion;</pre>"}, {"lang": "ALGOL 68", "loc": 170, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> YIELDINT <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> RANGE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> lwb<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> RANGEINT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>RANGE<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> SIZEOF <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT list<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/><span class=\"coMULTI\"># determine the length of the output array #</span><br/>  <span class=\"kw3\">INT</span> upb <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> list <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> key <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> list <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">CASE</span> list<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span>RANGE value<span class=\"br0\">)</span><span class=\"sy1\">:</span> upb <span class=\"sy1\">+:=</span> upb <span class=\"kw6\">OF</span> value <span class=\"sy1\">-</span> lwb <span class=\"kw6\">OF</span> value <span class=\"sy1\">+</span> 1<span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> upb <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">ESAC</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  upb<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> gen range expand <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT list<span class=\"sy1\">,</span> YIELDINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">FOR</span> key <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> list <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">CASE</span> list<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span>RANGE range<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw2\">FOR</span> value <span class=\"kw2\">FROM</span> lwb <span class=\"kw6\">OF</span> range <span class=\"kw2\">TO</span> upb <span class=\"kw6\">OF</span> range <span class=\"kw2\">DO</span> yield<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw3\">INT</span> int<span class=\"br0\">)</span><span class=\"sy1\">:</span> yield<span class=\"br0\">(</span>int<span class=\"br0\">)</span><br/>    <span class=\"kw2\">ESAC</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> range expand <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> list<span class=\"sy1\">:</span> <span class=\"kw8\">LWB</span> list <span class=\"sy1\">+</span> SIZEOF <span class=\"me1\">list</span> <span class=\"sy1\">-</span> 1<span class=\"br0\">]</span><span class=\"kw3\">INT</span> out<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> upb <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> out <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># FOR INT value IN #</span> gen range expand<span class=\"br0\">(</span>list<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO #</span><br/><span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span><span class=\"kw3\">INT</span> value<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    out<span class=\"br0\">[</span>upb <span class=\"sy1\">+:=</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> value<br/><span class=\"coMULTI\"># OD #</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#<br/>test:(<br/>  []RANGEINT list = (-6, RANGE(-3, -1), RANGE(3, 5),  RANGE(7, 11), 14, 15, RANGE(17, 20));<br/>  print((range expand(list), new line))<br/>)<br/>#</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># converts string containing a comma-separated list of ranges and values to a []RANGEINT #</span><br/><span class=\"kw4\">OP</span> TORANGE <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT<span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># counts the number of elements - one more than the number of commas #</span><br/>    <span class=\"coMULTI\"># and so assumes there is always at least one element                #</span><br/>    <span class=\"kw4\">PROC</span> count elements <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>        <span class=\"kw3\">INT</span>    elements <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> s<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\",\"</span><br/>            <span class=\"kw2\">THEN</span><br/>                elements <span class=\"sy1\">+:=</span> 1<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># RESULT #</span><br/>        elements<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># count elements #</span><br/>\u00a0<br/>    <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT result <span class=\"sy1\">=</span> <span class=\"kw4\">HEAP</span> <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> count elements <span class=\"br0\">]</span>RANGEINT<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># does the actual parsing - assumes the string is syntatically valid and doesn't check for errors #</span><br/>    <span class=\"coMULTI\"># - in particular, a string with no elements will cause problems, as will space characters in the string #</span><br/>    <span class=\"kw4\">PROC</span> parse range string <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>RANGEINT<span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>        <span class=\"kw3\">INT</span>  element <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>  str pos <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">PROC</span> next       <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> str pos <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">PROC</span> curr char  <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> str pos <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">THEN</span> <span class=\"st0\">\"?\"</span> <span class=\"kw2\">ELSE</span> s<span class=\"br0\">[</span> str pos <span class=\"br0\">]</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw4\">PROC</span> have minus <span class=\"sy1\">=</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> curr char <span class=\"sy1\">=</span> <span class=\"st0\">\"-\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw4\">PROC</span> have digit <span class=\"sy1\">=</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> curr char <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"0\"</span> <span class=\"kw16\">AND</span> curr char <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"9\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"coMULTI\"># parses a number out of the string #</span><br/>        <span class=\"coMULTI\"># the number must be a sequence of digits with an optional leading minus sign #</span><br/>        <span class=\"kw4\">PROC</span> get number <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>        <span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>            <span class=\"kw3\">INT</span> number <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/>            <span class=\"kw3\">INT</span> sign multiplier <span class=\"sy1\">=</span> <span class=\"kw2\">IF</span> have minus<br/>                                  <span class=\"kw2\">THEN</span><br/>                                      <span class=\"coMULTI\"># negaive number #</span><br/>                                      <span class=\"coMULTI\"># skip the sign #</span><br/>                                      next<span class=\"sy1\">;</span><br/>                                      <span class=\"sy1\">-</span>1<br/>                                  <span class=\"kw2\">ELSE</span><br/>                                      <span class=\"coMULTI\"># positive number #</span><br/>                                      1<br/>                                  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">WHILE</span> curr char <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"0\"</span> <span class=\"kw16\">AND</span> curr char <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"9\"</span><br/>            <span class=\"kw2\">DO</span><br/>                number <span class=\"sy1\">*:=</span> 10<span class=\"sy1\">;</span><br/>                number <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> curr char <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                next<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># RESULT #</span><br/>            number <span class=\"sy1\">*</span> sign multiplier<br/>        <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># get number #</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"coMULTI\"># main parsing #</span><br/>        <span class=\"kw2\">WHILE</span> str pos <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> s<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">CHAR</span> c <span class=\"sy1\">=</span> curr char<span class=\"sy1\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">IF</span> have minus <span class=\"kw16\">OR</span> have digit<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># have the start of a number #</span><br/>                <span class=\"kw3\">INT</span> from value <span class=\"sy1\">=</span> get number<span class=\"sy1\">;</span><br/>                element <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> have minus<br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># not a range #</span><br/>                    result<span class=\"br0\">[</span> element <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> from value<br/>                <span class=\"kw2\">ELSE</span><br/>                    <span class=\"coMULTI\"># have a range #</span><br/>                    next<span class=\"sy1\">;</span><br/>                    <span class=\"kw3\">INT</span> to value <span class=\"sy1\">=</span> get number<span class=\"sy1\">;</span><br/>                    result<span class=\"br0\">[</span> element <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> RANGE<span class=\"br0\">(</span> from value<span class=\"sy1\">,</span> to value <span class=\"br0\">)</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"coMULTI\"># should be a comma #</span><br/>                next<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># RESULT #</span><br/>        result<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># parse range string #</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># RESULT #</span><br/>    parse range string<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># TORANGE #</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># converts a []INT to a comma separated string of the elements #</span><br/><span class=\"kw4\">OP</span> TOSTRING <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> values <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw3\">STRING</span> result    <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> separator <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> values <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> values<br/>    <span class=\"kw2\">DO</span><br/>        result <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> separator <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> values<span class=\"br0\">[</span> pos <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        separator <span class=\"sy1\">:=</span> <span class=\"st0\">\",\"</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># RESULT #</span><br/>    result<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># TOSTRING #</span><br/>\u00a0<br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> TOSTRING range expand<span class=\"br0\">(</span> TORANGE <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 133, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- Each comma-delimited string is mapped to a list of integers,</span><br/><span class=\"co1\">-- and these integer lists are concatenated together into a single list</span><br/>\u00a0<br/><span class=\"co1\">-- expansion\u00a0:: String -&gt; [Int]</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">expansion</span><span class=\"br0\">(</span>strExpr<span class=\"br0\">)</span><br/>    <span class=\"co1\">-- The string (between commas) is split on hyphens, </span><br/>    <span class=\"co1\">-- and this segmentation is rewritten to ranges or minus signs</span><br/>    <span class=\"co1\">-- and evaluated to lists of integer values</span><br/>\u00a0<br/>    <span class=\"co1\">-- signedRange\u00a0:: String -&gt; [Int]</span><br/>    <span class=\"kw3\">script</span> signedRange<br/>        <span class=\"co1\">-- After the first character, numbers preceded by an</span><br/>        <span class=\"co1\">-- empty string (resulting from splitting on hyphens)</span><br/>        <span class=\"co1\">-- and interpreted as negative</span><br/>\u00a0<br/>        <span class=\"co1\">-- signedIntegerAppended:: [Int] -&gt; String -&gt; Int -&gt; [Int] -&gt; [Int]</span><br/>        <span class=\"kw3\">on</span> signedIntegerAppended<span class=\"br0\">(</span>lstAccumulator, strNum, iPosn, lst<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> strNum \u2260 <span class=\"st0\">\"\"</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">if</span> iPosn &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>                    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>iPosn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> lst<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                        <span class=\"kw3\">set</span> strSign <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>                    <span class=\"kw3\">else</span><br/>                        <span class=\"kw3\">set</span> strSign <span class=\"kw3\">to</span> <span class=\"st0\">\"-\"</span><br/>                    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                <span class=\"kw3\">else</span><br/>                    <span class=\"kw3\">set</span> strSign <span class=\"kw3\">to</span> <span class=\"st0\">\"+\"</span><br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                lstAccumulator <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>strSign <span class=\"sy0\">&amp;</span> strNum<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                lstAccumulator<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> signedIntegerAppended<br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>strHyphenated<span class=\"br0\">)</span><br/>            tupleRange<span class=\"br0\">(</span>foldl<span class=\"br0\">(</span>signedIntegerAppended, <span class=\"br0\">{</span><span class=\"br0\">}</span>, \u00ac<br/>                splitOn<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, strHyphenated<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    concatMap<span class=\"br0\">(</span>signedRange, splitOn<span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, strExpr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">expansion</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    <span class=\"kw1\">expansion</span><span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {-6, -3, -2, -1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> append<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">&amp;</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>append, <span class=\"br0\">{</span><span class=\"br0\">}</span>, map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: Text -&gt; Text -&gt; [Text]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> xs<br/><span class=\"kw3\">end</span> splitOn<br/>\u00a0<br/><span class=\"co1\">-- range\u00a0:: (Int, Int) -&gt; [Int]</span><br/><span class=\"kw3\">on</span> tupleRange<span class=\"br0\">(</span>tuple<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> tuple <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> tuple &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        enumFromTo<span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> tuple, <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> tuple<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> tuple<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tupleRange</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% expand<span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>expand<span class=\"br0\">(</span> range <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> p <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>range<span class=\"sy0\">,</span> <span class=\"st0\">\"\\s*(-?\\d++)(?:\\s*-\\s*(-?\\d++))?\"</span><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% <span class=\"br0\">(</span><span class=\"kw6\">f2</span>\u00a0? f2<span class=\"sy0\">-</span><span class=\"kw6\">f1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            ret <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw6\">f1</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 22, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span>\t<span class=\"kw3\">FS</span>=<span class=\"st0\">\",\"</span>; <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span>\ts=<span class=\"st0\">\"\"</span>;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">NF</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> expand<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span>; <span class=\"br0\">}</span><br/>\t<span class=\"kw5\">print</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> expand<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tidx = <span class=\"kw4\">match</span><span class=\"br0\">(</span>a,<span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">-/</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>idx<span class=\"sy2\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts = s<span class=\"st0\">\",\"</span>a; \t<br/>\t\t<span class=\"kw6\">return</span>;<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tstart= <span class=\"kw4\">substr</span><span class=\"br0\">(</span>a,<span class=\"nu0\">1</span>, idx<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">0</span>;<br/>\tstop = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>a,idx<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>m = start; m <span class=\"sy2\">&lt;=</span> stop; m<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts = s<span class=\"st0\">\",\"</span>m; \t<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span>;<br/><span class=\"br0\">}</span> </pre>"}, {"lang": "BBC BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">      PRINT FNrangeexpand(\"-6,-3--1,3-5,7-11,14,15,17-20\")<br/>      END<br/>\u00a0<br/>      DEF FNrangeexpand(r$)<br/>      LOCAL i%, j%, k%, t$<br/>      REPEAT<br/>        i% = INSTR(r$, \"-\", i%+1)<br/>        IF i% THEN<br/>          j% = i%<br/>          WHILE MID$(r$,j%-1,1)&lt;&gt;\",\" AND j%&lt;&gt;1<br/>            j% -= 1<br/>          ENDWHILE<br/>          IF i%&gt;j% IF MID$(r$,j%,i%-j%)&lt;&gt;STRING$(i%-j%,\" \") THEN<br/>            t$ = \"\"<br/>            FOR k% = VALMID$(r$,j%) TO VALMID$(r$,i%+1)-1<br/>              t$ += STR$(k%) + \",\"<br/>            NEXT<br/>            r$ = LEFT$(r$,j%-1) + t$ + MID$(r$,i%+1)<br/>            i% = j% + LEN(t$) + 2<br/>          ENDIF<br/>        ENDIF<br/>      UNTIL i% = 0<br/>      = r$</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">  ( expandRanges<br/>  =   a b L<br/>    .     @(\u00a0!arg<br/>          \u00a0:   (#(?a:?b)|#?a \"-\" #?b)<br/>               (:?L|\",\" [%(expandRanges$!sjt:?L))<br/>           )<br/>        &amp;   whl<br/>          ' (   (!L:&amp;!b|(!b,!L))<br/>             \u00a0:\u00a0?L<br/>            &amp; -1+!b:~&lt;!a:?b<br/>            )<br/>        &amp;\u00a0!L<br/>      |<br/>  )<br/>&amp; out$(str$(expandRanges$\"-6,-3--1,3-5,7-11,14,15,17-20\"))<br/>\u00a0</pre>"}, {"lang": "C", "loc": 78, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* BNFesque<br/>\trangelist\u00a0:= (range | number) [',' rangelist]<br/>\trange\u00a0:= number '-' number\t*/</span><br/>\u00a0<br/><span class=\"kw4\">int</span> get_list<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> get_rnge<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* parser only parses; what to do with parsed items is up to<br/>* the add_number and and_range functions */</span><br/><span class=\"kw4\">void</span> add_number<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> add_range<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define skip_space while(isspace(*s)) s++</span><br/><span class=\"co2\">#define get_number(x, s, e) (x = strtol(s, e, 10), *e\u00a0!= s)</span><br/><span class=\"kw4\">int</span> get_list<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>e<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tskip_space<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>get_rnge<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>get_number<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tskip_space<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">','</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> s<span class=\"sy0\">++;</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span>e <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Syntax error at\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> get_rnge<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>e<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ee<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>get_number<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ee<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\ts <span class=\"sy0\">=</span> ee<span class=\"sy0\">;</span><br/>\u00a0<br/>\tskip_space<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">!=</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span>e <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\ts<span class=\"sy0\">++;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>get_number<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> add_range<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> add_number<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> add_range<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;=</span> x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> y<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>end<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* this is correct */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>get_list<span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>end<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ok\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* this is not.  note the subtle error: \"-6 -3\" is parsed<br/>\t * as range(-6, 3), so synax error comes after that */</span><br/>\tget_list<span class=\"br0\">(</span><span class=\"st0\">\"-6 -3--1,3-5,7-11,14,15,17-20\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 30, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text.RegularExpressions</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> rangeString <span class=\"sy0\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> matches <span class=\"sy0\">=</span> Regex<span class=\"sy0\">.</span><span class=\"me1\">Matches</span><span class=\"br0\">(</span>rangeString, <span class=\"st_h\">@\"(?&lt;f&gt;-?\\d+)-(?&lt;s&gt;-?\\d+)|(-?\\d+)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> values <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> m <span class=\"kw1\">in</span> matches<span class=\"sy0\">.</span><span class=\"me1\">OfType</span><span class=\"sy0\">&lt;</span>Match<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m<span class=\"sy0\">.</span><span class=\"me1\">Groups</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Success</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                values<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> start <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span><span class=\"me1\">Groups</span><span class=\"br0\">[</span><span class=\"st0\">\"f\"</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> end <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span><span class=\"me1\">Groups</span><span class=\"br0\">[</span><span class=\"st0\">\"s\"</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            values<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>start, end <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, values<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 74, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;climits&gt;</span><br/><span class=\"co2\">#include &lt;deque&gt;</span><br/>\u00a0<br/><span class=\"co1\">// parse a list of numbers with ranges</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// arguments:</span><br/><span class=\"co1\">//  is:  the stream to parse</span><br/><span class=\"co1\">//  out: the output iterator the parsed list is written to.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// returns true if the parse was successful. false otherwise</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> OutIter<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">bool</span> parse_number_list_with_ranges<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istream</span><span class=\"sy3\">&amp;</span> is, OutIter out<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> number<span class=\"sy4\">;</span><br/>  <span class=\"co1\">// the list always has to start with a number</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>is <span class=\"sy1\">&gt;&gt;</span> number<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"sy2\">*</span>out<span class=\"sy2\">++</span> <span class=\"sy1\">=</span> number<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is <span class=\"sy1\">&gt;&gt;</span> c<span class=\"br0\">)</span><br/>      <span class=\"kw1\">switch</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> <span class=\"st0\">','</span><span class=\"sy4\">:</span><br/>        <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy4\">:</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw4\">int</span> number2<span class=\"sy4\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is <span class=\"sy1\">&gt;&gt;</span> number2<span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number2 <span class=\"sy1\">&lt;</span> number<span class=\"br0\">)</span><br/>              <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>number <span class=\"sy1\">&lt;</span> number2<span class=\"br0\">)</span><br/>              <span class=\"sy2\">*</span>out<span class=\"sy2\">++</span> <span class=\"sy1\">=</span> <span class=\"sy2\">++</span>number<span class=\"sy4\">;</span><br/>            <span class=\"kw4\">char</span> c2<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is <span class=\"sy1\">&gt;&gt;</span> c2<span class=\"br0\">)</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2 <span class=\"sy1\">==</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>              <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span><br/>              <span class=\"kw1\">return</span> is.<span class=\"me1\">eof</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>        <span class=\"kw1\">return</span> is.<span class=\"me1\">eof</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> is.<span class=\"me1\">eof</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// if we get here, something went wrong (otherwise we would have</span><br/>  <span class=\"co1\">// returned from inside the loop)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span> example<span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">deque</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">bool</span> success <span class=\"sy1\">=</span> parse_number_list_with_ranges<span class=\"br0\">(</span>example, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>success<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span>,<br/>              std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"an error occured.\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 24, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> split <span class=\"br0\">[</span>s sep<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">defn</span> skipFirst <span class=\"br0\">[</span><span class=\"br0\">[</span>x <span class=\"sy0\">&amp;</span> xs\u00a0:<span class=\"me1\">as</span> s<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> s<span class=\"br0\">)</span> <span class=\"br0\">[</span>nil nil<span class=\"br0\">]</span><br/>\t      <span class=\"br0\">(</span><span class=\"sy0\">=</span> x sep<span class=\"br0\">)</span>  <span class=\"br0\">[</span>x xs<span class=\"br0\">]</span><br/>\t      true       <span class=\"br0\">[</span>nil s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>lst '<span class=\"br0\">(</span><span class=\"br0\">)</span>, s s<span class=\"br0\">]</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> s<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>hd trunc<span class=\"br0\">]</span> <span class=\"br0\">(</span>skipFirst s<span class=\"br0\">)</span><br/>\t           <span class=\"br0\">[</span>word news<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">split-with</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"sy0\">%</span> sep<span class=\"br0\">)</span> trunc<span class=\"br0\">)</span><br/>\t\t   cWord <span class=\"br0\">(</span><span class=\"kw1\">cons</span> hd word<span class=\"br0\">)</span><span class=\"br0\">]</span>   <br/>\t\t     <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> cWord<span class=\"br0\">)</span> lst<span class=\"br0\">)</span> <br/>\t\t      \t  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> news<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> parseRange <span class=\"br0\">[</span><span class=\"br0\">[</span>x <span class=\"sy0\">&amp;</span> xs\u00a0:<span class=\"me1\">as</span> s<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"sy0\">%</span> \\<span class=\"sy0\">-</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>r0 r1<span class=\"br0\">]</span> <span class=\"br0\">(</span>split s \\<span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>string r0<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>string r1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>list <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>string <span class=\"br0\">(</span><span class=\"kw1\">str</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rangeexpand <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span><span class=\"kw1\">map</span> parseRange <span class=\"br0\">(</span>split s \\,<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>rangeexpand <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 93, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> expand-<span class=\"kw4\">range</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  comma-pos                           <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span> <span class=\"kw3\">COMP</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  dash-pos                            <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  end-num                             <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  Max-Part-Len                        CONSTANT <span class=\"nu0\">10</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  num                                 <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  edited-num                          <span class=\"kw3\">PIC</span> -<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  part                                <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  part-flag                           <span class=\"kw3\">PIC</span> X<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">88</span> last-part                        <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  range-str                           <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  Range-Str-Len                       CONSTANT <span class=\"nu0\">80</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  start-pos                           <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  start-num                           <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">ACCEPT</span> range-str<br/>\u00a0<br/>    <span class=\"kw2\">PERFORM</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">TEST</span> <span class=\"kw3\">AFTER</span> <span class=\"kw2\">UNTIL</span> last-part<br/>        <span class=\"kw3\">UNSTRING</span> range-str <span class=\"kw3\">DELIMITED</span> <span class=\"kw3\">BY</span> <span class=\"st0\">\",\"</span> <span class=\"kw2\">INTO</span> part <span class=\"kw3\">WITH</span> <span class=\"kw3\">POINTER</span> comma-pos<br/>        <span class=\"kw2\">PERFORM</span> check-if-<span class=\"kw3\">last</span><br/>\u00a0<br/>        <span class=\"kw2\">PERFORM</span> find-range-dash<br/>\u00a0<br/>        <span class=\"kw1\">IF</span> dash-pos &gt; Max-Part-Len<br/>            <span class=\"kw2\">PERFORM</span> display-num<br/>        <span class=\"kw3\">ELSE</span><br/>            <span class=\"kw2\">PERFORM</span> display-<span class=\"kw4\">range</span><br/>        END-<span class=\"kw1\">IF</span><br/>    END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>    <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACES</span><br/>\u00a0<br/>    GOBACK<br/>    <span class=\"sy0\">.</span><br/>check-if-<span class=\"kw3\">last</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> comma-pos &gt; Range-Str-Len<br/>        <span class=\"kw3\">SET</span> last-part <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>    END-<span class=\"kw1\">IF</span><br/>    <span class=\"sy0\">.</span><br/>find-range-dash <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> part <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"st0\">\"-\"</span><br/>        <span class=\"kw2\">MOVE</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> start-pos<br/>    <span class=\"kw3\">ELSE</span><br/>        <span class=\"kw2\">MOVE</span> <span class=\"nu0\">2</span> <span class=\"kw2\">TO</span> start-pos<br/>    END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>    <span class=\"kw2\">MOVE</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> dash-pos<br/>    <span class=\"kw1\">INSPECT</span> part <span class=\"br0\">(</span>start-pos:<span class=\"br0\">)</span> <span class=\"kw2\">TALLYING</span> dash-pos <span class=\"kw3\">FOR</span> <span class=\"kw3\">CHARACTERS</span> <span class=\"kw3\">BEFORE</span> <span class=\"st0\">\"-\"</span><br/>    <span class=\"kw2\">COMPUTE</span> dash-pos <span class=\"sy0\">=</span> dash-pos<span class=\"sy0\"> + </span>start-pos<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><br/>    <span class=\"sy0\">.</span><br/>display-num <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> part <span class=\"kw2\">TO</span> edited-num<br/>    <span class=\"kw2\">CALL</span> <span class=\"st0\">\"display-edited-num\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> part-flag<span class=\"sy0\">,</span> edited-num<br/>    <span class=\"sy0\">.</span><br/>display-<span class=\"kw4\">range</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> part <span class=\"br0\">(</span><span class=\"nu0\">1</span>:dash-pos<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> start-num<br/>    <span class=\"kw2\">MOVE</span> part <span class=\"br0\">(</span>dash-pos<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> end-num<br/>\u00a0<br/>    <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> num <span class=\"kw3\">FROM</span> start-num <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> num <span class=\"sy0\">=</span> end-num<br/>        <span class=\"kw2\">MOVE</span> num <span class=\"kw2\">TO</span> edited-num<br/>        <span class=\"kw2\">CALL</span> <span class=\"st0\">\"display-edited-num\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> <span class=\"st0\">\"N\"</span><span class=\"sy0\">,</span> edited-num<br/>    END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>    <span class=\"kw2\">MOVE</span> end-num <span class=\"kw2\">TO</span> edited-num<br/>    <span class=\"kw2\">CALL</span> <span class=\"st0\">\"display-edited-num\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">CONTENT</span> part-flag<span class=\"sy0\">,</span> edited-num<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> expand-<span class=\"kw4\">range</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> display-edited-num<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  hide-comma-flag                     <span class=\"kw3\">PIC</span> X<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">88</span>  hide-<span class=\"kw3\">comma</span>                      <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"Y\"</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  edited-num                          <span class=\"kw3\">PIC</span> -<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> hide-comma-flag<span class=\"sy0\">,</span> edited-num<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>edited-num<span class=\"br0\">)</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw3\">NOT</span> hide-<span class=\"kw3\">comma</span><br/>        <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\", \"</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><br/>    END-<span class=\"kw1\">IF</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> display-edited-num<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> expand-ranges <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop<br/>     with prevnum <span class=\"sy0\">=</span> <span class=\"kw1\">nil</span><br/>     for idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ nextidx<span class=\"br0\">)</span><br/>     for <span class=\"br0\">(</span>number nextidx<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>multiple-value-<span class=\"kw1\">list</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> string<br/>                                            <span class=\"sy0\">:</span><span class=\"me1\">start</span> idx <span class=\"sy0\">:</span><span class=\"me1\">junk-allowed</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>              <span class=\"br0\">(</span>prevnum<br/>               <span class=\"br0\">(</span><span class=\"kw1\">prog1</span><br/>                   <span class=\"br0\">(</span>loop for i from prevnum to number<br/>                      collect i<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> prevnum <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> nextidx <span class=\"br0\">(</span><span class=\"kw1\">length</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>char<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> string nextidx<span class=\"br0\">)</span> #\\-<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">setf</span> prevnum number<span class=\"br0\">)</span><br/>               <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>t<br/>               <span class=\"br0\">(</span><span class=\"kw1\">list</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> nextidx <span class=\"br0\">(</span><span class=\"kw1\">length</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>expand-ranges <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>-<span class=\"nu0\">6</span> -<span class=\"nu0\">3</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> rangeEx <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"coMULTI\">/*pure*/</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">matchAll</span><span class=\"br0\">(</span><span class=\"st_h\">`(-?\\d+)-?(-?\\d+)?,?`</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span>.<span class=\"me1\">iota</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"sy0\">!</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span>.<span class=\"me1\">rangeEx</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 17, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> ExpandRanges<span class=\"br0\">(</span>ranges <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">var</span> range <span class=\"kw1\">in</span> ranges<span class=\"sy1\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">var</span> separator <span class=\"sy3\">=</span> range<span class=\"sy1\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> separator &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> <span class=\"kw1\">var</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> range<span class=\"sy1\">.</span><span class=\"me1\">Left</span><span class=\"br0\">(</span>separator<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">ToInteger</span> <span class=\"kw1\">to</span> range<span class=\"sy1\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span>separator<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">ToInteger</span> <span class=\"kw1\">do</span><br/>            Result<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>         Result<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>range<span class=\"sy1\">.</span><span class=\"me1\">ToInteger</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> expanded <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ExpandRanges<span class=\"br0\">(</span><span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span>JSON<span class=\"sy1\">.</span><span class=\"me1\">Stringify</span><span class=\"br0\">(</span>expanded<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 27, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; parsing [spaces][-]digit(s)-[-]digit(s)[spaces]</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> R <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>regexp <span class=\"st0\">\"^ *(<span class=\"es0\">\\-</span>?<span class=\"es0\">\\\\</span>d+)<span class=\"es0\">\\-</span>(<span class=\"es0\">\\-</span>?<span class=\"es0\">\\\\</span>d+) *$\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; the native (range a b) is [a ... b[</span><br/><span class=\"co1\">;; (range+ a b) is [a ... b]</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>range<span class=\"sy0\">+</span> a b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>range a <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>range a <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">list</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; in\u00a0: string\u00a0: \"number\" or \"number-number\"</span><br/><span class=\"co1\">;; out\u00a0: a range = list of integer(s)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>do<span class=\"sy0\">-</span>range str<span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> from<span class=\"sy0\">-</span>to <span class=\"br0\">(</span>regexp<span class=\"sy0\">-</span>exec R str<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; \"1-3\" --&gt; (\"1\" \"3\")</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> from<span class=\"sy0\">-</span>to <br/>    <span class=\"br0\">(</span>range<span class=\"sy0\">+</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span>first from<span class=\"sy0\">-</span>to<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span>second from<span class=\"sy0\">-</span>to<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ranges str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>apply <span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> do<span class=\"sy0\">-</span>range <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split str <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> task <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ranges task<span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def expansion(range) do<br/>    Enum.flat_map(String.split(range, \",\"), fn part -&gt;<br/>      case Regex.scan(~r/^(-?\\d+)-(-?\\d+)$/, part) do<br/>        [[_,a,b]] -&gt; Enum.to_list(String.to_integer(a) .. String.to_integer(b))<br/>        [] -&gt; [String.to_integer(part)]<br/>      end<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.expansion(\"-6,-3--1,3-5,7-11,14,15,17-20\")</pre>"}, {"lang": "Erlang", "loc": 16, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> range <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>expansion<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">expansion</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">expansion_individual</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span><span class=\"st0\">\"~d\"</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">expansion</span><span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">expansion_individual</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span><span class=\"sy1\">;</span><br/><span class=\"re3\">expansion_individual</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-\"</span> <span class=\"sy3\">++</span> <span class=\"re5\">Stop_string</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">list_to_integer</span><span class=\"br0\">(</span><span class=\"re5\">Stop_string</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 25, "block": "<pre class=\"text highlighted_source\">: &gt;snumber ( str len -- 'str 'len n )<br/>  0. 2swap<br/>  over <a class=\"__cf_email__\" data-cfemail=\"c3a083\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] - = if<br/>    1 /string<br/>    &gt;number 2swap drop<br/>    negate<br/>  else<br/>    &gt;number 2swap drop<br/>  then\u00a0;<br/>\u00a0<br/>: expand ( str len -- )<br/>  begin dup while<br/>    &gt;snumber &gt;r<br/>    dup if over <a class=\"__cf_email__\" data-cfemail=\"771437\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] - = if<br/>      1 /string<br/>      &gt;snumber r&gt; over &gt;r<br/>      do i . loop<br/>    then then<br/>    dup if over <a class=\"__cf_email__\" data-cfemail=\"b2d1f2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] , = if<br/>      1 /string<br/>    then then<br/>    r&gt; .<br/>  repeat 2drop\u00a0;<br/>\u00a0<br/>s\" -6,-3--1,3-5,7-11,14,15,17-20\" expand</pre>"}, {"lang": "Fortran", "loc": 100, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> HOMEONTHERANGE<br/>       <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!The key function.</span><br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">200</span> <span class=\"kw1\">FUNCTION</span> ERANGE<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Expands integer ranges in a list.</span><br/><span class=\"co1\">Can't return a character value of variable size.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The list on input.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">200</span> ALINE\t<span class=\"co1\">!Scratchpad for output.</span><br/>         <span class=\"kw3\">INTEGER</span> N,N1,N2\t<span class=\"co1\">!Numbers in a range.</span><br/>         <span class=\"kw3\">INTEGER</span> I,I1\t\t<span class=\"co1\">!Steppers.</span><br/>          ALINE <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>\t\t<span class=\"co1\">!Scrub the scratchpad.</span><br/>          L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!No text has been placed.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Start at the start.</span><br/>          <span class=\"kw1\">CALL</span> FORASIGN\t\t<span class=\"co1\">!Find something to look at.</span><br/><span class=\"co1\">Chug through another number or number - number range.</span><br/>        R<span class=\"sy0\">:</span><span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>EATINT<span class=\"br0\">(</span>N1<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!If I can grab a first number, a term has begun.</span><br/>            N2 <span class=\"sy0\">=</span> N1\t\t\t<span class=\"co1\">!Make the far end the same.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PASSBY<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> EATINT<span class=\"br0\">(</span>N2<span class=\"br0\">)</span>\t<span class=\"co1\">!A hyphen here is not a minus sign.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> EMIT<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Another, after what went before?</span><br/>            <span class=\"kw1\">DO</span> N <span class=\"sy0\">=</span> N1,N2,<span class=\"kw4\">SIGN</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>,N2 <span class=\"sy0\">-</span> N1<span class=\"br0\">)</span>\t<span class=\"co1\">!Step through the range, possibly backwards.</span><br/>              <span class=\"kw1\">CALL</span> SPLOT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">!Roll a number.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">NE</span>.<span class=\"me1\">N2</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> EMIT<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Perhaps another follows.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t\t<span class=\"co1\">!On to the next number.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">PASSBY</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">EXIT</span> R\t<span class=\"co1\">!More to come?</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span> R\t\t<span class=\"co1\">!So much for a range.</span><br/><span class=\"co1\">Completed the scan. Just return the result.</span><br/>          ERANGE <span class=\"sy0\">=</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span>\t<span class=\"co1\">!Present the result. Fiddling ERANGE is bungled by some compilers.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Some assistants for the scan to save on repetition and show intent.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> FORASIGN\t<span class=\"co1\">!Look for one.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!After a thingy,</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">LE</span>.</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!There may follow spaces.</span><br/>                I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!So,</span><br/>                <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t\t\t\t<span class=\"co1\">!Speed past any.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So that the caller can see</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Whatever substantive character follows.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> FORASIGN\t<span class=\"co1\">!Simple enough.</span><br/>\u00a0<br/>          <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> PASSBY<span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t<span class=\"co1\">!Advances the scan if a certain character is seen.</span><br/><span class=\"co1\">Could consider or ignore case for letters, but this is really for single symbols.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t<span class=\"co1\">!The character.</span><br/>            PASSBY <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!Pessimism.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Can't rely on I.LE.LEN(TEXT) .AND. TEXT(I:I)...</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">C</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Curse possible full evaluation.</span><br/>                PASSBY <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t<span class=\"co1\">!Righto, C is seen.</span><br/>                I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!So advance the scan.</span><br/>                <span class=\"kw1\">CALL</span> FORASIGN\t\t<span class=\"co1\">!And see what follows.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!So much for a match.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!If there is something to be uinspected.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> PASSBY\t<span class=\"co1\">!Can't rely on testing PASSBY within PASSBY either.</span><br/>\u00a0<br/>          <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> EATINT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Convert text into an integer.</span><br/>           <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!The value to be ascertained.</span><br/>           <span class=\"kw3\">INTEGER</span> D\t<span class=\"co1\">!A digit.</span><br/>           <span class=\"kw3\">LOGICAL</span> NEG\t<span class=\"co1\">!In case of a minus sign.</span><br/>            EATINT <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!Pessimism.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!Anything to look at?</span><br/>            N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!Scrub to start with.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PASSBY<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A plus sign here can be ignored.</span><br/>              NEG <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t\t<span class=\"co1\">!So, there's no minus sign.</span><br/>             <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!And if there wasn't a plus,</span><br/>              NEG <span class=\"sy0\">=</span> PASSBY<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!A hyphen here is a minus sign.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!One way or another, NEG is initialised.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!Nothing further! We wuz misled!</span><br/><span class=\"co1\">Chug through digits. Can develop -2147483648, thanks to the workings of two's complement.</span><br/>   <span class=\"nu0\">10</span>       D <span class=\"sy0\">=</span> <span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Hope for a digit.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"me1\">LE</span>.<span class=\"me1\">D</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> D.<span class=\"me1\">LE</span>.9<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Is it one?</span><br/>              N <span class=\"sy0\">=</span> N<span class=\"sy0\">*</span><span class=\"nu0\">10</span> <span class=\"sy0\">+</span> D\t\t\t<span class=\"co1\">!Yes! Assimilate it, negatively.</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!And see what comes next.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for a sequence of digits.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NEG<span class=\"br0\">)</span> N <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>N\t\t<span class=\"co1\">!Apply the minus sign.</span><br/>            EATINT <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t<span class=\"co1\">!Should really check for at least one digit.</span><br/>            <span class=\"kw1\">CALL</span> FORASIGN\t\t<span class=\"co1\">!Ram into whatever follows.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> EATINT\t<span class=\"co1\">!Integers are easy. Could check for no digits seen.</span><br/>\u00a0<br/>          <span class=\"kw1\">SUBROUTINE</span> EMIT<span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t<span class=\"co1\">!Rolls forth one character.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t<span class=\"co1\">!The character.</span><br/>            L <span class=\"sy0\">=</span> L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Advance the finger.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Ran out of ALINE!\"</span>\t<span class=\"co1\">!Maybe not.</span><br/>            ALINE<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span> <span class=\"sy0\">=</span> C\t<span class=\"co1\">!And place the character.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> EMIT\t<span class=\"co1\">!That was simple.</span><br/>\u00a0<br/>          <span class=\"kw1\">SUBROUTINE</span> SPLOT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Rolls forth a signed number.</span><br/>           <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!The number.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">12</span> FIELD\t<span class=\"co1\">!Sufficient for 32-bit integers.</span><br/>           <span class=\"kw3\">INTEGER</span> I\t\t<span class=\"co1\">!A stepper.</span><br/>            WRITE <span class=\"br0\">(</span>FIELD,<span class=\"st0\">\"(I0)\"</span><span class=\"br0\">)</span> N\t<span class=\"co1\">!Roll the number, with trailing spaces.</span><br/>            <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">12</span>\t\t<span class=\"co1\">!Now transfer the ALINE of the number.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FIELD<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">LE</span>.</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">EXIT</span>\t<span class=\"co1\">!Up to the first space.</span><br/>              <span class=\"kw1\">CALL</span> EMIT<span class=\"br0\">(</span>FIELD<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!One by one.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the end.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SPLOT\t<span class=\"co1\">!Not so difficult either.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ERANGE\t<span class=\"co1\">!A bit tricky.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> HOMEONTHERANGE<br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw3\">USE</span> HOMEONTHERANGE<br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span> SOME<br/>      SOME <span class=\"sy0\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/>      SOME <span class=\"sy0\">=</span> ERANGE<span class=\"br0\">(</span>SOME<span class=\"br0\">)</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> SOME\t<span class=\"co1\">!If ERANGE(SOME) then the function usually can't write output also.</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 75, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> split <span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, sepList <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, result<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> OrElse sepList = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <br/>     <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>     result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>     <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, count = <span class=\"nu0\">0</span>, empty = <span class=\"nu0\">0</span>, length<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> position<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  position<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sepList<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = sepList<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> <br/>        count += <span class=\"nu0\">1</span><br/>        position<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = i + <span class=\"nu0\">1</span>       <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> count  = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>    <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>  position<span class=\"br0\">(</span>count + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count + <span class=\"nu0\">1</span>  <br/>    length = position<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <br/>    result<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s, position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, length<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> expandRange<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> c<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> <br/>  <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"\"</span> <br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> start = <span class=\"nu0\">0</span>, finish = <span class=\"nu0\">0</span>, length<br/>  split s, <span class=\"st0\">\",\"</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    split b<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\"-\"</span>, c<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    length = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> length = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <br/>      start  = ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      finish = start<br/>    <span class=\"kw1\">ElseIf</span> length = <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"st0\">\"-\"</span> <span class=\"kw1\">Then</span><br/>         start  = -ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         finish = start<br/>       <span class=\"kw1\">Else</span><br/>         start  = ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         finish = ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">ElseIf</span> length = <span class=\"nu0\">3</span> <span class=\"kw1\">Then</span><br/>      start  = -ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      finish = ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Else</span> <br/>      start  = -ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      finish = -ValLng<span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = start <span class=\"kw1\">To</span> finish<br/>      result += <span class=\"kw1\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> + <span class=\"st0\">\", \"</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>result, <span class=\"kw1\">Len</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> - <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">'' get rid of final \", \"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/><span class=\"kw1\">Print</span> expandRange<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/>\u00a0<br/><span class=\"co1\">// simplify regex matching with an active pattern</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>|Regexp|_|<span class=\"br0\">)</span> pattern txt <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> Regex.<span class=\"me1\">Match</span><span class=\"br0\">(</span>txt, pattern<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>    | m <span class=\"kw1\">when</span> m.<span class=\"me1\">Success</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"kw1\">for</span> g <span class=\"kw1\">in</span> m.<span class=\"me1\">Groups</span> <span class=\"sy0\">-&gt;</span> g.<span class=\"me1\">Value</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tail</span> <span class=\"sy0\">|&gt;</span> Some<br/>    | _                <span class=\"sy0\">-&gt;</span> None<br/>\u00a0<br/><span class=\"co1\">// Parse and expand a single range description.</span><br/><span class=\"co1\">// string -&gt; int list</span><br/><span class=\"kw1\">let</span> parseRange r <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> r <span class=\"kw1\">with</span><br/>  | Regexp <span class=\"st_h\">@\"^(-?\\d+)-(-?\\d+)$\"</span> <span class=\"br0\">[</span>first<span class=\"sy0\">;</span> last<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"kw4\">int</span> first..<span class=\"kw4\">int</span> last<span class=\"br0\">]</span><br/>  | Regexp <span class=\"st_h\">@\"^(-?\\d+)$\"</span>         <span class=\"br0\">[</span><span class=\"kw4\">single</span><span class=\"br0\">]</span>      <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"kw4\">int</span> <span class=\"kw4\">single</span><span class=\"br0\">]</span><br/>  | _ <span class=\"sy0\">-&gt;</span> failwithf <span class=\"st0\">\"illegal range format:\u00a0%s\"</span> r<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> expand <span class=\"br0\">(</span>desc:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  desc.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">ofArray</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span> parseRange<br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>expand <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 64, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> input <span class=\"sy2\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"range:\"</span><span class=\"sy1\">,</span> input<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> r <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> last <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> part <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>input<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>part<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> <span class=\"st0\">\"-\"</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            n<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>part<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> last <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"duplicate value:\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> last &gt; n <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"values not ordered:\"</span><span class=\"sy1\">,</span> last<span class=\"sy1\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>            last <span class=\"sy2\">=</span> n<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            n1<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>part<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            n2<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>part<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">:])</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> n2 &lt; n1<span class=\"sy3\">+</span><span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"invalid range:\"</span><span class=\"sy1\">,</span> part<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> last <span class=\"sy3\">==</span> n1 <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"duplicate value:\"</span><span class=\"sy1\">,</span> n1<span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> last &gt; n1 <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"values not ordered:\"</span><span class=\"sy1\">,</span> last<span class=\"sy1\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy1\">,</span> n1<span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> n1<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n2<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>            last <span class=\"sy2\">=</span> n2<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"expanded:\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> expandRanges <span class=\"sy0\">=</span> <span class=\"br0\">{</span> compressed <span class=\"sy0\">-&gt;</span><br/>    Eval.<span class=\"me1\">me</span><span class=\"br0\">(</span><span class=\"st0\">'['</span><span class=\"sy0\">+</span>compressed.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>~/<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span><span class=\"sy0\">-</span>/, <span class=\"st0\">'$1..'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">']'</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"sy0\">&gt;</span> expandRange <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"sy0\">,-</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Input string     \u00a0:= \"</span><span class=\"sy1\">,</span>s<span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Expanded list  \u00a0:= \"</span><span class=\"sy1\">,</span> list2string<span class=\"br0\">(</span>range_expand<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"FAILED\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> range_expand<span class=\"br0\">(</span>s<span class=\"br0\">)</span>          <span class=\"co1\">#: return list of integers extracted from an ordered string representation</span><br/><span class=\"kw2\">local</span> R<span class=\"sy1\">,</span>low<span class=\"sy1\">,</span>high<br/>R <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>s <span class=\"sy1\">?</span> <span class=\"kw1\">until</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">put</span><span class=\"br0\">(</span>R<span class=\"sy1\">,</span>low <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">',-'</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">|</span> <span class=\"kw1\">fail</span><span class=\"br0\">)</span>           <span class=\"co1\"># get lower bound</span><br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">=</span><span class=\"st0\">\"-\"</span> <span class=\"sy1\">||</span> <span class=\"br0\">(</span>high <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"kw1\">fail</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">until</span> low <span class=\"sy1\">=</span> high <span class=\"kw1\">do</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>R<span class=\"sy1\">,</span>low <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>                  <span class=\"co1\"># find range</span><br/>   <span class=\"sy1\">=</span><span class=\"st0\">\",\"</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> R<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> list2string<span class=\"br0\">(</span>L<span class=\"br0\">)</span>        <span class=\"co1\">#: helper function to convert a list to a string</span><br/><span class=\"kw2\">local</span> s<br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">!</span>L <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><br/>   <span class=\"kw1\">return</span> s <span class=\"sy1\">||</span> <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings'</span><br/>thru=: &lt;. + <a class=\"__cf_email__\" data-cfemail=\"4b22650b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>+*<span class=\"sy0\">)</span>@-~<br/>num=: <span class=\"nu0\">_</span>&amp;\".<br/>normaliz=: rplc&amp;<span class=\"sy0\">(</span><span class=\"st_h\">',-'</span>;<span class=\"st_h\">',_'</span>;<span class=\"st_h\">'--'</span>;<span class=\"st_h\">'-_'</span><span class=\"sy0\">)</span>@,~&amp;<span class=\"st_h\">','</span><br/>subranges=:&lt;@<span class=\"sy0\">(</span>thru/<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>num;.<span class=\"nu0\">_2</span><span class=\"sy0\">)</span>@,&amp;<span class=\"st_h\">'-'</span>;.<span class=\"nu0\">_1</span><br/>rngexp=:\u00a0;@<a class=\"__cf_email__\" data-cfemail=\"8cfff9eefeede2ebe9ffcce2e3fee1ede0e5f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 65, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RangeExpander <span class=\"kw1\">implements</span> Iterator<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span>, Iterable<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> Pattern TOKEN_PATTERN <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"([+-]?<span class=\"es0\">\\\\</span>d+)-([+-]?<span class=\"es0\">\\\\</span>d+)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> Iterator<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> tokensIterator<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> inRange<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> upperRangeEndpoint<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> nextRangeValue<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> RangeExpander<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> tokens <span class=\"sy0\">=</span> range.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s*,<span class=\"es0\">\\\\</span>s*\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">tokensIterator</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>tokens<span class=\"br0\">)</span>.<span class=\"me1\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> hasNextRangeValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">this</span>.<span class=\"me1\">tokensIterator</span>.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> hasNextRangeValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">inRange</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">nextRangeValue</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">upperRangeEndpoint</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchelementexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchElementException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hasNextRangeValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">nextRangeValue</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> token <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">tokensIterator</span>.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Matcher matcher <span class=\"sy0\">=</span> TOKEN_PATTERN.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matcher.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">inRange</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">upperRangeEndpoint</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">nextRangeValue</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">nextRangeValue</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">inRange</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> Iterator<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> iterator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RangeExpanderTest <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        RangeExpander re <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RangeExpander<span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">:</span> re<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 35, "block": "<pre class=\"javascript highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env js<br/>\u00a0<br/><span class=\"kw1\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span>rangeExpand<span class=\"br0\">(</span><span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> rangeExpand<span class=\"br0\">(</span>rangeExpr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> getFactors<span class=\"br0\">(</span>term<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> matches <span class=\"sy0\">=</span> term.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"co2\">/(-?[0-9]+)-(-?[0-9]+)/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>matches<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span>first<span class=\"sy0\">:</span><span class=\"kw4\">Number</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span>first<span class=\"sy0\">:</span><span class=\"kw4\">Number</span><span class=\"br0\">(</span>matches<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> last<span class=\"sy0\">:</span><span class=\"kw4\">Number</span><span class=\"br0\">(</span>matches<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> expandTerm<span class=\"br0\">(</span>term<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> factors <span class=\"sy0\">=</span> getFactors<span class=\"br0\">(</span>term<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factors.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>factors.<span class=\"me1\">first</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> range <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> factors.<span class=\"me1\">first</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> factors.<span class=\"me1\">last</span><span class=\"sy0\">;</span>  n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            range.<span class=\"me1\">push</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> range<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> terms <span class=\"sy0\">=</span> rangeExpr.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"co2\">/,/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> t <span class=\"kw1\">in</span> terms<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> result.<span class=\"me1\">concat</span><span class=\"br0\">(</span>expandTerm<span class=\"br0\">(</span>terms<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\">def expand_range:<br/>  def number: \"-?[0-9]+\";<br/>  def expand: [range(.[0]; .[1] + 1)];<br/>\u00a0<br/>  split(\",\")<br/>  | reduce .[] as $r<br/>      ( []; . +<br/>            ($r | if test(\"^\\(number)$\") then [tonumber]<br/>                  else sub( \"(?&lt;x&gt;\\(number))-(?&lt;y&gt;\\(number))\"; \"\\(.x):\\(.y)\")<br/>                  | split(\":\") | map(tonumber) | expand<br/>\t          end));</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">slurp(s) = readcsv(IOBuffer(s))<br/>\u00a0<br/>conv(s)= colon(map(x-&gt;parse(Int,x),match(r\"^(-?\\d+)-(-?\\d+)$\", s).captures)...)<br/>\u00a0<br/>expand(s) = mapreduce(x -&gt; isa(x,Number)? Int(x)\u00a0: conv(x), vcat, slurp(s))</pre>"}, {"lang": "K", "loc": 5, "block": "<pre class=\"text highlighted_source\">grp\u00a0: {1_'(&amp;x=*x)_ x:\",\",x}<br/>pos\u00a0: {:[3=l:#p:&amp;\"-\"=x;0,<a class=\"__cf_email__\" data-cfemail=\"85f5c5b4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;2=l;p;0=*p;,0;0,p]}<br/>conv: 0${(x;1_ y)}/'{(pos x)_ x}'<br/>expd: {,/@[x;&amp;2=#:'x;{(*x)+!1+,/-':x}]}<br/>rnge: {<a class=\"__cf_email__\" data-cfemail=\"b3d6cbc3d7f3d0dcddc5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> grp x}</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun expandRange<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> items <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> first<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> last<span class=\"sy0\">:</span>  Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>item in items<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count <span class=\"sy0\">=</span> item.<span class=\"me1\">count</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            list.<span class=\"me1\">add</span><span class=\"br0\">(</span>item.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> items2 <span class=\"sy0\">=</span> item.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                first <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                last  <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>            <br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                first <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> -<span class=\"nu0\">1</span><br/>                last  <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                first <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> -<span class=\"nu0\">1</span><br/>                last  <span class=\"sy0\">=</span> items2<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> -<span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in first..<span class=\"me1\">last</span><span class=\"br0\">)</span> list.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> list<br/><span class=\"br0\">}</span>  <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/>    println<span class=\"br0\">(</span>expandRange<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 13, "block": "<pre class=\"text highlighted_source\">define range_expand(expression::string) =&gt; {<br/>    local(parts) = regexp(`^(-?\\d+)-(-?\\d+)$`)<br/>\u00a0<br/>    return (<br/>        with elm in #expression-&gt;split(`,`)<br/>        let isRange = #parts-&gt;setInput(#elm)&amp;matches<br/>        select #isRange<br/>           \u00a0? (integer(#parts-&gt;matchString(1)) to integer(#parts-&gt;matchString(2)))-&gt;asString<br/>            | integer(#elm)-&gt;asString<br/>    )-&gt;join(', ')<br/>}<br/>\u00a0<br/>range_expand(`-6,-3--1,3-5,7-11,14,15,17-20`)</pre>"}, {"lang": "Liberty BASIC", "loc": 23, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> ExpandRange$<span class=\"br0\">(</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ExpandRange$<span class=\"br0\">(</span> compressed$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> ItemCount<span class=\"br0\">(</span> compressed$<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        item$ <span class=\"sy0\">=</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> compressed$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        dash  <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> item$<span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">'dash that is not the first character, is a separator</span><br/>        <span class=\"kw1\">if</span> dash <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span> item$<span class=\"sy0\">,</span> dash <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> item$<span class=\"sy0\">,</span> dash <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                ExpandRange$ <span class=\"sy0\">=</span> ExpandRange$ <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span> k<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span><br/>            <span class=\"kw1\">next</span> k<br/>        <span class=\"kw1\">else</span><br/>            ExpandRange$ <span class=\"sy0\">=</span> ExpandRange$ <span class=\"sy0\">+</span> item$ <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> i<br/>    ExpandRange$ <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span> ExpandRange$<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> ExpandRange$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ItemCount<span class=\"br0\">(</span> list$<span class=\"sy0\">,</span> separator$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span>list$<span class=\"sy0\">,</span> ItemCount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> separator$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>        ItemCount <span class=\"sy0\">=</span> ItemCount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 21, "block": "<pre class=\"text highlighted_source\">-- Note: currently does not support extra white space in input string<br/>on expandRange (str)<br/>  res = \"\"<br/>  _player.itemDelimiter = \",\"<br/>  cnt = str.item.count<br/>  repeat with i = 1 to cnt<br/>    part = str.item[i]<br/>    pos = offset(\"-\", part.char[2..part.length])<br/>    if pos&gt;0 then<br/>      a = integer(part.char[1..pos])<br/>      b = integer(part.char[pos+2..part.length])<br/>      repeat with j = a to b<br/>        put j&amp;\",\" after res<br/>      end repeat<br/>    else<br/>      put part&amp;\",\" after res<br/>    end if<br/>  end repeat<br/>  delete the last char of res<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 38, "block": "<pre class=\"text highlighted_source\">function range beginning ending stepping<br/>    local tRange, tBegin, tEnd, tstep<br/>    if stepping is empty or stepping is 0 then<br/>        put 1 into tstep<br/>    else<br/>        put abs(stepping) into tstep<br/>    end if<br/>\u00a0<br/>    if ending is empty or isNumber(ending) is not true then<br/>        put 0 into tEnd<br/>    else<br/>        put ending into tEnd<br/>    end if<br/>\u00a0<br/>    if beginning is empty or isNumber(beginning) is not true then<br/>        put 0 into tBegin<br/>    else<br/>        put beginning into tBegin<br/>    end if<br/>\u00a0<br/>    repeat with r = tBegin to tEnd step tstep<br/>        put space &amp; r after tRange<br/>    end repeat<br/>    return word 1 to -1 of tRange<br/>end range<br/>\u00a0<br/>function expandRange rangeExpr<br/>    put rangeExpr into tRange<br/>    split tRange by comma<br/>    repeat with n = 1 to the number of elements of tRange<br/>        if matchText(tRange[n],\"^(\\-*\\d+)\\-(\\-*\\d+)\",beginning, ending) then<br/>            put range(beginning, ending, 1) &amp; space after z<br/>        else<br/>            put tRange[n] &amp; space after z<br/>        end if<br/>    end repeat<br/>    return z<br/>end expandRange</pre>"}, {"lang": "Lua", "loc": 28, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> range<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> i<span class=\"sy0\">&lt;</span>j <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        t<span class=\"br0\">[</span><span class=\"sy0\">#</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> expand_ranges<span class=\"br0\">(</span>rspec<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ptn <span class=\"sy0\">=</span> <span class=\"st0\">\"([-+]?%d+)%s?-%s?([-+]?%d+)\"</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>gmatch<span class=\"br0\">(</span>rspec<span class=\"sy0\">,</span> <span class=\"st0\">'[^,]+'</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> s<span class=\"sy0\">,</span> e <span class=\"sy0\">=</span> v<span class=\"sy0\">:</span>match<span class=\"br0\">(</span>ptn<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> s <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>            t<span class=\"br0\">[</span><span class=\"sy0\">#</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> n <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>range<span class=\"br0\">(</span><span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                t<span class=\"br0\">[</span><span class=\"sy0\">#</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> ranges <span class=\"sy0\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>expand_ranges<span class=\"br0\">(</span>ranges<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ExpandRanges\u00a0:= proc( s\u00a0:: string )<br/>  uses  StringTools;<br/>  local DoOne\u00a0:= proc( input )<br/>    uses StringTools;<br/>    local lo, hi, pos;<br/>    if IsDigit( input ) or input[ 1 ] = \"-\"<br/>     and IsDigit( input[ 2 .. -1 ] ) then<br/>      parse( input )<br/>    else<br/>      pos\u00a0:= Search( \"--\", input );<br/>      if pos &gt; 0 then<br/>        lo\u00a0:= input[ 1 .. pos - 1 ];<br/>        hi\u00a0:= input[ 1 + pos .. -1 ];<br/>      elif input[ 1 ] = \"-\" then<br/>        pos\u00a0:= FirstFromLeft( \"-\", input[ 2 .. -1 ] );<br/>        if pos = 0 then<br/>          lo\u00a0:= input;<br/>          hi\u00a0:= lo<br/>        else<br/>          lo\u00a0:= input[ 1 .. pos ];<br/>          hi\u00a0:= input[ 2 + pos .. -1 ];<br/>        end if;<br/>      else<br/>        pos\u00a0:= FirstFromLeft( \"-\", input );<br/>        if pos = 0 then<br/>          error \"incorrect syntax\"<br/>        end if;<br/>        lo\u00a0:= input[ 1 .. pos - 1 ];<br/>        hi\u00a0:= input[ 1 + pos .. -1 ];<br/>      end if;<br/>      lo\u00a0:= parse( lo );<br/>      hi\u00a0:= parse( hi );<br/>      seq( lo .. hi )<br/>    end if<br/>  end proc:<br/>  map( DoOne, map( Trim, Split( s, \",\" ) ) )<br/>end proc:<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">rangeexpand[ rng_ ]\u00a0:= Module[ { step1 },<br/>step1 = StringSplit[StringReplacePart[rng,\"S\",StringPosition[ rng,DigitCharacter~~\"-\"] /. {x_,y_} -&gt; {y,y}],\",\"];<br/><a class=\"__cf_email__\" data-cfemail=\"03456f627777666d43576c467b73716670706a6c6d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/@<a class=\"__cf_email__\" data-cfemail=\"4213372b2736021136302b2c251027322e232127\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[step1,x__~~\"S\"~~y__-&gt;\"Range[\"&lt;&gt;x&lt;&gt;\",\"&lt;&gt;y&lt;&gt;\"]\"] ]</pre>"}, {"lang": "MATLAB / Octave", "loc": 13, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> L=range_expansion<span class=\"br0\">(</span>S<span class=\"br0\">)</span><br/><span class=\"co1\">% Range expansion</span><br/><span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> &lt; <span class=\"nu0\">1</span>; <br/>\tS=<span class=\"co2\">'[]'</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>isdigit<span class=\"br0\">(</span>S<span class=\"br0\">)</span> | <span class=\"br0\">(</span>S==<span class=\"co2\">'-'</span><span class=\"br0\">)</span>  | <span class=\"br0\">(</span>S==<span class=\"co2\">','</span><span class=\"br0\">)</span> | isspace<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'invalid input'</span>;<br/><span class=\"kw1\">end</span><br/>ixr = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>isdigit<span class=\"br0\">(</span>S<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; S<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> == <span class=\"co2\">'-'</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>;<br/>S<span class=\"br0\">(</span>ixr<span class=\"br0\">)</span>=<span class=\"co2\">':'</span>;<br/>S=<span class=\"br0\">[</span><span class=\"co2\">'['</span>,S,<span class=\"co2\">']'</span><span class=\"br0\">]</span>;<br/>L=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span>S<span class=\"br0\">)</span>;</pre>"}, {"lang": "MUMPS", "loc": 10, "block": "<pre class=\"text highlighted_source\">RANGEXP(X)\u00a0;Integer range expansion<br/> NEW Y,I,J,X1,H SET Y=\"\"<br/> FOR I=1:1:$LENGTH(X,\",\") DO<br/> .S X1=$PIECE(X,\",\",I) FOR  Q:$EXTRACT(X1)'=\" \"  S X1=$EXTRACT(X1,2,$LENGTH(X1))\u00a0;clean up leading spaces<br/> .SET H=$FIND(X1,\"-\")-1<br/> .IF H=1 SET H=$FIND(X1,\"-\",(H+1))-1\u00a0;If the first value is negative ignore that \"-\"<br/> .IF H&lt;0 SET Y=$SELECT($LENGTH(Y)=0:Y_X1,1:Y_\",\"_X1)<br/> .IF '(H&lt;0) FOR J=+$EXTRACT(X1,1,(H-1)):1:+$EXTRACT(X1,(H+1),$LENGTH(X1)) SET Y=$SELECT($LENGTH(Y)=0:J,1:Y_\",\"_J)<br/> KILL I,J,X1,H<br/> QUIT Y</pre>"}, {"lang": "NetRexx", "loc": 35, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/*NetRexx program to expand a range of integers into a list. *************<br/>* 09.08.2012 Walter Pachl derived from my Rexx version<br/>* Changes: translate(old,' ',',') -&gt; old.translate(' ',',')<br/>*          dashpos=pos('-',x,2)   -&gt; dashpos=x.pos('-',2)<br/>*          Do                     -&gt; Loop<br/>*          Parse Var a x a        -&gt; Parse a x a<br/>*          Parse Var x ...        -&gt; Parse x ...<br/>**********************************************************************/</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> arg old<br/><span class=\"kw1\">if</span> old = <span class=\"st0\">''</span> <span class=\"kw3\">then</span><br/>  old=<span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span> <span class=\"coMULTI\">/*original list of nums/ranges */</span><br/>\u00a0<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'old='</span>old                     <span class=\"coMULTI\">/*show old list of nums/ranges.  */</span><br/>  a=old.<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"st0\">','</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*translate commas to blanks     */</span><br/>  new=<span class=\"st0\">''</span>                            <span class=\"coMULTI\">/*new list of numbers (so far).  */</span><br/>\u00a0<br/>  comma=<span class=\"st0\">''</span><br/>  <span class=\"kw1\">Loop</span> While a<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span>                  <span class=\"coMULTI\">/* as long as there is input     */</span><br/>    <span class=\"kw1\">Parse</span> a x a                     <span class=\"coMULTI\">/* get one element               */</span><br/>    dashpos=x.<span class=\"me0\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* find position of dash, if any */</span><br/>    <span class=\"kw1\">If</span> dashpos<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>            <span class=\"coMULTI\">/* element is low-high           */</span><br/>      <span class=\"kw1\">Parse</span> x low =<span class=\"br0\">(</span>dashpos<span class=\"br0\">)</span> +<span class=\"nu0\">1</span> high <span class=\"coMULTI\">/* split the element        */</span><br/>      <span class=\"kw1\">Loop</span> j=low To high            <span class=\"coMULTI\">/* output all numbers in range   */</span><br/>        new=new<span class=\"sy0\">||</span>comma<span class=\"sy0\">||</span>j           <span class=\"coMULTI\">/* with separating commas        */</span><br/>        comma=<span class=\"st0\">','</span>                   <span class=\"coMULTI\">/* from now on use comma         */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span>                         <span class=\"coMULTI\">/* element is a number           */</span><br/>      new=new<span class=\"sy0\">||</span>comma<span class=\"sy0\">||</span>x             <span class=\"coMULTI\">/* append (with comma)           */</span><br/>      comma=<span class=\"st0\">','</span>                     <span class=\"coMULTI\">/* from now on use comma         */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'new='</span>new                     <span class=\"coMULTI\">/*show the expanded list         */</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">import parseutils, re, strutils<br/>\u00a0<br/>proc expandRange(input: string): string =<br/>  var output: seq[string] = @[]<br/>  for range in input.split(','):<br/>    var sep = range.find('-', 1)<br/>    if sep &gt; 0: # parse range<br/>      var first = -1<br/>      if range.substr(0, sep-1).parseInt(first) == 0:<br/>        break<br/>      var last = -1<br/>      if range.substr(sep+1).parseInt(last) == 0:<br/>        break<br/>      for i in first..last:<br/>        output.add($i)<br/>    else: # parse single number<br/>      var n = -1<br/>      if range.parseInt(n) &gt; 0:<br/>        output.add($n)<br/>      else:<br/>        break<br/>  return output.join(\",\")<br/>\u00a0<br/>echo(\"-6,-3--1,3-5,7-11,14,15,17-20\".expandRange)</pre>"}, {"lang": "Oberon-2", "loc": 238, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> LIVector;<br/><span class=\"kw1\">IMPORT</span> SYSTEM;<br/><span class=\"kw1\">TYPE</span><br/>\tLIPool <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\tLIVector<span class=\"sy0\">*=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIVectorDesc;<br/>\tLIVectorDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tcap<span class=\"sy0\">-:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tlen<span class=\"sy0\">-:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tLIPool<span class=\"sy0\">:</span> LIPool;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> LIVector<span class=\"br0\">)</span> Init<span class=\"sy0\">*</span><span class=\"br0\">(</span>cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tv.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> cap;<br/>\t\tv.<span class=\"me1\">len</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> LIVector<span class=\"br0\">)</span> Add<span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span> <br/>\t\tnewLIPool<span class=\"sy0\">:</span> LIPool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> v.<span class=\"me1\">len</span> <span class=\"sy0\">=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span>^<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t<span class=\"coMULTI\">(* run out of space *)</span><br/>\t\t\tv.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> v.<span class=\"me1\">cap</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>v.<span class=\"me1\">cap</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>newLIPool<span class=\"sy0\">,</span>v.<span class=\"me1\">cap</span><span class=\"br0\">)</span>;<br/>\t\t\tSYSTEM.<span class=\"me1\">MOVE</span><span class=\"br0\">(</span>SYSTEM.<span class=\"me1\">ADR</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span>^<span class=\"br0\">)</span><span class=\"sy0\">,</span>SYSTEM.<span class=\"me1\">ADR</span><span class=\"br0\">(</span>newLIPool^<span class=\"br0\">)</span><span class=\"sy0\">,</span>v.<span class=\"me1\">cap</span> <span class=\"sy0\">*</span> <span class=\"kw3\">SIZE</span><span class=\"br0\">(</span><span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t\tv.<span class=\"me1\">LIPool</span> <span class=\"sy0\">:=</span> newLIPool<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tv.<span class=\"me1\">LIPool</span><span class=\"br0\">[</span>v.<span class=\"me1\">len</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> x;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>v.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> Add;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> LIVector<span class=\"br0\">)</span> At<span class=\"sy0\">*</span><span class=\"br0\">(</span>idx<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> v.<span class=\"me1\">LIPool</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span> At;<br/><span class=\"kw1\">END</span> LIVector.<br/>\u00a0<br/><span class=\"kw1\">MODULE</span> LIRange;<br/><span class=\"kw1\">IMPORT</span> Out<span class=\"sy0\">,</span> LIV <span class=\"sy0\">:=</span> LIVector;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tRange<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> RangeDesc;<br/>\tRangeDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tl<span class=\"sy0\">,</span>r<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">1</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> Init<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tr.<span class=\"me1\">l</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\tr.<span class=\"me1\">r</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> IsEmpty<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>r.<span class=\"me1\">l</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>r.<span class=\"me1\">l</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> IsEmpty;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> SetLeft<span class=\"sy0\">*</span><span class=\"br0\">(</span>v<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">l</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r.<span class=\"me1\">l</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tr.<span class=\"me1\">l</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> v;<br/>\t<span class=\"kw1\">END</span> SetLeft;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> SetRight<span class=\"sy0\">*</span><span class=\"br0\">(</span>v <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r.<span class=\"me1\">r</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tr.<span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> v;<br/>\t<span class=\"kw1\">END</span> SetRight;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> LeftPart<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> r.<span class=\"me1\">l</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> LeftPart;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> GetLeft<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> r.<span class=\"me1\">l</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span>\tGetLeft;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> RightPart<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> r.<span class=\"me1\">l</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> RightPart;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> GetRight<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> r.<span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span>\tGetRight;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> Show<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tOut.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">'('</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">l</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>r.<span class=\"me1\">l</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" - \"</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">r</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>r.<span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>; <span class=\"kw1\">END</span>;<br/>\t\tOut.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">')'</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> Show;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Range<span class=\"br0\">)</span> Expand<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw1\">VAR</span> liv<span class=\"sy0\">:</span> LIV.<span class=\"me1\">LIVector</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span> <br/>\t\tfrom<span class=\"sy0\">,</span> to <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">l</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> from <span class=\"sy0\">:=</span> r.<span class=\"me1\">l</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">ELSE</span> from <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">IF</span> r.<span class=\"me1\">r</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> to <span class=\"sy0\">:=</span> r.<span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">ELSE</span> to <span class=\"sy0\">:=</span> from <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>from &lt;<span class=\"sy0\">=</span> to<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tliv.<span class=\"me1\">Add</span><span class=\"br0\">(</span>from<span class=\"br0\">)</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>from<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Expand;<br/><span class=\"kw1\">END</span> LIRange.<br/>\u00a0<br/><span class=\"kw1\">MODULE</span> Splitter;<br/><span class=\"kw1\">TYPE</span><br/>\tSplitter<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> SplitterDesc;<br/>\tSplitterDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tfrom<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tc<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\t\ts<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Splitter<span class=\"br0\">)</span> Init<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\ts.<span class=\"me1\">c</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">','</span>;<br/>\t\ts.<span class=\"me1\">from</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\ts.<span class=\"me1\">s</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Splitter<span class=\"br0\">)</span> On<span class=\"sy0\">*</span><span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\ts.<span class=\"me1\">from</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>s.<span class=\"me1\">s</span><span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw3\">COPY</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>s.<span class=\"me1\">s</span>^<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> On;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Splitter<span class=\"br0\">)</span> OnWithChar<span class=\"sy0\">*</span><span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;c<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\ts.<span class=\"me1\">from</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\ts.<span class=\"me1\">c</span> <span class=\"sy0\">:=</span> c;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>s.<span class=\"me1\">s</span><span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw3\">COPY</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>s.<span class=\"me1\">s</span>^<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> OnWithChar;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Splitter<span class=\"br0\">)</span> Next<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw1\">VAR</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span> <br/>\t\tk <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;\t<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tk <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">from</span> &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s.<span class=\"me1\">s</span>^<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">s</span><span class=\"br0\">[</span>s.<span class=\"me1\">from</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0X<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X <span class=\"kw1\">END</span>; <br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>k &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">from</span> &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s.<span class=\"me1\">s</span>^<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">s</span><span class=\"br0\">[</span>s.<span class=\"me1\">from</span><span class=\"br0\">]</span> <span class=\"sy0\">#</span> s.<span class=\"me1\">c</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tstr<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> s.<span class=\"me1\">s</span><span class=\"br0\">[</span>s.<span class=\"me1\">from</span><span class=\"br0\">]</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>s.<span class=\"me1\">from</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">IF</span> k &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> str<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X <span class=\"kw1\">ELSE</span> str<span class=\"br0\">[</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>s.<span class=\"me1\">from</span> &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s.<span class=\"me1\">s</span>^<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">s</span><span class=\"br0\">[</span>s.<span class=\"me1\">from</span><span class=\"br0\">]</span> <span class=\"sy0\">#</span> s.<span class=\"me1\">c</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>s.<span class=\"me1\">from</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>s.<span class=\"me1\">from</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> Next;<br/><span class=\"kw1\">END</span> Splitter.<br/>\u00a0<br/><span class=\"kw1\">MODULE</span> ExpandRange;<br/><span class=\"kw1\">IMPORT</span> Out<span class=\"sy0\">,</span> LIV <span class=\"sy0\">:=</span> LIVector<span class=\"sy0\">,</span> LIR <span class=\"sy0\">:=</span> LIRange<span class=\"sy0\">,</span> S <span class=\"sy0\">:=</span> Splitter;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GetNumberFrom<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>; <span class=\"kw1\">VAR</span> from<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <span class=\"kw1\">VAR</span> done<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>\td<span class=\"sy0\">,</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tnum<span class=\"sy0\">,</span>sign<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ti <span class=\"sy0\">:=</span> from; num <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;sign <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\t<span class=\"kw1\">CASE</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">OF</span><br/>\t\t <span class=\"st_h\">'-'</span><span class=\"sy0\">:</span> sign <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t|<span class=\"st_h\">'+'</span><span class=\"sy0\">:</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt;<span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt;<span class=\"sy0\">=</span> <span class=\"st_h\">'9'</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\td <span class=\"sy0\">:=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"br0\">)</span>;<br/>\t\tnum <span class=\"sy0\">:=</span> d <span class=\"sy0\">+</span> num <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> from <span class=\"kw1\">THEN</span> done <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">ELSE</span> done <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>; from <span class=\"sy0\">:=</span> i <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> sign <span class=\"sy0\">*</span> num<br/><span class=\"kw1\">END</span> GetNumberFrom;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GetRange<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> LIR.<span class=\"me1\">Range</span>;<br/><span class=\"kw1\">VAR</span><br/>\tr<span class=\"sy0\">:</span> LIR.<span class=\"me1\">Range</span>;<br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tnum<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\tdone<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>;r.<span class=\"me1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> 20X<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"coMULTI\">(* Left value *)</span><br/>\tdone <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>\tnum <span class=\"sy0\">:=</span> GetNumberFrom<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> <span class=\"sy0\">~</span>done <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> r <span class=\"kw1\">END</span>; <br/>\tr.<span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> 20X<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">CASE</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">OF</span><br/>\t\t <span class=\"st_h\">'-'</span> <span class=\"sy0\">:</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t\t| 0X <span class=\"sy0\">:</span> <span class=\"kw1\">RETURN</span> r; <br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> 20X<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* Right Value *)</span><br/>\tdone <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>\tnum <span class=\"sy0\">:=</span> GetNumberFrom<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> <span class=\"sy0\">~</span>done <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> r <span class=\"kw1\">END</span>;<br/>\tr.<span class=\"me1\">SetRight</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> r;<br/><span class=\"kw1\">END</span> GetRange;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tr<span class=\"sy0\">:</span> LIR.<span class=\"me1\">Range</span>;<br/>\tsp<span class=\"sy0\">:</span> S.<span class=\"me1\">Splitter</span>; <br/>\tp <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\tliv<span class=\"sy0\">:</span> LIV.<span class=\"me1\">LIVector</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>sp<span class=\"br0\">)</span>;sp.<span class=\"me1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>liv<span class=\"br0\">)</span>;liv.<span class=\"me1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\tsp.<span class=\"me1\">On</span><span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">)</span>;<br/>\tsp.<span class=\"me1\">Next</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0X<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\tr <span class=\"sy0\">:=</span> GetRange<span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t\tr.<span class=\"me1\">Expand</span><span class=\"br0\">(</span>liv<span class=\"br0\">)</span>;<br/>\t\tsp.<span class=\"me1\">Next</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> liv.<span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"kw1\">DO</span><br/>\t\tOut.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>liv.<span class=\"me1\">At</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\tOut.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>liv.<span class=\"me1\">At</span><span class=\"br0\">(</span>liv.<span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> ExpandRange.<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 23, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>load <span class=\"st0\">\"str.cma\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> range a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> b <span class=\"sy0\">&lt;</span> a <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinvalid_arg\"><span class=\"kw3\">invalid_arg</span></a> <span class=\"st0\">\"range\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i acc <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> b <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev<span class=\"br0\">(</span>i<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux a <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> parse_piece s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Scanf.html\"><span class=\"kw2\">Scanf</span></a><span class=\"sy0\">.</span>sscanf s <span class=\"st0\">\"%d-%d\"</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a b <span class=\"sy0\">-&gt;</span> range a b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> s<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> range_expand rng <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ps <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>regexp_string <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> rng <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>flatten <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map parse_piece ps<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rng <span class=\"sy0\">=</span> <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexp\"><span class=\"kw3\">exp</span></a> <span class=\"sy0\">=</span> range_expand rng <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexp\"><span class=\"kw3\">exp</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: addRange( s res -- )<br/>| i n |<br/>    s asInteger dup ifNotNull: [ res add return ] drop<br/>    s indexOfFrom('-', 2) -&gt;i<br/>    s left( i 1- ) asInteger  s right( s size i - ) asInteger<br/>    for: n [ n res add ]<br/>;<br/>\u00a0<br/>: rangeExpand ( s -- [ n ] )<br/>    ArrayBuffer new  s wordsWith( ',' ) apply( #[ over addRange ] )\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 32, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>list = <span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><br/>expanded = expandRanges<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Original list: [\"</span>list<span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Expanded list: [\"</span>expanded~tostring<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>\u00a0<br/><span class=\"co1\">-- expand a string expression a range of numbers into a list</span><br/><span class=\"co1\">-- of values for the range.  This returns an array</span><br/>::routine expandRanges<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> list<br/>  values = list~makearray<span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- build this up using an array first.  Make this at least the</span><br/>  <span class=\"co1\">-- size of the original value set.</span><br/>  expanded = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>values~items<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- now process each element in the range</span><br/>  <span class=\"kw1\">loop</span> element <span class=\"kw2\">over</span> values<br/>      <span class=\"co1\">-- if this is a valid number, it's not a range, so add it directly</span><br/>      <span class=\"kw1\">if</span> element~<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'whole'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> expanded~append<span class=\"br0\">(</span>element<span class=\"br0\">)</span><br/>      <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>          <span class=\"co1\">-- search for the divider, starting from the second position</span><br/>          <span class=\"co1\">-- to allow for the starting value to be a minus sign.</span><br/>          split = element~<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> element start =<span class=\"br0\">(</span>split<span class=\"br0\">)</span> +<span class=\"nu0\">1</span> finish<br/>          <span class=\"kw1\">loop</span> i = start <span class=\"kw2\">to</span> finish<br/>              expanded~append<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> expanded<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 30, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Expand</span> RangeDesc<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Flatten<br/>      <span class=\"br0\">{</span>Map <span class=\"br0\">{</span>ParseDesc RangeDesc<span class=\"br0\">}</span><br/>       ExpandRange<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ParseDesc</span> Txt<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Map <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>tokens Txt <span class=\"re3\">&amp;,</span><span class=\"br0\">}</span> ParseRange<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ParseRange</span> R<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Member <span class=\"re3\">&amp;-</span> R<span class=\"sy0\">.</span>2<span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>        First Second<br/>     <span class=\"kw1\">in</span><br/>        <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>token R<span class=\"sy0\">.</span>2 <span class=\"re3\">&amp;-</span>\u00a0?First\u00a0?Second<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt R<span class=\"sy0\">.</span>1<span class=\"sy0\">|</span>First<span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt Second<span class=\"br0\">}</span><br/>     <span class=\"kw1\">else</span><br/>        Singleton = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt R<span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>        Singleton<span class=\"sy0\">#</span>Singleton<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ExpandRange</span> From<span class=\"sy0\">#</span>To<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number From To 1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo<br/>   <span class=\"br0\">{</span>Value<span class=\"sy0\">.</span>toVirtualString <span class=\"br0\">{</span>Expand <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">}</span> 100 100<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> rangex <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co2\">/^(.*\\d)-(.+)$/</span> <span class=\"sy0\">?</span> <span class=\"co3\">$1</span><span class=\"sy0\">..</span><span class=\"co3\">$2</span> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/,/</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test and display </span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span> rangex<span class=\"br0\">(</span><span class=\"st_h\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> range<span class=\"sy0\">-</span>expand <span class=\"br0\">(</span>Str <span class=\"re0\">$range</span><span class=\"sy0\">-</span>description<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">token</span> number <span class=\"br0\">{</span> <span class=\"st_h\">'-'</span><span class=\"sy0\">?</span> \\d<span class=\"sy0\">+</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">token</span> range  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"re0\">&amp;number</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"st_h\">'-'</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"re0\">&amp;number</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$range</span><span class=\"sy0\">-</span>description<br/>        <span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">match</span><span class=\"br0\">(</span><span class=\"re0\">&amp;range</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"co3\">$0</span><span class=\"sy0\">..</span><span class=\"co3\">$1</span> <span class=\"sy0\">!!</span> <span class=\"sy0\">+</span><span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span><span class=\"me1\">flat</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> range<span class=\"sy0\">-</span>expand<span class=\"br0\">(</span><span class=\"st_h\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 21, "block": "<pre class=\"text highlighted_source\">function range_expansion(string range)<br/>sequence s = split(range,','),<br/>         res = {}<br/>    for i=1 to length(s) do<br/>        string si = s[i]<br/>        integer k = find('-',si,2)<br/>        if k=0 then<br/>            res = append(res,to_number(si))<br/>        else<br/>            integer startrange = to_number(si[1..k-1])<br/>            integer endofrange = to_number(si[k+1..$])<br/>            for l=startrange to endofrange do<br/>                res = append(res,l)<br/>            end for<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>?range_expansion(\"-6,-3-1,3-5,7-11,14,15,17-20\")<br/>?range_expansion(\"-6,-3--1,3-5,7-11,14,15,17-20\")</pre>"}, {"lang": "PHP", "loc": 12, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> rangex<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$lst</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$e</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/strpos\"><span class=\"kw3\">strpos</span></a><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <span class=\"kw4\">FALSE</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'-'</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$lst</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_merge\"><span class=\"kw3\">array_merge</span></a><span class=\"br0\">(</span><span class=\"re0\">$lst</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$lst</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span> <span class=\"re0\">$e</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$lst</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(de rangeexpand (Str)<br/>   (make<br/>      (for S (split (chop Str) \",\")<br/>         (if (index \"-\" (cdr S))<br/>            (chain<br/>               (range<br/>                  (format (head @ S))<br/>                  (format (tail (- -1 @) S)) ) )<br/>            (link (format S)) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 51, "block": "<pre class=\"text highlighted_source\">range_expansion:<br/>   procedure options (main);<br/>\u00a0<br/>get_number:<br/>   procedure (Number, c, eof);<br/>   declare number fixed binary (31), c character (1), eof bit (1) aligned;<br/>   declare neg fixed binary (1);<br/>\u00a0<br/>   number = 0; eof = false;<br/>   do until (c ^= ' ');<br/>      get edit (c) (a(1));<br/>   end;<br/>   if c = '-' then do; get edit (c) (a(1)); neg = -1; end; else neg = 1;<br/>   do forever;<br/>      select (c);<br/>         when ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')<br/>                    number = number*10 + c;<br/>         when (',', '-') do; number = neg*number; return; end;<br/>         otherwise signal error;<br/>      end;<br/>      on endfile (sysin) go to exit;<br/>      get edit (c) (a(1));<br/>   end;<br/>exit:<br/>   number = neg*number;<br/>   eof = true;<br/>end get_Number;<br/>\u00a0<br/>   declare c character, (i, range_start, range_end) fixed binary (31);<br/>   declare eof bit (1) aligned;<br/>   declare true bit (1) value ('1'b), false bit (1) value ('0'b);<br/>   declare delimiter character (1) initial (' ');<br/>   declare out file output;<br/>\u00a0<br/>   open file (out) output title ('/out, type(text),recsize(80)');<br/>   do while (^eof);<br/>      call get_number(range_start, c, eof);<br/>      if c = '-' then /* we have a range */<br/>         do;<br/>            call get_number (range_end, c, eof);<br/>            do i = range_start to range_end;<br/>               put file (out) edit (delimiter, i) (a, f(3));<br/>            end;<br/>         end;<br/>      else<br/>         do;<br/>            put file (out) edit (delimiter, range_start) (a, f(3));<br/>         end;<br/>      delimiter = ',';<br/>   end;<br/>end range_expansion;</pre>"}, {"lang": "PowerShell", "loc": 24, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> range<span class=\"sy0\">-</span>expansion<span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> expansion<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arr</span>.Split<span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>             <span class=\"re0\">$arr</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>                <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>                <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.Split<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">switch</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$b</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>                    <span class=\"st0\">\"-$c\"</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>                    <span class=\"st0\">\"$b-$c\"</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"st0\">\"$(([Int]$b)..([Int]$c))\"</span><span class=\"br0\">}</span><br/>                    <span class=\"st0\">\"-$c-$d\"</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"st0\">\"$(([Int]$(\"</span><span class=\"sy0\">-</span>$c<span class=\"st0\">\"))..([Int]$d))\"</span><span class=\"br0\">}</span><br/>                    <span class=\"st0\">\"-$c--$e\"</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"st0\">\"$(([Int]$(\"</span><span class=\"sy0\">-</span>$c<span class=\"st0\">\"))..([Int]$(\"</span><span class=\"sy0\">-</span>$e<span class=\"st0\">\")))\"</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>             <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span><br/>    <span class=\"st0\">\"$(expansion $array)\"</span><br/>    <a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>range<span class=\"sy0\">-</span>expansion <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 81, "block": "<pre class=\"prolog highlighted_source\">range_expand <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"st_h\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>L<span class=\"sy4\">,</span> LA<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\textract_Range<span class=\"br0\">(</span>LA<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>study_Range<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> LR<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpack_Range<span class=\"br0\">(</span>LX<span class=\"sy4\">,</span> LR<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>LX<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">% extract_Range(?In,\u00a0?Out)</span><br/><span class=\"co1\">% In \u00a0: '-6,-3--1,3-5,7-11,14,15,17-20'  </span><br/><span class=\"co1\">% Out\u00a0: [-6], [-3--1], [3-5],[7-11], [14],[15], [17-20]</span><br/><span class=\"co1\">% </span><br/>extract_Range<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>extract_Range<span class=\"br0\">(</span>X <span class=\"sy4\">,</span> <span class=\"br0\">[</span>Range <span class=\"sy5\">|</span> Y1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget_Range<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> U<span class=\"sy3\">-</span>U<span class=\"sy4\">,</span> Range<span class=\"sy4\">,</span> X1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\textract_Range<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>get_Range<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Range<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Range<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>get_Range<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">','</span><span class=\"sy5\">|</span>B<span class=\"br0\">]</span><span class=\"sy4\">,</span> Range<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Range<span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>get_Range<span class=\"br0\">(</span><span class=\"br0\">[</span>A <span class=\"sy5\">|</span> B<span class=\"br0\">]</span><span class=\"sy4\">,</span> EC<span class=\"sy4\">,</span> Range<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tappend_dl<span class=\"br0\">(</span>EC<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A <span class=\"sy5\">|</span> U<span class=\"br0\">]</span><span class=\"sy3\">-</span>U<span class=\"sy4\">,</span> NEC<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget_Range<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> NEC<span class=\"sy4\">,</span> Range<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>append_dl<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> Y<span class=\"sy3\">-</span>Z<span class=\"sy4\">,</span> X<span class=\"sy3\">-</span>Z<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% study Range(?In,\u00a0?Out)</span><br/><span class=\"co1\">% In \u00a0: [-6]</span><br/><span class=\"co1\">% Out\u00a0: [-6,-6]</span><br/><span class=\"co1\">% </span><br/><span class=\"co1\">% In \u00a0: [-3--1]</span><br/><span class=\"co1\">% Out\u00a0: [-3, -1]</span><br/><span class=\"co1\">% </span><br/>study_Range<span class=\"br0\">(</span>Range1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Deb<span class=\"sy4\">,</span> Deb<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">catch</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_chars</span></a><span class=\"br0\">(</span>Deb<span class=\"sy4\">,</span> Range1<span class=\"br0\">)</span><span class=\"sy4\">,</span> Deb<span class=\"sy4\">,</span> false<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>study_Range<span class=\"br0\">(</span>Range1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Deb<span class=\"sy4\">,</span> Fin<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>       append<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'-'</span><span class=\"sy5\">|</span>B<span class=\"br0\">]</span><span class=\"sy4\">,</span> Range1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       A \\<span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_chars</span></a><span class=\"br0\">(</span>Deb<span class=\"sy4\">,</span> A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_chars</span></a><span class=\"br0\">(</span>Fin<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">% </span><br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% Pack Range(?In,\u00a0?Out)</span><br/><span class=\"co1\">% In \u00a0: -6,</span><br/><span class=\"co1\">% Out\u00a0: [-6]</span><br/><span class=\"co1\">% </span><br/><span class=\"co1\">% In \u00a0: -3, -2,-1</span><br/><span class=\"co1\">% Out\u00a0: [-3,-1]</span><br/><span class=\"co1\">%</span><br/>pack_Range<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pack_Range<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span>X <span class=\"sy5\">|</span> V<span class=\"br0\">]</span><span class=\"sy5\">|</span>Packed<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    run<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Rest<span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>V<span class=\"br0\">]</span><span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    pack_Range<span class=\"br0\">(</span>RRest<span class=\"sy4\">,</span>Packed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>run<span class=\"br0\">(</span>Fin<span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Deb<span class=\"sy4\">,</span> Fin<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tFin #\\<span class=\"sy6\">=</span> Deb<span class=\"sy4\">,</span><br/>\tFin #\\<span class=\"sy6\">=</span> Deb <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tOther #\\<span class=\"sy6\">=</span> Fin<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span>Fin<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>_Var<span class=\"sy4\">,</span> Fin<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span>Var1<span class=\"sy5\">|</span>LRest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Deb<span class=\"sy4\">,</span> Fin<span class=\"br0\">]</span><span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tFin #\\<span class=\"sy6\">=</span> Deb<span class=\"sy4\">,</span><br/>\tFin #\\<span class=\"sy6\">=</span> Deb <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tVar1 #<span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\trun<span class=\"br0\">(</span>Var1<span class=\"sy4\">,</span>LRest<span class=\"sy4\">,</span><span class=\"br0\">[</span>Deb<span class=\"sy4\">,</span> Fin<span class=\"br0\">]</span><span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span>Val<span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Val<span class=\"sy4\">,</span> Val<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 46, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> rangeexpand<span class=\"br0\">(</span>txt.s, List outputList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> rangesCount <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>txt, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Protected</span> subTxt.s, r, rangeMarker, rangeStart, rangeFinish, rangeIncrement, i<br/>\u00a0<br/>  <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>outputList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> rangesCount<br/>    subTxt <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>txt, r, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    rangeMarker <span class=\"sy0\">=</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>subTxt, <span class=\"st0\">\"-\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> rangeMarker<br/>      rangeStart <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>subTxt, <span class=\"nu0\">1</span>, rangeMarker <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      rangeFinish <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>subTxt, rangeMarker <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> rangeStart <span class=\"sy0\">&gt;</span> rangeFinish<br/>        rangeIncrement <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Else</span><br/>        rangeIncrement <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>      i <span class=\"sy0\">=</span> rangeStart <span class=\"sy0\">-</span> rangeIncrement<br/>      <span class=\"kw1\">Repeat</span> <br/>        i <span class=\"sy0\">+</span> rangeIncrement<br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>outputList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: outputList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>      <span class=\"kw1\">Until</span> i <span class=\"sy0\">=</span> rangeFinish<br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>outputList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: outputList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span>subTxt<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/><span class=\"kw1\">Procedure</span> outputListValues<span class=\"br0\">(</span>List values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> values<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> values<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  rangeexpand<span class=\"br0\">(</span><span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span>, values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  outputListValues<span class=\"br0\">(</span>values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> rangeexpand<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    lst <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> txt.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"st0\">'-'</span> <span class=\"kw1\">in</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>            r0<span class=\"sy0\">,</span> r1 <span class=\"sy0\">=</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            lst +<span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + r0<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>r1<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            lst.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> lst<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>rangeexpand<span class=\"br0\">(</span><span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>rangeExpand &lt;- function(text) {<br/>  lst &lt;- gsub(\"(\\\\d)-\", \"\\\\1:\", unlist(strsplit(text, \",\")))<br/>  unlist(sapply(lst, function (x) eval(parse(text=x))), use.names=FALSE)<br/>}<br/>\u00a0<br/>rangeExpand(\"-6,-3--1,3-5,7-11,14,15,17-20\")<br/> [1] -6 -3 -2 -1  3  4  5  7  8  9 10 11 14 15 17 18 19 20<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (range-expand s)<br/>  (append*<br/>   (for/list ([r (regexp-split \",\" s)])<br/>     (match (regexp-match* \"(-?[0-9]+)-(-?[0-9]+)\" r <br/>                           #:match-select cdr)<br/>       [(list (list f t)) <br/>        (range (string-&gt;number f) (+ (string-&gt;number t) 1))]<br/>       [(list)     <br/>        (list (string-&gt;number r))]))))<br/>\u00a0<br/>(range-expand \"-6,-3--1,3-5,7-11,14,15,17-20\")<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 33, "block": "<pre class=\"text highlighted_source\">define get_num use $lst<br/>    # \"-22\" split by \"-\" is [ \"\", \"22\" ]  so check if<br/>    # first list item is \"\" -&gt; a negative number<br/>    $lst 0 get \"\" = if<br/>        # negative number<br/>        #<br/>        # convert str to integer and multiply by -1<br/>        -1 $lst 1 get 0 prefer *<br/>        $lst shift $lst shift drop drop<br/>    else<br/>        # positive number<br/>        $lst 0 get 0 prefer<br/>        $lst shift drop<br/>\u00a0<br/>define range_expand use $rng<br/>    [ ] as $res<br/>    $rng \",\" split each as $r<br/>        $r m/^(-?\\d+)-(-?\\d+)$/ TRUE = if<br/>            $r s/-/g as $parts<br/>            $parts get_num as $from<br/>            $parts get_num as $to<br/>            # int list to str list, then joined by \",\"<br/>            group<br/>                $from $to 1 range each \"\" prefer<br/>            list \",\" join $res push<br/>            # range doesn't include the $to, so add to end of generated range<br/>            $to \"%d\" $res push<br/>        else<br/>            $r $res push<br/>    $res \",\" join print<br/>    \"\\n\" print<br/>\u00a0<br/>'-6,-3--1,3-5,7-11,14,15,17-20' range_expand</pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program expands an  ordered list  of  integers  into  an expanded list.          */</span><br/>old= <span class=\"st0\">'-6,-3--1,   3-5,  7-11,       14,15,17-20'</span>;       a=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>old,,<span class=\"st0\">','</span><span class=\"br0\">)</span><br/>new=                                             <span class=\"coMULTI\">/*translate [\u2191]  commas (,) \u2500\u2500\u2500\u25ba blanks*/</span><br/>      <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> a==<span class=\"st0\">''</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> a X a          <span class=\"coMULTI\">/*obtain the next integer \u2500\u2500or\u2500\u2500 range.*/</span><br/>      p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>, X, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*find the location of a dash (maybe). */</span><br/>      <span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span>  new=new   X                  <span class=\"coMULTI\">/*append integer   X   to the new list.*/</span><br/>              <span class=\"kw3\">else</span>  <span class=\"kw1\">do</span> j=<span class=\"kw6\">left</span><span class=\"br0\">(</span>X,p-<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>X,p+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;     new=new j<br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                  <span class=\"coMULTI\">/*append a single [\u2191] integer at a time*/</span><br/>      <span class=\"kw3\">end</span>                 <span class=\"coMULTI\">/*until*/</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/>new=<span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>new<span class=\"br0\">)</span>,  <span class=\"st0\">','</span>,  <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*remove the first blank,  add commas. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'old list: '</span>   old                           <span class=\"coMULTI\">/*show the  old list of numbers/ranges.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'new list: '</span>   new                           <span class=\"coMULTI\">/*  \"   \"   new   \"   \" numbers.       */</span></pre>"}, {"lang": "Ring", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Range expansion<br/>\u00a0<br/>int = \"-6,-3--1,3-5,7-11,14,15,17-20\"<br/>int = str2list(substr(int, \",\", nl))<br/>newint = []<br/>for n=1 to len(int)<br/>     nrint = substr(int[n], \"-\")<br/>     nrint2 = substr(int[n], \"--\")<br/>     if nrint2 &gt; 0<br/>        temp1 = left(int[n], nrint2 -1)<br/>        temp2 = right(int[n], len(int[n]) - nrint2)<br/>        add(newint, [temp1,temp2])<br/>     else<br/>        if len(int[n]) &lt;= 2<br/>           add(newint, [int[n], \"\"])<br/>        else <br/>           if nrint &gt; 0 and nrint2 = 0<br/>              temp1 = left(int[n], nrint - 1)<br/>              temp2 = right(int[n], len(int[n]) - nrint)<br/>              add(newint, [temp1,temp2]) <br/>           ok  <br/>        ok<br/>     ok<br/>next<br/>showarray(newint)<br/>\u00a0<br/>func showarray(vect)<br/>       see \"[\"<br/>       svect = \"\"<br/>       for n = 1 to len(vect)<br/>           if newint[n][2]\u00a0!= \"\"<br/>              for nr = newint[n][1] to newint[n][2]<br/>                  svect = svect +\"\" + nr + \", \"<br/>              next<br/>           else<br/>              svect = svect +\"\" + newint[n][1] + \", \"<br/>           ok<br/>       next<br/>       svect = left(svect, len(svect) - 2)<br/>       see svect<br/>       see \"]\" + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> range_expand<span class=\"br0\">(</span>rng<span class=\"br0\">)</span><br/>  rng.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">flat_map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>part<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> part =~ <span class=\"sy0\">/</span>^<span class=\"br0\">(</span><span class=\"sy0\">-</span>?\\d<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>?\\d<span class=\"sy0\">+</span><span class=\"br0\">)</span>$<span class=\"sy0\">/</span><br/>      <span class=\"br0\">(</span>$1.<span class=\"me1\">to_i</span> .. $2.<span class=\"me1\">to_i</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">Integer</span><span class=\"br0\">(</span>part<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> range_expand<span class=\"br0\">(</span><span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">PRINT rangeExpand$(\"-6,-3--1,3-5,7-11,14,15,17-20\")<br/>end<br/>\u00a0<br/>function rangeExpand$(range$)<br/>[loop]<br/>i\t= INSTR(range$, \"-\", i+1)<br/>IF i THEN<br/>  j = i<br/>  WHILE MID$(range$,j-1,1) &lt;&gt; \",\" AND j &lt;&gt; 1<br/>    j = j - 1<br/>  wend<br/>  IF i &gt; j then<br/>    IF MID$(range$,j,i-j) &lt;&gt; str$(i-j)+\" \" THEN<br/>      t$ = \"\"<br/>      FOR k = VAL(MID$(range$,j)) TO VAL(MID$(range$,i+1))-1<br/>        t$ = t$ + str$(k) + \",\"<br/>      NEXT k<br/>      range$ = LEFT$(range$,j-1) + t$ + MID$(range$,i+1)<br/>      i = j + LEN(t$) + 2<br/>    end if<br/>  end if<br/>end if<br/>if i &lt;&gt; 0 then goto [loop]<br/>rangeExpand$ = range$<br/>end function</pre>"}, {"lang": "Rust", "loc": 27, "block": "<pre class=\"text highlighted_source\">use std::str::FromStr;<br/>\u00a0<br/>// Precondition: range doesn't contain multibyte UTF-8 characters<br/>fn range_expand(range\u00a0: &amp;str) -&gt; Vec&lt;i32&gt; {<br/>   range.split(',').flat_map(|item| {<br/>        match i32::from_str(item) {<br/>            Ok(n) =&gt; n..n+1,<br/>            _ =&gt; {<br/>                let dashpos=<br/>                    match item.rfind(\"--\") {<br/>                        Some(p) =&gt; p,<br/>                        None =&gt; item.rfind('-').unwrap(),<br/>                    };<br/>                let rstart=i32::from_str(<br/>                    unsafe{ item.slice_unchecked(0,dashpos)} ).unwrap();<br/>                let rend=i32::from_str(<br/>                    unsafe{ item.slice_unchecked(dashpos+1,item.len()) } ).unwrap();<br/>                rstart..rend+1<br/>            },<br/>        }<br/>    }).collect()<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{:?}\", range_expand(\"-6,-3--1,3-5,7-11,14,15,17-20\"));<br/>}<br/>\u00a0</pre>"}, {"lang": "S-lang", "loc": 19, "block": "<pre class=\"text highlighted_source\">variable r_expres = \"-6,-3--1,3-5,7-11,14,15,17-20\", s, r_expan = {}, dpos, i;<br/>\u00a0<br/>foreach s (strchop(r_expres, ',', 0))<br/>{<br/> \u00a0% S-Lang built-in RE's are fairly limited, and have a quirk:<br/> \u00a0%   grouping is done with \\\\( and \\\\), not ( and )<br/> \u00a0% [PCRE and Oniguruma RE's are available via standard libraries]<br/>  if (string_match(s, \"-?[0-9]+\\\\(-\\\\)-?[0-9]+\", 1)) {<br/>\u00a0<br/>    (dpos, ) = string_match_nth(1);<br/>\u00a0<br/>   \u00a0% Create/loop-over a \"range array\": from num before - to num after it:<br/>    foreach i ( [integer(substr(s, 1, dpos))\u00a0: integer(substr(s, dpos+2, -1))] )<br/>      list_append(r_expan, string(i));<br/>  }<br/>  else<br/>    list_append(r_expan, s);<br/>}<br/>print(strjoin(list_to_array(r_expan), \", \"));</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rangex<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>  str split <span class=\"st0\">\",\"</span> flatMap <span class=\"br0\">{</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"(-?<span class=\"es0\">\\d</span>+)(?:-(-?<span class=\"es0\">\\d</span>+))?\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> Seq<span class=\"br0\">(</span>a.<span class=\"me1\">toInt</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> a.<span class=\"me1\">toInt</span> to b.<span class=\"me1\">toInt</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 35, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> split<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str char skip count<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>len <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>index skip<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>last<span class=\"sy0\">-</span>index <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> index len<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> str last<span class=\"sy0\">-</span>index<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> char <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> str index<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> count <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          len<br/>                          <span class=\"br0\">(</span><span class=\"sy0\">+</span> index <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"sy0\">+</span> index <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> char <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">substring</span> str last<span class=\"sy0\">-</span>index index<span class=\"br0\">)</span><br/>                                       result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> index <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                      last<span class=\"sy0\">-</span>index<br/>                      result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> range<span class=\"sy0\">-</span>expand<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>token<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">char?</span> token<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">display</span> token<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>range <span class=\"br0\">(</span>split token #\\<span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> range<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> range<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> range <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>high <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> range <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> count high<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> high<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">display</span> count<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>split str #\\, <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 35, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"scanstri.s7i\";<br/>\u00a0<br/>const func array integer: rangeExpansion (in var string: rangeStri) is func<br/>  result<br/>    var array integer: numbers is 0 times 0;<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    while rangeStri &lt;&gt; \"\" do<br/>      number\u00a0:= integer parse getInteger(rangeStri);<br/>      numbers &amp;:= number;<br/>      if startsWith(rangeStri, \"-\") then<br/>        rangeStri\u00a0:= rangeStri[2 ..];<br/>        for number range succ(number) to integer parse getInteger(rangeStri) do<br/>          numbers &amp;:= number;<br/>        end for;<br/>      end if;<br/>      if startsWith(rangeStri, \",\") then<br/>        rangeStri\u00a0:= rangeStri[2 ..];<br/>      elsif rangeStri &lt;&gt; \"\" then<br/>        raise RANGE_ERROR;<br/>      end if;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    for number range rangeExpansion(\"-6,-3--1,3-5,7-11,14,15,17-20\") do<br/>      write(number &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">func rangex<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    str.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>        var m = r.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^<br/>            <span class=\"br0\">(</span>?<span class=\"br0\">(</span>DEFINE<span class=\"br0\">)</span> <span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span><span class=\"br0\">[</span><span class=\"sy0\">+-</span><span class=\"br0\">]</span>?<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>from<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>?<span class=\"sy0\">&amp;</span>int<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>to<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>?<span class=\"sy0\">&amp;</span>int<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        $<span class=\"sy0\">/</span>x<span class=\"br0\">)</span><br/>        m\u00a0? <span class=\"kw1\">do</span> <span class=\"br0\">{</span>var c = m.<span class=\"me1\">ncap</span>; <span class=\"br0\">(</span>Num<span class=\"br0\">(</span>c<span class=\"br0\">{</span>:from<span class=\"br0\">}</span><span class=\"br0\">)</span> .. <span class=\"me1\">Num</span><span class=\"br0\">(</span>c<span class=\"br0\">{</span>:to<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span>...<span class=\"br0\">}</span><br/>         \u00a0: Num<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say rangex<span class=\"br0\">(</span><span class=\"st0\">'-6,-3--1,3-5,7-11,14,15,17-20'</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span></pre>"}, {"lang": "SNOBOL4", "loc": 15, "block": "<pre class=\"text highlighted_source\">*       # Return range n1 .. n2        <br/>        define('range(n1,n2)')\u00a0:(range_end)<br/>range   range = range n1 ','; n1 = lt(n1,n2) n1 + 1\u00a0:s(range)<br/>        range rtab(1) . range\u00a0:(return)<br/>range_end        <br/>\u00a0<br/>        define('rangex(range)d1,d2') <br/>        num = ('-' | '') span('0123456789')\u00a0:(rangex_end)<br/>rangex  range num . d1 '-' num . d2 = range(d1,d2)\u00a0:s(rangex)<br/>        rangex = range\u00a0:(return)<br/>rangex_end<br/>\u00a0<br/>*       # Test and display        <br/>        output = rangex('-6,-3--1,3-5,7-11,14,15,17-20')<br/>end</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> rangeExpand desc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> term <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$desc</span> <span class=\"st0\">\",\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> count <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$term</span> <span class=\"sy0\">%</span>d-<span class=\"sy0\">%</span>d from to<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"re0\">$from</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$from</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$to</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>rangeExpand <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "TUSCRIPT", "loc": 22, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>rangednrs=\"-6,-3--1,3-5,7-11,14,15,17-20\"<br/>expandnrs=SPLIT (rangednrs,\":,:\")<br/>\u00a0<br/>LOOP/CLEAR r=expandnrs<br/> test=STRINGS (r,\":&gt;&lt;-&gt;&lt;&lt;&gt;&gt;/:\")<br/> sz_test=SIZE (test)<br/> IF (sz_test==1) THEN<br/>  expandnrs=APPEND (expandnrs,r)<br/> ELSE<br/>  r=SPLIT (r,\"::&lt;|-&gt;/::-:\",beg,end)<br/>  expandnrs=APPEND (expandnrs,beg)<br/>  LOOP/CLEAR next=beg,end<br/>   next=next+1<br/>   expandnrs=APPEND (expandnrs,next)<br/>   IF (next==end) EXIT<br/>  ENDLOOP<br/> ENDIF<br/>ENDLOOP<br/>expandnrs= JOIN (expandnrs,\",\")<br/>\u00a0<br/>PRINT expandnrs</pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre>num\u00a0:= [ + | - ] { digit } +\n\nentry\u00a0:= num [ ws ] - [ ws ] num\n      |  num\n\nrangelist\u00a0:= entry [ ws ] , [ ws ] rangelist\n          |  entry\n          |  /* empty */</pre>"}, {"lang": "UNIX Shell", "loc": 19, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/usr/bin/bash</span><br/>\u00a0<br/>range_expand <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><br/>    <span class=\"re2\">IFS</span>=,<br/>    <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"re4\">$1</span><br/>    <span class=\"re2\">n</span>=<span class=\"re4\">$#</span><br/>    <span class=\"kw1\">for</span> element; <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$element</span> =~ ^<span class=\"br0\">(</span>-?<span class=\"br0\">[</span><span class=\"nu0\">0</span>-<span class=\"nu0\">9</span><span class=\"br0\">]</span>+<span class=\"br0\">)</span>-<span class=\"br0\">(</span>-?<span class=\"br0\">[</span><span class=\"nu0\">0</span>-<span class=\"nu0\">9</span><span class=\"br0\">]</span>+<span class=\"br0\">)</span>$ <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"90b4d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span> $<span class=\"br0\">(</span><span class=\"kw3\">eval</span> <span class=\"kw3\">echo</span> <span class=\"st0\">\"{<span class=\"es3\">${BASH_REMATCH[1]}</span>..<span class=\"es3\">${BASH_REMATCH[2]}</span>}\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"230763\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span> <span class=\"re1\">$element</span><br/>        <span class=\"kw1\">fi</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">shift</span> <span class=\"re1\">$n</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"d4f094\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>    <span class=\"co0\"># to return a comma-separated value: echo \"${*// /,}\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>range_expand <span class=\"st0\">\"-6,-3--1,3-5,7-11,14,15,17-20\"</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import int<br/>\u00a0<br/>rex = sep`,; zrange+*=\u00a0%zp~~htttPzztPQhQXbiNC+ rlc ~&amp;r~=`-<br/>\u00a0<br/>#cast\u00a0%zL<br/>\u00a0<br/>t = rex '-6,-3--1,3-5,7-11,14,15,17-20'</pre>"}, {"lang": "VBA", "loc": 46, "block": "<pre class=\"text highlighted_source\">Public Function RangeExpand(AString as string)<br/>' return a list with the numbers expressed in AString<br/>Dim Splits() As String<br/>Dim List() As Integer<br/>Dim count As Integer<br/>\u00a0<br/>count = -1 'to start a zero-based List() array<br/>' first split it using comma as delimiter<br/>Splits = Split(AString, \",\")<br/>' process all fragments<br/>For Each fragment In Splits<br/>  'is there a \"-\" in it (do not consider first character)?<br/>  P = InStr(2, fragment, \"-\")<br/>  If P &gt; 0 Then 'yes, so it's a range: find start and end numbers<br/>    nstart = Val(left$(fragment, P - 1))<br/>    nend = Val(Mid$(fragment, P + 1))<br/>    j = count<br/>    count = count + (nend - nstart + 1)<br/>    'add numbers in range to List<br/>    ReDim Preserve List(count)<br/>    For i = nstart To nend<br/>      j = j + 1<br/>      List(j) = i<br/>    Next<br/>  Else<br/>    'not a range, add a single number<br/>    count = count + 1<br/>    ReDim Preserve List(count)<br/>    List(count) = Val(fragment)<br/>  End If<br/>Next<br/>RangeExpand = List<br/>End Function<br/>\u00a0<br/>Public Sub RangeExpandTest()<br/>'test function RangeExpand<br/>Dim X As Variant<br/>\u00a0<br/>X = RangeExpand(\"-6,-3--1,3-5,7-11,14,15,17-20\")<br/>'print X<br/>Debug.Print \"Result:\"<br/>For Each el In X<br/>  Debug.Print el;<br/>Next<br/>Debug.Print<br/>End Sub</pre>"}, {"lang": "XPL0", "loc": 42, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>string 0;                       \\use zero-terminated strings, instead of MSb<br/>char Str;<br/>int  Char, Inx;<br/>\u00a0<br/>\u00a0<br/>proc GetCh;                     \\Get character from Str<br/>[Char:= Str(Inx);<br/>Inx:= Inx+1;<br/>]; \\GetCh<br/>\u00a0<br/>\u00a0<br/>func GetNum;                    \\Get number from Str and return its value<br/>int Neg, Num;<br/>[Neg:= false;<br/>if Char = ^- then [Neg:= true;  GetCh];<br/>Num:= 0;<br/>while Char&gt;=^0 &amp; Char&lt;=^9 do<br/>        [Num:= Num*10 + Char-^0;<br/>        GetCh;<br/>        ];<br/>return if Neg then -Num else Num;<br/>]; \\GetNum<br/>\u00a0<br/>\u00a0<br/>int I, N0, N1;<br/>[Str:= \"-6,-3--1,3-5,7-11,14,15,17-20\";<br/>Inx:= 0;<br/>GetCh;                          \\one character look ahead<br/>loop    [N0:= GetNum;<br/>        IntOut(0,N0);<br/>        case Char of<br/>          ^,:   [GetCh;  ChOut(0,^,)];<br/>          ^-:   [GetCh;<br/>                N1:= GetNum;<br/>                for I:= N0+1 to N1 do   \\expand range<br/>                        [ChOut(0,^,);  IntOut(0,I)];<br/>                if Char=^, then [GetCh;  ChOut(0,^,)] else quit]<br/>        other   quit;                   \\must be 0 string terminator<br/>        ];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn rangex(s){<br/>   fcn(s,re){<br/>      if (re.search(s)){<br/>\t a,b:=re.matched[1,*].apply(\"toInt\");<br/>\t [a..b].walk();<br/>      }<br/>      else s;<br/>   }\u00a0:<br/>   s.split(\",\").pump(List, _.fp1(RegExp(0'|(.*\\d+)-(.*\\d+)|)))<br/>      .flatten().concat(\",\");<br/>}</pre>"}]}