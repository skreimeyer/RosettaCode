{"task": "Parametric_polymorphism", "blocks": [{"lang": "Ada", "loc": 14, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Element_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/><span class=\"kw3\">package</span> Container <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Tree <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">procedure</span> Replace_All<span class=\"br0\">(</span>The_Tree\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Tree; New_Value\u00a0: Element_Type<span class=\"br0\">)</span>;<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Node;<br/>   <span class=\"kw3\">type</span> Node_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Node;<br/>   <span class=\"kw3\">type</span> Tree <span class=\"kw3\">tagged</span> <span class=\"kw3\">record</span><br/>      Value\u00a0: Element_type;<br/>      Left \u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>      Right\u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> Container;</pre>"}, {"lang": "C", "loc": 47, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define decl_tree_type(T)                                                       \\<br/>        typedef struct node_##T##_t node_##T##_t, *node_##T;                    \\<br/>        struct node_##T##_t { node_##T left, right; T value; };                 \\<br/>                                                                                \\<br/>        node_##T node_##T##_new(T v) {                                          \\<br/>                node_##T node = malloc(sizeof(node_##T##_t));                   \\<br/>                node-&gt;value = v;                                                \\<br/>                node-&gt;left = node-&gt;right = 0;                                   \\<br/>                return node;                                                    \\<br/>        }                                                                       \\<br/>        node_##T node_##T##_insert(node_##T root, T v) {                        \\<br/>                node_##T n = node_##T##_new(v);                                 \\<br/>                while (root) {                                                  \\<br/>                        if (root-&gt;value &lt; n-&gt;value)                             \\<br/>                                if (!root-&gt;left) return root-&gt;left = n;         \\<br/>                                else root = root-&gt;left;                         \\<br/>                        else                                                    \\<br/>                                if (!root-&gt;right) return root-&gt;right = n;       \\<br/>                                else root = root-&gt;right;                        \\<br/>                }                                                               \\<br/>                return 0;                                                       \\<br/>        }</span><br/>\u00a0<br/><span class=\"co2\">#define tree_node(T) node_##T</span><br/><span class=\"co2\">#define node_insert(T, r, x) node_##T##_insert(r, x)</span><br/><span class=\"co2\">#define node_new(T, x) node_##T##_new(x)</span><br/>\u00a0<br/>decl_tree_type<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>decl_tree_type<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        tree_node<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> root_d <span class=\"sy0\">=</span> node_new<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> RAND_MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                node_insert<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">,</span> root_d<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> RAND_MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        tree_node<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> root_i <span class=\"sy0\">=</span> node_new<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                node_insert<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> root_i<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span> <br/><span class=\"kw2\">class</span> tree<br/><span class=\"br0\">{</span><br/>  T value<span class=\"sy4\">;</span><br/>  tree <span class=\"sy2\">*</span>left<span class=\"sy4\">;</span><br/>  tree <span class=\"sy2\">*</span>right<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">void</span> replace_all <span class=\"br0\">(</span>T new_value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> T <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> BinaryTree<span class=\"br0\">(</span>T <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> BinaryTree<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span> Map<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span>T,U<span class=\"sy0\">&gt;</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BinaryTree<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span> Tree <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BinaryTree<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Tree<span class=\"sy0\">.</span><span class=\"me1\">left</span> <span class=\"sy0\">=</span> left<span class=\"sy0\">.</span><span class=\"me1\">Map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Tree<span class=\"sy0\">.</span><span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<span class=\"sy0\">.</span><span class=\"me1\">Map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span>      <br/>            <span class=\"kw1\">return</span> Tree<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 31, "block": "<pre class=\"text highlighted_source\">class BinaryTree&lt;Data&gt;(shared Data data, shared BinaryTree&lt;Data&gt;? left = null, shared BinaryTree&lt;Data&gt;? right = null) {<br/>\u00a0<br/>\tshared BinaryTree&lt;NewData&gt; myMap&lt;NewData&gt;(NewData f(Data d)) =&gt;<br/>\t\t\tBinaryTree {<br/>\t\t\t\tdata = f(data);<br/>\t\t\t\tleft = left?.myMap(f);<br/>\t\t\t\tright = right?.myMap(f);<br/>\t\t\t};<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tvalue tree1 = BinaryTree {<br/>\t\tdata = 3;<br/>\t\tleft = BinaryTree {<br/>\t\t\tdata = 4;<br/>\t\t};<br/>\t\tright = BinaryTree {<br/>\t\t\tdata = 5;<br/>\t\t\tleft = BinaryTree {<br/>\t\t\t\tdata = 6;<br/>\t\t\t};<br/>\t\t};<br/>\t};<br/>\u00a0<br/>\ttree1.myMap(print);<br/>\tprint(\"\");<br/>\u00a0<br/>\tvalue tree2 = tree1.myMap((x) =&gt; x * 333.33);<br/>\ttree2.myMap(print);<br/>}</pre>"}, {"lang": "Clean", "loc": 5, "block": "<pre class=\"text highlighted_source\">::Tree a = Empty | Node a (Tree a) (Tree a)<br/>\u00a0<br/>mapTree\u00a0:: (a -&gt; b) (Tree a) -&gt; (Tree b)<br/>mapTree f Empty        = Empty<br/>mapTree f (Node x l r) = Node (f x) (mapTree f l) (mapTree f r)</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>deftype pair <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span><span class=\"kw1\">car</span> 't<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> 't<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"sy0\">,</span><span class=\"kw1\">car</span> <span class=\"sy0\">,</span><span class=\"kw1\">cdr</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 46, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">class</span> ArrayTree<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T<span class=\"br0\">[</span>N<span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span>T initValue<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">data</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> initValue<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> tmap<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span> dg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dg<span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left<span class=\"br0\">)</span> left.<span class=\"me1\">tmap</span><span class=\"br0\">(</span>dg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>right<span class=\"br0\">)</span> right.<span class=\"me1\">tmap</span><span class=\"br0\">(</span>dg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Demo code.</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Instantiate the template ArrayTree of three doubles.</span><br/>    <span class=\"kw2\">alias</span> AT3 <span class=\"sy0\">=</span> ArrayTree<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Allocate the tree root.</span><br/>    <span class=\"kw4\">auto</span> root <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.00</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Add some nodes.</span><br/>    root.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    root.<span class=\"me1\">left</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    root.<span class=\"me1\">left</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    root.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    root.<span class=\"me1\">right</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.21</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    root.<span class=\"me1\">right</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> AT3<span class=\"br0\">(</span><span class=\"nu16\">1.22</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Now the tree has seven nodes.</span><br/>\u00a0<br/>    <span class=\"co1\">// Show the arrays of the whole tree.</span><br/>    <span class=\"co1\">//root.tmap(x =&gt; writefln(\"%(%.2f\u00a0%)\", x));</span><br/>    root.<span class=\"me1\">tmap</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%.2f\u00a0%)\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Modify the arrays of the whole tree.</span><br/>    <span class=\"co1\">//root.tmap((x){ x[] += 10; });</span><br/>    root.<span class=\"me1\">tmap</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Show the arrays of the whole tree again.</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//root.tmap(x =&gt; writefln(\"%(%.2f\u00a0%)\", x));</span><br/>    root.<span class=\"me1\">tmap</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%.2f\u00a0%)\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 42, "block": "<pre class=\"text highlighted_source\">class TreeNode&lt;T&gt; {<br/>\u00a0<br/>  T value;<br/>  TreeNode&lt;T&gt; left;<br/>  TreeNode&lt;T&gt; right;<br/>\u00a0<br/>  TreeNode(this.value);<br/>\u00a0<br/>  TreeNode map(T f(T t)) {<br/>    var node = new TreeNode(f(value)); <br/>    if(left\u00a0!= null) {<br/>      node.left = left.map(f);<br/>    }<br/>    if(right\u00a0!= null) {<br/>      node.right = right.map(f);<br/>    }<br/>    return node;<br/>  }<br/>\u00a0<br/>  void forEach(void f(T t)) {<br/>    f(value);<br/>    if(left\u00a0!= null) {<br/>      left.forEach(f);<br/>    }<br/>    if(right\u00a0!= null) {<br/>      right.forEach(f);<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>void main() {<br/>  TreeNode root = new TreeNode(1);<br/>  root.left = new TreeNode(2);<br/>  root.right = new TreeNode(3);<br/>  root.left.right = new TreeNode(4);<br/>\u00a0<br/>  print('first tree');<br/>  root.forEach(print);<br/>  var newRoot = root.map((t) =&gt; t * 222);<br/>  print('second tree');<br/>  newRoot.forEach(print);<br/>}</pre>"}, {"lang": "E", "loc": 31, "block": "<pre class=\"e highlighted_source\">interface TreeAny <a href=\"http://wiki.erights.org/wiki/guards\"><span class=\"kw5\">guards</span></a> TreeStamp <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> Tree <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> get<span class=\"br0\">(</span>Value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> Tree1 <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> coerce<span class=\"br0\">(</span>specimen<span class=\"sy0\">,</span> ejector<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> tree <span class=\"sy0\">:=</span> TreeAny.<span class=\"me1\">coerce</span><span class=\"br0\">(</span>specimen<span class=\"sy0\">,</span> ejector<span class=\"br0\">)</span><br/>                <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>tree.<span class=\"me1\">valueType</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> Value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://wiki.erights.org/wiki/throw\"><span class=\"kw6\">throw</span></a>.<span class=\"me1\">eject</span><span class=\"br0\">(</span>ejector<span class=\"sy0\">,</span> <span class=\"st0\">\"Tree value type mismatch\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                return tree<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        return Tree1<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeTree<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> value <span class=\"sy0\">:</span>T<span class=\"sy0\">,</span> left <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/nullOk\"><span class=\"kw6\">nullOk</span></a><span class=\"br0\">[</span>Tree<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> right <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/nullOk\"><span class=\"kw6\">nullOk</span></a><span class=\"br0\">[</span>Tree<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> tree <a href=\"http://wiki.erights.org/wiki/implements\"><span class=\"kw5\">implements</span></a> TreeStamp <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> valueType<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return T <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> map<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            value <span class=\"sy0\">:=</span> f<span class=\"br0\">(</span>value<span class=\"br0\">)</span>  <span class=\"co1\"># the declaration of value causes this to be checked</span><br/>            <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>left <span class=\"sy0\">!=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                left.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                right.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return tree<br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/>    <span class=\"kw1\">namespace</span> RosettaCode<br/>\u00a0<br/>    <span class=\"kw1\">type</span> BinaryTree<span class=\"sy0\">&lt;</span><span class=\"st0\">'T&gt; = <br/>      | Element of '</span>T <br/>      | Tree <span class=\"kw1\">of</span> <span class=\"st0\">'T * BinaryTree&lt;'</span>T<span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span> BinaryTree<span class=\"sy0\">&lt;</span><span class=\"st0\">'T&gt;<br/>      member this.Map(f) =<br/>        match this with<br/>        | Element(x) -&gt; Element(f x)<br/>        | Tree(x,left,right) -&gt; Tree((f x), left.Map(f), right.Map(f))<br/></span></pre>"}, {"lang": "Fortran", "loc": 35, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> SORTSEARCH\t\t<span class=\"co1\">!Genuflect towards Prof. D. Knuth.</span><br/>\u00a0<br/>       <span class=\"kw1\">INTERFACE</span> FIND\t\t\t<span class=\"co1\">!Binary chop search, not indexed.</span><br/>        <span class=\"kw1\">MODULE</span> <span class=\"kw1\">PROCEDURE</span><br/>     <span class=\"nu0\">1</span>   FINDI4,\t\t\t\t<span class=\"co1\">!I: of integers.</span><br/>     <span class=\"nu0\">2</span>   FINDF4,FINDF8,\t\t\t\t<span class=\"co1\">!F: of numbers.</span><br/>     <span class=\"nu0\">3</span>          FINDTTI2,FINDTTI4\t\t<span class=\"co1\">!T: of texts.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">INTERFACE</span> FIND<br/>\u00a0<br/>      <span class=\"kw1\">CONTAINS</span><br/>      <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> FINDI4<span class=\"br0\">(</span>THIS,NUMB,N<span class=\"br0\">)</span>\t<span class=\"co1\">!Binary chopper. Find i such that THIS = NUMB(i)</span><br/>       <span class=\"kw3\">USE</span> ASSISTANCE\t\t<span class=\"co1\">!Only for the trace stuff.</span><br/>       <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> THIS,NUMB,N\t<span class=\"co1\">!Imply read-only, but definitely no need for any \"copy-back\".</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> THIS,NUMB<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:*</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Where is THIS in array NUMB(1:N)?</span><br/>       <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!The count. In other versions, it is supplied by the index.</span><br/>       <span class=\"kw3\">INTEGER</span> L,R,P\t\t<span class=\"co1\">!Fingers.</span><br/><span class=\"co1\">Chop away.</span><br/>        L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!Establish outer bounds.</span><br/>        R <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!One before, and one after, the first and last.</span><br/>    <span class=\"nu0\">1</span>   P <span class=\"sy0\">=</span> <span class=\"br0\">(</span>R <span class=\"sy0\">-</span> L<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>\t\t<span class=\"co1\">!Probe point offset. Beware integer overflow with (L + R)/2.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Aha! Nowhere! And THIS follows NUMB(L).</span><br/>          FINDI4 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>L\t\t<span class=\"co1\">!Having -L rather than 0 (or other code) might be of interest.</span><br/>          <span class=\"kw1\">RETURN</span>\t\t<span class=\"co1\">!Finished.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for exhaustion.</span><br/>        P <span class=\"sy0\">=</span> P <span class=\"sy0\">+</span> L\t\t<span class=\"co1\">!Convert from offset to probe point.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>THIS <span class=\"sy0\">-</span> NUMB<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>\t<span class=\"co1\">!Compare to the probe point.</span><br/>    <span class=\"nu0\">2</span>   L <span class=\"sy0\">=</span> P\t\t\t<span class=\"co1\">!Shift the left bound up: THIS follows NUMB(P).</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Another chop.</span><br/>    <span class=\"nu0\">3</span>   R <span class=\"sy0\">=</span> P\t\t\t<span class=\"co1\">!Shift the right bound down: THIS precedes NUMB(P).</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Try again.</span><br/><span class=\"co1\">Caught it! THIS = NUMB(P)</span><br/>    <span class=\"nu0\">4</span>   FINDI4 <span class=\"sy0\">=</span> P\t\t<span class=\"co1\">!So, THIS is found, here!</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> FINDI4\t<span class=\"co1\">!On success, THIS = NUMB(FINDI4); no fancy index here...</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> SORTSEARCH </pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> average<span class=\"sy1\">(</span>c intCollection<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> sum<span class=\"sy1\">,</span> count <span class=\"kw4\">int</span><br/>    c<span class=\"sy3\">.</span>mapElements<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> n<br/>        count<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">})</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>sum<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>count<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    t1 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>binaryTree<span class=\"sy1\">)</span><br/>    t2 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>bTree<span class=\"sy1\">)</span><br/>    a1 <span class=\"sy2\">:=</span> average<span class=\"sy1\">(</span>t1<span class=\"sy1\">)</span><br/>    a2 <span class=\"sy2\">:=</span> average<span class=\"sy1\">(</span>t2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"binary tree average:\"</span><span class=\"sy1\">,</span> a1<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"b-tree average:\"</span><span class=\"sy1\">,</span> a2<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> intCollection <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    mapElements<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> binaryTree <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// dummy representation details</span><br/>    left<span class=\"sy1\">,</span> right <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>binaryTree<span class=\"sy1\">)</span> mapElements<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// dummy implementation</span><br/>    <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>left <span class=\"sy3\">==</span> t<span class=\"sy3\">.</span>right <span class=\"sy1\">{</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> bTree <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// dummy representation details</span><br/>    buckets <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>bTree<span class=\"sy1\">)</span> mapElements<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// dummy implementation</span><br/>    <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>buckets &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        visit<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 17, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    T value<br/>    Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<br/>    Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<br/>\u00a0<br/>    Tree<span class=\"br0\">(</span>T value <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a>, Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a>, Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> left<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> replaceAll<span class=\"br0\">(</span>T value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value<br/>        left<span class=\"sy0\">?</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>        right<span class=\"sy0\">?</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Tree a <span class=\"sy0\">=</span> Empty <span class=\"sy0\">|</span> Node a <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span> <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span><br/>\u00a0<br/>mapTree <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Tree a <span class=\"sy0\">-&gt;</span> Tree b<br/>mapTree f Empty        <span class=\"sy0\">=</span> Empty<br/>mapTree f <span class=\"br0\">(</span>Node x l r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>f x<span class=\"br0\">)</span> <span class=\"br0\">(</span>mapTree f l<span class=\"br0\">)</span> <span class=\"br0\">(</span>mapTree f r<span class=\"br0\">)</span></pre>"}, {"lang": "Inform 7", "loc": 13, "block": "<pre class=\"text highlighted_source\">Polymorphism is a room.<br/>\u00a0<br/>To find (V - K) in (L - list of values of kind K):<br/>\trepeat with N running from 1 to the number of entries in L:<br/>\t\tif entry N in L is V:<br/>\t\t\tsay \"Found [V] at entry [N] in [L].\";<br/>\t\t\tstop;<br/>\tsay \"Did not find [V] in [L].\"<br/>\u00a0<br/>When play begins:<br/>\tfind \"needle\" in {\"parrot\", \"needle\", \"rutabaga\"};<br/>\tfind 6 in {2, 3, 4};<br/>\tend the story.</pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    bTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    mapTree<span class=\"br0\">(</span>bTree<span class=\"sy0\">,</span> <span class=\"kw4\">write</span><span class=\"br0\">)</span><br/>    bTree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"eight\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    mapTree<span class=\"br0\">(</span>bTree<span class=\"sy0\">,</span> <span class=\"kw4\">write</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mapTree<span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> f<span class=\"br0\">(</span><span class=\"sy0\">\\</span>tree<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> mapTree<span class=\"br0\">(</span><span class=\"sy0\">!</span>tree<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> T value<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> replaceAll<span class=\"br0\">(</span>T value<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>left <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>\t\t\tleft.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>\t\t\tright.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> T value<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Tree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> replaceAll<span class=\"br0\">(</span>T value<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>left <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>\t\t\tleft.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>\t\t\tright.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">mutable struct Tree{T}<br/>    value::T<br/>    lchild::Nullable{Tree{T}}<br/>    rchild::Nullable{Tree{T}}<br/>end<br/>\u00a0<br/>function replaceall!(t::Tree{T}, v::T) where T<br/>    t.value = v<br/>    isnull(lchild) || replaceall(get(lchild), v)<br/>    isnull(rchild) || replaceall(get(rchild), v)<br/>    return t<br/>end</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> left <span class=\"sy0\">:</span> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> right<span class=\"sy0\">:</span> BinaryTree<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>\u00a0<br/>    fun <span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span> map<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>T<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> U<span class=\"br0\">)</span><span class=\"sy0\">:</span> BinaryTree<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tree <span class=\"sy0\">=</span> BinaryTree<span class=\"sy0\">&lt;</span>U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>left  <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> tree.<span class=\"me1\">left</span>  <span class=\"sy0\">=</span> left<span class=\"sy0\">?</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>right <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> tree.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<span class=\"sy0\">?</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> tree<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun showTopThree<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(${left?.value}, $value, ${right?.value})\"</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b   <span class=\"sy0\">=</span> BinaryTree<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    b.<span class=\"me1\">left</span>  <span class=\"sy0\">=</span> BinaryTree<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    b.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> BinaryTree<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>b.<span class=\"me1\">showTopThree</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b2  <span class=\"sy0\">=</span> b.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span>b2.<span class=\"me1\">showTopThree</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mercury", "loc": 6, "block": "<pre class=\"text highlighted_source\">:- type tree(A) ---&gt; empty\u00a0; node(A, tree(A), tree(A)).<br/>\u00a0<br/>:- func map(func(A) = B, tree(A)) = tree(B).<br/>\u00a0<br/>map(_, empty) = empty.<br/>map(F, node(A, Left, Right)) = node(F(A), map(F, Left), map(F, Right)).</pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">type Tree[T] = ref object<br/>  value: T<br/>  left, right: Tree[T]</pre>"}, {"lang": "Objective-C", "loc": 16, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> Tree&lt;T&gt; <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>  T value;<br/>  Tree&lt;T&gt; <span class=\"sy0\">*</span>left;<br/>  Tree&lt;T&gt; <span class=\"sy0\">*</span>right;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>replaceAll<span class=\"sy0\">:</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span>v;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Tree<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>replaceAll<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>v <span class=\"br0\">{</span><br/>  value <span class=\"sy0\">=</span> v;<br/>  <span class=\"br0\">[</span>left replaceAll<span class=\"sy0\">:</span>v<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">[</span>right replaceAll<span class=\"sy0\">:</span>v<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> <span class=\"sy0\">'</span>a tree <span class=\"sy0\">=</span> Empty <span class=\"sy0\">|</span> Node <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a tree <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a tree<br/>\u00a0<br/><span class=\"co1\">(** val map_tree\u00a0: ('a -&gt; 'b) -&gt; 'a tree -&gt; 'b tree *)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> map_tree f <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> Empty        <span class=\"sy0\">-&gt;</span> Empty<br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>x,l,r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Node <span class=\"br0\">(</span>f x, map_tree f l, map_tree f r<span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">role</span> BinaryTree<span class=\"br0\">[</span><span class=\"sy0\">::</span><span class=\"me2\">T</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> T <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> BinaryTree<span class=\"br0\">[</span>T<span class=\"br0\">]</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> BinaryTree<span class=\"br0\">[</span>T<span class=\"br0\">]</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> replace<span class=\"sy0\">-</span><span class=\"kw3\">all</span><span class=\"br0\">(</span>T <span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$!value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$!left</span><span class=\"sy0\">.</span><span class=\"me1\">replace</span><span class=\"sy0\">-</span><span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$!left</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$!right</span><span class=\"sy0\">.</span><span class=\"me1\">replace</span><span class=\"sy0\">-</span><span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$!right</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> IntTree <span class=\"kw1\">does</span> BinaryTree<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> IntTree <span class=\"re0\">$it</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                      left  <span class=\"sy0\">=&gt;</span> IntTree<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      right <span class=\"sy0\">=&gt;</span> IntTree<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$it</span><span class=\"sy0\">.</span><span class=\"me1\">replace</span><span class=\"sy0\">-</span><span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$it</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre>        &lt;-------- object ---------&gt;\n        |                |\n        +-atom           +-sequence\n          |                |\n          +-integer        +-string\n</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de mapTree (Tree Fun)<br/>   (set Tree (Fun (car Tree)))<br/>   (and (cadr Tree) (mapTree @ Fun))<br/>   (and (cddr Tree) (mapTree @ Fun)) )</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang typed/racket<br/>\u00a0<br/>(define-type (Tree A) (U False (Node A)))<br/>\u00a0<br/>(struct: (A) Node<br/>  ([val\u00a0: A] [left\u00a0: (Tree A)] [right\u00a0: (Tree A)])<br/>  #:transparent)<br/>\u00a0<br/>(: tree-map (All (A B) (A -&gt; B) (Tree A) -&gt; (Tree B)))<br/>(define (tree-map f tree)<br/>  (match tree<br/>    [#f #f]<br/>    [(Node val left right)<br/>     (Node (f val) (tree-map f left) (tree-map f right))]))<br/>\u00a0<br/>;; unit tests<br/>(require typed/rackunit)<br/>(check-equal?<br/> (tree-map add1 (Node 5 (Node 3 #f #f) #f))<br/> (Node 6 (Node 4 #f #f) #f))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  (with displays)  a method of  parametric polymorphism.    */</span><br/><span class=\"kw1\">call</span> newRoot  <span class=\"nu0\">1.00</span>, <span class=\"nu0\">3</span>                            <span class=\"coMULTI\">/*new root,  and also indicate 3 stems.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  no need to label the stems.    */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.10</span>                               <span class=\"coMULTI\">/*a new stem  and  its initial value.  */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.11</span>                               <span class=\"coMULTI\">/*\"  \"    \"    \"    \"     \"      \"     */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.12</span>                               <span class=\"coMULTI\">/*\"  \"    \"    \"    \"     \"      \"     */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.20</span>                               <span class=\"coMULTI\">/*\"  \"    \"    \"    \"     \"      \"     */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.21</span>                               <span class=\"coMULTI\">/*\"  \"    \"    \"    \"     \"      \"     */</span><br/><span class=\"kw1\">call</span> addStem  <span class=\"nu0\">1.22</span>                               <span class=\"coMULTI\">/*\"  \"    \"    \"    \"     \"      \"     */</span><br/>                       <span class=\"kw1\">call</span> sayNodes             <span class=\"coMULTI\">/*display some nicely formatted values.*/</span><br/><span class=\"kw1\">call</span> modRoot  <span class=\"nu0\">50</span>                                 <span class=\"coMULTI\">/*modRoot will add fifty to all stems. */</span><br/>                       <span class=\"kw1\">call</span> sayNodes             <span class=\"coMULTI\">/*display some nicely formatted values.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>addStem:  nodes=nodes + <span class=\"nu0\">1</span>;     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> stems;   root<span class=\"sy0\">.</span>nodes<span class=\"sy0\">.</span>j=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>;     <span class=\"kw1\">return</span><br/>newRoot:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,stems; nodes=-<span class=\"nu0\">1</span>; <span class=\"kw1\">call</span> addStem <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>; <span class=\"kw1\">call</span> addStem @;  <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>modRoot:  <span class=\"kw1\">arg</span> #;   <span class=\"kw1\">do</span>    j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nodes          <span class=\"coMULTI\">/*traipse through all the defined nodes*/</span><br/>                      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> stems<br/>                      <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>root<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> root<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k=root<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k + #  <span class=\"coMULTI\">/*add bias.*/</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                <span class=\"coMULTI\">/* [\u2191]  only add if numeric stem value.*/</span><br/>                   <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sayNodes: w=<span class=\"nu0\">9</span>;     <span class=\"kw1\">do</span>    j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span>  nodes;   _=    <span class=\"coMULTI\">/*ensure each of the nodes gets shown. */</span><br/>                      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> stems;   _=_ <span class=\"kw6\">center</span><span class=\"br0\">(</span>root<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k, w<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*concatenate a node*/</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                   $=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'node='</span>j, <span class=\"nu0\">1</span> +  <span class=\"br0\">(</span>j<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\">/*define a label for this line's output*/</span><br/>                   <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>$, w<span class=\"br0\">)</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*ignore 1st (leading) blank which was */</span><br/>                   <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span>                <span class=\"coMULTI\">/* [\u2191]         caused by concatenation.*/</span><br/>          <span class=\"kw1\">say</span>                                    <span class=\"coMULTI\">/*show a blank line to separate outputs*/</span><br/>          <span class=\"kw1\">return</span>                                 <span class=\"coMULTI\">/* [\u2191]  extreme indentation to terminal*/</span></pre>"}, {"lang": "Rust", "loc": 46, "block": "<pre class=\"text highlighted_source\">struct TreeNode&lt;T&gt; {<br/>    value: T,<br/>    left: Option&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,<br/>    right: Option&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,<br/>}<br/>\u00a0<br/>impl &lt;T&gt; TreeNode&lt;T&gt; {<br/>    fn my_map&lt;U,F&gt;(&amp;self, f: &amp;F) -&gt; TreeNode&lt;U&gt; where<br/>            F: Fn(&amp;T) -&gt; U {<br/>        TreeNode {<br/>            value: f(&amp;self.value),<br/>            left: match self.left {<br/>                None =&gt; None,<br/>                Some(ref n) =&gt; Some(Box::new(n.my_map(f))),<br/>            },<br/>            right: match self.right {<br/>                None =&gt; None,<br/>                Some(ref n) =&gt; Some(Box::new(n.my_map(f))),<br/>            },<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let root = TreeNode {<br/>        value: 3,<br/>        left: Some(Box::new(TreeNode {<br/>            value: 55,<br/>            left: None,<br/>            right: None,<br/>        })),<br/>        right: Some(Box::new(TreeNode {<br/>            value: 234,<br/>            left: Some(Box::new(TreeNode {<br/>                value: 0,<br/>                left: None,<br/>                right: None,<br/>            })),<br/>            right: None,<br/>        })),<br/>    };<br/>    root.my_map(&amp;|x| { println!(\"{}\" , x)});<br/>    println!(\"---------------\");<br/>    let new_root = root.my_map(&amp;|x| *x as f64 * 333.333f64);<br/>    new_root.my_map(&amp;|x| { println!(\"{}\" , x) });<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Tree<span class=\"br0\">[</span>+A<span class=\"br0\">]</span><span class=\"br0\">(</span>value<span class=\"sy0\">:</span> A, left<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Tree<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">]</span>, right<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Tree<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> map<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> B<span class=\"br0\">)</span><span class=\"sy0\">:</span> Tree<span class=\"br0\">[</span>B<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    Tree<span class=\"br0\">(</span>f<span class=\"br0\">(</span>value<span class=\"br0\">)</span>, left map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span>, right map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func type: container (in type: elemType) is func<br/>  result<br/>    var type: container is void;<br/>  begin<br/>    container\u00a0:= array elemType;<br/>\u00a0<br/>    global<br/>\u00a0<br/>      const func container: map (in container: aContainer,<br/>          inout elemType: aVariable, ref func elemType: aFunc) is func<br/>        result<br/>          var container: mapResult is container.value;<br/>        begin<br/>          for aVariable range aContainer do<br/>            mapResult &amp;:= aFunc;<br/>          end for;<br/>        end func;<br/>\u00a0<br/>    end global;<br/>  end func;<br/>\u00a0<br/>const type: intContainer is container(integer);<br/>var intContainer: container1 is [] (1, 2, 4, 6, 10, 12, 16, 18, 22);<br/>var intContainer: container2 is 0 times 0;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: num is 0;<br/>  begin<br/>    container2\u00a0:= map(container1, num, num + 1);<br/>    for num range container2 do<br/>      write(num &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">datatype 'a tree = Empty | Node of 'a * 'a tree * 'a tree<br/>\u00a0<br/>(** val map_tree = fn\u00a0: ('a -&gt; 'b) -&gt; 'a tree -&gt; 'b tree *)<br/>fun map_tree f Empty = Empty<br/>  | map_tree f (Node (x,l,r)) = Node (f x, map_tree f l, map_tree f r)</pre>"}, {"lang": "Swift", "loc": 11, "block": "<pre class=\"text highlighted_source\">class Tree&lt;T&gt; {<br/>  var value: T?<br/>  var left: Tree&lt;T&gt;?<br/>  var right: Tree&lt;T&gt;?<br/>\u00a0<br/>  func replaceAll(value: T?) {<br/>    self.value = value<br/>    left?.replaceAll(value)<br/>    right?.replaceAll(value)<br/>  }<br/>}</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">binary_tree_of \"node-type\" = \"node-type\"%hhhhWZAZ</pre>"}, {"lang": "Visual Prolog", "loc": 21, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>domains<br/>   tree<span class=\"br0\">{</span>Type<span class=\"br0\">}</span> <span class=\"sy6\">=</span> branch<span class=\"br0\">(</span>tree<span class=\"br0\">{</span>Type<span class=\"br0\">}</span> Left<span class=\"sy4\">,</span> tree<span class=\"br0\">{</span>Type<span class=\"br0\">}</span> Right<span class=\"br0\">)</span><span class=\"sy4\">;</span> leaf<span class=\"br0\">(</span>Type Value<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>class predicates<br/>   treewalk <span class=\"sy4\">:</span> <span class=\"br0\">(</span>tree<span class=\"br0\">{</span>X<span class=\"br0\">}</span><span class=\"sy4\">,</span>function<span class=\"br0\">{</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> tree<span class=\"br0\">{</span>Y<span class=\"br0\">}</span> procedure <span class=\"br0\">(</span>i<span class=\"sy4\">,</span>i<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>clauses<br/>   treewalk<span class=\"br0\">(</span>branch<span class=\"br0\">(</span>Left<span class=\"sy4\">,</span>Right<span class=\"br0\">)</span><span class=\"sy4\">,</span>Func<span class=\"br0\">)</span> <span class=\"sy6\">=</span> branch<span class=\"br0\">(</span>NewLeft<span class=\"sy4\">,</span>NewRight<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        NewLeft <span class=\"sy6\">=</span> treewalk<span class=\"br0\">(</span>Left<span class=\"sy4\">,</span>Func<span class=\"br0\">)</span><span class=\"sy4\">,</span> NewRight <span class=\"sy6\">=</span> treewalk<span class=\"br0\">(</span>Right<span class=\"sy4\">,</span>Func<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>   treewalk<span class=\"br0\">(</span>leaf<span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"sy4\">,</span>Func<span class=\"br0\">)</span> <span class=\"sy6\">=</span> leaf<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>        X <span class=\"sy6\">=</span> Func<span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>   run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>       init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       X <span class=\"sy6\">=</span> branch<span class=\"br0\">(</span>leaf<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> branch<span class=\"br0\">(</span>leaf<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>leaf<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       Y <span class=\"sy6\">=</span> treewalk<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>addone<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>       succeed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}]}