{"task": "String_prepend", "blocks": [{"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Prepend_String <span class=\"kw1\">is</span>   <br/>   S: Unbounded_String\u00a0:= To_Unbounded_String<span class=\"br0\">(</span><span class=\"st0\">\"World!\"</span><span class=\"br0\">)</span>; <br/><span class=\"kw1\">begin</span><br/>   S\u00a0:= <span class=\"st0\">\"Hello \"</span> &amp; S;<span class=\"co1\">-- this is the operation to prepend \"Hello \" to S. </span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>To_String<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Prepend_String;</pre>"}, {"lang": "ALGOL 68", "loc": 6, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/bin/a68g --script #</span><br/><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> str <span class=\"sy1\">:=</span> <span class=\"st0\">\"12345678\"</span><span class=\"sy1\">;</span><br/><span class=\"st0\">\"0\"</span> <span class=\"sy1\">+=:</span> str<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">s <span class=\"sy0\">:=</span> <span class=\"st0\">\"foo\"</span><br/>s <span class=\"sy0\">:=</span> s <span class=\"st0\">\"bar\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% s</pre>"}, {"lang": "AWK", "loc": 9, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f STRING_PREPEND.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    s = <span class=\"st0\">\"bar\"</span><br/>    s = <span class=\"st0\">\"foo\"</span> s<br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">S$ = \" World!\"<br/>S$ = \"Hello\" + S$<br/>PRINT S$<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 3, "block": "<pre class=\"text highlighted_source\">  World!:?string<br/>&amp; str$(\"Hello \"\u00a0!string):?string<br/>&amp; out$!string</pre>"}, {"lang": "C", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"my String\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>cstr<span class=\"sy0\">=</span><span class=\"st0\">\"Changed \"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>dup<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"st0\">\"%s%s\"</span><span class=\"sy0\">,</span>cstr<span class=\"sy0\">,</span><span class=\"br0\">(</span>dup<span class=\"sy0\">=</span>strdup<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>dup<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 13, "block": "<pre class=\"cpp highlighted_source\">include <span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> myStrings <span class=\"br0\">{</span> <span class=\"st0\">\"prepended to\"</span> , <span class=\"st0\">\"my string\"</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> prepended <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span> myStrings.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , <br/>\t myStrings.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">(</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> , <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> a , <br/>\t    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy2\">+</span> b <span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> prepended <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PrependString<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"World\"</span><span class=\"sy0\">;</span><br/>            str <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello \"</span> <span class=\"sy0\">+</span> str<span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> s <span class=\"br0\">(</span>ref <span class=\"st0\">\"World\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">dosync</span> <span class=\"br0\">(</span><span class=\"kw1\">alter</span> s #<span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"Hello \"</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">=&gt;</span> @s<br/><span class=\"st0\">\"Hello World\"</span></pre>"}, {"lang": "COBOL", "loc": 25, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> prepend<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> str <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"World!\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> <span class=\"kw3\">binary</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> len <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> scratch <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       begin<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">perform</span> rev-sub-str<br/>           <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span><span class=\"st0\">\"Hello \"</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> str <span class=\"br0\">(</span>len<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"br0\">)</span><br/>           <span class=\"kw2\">perform</span> rev-sub-str<br/>           <span class=\"kw2\">display</span> str<br/>           <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       rev-sub-str<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> len scratch<br/>           <span class=\"kw1\">inspect</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>           <span class=\"kw2\">tallying</span> scratch <span class=\"kw3\">for</span> <span class=\"kw3\">leading</span> <span class=\"kw3\">spaces</span><br/>               len <span class=\"kw3\">for</span> <span class=\"kw3\">characters</span> <span class=\"kw3\">after</span> <span class=\"kw3\">space</span><br/>           <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>str <span class=\"br0\">(</span><span class=\"nu0\">1</span>:len<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> str<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> prepend<span class=\"sy0\">.</span></pre>"}, {"lang": "ColdFusion", "loc": 6, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\t<span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> who <span class=\"sy0\">=</span> <span class=\"st0\">\"World!\"</span><span class=\"sy0\">&gt;</span></span><br/>\t#\"Hello \" &amp; who#<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> prependf <span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span>rest strs<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Prepend the given string variable with additional strings. The string variable is modified in-place.\"</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"sy0\">,</span>s <span class=\"br0\">(</span>concatenate 'string <span class=\"sy0\">,</span>@strs <span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *str* <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>prependf *str* <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format T <span class=\"st0\">\"~a~%\"</span> *str*<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"world!\"</span><span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello \"</span> <span class=\"sy0\">~</span> s<span class=\"sy0\">;</span> <br/>    writeln<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 3, "block": "<pre class=\"text highlighted_source\">local\u00a0:s \"world!\"<br/>set\u00a0:s concat( \"Hello \" s)<br/>!print s</pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">!-</span>string<span class=\"sy0\">-</span>prepend a before<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> a <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> before a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 #syntax:set<span class=\"sy0\">!-</span>string<span class=\"sy0\">-</span>prepend<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> name <span class=\"st0\">\"Presley\"</span><span class=\"br0\">)</span><br/>    \u2192 name<br/><span class=\"br0\">(</span>set<span class=\"sy0\">!-</span>string<span class=\"sy0\">-</span>prepend name <span class=\"st0\">\"Elvis \"</span><span class=\"br0\">)</span><br/>name<br/>    \u2192 <span class=\"st0\">\"Elvis Presley\"</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 14, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var s\u00a0:= \"World\".<br/>    s\u00a0:= \"Hello \" + s.<br/>    console writeLine:s.<br/>\u00a0<br/>    // Alternative way<br/>    var s2\u00a0:= String new:\"World\".<br/>    s2 insert:\"Hello \" at:0.<br/>    console writeLine:s2.<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>str1 = \"World!\"<br/>str = \"Hello, \" &lt;&gt; str1<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun glue (str1 str2)<br/>  (concat str1 str2) )<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>1&gt; S = \"world\".\n\"world\"\n2&gt; \"Hello \" ++ S.\n\"Hello world\"\n</pre>"}, {"lang": "ERRE", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>......<br/>S$=\" World!\"<br/>S$=\"Hello\"+S$<br/>PRINT(S$)<br/>......<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"world!\"</span><br/>s <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy0\">+</span> s<br/>printfn <span class=\"st0\">\"%s\"</span> s</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"world\"<br/>\"Hello \" prepend<br/>\u00a0</pre>"}, {"lang": "Falcon", "loc": 9, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"fun \"</span><br/>s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\"Falcon\"</span><br/><span class=\"sy0\">&gt;</span> s<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 19, "block": "<pre class=\"text highlighted_source\">\\ the following functions are commonly native to a Forth system. Shown for completeness<br/>\u00a0<br/>: C+!     ( n addr -- ) dup <a class=\"__cf_email__\" data-cfemail=\"533013\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> rot + swap c!\u00a0;             \\ primitive: increment a byte at addr by n<br/>\u00a0<br/>: +PLACE  ( addr1 length addr2 -- )                        \\ Append addr1 length to addr2<br/>          2dup 2&gt;r  count + swap move 2r&gt; c+!\u00a0;<br/>\u00a0<br/>: PLACE   ( addr1 len addr2 -- )                           \\ addr1 and length, placed at addr2 as counted string<br/>          2dup 2&gt;r  1+  swap  move  2r&gt; c!\u00a0;<br/>\u00a0<br/>\\ Example begins here<br/>: PREPEND ( addr len addr2 -- addr2)<br/>           &gt;R                                              \\ push addr2 to return stack<br/>           PAD PLACE                                       \\ place the 1st string in PAD<br/>           <a class=\"__cf_email__\" data-cfemail=\"7a283a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  count PAD +PLACE                            \\ append PAD with addr2 string<br/>           PAD count <a class=\"__cf_email__\" data-cfemail=\"91c3d1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   PLACE                            \\ move the whole thing back into addr2<br/>           R&gt;\u00a0;                                            \\ leave a copy of addr2 on the data stack<br/>\u00a0<br/>: writeln ( addr -- ) cr count type\u00a0;                      \\ syntax sugar for testing</pre>"}, {"lang": "Fortran", "loc": 15, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> I,TEXT<span class=\"br0\">(</span><span class=\"nu0\">66</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">DATA</span> TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,TEXT<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,TEXT<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"st0\">\"Wo\"</span>,<span class=\"st0\">\"rl\"</span>,<span class=\"st0\">\"d!\"</span><span class=\"sy0\">/</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Hello \"</span>,66A2<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">2</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><br/>    <span class=\"nu0\">2</span>   TEXT<span class=\"br0\">(</span>I <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>      TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"He\"</span><br/>      TEXT<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ll\"</span><br/>      TEXT<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"o \"</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">3</span> FORMAT <span class=\"br0\">(</span>66A2<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 6, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/>Var s = <span class=\"st0\">\"prepend\"</span><br/>s = <span class=\"st0\">\"String \"</span> + s<br/><span class=\"kw1\">Print</span> s <br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 9, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"world!\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString2 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello \"</span><br/>\u00a0<br/>sString1 <span class=\"sy0\">=</span> sString2 <span class=\"sy0\">&amp;</span> sString1<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sString1<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 2, "block": "<pre class=\"go highlighted_source\">s <span class=\"sy2\">:=</span> <span class=\"st0\">\"world!\"</span><br/>s <span class=\"sy2\">=</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy3\">+</span> s</pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/>Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"st0\">\" World!\"</span><span class=\"br0\">)</span><br/>Prelude<span class=\"sy0\">&gt;</span> f <span class=\"st0\">\"Hello\"</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 2, "block": "<pre class=\"unicon highlighted_source\">s <span class=\"sy0\">:=</span> <span class=\"st0\">\"world!\"</span><br/>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy0\">||</span> s</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   s=: <span class=\"st_h\">'value'</span><br/>   s<br/>value<br/>   s=: <span class=\"st_h\">'new '</span>,s<br/>   s<br/>new value</pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Prepend <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"world!\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello \"</span> <span class=\"sy0\">+</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// No built-in prepend</span><br/><span class=\"kw1\">var</span> s<span class=\"sy0\">=</span><span class=\"st0\">\", World\"</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span> <span class=\"sy0\">+</span> s<br/>print<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"world!\" as $s<br/>| \"Hello \" + $s</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">s = \"world!\"<br/>s = \"Hello \" * s</pre>"}, {"lang": "K", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    s: \"world!\"<br/>\"world!\"<br/>    \"Hello \" , s<br/>\"Hello world!\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Obama\"</span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"Barack \"</span> + s<br/>    println<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// It's also possible to use this standard library function</span><br/>    <span class=\"co1\">// though this is not what it's really intended for</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> <span class=\"st0\">\"Trump\"</span><br/>    t <span class=\"sy0\">=</span> t.<span class=\"me1\">prependIndent</span><span class=\"br0\">(</span><span class=\"st0\">\"Donald \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">local(x = ', World!')<br/>#x-&gt;merge(1,'Hello')<br/>#x // Hello, World!</pre>"}, {"lang": "LFE", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> s <span class=\"st0\">\"world\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"world\"</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>++ <span class=\"st0\">\"hello \"</span> s<span class=\"br0\">)</span><br/><span class=\"st0\">\"hello world\"</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">str = \"world!\"<br/>put \"Hello \" before str<br/>put str<br/>-- \"Hello world!\"</pre>"}, {"lang": "LiveCode", "loc": 3, "block": "<pre class=\"text highlighted_source\">put \"world\" into x<br/>put \"hello\" before x<br/>put x // hello world</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"12345678\"</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">..</span> s<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module PrependString {<br/>      A$=\"Hello\"<br/>      A$+=\" World\"<br/>      Print A$<br/>}<br/>PrependString<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">l\u00a0:= \" World\";<br/>m\u00a0:= cat(\"Hello\", l);<br/>n\u00a0:= \"Hello\"||l;<br/>o\u00a0:= `||`(\"Hello\", l);</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">a = \"any text value\";<br/>a =  \"another string literal\" &lt;&gt; a  (* using concatenation (no built-in prepend) *)</pre>"}, {"lang": "Mercury", "loc": 9, "block": "<pre class=\"text highlighted_source\">:- module string_prepend.<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>:- implementation.<br/>:- import_module string.<br/>main(!IO)\u00a0:-<br/>    S = \"World!\\n\",<br/>    io.write_string(\"Hello \" ++ S,\u00a0!IO).</pre>"}, {"lang": "NetRexx", "loc": 3, "block": "<pre class=\"netrexx highlighted_source\">s_ = <span class=\"st0\">'world!'</span><br/>s_ = <span class=\"st0\">'Hello, '</span>s_<br/><span class=\"kw1\">say</span> s_</pre>"}, {"lang": "NewLISP", "loc": 3, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> str <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#push\"><span class=\"kw1\">push</span></a> <span class=\"st0\">\"foo\"</span> str<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> str<span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">var str = \"12345678\"<br/>str = \"0\" &amp; str<br/>echo str</pre>"}, {"lang": "Objeck", "loc": 6, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Prepend  <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"world!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Hello {$s}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\" World\" \"Hello\" swap + println</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">s <span class=\"sy0\">=</span> <span class=\"st0\">\"world!\"</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 17, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> StringPrepend<span class=\"sy1\">;</span><br/><span class=\"co2\">{$mode objfpc}{$H+}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  <span class=\"co2\">{$IFDEF UNIX}{$IFDEF UseCThreads}</span><br/>  cthreads<span class=\"sy1\">,</span><br/>  <span class=\"co2\">{$ENDIF}{$ENDIF}</span><br/>  Classes<br/>  <span class=\"coMULTI\">{ you can add units after this }</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">String</span> <span class=\"sy3\">=</span> <span class=\"st0\">' World\u00a0!'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Hello'</span> <span class=\"sy3\">+</span> s<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">ReadLn</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 21, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <span class=\"st_h\">':all'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># explicit concatentation</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bar'</span><span class=\"sy0\">;</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Foo'</span> <span class=\"sy0\">.</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>say<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># lvalue substr</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bar'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Foo'</span><span class=\"sy0\">;</span><br/>say<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># interpolation as concatenation</span><br/><span class=\"co1\"># (NOT safe if concatenate sigils)</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bar'</span><span class=\"sy0\">;</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Foo$_\"</span><span class=\"sy0\">;</span><br/>say<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 24, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># explicit concatentation</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'byte'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'kilo'</span> <span class=\"sy0\">~</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># interpolation as concatenation</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'buck'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"mega$_\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># lvalue substr</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bit'</span><span class=\"sy0\">;</span><br/>substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'nano'</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># regex substitution</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'fortnight'</span><span class=\"sy0\">;</span><br/>s<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'micro'</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># reversed append assignment</span><br/><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'cooper'</span><span class=\"sy0\">;</span> <br/><span class=\"re0\">$_</span> <span class=\"br0\">[</span>R<span class=\"sy0\">~</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st_h\">'mini'</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">string s = \"World\"<br/>s = \"Hello \"&amp;s</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(setq Str1 \"12345678!\")<br/>(setq Str1 (pack \"0\" Str1))<br/>(println Str1)</pre>"}, {"lang": "PL/I", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Pre_Cat: procedure options (main); /* 2 November 2013 */<br/>   declare s character (100) varying;<br/>   s = ' bowl';<br/>   s = 'dust' || s;<br/>   put (s);<br/>end Pre_Cat;<br/>\u00a0</pre>"}, {"lang": "Plain TeX", "loc": 11, "block": "<pre class=\"text highlighted_source\">\\def\\prepend#1#2{% #1=string  #2=macro containing a string<br/>\t\\def\\tempstring{#1}%<br/>\t\\expandafter\\expandafter\\expandafter<br/>\t\\def\\expandafter\\expandafter\\expandafter<br/>\t#2\\expandafter\\expandafter\\expandafter<br/>\t{\\expandafter\\tempstring#2}%<br/>}<br/>\\def\\mystring{world!}<br/>\\prepend{Hello }\\mystring<br/>Result\u00a0: \\mystring<br/>\\bye</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"World!\"</span><br/><span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$str</span><br/><span class=\"re0\">$str</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 14, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy4\">,</span> xfx<span class=\"sy4\">,</span> user<span class=\"sy4\">:</span><span class=\"br0\">(</span><span class=\"sy6\">=</span><span class=\"sy3\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%% +Prepend =+ +Chars</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%    Will destructively update Chars</span><br/><span class=\"co1\">%    So that Chars = Prepend prefixed to Chars.</span><br/><span class=\"co1\">%    eazar001 in ##prolog helped refine this approach.</span><br/>\u00a0<br/><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span> <span class=\"sy6\">=</span><span class=\"sy3\">+</span> Chars <span class=\"sy1\">:-</span><br/>  append<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Chars<span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  nb_setarg<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Chars<span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  nb_setarg<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Chars<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 8, "block": "<pre class=\"purebasic highlighted_source\">S$ <span class=\"sy0\">=</span> <span class=\"st0\">\" World!\"</span><br/>S$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span> <span class=\"sy0\">+</span> S$<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>S$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"12345678\"</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> + s  <span class=\"co1\"># by concatenation</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">;there is no built-in way to set! prepend in racket<br/>(define str \"foo\")<br/>(set! str (string-append \"bar \" str))<br/>(displayln str)<br/>\u00a0<br/>;but you can create a quick macro to solve that problem<br/>(define-syntax-rule (set-prepend! str value)<br/>  (set! str (string-append value str)))<br/>\u00a0<br/>(define macrostr \" bar\")<br/>(set-prepend! macrostr \"foo\")<br/>(displayln macrostr)<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 5, "block": "<pre class=\"text highlighted_source\">Red []<br/>s: \"world\"<br/>insert s \"hello \"<br/>print s<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 14, "block": "<pre class=\"rexx highlighted_source\">zz= <span class=\"st0\">'llo world!'</span>          <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 using literal abuttal.\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>zz= <span class=\"st0\">'he'</span>zz                <span class=\"coMULTI\">/*This won't work if the variable name is  X  or  B */</span><br/><span class=\"kw1\">say</span> zz<br/>\u00a0<br/>\u00a0<br/>gg = <span class=\"st0\">\"llo world!\"</span>         <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 using literal concatenation.\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>gg = <span class=\"st0\">'he'</span> <span class=\"sy0\">||</span> gg<br/><span class=\"kw1\">say</span> gg<br/>\u00a0<br/>\u00a0<br/>aString= <span class=\"st0\">'llo world!'</span>     <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 using variable concatenation.\u2500\u2500\u2500\u2500\u2500*/</span><br/>bString= <span class=\"st0\">\"he\"</span><br/>aString= bString <span class=\"sy0\">||</span> aString<br/><span class=\"kw1\">say</span> aString</pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"World!\"<br/>bString = \"Hello, \" + aString<br/>see bString + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">str = <span class=\"st0\">\"llo world\"</span><br/>str.<span class=\"me1\">prepend</span><span class=\"br0\">(</span><span class=\"st0\">\"He\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> str <span class=\"co1\">#=&gt; \"Hello world\"</span></pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>let mut s = \"World\".to_string();<br/>s.insert_str(0, \"Hello \");<br/>println!(\"{}\", s);<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"World\"</span> <span class=\"co1\">// Immutables are recommended   //&gt; s \u00a0: String = World</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\", \"</span> <span class=\"co1\">//Function assigned to variable</span><br/>                                                  <span class=\"co1\">//&gt; f2 \u00a0: () =&gt; String = &lt;function0&gt;</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span> + f2<span class=\"br0\">(</span><span class=\"br0\">)</span> + s                     <span class=\"co1\">//&gt; s1 \u00a0: String = Hello, World</span><br/>  println<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">;</span>                                    <span class=\"co1\">//&gt; Hello, World</span></pre>"}, {"lang": "Seed7", "loc": 9, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: s is \"world!\";<br/>  begin<br/>    s\u00a0:= \"Hello \" &amp; s; <br/>    writeln(s);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var str = <span class=\"st0\">'llo!'</span>;<br/>str.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^<span class=\"sy0\">/</span>, <span class=\"st0\">'He'</span><span class=\"br0\">)</span>;<br/>say str;</pre>"}, {"lang": "SNOBOL4", "loc": 3, "block": "<pre class=\"text highlighted_source\">    s = ', World!'<br/>    OUTPUT = s = 'Hello' s<br/>END</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">sca s=\"Vita Brevis\"<br/>sca s=\"Ars Longa \"+s<br/>di s<br/>\u00a0<br/>Ars Longa Vita Brevis</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">var str = \", World\"<br/>str = \"Hello \\(str)\"<br/>println(str)</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> s <span class=\"st0\">\"llo world\"</span><br/><span class=\"kw1\">set</span> s <span class=\"st0\">\"he$s\"</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$s</span></pre>"}, {"lang": "Ursa", "loc": 10, "block": "<pre class=\"text highlighted_source\">decl string s<br/>\u00a0<br/># set s to \"world\"<br/>set s \"world\"<br/>\u00a0<br/># prepend \"hello \"<br/>set s (+ \"hello \" s)<br/>\u00a0<br/># outputs \"hello world\"<br/>out s endl console</pre>"}, {"lang": "VBA", "loc": 6, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> StringPrepend()<br/><span class=\"kw4\">Dim</span> s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>s = <span class=\"st0\">\"bar\"</span><br/>s = <span class=\"st0\">\"foo\"</span> &amp; s<br/>Debug.<span class=\"kw4\">Print</span> s<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 3, "block": "<pre class=\"vb highlighted_source\">s = <span class=\"st0\">\"bar\"</span><br/>s = <span class=\"st0\">\"foo\"</span> &amp; s<br/>WScript.Echo s</pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"python highlighted_source\">s <span class=\"sy0\">&lt;</span>- <span class=\"st0\">\"12345678\"</span><br/>s <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span> + s<span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">s:=\"bar\"; s=\"foo\" + s;           s.println();<br/>s:=\"bar\"; s=String(\"foo\",s);     s.println();<br/>s:=\"bar\"; s=\"%s%s\".fmt(\"foo\",s); s.println();<br/>   // a Data is a byte buffer/editor:<br/>s:=Data(Void,\"bar\").insert(0,\"foo\").text; s.println();</pre>"}]}