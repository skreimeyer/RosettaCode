{"task": "Sequence_of_primorial_primes", "blocks": [{"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    mpz_t p<span class=\"sy0\">,</span> s<span class=\"sy0\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mpz_nextprime<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        mpz_mul<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        mpz_add_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mpz_probab_prime_p<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            mpz_sub_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            gmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            i<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        mpz_sub_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mpz_probab_prime_p<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            mpz_add_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            gmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            i<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        mpz_add_ui<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    mpz_clear<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mpz_clear<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 20, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ns example<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Lazy Sequence of primes (starting with number 2)</span><br/><span class=\"br0\">(</span>def primes <span class=\"br0\">(</span>iterate #<span class=\"br0\">(</span><span class=\"sy0\">.</span>nextProbablePrime <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>biginteger <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn primorial-prime? <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Test if value is a primorial prime \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>a <span class=\"br0\">(</span>biginteger <span class=\"br0\">(</span>inc v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        b <span class=\"br0\">(</span>biginteger <span class=\"br0\">(</span>dec v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>isProbablePrime a <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">.</span>isProbablePrime b <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Generate indexes for first 20 primorial primes</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>take <span class=\"nu0\">20</span> <span class=\"br0\">(</span>keep-indexed                                 <span class=\"co1\">; take the first 20</span><br/>                          #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>primorial-prime? <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> <span class=\"br0\">(</span>inc <span class=\"sy0\">%</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; filters out non-primorials, passing on the index + 1 (since sequence begins with 1 (not 0)</span><br/>                          <span class=\"br0\">(</span>reductions *' primes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">; computes the lazy sequence of product of 1 prime, 2 primes, 3 primes, etc.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'timer<span class=\"br0\">)</span> <span class=\"co1\">;; for (every (proc t) interval)</span><br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; memoize primorial</span><br/><span class=\"br0\">(</span>define p1000 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>primes <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; remember first 1000 primes</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>primorial n<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>zero? n<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <br/>    <span class=\"br0\">(</span>* <span class=\"br0\">(</span>list-ref p1000 n<span class=\"br0\">)</span> <span class=\"br0\">(</span>primorial <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember 'primorial<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define N <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; search one at a time</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>search t<span class=\"br0\">)</span> <span class=\"co1\">;; time parameter, set by (every),  not used</span><br/><span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> N <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ N<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>prime? <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>primorial N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>prime? <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>primorial N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>writeln 'HIT N <span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>writeln N <span class=\"br0\">(</span>date-<span class=\"sy0\">&gt;</span>time-string <span class=\"br0\">(</span>current-date <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">PROGRAM</span> PRIMORIALP\t<span class=\"co1\">!Simple enough, with some assistants.</span><br/>      <span class=\"kw3\">USE</span> PRIMEBAG\t\t<span class=\"co1\">!Some prime numbers are wanted.</span><br/>      <span class=\"kw3\">USE</span> BIGNUMBERS\t\t<span class=\"co1\">!Just so.</span><br/>      <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>BIGNUM<span class=\"br0\">)</span> B\t\t<span class=\"co1\">!I'll have one.</span><br/>      <span class=\"kw3\">INTEGER</span> MAXF\t\t<span class=\"co1\">!Largest factor to consider by direct division.</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>MAXF <span class=\"sy0\">=</span> <span class=\"nu0\">18000000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Some determination.</span><br/>      <span class=\"kw3\">INTEGER</span> I\t\t\t<span class=\"co1\">!Step stuff.</span><br/>      <span class=\"kw3\">INTEGER</span> FU,FD\t\t<span class=\"co1\">!Found factors.</span><br/>      <span class=\"kw3\">INTEGER</span> NHIT,HIT<span class=\"br0\">(</span><span class=\"nu0\">666</span><span class=\"br0\">)</span>\t<span class=\"co1\">!A little list.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> WOT\t\t<span class=\"co1\">!A remark.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">66</span> ALINE\t<span class=\"co1\">!A scratchpad.</span><br/>      <span class=\"kw3\">REAL</span> T0,T1\t\t<span class=\"co1\">!In memory of lost time.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t<span class=\"co1\">!Standard output.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> BIGLIMIT,BIGBASE,<span class=\"kw4\">HUGE</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!Announce.</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">'Calculates primorial \"primes\"'</span>,<span class=\"sy0\">/</span>,<br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\"A primorial prime is a value N such that\"</span>,<span class=\"sy0\">/</span>,<br/>     <span class=\"nu0\">2</span> <span class=\"st0\">\"    Primorial(N) - 1 is prime, OR\"</span>,<span class=\"sy0\">/</span>,<br/>     <span class=\"nu0\">3</span> <span class=\"st0\">\"    Primorial(N) + 1 is prime, or both.\"</span>,<span class=\"sy0\">/</span>,<br/>     <span class=\"nu0\">4</span> <span class=\"st0\">\"and Primorial(N) is the product of the first N prime numbers.\"</span>,<span class=\"sy0\">/</span><br/>     <span class=\"nu0\">5</span> <span class=\"st0\">\"Working with up to \"</span>,I0,<span class=\"st0\">\" digits in base \"</span>,I0,<span class=\"st0\">\".\"</span><span class=\"sy0\">/</span><br/>     <span class=\"nu0\">6</span> <span class=\"st0\">\"The integer limit is \"</span>,I0,<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">c      CALL PREPARE PRIMES\t!First, catch your rabbit. Via ERATOSTHENES.</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">GRASPPRIMEBAG</span><span class=\"br0\">(</span><span class=\"nu0\">66</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Gan't grab my file!\"</span>\t<span class=\"co1\">!Attempt in hope.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">2</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Primorial#\"</span>,3X,<span class=\"st0\">\"Approx.\"</span>,8X,<span class=\"st0\">\" -1 Factor +1 Factor Hit\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">Commence prime mashing.</span><br/>  <span class=\"nu0\">100</span> NHIT <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!My list is empty.</span><br/>      B.<span class=\"me1\">LAST</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Begin at the beginning.</span><br/>      B.<span class=\"me1\">DIGIT</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!With one. The same, whatever BIGBASE.</span><br/>      <span class=\"kw1\">CALL</span> <span class=\"kw4\">CPU_TIME</span><span class=\"br0\">(</span>T0<span class=\"br0\">)</span>\t<span class=\"co1\">!Start the timing.</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">30</span>\t<span class=\"co1\">!69\t!Step along the primorials.</span><br/>        <span class=\"kw1\">CALL</span> BIGMULTN<span class=\"br0\">(</span>B,PRIME<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Multiply by the next prime.</span><br/><span class=\"co1\">c        WRITE (MSG,101) I,PRIME(I),I,B.DIGIT(B.LAST:1:-1)\t!Digits in Arabic/Hindu order.</span><br/>  <span class=\"nu0\">101</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Prime(\"</span>,I0,<span class=\"st0\">\") = \"</span>,I0,<span class=\"st0\">\", Primorial(\"</span>,I0,<span class=\"st0\">\") = \"</span>,\t<span class=\"co1\">!For a possibly multi-BIGBASE sequence.</span><br/>     <span class=\"nu0\">1</span>   I0,9I&lt;BIGORDER&gt;.&lt;BIGORDER&gt;,<span class=\"sy0\">/</span>,<span class=\"br0\">(</span>10I&lt;BIGORDER&gt;.&lt;BIGORDER&gt;<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The first without leading zero digits.</span><br/>        FU <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t\t<span class=\"co1\">!No factor for up one.</span><br/>        FD <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t\t<span class=\"co1\">!No factor for down one.</span><br/>        <span class=\"kw1\">CALL</span> BIGADDN<span class=\"br0\">(</span>B,<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Go up one.</span><br/>        FU <span class=\"sy0\">=</span> BIGFACTOR<span class=\"br0\">(</span>B,MAXF<span class=\"br0\">)</span>\t<span class=\"co1\">!Find a factor, maybe.</span><br/>        <span class=\"kw1\">CALL</span> BIGADDN<span class=\"br0\">(</span>B,<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Now test down one.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FU.<span class=\"me1\">NE</span>.1<span class=\"br0\">)</span> FD <span class=\"sy0\">=</span> BIGFACTOR<span class=\"br0\">(</span>B,MAXF<span class=\"br0\">)</span>\t<span class=\"co1\">!But only if FU didn't report \"prime\".</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FU.<span class=\"me1\">EQ</span>.1 <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> FD.<span class=\"me1\">EQ</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Since if either candidate is a prime,</span><br/>          WOT <span class=\"sy0\">=</span> <span class=\"st0\">\"Yes!\"</span>\t\t\t\t<span class=\"co1\">!Then a hit.</span><br/>          NHIT <span class=\"sy0\">=</span> NHIT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!So count up a success.</span><br/>          HIT<span class=\"br0\">(</span>NHIT<span class=\"br0\">)</span> <span class=\"sy0\">=</span> I\t\t\t\t<span class=\"co1\">!And append to my list.</span><br/>        <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FU.<span class=\"me1\">GT</span>.1 <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> FD.<span class=\"me1\">GT</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!But if both have factors,</span><br/>          WOT <span class=\"sy0\">=</span> <span class=\"st0\">\"No.\"</span>\t\t\t\t<span class=\"co1\">!Then definitely not a hit.</span><br/>        <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!Otherwise,</span><br/>          WOT <span class=\"sy0\">=</span> <span class=\"st0\">\"?\"</span>\t\t\t\t<span class=\"co1\">!I can't decide.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!So much for that candidate.</span><br/>        <span class=\"kw1\">CALL</span> BIGADDN<span class=\"br0\">(</span>B,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Recover the original primorial value.</span><br/>        WRITE <span class=\"br0\">(</span>ALINE,<span class=\"nu0\">102</span><span class=\"br0\">)</span> I,BIGVALUE<span class=\"br0\">(</span>B<span class=\"br0\">)</span>,FD,FU,WOT\t<span class=\"co1\">!Prepare a report.</span><br/>  <span class=\"nu0\">102</span>   FORMAT <span class=\"br0\">(</span>I10,1PE18.10,I10,I10,1X,A<span class=\"br0\">)</span>\t<span class=\"co1\">!A table.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FD.<span class=\"me1\">EQ</span>.<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"sy0\">:</span><span class=\"nu0\">38</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>\t\t<span class=\"co1\">!Wasn't looked for, so no remark.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FD.<span class=\"me1\">EQ</span>. <span class=\"nu0\">0</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">38</span><span class=\"sy0\">:</span><span class=\"nu0\">38</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"?\"</span>\t<span class=\"co1\">!Recode a zero.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FU.<span class=\"me1\">EQ</span>. <span class=\"nu0\">0</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">48</span><span class=\"sy0\">:</span><span class=\"nu0\">48</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"?\"</span>\t<span class=\"co1\">!Since it represents \"Don't know\".</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"st0\">\"(A)\"</span><span class=\"br0\">)</span> ALINE\t\t<span class=\"co1\">!Show the report.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next prime.</span><br/>      <span class=\"kw1\">CALL</span> <span class=\"kw4\">CPU_TIME</span><span class=\"br0\">(</span>T1<span class=\"br0\">)</span>\t<span class=\"co1\">!Completed the run.</span><br/>\u00a0<br/><span class=\"co1\">Cast forth some pearls.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">201</span><span class=\"br0\">)</span> HIT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>NHIT<span class=\"br0\">)</span>\t<span class=\"co1\">!The list.</span><br/>  <span class=\"nu0\">201</span> FORMAT <span class=\"br0\">(</span><span class=\"sy0\">/</span>,<span class=\"st0\">\"Hit list: \"</span>,I0,<span class=\"nu0\">666</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>,I0<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Don't actually expect so many.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"CPU time:\"</span>,T1 <span class=\"sy0\">-</span> T0\t<span class=\"co1\">!The cost.</span><br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!So much for that.</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 54, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 23-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define max 9999    ' max number for the sieve</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> mpz_ptr p, p1<br/>p  = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>p, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p1 = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i, n, x<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Byte</span> prime<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Sieve of Eratosthenes</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">4</span> <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>  <span class=\"kw1\">For</span> n = i * i <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> i * <span class=\"nu0\">2</span><br/>    prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>n = <span class=\"nu0\">0</span>\u00a0: x = <span class=\"nu0\">0</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> max<br/>  <span class=\"kw1\">If</span> prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>  x = x + <span class=\"nu0\">1</span><br/>  mpz_mul_ui<span class=\"br0\">(</span>p, p, i<span class=\"br0\">)</span><br/>  mpz_sub_ui<span class=\"br0\">(</span>p1, p, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> mpz_probab_prime_p<span class=\"br0\">(</span>p1, <span class=\"nu0\">25</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; x;\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\",\"</span>;<br/>    n += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> n &gt;= <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  mpz_add_ui<span class=\"br0\">(</span>p1, p, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> mpz_probab_prime_p<span class=\"br0\">(</span>p1, <span class=\"nu0\">25</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; x;\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\",\"</span>;<br/>    n += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> n &gt;= <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>mpz_clear<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>mpz_clear<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 59, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    one <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    pm <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// primorial</span><br/>    <span class=\"kw1\">var</span> px<span class=\"sy1\">,</span> nx <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> pb <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"co1\">// a scratch value</span><br/>    primes<span class=\"sy1\">(</span><span class=\"nu0\">4000</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        pm<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>pm<span class=\"sy1\">,</span> pb<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span>p<span class=\"sy1\">))</span><br/>        px<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">if</span> pb<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>pm<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span><span class=\"sy3\">.</span>ProbablyPrime<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span><br/>            pb<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>pm<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span><span class=\"sy3\">.</span>ProbablyPrime<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>px<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>            nx<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> nx <span class=\"sy3\">==</span> <span class=\"nu0\">20</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Code taken from task Sieve of Eratosthenes, and put into this function</span><br/><span class=\"co1\">// that calls callback function f for each prime &lt; limit, but terminating</span><br/><span class=\"co1\">// if the callback returns false.</span><br/><span class=\"kw4\">func</span> primes<span class=\"sy1\">(</span>limit <span class=\"kw4\">int</span><span class=\"sy1\">,</span> f <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> limit<span class=\"sy1\">)</span><br/>    c<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    c<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    lm <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>limit<span class=\"sy1\">)</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>        p2 <span class=\"sy2\">:=</span> p <span class=\"sy3\">*</span> p<br/>        <span class=\"kw1\">if</span> p2 &gt;<span class=\"sy2\">=</span> lm <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> p2<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; lm<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> p <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            p<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> p<span class=\"sy2\">++</span><span class=\"sy1\">;</span> p &lt; lm<span class=\"sy1\">;</span> p<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> &amp;&amp; <span class=\"sy3\">!</span>f<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a><span class=\"sy0\">,</span> elemIndices<span class=\"sy0\">,</span> nub<span class=\"br0\">)</span><br/>\u00a0<br/>primes <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isPrime <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>isPrime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPrime <span class=\"sy0\">=</span> isPrime<span class=\"sy0\">_</span> primes<br/>  <span class=\"kw1\">where</span><br/>    isPrime<span class=\"sy0\">_</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>    isPrime<span class=\"sy0\">_</span> <span class=\"br0\">(</span>p:ps<span class=\"br0\">)</span> n<br/>      <span class=\"sy0\">|</span> p <span class=\"sy0\">*</span> p <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">=</span> True<br/>      <span class=\"sy0\">|</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> False<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> isPrime<span class=\"sy0\">_</span> ps n<br/>\u00a0<br/>primorials <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primorials <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> primes<br/>\u00a0<br/>primorialsPlusMinusOne <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primorialsPlusMinusOne <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> primorials<br/>\u00a0<br/>sequenceOfPrimorialPrimes <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>sequenceOfPrimorialPrimes <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> nub<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> elemIndices True bools<br/>  <span class=\"kw1\">where</span><br/>    bools <span class=\"sy0\">=</span> isPrime <span class=\"sy0\">&lt;$&gt;</span> primorialsPlusMinusOne<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> sequenceOfPrimorialPrimes</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">primoprim=: [: I. [: +./ <span class=\"nu0\">1</span> p: <span class=\"sy0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">_1</span><span class=\"sy0\">)</span> +/ */\\@:p:@i.</pre>"}, {"lang": "Java", "loc": 49, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PrimorialPrimes <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sieveLimit <span class=\"sy0\">=</span> <span class=\"nu0\">1550</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> notPrime <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>sieveLimit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span>_000 <span class=\"sy0\">&amp;&amp;</span> count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b <span class=\"sy0\">=</span> primorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"sy0\">||</span> b.<span class=\"me1\">subtract</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                count<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> primorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sieveLimit <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>notPrime<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">=</span> result.<span class=\"me1\">multiply</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> composite <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>limit<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        composite<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> composite<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>composite<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    composite<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> composite<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">20</span>  <span class=\"co1\">// expect a run time of about 2 minutes on a typical laptop</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first $LIMIT primorial indices in the sequence are:\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"1 \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> primorial <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> prod <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>2L<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            prod <span class=\"sy0\">*=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>p.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            primorial++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>prod + BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>prod - BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"$primorial \"</span><span class=\"br0\">)</span><br/>                count++<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> LIMIT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    break<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>         <br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span> P<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,,</span> P<span class=\"sy0\">*=</span>p<span class=\"sy0\">;</span> n<span class=\"sy0\">++;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">ispseudoprime</span><span class=\"br0\">(</span>P<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">ispseudoprime</span><span class=\"br0\">(</span>P<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">print1</span><span class=\"br0\">(</span>n<span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"st0\">\":all\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>1e6<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> pn_primorial<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@primes</span>     <span class=\"sy0\">=</span> <span class=\"sy0\">|</span><span class=\"kw3\">grep</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">..*;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@primorials</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>\\<span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@primes</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@pp_indexes</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">|</span><span class=\"re0\">@primorials</span><span class=\"sy0\">.</span><span class=\"kw3\">pairs</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"sy0\">+</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">~</span> <span class=\"re0\">@pp_indexes</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^..</span> <span class=\"nu0\">20</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># Skipping bogus first element.</span></pre>"}, {"lang": "Python", "loc": 15, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> pyprimes<br/>\u00a0<br/><span class=\"kw1\">def</span> primorial_prime<span class=\"br0\">(</span>_pmax<span class=\"sy0\">=</span><span class=\"nu0\">500</span><span class=\"br0\">)</span>:<br/>    isprime <span class=\"sy0\">=</span> pyprimes.<span class=\"me1\">isprime</span><br/>    n<span class=\"sy0\">,</span> primo <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> prime <span class=\"kw1\">in</span> pyprimes.<span class=\"me1\">nprimes</span><span class=\"br0\">(</span>_pmax<span class=\"br0\">)</span>:<br/>        n<span class=\"sy0\">,</span> primo <span class=\"sy0\">=</span> n+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> primo * prime<br/>        <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>primo-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> isprime<span class=\"br0\">(</span>primo+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">yield</span> n<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"co1\"># Turn off warning on use of probabilistic formula for prime test</span><br/>    pyprimes.<span class=\"me1\">warn_probably</span> <span class=\"sy0\">=</span> <span class=\"kw2\">False</span>  <br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> primorial_prime<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Primorial prime\u00a0%2i at primorial index:\u00a0%3i'</span>\u00a0% <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(require math/number-theory<br/>         racket/generator)<br/>\u00a0<br/>(define-syntax-rule (define/cache (name arg) body ...)<br/>  (begin<br/>    (define cache (make-hash))<br/>    (define (name arg)<br/>      (hash-ref! cache arg (lambda () body ...)))))<br/>\u00a0<br/>(define/cache (primorial n)<br/>  (if (zero? n)<br/>     1<br/>     (* (nth-prime (sub1 n))<br/>        (primorial (sub1 n)))))<br/>\u00a0<br/>(for ([i (in-range 20)]<br/>      [n (in-generator (for ([i (in-naturals 1)])<br/>                         (define pr (primorial i))<br/>                         (when (or (prime? (add1 pr)) (prime? (sub1 pr)))<br/>                           (yield i))))])<br/>  (displayln n))</pre>"}, {"lang": "Ring", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Sequence of primorial primes<br/>\u00a0<br/>max = 9999<br/>primes = []<br/>for n = 1 to max<br/>     if isprime(n) = 1<br/>        add(primes, n)<br/>     ok<br/>next<br/>for n = 1 to len(primes)<br/>     sum = 1<br/>     for m = 1 to n<br/>          sum = sum * primes[m]<br/>     next<br/>     if (isprime(sum+1) or isprime(sum-1)) = 1<br/>        see \"\" + n + \" \"<br/>     ok<br/>next<br/>\u00a0<br/>func isprime(num)<br/>       if (num &lt;= 1) return 0 ok<br/>       if (num\u00a0% 2 = 0) and num\u00a0!= 2 return 0 ok<br/>       for i = 3 to floor(num / 2) -1 step 2<br/>            if (num\u00a0% i = 0) return 0 ok<br/>       next<br/>       return 1<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\">func primorial_primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var k = <span class=\"nu0\">1</span><br/>    var <span class=\"kw3\">p</span> = <span class=\"nu0\">2</span><br/>    var <span class=\"kw3\">P</span> = <span class=\"nu0\">2</span><br/>\u00a0<br/>    var seq = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>var i = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> n; <span class=\"sy0\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span>P<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> is_prime<span class=\"br0\">(</span><span class=\"kw3\">P</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            seq <span class=\"sy0\">&lt;&lt;</span> k<br/>            <span class=\"sy0\">++</span>i<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">p</span>.<span class=\"me1\">next_prime</span>!<br/>        <span class=\"kw3\">P</span> <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> seq<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say primorial_primes<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">var [const] BN=Import(\"zklBigNum\");  // libGMP<br/>p,s,i,n:=BN(1),BN(1), 0,0;<br/>do{ n+=1;<br/>    s.nextPrime();\t// in place, probabilistic<br/>    p.mul(s);\t\t// in place<br/>    if((p+1).probablyPrime() or (p-1).probablyPrime()){<br/>       println(\"%3d \u00a0%5d digits\".fmt(n,p.len()));<br/>       i+=1;<br/>    }<br/>}while(i&lt;20);</pre>"}]}