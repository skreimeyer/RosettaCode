{"task": "Fractran", "blocks": [{"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Fractan <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Fraction <span class=\"kw1\">is</span> <span class=\"kw3\">record</span> Nom: Natural; Denom: Positive; <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw3\">type</span> Frac_Arr <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Fraction;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span> <span class=\"br0\">(</span>N: Natural; D: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Fraction <span class=\"kw1\">is</span><br/>      Frac: Fraction\u00a0:= <span class=\"br0\">(</span>Nom =&gt; N, Denom =&gt; D<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Frac;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"/\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> F<span class=\"br0\">(</span>List: Frac_Arr; Start: Positive; Max_Steps: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      N: Positive\u00a0:= Start;<br/>      J: Positive;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\" 0:\"</span> &amp; Integer'Image<span class=\"br0\">(</span>N<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Max_Steps</span> <span class=\"kw1\">loop</span><br/>\t J\u00a0:= List'First;<br/>\t <span class=\"kw1\">loop</span><br/>\t    <span class=\"kw1\">if</span> N <span class=\"kw2\">mod</span> List<span class=\"br0\">(</span>J<span class=\"br0\">)</span>.<span class=\"me1\">Denom</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t       N\u00a0:= <span class=\"br0\">(</span>N/List<span class=\"br0\">(</span>J<span class=\"br0\">)</span>.<span class=\"me1\">Denom</span><span class=\"br0\">)</span> * List<span class=\"br0\">(</span>J<span class=\"br0\">)</span>.<span class=\"me1\">Nom</span>;<br/>\t       <span class=\"kw3\">exit</span>; <span class=\"co1\">-- found fraction</span><br/>\t    <span class=\"kw1\">elsif</span> J &gt;= List'Last <span class=\"kw1\">then</span><br/>\t       <span class=\"kw1\">return</span>; <span class=\"co1\">-- did try out all fractions</span><br/>\t    <span class=\"kw1\">else</span><br/>\t       J\u00a0:= J + <span class=\"nu0\">1</span>; <span class=\"co1\">-- try the next fraction</span><br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\":\"</span> &amp; Integer'Image<span class=\"br0\">(</span>N<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> F;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- F((2/3, 7/2, 1/5, 1/7, 1/9, 1/4, 1/8), 2, 100); </span><br/>   <span class=\"co1\">-- output would be \"0: 2    1: 7    2: 1\" and then terminate</span><br/>\u00a0<br/>   F<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">17</span>/<span class=\"nu0\">91</span>, <span class=\"nu0\">78</span>/<span class=\"nu0\">85</span>, <span class=\"nu0\">19</span>/<span class=\"nu0\">51</span>, <span class=\"nu0\">23</span>/<span class=\"nu0\">38</span>, <span class=\"nu0\">29</span>/<span class=\"nu0\">33</span>, <span class=\"nu0\">77</span>/<span class=\"nu0\">29</span>, <span class=\"nu0\">95</span>/<span class=\"nu0\">23</span>, <br/>      <span class=\"nu0\">77</span>/<span class=\"nu0\">19</span>,  <span class=\"nu0\">1</span>/<span class=\"nu0\">17</span>, <span class=\"nu0\">11</span>/<span class=\"nu0\">13</span>, <span class=\"nu0\">13</span>/<span class=\"nu0\">11</span>, <span class=\"nu0\">15</span>/<span class=\"nu0\">14</span>,  <span class=\"nu0\">15</span>/<span class=\"nu0\">2</span>, <span class=\"nu0\">55</span>/<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <br/>     <span class=\"nu0\">2</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- output is \"0: 2    1: 15    2: 825    3: 725   ...   14: 132    15: 116\"</span><br/><span class=\"kw1\">end</span> Fractan;</pre>"}, {"lang": "ALGOL 68", "loc": 74, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># as the numbers required for finding the first 20 primes are quite large, #</span><br/><span class=\"coMULTI\"># we use Algol 68G's LONG LONG INT with a precision of 100 digits          #</span><br/><span class=\"co2\">PR precision 100 PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># mode to hold fractions #</span><br/><span class=\"kw4\">MODE</span> FRACTION <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> numerator<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> denominator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># define / between two INTs to yield a FRACTION #</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">/</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span>FRACTION<span class=\"sy1\">:</span> <span class=\"br0\">(</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># mode to define a FRACTRAN progam #</span><br/><span class=\"kw4\">MODE</span> FRACTRAN <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span>FRACTION data<br/>                      <span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span>   n<br/>                      <span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span>            halted<br/>                      <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># prepares a FRACTRAN program for use - sets the initial value of n and halted to FALSE #</span><br/><span class=\"kw4\">PRIO</span> STARTAT <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   STARTAT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> FRACTRAN f<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> start <span class=\"br0\">)</span><span class=\"kw4\">REF</span> FRACTRAN<span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    halted <span class=\"kw6\">OF</span> f <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>         n <span class=\"kw6\">OF</span> f <span class=\"sy1\">:=</span> start<span class=\"sy1\">;</span><br/>    f<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># sets n OF f to the next number in the sequence or sets halted OF f to TRUE if the sequence has ended #</span><br/><span class=\"kw4\">OP</span> NEXT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> FRACTRAN f <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> halted <span class=\"kw6\">OF</span> f<br/>    <span class=\"kw2\">THEN</span> n <span class=\"kw6\">OF</span> f <span class=\"sy1\">:=</span> 0<br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw3\">BOOL</span>          found  <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> data <span class=\"kw6\">OF</span> f <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> data <span class=\"kw6\">OF</span> f <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> found <span class=\"kw2\">DO</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> value       <span class=\"sy1\">=</span> n <span class=\"kw6\">OF</span> f <span class=\"sy1\">*</span> numerator <span class=\"kw6\">OF</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> data <span class=\"kw6\">OF</span> f <span class=\"br0\">)</span><span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span>           denominator <span class=\"sy1\">=</span> denominator <span class=\"kw6\">OF</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> data <span class=\"kw6\">OF</span> f <span class=\"br0\">)</span><span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> found <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> value <span class=\"kw12\">MOD</span> denominator <span class=\"sy1\">=</span> 0 <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> result <span class=\"sy1\">:=</span> value <span class=\"kw12\">OVER</span> denominator <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> found <span class=\"kw2\">THEN</span> halted <span class=\"kw6\">OF</span> f <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        n <span class=\"kw6\">OF</span> f <span class=\"sy1\">:=</span> result<br/>    <span class=\"kw2\">FI</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># generate and print the sequence of numbers from a FRACTRAN pogram #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> fractran sequence <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> FRACTRAN f<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> start<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> limit <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw3\">VOID</span><span class=\"br0\">(</span> f STARTAT start <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"0: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> start<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> limit<br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw3\">VOID</span><span class=\"br0\">(</span> NEXT f <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw8\">NOT</span> halted <span class=\"kw6\">OF</span> f<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n <span class=\"kw6\">OF</span> f<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># print the first 16 elements from the primes FRACTRAN program #</span><br/>FRACTRAN pf <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> 17<span class=\"sy1\">/</span>91<span class=\"sy1\">,</span> 78<span class=\"sy1\">/</span>85<span class=\"sy1\">,</span> 19<span class=\"sy1\">/</span>51<span class=\"sy1\">,</span> 23<span class=\"sy1\">/</span>38<span class=\"sy1\">,</span> 29<span class=\"sy1\">/</span>33<span class=\"sy1\">,</span> 77<span class=\"sy1\">/</span>29<span class=\"sy1\">,</span> 95<span class=\"sy1\">/</span>23<span class=\"sy1\">,</span> 77<span class=\"sy1\">/</span>19<span class=\"sy1\">,</span> 1<span class=\"sy1\">/</span>17<span class=\"sy1\">,</span> 11<span class=\"sy1\">/</span>13<span class=\"sy1\">,</span> 13<span class=\"sy1\">/</span>11<span class=\"sy1\">,</span> 15<span class=\"sy1\">/</span>14<span class=\"sy1\">,</span>  15<span class=\"sy1\">/</span>2<span class=\"sy1\">,</span> 55<span class=\"sy1\">/</span>1 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> fractran sequence<span class=\"br0\">(</span> pf<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 15 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># find some primes using the pf FRACTRAN progam - n is prime for the members in the sequence that are 2^n #</span><br/><span class=\"kw3\">INT</span> primes found <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">VOID</span><span class=\"br0\">(</span> pf STARTAT 2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> pos <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"seq position  prime sequence value\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">WHILE</span> primes found <span class=\"sy1\">&lt;</span> 20 <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> halted <span class=\"kw6\">OF</span> pf <span class=\"kw2\">DO</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> value      <span class=\"sy1\">:=</span> NEXT pf<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>      power of 2 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    pos <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> value <span class=\"kw12\">MOD</span> 2 <span class=\"sy1\">=</span> 0 <span class=\"kw16\">AND</span> value <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">DO</span> power of 2 <span class=\"kw17\">PLUSAB</span> 1<span class=\"sy1\">;</span> value <span class=\"kw17\">OVERAB</span> 2 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> value <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># found a prime #</span><br/>        primes found <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> pos<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>12 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> power of 2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\" (\"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n <span class=\"kw6\">OF</span> pf<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 24, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> steplimit <span class=\"sy0\">:=</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> numerator <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> denominator <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Space\"><span class=\"kw2\">A_Space</span></a><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"^(\\d+)/(\\d+)$\"</span><span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Invalid input string (\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\").\"</span><br/>    <span class=\"kw1\">else</span><br/>        numerator<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> m1<span class=\"sy0\">,</span> denominator<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> m2<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#ListView\"><span class=\"kw8\">ListView</span></a><span class=\"sy0\">,</span> R10 W100 <span class=\"sy0\">-</span>Hdr<span class=\"sy0\">,</span> |<br/><a href=\"http://www.autohotkey.com/docs/commands/SysGet.htm\"><span class=\"kw3\">SysGet</span></a><span class=\"sy0\">,</span> VSBW<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_ModifyCol</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">95</span> <span class=\"sy0\">-</span> VSBW<span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_Add</span></a><span class=\"br0\">(</span> <span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"st0\">\": \"</span> n<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% steplimit <span class=\"br0\">{</span><br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% numerator<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>nn <span class=\"sy0\">:=</span> n <span class=\"sy0\">*</span> numerator<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">/</span> denominator<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_Modify</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_Add</span></a><span class=\"br0\">(</span> <span class=\"sy0\">,</span> i <span class=\"st0\">\": \"</span> <span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> nn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Vis\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "bash", "loc": 20, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#! /bin/bash</span><br/><span class=\"re2\">program</span>=<span class=\"st0\">\"1/1 455/33 11/13 1/11 3/7 11/2 1/3\"</span><br/><span class=\"kw3\">echo</span> <span class=\"re1\">$program</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st0\">\" \"</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">cut</span> <span class=\"re5\">-d</span><span class=\"st0\">\"/\"</span> <span class=\"re5\">-f1</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"data\"</span><br/><span class=\"kw2\">read</span> <span class=\"re5\">-a</span> ns <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"data\"</span><br/><span class=\"kw3\">echo</span> <span class=\"re1\">$program</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st0\">\" \"</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">cut</span> <span class=\"re5\">-d</span><span class=\"st0\">\"/\"</span> <span class=\"re5\">-f2</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"data\"</span><br/><span class=\"kw2\">read</span> <span class=\"re5\">-a</span> ds <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"data\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">t</span>=<span class=\"nu0\">0</span><br/><span class=\"re2\">n</span>=<span class=\"nu0\">72</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"steps of computation\"</span> <span class=\"sy0\">&gt;</span> steps.csv<br/><span class=\"kw1\">while</span> <span class=\"br0\">[</span> <span class=\"re1\">$t</span> <span class=\"re5\">-le</span> <span class=\"nu0\">6</span> <span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">[</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$n</span><span class=\"sy0\">*</span><span class=\"co1\">${ns[$t]}</span><span class=\"sy0\">%</span><span class=\"co1\">${ds[$t]}</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw3\">let</span> <span class=\"st0\">\"n=<span class=\"es4\">$(($n*${ns[$t]}/${ds[$t]})</span>)\"</span><br/>\t\t<span class=\"kw3\">let</span> <span class=\"st0\">\"t=0\"</span><br/>\t\tfactor <span class=\"re1\">$n</span> <span class=\"sy0\">&gt;&gt;</span> steps.csv<br/>\t<span class=\"kw1\">fi</span><br/>\t<span class=\"kw3\">let</span> <span class=\"st0\">\"t=<span class=\"es2\">$t</span>+1\"</span><br/><span class=\"kw1\">done</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 56, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>\t::Set the inputs</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"code=17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"n=2\"<br/><span class=\"co2\"><br/>\t::Basic validation of code</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>. <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">code</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%</span><span class=\"sy0\">%</span>.<span class=\"sy0\">|</span>findstr /r /c:\"<span class=\"co3\">^[</span>0-9][0-9]*/[1-9][0-9]*$\"<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><span class=\"sy0\">||</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> error_code<br/><span class=\"sy0\">)</span><br/><span class=\"co2\">\t::Validate the input</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"tst=1*<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span>\" 2<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tst</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> error_input<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tst</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span>\"==\"0\" <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> error_input<span class=\"sy0\">))</span><br/><span class=\"co2\"><br/>\t::Set the limit outputs</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> limit=20<br/><span class=\"co2\"><br/>\t::Execute the code</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Input:<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.\t<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Output:<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">!</span><span class=\"re2\">limit</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> shouldwehalt=1<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">code</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1,2 delims=/\" <span class=\"sy0\">%%</span><span class=\"re3\">B</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">%%</span><span class=\"re3\">A</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"tst=<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%%</span><span class=\"re3\">C</span>\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tst</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">shouldwehalt</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 1 <span class=\"sy0\">(</span><br/>\t\t\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> shouldwehalt=0<br/>\t\t\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"n=n*<span class=\"sy0\">%%</span><span class=\"re3\">B</span>/<span class=\"sy0\">%%</span><span class=\"re3\">C</span>\"<br/>\t\t\t\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.\t<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">!</span><br/>\t\t\t\t<span class=\"sy0\">)</span><br/>\t\t\t<span class=\"sy0\">)</span><br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">shouldwehalt</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 1 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> halt<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>:<span class=\"re0\">halt</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>:<span class=\"re0\">error_code</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Syntax error <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> code.<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/>\u00a0<br/>:<span class=\"re0\">error_input</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Invalid input.<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">p0\"\u00a0:snoitcarF\"&gt;:#,_&gt;&amp;00g5p~$&amp;00g:v<br/>v\"Starting value: \"_^#-*84~p6p00+1&lt;<br/>&gt;:#,_&amp;0\"\u00a0:snoitaretI\"&gt;:#,_#@&gt;&gt;$&amp;\\:v<br/>:$_\\:10g5g*:10g6g%v1:\\1$\\$&lt;|!:-1\\.&lt;<br/>g0^&lt;!:-1\\p01+1g01$_10g6g/\\^&gt;\\010p00</pre>"}, {"lang": "Bracmat", "loc": 36, "block": "<pre class=\"text highlighted_source\">(fractran=<br/>  np n fs A Z fi P p N L M<br/>.  \u00a0!arg:(?N,?n,?fs)                 {Number of iterations, start n, fractions}<br/>  &amp;\u00a0:?P:?L                           {Initialise accumulators.}<br/>  &amp;   whl<br/>    ' ( -1+!N:&gt;0:?N                  {Stop when counted down to zero.}<br/>      &amp;\u00a0!n\u00a0!L:?L                     {Prepend all numbers to result list.}<br/>      &amp; (2\\L!n:#?p&amp;!P\u00a0!p:?P|)        {If log2(n) is rational, append it to list of primes.}<br/>      &amp;\u00a0!fs:? (/?fi&amp;!n*!fi:~/:?n)\u00a0?  {This line does the following (See task description):<br/>                                      \"for the first fraction, fi, in the list for which<br/>                                       nfi is an integer, replace n by nfi\u00a0;\"}<br/>      )<br/>  &amp;\u00a0:?M<br/>  &amp; whl'(!L:%?n\u00a0?L&amp;!n\u00a0!M:?M)         {Invert list of numbers. (append to long list is<br/>                                      very expensive. Better to prepend and finally invert.}<br/>  &amp; (!M,!P)                          {Return the two lists}<br/>);<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>( clk$:?t0<br/>&amp; fractran$(430000, 2, 17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1)<br/> \u00a0: (?numbers,?primes)<br/>&amp; lst$(numbers,\"numbers.lst\",NEW)<br/>&amp; put$(\"<br/>FRACTRAN found these primes:\"<br/> \u00a0!primes<br/>  \"\\nThe list of numbers is saved in numbers.txt<br/>The biggest number in the list is\"<br/>  (   0:?max<br/>    &amp;\u00a0!numbers:? (&gt;%@!max:?max&amp;~)\u00a0?<br/>  |\u00a0!max<br/>  )<br/>str$(\"\\ntime: \" flt$(clk$+-1*!t0,4) \" sec\\n\")<br/>, \"FRACTRAN.OUT\",NEW)<br/>);</pre>"}, {"lang": "C", "loc": 65, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> frac_s <span class=\"sy0\">*</span>frac<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> frac_s <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> d<span class=\"sy0\">;</span><br/>\tfrac next<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>frac parse<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> offset <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">struct</span> frac_s h <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>h<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sscanf.html\"><span class=\"kw3\">sscanf</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"%d/%d%n\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>h.<span class=\"me1\">n</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>h.<span class=\"me1\">d</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>offset<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts <span class=\"sy0\">+=</span> offset<span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">=</span> p<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> h<span class=\"sy0\">;</span><br/>\t\tp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> h.<span class=\"me1\">next</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tfrac n<span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> parse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_t val<span class=\"sy0\">;</span><br/>\tmpz_init_set_ui<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>loop<span class=\"sy0\">:</span>\tn <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>mpz_popcount<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tgmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>[2^%d =\u00a0%Zd]\"</span><span class=\"sy0\">,</span> mpz_scan1<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tgmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%Zd\"</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// assuming the fractions are not reducible</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>mpz_divisible_ui_p<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> n<span class=\"sy0\">-&gt;</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tmpz_divexact_ui<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> val<span class=\"sy0\">,</span> n<span class=\"sy0\">-&gt;</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tmpz_mul_ui<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> val<span class=\"sy0\">,</span> n<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">goto</span> loop<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tgmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>halt:\u00a0%Zd has no divisors<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmpz_clear<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">=</span> p<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\trun<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 \"</span><br/>\t\t<span class=\"st0\">\"77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 67, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> fractran<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> run<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> p, <span class=\"kw4\">int</span> s, <span class=\"kw4\">int</span> l  <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        start <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span> limit <span class=\"sy1\">=</span> l<span class=\"sy4\">;</span><br/>        istringstream iss<span class=\"br0\">(</span> p <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> tmp<span class=\"sy4\">;</span><br/>        copy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> iss <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> tmp <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        string item<span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span> pair<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span>, <span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span><br/>\tpair<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span>, <span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> a<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> tmp.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> tmp.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    string<span class=\"sy4\">::</span><span class=\"me2\">size_type</span> pos <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span> <span class=\"st0\">'/'</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\ta <span class=\"sy1\">=</span> make_pair<span class=\"br0\">(</span> <span class=\"kw3\">atof</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">substr</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, pos <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"kw3\">atof</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">substr</span><span class=\"br0\">(</span> pos <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tv.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\texec<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>v <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> exec<span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span> pair<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span>, <span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"sy2\">*</span> v <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> cnt <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> cnt <span class=\"sy1\">&lt;</span> limit <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> cnt <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> start <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t    cnt<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t    vector<span class=\"sy1\">&lt;</span> pair<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span>, <span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> v<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>begin<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw4\">bool</span> found <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw4\">float</span> r<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>end<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tr  <span class=\"sy1\">=</span> start <span class=\"sy2\">*</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span>.<span class=\"me1\">first</span> <span class=\"sy2\">/</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span>.<span class=\"me1\">second</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> r <span class=\"sy1\">==</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span> r <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    found <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"sy2\">++</span>it<span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> found <span class=\"br0\">)</span> start <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> <span class=\"br0\">)</span>r<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">else</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> start, limit<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    fractran f<span class=\"sy4\">;</span> f.<span class=\"me1\">run</span><span class=\"br0\">(</span> <span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">15</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fractran <span class=\"br0\">(</span>n frac-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">prog1</span><br/>      n<br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> n<br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>f <span class=\"br0\">(</span>find-<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>frac<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>integerp <span class=\"br0\">(</span>* n frac<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          frac-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">when</span> f <span class=\"br0\">(</span><span class=\"kw1\">setf</span> n <span class=\"br0\">(</span>* f n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; test</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *primes-ft* '<span class=\"br0\">(</span><span class=\"nu0\">17</span>/<span class=\"nu0\">91</span> <span class=\"nu0\">78</span>/<span class=\"nu0\">85</span> <span class=\"nu0\">19</span>/<span class=\"nu0\">51</span> <span class=\"nu0\">23</span>/<span class=\"nu0\">38</span> <span class=\"nu0\">29</span>/<span class=\"nu0\">33</span> <span class=\"nu0\">77</span>/<span class=\"nu0\">29</span> <span class=\"nu0\">95</span>/<span class=\"nu0\">23</span><br/>                      <span class=\"nu0\">77</span>/<span class=\"nu0\">19</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">17</span> <span class=\"nu0\">11</span>/<span class=\"nu0\">13</span> <span class=\"nu0\">13</span>/<span class=\"nu0\">11</span> <span class=\"nu0\">15</span>/<span class=\"nu0\">14</span> <span class=\"nu0\">15</span>/<span class=\"nu0\">2</span> <span class=\"nu0\">55</span>/<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop with fractran-instance <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fractran <span class=\"nu0\">2</span> *primes-ft*<span class=\"br0\">)</span><br/>      repeat <span class=\"nu0\">20</span><br/>      for next <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fractran-instance<span class=\"br0\">)</span><br/>      until <span class=\"br0\">(</span><span class=\"kw1\">null</span> next<span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> next<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fractran<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> prog<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> val<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> fracts <span class=\"sy0\">=</span> prog.<span class=\"me1\">split</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"br0\">)</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">limit</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> found <span class=\"sy0\">=</span> fracts.<span class=\"me1\">find</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> val <span class=\"sy0\">%</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        val <span class=\"sy0\">=</span> found.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> val <span class=\"sy0\">/</span> found.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fractran<span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23<br/>              77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 66, "block": "<pre class=\"text highlighted_source\">defmodule Fractran do<br/>  use Bitwise<br/>\u00a0<br/>  defp binary_to_ratio(b) do<br/>    [_, num, den] = Regex.run(~r/(\\d+)\\/(\\d+)/, b)<br/>    {String.to_integer(num), String.to_integer(den)}<br/>  end<br/>\u00a0<br/>  def load(program) do<br/>    String.split(program) |&gt; Enum.map(&amp;binary_to_ratio(&amp;1))<br/>  end<br/>\u00a0<br/>  defp step(_, []), do:\u00a0:halt<br/>  defp step(n, [f|fs]) do<br/>    {p, q} = mulrat(f, {n, 1})<br/>    case q do<br/>        1 -&gt; p<br/>        _ -&gt; step(n, fs)<br/>    end<br/>  end<br/>\u00a0<br/>  def exec(k, n, program) do<br/>    exec(k-1, n, fn (_) -&gt; true end, program, [n]) |&gt; Enum.reverse<br/>  end<br/>\u00a0<br/>  def exec(k, n, pred, program) do<br/>    exec(k-1, n, pred, program, [n]) |&gt; Enum.reverse<br/>  end<br/>\u00a0<br/>  defp exec(0, _, _, _, steps), do: steps<br/>  defp exec(k, n, pred, program, steps) do<br/>    case step(n, program) do<br/>       \u00a0:halt -&gt; steps<br/>        m -&gt; if pred.(m), do: exec(k-1, m, pred, program, [m|steps]),<br/>                        else: exec(k, m, pred, program, steps)<br/>    end<br/>  end<br/>\u00a0<br/>  def is_pow2(n), do: band(n, n-1) == 0<br/>\u00a0<br/>  def lowbit(n), do: lowbit(n, 0)<br/>\u00a0<br/>  defp lowbit(n, k) do<br/>    case band(n, 1) do<br/>        0 -&gt; lowbit(bsr(n, 1), k + 1)<br/>        1 -&gt; k<br/>    end<br/>  end<br/>\u00a0<br/>  # rational multiplication<br/>  defp mulrat({a, b}, {c, d}) do<br/>    {p, q} = {a*c, b*d}<br/>    g = gcd(p, q)<br/>    {div(p, g), div(q, g)}<br/>  end<br/>\u00a0<br/>  defp gcd(a, 0), do: a<br/>  defp gcd(a, b), do: gcd(b, rem(a, b))<br/>end<br/>\u00a0<br/>primegen = Fractran.load(\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\")<br/>IO.puts \"The first few states of the Fractran prime automaton are:\\n#{inspect Fractran.exec(20, 2, primegen)}\\n\"<br/>prime = Fractran.exec(26, 2, &amp;Fractran.is_pow2/1, primegen)<br/>        |&gt; Enum.map(&amp;Fractran.lowbit/1)<br/>        |&gt; tl<br/>IO.puts \"The first few primes are:\\n#{inspect prime}\"</pre>"}, {"lang": "Erlang", "loc": 60, "block": "<pre class=\"erlang highlighted_source\">#<span class=\"sy3\">!</span> <span class=\"sy3\">/</span>usr<span class=\"sy3\">/</span>bin<span class=\"sy3\">/</span>escript<br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">mode</span><span class=\"br0\">(</span>native<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"sy1\">,</span> <span class=\"br0\">[</span>map<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> reverse<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">binary_to_ratio</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>match<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Num</span><span class=\"sy1\">,</span> <span class=\"re5\">Den</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"st0\">\"([0-9]+)/([0-9]+)\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re3\">binary_to_integer</span><span class=\"br0\">(</span><span class=\"kw4\">binary</span>:<span class=\"re3\">part</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Num</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     <span class=\"re3\">binary_to_integer</span><span class=\"br0\">(</span><span class=\"kw4\">binary</span>:<span class=\"re3\">part</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Den</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">load</span><span class=\"br0\">(</span><span class=\"re5\">Program</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> binary_to_ratio<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span><span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"st0\">\"[ ]+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">halt</span><span class=\"sy1\">;</span><br/><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">F</span>|Fs<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">Q</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">mulrat</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <span class=\"re5\">Q</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">P</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Fs</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Pred</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Pred</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Steps</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Steps</span><span class=\"sy1\">;</span><br/><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Pred</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"re5\">Steps</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        <span class=\"kw3\">halt</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Steps</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">M</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">case</span> <span class=\"re5\">P</span><span class=\"re3\">red</span><span class=\"br0\">(</span><span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <br/>                true  <span class=\"sy1\">-&gt;</span> <span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"re5\">Pred</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">M</span>|Steps<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                false <span class=\"sy1\">-&gt;</span> <span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"re5\">Pred</span><span class=\"sy1\">,</span> <span class=\"re5\">Program</span><span class=\"sy1\">,</span> <span class=\"re5\">Steps</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">is_pow2</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span> <span class=\"kw2\">band</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">lowbit</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">lowbit</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">lowbit</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re5\">N</span> <span class=\"kw2\">band</span> <span class=\"nu0\">1</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">lowbit</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">bsr</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">K</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">PrimeGen</span> <span class=\"sy3\">=</span> <span class=\"re3\">load</span><span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The first few states of the Fractran prime automaton are: ~p~n~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">PrimeGen</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The first few primes are: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">tl</span><span class=\"br0\">(</span><span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> lowbit<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re3\">exec</span><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> is_pow2<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">PrimeGen</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% rational multiplication</span><br/>\u00a0<br/><span class=\"re3\">mulrat</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">Q</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re5\">D</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">G</span> <span class=\"sy3\">=</span> <span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">P</span> <span class=\"kw2\">div</span> <span class=\"re5\">G</span><span class=\"sy1\">,</span> <span class=\"re5\">Q</span> <span class=\"kw2\">div</span> <span class=\"re5\">G</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">A</span><span class=\"sy1\">;</span><br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 2, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">C:\\Nicky\\RosettaCode\\FRACTRAN\\FRACTRAN.for(6)\u00a0: Warning: This name has not been given an explicit type.   [M]</span><br/>       <span class=\"kw3\">INTEGER</span> P<span class=\"br0\">(</span>M<span class=\"br0\">)</span>,Q<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"co1\">!The terms of the fractions.</span></pre>"}, {"lang": "FreeBASIC", "loc": 90, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 06-07-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co1\">' uses gmp</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"co1\">' in case the two #define's are missing from 'gmp.bi' define them now</span><br/><span class=\"co2\">#Ifndef mpq_numref</span><br/>    <span class=\"co2\">#Define mpq_numref(Q) (@(Q)-&gt;_mp_num)</span><br/>    <span class=\"co2\">#Define mpq_denref(Q) (@(Q)-&gt;_mp_den)</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> prog<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"st0\">\"17/91\"</span>, <span class=\"st0\">\"78/85\"</span>, <span class=\"st0\">\"19/51\"</span>, <span class=\"st0\">\"23/38\"</span>, <span class=\"st0\">\"29/33\"</span>,_<br/><span class=\"st0\">\"77/29\"</span>, <span class=\"st0\">\"95/23\"</span>, <span class=\"st0\">\"77/19\"</span>, <span class=\"st0\">\"1/17\"</span>, <span class=\"st0\">\"11/13\"</span>, <span class=\"st0\">\"13/11\"</span>, <span class=\"st0\">\"15/14\"</span>, <span class=\"st0\">\"15/2\"</span>, <span class=\"st0\">\"55/1\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i, j, c, max = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> scanbit<br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span> gmp_str\u00a0: gmp_str = Allocate<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Mpq_ptr  in_, out_<br/>in_ = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpq_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpq_init<span class=\"br0\">(</span>in_<span class=\"br0\">)</span><br/>out_ = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpq_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpq_init<span class=\"br0\">(</span>out_<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> mpz_ptr num, den<br/>num = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>den = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>den<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> mpq_ptr instruction<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> max<br/>    instruction<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpq_struct<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    mpq_init<span class=\"br0\">(</span>instruction<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    mpq_set_str<span class=\"br0\">(</span>instruction<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, prog<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>mpq_set_str<span class=\"br0\">(</span>in_ ,<span class=\"st0\">\"2\"</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>i = <span class=\"nu0\">0</span>\u00a0: j = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"2\"</span>;<br/><span class=\"kw1\">Do</span><br/>    mpq_mul<span class=\"br0\">(</span>out_, instruction<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, in_<span class=\"br0\">)</span><br/>    i = i + <span class=\"nu0\">1</span><br/>    den = mpq_denref<span class=\"br0\">(</span>out_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> mpz_cmp_ui<span class=\"br0\">(</span>den, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        Mpq_get_str<span class=\"br0\">(</span>gmp_str, <span class=\"nu0\">10</span>, out_<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\", \"</span>;*gmp_str;<br/>        mpq_swap<span class=\"br0\">(</span>in_, out_<span class=\"br0\">)</span><br/>        i = <span class=\"nu0\">0</span><br/>        j = j + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> j &gt; <span class=\"nu0\">14</span><br/>\u00a0<br/><span class=\"co1\">' this one only display if the integer is 2^p, p being prime</span><br/>mpq_set_str<span class=\"br0\">(</span>in_ ,<span class=\"st0\">\"2\"</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>i = <span class=\"nu0\">0</span>\u00a0: j = <span class=\"nu0\">0</span>\u00a0: c = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"count          iterations    prime  2^prime\"</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    mpq_mul<span class=\"br0\">(</span>out_, instruction<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, in_<span class=\"br0\">)</span><br/>    i = i + <span class=\"nu0\">1</span><br/>    j = j + <span class=\"nu0\">1</span><br/>    den = mpq_denref<span class=\"br0\">(</span>out_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> mpz_cmp_ui<span class=\"br0\">(</span>den, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        num = mpq_numref<span class=\"br0\">(</span>out_<span class=\"br0\">)</span><br/>        scanbit =  mpz_scan1<span class=\"br0\">(</span>num, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">' if scanbit = 0 then number is odd</span><br/>        <span class=\"kw1\">If</span> scanbit &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            <span class=\"co1\">' return from mpz_scan1(num, scanbit+1) is -1 for power of 2</span><br/>            <span class=\"kw1\">If</span> mpz_scan1<span class=\"br0\">(</span>num, scanbit +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> c &lt;= <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span> Mpq_get_str<span class=\"br0\">(</span>gmp_str, <span class=\"nu0\">10</span>, out_<span class=\"br0\">)</span> <span class=\"kw1\">Else</span> *gmp_str = <span class=\"st0\">\"\"</span><br/>                c = c + <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"##### ################### ########  \"</span>; c; j; scanbit;<br/>                <span class=\"kw1\">Print</span> *gmp_str<br/>                <span class=\"kw1\">If</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        mpq_swap<span class=\"br0\">(</span>in_, out_<span class=\"br0\">)</span><br/>        i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"co1\">' Loop Until scanbit &gt; 300</span><br/><span class=\"co1\">' Loop Until InKey &lt;&gt; \"\"</span><br/><span class=\"co1\">' Loop Until scanbit &gt; 300 Or InKey &lt;&gt; \"\"</span><br/><span class=\"co1\">' stopping conditions will slow down the hole loop</span><br/><span class=\"co1\">' loop will check for key if it's printing a result</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 62, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> compile<span class=\"sy1\">(</span>src <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">([]</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>src<span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>s1<span class=\"sy1\">);</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> exec<span class=\"sy1\">(</span>p <span class=\"sy1\">[]</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">,</span> n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">,</span> limit <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> q<span class=\"sy1\">,</span> r <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>rule<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> p <span class=\"sy1\">{</span><br/>            q<span class=\"sy3\">.</span>QuoRem<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Denom<span class=\"sy1\">(),</span> &amp;r<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> r<span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                n<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;q<span class=\"sy1\">,</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Num<span class=\"sy1\">())</span><br/>                <span class=\"kw1\">continue</span> rule<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> usage<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"usage: ft &lt;limit&gt; &lt;n&gt; &lt;prog&gt;\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">4</span> <span class=\"sy1\">{</span><br/>        usage<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    limit<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        usage<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> n <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    _<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> n<span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        usage<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    p<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> compile<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        usage<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    exec<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> &amp;n<span class=\"sy1\">,</span> limit<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>find<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Ratio <span class=\"br0\">(</span>Ratio<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> denominator<span class=\"br0\">)</span><br/>\u00a0<br/>fractran <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>Ratio a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>fractran fracts n <span class=\"sy0\">=</span> n\u00a0:<br/>  <span class=\"kw1\">case</span> find <span class=\"br0\">(</span>\\f <span class=\"sy0\">-&gt;</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` denominator f <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> fracts <span class=\"kw1\">of</span><br/>    Nothing <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    Just f <span class=\"sy0\">-&gt;</span> fractran fracts <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:truncate\"><span class=\"kw3\">truncate</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n <span class=\"sy0\">*</span> f<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 27, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">record</span> fract<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    fractran<span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fractran<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> limit<span class=\"br0\">)</span><br/>    execute<span class=\"br0\">(</span>parse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> limit<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> parse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    f <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    s <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span>fract<span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> execute<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>limit<span class=\"br0\">)</span><br/>     <span class=\"sy0\">/</span>limit <span class=\"sy0\">:=</span> <span class=\"nu0\">15</span><br/>     <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>limit <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span> d <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>d<span class=\"sy0\">%</span>f<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>f<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">d</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">/</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">d</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>         <span class=\"kw1\">else</span> <span class=\"kw1\">break</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>     <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">toFrac=: <span class=\"st_h\">'/r'</span> <span class=\"nu0\">0</span>&amp;\"<a class=\"__cf_email__\" data-cfemail=\"577917343f3625242235\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ]                           <span class=\"co1\">NB. read fractions from string</span><br/>fractran15=: <span class=\"sy0\">(</span>{~ <span class=\"sy0\">(</span>= &lt;.<span class=\"sy0\">)</span> i. 1:<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"a9ddc6efdbc8cae9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ * ]<span class=\"sy0\">)</span> ^:<span class=\"sy0\">(</span>&lt;<span class=\"nu0\">15</span><span class=\"sy0\">)</span>  <span class=\"co1\">NB. return first 15 Fractran results</span></pre>"}, {"lang": "Java", "loc": 54, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Vector</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.Matcher</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.Pattern</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Fractran<span class=\"br0\">{</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span>args<span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>\u00a0<br/>       <span class=\"kw1\">new</span> Fractran<span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>   Vector<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> num <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Vector<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   Vector<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> den <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Vector<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   <span class=\"kw1\">public</span> Fractran<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> prog, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      compile<span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      dump<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      exec<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw4\">void</span> compile<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> prog<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      Pattern regexp <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>s*(<span class=\"es0\">\\\\</span>d*)<span class=\"es0\">\\\\</span>s*<span class=\"es0\">\\\\</span>/<span class=\"es0\">\\\\</span>s*(<span class=\"es0\">\\\\</span>d*)<span class=\"es0\">\\\\</span>s*(.*)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Matcher matcher <span class=\"sy0\">=</span> regexp.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         num.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         den.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         matcher <span class=\"sy0\">=</span> regexp.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>matcher.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw4\">void</span> exec<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>       <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">while</span><span class=\"br0\">(</span>val <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> n<span class=\"sy0\">&lt;</span>limit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>           <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><span class=\"sy0\">+</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           val <span class=\"sy0\">=</span> step<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           n<span class=\"sy0\">++;</span><br/>       <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> step<span class=\"br0\">(</span><span class=\"kw4\">int</span> val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>       <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <br/>       <span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>den.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> val<span class=\"sy0\">%</span>den.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i<span class=\"sy0\">++;</span><br/>       <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>den.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">return</span> num.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span>val<span class=\"sy0\">/</span>den.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw4\">void</span> dump<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>       <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>den.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>           <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>num.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">+</span>den.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 41, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> num <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> den <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> val <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> compile<span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> regex <span class=\"sy0\">=</span> <span class=\"co2\">/\\s*(\\d*)\\s*\\/\\s*(\\d*)\\s*(.*)/m</span><span class=\"sy0\">;</span><br/>  while<span class=\"br0\">(</span>regex.<span class=\"me1\">test</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    num.<span class=\"me1\">push</span><span class=\"br0\">(</span>regex.<span class=\"me1\">exec</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    den.<span class=\"me1\">push</span><span class=\"br0\">(</span>regex.<span class=\"me1\">exec</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    prog <span class=\"sy0\">=</span> regex.<span class=\"me1\">exec</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dump<span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>num.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    document.<span class=\"me1\">body</span>.<span class=\"me1\">innerHTML</span> <span class=\"sy0\">+=</span> num<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">+</span>den<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>  document.<span class=\"me1\">body</span>.<span class=\"me1\">innerHTML</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"&lt;br&gt;\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> step<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  while<span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>den.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> val<span class=\"sy0\">%</span>den<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i<span class=\"sy0\">++;</span><br/>  <span class=\"kw1\">return</span> num<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>val<span class=\"sy0\">/</span>den<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> exec<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  while<span class=\"br0\">(</span>val <span class=\"sy0\">&amp;&amp;</span> i<span class=\"sy0\">&lt;</span>limit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    document.<span class=\"me1\">body</span>.<span class=\"me1\">innerHTML</span> <span class=\"sy0\">+=</span> i<span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><span class=\"sy0\">+</span>val<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;br&gt;\"</span><span class=\"sy0\">;</span><br/>    val <span class=\"sy0\">=</span> step<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    i <span class=\"sy0\">++;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Main</span><br/>compile<span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>dump<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">var</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>exec<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 32, "block": "<pre class=\"text highlighted_source\">function fractran(n::Integer, ratios::Vector{&lt;:Rational}, steplim::Integer)<br/>    rst = zeros(BigInt, steplim)<br/>    for i in 1:steplim<br/>        rst[i] = n<br/>        if (pos = findfirst(x -&gt; isinteger(n * x), ratios)) &gt; 0<br/>            n *= ratios[pos]<br/>        else<br/>            break<br/>        end<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>using IterTools<br/>macro ratio_str(s)<br/>    a = split(s, r\"[\\s,/]+\")<br/>    return collect(parse(BigInt, n) // parse(BigInt, d) for (n, d) in partition(a, 2))<br/>end<br/>\u00a0<br/>fracs = ratio\"\"\"17 / 91, 78 / 85, 19 / 51, 23 / 38, 29 / 33, 77 / 29, 95 / 23,<br/>                77 / 19, 1 / 17, 11 / 13, 13 / 11, 15 / 14, 15 / 2, 55 / 1\"\"\"<br/>println(\"The first 20 in the series are \", fractran(2, fracs, 20))<br/>\u00a0<br/>prmfound = 0<br/>n = big(2)<br/>while prmfound &lt; 20<br/>    if isinteger(log2(n))<br/>        prmfound += 1<br/>        println(\"Prime $prmfound found: $n is 2 ^ $(Int(log2(n)))\")<br/>    end<br/>    n = fractran(n, fracs, 2)[2]<br/>end</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Fraction<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num<span class=\"sy0\">:</span> BigInteger, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    operator fun times<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Fraction <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> num, denom<span class=\"br0\">)</span><br/>\u00a0<br/>    fun isIntegral<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num <span class=\"sy0\">%</span> denom <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ZERO</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun String.<span class=\"me1\">toFraction</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Fraction <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Fraction<span class=\"br0\">(</span>BigInteger<span class=\"br0\">(</span>split<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, BigInteger<span class=\"br0\">(</span>split<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BigInteger.<span class=\"me1\">isPowerOfTwo</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">and</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ZERO</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> log2 <span class=\"sy0\">=</span> Math.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun fractran<span class=\"br0\">(</span>program<span class=\"sy0\">:</span> String, n<span class=\"sy0\">:</span> Int, limit<span class=\"sy0\">:</span> Int, primesOnly<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fractions <span class=\"sy0\">=</span> program.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toFraction</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> results <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>primesOnly<span class=\"br0\">)</span> results.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>n.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>results.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> frac <span class=\"sy0\">=</span> fractions.<span class=\"me1\">find</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>it <span class=\"sy0\">*</span> nn<span class=\"br0\">)</span>.<span class=\"me1\">isIntegral</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">?:</span> break<br/>        nn <span class=\"sy0\">=</span> nn <span class=\"sy0\">*</span> frac.<span class=\"me1\">num</span> / frac.<span class=\"me1\">denom</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>primesOnly<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           results.<span class=\"me1\">add</span><span class=\"br0\">(</span>nn.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>primesOnly <span class=\"sy0\">&amp;&amp;</span> nn.<span class=\"me1\">isPowerOfTwo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prime <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>nn.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> / log2<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           results.<span class=\"me1\">add</span><span class=\"br0\">(</span>prime<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> results<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> program <span class=\"sy0\">=</span> <span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"First twenty numbers:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>fractran<span class=\"br0\">(</span>program, <span class=\"nu0\">2</span>, <span class=\"nu0\">20</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>First twenty primes:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>fractran<span class=\"br0\">(</span>program, <span class=\"nu0\">2</span>, <span class=\"nu0\">20</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 15, "block": "<pre class=\"text highlighted_source\">fractionlist = {17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1};<br/>n = 2;<br/>steplimit = 20;<br/>j = 0;<br/>break = False;<br/>While[break == False &amp;&amp; j &lt;= steplimit,<br/> newlist = n fractionlist;<br/> isintegerlist = IntegerQ[#] &amp; /@ newlist; <br/> truepositions = Position[isintegerlist, True];<br/> If[Length[truepositions] == 0,<br/>  break = True,<br/>  Print[ToString[j] &lt;&gt; \": \" &lt;&gt; ToString[n]]; <br/>  n = newlist[[truepositions[[1, 1]]]]; j++;<br/>  ]<br/> ]</pre>"}, {"lang": "OCaml", "loc": 43, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Num.html\"><span class=\"kw2\">Num</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> get_input <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   num_of_int <span class=\"br0\">(</span><br/>     <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> get_max_steps <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">50</span><br/>\u00a0<br/><span class=\"kw1\">let</span> read_program <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> line <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_line\"><span class=\"kw3\">read_line</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> words <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span><span class=\"kw1\">regexp</span> <span class=\"st0\">\" +\"</span><span class=\"br0\">)</span> line <span class=\"kw1\">in</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map num_of_string words<br/>\u00a0<br/><span class=\"kw1\">let</span> is_int n <span class=\"sy0\">=</span> n <span class=\"sy0\">=/</span> <span class=\"br0\">(</span>integer_num n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> run_program num prog <span class=\"sy0\">=</span><br/>\u00a0<br/>   <span class=\"kw1\">let</span> replace n <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> step <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>      <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>      <span class=\"sy0\">|</span> h <span class=\"sy0\">::</span> t <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> n<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> h <span class=\"sy0\">*/</span> n <span class=\"kw1\">in</span><br/>            <span class=\"kw1\">if</span> is_int n<span class=\"sy0\">'</span> <span class=\"kw1\">then</span> Some n<span class=\"sy0\">'</span> <span class=\"kw1\">else</span> step t <span class=\"kw1\">in</span><br/>      step prog <span class=\"kw1\">in</span><br/>\u00a0<br/>   <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> repeat m lim <span class=\"sy0\">=</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\" \u00a0%s\\n\"</span> <span class=\"br0\">(</span>string_of_num m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> lim <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Reached max step limit\"</span> <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">match</span> replace m <span class=\"kw1\">with</span><br/>         <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Finished\"</span><br/>         <span class=\"sy0\">|</span> Some x <span class=\"sy0\">-&gt;</span> repeat x <span class=\"br0\">(</span>lim<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">in</span><br/>\u00a0<br/>   <span class=\"kw1\">let</span> max_steps <span class=\"sy0\">=</span> get_max_steps <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   repeat num max_steps<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> num <span class=\"sy0\">=</span> get_input <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> prog <span class=\"sy0\">=</span> read_program <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   run_program num prog</pre>"}, {"lang": "PARI/GP", "loc": 17, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ FRACTRAN </span><br/><span class=\"co1\">\\\\ 4/27/16 aev</span><br/>fractran<span class=\"br0\">(</span>val<span class=\"sy0\">,</span>ft<span class=\"sy0\">,</span>lim<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>ftn<span class=\"sy0\">=</span>#ft<span class=\"sy0\">,</span>fti<span class=\"sy0\">,</span>di<span class=\"sy0\">,</span>L<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>j<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span>val<span class=\"sy0\">&amp;&amp;</span>j<span class=\"sy0\">&lt;</span>lim<span class=\"sy0\">,</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>L<span class=\"sy0\">,</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>ftn<span class=\"sy0\">,</span> fti<span class=\"sy0\">=</span>ft<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> di<span class=\"sy0\">=</span><span class=\"kw1\">denominator</span><span class=\"br0\">(</span>fti<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>val<span class=\"sy0\">%</span>di<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">break</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend i</span><br/>  val<span class=\"sy0\">=</span> <span class=\"kw1\">numerator</span><span class=\"br0\">(</span>fti<span class=\"br0\">)</span><span class=\"sy0\">*</span>val<span class=\"sy0\">/</span>di<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\wend j</span><br/><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Executing:</span><br/>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">17</span><span class=\"sy0\">/</span><span class=\"nu1\">91</span><span class=\"sy0\">,</span><span class=\"nu1\">78</span><span class=\"sy0\">/</span><span class=\"nu1\">85</span><span class=\"sy0\">,</span><span class=\"nu1\">19</span><span class=\"sy0\">/</span><span class=\"nu1\">51</span><span class=\"sy0\">,</span><span class=\"nu1\">23</span><span class=\"sy0\">/</span><span class=\"nu1\">38</span><span class=\"sy0\">,</span><span class=\"nu1\">29</span><span class=\"sy0\">/</span><span class=\"nu1\">33</span><span class=\"sy0\">,</span><span class=\"nu1\">77</span><span class=\"sy0\">/</span><span class=\"nu1\">29</span><span class=\"sy0\">,</span><span class=\"nu1\">95</span><span class=\"sy0\">/</span><span class=\"nu1\">23</span><span class=\"sy0\">,</span><span class=\"nu1\">77</span><span class=\"sy0\">/</span><span class=\"nu1\">19</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">17</span><span class=\"sy0\">,</span><span class=\"nu1\">11</span><span class=\"sy0\">/</span><span class=\"nu1\">13</span><span class=\"sy0\">,</span><span class=\"nu1\">13</span><span class=\"sy0\">/</span><span class=\"nu1\">11</span><span class=\"sy0\">,</span><span class=\"nu1\">15</span><span class=\"sy0\">/</span><span class=\"nu1\">14</span><span class=\"sy0\">,</span><span class=\"nu1\">15</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">55</span><span class=\"sy0\">/</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>fractran<span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>v<span class=\"sy0\">,</span><span class=\"nu1\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigRat</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@P</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> Math<span class=\"sy0\">::</span><span class=\"me2\">BigRat</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">{</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">17</span><span class=\"sy0\">/</span><span class=\"nu0\">91</span> <span class=\"nu0\">78</span><span class=\"sy0\">/</span><span class=\"nu0\">85</span> <span class=\"nu0\">19</span><span class=\"sy0\">/</span><span class=\"nu0\">51</span> <span class=\"nu0\">23</span><span class=\"sy0\">/</span><span class=\"nu0\">38</span> <span class=\"nu0\">29</span><span class=\"sy0\">/</span><span class=\"nu0\">33</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">29</span> <span class=\"nu0\">95</span><span class=\"sy0\">/</span><span class=\"nu0\">23</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">19</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">17</span> <span class=\"nu0\">11</span><span class=\"sy0\">/</span><span class=\"nu0\">13</span> <span class=\"nu0\">13</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span> <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">14</span> <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"nu0\">55</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co5\">$|</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>MAIN<span class=\"sy0\">:</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\" \"</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$pow</span><span class=\"sy0\">,</span> <span class=\"re0\">$rest</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">until</span><span class=\"br0\">(</span> <span class=\"re0\">$rest</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">is_odd</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"sy0\">++</span><span class=\"re0\">$pow</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$rest</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bdiv</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$rest</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">is_one</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"2**$pow\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">#print $n;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f_i</span> <span class=\"br0\">(</span><span class=\"re0\">@P</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$nf_i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f_i</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$nf_i</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">is_int</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nf_i</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> MAIN<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> fractran<span class=\"br0\">(</span><span class=\"re0\">@program</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"kw3\">first</span> Int<span class=\"sy0\">,</span> <span class=\"kw3\">map</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">*</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">narrow</span><span class=\"sy0\">,</span> <span class=\"re0\">@program</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> fractran<span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">17</span><span class=\"sy0\">/</span><span class=\"nu0\">91</span> <span class=\"nu0\">78</span><span class=\"sy0\">/</span><span class=\"nu0\">85</span> <span class=\"nu0\">19</span><span class=\"sy0\">/</span><span class=\"nu0\">51</span> <span class=\"nu0\">23</span><span class=\"sy0\">/</span><span class=\"nu0\">38</span> <span class=\"nu0\">29</span><span class=\"sy0\">/</span><span class=\"nu0\">33</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">29</span> <span class=\"nu0\">95</span><span class=\"sy0\">/</span><span class=\"nu0\">23</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">19</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">17</span> <span class=\"nu0\">11</span><span class=\"sy0\">/</span><span class=\"nu0\">13</span> <span class=\"nu0\">13</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span><br/>        <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">14</span> <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"nu0\">55</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 21, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/>\u00a0<br/><span class=\"kw1\">def</span> fractran<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fstring<span class=\"sy0\">=</span><span class=\"st0\">'17 / 91, 78 / 85, 19 / 51, 23 / 38, 29 / 33,'</span><br/>                        <span class=\"st0\">'77 / 29, 95 / 23, 77 / 19, 1 / 17, 11 / 13,'</span><br/>                        <span class=\"st0\">'13 / 11, 15 / 14, 15 / 2, 55 / 1'</span><span class=\"br0\">)</span>:<br/>    flist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Fraction<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> fstring.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> Fraction<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">yield</span> n.<span class=\"me1\">numerator</span><br/>        <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> flist:<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n * f<span class=\"br0\">)</span>.<span class=\"me1\">denominator</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">break</span><br/>        n *<span class=\"sy0\">=</span> f<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    n<span class=\"sy0\">,</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'First\u00a0%i members of fractran(%i):<span class=\"es0\">\\n</span>  '</span>\u00a0% <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> +<br/>          <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>i <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>fractran<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (displaysp x)<br/>  (display x)<br/>  (display \" \"))<br/>\u00a0<br/>(define (read-string-list str)<br/>  (map string-&gt;number<br/>       (string-split (string-replace str \" \" \"\") \",\")))<br/>\u00a0<br/>(define (eval-fractran n list)<br/>  (for/or ([e (in-list list)])<br/>    (let ([en (* e n)])<br/>      (and (integer? en) en))))<br/>\u00a0<br/>(define (show-fractran fr n s)<br/>  (printf \"First ~a members of fractran(~a):\\n\" s n)<br/>  (displaysp n) <br/>  (for/fold ([n n]) ([i (in-range (- s 1))])<br/>    (let ([new-n (eval-fractran n fr)])<br/>      (displaysp new-n) <br/>      new-n))<br/>  (void))<br/>\u00a0<br/>(define fractran<br/>  (read-string-list <br/>   (string-append \"17 / 91, 78 / 85, 19 / 51, 23 / 38, 29 / 33,\"<br/>                  \"77 / 29, 95 / 23, 77 / 19, 1 / 17, 11 / 13,\"<br/>                  \"13 / 11, 15 / 14, 15 / 2, 55 / 1\")))<br/>\u00a0<br/>(show-fractran fractran 2 15)</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program runs  FRACTRAN  for a given set of  fractions  and  from a specified  N. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">2000</span>                              <span class=\"coMULTI\">/*be able to handle larger numbers.    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N terms fracs                          <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>     <span class=\"sy0\">|</span>     N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">2</span>              <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> terms==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> terms==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> terms=<span class=\"nu0\">100</span>        <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> fracs=<span class=\"st0\">''</span>                <span class=\"kw3\">then</span> fracs= <span class=\"st0\">'17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23,'</span>,<br/>                                       <span class=\"st0\">'77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  The default for the fractions. */</span><br/>f=<span class=\"kw6\">space</span><span class=\"br0\">(</span>fracs,<span class=\"nu0\">0</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*remove all blanks from the FRACS list*/</span><br/>                 <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> f<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  f n<span class=\"sy0\">.</span>#   <span class=\"st0\">'/'</span>   d<span class=\"sy0\">.</span>#   <span class=\"st0\">\",\"</span>   f<br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span>                     <span class=\"coMULTI\">/* [\u2191]  parse all the fractions in list*/</span><br/>#=#-<span class=\"nu0\">1</span>                                            <span class=\"coMULTI\">/*the number of fractions just found.  */</span><br/><span class=\"kw1\">say</span> #   <span class=\"st0\">'fractions:'</span>   fracs                     <span class=\"coMULTI\">/*display number and actual fractions. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'N  is starting at '</span>   N                     <span class=\"coMULTI\">/*display the starting number  N.      */</span><br/><span class=\"kw1\">say</span> terms   <span class=\"st0\">' terms are being shown:'</span>            <span class=\"coMULTI\">/*display a kind of header/title.      */</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span>     j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  terms                       <span class=\"coMULTI\">/*perform the DO loop for each   term. */</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  #                           <span class=\"coMULTI\">/*   \"     \"   \"   \"   \"    \"  fraction*/</span><br/>        <span class=\"kw1\">if</span> N<span class=\"sy0\">//</span>d<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>              <span class=\"coMULTI\">/*Not an integer?  Then ignore it.     */</span><br/>        <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'term'</span> j, <span class=\"nu0\">35</span><span class=\"br0\">)</span>    <span class=\"st0\">\"\u2500\u2500\u25ba \"</span>    N   <span class=\"coMULTI\">/*display the  Nth  term  with the  N. */</span><br/>        N=N \u00a0%  d<span class=\"sy0\">.</span>k  <span class=\"sy0\">*</span>  n<span class=\"sy0\">.</span>k                      <span class=\"coMULTI\">/*calculate next term (use\u00a0%\u2261integer \u00f7)*/</span><br/>        <span class=\"kw1\">iterate</span> j                                <span class=\"coMULTI\">/*go start calculating the next term.  */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                              <span class=\"coMULTI\">/* [\u2191]  if an integer, we found a new N*/</span><br/>    <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span>                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\">ar = <span class=\"sy0\">%</span>w<span class=\"br0\">[</span><span class=\"nu0\">17</span><span class=\"sy0\">/</span><span class=\"nu0\">91</span> <span class=\"nu0\">78</span><span class=\"sy0\">/</span><span class=\"nu0\">85</span> <span class=\"nu0\">19</span><span class=\"sy0\">/</span><span class=\"nu0\">51</span> <span class=\"nu0\">23</span><span class=\"sy0\">/</span><span class=\"nu0\">38</span> <span class=\"nu0\">29</span><span class=\"sy0\">/</span><span class=\"nu0\">33</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">29</span> <span class=\"nu0\">95</span><span class=\"sy0\">/</span><span class=\"nu0\">23</span> <span class=\"nu0\">77</span><span class=\"sy0\">/</span><span class=\"nu0\">19</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">17</span> <span class=\"nu0\">11</span><span class=\"sy0\">/</span><span class=\"nu0\">13</span> <span class=\"nu0\">13</span><span class=\"sy0\">/</span><span class=\"nu0\">11</span> <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">14</span> <span class=\"nu0\">15</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"nu0\">55</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>FractalProgram = ar.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_r<span class=\"br0\">)</span>                                <span class=\"co1\">#=&gt; array of rationals</span><br/>\u00a0<br/>Runner = Enumerator.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>  num = <span class=\"nu0\">2</span><br/>  <span class=\"kw3\">loop</span><span class=\"br0\">{</span> y <span class=\"sy0\">&lt;&lt;</span> num <span class=\"sy0\">*</span>= FractalProgram.<span class=\"me1\">detect</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> <span class=\"br0\">(</span>num<span class=\"sy0\">*</span>f<span class=\"br0\">)</span>.<span class=\"me1\">denominator</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>prime_generator = Enumerator.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> <br/>  Runner.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>num<span class=\"sy0\">|</span><br/>    l = <span class=\"kw4\">Math</span>.<span class=\"me1\">log2</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">&lt;&lt;</span> l.<span class=\"me1\">to_i</span> <span class=\"kw1\">if</span> l.<span class=\"me1\">floor</span> == l<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># demo</span><br/><span class=\"kw3\">p</span> Runner.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:numerator<span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> prime_generator.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> TestFractran <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> FunSuite <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> program <span class=\"sy0\">=</span> Fractran<span class=\"br0\">(</span><span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> expect <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">825</span>, <span class=\"nu0\">725</span>, <span class=\"nu0\">1925</span>, <span class=\"nu0\">2275</span>, <span class=\"nu0\">425</span>, <span class=\"nu0\">390</span>, <span class=\"nu0\">330</span>, <span class=\"nu0\">290</span>, <span class=\"nu0\">770</span>, <span class=\"nu0\">910</span>, <span class=\"nu0\">170</span>, <span class=\"nu0\">156</span>, <span class=\"nu0\">132</span><span class=\"br0\">)</span><br/>\u00a0<br/>  test<span class=\"br0\">(</span><span class=\"st0\">\"find first fifteen fractran figures\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    assert<span class=\"br0\">(</span><span class=\"br0\">(</span>program .<span class=\"me1\">execute</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> take <span class=\"nu0\">15</span> toList<span class=\"br0\">)</span> <span class=\"sy0\">===</span> expect<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Fractran <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pattern <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\s</span>*(<span class=\"es0\">\\d</span>+)<span class=\"es0\">\\s</span>*/<span class=\"es0\">\\s</span>*(<span class=\"es0\">\\d</span>+)<span class=\"es0\">\\s</span>*\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parse<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Match<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m group <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"br0\">(</span>m group <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>program<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Fractran<span class=\"br0\">(</span><br/>    pattern.<span class=\"me1\">findAllMatchIn</span><span class=\"br0\">(</span>program<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>parse<span class=\"br0\">)</span>.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Fractran<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numDem<span class=\"sy0\">:</span> List<span class=\"br0\">[</span><span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> execute<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> unfold<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span> v <span class=\"sy0\">=&gt;</span><br/>    numDem indexWhere<span class=\"br0\">(</span>v <span class=\"sy0\">%</span> <span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>v, numDem<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"sy0\">_</span>1 <span class=\"sy0\">*</span> v / numDem<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> None<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 65, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme inexact<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">read</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>string<span class=\"sy0\">-</span>fractions<span class=\"sy0\">*</span> <span class=\"co1\">; string input of fractions</span><br/>  <span class=\"st0\">\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 <br/>  1/17 11/13 13/11 15/14 15/2 55/1\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>fractions<span class=\"sy0\">*</span> <span class=\"co1\">; create vector of fractions from string input</span><br/>  <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> <span class=\"co1\">; convert result to a vector, for constant access times</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">read</span> <span class=\"br0\">(</span>open<span class=\"sy0\">-</span>input<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"co1\">; read from the string of fractions, as a list</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">*</span>string<span class=\"sy0\">-</span>fractions<span class=\"sy0\">*</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; run a fractran interpreter, returning the next number for n</span><br/><span class=\"co1\">;; or #f if no next number available</span><br/><span class=\"co1\">;; assume fractions: ordered vector of positive fractions</span><br/><span class=\"co1\">;;                n: a positive integer</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fractran fractions n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>max<span class=\"sy0\">-</span>n <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> fractions<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i max<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>             #f<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">integer?</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> fractions i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> fractions i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">else</span> <br/>              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Task</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>result max<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>n <span class=\"nu0\">2</span> <span class=\"br0\">(</span>fractran <span class=\"sy0\">*</span>fractions<span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i max<span class=\"sy0\">-</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Task: \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>display<span class=\"sy0\">-</span>result <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"co1\">; show first 20 numbers</span><br/>\u00a0<br/><span class=\"co1\">;; Extra Credit: derive first 20 prime numbers</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>generate<span class=\"sy0\">-</span>primes target<span class=\"sy0\">-</span>number initial<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>power<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>two? n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">integer?</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>extract<span class=\"sy0\">-</span>prime n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>exact <span class=\"br0\">(</span><span class=\"kw1\">log</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>n initial<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> count target<span class=\"sy0\">-</span>number<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> n #f<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"-- FAILED TO COMPUTE N --<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>is<span class=\"sy0\">-</span>power<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>two? n<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>extract<span class=\"sy0\">-</span>prime n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> count<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>fractran <span class=\"sy0\">*</span>fractions<span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>              <span class=\"br0\">(</span>loop count<br/>                    <span class=\"br0\">(</span>fractran <span class=\"sy0\">*</span>fractions<span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Primes:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>generate<span class=\"sy0\">-</span>primes <span class=\"nu0\">20</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; create first 20 primes</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 36, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"rational.s7i\";<br/>\u00a0<br/>const func array integer: fractran (in integer: limit, in var integer: number, in array rational: program) is func<br/>  result<br/>    var array integer: output is 0 times 0;<br/>  local<br/>    var integer: index is 1;<br/>    var rational: newNumber is 0/1;<br/>  begin<br/>    output\u00a0:= [] (number);<br/>    while index &lt;= length(program) and length(output) &lt;= limit do<br/>      newNumber\u00a0:= rat(number) * program[index];<br/>      if newNumber = rat(trunc(newNumber)) then<br/>        number\u00a0:= trunc(newNumber);<br/>        output &amp;:= number;<br/>        index\u00a0:= 1;<br/>      else<br/>        incr(index);<br/>      end if;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array rational: program is []<br/>        (17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1);<br/>    var array integer: output is 0 times 0;<br/>    var integer: number is 0;<br/>  begin<br/>    output\u00a0:= fractran(15, 2, program);<br/>    for number range output do<br/>      write(number &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 28, "block": "<pre class=\"ruby highlighted_source\">var str =<span class=\"st0\">\"17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1\"</span><br/>const FractalProgram = str.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">num</span><span class=\"br0\">}</span>      <span class=\"co1\">#=&gt; array of rationals</span><br/>\u00a0<br/>func runner<span class=\"br0\">(</span>n, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var num = <span class=\"nu0\">2</span><br/>    n.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span>num <span class=\"sy0\">*</span>= FractalProgram.<span class=\"me1\">find</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> f <span class=\"sy0\">*</span> num <span class=\"sy0\">-&gt;</span> is_int <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func prime_generator<span class=\"br0\">(</span>n, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var x = <span class=\"nu0\">0</span>;<br/>    runner<span class=\"br0\">(</span>Inf, <span class=\"br0\">{</span> <span class=\"sy0\">|</span>num<span class=\"sy0\">|</span><br/>        var l = num.<span class=\"me1\">log2</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l.<span class=\"me1\">floor</span> == l<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            callback<span class=\"br0\">(</span>l.<span class=\"me1\">int</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">++</span>x == n <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">nil</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>STDOUT.<span class=\"me1\">autoflush</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>\u00a0<br/>runner<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> <span class=\"br0\">(</span>n, <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>prime_generator<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> <span class=\"br0\">(</span>n, <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Tcl", "loc": 49, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create Fractran <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> fracs nco<br/>    constructor <span class=\"br0\">{</span>fractions<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> fracs <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> frac <span class=\"re0\">$fractions</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>^<span class=\"br0\">(</span>\\d+<span class=\"br0\">)</span>/<span class=\"br0\">(</span>\\d+<span class=\"br0\">)</span>,<span class=\"sy0\">?$</span><span class=\"br0\">}</span> <span class=\"re0\">$frac</span> -<span class=\"sy0\">&gt;</span> num denom<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> fracs <span class=\"re0\">$num</span> <span class=\"re0\">$denom</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"$frac is not a supported fraction\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fracs</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"need at least one fraction\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> execute <span class=\"br0\">{</span>n <span class=\"br0\">{</span>steps <span class=\"nu0\">15</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> co <span class=\"br0\">[</span>coroutine <span class=\"br0\">[</span><span class=\"kw2\">incr</span> nco<span class=\"br0\">]</span> my Generate <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$steps</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"re0\">$co</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">rename</span> <span class=\"re0\">$co</span> <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> Step <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>num den<span class=\"br0\">}</span> <span class=\"re0\">$fracs</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$den</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$num</span> / <span class=\"re0\">$den</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> Generate <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    yield <span class=\"re0\">$n</span><br/>\t    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span>my Step <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> ft <span class=\"br0\">[</span>Fractran new <span class=\"br0\">{</span><br/>    <span class=\"nu0\">17</span>/<span class=\"nu0\">91</span> <span class=\"nu0\">78</span>/<span class=\"nu0\">85</span> <span class=\"nu0\">19</span>/<span class=\"nu0\">51</span> <span class=\"nu0\">23</span>/<span class=\"nu0\">38</span> <span class=\"nu0\">29</span>/<span class=\"nu0\">33</span> <span class=\"nu0\">77</span>/<span class=\"nu0\">29</span> <span class=\"nu0\">95</span>/<span class=\"nu0\">23</span><br/>    <span class=\"nu0\">77</span>/<span class=\"nu0\">19</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">17</span> <span class=\"nu0\">11</span>/<span class=\"nu0\">13</span> <span class=\"nu0\">13</span>/<span class=\"nu0\">11</span> <span class=\"nu0\">15</span>/<span class=\"nu0\">14</span> <span class=\"nu0\">15</span>/<span class=\"nu0\">2</span> <span class=\"nu0\">55</span>/<span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"re0\">$ft</span> execute <span class=\"nu0\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">var fracs=\"17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17,\"<br/>   \"11/13,  13/11, 15/14, 15/2, 55/1\";<br/>fcn fractranW(n,fracsAsOneBigString){ //--&gt;Walker (iterator)<br/>  fracs:=(fracsAsOneBigString-\" \").split(\",\").apply(<br/>\t fcn(frac){ frac.split(\"/\").apply(\"toInt\") }); //( (n,d), (n,d), ...)<br/>   Walker(fcn(rn,fracs){<br/>      n:=rn.value;<br/>      foreach a,b in (fracs){<br/>\t if(n*a%b == 0){ <br/>\t    rn.set(n*a/b);<br/>\t    return(n);<br/>\t }<br/>      }<br/>   }.fp(Ref(n),fracs))<br/>}</pre>"}]}