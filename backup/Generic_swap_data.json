{"task": "Generic_swap", "blocks": [{"lang": "360 Assembly", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>SWAP     CSECT ,                   control section start <br/>         BAKR  14,0                stack caller's registers <br/>         LR    12,15               entry point address to reg.12 <br/>         USING SWAP,12             use as base <br/>         MVC   A,=C'5678____'      init field A <br/>         MVC   B,=C'____1234'      init field B <br/>         LA    2,L                 address of length field in reg.2 <br/>         WTO   TEXT=(2)            Write To Operator, results in: <br/>*                                  +5678________1234 <br/>         XC    A,B                 XOR A,B <br/>         XC    B,A                 XOR B,A <br/>         XC    A,B                 XOR A,B. A holds B, B holds A <br/>         WTO   TEXT=(2)            Write To Operator, results in: <br/>*                                  +____12345678____ <br/>         PR    ,                   return to caller <br/>         LTORG ,                   literals displacement <br/>L        DC    H'16'               halfword containg decimal 16 <br/>A        DS    CL8                 field A, 8 bytes <br/>B        DS    CL8                 field B, 8 bytes <br/>         END   SWAP                program end <br/>\u00a0</pre>"}, {"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>swap<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> swap <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>cw <span class=\"st0\">\"Before: ~x0~%After: ~x1~%\"</span> p <span class=\"br0\">(</span>swap p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Swap_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>; <span class=\"co1\">-- Generic parameter</span><br/><span class=\"kw3\">procedure</span> Generic_Swap <span class=\"br0\">(</span>Left, Right\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Swap_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Generic_Swap <span class=\"br0\">(</span>Left, Right\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Swap_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   Temp\u00a0: <span class=\"kw3\">constant</span> Swap_Type\u00a0:= Left;<br/><span class=\"kw1\">begin</span><br/>   Left\u00a0:= Right;<br/>   Right\u00a0:= Temp;<br/><span class=\"kw1\">end</span> Generic_Swap;</pre>"}, {"lang": "Aime", "loc": 12, "block": "<pre class=\"text highlighted_source\">void<br/>__swap(&amp;, &amp;,,)<br/>{<br/>    set(0, $3);<br/>    set(1, $2);<br/>}<br/>\u00a0<br/>void<br/>swap(&amp;, &amp;)<br/>{<br/>    xcall(xcall, __swap);<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> GENMODE <span class=\"sy1\">=</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">;</span><br/>\u00a0<br/>GENMODE v1<span class=\"sy1\">:=</span><span class=\"st0\">\"Francis Gary Powers\"</span><span class=\"sy1\">,</span> v2<span class=\"sy1\">:=</span><span class=\"st0\">\"Vilyam Fisher\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PRIO</span> <span class=\"sy1\">=:=</span> <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">=:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> GENMODE v1<span class=\"sy1\">,</span> v2<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  GENMODE tmp<span class=\"sy1\">:=</span>v1<span class=\"sy1\">;</span> v1<span class=\"sy1\">:=</span>v2<span class=\"sy1\">;</span> v2<span class=\"sy1\">:=</span>tmp<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>v1 <span class=\"sy1\">=:=</span> v2<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"v1: \"</span><span class=\"sy1\">,</span>v1<span class=\"sy1\">,</span> <span class=\"st0\">\", v2: \"</span><span class=\"sy1\">,</span> v2<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AmigaE", "loc": 16, "block": "<pre class=\"text highlighted_source\">PROC swap(a,b) IS b,a<br/>\u00a0<br/>PROC main()<br/>  DEF v1, v2, x<br/>  v1\u00a0:= 10<br/>  v2\u00a0:= 20<br/>  v1, v2\u00a0:= swap(v1,v2)<br/>  WriteF('\\d \\d\\n', v1,v2)           -&gt; 20 10<br/>  v1\u00a0:= [ 10, 20, 30, 40 ]<br/>  v2\u00a0:= [ 50, 60, 70, 80 ]<br/>  v1, v2\u00a0:= swap(v1,v2)<br/>  ForAll({x}, v1, `WriteF('\\d ',x))  -&gt; 50 60 70 80<br/>  WriteF('\\n')<br/>  ForAll({x}, v2, `WriteF('\\d ',x))  -&gt; 10 20 30 40<br/>  WriteF('\\n')<br/>ENDPROC</pre>"}, {"lang": "AppleScript", "loc": 1, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> <span class=\"br0\">{</span>x,y<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>y,x<span class=\"br0\">}</span></pre>"}, {"lang": "Arc", "loc": 11, "block": "<pre class=\"text highlighted_source\">(mac myswap (a b)<br/>     (w/uniq gx<br/>             `(let ,gx a<br/>                   (= a b)<br/>                   (= b ,gx))))<br/>\u00a0<br/>(with (a 1<br/>       b 2)<br/>      (myswap a b)<br/>      (prn \"a:\" a #\\Newline \"b:\" b))<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 6, "block": "<pre class=\"autohotkey highlighted_source\">Swap<span class=\"br0\">(</span>ByRef <span class=\"kw6\">Left</span><span class=\"sy0\">,</span> ByRef <span class=\"kw6\">Right</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    temp <span class=\"sy0\">:=</span> <span class=\"kw6\">Left</span><br/>    <span class=\"kw6\">Left</span> <span class=\"sy0\">:=</span> <span class=\"kw6\">Right</span><br/>    <span class=\"kw6\">Right</span> <span class=\"sy0\">:=</span> temp<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 27, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f GENERIC_SWAP.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s version\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"version\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    foo = <span class=\"nu0\">1</span><br/>    bar = <span class=\"st0\">\"a\"</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,foo,bar<span class=\"br0\">)</span><br/>    rc = swap<span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span>,<span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span> <span class=\"co1\"># ok</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,foo,bar,rc<span class=\"sy5\">?</span><span class=\"st0\">\"ok\"</span><span class=\"sy5\">:</span><span class=\"st0\">\"ng\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,foo,bar<span class=\"br0\">)</span><br/>    rc = swap<span class=\"br0\">(</span><span class=\"st0\">\"FOO\"</span>,<span class=\"st0\">\"BAR\"</span><span class=\"br0\">)</span> <span class=\"co1\"># ng</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,foo,bar,rc<span class=\"sy5\">?</span><span class=\"st0\">\"ok\"</span><span class=\"sy5\">:</span><span class=\"st0\">\"ng\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> swap<span class=\"br0\">(</span>a1,a2,  tmp<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># strings or numbers only; no arrays</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a1 <span class=\"kw1\">in</span> SYMTAB <span class=\"sy1\">&amp;&amp;</span> a2 <span class=\"kw1\">in</span> SYMTAB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isarray<span class=\"br0\">(</span>SYMTAB<span class=\"br0\">[</span>a1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> isarray<span class=\"br0\">(</span>SYMTAB<span class=\"br0\">[</span>a2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      tmp = SYMTAB<span class=\"br0\">[</span>a1<span class=\"br0\">]</span><br/>      SYMTAB<span class=\"br0\">[</span>a1<span class=\"br0\">]</span> = SYMTAB<span class=\"br0\">[</span>a2<span class=\"br0\">]</span><br/>      SYMTAB<span class=\"br0\">[</span>a2<span class=\"br0\">]</span> = tmp<br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Axe", "loc": 1, "block": "<pre class=\"text highlighted_source\">Exch(\u00b0A,\u00b0B,2)</pre>"}, {"lang": "Batch File", "loc": 17, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> b=woof<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">b</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">swap</span> a b<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">b</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">swap</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> temp1=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">1</span></span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> temp2=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">2</span></span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>=<span class=\"sy0\">%</span><span class=\"re3\">temp2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>=<span class=\"sy0\">%</span><span class=\"re3\">temp1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span></pre>"}, {"lang": "BBC BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">      a = 1.23\u00a0: b = 4.56<br/>      SWAP a,b<br/>      PRINT a,b<br/>\u00a0<br/>      a$ = \"Hello \"\u00a0: b$ = \"world!\"<br/>      SWAP a$,b$<br/>      PRINT a$,b$</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">(!a.!b):(?b.?a)</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\/<br/>\u00a0</pre>"}, {"lang": "C", "loc": 6, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>va<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>vb<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>va<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>vb<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>s<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    t <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 6, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span> <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span>T<span class=\"sy3\">&amp;</span> left, T<span class=\"sy3\">&amp;</span> right<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  T tmp<span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  left <span class=\"sy1\">=</span> right<span class=\"sy4\">;</span><br/>  right <span class=\"sy1\">=</span> tmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Swap<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">ref</span> T a, <span class=\"kw1\">ref</span> T b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    T temp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>    a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>    b <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//Usage:</span><br/><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>Swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> a, <span class=\"kw1\">ref</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//type is inferred.</span></pre>"}, {"lang": "Chapel", "loc": 1, "block": "<pre class=\"text highlighted_source\">a &lt;=&gt; b</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defn swap <span class=\"br0\">[</span>pair<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">; returns a list</span><br/><span class=\"br0\">(</span>defn swap <span class=\"br0\">[</span><span class=\"br0\">[</span>a b<span class=\"br0\">]</span><span class=\"br0\">]</span> '<span class=\"br0\">(</span>b a<span class=\"br0\">)</span><span class=\"br0\">)</span>           <span class=\"co1\">; returns a list</span><br/><span class=\"br0\">(</span>defn swap <span class=\"br0\">[</span><span class=\"br0\">[</span>a b<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>b a<span class=\"br0\">]</span><span class=\"br0\">)</span>            <span class=\"co1\">; returns a vector</span><br/>\u00a0</pre>"}, {"lang": "CMake", "loc": 5, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>swap var1 var2<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>_SWAP_TEMPORARY <span class=\"st0\">\"<span class=\"es1\">${${var1}</span>}\"</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var1}</span> <span class=\"st0\">\"<span class=\"es1\">${${var2}</span>}\"</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var2}</span> <span class=\"st0\">\"<span class=\"es1\">${_SWAP_TEMPORARY}</span>\"</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>swap<span class=\"sy0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>rotatef a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>psetq a b b a<span class=\"br0\">)</span></pre>"}, {"lang": "ColdFusion", "loc": 3, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> temp <span class=\"sy0\">=</span> a <span class=\"sy0\">/&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> a <span class=\"sy0\">=</span> b <span class=\"sy0\">/&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> b <span class=\"sy0\">=</span> temp <span class=\"sy0\">/&gt;</span></span></pre>"}, {"lang": "Crystal", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">a, b = b, a</pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">:</span> swap<span class=\"sy0\">;</span> <span class=\"co1\">// from Phobos standard library</span><br/>\u00a0<br/><span class=\"co1\">// The D solution uses templates and it's similar to the C++ one:</span><br/><span class=\"kw4\">void</span> mySwap<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T left<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> T right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> temp <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>    left <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>    right <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// The std.algorithm standard library module</span><br/>    <span class=\"co1\">// contains a generic swap:</span><br/>    swap<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Using mySwap:</span><br/>    mySwap<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 2, "block": "<pre class=\"text highlighted_source\">1 2 SaSbLaLb f<br/>=2 1</pre>"}, {"lang": "DCL", "loc": 12, "block": "<pre class=\"dcl highlighted_source\">$ a1 <span class=\"sy0\">=</span> <span class=\"nu0\">123</span><br/>$ a2 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>$ <span class=\"kw1\">show symbol</span> a*<br/>$ <span class=\"kw1\">gosub</span> swap<br/>$ <span class=\"kw1\">show symbol</span> a*<br/>$ <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> swap:</span><br/>$  t <span class=\"sy0\">=</span> a1<br/>$  a1 <span class=\"sy0\">=</span> a2<br/>$  a2 <span class=\"sy0\">=</span> t<br/>$ <span class=\"kw1\">return</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "Delphi", "loc": 10, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> Swap_T<span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> T<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  temp<span class=\"sy1\">:</span> T<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  temp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>  a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> temp<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> swap<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>left<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> t <span class=\"sy0\">:=</span> left<br/>  left <span class=\"sy0\">:=</span> right<br/>  right <span class=\"sy0\">:=</span> t<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; 1)</span><br/><span class=\"co1\">;; a macro will do it, as shown in Racket (same syntax)</span><br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>swap a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>tmp a<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> b tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define A <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define B <span class=\"st0\">\"simon\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>swap A B<span class=\"br0\">)</span><br/>A \u2192 <span class=\"st0\">\"simon\"</span><br/>B \u2192 <span class=\"nu0\">666</span><br/>\u00a0<br/><span class=\"co1\">;; 2) </span><br/><span class=\"co1\">;; The list-swap! function allows to swap two items inside a list, regardless of their types</span><br/><span class=\"co1\">;; This physically alters the list</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"kw1\">L</span> ' <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> \ud83c\udfa9 <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>list-swap<span class=\"sy0\">!</span> <span class=\"kw1\">L</span> <span class=\"nu0\">1</span> ' \ud83c\udfa9 <span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span>\ud83c\udfa9 <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>singleton swap<br/>{<br/>    eval ref:v1 ref:v2<br/>    [<br/>        var tmp\u00a0:= v1 value.<br/>\u00a0<br/>        v1 object\u00a0:= v2 value.<br/>        v2 object\u00a0:= tmp.<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var n\u00a0:= 2.<br/>    var s\u00a0:= \"abc\".<br/>\u00a0<br/>    console printLine(n,\" \",s).<br/>\u00a0<br/>    swap eval ref:n ref:s.<br/>\u00a0<br/>    console printLine(n,\" \",s).<br/>].</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = 4<br/>y = 5<br/>\u00a0<br/>{y,x} = {x,y}<br/>y # =&gt; 4<br/>x # =&gt; 5<br/>\u00a0<br/>[x,y] = [y,x]<br/>x # =&gt; 4<br/>y # =&gt; 5<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> swap <span class=\"br0\">(</span>a-sym b-sym<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Swap values of the variables given by A-SYM and B-SYM.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a-val <span class=\"br0\">(</span>symbol-<span class=\"kw1\">value</span> a-sym<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span> a-sym <span class=\"br0\">(</span>symbol-<span class=\"kw1\">value</span> b-sym<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span> b-sym a-val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>swap 'a 'b<span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span>a<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"br0\">[</span>a<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"nu0\">2</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>a<span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> swap <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b,a<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "Falcon", "loc": 5, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/>a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>b <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>a<span class=\"sy0\">,</span>b <span class=\"sy0\">=</span> arr <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span>a<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 43, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">MODULE</span> Genericswap<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw1\">INTERFACE</span> Swap<br/>    <span class=\"kw1\">MODULE</span> <span class=\"kw1\">PROCEDURE</span> Swapint, Swapreal, Swapstring<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">INTERFACE</span><br/>\u00a0<br/><span class=\"co1\">CONTAINS</span><br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Swapint<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span> <span class=\"kw3\">OUT</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>    <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>    temp <span class=\"sy0\">=</span> a\u00a0; a <span class=\"sy0\">=</span> b\u00a0; b <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Swapint<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Swapreal<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">REAL</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span> <span class=\"kw3\">OUT</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>    <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>    temp <span class=\"sy0\">=</span> a\u00a0; a <span class=\"sy0\">=</span> b\u00a0; b <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Swapreal<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Swapstring<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span> <span class=\"kw3\">OUT</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>    temp <span class=\"sy0\">=</span> a\u00a0; a <span class=\"sy0\">=</span> b\u00a0; b <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Swapstring<br/><span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> Genericswap<br/>\u00a0<br/><span class=\"kw1\">PROGRAM</span> EXAMPLE<br/>  <span class=\"kw3\">USE</span> Genericswap<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">r1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>, r2 <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span><br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s1</span><span class=\"sy0\">=</span><span class=\"st0\">\"abc\"</span>, s2<span class=\"sy0\">=</span><span class=\"st0\">\"xyz\"</span><br/>\u00a0<br/>  <span class=\"kw1\">CALL</span> Swap<span class=\"br0\">(</span>i1, i2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">CALL</span> Swap<span class=\"br0\">(</span>r1, r2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">CALL</span> Swap<span class=\"br0\">(</span>s1, s2<span class=\"br0\">)</span><br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i1, i2   <span class=\"co1\">! Prints 2 and 1</span><br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> r1, r2   <span class=\"co1\">! Prints 2.0 and 1.0</span><br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> s1, s2   <span class=\"co1\">! Prints xyz and abc</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> EXAMPLE</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "FreeBASIC", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0</span><br/><span class=\"co2\">#Macro Declare_Swap(T)</span><br/><span class=\"kw1\">Sub</span> Swap_<span class=\"co2\">##T(ByRef t1 As T, ByRef t2 As T)</span><br/>  <span class=\"kw1\">Dim</span> temp <span class=\"kw1\">As</span> T = t2<br/>  t2 = t1<br/>  t1 = temp<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/><span class=\"co2\">#EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j<br/>i = <span class=\"nu0\">1</span>\u00a0: j = <span class=\"nu0\">2</span><br/>\u00a0<br/>Declare_Swap<span class=\"br0\">(</span><span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"co1\">' expands the macro</span><br/>Swap_Integer<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> i, j<br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> s, t<br/>s = <span class=\"st0\">\"Hello\"</span>\u00a0: t = <span class=\"st0\">\"World\"</span><br/>\u00a0<br/>Declare_Swap<span class=\"br0\">(</span><span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>Swap_String<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> s, t<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Free Pascal", "loc": 19, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co2\">{$ifdef fpc}{$mode delphi}{$H+}{$endif}</span><br/><span class=\"coMULTI\">{ note this is compiled with delphi mode but will only compile in Free Pascal }</span><br/><span class=\"coMULTI\">{ Delphi doesn't support this syntax                                          }</span><br/><span class=\"kw1\">procedure</span> swap&lt;T&gt;<span class=\"br0\">(</span><span class=\"kw1\">var</span> left<span class=\"sy1\">,</span>right<span class=\"sy1\">:</span>T<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  temp<span class=\"sy1\">:</span>T<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  temp<span class=\"sy1\">:</span><span class=\"sy3\">=</span>left<span class=\"sy1\">;</span><br/>  left<span class=\"sy1\">:</span><span class=\"sy3\">=</span>right<span class=\"sy1\">;</span><br/>  right<span class=\"sy1\">:</span><span class=\"sy3\">=</span>temp<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  a<span class=\"sy1\">:</span><span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">'Test'</span><span class=\"sy1\">;</span><br/>  b<span class=\"sy1\">:</span><span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">'me'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>a<span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span>b<span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  swap&lt;string&gt;<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>a<span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span>b<span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[b,a] = [a,b]<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as long   i, j<br/>dim as double x, y<br/>dim as Str15  a, b<br/>\u00a0<br/>i = 1059\u00a0: j = 62<br/>print i, j<br/>swap i, j<br/>print i, j<br/>print<br/>\u00a0<br/>x = 1.23\u00a0: y = 4.56<br/>print x, y<br/>swap x, y<br/>print x, y<br/>print<br/>\u00a0<br/>a = \"Hello\"\u00a0: b = \"World!\"<br/>print a, b<br/>swap a, b<br/>print a, b<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 9, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> vA <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/variant\"><span class=\"kw4\">Variant</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" World\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=vb+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">vB</span></a> <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/variant\"><span class=\"kw4\">Variant</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/swap\"><span class=\"kw1\">Swap</span></a> vA, <a href=\"http://www.google.com/search?hl=en&amp;q=vb+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">vB</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> vA; <a href=\"http://www.google.com/search?hl=en&amp;q=vb+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">vB</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Gecho", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>1\u00a0!0 2\u00a0!1<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\">a<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> b<span class=\"sy1\">,</span> a</pre>"}, {"lang": "Gri", "loc": 15, "block": "<pre class=\"text highlighted_source\">`Swap Vars &amp;.a. &amp;.b.'<br/>{<br/>    new .temp.<br/>    .temp. = \\.word2.<br/>    \\.word2. = \\.word3.<br/>    \\.word3. = .temp.<br/>    delete .temp.<br/>}<br/>\u00a0<br/>.foo. = 123<br/>.bar. = 456<br/>Swap Vars &amp;.foo. &amp;.bar.<br/>\u00a0<br/>show .foo. \" \" .bar.<br/># prints \"456 123\"</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>b, a<span class=\"br0\">]</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\">swap <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>swap <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>   y <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><br/>   x <span class=\"sy1\">:=:</span> y<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>   <span class=\"co1\"># swap that will reverse if surrounding expression fails</span><br/>   <span class=\"kw1\">if</span> x <span class=\"sy1\">&lt;-&gt;</span> y <span class=\"sy1\">&amp;</span> x <span class=\"sy1\">&lt;</span> y <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> y<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 5, "block": "<pre class=\"idl highlighted_source\">pro swap, a, b<br/>  c <span class=\"sy0\">=</span> temporary<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  a <span class=\"sy0\">=</span> temporary<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  b <span class=\"sy0\">=</span> temporary<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>end</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"sy0\">)</span> C. <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">11</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span><br/>   <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span>&amp;C.&amp;.;:<span class=\"st_h\">'Roses are red. Violets are blue.'</span><br/>Violets are red. Roses are blue.</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> Pair<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    T first<span class=\"sy0\">;</span><br/>    T second<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span>Pair<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   T temp <span class=\"sy0\">=</span> p.<span class=\"me1\">first</span><span class=\"sy0\">;</span><br/>   p.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>   p.<span class=\"me1\">second</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> swap<span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> tmp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">jq -n '1 as $a | 2 as $b | $a as $tmp | $b as $a | $tmp as $b | [$a,$b]'</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">a, b = b, a</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> swap<span class=\"br0\">(</span>t1<span class=\"sy0\">:</span> T, t2<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>t2, t1<span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> swap<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"co1\">// infers that swap&lt;Int&gt; be used</span><br/>    a <span class=\"sy0\">=</span> c.<span class=\"me1\">first</span><br/>    b <span class=\"sy0\">=</span> c.<span class=\"me1\">second</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"a = $a\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"b = $b\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> e <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> swap<span class=\"br0\">(</span>d, e<span class=\"br0\">)</span> <span class=\"co1\">// infers that swap&lt;Boolean&gt; be used</span><br/>    d <span class=\"sy0\">=</span> f.<span class=\"me1\">first</span><br/>    e <span class=\"sy0\">=</span> f.<span class=\"me1\">second</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"d = $d\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"e = $e\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">swap        # stack<br/>reverse     # array</pre>"}, {"lang": "Lasso", "loc": 8, "block": "<pre class=\"text highlighted_source\">define swap(a, b) =&gt; (: #b, #a)<br/>\u00a0<br/>local(a) = 'foo'<br/>local(b) = 42<br/>\u00a0<br/>local(a,b) = swap(#a, #b)<br/>stdoutnl(#a)<br/>stdoutnl(#b)</pre>"}, {"lang": "Lisaac", "loc": 1, "block": "<pre class=\"text highlighted_source\">(a, b)\u00a0:= (b, a);</pre>"}, {"lang": "LiveCode", "loc": 10, "block": "<pre class=\"text highlighted_source\">put \"first\" into a1<br/>put \"last\" into b2<br/>swap a1,b2<br/>put a1 &amp;&amp; b2<br/>\u00a0<br/>command swap @p1, @p2<br/>    put p2 into p3<br/>    put p1 into p2<br/>    put p3 into p1<br/>end swap</pre>"}, {"lang": "Logo", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>to swap\u00a0:s1\u00a0:s2<br/>  localmake \"t thing\u00a0:s1<br/>  make\u00a0:s1 thing\u00a0:s2<br/>  make\u00a0:s2\u00a0:t<br/>end<br/>\u00a0<br/>make \"a 4<br/>make \"b \"dog<br/>swap \"a \"b       \u00a0; pass the names of the variables to swap<br/>show list\u00a0:a\u00a0:b \u00a0; [dog 4]<br/>\u00a0</pre>"}, {"lang": "Lhogho", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>to swap\u00a0:s1\u00a0:s2<br/>  local \"t<br/>  make \"t thing\u00a0:s1<br/>  make\u00a0:s1 thing\u00a0:s2<br/>  make\u00a0:s2\u00a0:t<br/>end<br/>\u00a0<br/>make \"a 4<br/>make \"b \"dog<br/>swap \"a \"b       \u00a0; pass the names of the variables to swap<br/>show list\u00a0:a\u00a0:b \u00a0; [dog 4]<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">on swap (x, y)<br/>  return \"tmp=\"&amp;x&amp;RETURN&amp;x&amp;\"=\"&amp;y&amp;RETURN&amp;y&amp;\"=tmp\"<br/>end</pre>"}, {"lang": "Logtalk", "loc": 6, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(paws).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(swap<span class=\"sy1\">/</span><span class=\"nu0\">4</span>).<br/>    swap(<span class=\"re0\">First</span>, <span class=\"re0\">Second</span>, <span class=\"re0\">Second</span>, <span class=\"re0\">First</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "LOLCODE", "loc": 11, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> foo <span class=\"kw1\">ITZ</span> <span class=\"st0\">\"kittehz\"</span><br/><span class=\"kw1\">I HAS A</span> bar <span class=\"kw1\">ITZ</span> <span class=\"nu0\">42</span><br/>\u00a0<br/>foo<span class=\"sy0\">,</span> foo <span class=\"kw1\">R</span> bar<span class=\"sy0\">,</span> bar <span class=\"kw1\">R</span> IT<br/>\u00a0<br/><span class=\"kw1\">VISIBLE</span> foo <span class=\"co1\">BTW, 42</span><br/><span class=\"kw1\">VISIBLE</span> bar <span class=\"co1\">BTW, kittehz</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> y<span class=\"sy0\">,</span> x                <span class=\"co1\">-- swap the values inside x and y</span><br/>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>    <span class=\"co1\">-- swap the first and second values inside table t</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ pgramming again Swap (for local use)<br/>Module Swap (&amp;a, &amp;b) {<br/>      \\\\ this call internal command - by default is by reference without using character &amp;<br/>      Swap a, b<br/>}<br/>X=20<br/>Y=100<br/>Swap &amp;x, &amp;y<br/>Print X, Y, Type$(X)=\"Double\",Type$(Y)=\"Double\"<br/>A$=\"A$\"<br/>B$=\"B$\"<br/>Swap &amp;A$, &amp;B$<br/>Print A$=\"B$\", B$=\"A$\"<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 8, "block": "<pre class=\"text highlighted_source\">define(`def2', `define(`$1',`$2')define(`$3',`$4')')dnl<br/>define(`swap', `def2(`$1',defn(`$2'),`$2',defn(`$1'))')dnl<br/>dnl<br/>define(`a',`x')dnl<br/>define(`b',`y')dnl<br/>a b<br/>swap(`a',`b')<br/>a b</pre>"}, {"lang": "Maple", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; a, b\u00a0:= 2, \"foo\":<br/>&gt; a;<br/>                                   2<br/>\u00a0<br/>&gt; b;<br/>                                 \"foo\"<br/>\u00a0<br/>&gt; a, b\u00a0:= b, a: # SWAP<br/>&gt; a;           <br/>                                 \"foo\"<br/>\u00a0<br/>&gt; b;           <br/>                                   2<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">swap[a_, b_]\u00a0:= {a, b} = {b, a}<br/>SetAttributes[swap, HoldAll]</pre>"}, {"lang": "MATLAB / Octave", "loc": 17, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; a = <span class=\"br0\">[</span><span class=\"nu0\">30</span> <span class=\"nu0\">40</span> <span class=\"nu0\">50</span> <span class=\"nu0\">60</span> <span class=\"nu0\">70</span><span class=\"br0\">]</span><br/>\u00a0<br/>a =<br/>\u00a0<br/>    <span class=\"nu0\">30</span>    <span class=\"nu0\">40</span>    <span class=\"nu0\">50</span>    <span class=\"nu0\">60</span>    <span class=\"nu0\">70</span><br/>\u00a0<br/>&gt;&gt; a<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> = a<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">%Single swap</span><br/>\u00a0<br/>a =<br/>\u00a0<br/>    <span class=\"nu0\">50</span>    <span class=\"nu0\">40</span>    <span class=\"nu0\">30</span>    <span class=\"nu0\">60</span>    <span class=\"nu0\">70</span><br/>\u00a0<br/>&gt;&gt; a<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> = a<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">%Multiple swap, a.k.a permutation.</span><br/>\u00a0<br/>a =<br/>\u00a0<br/>    <span class=\"nu0\">40</span>    <span class=\"nu0\">30</span>    <span class=\"nu0\">60</span>    <span class=\"nu0\">50</span>    <span class=\"nu0\">70</span></pre>"}, {"lang": "Maxima", "loc": 16, "block": "<pre class=\"text highlighted_source\">a: 10$<br/>b: 20$<br/>\u00a0<br/>/* A simple way to swap values */<br/>[a, b]: [b, a]$<br/>\u00a0<br/>a; /* 20 */<br/>b; /* 10 */<br/>\u00a0<br/>/* A macro to hide this */<br/>swap(x, y)\u00a0::= buildq([x, y], ([x, y]: [y, x], 'done))$<br/>\u00a0<br/>swap(a, b)$<br/>\u00a0<br/>a; /* 10 */<br/>b; /* 20 */</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap a b</pre>"}, {"lang": "Metafont", "loc": 12, "block": "<pre class=\"text highlighted_source\">vardef swap(suffix a, b) =<br/>  save\u00a0?; string s_;<br/>  if boolean a: boolean\u00a0?<br/>    elseif numeric a: numeric\u00a0?\u00a0% this one could be omitted<br/>    elseif pair a: pair\u00a0?<br/>    elseif path a: path\u00a0?<br/>    elseif pen a: pen\u00a0?<br/>    elseif picture a: picture\u00a0?<br/>    elseif string a: string\u00a0?<br/>    elseif transform a: transform\u00a0? fi;<br/> \u00a0?\u00a0:= a; a\u00a0:= b; b\u00a0:=\u00a0?<br/>enddef;</pre>"}, {"lang": "Modula-3", "loc": 5, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">GENERIC</span> <span class=\"kw1\">INTERFACE</span> GenericSwap<span class=\"br0\">(</span>Elem<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Swap<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> left<span class=\"sy0\">:</span> Elem.<span class=\"me1\">T</span>; <span class=\"kw1\">VAR</span> right<span class=\"sy0\">:</span> Elem.<span class=\"me1\">T</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">END</span> GenericSwap.</pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">def coords    = (1, -1);<br/>def invcoords = Swap(coords);</pre>"}, {"lang": "NetRexx", "loc": 22, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>  <span class=\"co1\">-- Simple values with no spaces can be swapped without the use of a parse template</span><br/>  lval = <span class=\"nu0\">27</span><br/>  rval = <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Before - &lt;lval&gt;'</span>lval<span class=\"st0\">'&lt;/lval&gt; &lt;rval&gt;'</span>rval<span class=\"st0\">'&lt;/rval&gt;'</span><br/>  <span class=\"kw1\">parse</span> <span class=\"br0\">(</span>lval rval<span class=\"br0\">)</span> rval lval<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'After  - &lt;lval&gt;'</span>lval<span class=\"st0\">'&lt;/lval&gt; &lt;rval&gt;'</span>rval<span class=\"st0\">'&lt;/rval&gt;'</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"co1\">-- More complex data needs to use some form of parsing template</span><br/>  lval = <span class=\"st0\">'This value started on the left'</span><br/>  rval = <span class=\"st0\">'This value started on the right'</span><br/>  dlm  = 12x80facebead01 <span class=\"co1\">-- some delimiting value that is unlikely to occur in the LVAL to be swapped</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Before - &lt;lval&gt;'</span>lval<span class=\"st0\">'&lt;/lval&gt; &lt;rval&gt;'</span>rval<span class=\"st0\">'&lt;/rval&gt;'</span><br/>  <span class=\"kw1\">parse</span> <span class=\"br0\">(</span>lval <span class=\"sy0\">||</span> dlm <span class=\"sy0\">||</span> rval<span class=\"br0\">)</span> rval <span class=\"br0\">(</span>dlm<span class=\"br0\">)</span> lval<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'After  - &lt;lval&gt;'</span>lval<span class=\"st0\">'&lt;/lval&gt; &lt;rval&gt;'</span>rval<span class=\"st0\">'&lt;/rval&gt;'</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">|reverse 1 2<br/>=2 1</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#swap\"><span class=\"kw1\">swap</span></a> a b<span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap(a, b)</pre>"}, {"lang": "OASYS Assembler", "loc": 1, "block": "<pre class=\"text highlighted_source\">%A#%B#&lt;%B#%A#&lt;&gt;&gt;</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> swap <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y, x<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "Oz", "loc": 6, "block": "<pre class=\"oz highlighted_source\">  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">SwapCells</span> A B<span class=\"br0\">}</span><br/>     Tmp = <span class=\"sy0\">@</span>A<br/>  <span class=\"kw1\">in</span><br/>     A <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>B<br/>     B <span class=\"sy0\">:=</span> Tmp<br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">my<span class=\"br0\">(</span>tmp<span class=\"sy0\">=</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>a<span class=\"sy0\">=</span>b<span class=\"sy0\">;</span><br/>b<span class=\"sy0\">=</span>tmp<span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 28, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> generictest<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$mode objfpc}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  generic TSwap&lt;T&gt; <span class=\"sy3\">=</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> T<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Proc1<span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    temp<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    temp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>    a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>    b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> temp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  S<span class=\"sy1\">,</span> T<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  SwapInt<span class=\"sy1\">:</span> specialize TSwap&lt;integer&gt;<span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  S <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span><br/>  T <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  SwapInt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>Proc1<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>S<span class=\"sy1\">,</span> T<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  SwapInt<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> T<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>S<span class=\"sy1\">,</span> T<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">reverse</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">{a,b} = {b,a}</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> swap<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(let (A 1  B 2)<br/>   (xchg 'A 'B)<br/>   (println A B) )<br/>\u00a0<br/>(let (Lst1 '(a b c)  Lst2 '(d e f))<br/>   (xchg (cdr Lst1) (cdr Lst2))<br/>   (println Lst1 Lst2) )</pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/>%swap<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">character</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"st0\">'t='</span> <span class=\"sy0\">||</span> a <span class=\"sy0\">||</span> <span class=\"st0\">';'</span> <span class=\"sy0\">||</span> a <span class=\"sy0\">||</span> <span class=\"st0\">'='</span> <span class=\"sy0\">||</span> b <span class=\"sy0\">||</span> <span class=\"st0\">';'</span> <span class=\"sy0\">||</span> b <span class=\"st0\">'=t;'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>%<span class=\"kw1\">end</span> swap<span class=\"sy0\">;</span><br/>%activate swap<span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre class=\"text highlighted_source\">(a, b) -&gt; (b, a);</pre>"}, {"lang": "PostScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">exch</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> $b</pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>swap<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">?-</span> swap<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>X <span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>Y <span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Swap</span> a, b</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\">a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> a</pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">swap &lt;- function(name1, name2, envir = parent.env(environment()))<br/>{<br/>    temp &lt;- get(name1, pos = envir)<br/>    assign(name1, get(name2, pos = envir), pos = envir)<br/>    assign(name2, temp, pos = envir)<br/>}</pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/load<br/>\u00a0<br/>(module swap racket<br/>  (provide swap)<br/>\u00a0<br/> \u00a0;; a simple macro to swap two variables<br/>  (define-syntax-rule (swap a b)<br/>    (let ([tmp a])<br/>      (set! a b)<br/>      (set! b tmp))))<br/>\u00a0<br/>;; works fine in a statically typed setting<br/>(module typed typed/racket<br/>  (require 'swap)<br/>\u00a0<br/>  (: x Integer)<br/>  (define x 3)<br/>\u00a0<br/>  (: y Integer)<br/>  (define y 4)<br/>\u00a0<br/>  (swap x y)<br/>  (printf \"x is ~a~n\" x)<br/>  (printf \"y is ~a~n\" y))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 18, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Generic Swap\"<br/>\tURL: http://rosettacode.org/wiki/Generic_swap<br/>\tReference: [http://reboltutorial.com/blog/rebol-words/]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>swap: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Swap contents of variables.\"</span><br/>\ta <span class=\"br0\">[</span>word<span class=\"sy0\">!</span><span class=\"br0\">]</span> b <span class=\"br0\">[</span>word<span class=\"sy0\">!</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span>local x<br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\tx: <span class=\"kw3\">get</span> a  <br/>\t<span class=\"kw3\">set</span> a <span class=\"kw3\">get</span> b  <br/>\t<span class=\"kw3\">set</span> b x<br/><span class=\"br0\">]</span><br/>\u00a0<br/>answer: <span class=\"nu0\">42</span>  ship: <span class=\"st0\">\"Heart of Gold\"</span><br/>swap 'answer 'ship <span class=\"co1\">; Note quoted variables.</span><br/><span class=\"kw3\">print</span> <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span><span class=\"st0\">\"The answer is \"</span> answer <span class=\"st0\">\", the ship is \"</span> ship <span class=\"st0\">\".\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\">a = <span class=\"st0\">'I see you.'</span><br/>b = -<span class=\"nu0\">6</span><br/>\u00a0<br/>_temp_ = a                           <span class=\"coMULTI\">/*swap \u00b7\u00b7\u00b7     */</span>   <br/>     a = b                           <span class=\"coMULTI\">/*     A \u00b7\u00b7\u00b7   */</span><br/>     b = _temp_                      <span class=\"coMULTI\">/*  and  B     */</span> </pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = 1<br/>b = 2<br/>temp = a<br/>a = b<br/>b = temp<br/>see \"a = \" + a + nl<br/>see \"b = \" + b + nl<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>swap = function(x,y)<br/>{<br/>  if (!exist($$.[x]))<br/>  { return 0; }<br/>  if (!exist($$.[y]))<br/>  { return 0; }<br/>  local (t);<br/>  t = $$.[x];<br/>  $$.[x] = $$.[y];<br/>  $$.[y] = t;<br/>  return 1;<br/>};<br/>\u00a0<br/>&gt;&gt;  a=1<br/>1<br/>&gt;&gt;  b = \"fish\"<br/>fish<br/>&gt;&gt; swap( \"a\" , \"b\" );<br/>&gt;&gt;  a<br/>fish<br/>&gt;&gt;  b<br/>1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">a, b = b, a</pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">a = 1<br/>b = 2<br/>'----- swap ----<br/>tmp = a<br/>a   = b<br/>b  = tmp<br/>end</pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let mut a=\"Anna\".to_owned();<br/>    let mut b=\"Bob\".to_owned();<br/>    std::mem::swap(&amp;mut a, &amp;mut b);<br/>    println!(\"a={},b={}\",a,b);<br/>}</pre>"}, {"lang": "Sather", "loc": 7, "block": "<pre class=\"text highlighted_source\">class SWAP{T} is<br/>  swap(inout a, inout b:T) is<br/>    t\u00a0::= a;<br/>    a\u00a0:= b;<br/>    b\u00a0:= t;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> swap<span class=\"br0\">[</span>A,B<span class=\"br0\">]</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span> A, b<span class=\"sy0\">:</span> B<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>B, A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b, a<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 39, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; swap elements of a vector</span><br/><span class=\"co1\">; vector-swap! is not part of r5rs, so we define it</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>swap<span class=\"sy0\">!</span> v i j<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> v i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> v j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> v i b<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> v j a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>vec <span class=\"br0\">(</span><span class=\"kw1\">vector</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>swap<span class=\"sy0\">!</span> vec <span class=\"nu0\">0</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  vec<span class=\"br0\">)</span><br/><span class=\"co1\">; #(5 2 3 4 1)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; we can swap also in lists</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>swap<span class=\"sy0\">!</span> v i j<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">list-tail</span> v i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>y <span class=\"br0\">(</span><span class=\"kw1\">list-tail</span> v j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">car</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>set<span class=\"sy0\">-</span><span class=\"kw1\">car</span><span class=\"sy0\">!</span> x b<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>set<span class=\"sy0\">-</span><span class=\"kw1\">car</span><span class=\"sy0\">!</span> y a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lis <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>swap<span class=\"sy0\">!</span> lis <span class=\"nu0\">0</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   lis<span class=\"br0\">)</span><br/><span class=\"co1\">; (5 2 3 4 1)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; using macros (will work on variables, not on vectors or lists)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define-syntax</span> swap<span class=\"sy0\">!</span><br/><span class=\"br0\">(</span><span class=\"kw1\">syntax-rules</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span>_ a b<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tmp a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">set!</span> a b<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">set!</span> b tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; try it</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; (2 1)</span></pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">const proc: generate_swap (in type: aType) is func<br/>  begin<br/>\u00a0<br/>    const proc: swap (inout aType: left, inout aType: right) is func<br/>      local<br/>        var aType: temp is aType.value;<br/>      begin<br/>        temp\u00a0:= left;<br/>        left\u00a0:= right;<br/>        right\u00a0:= temp;<br/>      end func;<br/>\u00a0<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func swap<span class=\"br0\">(</span>Ref a, Ref b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var tmp = <span class=\"sy0\">*</span>a;<br/>    <span class=\"sy0\">*</span>a = <span class=\"sy0\">*</span>b;<br/>    <span class=\"sy0\">*</span>b = tmp;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 10, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"4f370f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Syntax LoadVariable traits) swapWith: <a class=\"__cf_email__\" data-cfemail=\"740d34\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Syntax LoadVariable traits) &amp;environment: env<br/>\"A macro that expands into simple code swapping the values of two variables<br/>in the current scope.\"<br/>[<br/>  env ifNil: [error: 'Cannot swap variables outside of a method'].<br/>  tmpVar\u00a0::= env addVariable.<br/>  {tmpVar store: x variable load.<br/>   x variable store: y variable load.<br/>   y variable store: tmpVar load} parenthesize<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 8, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">OrderedCollection</span> extend <span class=\"br0\">[</span><br/>    <span class=\"re5\">swap</span>: <span class=\"re5\">a</span> and: <span class=\"re5\">b</span> <span class=\"br0\">[</span><br/>\t|<span class=\"re3\">t</span>|<br/>\t<span class=\"re6\">t</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> at: <span class=\"re5\">a</span>.<br/>\t<span class=\"kw1\">self</span> at: <span class=\"re5\">a</span> put: <span class=\"br0\">(</span><span class=\"kw1\">self</span> at: <span class=\"re5\">b</span><span class=\"br0\">)</span>.<br/>\t<span class=\"kw1\">self</span> at: <span class=\"re5\">b</span> put: <span class=\"re5\">t</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 9, "block": "<pre class=\"text highlighted_source\">* SWAP(.V1, .V2) - Exchange the contents of two variables.<br/>*  The variables must be prefixed with the name operator<br/>*  when the function is called.<br/>\u00a0<br/>        DEFINE('SWAP(X,Y)TEMP')             \u00a0:(SWAP_END)<br/>SWAP    TEMP = $X<br/>        $X = $Y<br/>        $Y = TEMP                           \u00a0:(RETURN)<br/>SWAP_END</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">fun swap (x, y) = (y, x)</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">mata<br/>a=1,2,3<br/>b=\"ars longa vita brevis\"<br/>swap(a, b)<br/>end</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func swap&lt;T&gt;(inout a: T, inout b: T) {<br/>  (a, b) = (b, a)<br/>}</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> swap <span class=\"br0\">{</span>aName bName<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$aName</span> a <span class=\"re0\">$bName</span> b<br/>    lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> b a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "ThinBASIC", "loc": 1, "block": "<pre class=\"thinbasic highlighted_source\"><span class=\"kw1\">Swap</span> Var1, Var2</pre>"}, {"lang": "TI-89 BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">Define swap(swapvar1, swapvar2) = Prgm<br/>  Local swaptmp<br/>  #swapvar1 \u2192 swaptmp<br/>  #swapvar2 \u2192 #swapvar1<br/>  swaptmp \u2192 #swapvar2<br/>EndPrgm<br/>\u00a0<br/>1 \u2192 x<br/>2 \u2192 y<br/>swap(\"x\", \"y\")<br/>x<br/>    2<br/>y<br/>    1</pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">swap</pre>"}, {"lang": "TXR", "loc": 5, "block": "<pre class=\"text highlighted_source\">(defmacro swp (left right)<br/>  (with-gensyms (tmp)<br/>    ^(let ((,tmp ,left))<br/>       (set ,left ,right<br/>            ,right ,tmp))))</pre>"}, {"lang": "uBasic/4tH", "loc": 4, "block": "<pre class=\"text highlighted_source\">a = 5\u00a0: b = 7<br/>Print a,b<br/>Push a,b\u00a0: a = Pop()\u00a0: b = Pop()<br/>Print a,b</pre>"}, {"lang": "UNIX Shell", "loc": 10, "block": "<pre class=\"bash highlighted_source\">$ swap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">typeset</span> <span class=\"re5\">-n</span> <span class=\"re2\">var1</span>=<span class=\"re4\">$1</span> <span class=\"re2\">var2</span>=<span class=\"re4\">$2</span>; <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es2\">$var1</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$var2</span>\"</span>; <span class=\"re2\">var1</span>=<span class=\"re4\">$2</span>; <span class=\"re2\">var2</span>=<span class=\"re4\">$1</span>; <span class=\"br0\">}</span><br/>$ <span class=\"re2\">a</span>=<span class=\"nu0\">1</span> <span class=\"re2\">b</span>=<span class=\"nu0\">2</span>                                                                         <br/>$ <span class=\"kw3\">echo</span> <span class=\"re1\">$a</span> <span class=\"re1\">$b</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/>$ swap a b                                                                        <br/>$ <span class=\"kw3\">echo</span> <span class=\"re1\">$a</span> <span class=\"re1\">$b</span>                                                                      <br/><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/>$ swap a b  <br/>$ <span class=\"kw3\">echo</span> <span class=\"re1\">$a</span> <span class=\"re1\">$b</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">pmgs(\"x\",\"y\") = (\"y\",\"x\")    # the pattern matching way<br/>\u00a0<br/>ugs = ~&amp;rlX                  # the idiosyncratic Ursala way<br/>\u00a0<br/>#cast\u00a0%sWL<br/>\u00a0<br/>test = &lt;pmgs ('a','b'),ugs ('x','y')&gt;</pre>"}, {"lang": "V", "loc": 5, "block": "<pre class=\"text highlighted_source\">[swap [a b\u00a0: b a] view].<br/>\u00a0<br/>1 2 swap<br/>= 2 1<br/>'hello' 'hi' swap</pre>"}, {"lang": "VBScript", "loc": 6, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">sub</span> swap( <span class=\"kw4\">byref</span> x, <span class=\"kw4\">byref</span> y )<br/>\t<span class=\"kw4\">dim</span> temp<br/>\ttemp = x<br/>\tx = y<br/>\ty = temp<br/><span class=\"kw3\">end</span> <span class=\"kw2\">sub</span></pre>"}, {"lang": "Verbexx", "loc": 19, "block": "<pre class=\"text highlighted_source\">// user-defined swap verb -- parms are passed by alias, not value, so they can be updated:<br/>\u00a0<br/>'&lt;==&gt; [_a] @FN [_b] { _a _b = _b _a } by_alias:\u00a0; <br/>\u00a0<br/>\u00a0<br/>// test out swap verb<br/>\u00a0<br/>@VAR a = 12345;<br/>@VAR b = \"*****\";<br/>\u00a0<br/>@SAY \"a=\" a \"   b=\" b;<br/>\u00a0<br/>\\b &lt;==&gt; \\a;                    // \"\\\" verb prevents evaluation of a and b here, <br/>                               // so they can be passed by alias to &lt;==&gt;    <br/>@SAY \"a=\" a \"   b=\" b;<br/>\u00a0<br/>a b = b a;                     // swap them back, just using the usual  =  verb<br/>\u00a0<br/>@SAY \"a=\" a \"   b=\" b;</pre>"}, {"lang": "Visual Basic", "loc": 1, "block": "<pre>Since Visual FoxPro is not strongly typed, this will work with any data types.\n</pre>"}, {"lang": "Visual FoxPro", "loc": 1, "block": "<pre>Since Visual FoxPro is not strongly typed, this will work with any data types.\n</pre>"}, {"lang": "Wart", "loc": 1, "block": "<pre class=\"text highlighted_source\">(swap! x y)</pre>"}, {"lang": "XPL0", "loc": 14, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc Exch(A, B, S);<br/>char A, B, S;<br/>int  I, T;<br/>for I:= 0 to S-1 do<br/>        [T:= A(I);  A(I):= B(I);  B(I):= T];<br/>\u00a0<br/>\u00a0<br/>real X, Y;<br/>[X:= 3.0;  Y:= 4.0;<br/>Exch(addr X, addr Y, 8);<br/>RlOut(0, X);  RlOut(0, Y);  CrLf(0);<br/>]</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre>&gt; a = 1\n&gt; b = \"foo\"\n&gt; swap, a, b\n&gt; a\n\"foo\"\n&gt; b\n1</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">class C{var v; fcn init(n){v=n}}<br/>var c1=C(1), c2=C(2);<br/>println(c1.v,\"\u00a0: \",c2.v);<br/>fcn swap(ca,cb,name){<br/>   tmp:=ca.resove(name); <br/>   ca.setVar(name,cb.resolve(name)); cb.setVar(name,tmp)<br/>}<br/>swap(c1,c2,\"v\");<br/>println(c1.v,\"\u00a0: \",c2.v);</pre>"}]}