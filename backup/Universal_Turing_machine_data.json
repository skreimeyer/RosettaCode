{"task": "Universal_Turing_machine", "blocks": [{"lang": "Ada", "loc": 54, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">private</span> <span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span>;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> State <span class=\"kw1\">is</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;   <span class=\"co1\">-- State'First is starting state</span><br/>   <span class=\"kw3\">type</span> Symbol <span class=\"kw1\">is</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;  <span class=\"co1\">-- Symbol'First is blank</span><br/><span class=\"kw3\">package</span> Turing <span class=\"kw1\">is</span><br/>\u00a0<br/>   Start: <span class=\"kw3\">constant</span> State\u00a0:= State'First;<br/>   Halt:  <span class=\"kw3\">constant</span> State\u00a0:= State'Last;<br/>   <span class=\"kw3\">subtype</span> Action_State <span class=\"kw1\">is</span> State <span class=\"kw3\">range</span> Start .. <span class=\"me1\">State</span>'Pred<span class=\"br0\">(</span>Halt<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Blank: <span class=\"kw3\">constant</span> Symbol\u00a0:= Symbol'First;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Movement <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Left, Stay, Right<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Action <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      New_State: State;<br/>      Move_To: Movement;<br/>      New_Symbol: Symbol;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Rules_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Action_State, Symbol<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Action;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Tape_Type <span class=\"kw1\">is</span> <span class=\"kw3\">limited</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Symbol_Map <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Symbol<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> To_String<span class=\"br0\">(</span>Tape: Tape_Type; Map: Symbol_Map<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>   <span class=\"kw3\">function</span> Position_To_String<span class=\"br0\">(</span>Tape: Tape_Type; Marker: Character\u00a0:= '^'<span class=\"br0\">)</span><br/>                              <span class=\"kw1\">return</span> String;<br/>   <span class=\"kw3\">function</span> To_Tape<span class=\"br0\">(</span>Str: String; Map: Symbol_Map<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Tape_Type;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Single_Step<span class=\"br0\">(</span>Current: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> State;<br/>                         Tape: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Tape_Type;<br/>                         Rules: Rules_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Run<span class=\"br0\">(</span>The_Tape: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Tape_Type;<br/>                 Rules: Rules_Type;<br/>                 Max_Steps: Natural\u00a0:= Natural'Last;<br/>                 Print: <span class=\"kw3\">access</span> <span class=\"kw3\">procedure</span><span class=\"br0\">(</span>Tape: Tape_Type; Current: State<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- runs from Start State until either Halt or # Steps exceeds Max_Steps</span><br/>   <span class=\"co1\">-- if # of steps exceeds Max_Steps, Constrained_Error is raised;</span><br/>   <span class=\"co1\">-- if Print is not null, Print is called at the beginning of each step</span><br/>\u00a0<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">package</span> Symbol_Lists <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span><span class=\"br0\">(</span>Symbol<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">subtype</span> List <span class=\"kw1\">is</span> Symbol_Lists.<span class=\"me1\">List</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Tape_Type <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Left:  List;<br/>      Here:  Symbol;<br/>      Right: List;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> Turing;</pre>"}, {"lang": "AutoHotkey", "loc": 174, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; By Uberi, http://www.autohotkey.com/board/topic/58599-turing-machine/</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/OnExit.htm\"><span class=\"kw3\">OnExit</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a><br/>SaveFilePath <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptFullPath\"><span class=\"kw2\">A_ScriptFullPath</span></a> <span class=\"st0\">\".ini\"</span><br/><span class=\"co1\">; Defaults are for a 2-state_3-symbol turning machine. Format:</span><br/><span class=\"co1\">; machine state symbol on tape, symbol on tape | tape shift (- is left, + is right, 0 is halt) | machine state</span><br/><span class=\"sy0\">,</span> Rule1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"A0,1|1|B\"</span><br/><span class=\"sy0\">,</span> Rule2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"A1,2|-1|A\"</span><br/><span class=\"sy0\">,</span> Rule3 <span class=\"sy0\">:=</span> <span class=\"st0\">\"A2,1|-1|A\"</span><br/><span class=\"sy0\">,</span> Rule4 <span class=\"sy0\">:=</span> <span class=\"st0\">\"B0,2|-1|A\"</span><br/><span class=\"sy0\">,</span> Rule5 <span class=\"sy0\">:=</span> <span class=\"st0\">\"B1,2|1|B\"</span><br/><span class=\"sy0\">,</span> Rule6 <span class=\"sy0\">:=</span> <span class=\"st0\">\"B2,0|1|A\"</span><br/><span class=\"co1\">; no error check is run on this input, so be sure states and symbols align with actions</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> UseSaveFile<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> Global<span class=\"sy0\">,</span> UseSaveFile<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"co1\">; on exit, save state to text file so I can resume on next run</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> MaxIterations<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> Global<span class=\"sy0\">,</span> MaxIterations<span class=\"sy0\">,</span> <span class=\"nu0\">100000</span> <span class=\"co1\">; set as\u00a0%A_Space% to run indefinitely</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> Section<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> Global<span class=\"sy0\">,</span> Section<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">-</span>state_3<span class=\"sy0\">-</span>symbol <span class=\"co1\">; The name of the machine to run. Options defined:</span><br/><span class=\"co1\">; 2-state_3-symbol</span><br/><span class=\"co1\">; Simple_incrementer</span><br/><span class=\"co1\">; Three-state_busy_beaver</span><br/><span class=\"co1\">; Probable_busy_beaver_Wikipedia</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> States<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> States<span class=\"sy0\">,</span> A|B <span class=\"co1\">; valid states</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> InitialState<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> InitialState<span class=\"sy0\">,</span> A <span class=\"co1\">; start state</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> TerminalState<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> TerminalState<span class=\"sy0\">,</span> C <span class=\"co1\">; end state</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> Symbols<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> Symbols<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span> <span class=\"co1\">; valid symbols</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> DefaultCell<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> DefaultCell<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"co1\">; the default symbol of any cell not defined on input tape</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> <span class=\"nu0\">10101</span>|01010 <span class=\"co1\">; start tape</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">Iniread</span></a><span class=\"sy0\">,</span> RuleCount<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> RuleCount<span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"co1\">; number of actions to read</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%RuleCount%</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> Temp1<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> Rule<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span>\u00a0% Rule<span class=\"re0\">%A_Index%</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Temp<span class=\"sy0\">,</span> Temp1<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\tAction<span class=\"re0\">%Temp1%</span> <span class=\"sy0\">:=</span> Temp2<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> Index<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> SavedState<span class=\"sy0\">,</span> Index<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> IterationCount<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> SavedState<span class=\"sy0\">,</span> IterationCount<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> State<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> SavedState<span class=\"sy0\">,</span> State<span class=\"sy0\">,</span> <span class=\"re0\">%InitialState%</span><br/><span class=\"kw1\">If</span> IterationCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/IniRead.htm\"><span class=\"kw3\">IniRead</span></a><span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> SavedState<span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> <span class=\"re0\">%ProgramCode%</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/IfNotInString.htm\"><span class=\"kw3\">IfNotInString</span></a><span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> |<br/>\tProgramCode <span class=\"sy0\">:=</span> <span class=\"st0\">\"|\"</span> ProgramCode<br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Temp<span class=\"sy0\">,</span> ProgramCode<span class=\"sy0\">,</span> |<br/>NegativeCells <span class=\"sy0\">:=</span> Temp1<span class=\"sy0\">,</span> PositiveCells <span class=\"sy0\">:=</span> Temp2<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Symbols<span class=\"sy0\">,</span> |<br/>\tColor<span class=\"re0\">%A_LoopField%</span> <span class=\"sy0\">:=</span> hex<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">16777215</span><span class=\"br0\">)</span> <span class=\"co1\">; unlimited number of unique colors</span><br/>Color<span class=\"re0\">%DefaultCell%</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"White\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Color\"><span class=\"kw7\">Color</span></a><span class=\"sy0\">,</span> Black<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>ToolWindow <span class=\"sy0\">+</span>AlwaysOnTop <span class=\"sy0\">+</span>LastFound <span class=\"sy0\">-</span>Caption<br/>WindowID <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">WinExist</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/OnMessage.htm\"><span class=\"kw3\">OnMessage</span></a><span class=\"br0\">(</span>0x201<span class=\"sy0\">,</span> <span class=\"st0\">\"WM_LBUTTONDOWN\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">Font</span></a><span class=\"sy0\">,</span> s6 cWhite<span class=\"sy0\">,</span> Arial<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">61</span> <span class=\"co1\">; display 30 cell symbols on each side of current index</span><br/><span class=\"br0\">{</span><br/>\tTemp1 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Progress.htm\"><span class=\"kw3\">Progress</span></a><span class=\"sy0\">,</span> x<span class=\"re0\">%Temp1%</span> y1 w14 h40 vCell<span class=\"re0\">%A_Index%</span> BackgroundWhite<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x<span class=\"re0\">%Temp1%</span> y42 w15 h10 vLabel<span class=\"re0\">%A_Index%</span> Center<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x2 y54 w26 h10 vState<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x35 y54 w50 h10 vCurrentCell<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x350 y54 w158 h10 vActions<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x844 y54 w33 h10<span class=\"sy0\">,</span> <span class=\"re2\">Iterations:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x884 y54 w29 h10 vIterations <span class=\"kw6\">Right</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">Font</span></a><span class=\"sy0\">,</span> s4 cWhite Bold<span class=\"sy0\">,</span> Arial<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x450 y1 w15 h10 Center<span class=\"sy0\">,</span> V<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Move<span class=\"sy0\">,</span> Cell31<span class=\"sy0\">,</span> x451 y8 w14 h33<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> y20 w916 h64<span class=\"sy0\">,</span> Wolfram's <span class=\"nu0\">2</span><span class=\"sy0\">-</span>State <span class=\"nu0\">3</span><span class=\"sy0\">-</span>Symbol Turing Machine <span class=\"co1\">;'</span><br/>\u00a0<br/><span class=\"co1\">;MaxIndex\u00a0:= ProgramOffset + StrLen(ProgramCode), MinIndex\u00a0:= ProgramOffset\u00a0; not implemented</span><br/><span class=\"kw1\">While</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>MaxIterations <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> || IterationCount <span class=\"sy0\">&lt;=</span> MaxIterations<span class=\"br0\">)</span> <span class=\"co1\">; process until limit is reached, if any</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">61</span> <span class=\"co1\">; color each cell per its current symbol</span><br/>\t<span class=\"br0\">{</span> <span class=\"co1\">; must run for all displayed cells because they are not directly mapped to shifting tape</span><br/>\t\tTempIndex <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>Index <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">31</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Label<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> <span class=\"re0\">%TempIndex%</span><br/>\t\tCellColor <span class=\"sy0\">:=</span> CellGet<span class=\"br0\">(</span>TempIndex<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> CellColor <span class=\"sy0\">:=</span> Color<span class=\"re0\">%CellColor%</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>Background<span class=\"re0\">%CellColor%</span><span class=\"sy0\">,</span> Cell<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"br0\">}</span><br/>\tCurrentCell <span class=\"sy0\">:=</span> CellGet<span class=\"br0\">(</span>Index<span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> State<span class=\"sy0\">,</span> <span class=\"re2\">State: </span><span class=\"re0\">%State%</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> CurrentCell<span class=\"sy0\">,</span> Current <span class=\"re2\">Cell: </span><span class=\"re0\">%CurrentCell%</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Iterations<span class=\"sy0\">,</span> <span class=\"re0\">%IterationCount%</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>State <span class=\"sy0\">=</span> TerminalState<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Temp<span class=\"sy0\">,</span> Action<span class=\"re0\">%State%</span><span class=\"re0\">%CurrentCell%</span><span class=\"sy0\">,</span> |<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Actions<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Actions: Print \"</span> <span class=\"sy0\">.</span> Temp1 <span class=\"sy0\">.</span> <span class=\"st0\">\", Move \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Temp2 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"left\"</span>\u00a0: <span class=\"st0\">\"right\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>State <span class=\"sy0\">&lt;&gt;</span> Temp3<span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"Switch to state \"</span> <span class=\"sy0\">.</span> Temp3\u00a0: <span class=\"st0\">\"Do not switch state\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\tIterationCount<span class=\"sy0\">++</span><br/>\t<span class=\"sy0\">,</span> CellPut<span class=\"br0\">(</span>Index<span class=\"sy0\">,</span>Temp1<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Index <span class=\"sy0\">+=</span> Temp2<br/>\t<span class=\"sy0\">,</span> State <span class=\"sy0\">:=</span> Temp3<br/>\t<span class=\"co1\">;, (Index &gt; MaxIndex)\u00a0? MaxIndex\u00a0:= Index\u00a0: \"\"</span><br/>\t<span class=\"co1\">;, (Index &lt; MinIndex)\u00a0? MinIndex\u00a0:= Index\u00a0: \"\"</span><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0.1</span><span class=\"sy0\">*</span><span class=\"nu0\">1000</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> Complete<span class=\"sy0\">,</span> Completed <span class=\"re0\">%IterationCount%</span> iterations of the Turing machine<span class=\"sy0\">.</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; Hotkeys and functions:</span><br/>~<span class=\"kw6\">Pause</span>::<span class=\"kw6\">Pause</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape\"><span class=\"kw7\">GuiEscape</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a>:<br/>\t<span class=\"kw1\">If</span> UseSaveFile<br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/IniWrite.htm\"><span class=\"kw3\">IniWrite</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Index%</span><span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> Index<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/IniWrite.htm\"><span class=\"kw3\">IniWrite</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%IterationCount%</span><span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> IterationCount<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/IniWrite.htm\"><span class=\"kw3\">IniWrite</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%State%</span><span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> State<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/IniWrite.htm\"><span class=\"kw3\">IniWrite</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%NegativeCells%</span>|<span class=\"re0\">%PositiveCells%</span><span class=\"sy0\">,</span> <span class=\"re0\">%SaveFilePath%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Section%</span><span class=\"sy0\">,</span> ProgramCode<br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/>CellGet<span class=\"br0\">(</span>Index<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tglobal NegativeCells<span class=\"sy0\">,</span> PositiveCells<span class=\"sy0\">,</span> DefaultCell<br/>\tTemp1 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>Index <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>NegativeCells<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Abs</span></a><span class=\"br0\">(</span>Index<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>PositiveCells<span class=\"sy0\">,</span>Index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>Temp1 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\u00a0? DefaultCell\u00a0: Temp1<br/><span class=\"br0\">}</span><br/>\u00a0<br/>CellPut<span class=\"br0\">(</span>Index<span class=\"sy0\">,</span>Char<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tglobal NegativeCells<span class=\"sy0\">,</span> PositiveCells<span class=\"sy0\">,</span> DefaultCell<br/>\tstatic StrGetFunc <span class=\"sy0\">:=</span> <span class=\"st0\">\"StrGet\"</span> <span class=\"co1\">; workaround to hide function from AHK Basic (which does not have or require it)</span><br/>\tCharType <span class=\"sy0\">:=</span> <span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"st0\">\"UShort\"</span>\u00a0: <span class=\"st0\">\"UChar\"</span><br/>\t<span class=\"sy0\">,</span> <span class=\"br0\">(</span>Index <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t? <span class=\"br0\">(</span>Index <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span> Index<br/>\t\t<span class=\"sy0\">,</span> Temp1 <span class=\"sy0\">:=</span> Index <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>NegativeCells<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> <span class=\"br0\">(</span>Temp1 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t? <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span><span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"co1\">; these three functions are quirks in AHK's memory management (not required)</span><br/>\t\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span>Temp1<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span>DefaultCell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> NegativeCells <span class=\"sy0\">.=</span> <span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"re0\">%StrGetFunc%</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>Pad<span class=\"sy0\">,</span>Temp1<span class=\"sy0\">,</span><span class=\"st0\">\"CP0\"</span><span class=\"br0\">)</span>\u00a0: Pad<span class=\"br0\">)</span><br/>\t\t\t: <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"sy0\">,</span>NegativeCells<span class=\"sy0\">,</span><span class=\"br0\">(</span>Index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span>\u00a0!!<span class=\"re3\">A_IsUnicode</span><span class=\"sy0\">,</span>CharType<span class=\"br0\">)</span>\t\t<span class=\"br0\">)</span><br/>\t\t: <span class=\"br0\">(</span>Temp1 <span class=\"sy0\">:=</span> Index <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>PositiveCells<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy0\">,</span> <span class=\"br0\">(</span>Temp1 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t? <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span><span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"co1\">; these three functions are quirks in AHK's memory management (not required)</span><br/>\t\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Pad<span class=\"sy0\">,</span>Temp1<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span>DefaultCell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> PositiveCells <span class=\"sy0\">.=</span> <span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"re0\">%StrGetFunc%</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>Pad<span class=\"sy0\">,</span>Temp1<span class=\"sy0\">,</span><span class=\"st0\">\"CP0\"</span><span class=\"br0\">)</span>\u00a0: Pad<span class=\"br0\">)</span><br/>\t\t\t: <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"sy0\">,</span>PositiveCells<span class=\"sy0\">,</span>Index <span class=\"sy0\">&lt;&lt;</span>\u00a0!!<span class=\"re3\">A_IsUnicode</span><span class=\"sy0\">,</span>CharType<span class=\"br0\">)</span>\t\t<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Hex<span class=\"br0\">(</span>p_Integer<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tPtrType<span class=\"sy0\">:=</span><span class=\"br0\">(</span><span class=\"re3\">A_PtrSize</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"Ptr\"</span>:<span class=\"st0\">\"UInt\"</span><br/>\tl_Format<span class=\"sy0\">:=</span><span class=\"st0\">\"`%0\"</span> <span class=\"sy0\">.</span> <span class=\"nu0\">6</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"I64X\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>l_Argument<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>p_Integer<span class=\"sy0\">,</span>l_Argument<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Int64\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>l_Buffer<span class=\"sy0\">,</span><span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"nu0\">12</span>:<span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"st0\">\"msvcrt\\_vsnwprintf\"</span>:<span class=\"st0\">\"msvcrt\\_vsnprintf\"</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span>l_Buffer <span class=\"co1\">;-- Storage location for output</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span> <span class=\"co1\">;-- Maximum number of characters to write</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span>l_Format <span class=\"co1\">;-- Format specification</span><br/>\t\t<span class=\"sy0\">,</span>PtrType<span class=\"sy0\">,&amp;</span>l_Argument<span class=\"br0\">)</span> <span class=\"co1\">;-- Argument</span><br/>\t<span class=\"kw1\">Return</span> l_Buffer<br/><span class=\"br0\">}</span><br/>\u00a0<br/>WM_LBUTTONDOWN<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Gui\"><span class=\"kw2\">A_Gui</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/PostMessage.htm\"><span class=\"kw3\">PostMessage</span></a><span class=\"sy0\">,</span> 0xA1<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre>   \u2022 <tt>R$()</tt>, an array of rules;\n   \u2022 <tt>T$</tt>, an input tape (where an empty string stands for a blank tape);\n   \u2022 <tt>B$</tt>, a character to use as a blank;\n   \u2022 <tt>S$</tt>, an initial state;\n   \u2022 <tt>H$</tt>, a halting state.\n</pre>"}, {"lang": "Common Lisp", "loc": 35, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> turing <span class=\"br0\">(</span>initial terminal blank rules tape <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>verbose <span class=\"kw1\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>combine <span class=\"br0\">(</span>front back<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> front<br/>               <span class=\"br0\">(</span>combine <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> front<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> front<span class=\"br0\">)</span> back<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               back<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"br0\">(</span>update-tape <span class=\"br0\">(</span>old-front old-back new-content move<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> move 'right<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> new-content old-front<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> old-back<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> move 'left<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> old-front<span class=\"br0\">)</span> <br/>                          <span class=\"br0\">(</span><span class=\"kw1\">list</span>* <span class=\"br0\">(</span><span class=\"kw1\">car</span> old-front<span class=\"br0\">)</span> new-content <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> old-back<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>T <span class=\"br0\">(</span><span class=\"kw1\">list</span> old-front <br/>                            <span class=\"br0\">(</span><span class=\"kw1\">cons</span> new-content <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> old-back<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"br0\">(</span>show-tape <span class=\"br0\">(</span>front back<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>format T <span class=\"st0\">\"~{~a~}[~a]~{~a~}~%\"</span><br/>                     <span class=\"br0\">(</span>nreverse <span class=\"br0\">(</span>subseq front <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> front<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> back<span class=\"br0\">)</span> blank<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>subseq <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> back<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> back<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for back <span class=\"sy0\">=</span> tape then new-back<br/>          for front <span class=\"sy0\">=</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> then new-front<br/>          for state <span class=\"sy0\">=</span> initial then new-state<br/>          for content <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> back<span class=\"br0\">)</span> blank<span class=\"br0\">)</span><br/>          for <span class=\"br0\">(</span>new-state new-content move<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>gethash <span class=\"br0\">(</span><span class=\"kw1\">cons</span> state content<span class=\"br0\">)</span> rules<span class=\"br0\">)</span><br/>          for <span class=\"br0\">(</span>new-front new-back<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>update-tape front back new-content move<span class=\"br0\">)</span><br/>          until <span class=\"br0\">(</span><span class=\"kw1\">equal</span> state terminal<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> verbose<br/>               <span class=\"br0\">(</span>show-tape front back<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          finally <span class=\"br0\">(</span><span class=\"kw1\">progn</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">when</span> verbose<br/>                      <span class=\"br0\">(</span>show-tape front back<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>combine front back<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C", "loc": 232, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdarg.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> <span class=\"br0\">{</span><br/>    LEFT<span class=\"sy0\">,</span><br/>    RIGHT<span class=\"sy0\">,</span><br/>    STAY<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> state1<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> symbol1<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> symbol2<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> dir<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> state2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> transition_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> tape_t tape_t<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> tape_t <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> symbol<span class=\"sy0\">;</span><br/>    tape_t <span class=\"sy0\">*</span>left<span class=\"sy0\">;</span><br/>    tape_t <span class=\"sy0\">*</span>right<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> states_len<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>states<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> final_states_len<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>final_states<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> symbols_len<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>symbols<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> blank<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> state<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> tape_len<span class=\"sy0\">;</span><br/>    tape_t <span class=\"sy0\">*</span>tape<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> transitions_len<span class=\"sy0\">;</span><br/>    transition_t <span class=\"sy0\">***</span>transitions<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> turing_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> state_index <span class=\"br0\">(</span>turing_t <span class=\"sy0\">*</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>state<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>states_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>states<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> symbol_index <span class=\"br0\">(</span>turing_t <span class=\"sy0\">*</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>symbols_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>symbols<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> move <span class=\"br0\">(</span>turing_t <span class=\"sy0\">*</span>t<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    tape_t <span class=\"sy0\">*</span>orig <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy0\">==</span> RIGHT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>orig <span class=\"sy0\">&amp;&amp;</span> orig<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> orig<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>tape_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>symbol <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>blank<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>orig<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>left <span class=\"sy0\">=</span> orig<span class=\"sy0\">;</span><br/>                orig<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy0\">==</span> LEFT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>orig <span class=\"sy0\">&amp;&amp;</span> orig<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> orig<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>tape_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>symbol <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>blank<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>orig<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> orig<span class=\"sy0\">;</span><br/>                orig<span class=\"sy0\">-&gt;</span>left <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>turing_t <span class=\"sy0\">*</span>create <span class=\"br0\">(</span><span class=\"kw4\">int</span> states_len<span class=\"sy0\">,</span> ...<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    va_list args<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_start.html\"><span class=\"kw3\">va_start</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> states_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    turing_t <span class=\"sy0\">*</span>t <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>turing_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>states_len <span class=\"sy0\">=</span> states_len<span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>states <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>states_len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> states_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"sy0\">-&gt;</span>states<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    t<span class=\"sy0\">-&gt;</span>final_states_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>final_states <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>final_states_len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>final_states_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"sy0\">-&gt;</span>final_states<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> state_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    t<span class=\"sy0\">-&gt;</span>symbols_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>symbols <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>symbols_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>symbols_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"sy0\">-&gt;</span>symbols<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    t<span class=\"sy0\">-&gt;</span>blank <span class=\"sy0\">=</span> symbol_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>state <span class=\"sy0\">=</span> state_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>tape_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>tape_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        move<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> RIGHT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>symbol <span class=\"sy0\">=</span> symbol_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>t<span class=\"sy0\">-&gt;</span>tape_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        move<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> RIGHT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"sy0\">-&gt;</span>tape <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    t<span class=\"sy0\">-&gt;</span>transitions_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t<span class=\"sy0\">-&gt;</span>transitions <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>states_len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>transition_t <span class=\"sy0\">**</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>states_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"sy0\">-&gt;</span>transitions<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>symbols_len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>transition_t <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>transitions_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        transition_t <span class=\"sy0\">*</span>tran <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>transition_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tran<span class=\"sy0\">-&gt;</span>state1 <span class=\"sy0\">=</span> state_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tran<span class=\"sy0\">-&gt;</span>symbol1 <span class=\"sy0\">=</span> symbol_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tran<span class=\"sy0\">-&gt;</span>symbol2 <span class=\"sy0\">=</span> symbol_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tran<span class=\"sy0\">-&gt;</span>dir <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tran<span class=\"sy0\">-&gt;</span>state2 <span class=\"sy0\">=</span> state_index<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        t<span class=\"sy0\">-&gt;</span>transitions<span class=\"br0\">[</span>tran<span class=\"sy0\">-&gt;</span>state1<span class=\"br0\">]</span><span class=\"br0\">[</span>tran<span class=\"sy0\">-&gt;</span>symbol1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tran<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_end.html\"><span class=\"kw3\">va_end</span></a><span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> t<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_state <span class=\"br0\">(</span>turing_t <span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%-10s \"</span><span class=\"sy0\">,</span> t<span class=\"sy0\">-&gt;</span>states<span class=\"br0\">[</span>t<span class=\"sy0\">-&gt;</span>state<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tape_t <span class=\"sy0\">*</span>tape <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>tape<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tape <span class=\"sy0\">=</span> tape<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>tape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tape <span class=\"sy0\">==</span> t<span class=\"sy0\">-&gt;</span>tape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[%c]\"</span><span class=\"sy0\">,</span> t<span class=\"sy0\">-&gt;</span>symbols<span class=\"br0\">[</span>tape<span class=\"sy0\">-&gt;</span>symbol<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c \"</span><span class=\"sy0\">,</span> t<span class=\"sy0\">-&gt;</span>symbols<span class=\"br0\">[</span>tape<span class=\"sy0\">-&gt;</span>symbol<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        tape <span class=\"sy0\">=</span> tape<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> run <span class=\"br0\">(</span>turing_t <span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print_state<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">-&gt;</span>final_states_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"sy0\">-&gt;</span>final_states<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> t<span class=\"sy0\">-&gt;</span>state<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        transition_t <span class=\"sy0\">*</span>tran <span class=\"sy0\">=</span> t<span class=\"sy0\">-&gt;</span>transitions<span class=\"br0\">[</span>t<span class=\"sy0\">-&gt;</span>state<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>symbol<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        t<span class=\"sy0\">-&gt;</span>tape<span class=\"sy0\">-&gt;</span>symbol <span class=\"sy0\">=</span> tran<span class=\"sy0\">-&gt;</span>symbol2<span class=\"sy0\">;</span><br/>        move<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> tran<span class=\"sy0\">-&gt;</span>dir<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        t<span class=\"sy0\">-&gt;</span>state <span class=\"sy0\">=</span> tran<span class=\"sy0\">-&gt;</span>state2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Simple incrementer<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    turing_t <span class=\"sy0\">*</span>t <span class=\"sy0\">=</span> create<span class=\"br0\">(</span><br/>        <span class=\"coMULTI\">/* states */</span>        <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"qf\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* final_states */</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"qf\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* symbols */</span>       <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* blank */</span>         <span class=\"st0\">'B'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_state */</span> <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_tape */</span>  <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* transitions */</span>   <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> STAY<span class=\"sy0\">,</span> <span class=\"st0\">\"qf\"</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    run<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Three-state busy beaver<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t <span class=\"sy0\">=</span> create<span class=\"br0\">(</span><br/>        <span class=\"coMULTI\">/* states */</span>        <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"halt\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* final_states */</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"halt\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* symbols */</span>       <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* blank */</span>         <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_state */</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_tape */</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* transitions */</span>   <span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> STAY<span class=\"sy0\">,</span> <span class=\"st0\">\"halt\"</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    run<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Five-state two-symbol probable busy beaver<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t <span class=\"sy0\">=</span> create<span class=\"br0\">(</span><br/>        <span class=\"coMULTI\">/* states */</span>        <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* final_states */</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* symbols */</span>       <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* blank */</span>         <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_state */</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* initial_tape */</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"coMULTI\">/* transitions */</span>   <span class=\"nu0\">10</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> RIGHT<span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> STAY<span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    run<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 136, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> uint<span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> uint TAPE_MAX_LEN <span class=\"sy1\">=</span> <span class=\"nu0\">49152</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">struct</span> action <span class=\"br0\">{</span> <span class=\"kw4\">char</span> write, direction<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> tape<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    tape<span class=\"br0\">(</span> uint startPos <span class=\"sy1\">=</span> TAPE_MAX_LEN <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy4\">:</span> MAX_LEN<span class=\"br0\">(</span> TAPE_MAX_LEN <span class=\"br0\">)</span> <span class=\"br0\">{</span> _sp <span class=\"sy1\">=</span> startPos<span class=\"sy4\">;</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> clear<span class=\"br0\">(</span> <span class=\"st0\">'0'</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> headPos <span class=\"sy1\">=</span> _sp<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">char</span> read<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">return</span> _t<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> input<span class=\"br0\">(</span> string a <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">==</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span> uint s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> s <span class=\"sy1\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> s<span class=\"sy2\">++</span> <span class=\"br0\">)</span> _t<span class=\"br0\">[</span>headPos <span class=\"sy2\">+</span> s<span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> <span class=\"kw4\">char</span> c <span class=\"br0\">)</span> <span class=\"br0\">{</span>  _t.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> blk <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> _t.<span class=\"me1\">resize</span><span class=\"br0\">(</span> MAX_LEN, blk <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> action<span class=\"br0\">(</span> <span class=\"kw4\">const</span> action<span class=\"sy2\">*</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span> write<span class=\"br0\">(</span> a<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>write <span class=\"br0\">)</span><span class=\"sy4\">;</span> move<span class=\"br0\">(</span> a<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>direction <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> ml <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> MAX_LEN <span class=\"br0\">)</span>, st <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> headPos <span class=\"br0\">)</span> <span class=\"sy2\">-</span> c, ed <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> headPos <span class=\"br0\">)</span> <span class=\"sy2\">+</span> c <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, tx<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> st<span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> ed<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>\t<span class=\"br0\">{</span> tx <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> tx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> tx <span class=\"sy2\">+</span><span class=\"sy1\">=</span> ml<span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> tx <span class=\"sy1\">&gt;=</span> ml <span class=\"br0\">)</span> tx <span class=\"sy2\">-</span><span class=\"sy1\">=</span> ml<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> _t<span class=\"br0\">[</span>tx<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span> <br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> c <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"^\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> move<span class=\"br0\">(</span> <span class=\"kw4\">char</span> d <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">==</span> <span class=\"st0\">'N'</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> headPos <span class=\"sy2\">+</span><span class=\"sy1\">=</span> d <span class=\"sy1\">==</span> <span class=\"st0\">'R'</span> <span class=\"sy4\">?</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> headPos <span class=\"sy1\">&gt;=</span> MAX_LEN <span class=\"br0\">)</span> headPos <span class=\"sy1\">=</span> d <span class=\"sy1\">==</span> <span class=\"st0\">'R'</span> <span class=\"sy4\">?</span> <span class=\"nu0\">0</span> <span class=\"sy4\">:</span> MAX_LEN <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> write<span class=\"br0\">(</span> <span class=\"kw4\">char</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'N'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">==</span> <span class=\"st0\">'B'</span> <span class=\"br0\">)</span> _t<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"sy1\">=</span> blk<span class=\"sy4\">;</span> <span class=\"kw1\">else</span> _t<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    string _t<span class=\"sy4\">;</span> uint headPos, _sp<span class=\"sy4\">;</span> <span class=\"kw4\">char</span> blk<span class=\"sy4\">;</span> <span class=\"kw4\">const</span> uint MAX_LEN<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> state<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> operator <span class=\"sy1\">==</span><span class=\"br0\">(</span> <span class=\"kw4\">const</span> string o <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> o <span class=\"sy1\">==</span> name<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    string name, next<span class=\"sy4\">;</span> <span class=\"kw4\">char</span> symbol, write, direction<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> actionTable<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> loadTable<span class=\"br0\">(</span> string file <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\treset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tifstream mf<span class=\"sy4\">;</span> mf.<span class=\"me1\">open</span><span class=\"br0\">(</span> file.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> mf.<span class=\"me1\">is_open</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    string str<span class=\"sy4\">;</span> state stt<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> mf.<span class=\"me1\">good</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tgetline<span class=\"br0\">(</span> mf, str <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'<span class=\"es1\">\\'</span>'</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\tparseState<span class=\"br0\">(</span> str, stt <span class=\"br0\">)</span><span class=\"sy4\">;</span> states.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> stt <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> mf.<span class=\"me1\">good</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tgetline<span class=\"br0\">(</span> mf, str <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> str <span class=\"sy1\">==</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'!'</span> <span class=\"br0\">)</span> blank <span class=\"sy1\">=</span> str.<span class=\"me1\">erase</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'^'</span> <span class=\"br0\">)</span> curState <span class=\"sy1\">=</span> str.<span class=\"me1\">erase</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'&gt;'</span> <span class=\"br0\">)</span> input <span class=\"sy1\">=</span> str.<span class=\"me1\">erase</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    mf.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Could not open \"</span> <span class=\"sy1\">&lt;&lt;</span> file <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> action<span class=\"br0\">(</span> <span class=\"kw4\">char</span> symbol, action<span class=\"sy3\">&amp;</span> a <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tvector<span class=\"sy1\">&lt;</span>state<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> f <span class=\"sy1\">=</span> states.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    f <span class=\"sy1\">=</span> find<span class=\"br0\">(</span> f, states.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, curState <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> f <span class=\"sy1\">==</span> states.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">symbol</span> <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">symbol</span> <span class=\"sy1\">==</span> symbol <span class=\"sy3\">||</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">symbol</span> <span class=\"sy1\">==</span> <span class=\"st0\">'B'</span> <span class=\"sy3\">&amp;&amp;</span> blank <span class=\"sy1\">==</span> symbol <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span> a.<span class=\"me1\">direction</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">direction</span><span class=\"sy4\">;</span> a.<span class=\"me1\">write</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">write</span><span class=\"sy4\">;</span> curState <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>f <span class=\"br0\">)</span>.<span class=\"me1\">next</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    f<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> states.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> blank <span class=\"sy1\">=</span> <span class=\"st0\">'0'</span><span class=\"sy4\">;</span> curState <span class=\"sy1\">=</span> input <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    string getInput<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> input<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">char</span> getBlank<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> blank<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> parseState<span class=\"br0\">(</span> string str, state<span class=\"sy3\">&amp;</span> stt <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tstring a<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw4\">int</span> idx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> string<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> si <span class=\"sy1\">=</span> str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> si <span class=\"sy3\">!</span><span class=\"sy1\">=</span> str.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> si<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>si <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">';'</span> <span class=\"br0\">)</span> idx<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> a<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>si <span class=\"br0\">)</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\tstt.<span class=\"me1\">name</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> stt.<span class=\"me1\">symbol</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> stt.<span class=\"me1\">write</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> stt.<span class=\"me1\">direction</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> stt.<span class=\"me1\">next</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    vector<span class=\"sy1\">&lt;</span>state<span class=\"sy1\">&gt;</span> states<span class=\"sy4\">;</span> <span class=\"kw4\">char</span> blank<span class=\"sy4\">;</span> string curState, input<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> utm<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    utm<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> files<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"incrementer.utm\"</span><span class=\"sy4\">;</span> files<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"busy_beaver.utm\"</span><span class=\"sy4\">;</span> files<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"sort.utm\"</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    reset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw4\">int</span> t <span class=\"sy1\">=</span> showMenu<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> t <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>at.<span class=\"me1\">loadTable</span><span class=\"br0\">(</span> files<span class=\"br0\">[</span>t <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> startMachine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> simulate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> r<span class=\"sy4\">;</span> action a<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> tp.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> r <span class=\"sy1\">=</span> tp.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> at.<span class=\"me1\">action</span><span class=\"br0\">(</span> r, a <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span> tp.<span class=\"me1\">action</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>a <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> showMenu<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> t <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> t <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> t <span class=\"sy1\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1. Incrementer<span class=\"es1\">\\n</span>2. Busy beaver<span class=\"es1\">\\n</span>3. Sort<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>0. Quit\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Choose an action \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> t<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> t<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> tp.<span class=\"me1\">reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> at.<span class=\"me1\">reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> startMachine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> tp.<span class=\"me1\">clear</span><span class=\"br0\">(</span> at.<span class=\"me1\">getBlank</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> tp.<span class=\"me1\">input</span><span class=\"br0\">(</span> at.<span class=\"me1\">getInput</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> simulate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    tape tp<span class=\"sy4\">;</span> actionTable at<span class=\"sy4\">;</span> string files<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> a, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> utm mm<span class=\"sy4\">;</span> mm.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 28, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> tape<br/>  <span class=\"st0\">\"Creates a new tape with given blank character and tape contents\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>blank<span class=\"br0\">]</span> <span class=\"br0\">(</span>tape <span class=\"br0\">(</span><span class=\"br0\">)</span> blank <span class=\"br0\">(</span><span class=\"br0\">)</span> blank<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>right blank<span class=\"br0\">]</span> <span class=\"br0\">(</span>tape <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> right<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> right<span class=\"br0\">)</span> blank<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>left head right blank<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">reverse</span> left<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> head blank<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> right<span class=\"br0\">)</span> blank<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Tape operations</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> left  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span>l <span class=\"sy0\">&amp;</span> ls<span class=\"br0\">]</span> _ rs       b<span class=\"br0\">]</span> c<span class=\"br0\">]</span> <span class=\"br0\">[</span>ls          <span class=\"br0\">(</span><span class=\"kw1\">or</span> l b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> rs c<span class=\"br0\">)</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> right <span class=\"br0\">[</span><span class=\"br0\">[</span>ls       _ <span class=\"br0\">[</span>r <span class=\"sy0\">&amp;</span> rs<span class=\"br0\">]</span> b<span class=\"br0\">]</span> c<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">conj</span> ls c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> r b<span class=\"br0\">)</span> rs          b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> stay  <span class=\"br0\">[</span><span class=\"br0\">[</span>ls       _ rs       b<span class=\"br0\">]</span> c<span class=\"br0\">]</span> <span class=\"br0\">[</span>ls          c        rs          b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> head <span class=\"br0\">[</span><span class=\"br0\">[</span>_ c _ b<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> c b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> pretty <span class=\"br0\">[</span><span class=\"br0\">[</span>ls c rs b<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> ls<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> c b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> rs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> new<span class=\"sy0\">-</span>machine<br/> <span class=\"st0\">\"Returns a function that takes a tape as input, and returns the tape<br/>  after running the machine specified in `machine`.\"</span><br/>  <span class=\"br0\">[</span>machine<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rules <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>s c c' a s'<span class=\"br0\">]</span> <span class=\"br0\">(</span>:<span class=\"me1\">rules</span> machine<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                         <span class=\"br0\">[</span><span class=\"br0\">[</span>s c<span class=\"br0\">]</span> <span class=\"br0\">[</span>c' <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> a name symbol resolve<span class=\"br0\">)</span> s'<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finished? <span class=\"br0\">(</span><span class=\"kw1\">into</span> #<span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">(</span>:<span class=\"me1\">terminating</span> machine<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>input<span class=\"sy0\">-</span>tape<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>state <span class=\"br0\">(</span>:<span class=\"me1\">initial</span> machine<span class=\"br0\">)</span> tape input<span class=\"sy0\">-</span>tape<span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>finished? state<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>pretty tape<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>out action new<span class=\"sy0\">-</span>state<span class=\"br0\">]</span> <span class=\"br0\">(</span>get rules <span class=\"br0\">[</span>state <span class=\"br0\">(</span>head tape<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> new<span class=\"sy0\">-</span>state <span class=\"br0\">(</span>action tape out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 236, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">exception</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> UTM<span class=\"br0\">(</span>State<span class=\"sy0\">,</span> Symbol<span class=\"sy0\">,</span> <span class=\"kw4\">bool</span> doShow<span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>State <span class=\"sy0\">==</span> <span class=\"kw4\">enum</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">is</span><span class=\"br0\">(</span>Symbol <span class=\"sy0\">==</span> <span class=\"kw4\">enum</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"kw4\">size_t</span> x <span class=\"sy0\">=</span> State.<span class=\"me1\">init</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"State must to be usable as array index.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>State<span class=\"br0\">]</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span>EnumMembers<span class=\"sy0\">!</span>State.<span class=\"me1\">length</span>.<span class=\"me1\">iota</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"State must be a plain enum.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"kw4\">size_t</span> x <span class=\"sy0\">=</span> Symbol.<span class=\"me1\">init</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"Symbol must to be usable as array index.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Symbol<span class=\"br0\">]</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span>EnumMembers<span class=\"sy0\">!</span>Symbol.<span class=\"me1\">length</span>.<span class=\"me1\">iota</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"Symbol must be a plain enum.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> Direction <span class=\"br0\">{</span> right<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> stay <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">const</span> TuringMachine tm<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> TapeHead head<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> SymbolMap <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Symbol.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// The first index of this 'rules' matrix is a subtype of State</span><br/>    <span class=\"co1\">// because it can't contain H, but currently D can't enforce this,</span><br/>    <span class=\"co1\">// statically unlike Ada language.</span><br/>    Rule<span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Symbol.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>State.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> mRules<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Rule <span class=\"br0\">{</span><br/>        Symbol toWrite<span class=\"sy0\">;</span><br/>        Direction direction<span class=\"sy0\">;</span><br/>        State nextState<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Symbol toWrite_<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Direction direction_<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> State nextState_<span class=\"br0\">)</span><br/>        <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">toWrite</span> <span class=\"sy0\">=</span> toWrite_<span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">direction</span> <span class=\"sy0\">=</span> direction_<span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">nextState</span> <span class=\"sy0\">=</span> nextState_<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// This is kept separated from the rest so it can be inialized</span><br/>    <span class=\"co1\">// one field at a time in the main function, yet it will become</span><br/>    <span class=\"co1\">// const.</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> TuringMachine <span class=\"br0\">{</span><br/>        Symbol blank<span class=\"sy0\">;</span><br/>        State initialState<span class=\"sy0\">;</span><br/>        Rule<span class=\"br0\">[</span>Symbol<span class=\"br0\">]</span><span class=\"br0\">[</span>State<span class=\"br0\">]</span> rules<span class=\"sy0\">;</span><br/>        Symbol<span class=\"br0\">[</span><span class=\"br0\">]</span> input<span class=\"sy0\">;</span><br/>        SymbolMap symbolMap<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> TapeHead <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> Symbol blank<span class=\"sy0\">;</span><br/>        Symbol<span class=\"br0\">[</span><span class=\"br0\">]</span> tapeLeft<span class=\"sy0\">,</span> tapeRight<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> position<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> SymbolMap sMap<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">size_t</span> nSteps<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TuringMachine t<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">blank</span> <span class=\"sy0\">=</span> EnumMembers<span class=\"sy0\">!</span>Symbol<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//tapeRight = t.input.empty\u00a0? [this.blank]\u00a0: t.input.dup;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t.<span class=\"me1\">input</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">blank</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span> <span class=\"sy0\">=</span> t.<span class=\"me1\">input</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">sMap</span> <span class=\"sy0\">=</span> t.<span class=\"me1\">symbolMap</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"kw2\">invariant</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">&lt;</span> <span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">this</span>.<span class=\"me1\">tapeLeft</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Symbol readSymb<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">this</span>.<span class=\"me1\">tapeLeft</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> showSymb<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> writeSymb<span class=\"br0\">(</span><span class=\"kw2\">in</span> Symbol symbol<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doShow<span class=\"br0\">)</span><br/>                showSymb<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">this</span>.<span class=\"me1\">tapeRight</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbol<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw2\">this</span>.<span class=\"me1\">tapeLeft</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">position</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> symbol<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> goRight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">position</span><span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>position <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> position <span class=\"sy0\">==</span> tapeRight.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                tapeRight <span class=\"sy0\">~=</span> blank<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> goLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">position</span><span class=\"sy0\">--;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>position <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>position.<span class=\"me1\">abs</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> tapeLeft.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                tapeLeft <span class=\"sy0\">~=</span> blank<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw2\">in</span> Direction dir<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            nSteps<span class=\"sy0\">++;</span><br/>            <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Direction<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> left<span class=\"sy0\">:</span>  goLeft<span class=\"sy0\">;</span>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> right<span class=\"sy0\">:</span> goRight<span class=\"sy0\">;</span>       <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> stay<span class=\"sy0\">:</span>  <span class=\"coMULTI\">/*Do nothing*/</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> pos <span class=\"sy0\">=</span> tapeLeft.<span class=\"me1\">length</span>.<span class=\"me1\">signed</span> <span class=\"sy0\">+</span> <span class=\"kw2\">this</span>.<span class=\"me1\">position</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"...%-(%)...\"</span><span class=\"sy0\">,</span> tapeLeft.<span class=\"me1\">retro</span>.<span class=\"me1\">chain</span><span class=\"br0\">(</span>tapeRight<span class=\"br0\">)</span><br/>                                         .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> sMap<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span><br/>                   <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy0\">~</span><br/>                   format<span class=\"br0\">(</span><span class=\"st0\">\"%\"</span> <span class=\"sy0\">~</span> pos.<span class=\"me1\">text</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"^\"</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span><br/>                   <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        head.<span class=\"me1\">showSymb</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TuringMachine tm_<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">__traits</span><span class=\"br0\">(</span>compiles<span class=\"sy0\">,</span> State.<span class=\"me1\">H</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"State needs a 'H' (Halt).\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> errMsg <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid input.\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> runningStates <span class=\"sy0\">=</span> remove<span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> s <span class=\"sy0\">==</span> State.<span class=\"me1\">H</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>State<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        enforce<span class=\"br0\">(</span><span class=\"sy0\">!</span>runningStates.<span class=\"me1\">empty</span><span class=\"sy0\">,</span> errMsg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        enforce<span class=\"br0\">(</span>tm_.<span class=\"me1\">rules</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> EnumMembers<span class=\"sy0\">!</span>State.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> errMsg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        enforce<span class=\"br0\">(</span>State.<span class=\"me1\">H</span> <span class=\"sy0\">!</span><span class=\"kw2\">in</span> tm_.<span class=\"me1\">rules</span><span class=\"sy0\">,</span> errMsg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        enforce<span class=\"br0\">(</span>runningStates.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>tm_.<span class=\"me1\">initialState</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> errMsg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Create a matrix to reduce running time.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> State st<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> rset<span class=\"sy0\">;</span> tm_.<span class=\"me1\">rules</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> Symbol sy<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> rule<span class=\"sy0\">;</span> rset<span class=\"br0\">)</span><br/>                mRules<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rule<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">tm</span> <span class=\"sy0\">=</span> tm_<span class=\"sy0\">;</span><br/>        head <span class=\"sy0\">=</span> TapeHead<span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">tm</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        State state <span class=\"sy0\">=</span> tm.<span class=\"me1\">initialState</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>state <span class=\"sy0\">!=</span> State.<span class=\"me1\">H</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> next <span class=\"sy0\">=</span> mRules<span class=\"br0\">[</span>state<span class=\"br0\">]</span><span class=\"br0\">[</span>head.<span class=\"me1\">readSymb</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            head.<span class=\"me1\">writeSymb</span><span class=\"br0\">(</span>next.<span class=\"me1\">toWrite</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            head.<span class=\"me1\">move</span><span class=\"br0\">(</span>next.<span class=\"me1\">direction</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            state <span class=\"sy0\">=</span> next.<span class=\"me1\">nextState</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doShow<span class=\"br0\">)</span><br/>            show<span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Performed \"</span><span class=\"sy0\">,</span> head.<span class=\"me1\">nSteps</span><span class=\"sy0\">,</span> <span class=\"st0\">\" steps.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"Incrementer:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> States1 <span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span> A<span class=\"sy0\">,</span> H <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> Symbols1 <span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span> s0<span class=\"sy0\">,</span> s1 <span class=\"br0\">}</span><br/>    <span class=\"kw2\">alias</span> M1 <span class=\"sy0\">=</span> UTM<span class=\"sy0\">!</span><span class=\"br0\">(</span>States1<span class=\"sy0\">,</span> Symbols1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    M1.<span class=\"me1\">TuringMachine</span> tm1<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">with</span> <span class=\"br0\">(</span>tm1<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>States1<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Symbols1<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>M1.<span class=\"me1\">Direction</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> R <span class=\"sy0\">=</span> M1.<span class=\"me1\">Rule</span><span class=\"sy0\">;</span><br/>        initialState <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>        rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> stay<span class=\"sy0\">,</span>  H<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        input <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s1<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        symbolMap <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    M1<span class=\"br0\">(</span>tm1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// http://en.wikipedia.org/wiki/Busy_beaver</span><br/>    <span class=\"st0\">\"<span class=\"es1\">\\n</span>Busy Beaver machine (3-state, 2-symbol):\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> States2 <span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span> A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">,</span> H <span class=\"br0\">}</span><br/>    <span class=\"kw2\">alias</span> Symbols2 <span class=\"sy0\">=</span> Symbols1<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> M2 <span class=\"sy0\">=</span> UTM<span class=\"sy0\">!</span><span class=\"br0\">(</span>States2<span class=\"sy0\">,</span> Symbols2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    M2.<span class=\"me1\">TuringMachine</span> tm2<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">with</span> <span class=\"br0\">(</span>tm2<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>States2<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Symbols2<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>M2.<span class=\"me1\">Direction</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> R <span class=\"sy0\">=</span> M2.<span class=\"me1\">Rule</span><span class=\"sy0\">;</span><br/>        initialState <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>        rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  C<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 B<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  A<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 C<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  B<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> stay<span class=\"sy0\">,</span>  H<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        symbolMap <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    M2<span class=\"br0\">(</span>tm2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"<span class=\"es1\">\\n</span>Sorting stress test (12212212121212):\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> States3 <span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span> A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> E<span class=\"sy0\">,</span> H <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> Symbols3 <span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span> s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3 <span class=\"br0\">}</span><br/>    <span class=\"kw2\">alias</span> M3 <span class=\"sy0\">=</span> UTM<span class=\"sy0\">!</span><span class=\"br0\">(</span>States3<span class=\"sy0\">,</span> Symbols3<span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    M3.<span class=\"me1\">TuringMachine</span> tm3<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">with</span> <span class=\"br0\">(</span>tm3<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>States3<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Symbols3<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>M3.<span class=\"me1\">Direction</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> R <span class=\"sy0\">=</span> M3.<span class=\"me1\">Rule</span><span class=\"sy0\">;</span><br/>        initialState <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>        rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s2<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s3<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  E<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 B<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s2<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  C<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 C<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  D<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s2<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  C<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s3<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  E<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 D<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  D<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s2<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s2<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  D<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s3<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 E<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  E<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> stay<span class=\"sy0\">,</span>  H<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        input <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span><br/>                 s2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        symbolMap <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    M3<span class=\"br0\">(</span>tm3<span class=\"br0\">)</span>.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"<span class=\"es1\">\\n</span>Possible best Busy Beaver machine (5-state, 2-symbol):\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> States4 <span class=\"sy0\">=</span> States3<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> Symbols4 <span class=\"sy0\">=</span> Symbols1<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> M4 <span class=\"sy0\">=</span> UTM<span class=\"sy0\">!</span><span class=\"br0\">(</span>States4<span class=\"sy0\">,</span> Symbols4<span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    M4.<span class=\"me1\">TuringMachine</span> tm4<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">with</span> <span class=\"br0\">(</span>tm4<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>States4<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Symbols4<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>M4.<span class=\"me1\">Direction</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> R <span class=\"sy0\">=</span> M4.<span class=\"me1\">Rule</span><span class=\"sy0\">;</span><br/>        initialState <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>        rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  C<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 B<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> C<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 C<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  E<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 D<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  A<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  D<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 E<span class=\"sy0\">:</span> <span class=\"br0\">[</span>s0<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> stay<span class=\"sy0\">,</span>  H<span class=\"br0\">)</span><span class=\"sy0\">,</span> s1<span class=\"sy0\">:</span> R<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span>  A<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        symbolMap <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    M4<span class=\"br0\">(</span>tm4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 42, "block": "<pre class=\"text highlighted_source\">transitions(:<br/>\tlocal\u00a0:t {}<br/>\twhile /= ) dup:<br/>\t\tset-to t swap &amp; rot &amp; rot rot &amp;<br/>\tt drop<br/>\u00a0<br/>take-from tape:<br/>\tif tape:<br/>\t\tpop-from tape<br/>\telse:<br/>\t\t:B<br/>\u00a0<br/>paste-together a h b:<br/>\tpush-to b h<br/>\twhile a:<br/>\t\tpush-to b pop-from a<br/>\tb<br/>\u00a0<br/>universal-turing-machine transitions initial final tape:<br/>\tlocal\u00a0:tape-left []<br/>\tlocal\u00a0:state initial<br/>\u00a0<br/>\tlocal\u00a0:head take-from tape<br/>\u00a0<br/>\tlocal\u00a0:move {\u00a0:stay @pass }<br/>\u00a0<br/>\tmove!left:<br/>\t\tpush-to tape head<br/>\t\tset\u00a0:head take-from tape-left<br/>\u00a0<br/>\tmove!right:<br/>\t\tpush-to tape-left head<br/>\t\tset\u00a0:head take-from tape<br/>\u00a0<br/>\twhile /= state final:<br/>\t\tif opt-get transitions &amp; state head:<br/>\t\t\tset\u00a0:state &amp;&lt;&gt;<br/>\t\t\tset\u00a0:head &amp;&lt;&gt;<br/>\t\t\tmove!<br/>\t\telse:<br/>\t\t\treturn paste-together tape-left head tape<br/>\tpaste-together tape-left head tape</pre>"}, {"lang": "EchoLisp", "loc": 103, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'struct<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>struct TM <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>only: name states symbs final rules mem  state<span class=\"sy0\">-</span>values: tape pos state<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>rule<span class=\"sy0\">-</span>idx state symb numstates<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">+</span> state <span class=\"br0\">(</span><span class=\"sy0\">*</span> symb numstates<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>TM name states symbs rules<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>_make<span class=\"sy0\">-</span>TM  name 'states 'symbs 'rules<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a rule is (state symbol --&gt; write move new-state)</span><br/><span class=\"co1\">;; index for rule = state-num + (number of states)  * symbol-num</span><br/><span class=\"co1\">;; convert states/symbol into vector indices</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>rule <span class=\"kw1\">T</span> rule  into: rules<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> numstates <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>states <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> state <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index <span class=\"br0\">[</span>rule <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>states <span class=\"kw1\">T</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; index </span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> symb <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index <span class=\"br0\">[</span>rule <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>symbs <span class=\"kw1\">T</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> write<span class=\"sy0\">-</span>symb <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index <span class=\"br0\">[</span>rule <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>symbs <span class=\"kw1\">T</span><span class=\"br0\">)</span>  <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> move <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index  <span class=\"br0\">[</span>rule <span class=\"nu0\">3</span><span class=\"br0\">]</span> #<span class=\"br0\">(</span>left stay right<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> new<span class=\"sy0\">-</span>state <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index  <span class=\"br0\">[</span>rule <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>states <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> rulenum <span class=\"br0\">(</span>rule<span class=\"sy0\">-</span>idx state symb numstates<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> rules rulenum <span class=\"br0\">(</span><span class=\"kw1\">vector</span> write<span class=\"sy0\">-</span>symb move new<span class=\"sy0\">-</span>state<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">; (writeln 'rule  rulenum [rules rulenum])</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>_make<span class=\"sy0\">-</span>TM name states symbs rules<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">T</span> <span class=\"br0\">(</span>TM  name <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> states<span class=\"br0\">)</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> symbs<span class=\"br0\">)</span> null null<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>final<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>  <span class=\"br0\">(</span><span class=\"kw1\">length</span> states<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; assume one final state</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>rules<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> states<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> symbs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>rule rules<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>rule <span class=\"kw1\">T</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> rule<span class=\"br0\">)</span> into: <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>rules <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">T</span> <span class=\"br0\">)</span> <span class=\"co1\">; returns a TM</span><br/>\u00a0<br/><span class=\"co1\">;;------------------</span><br/><span class=\"co1\">;; TM-trace </span><br/><span class=\"co1\">;;-------------------</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>delimiter <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>print <span class=\"kw1\">T</span> symb<span class=\"sy0\">-</span>index: symb <span class=\"br0\">(</span>hilite #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span> <br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> symb<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> hilite <span class=\"st0\">\"\ud83d\udd32\"</span>  <span class=\"st0\">\"\u25fd\ufe0f\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> symb<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> hilite  <span class=\"st0\">\"\ud83d\udd33 \"</span> <span class=\"st0\">\"\u25fe\ufe0f\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>trace <span class=\"kw1\">T</span> tape pos state step<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>final <span class=\"kw1\">T</span><span class=\"br0\">)</span> state<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"st0\">\"\ud83d\udd34\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"st0\">\"\ud83d\udd35\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range  <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>mem <span class=\"kw1\">T</span><span class=\"br0\">)</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>mem <span class=\"kw1\">T</span><span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>print <span class=\"kw1\">T</span> <span class=\"br0\">[</span>tape p<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">write</span> step<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;---------------</span><br/><span class=\"co1\">;; TM-init\u00a0: alloc and init tape</span><br/><span class=\"co1\">;;---------------</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>init <span class=\"kw1\">T</span> input<span class=\"sy0\">-</span>symbs <span class=\"br0\">(</span>mem <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; init state variables</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>tape<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> mem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>pos<span class=\"sy0\">!</span>  <span class=\"kw1\">T</span>  mem<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>state<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>mem<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> mem<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>symb input<span class=\"sy0\">-</span>symbs<span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>tape <span class=\"kw1\">T</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span> i <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>pos <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>index symb <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>symbs <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>trace <span class=\"kw1\">T</span>  <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>tape <span class=\"kw1\">T</span><span class=\"br0\">)</span> mem <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    mem <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;---------------</span><br/><span class=\"co1\">;; TM-run\u00a0: run at most maxsteps</span><br/><span class=\"co1\">;;---------------</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>run <span class=\"kw1\">T</span>  <span class=\"br0\">(</span>verbose #f<span class=\"br0\">)</span>  <span class=\"br0\">(</span>maxsteps <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> final <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>final <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> rules <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>rules <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> rule <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> numstates <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>states <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; set current state vars</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> pos <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>pos <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> state <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>state <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> tape <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>tape <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> state<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> pos <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>mem <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \t <span class=\"br0\">(</span>writeln 'Starting <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>name <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \t <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>trace <span class=\"kw1\">T</span> tape pos <span class=\"nu0\">0</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> state final<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> count maxsteps<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">++</span> count<span class=\"br0\">)</span><br/><span class=\"co1\">;; The machine</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">set!</span> rule <span class=\"br0\">[</span>rules <span class=\"br0\">(</span>rule<span class=\"sy0\">-</span>idx state <span class=\"br0\">[</span>tape pos<span class=\"br0\">]</span> numstates<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">=</span> rule <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>error <span class=\"st0\">\"missing rule\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> state <span class=\"br0\">[</span>tape pos<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> tape pos <span class=\"br0\">[</span>rule <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">set!</span> state <span class=\"br0\">[</span>rule <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">+=</span> pos <span class=\"br0\">[</span>rule <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; end machine</span><br/>        <span class=\"br0\">(</span>when verbose <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>trace  <span class=\"kw1\">T</span> tape pos state count <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; save TM state</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>pos<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> pos<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>TM<span class=\"sy0\">-</span>state<span class=\"sy0\">!</span> <span class=\"kw1\">T</span> state<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">=</span> final state<span class=\"br0\">)</span>  <span class=\"br0\">(</span>writeln 'Stopping <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>name <span class=\"kw1\">T</span><span class=\"br0\">)</span> 'at<span class=\"sy0\">-</span>pos <span class=\"br0\">(</span><span class=\"sy0\">-</span> pos <span class=\"br0\">(</span>TM<span class=\"sy0\">-</span>mem <span class=\"kw1\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    count<span class=\"br0\">)</span>  <br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 68, "block": "<pre class=\"erlang highlighted_source\">#<span class=\"sy3\">!/</span>usr<span class=\"sy3\">/</span>bin<span class=\"sy3\">/</span>env escript<br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>turing<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">mode</span><span class=\"br0\">(</span>compile<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Incrementer definition:</span><br/><span class=\"co1\">% States: a | halt</span><br/><span class=\"co1\">% Initial state: a</span><br/><span class=\"co1\">% Halting states: halt</span><br/><span class=\"co1\">% Symbols: b | '1'</span><br/><span class=\"co1\">% Blank symbol: b</span><br/><span class=\"re3\">incrementer_config</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>a<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">halt</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> b<span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">incrementer</span><span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"st_h\">'1'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> a<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">incrementer</span><span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>   <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> stay<span class=\"sy1\">,</span> <span class=\"kw3\">halt</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Busy beaver definition:</span><br/><span class=\"co1\">% States: a | b | c | halt</span><br/><span class=\"co1\">% Initial state: a</span><br/><span class=\"co1\">% Halting states: halt</span><br/><span class=\"co1\">% Symbols: '0' | '1'</span><br/><span class=\"co1\">% Blank symbol: '0'</span><br/><span class=\"re3\">busy_beaver_config</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>a<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">halt</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st_h\">'0'</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> b<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"st_h\">'1'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> c<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>b<span class=\"sy1\">,</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> a<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>b<span class=\"sy1\">,</span> <span class=\"st_h\">'1'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> b<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>c<span class=\"sy1\">,</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> b<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">busy_beaver</span><span class=\"br0\">(</span>c<span class=\"sy1\">,</span> <span class=\"st_h\">'1'</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span> stay<span class=\"sy1\">,</span> <span class=\"kw3\">halt</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Mainline code.</span><br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"==============================~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Turing machine simulator test.~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"==============================~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>    <span class=\"re5\">Tape1</span> <span class=\"sy3\">=</span> <span class=\"re3\">turing</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> incrementer_config<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> incrementer<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span><span class=\"st_h\">'1'</span><span class=\"sy1\">,</span><span class=\"st_h\">'1'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Tape1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>    <span class=\"re5\">Tape2</span> <span class=\"sy3\">=</span> <span class=\"re3\">turing</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> busy_beaver_config<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> busy_beaver<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Tape2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Universal Turing machine simulator.</span><br/><span class=\"re3\">turing</span><span class=\"br0\">(</span><span class=\"re5\">Config</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span><span class=\"sy1\">,</span> <span class=\"re5\">Input</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re5\">C</span><span class=\"re3\">onfig</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">perform</span><span class=\"br0\">(</span><span class=\"re5\">Config</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span><span class=\"sy1\">,</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Input</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Left</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re5\">Right</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">perform</span><span class=\"br0\">(</span><span class=\"re5\">Config</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"sy1\">,</span> <span class=\"re5\">Input</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"re5\">LeftInput</span><span class=\"sy1\">,</span> <span class=\"re5\">RightInput</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Halts</span><span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re5\">C</span><span class=\"re3\">onfig</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">State</span><span class=\"sy1\">,</span> <span class=\"re5\">Halts</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true  <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Input</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">NewRight</span><span class=\"sy1\">,</span> <span class=\"re5\">Symbol</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">symbol</span><span class=\"br0\">(</span><span class=\"re5\">RightInput</span><span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">NewSymbol</span><span class=\"sy1\">,</span> <span class=\"re5\">Action</span><span class=\"sy1\">,</span> <span class=\"re5\">NewState</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re5\">R</span><span class=\"re3\">ules</span><span class=\"br0\">(</span><span class=\"re5\">State</span><span class=\"sy1\">,</span> <span class=\"re5\">Symbol</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re5\">NewInput</span> <span class=\"sy3\">=</span> <span class=\"re3\">action</span><span class=\"br0\">(</span><span class=\"re5\">Action</span><span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">LeftInput</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">NewSymbol</span>| <span class=\"re5\">NewRight</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re3\">perform</span><span class=\"br0\">(</span><span class=\"re5\">Config</span><span class=\"sy1\">,</span> <span class=\"re5\">Rules</span><span class=\"sy1\">,</span> <span class=\"re5\">NewState</span><span class=\"sy1\">,</span> <span class=\"re5\">NewInput</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">symbol</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">symbol</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">S</span>|R<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">)</span>  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">action</span><span class=\"br0\">(</span>left<span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Blank</span>|Right<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">action</span><span class=\"br0\">(</span>left<span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">L</span>|Ls<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Ls</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">L</span>|Right<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">action</span><span class=\"br0\">(</span>stay<span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Tape</span><span class=\"br0\">)</span>            <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Tape</span><span class=\"sy1\">;</span><br/><span class=\"re3\">action</span><span class=\"br0\">(</span>right<span class=\"sy1\">,</span> <span class=\"re5\">Blank</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">Blank</span>|Left<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">action</span><span class=\"br0\">(</span>right<span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">R</span>|Rs<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">R</span>|Left<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Rs</span><span class=\"br0\">}</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F\u014drmul\u00e6", "loc": 1, "block": "<pre>1          State 1\n  1,-1, 3\n  1,+1, 2\n2          State 2\n  1,+1, 2\n  1,-1, 1\n</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>1          State 1\n  1,-1, 3\n  1,+1, 2\n2          State 2\n  1,+1, 2\n  1,-1, 1\n</pre>"}, {"lang": "Go", "loc": 177, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> turing<br/>\u00a0<br/><span class=\"kw1\">type</span> Symbol <span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Motion <span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>        Left  Motion <span class=\"sy2\">=</span> <span class=\"st0\">'L'</span><br/>        Right Motion <span class=\"sy2\">=</span> <span class=\"st0\">'R'</span><br/>        Stay  Motion <span class=\"sy2\">=</span> <span class=\"st0\">'N'</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Tape <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        data      <span class=\"sy1\">[]</span>Symbol<br/>        pos<span class=\"sy1\">,</span> left <span class=\"kw4\">int</span><br/>        blank     Symbol<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// NewTape returns a new tape filled with 'data' and position set to 'start'.</span><br/><span class=\"co1\">// 'start' does not need to be range, the tape will be extended if required.</span><br/><span class=\"kw4\">func</span> NewTape<span class=\"sy1\">(</span>blank Symbol<span class=\"sy1\">,</span> start <span class=\"kw4\">int</span><span class=\"sy1\">,</span> data <span class=\"sy1\">[]</span>Symbol<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>Tape <span class=\"sy1\">{</span><br/>        t <span class=\"sy2\">:=</span> &amp;Tape<span class=\"sy1\">{</span><br/>                data<span class=\"sy1\">:</span>  data<span class=\"sy1\">,</span><br/>                blank<span class=\"sy1\">:</span> blank<span class=\"sy1\">,</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> start &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                t<span class=\"sy3\">.</span>Left<span class=\"sy1\">(</span><span class=\"sy3\">-</span>start<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        t<span class=\"sy3\">.</span>Right<span class=\"sy1\">(</span>start<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> t<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Stay<span class=\"sy1\">()</span>          <span class=\"sy1\">{}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Data<span class=\"sy1\">()</span> <span class=\"sy1\">[]</span>Symbol <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Read<span class=\"sy1\">()</span> Symbol   <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Write<span class=\"sy1\">(</span>s Symbol<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Dup<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>Tape <span class=\"sy1\">{</span><br/>        t2 <span class=\"sy2\">:=</span> &amp;Tape<span class=\"sy1\">{</span><br/>                data<span class=\"sy1\">:</span>  <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>Symbol<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>Data<span class=\"sy1\">())),</span><br/>                blank<span class=\"sy1\">:</span> t<span class=\"sy3\">.</span>blank<span class=\"sy1\">,</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>t2<span class=\"sy3\">.</span>data<span class=\"sy1\">,</span> t<span class=\"sy3\">.</span>Data<span class=\"sy1\">())</span><br/>        t2<span class=\"sy3\">.</span>pos <span class=\"sy2\">=</span> t<span class=\"sy3\">.</span>pos <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>left<br/>        <span class=\"kw1\">return</span> t2<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        s <span class=\"sy2\">:=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>left<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>                <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> t<span class=\"sy3\">.</span>pos <span class=\"sy1\">{</span><br/>                        s <span class=\"sy2\">+=</span> <span class=\"st0\">\"[\"</span> <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">\"]\"</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                        s <span class=\"sy2\">+=</span> <span class=\"st0\">\" \"</span> <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">\" \"</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Move<span class=\"sy1\">(</span>a Motion<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> Left<span class=\"sy1\">:</span><br/>                t<span class=\"sy3\">.</span>Left<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> Right<span class=\"sy1\">:</span><br/>                t<span class=\"sy3\">.</span>Right<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> Stay<span class=\"sy1\">:</span><br/>                t<span class=\"sy3\">.</span>Stay<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> minSz <span class=\"sy2\">=</span> <span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Left<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        t<span class=\"sy3\">.</span>pos <span class=\"sy2\">-=</span> n<br/>        <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>pos &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"co1\">// Extend left</span><br/>                <span class=\"kw1\">var</span> sz <span class=\"kw4\">int</span><br/>                <span class=\"kw1\">for</span> sz <span class=\"sy2\">=</span> minSz<span class=\"sy1\">;</span> <span class=\"kw3\">cap</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:])</span><span class=\"sy3\">-</span>t<span class=\"sy3\">.</span>pos &gt;<span class=\"sy2\">=</span> sz<span class=\"sy1\">;</span> sz &lt;&lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"sy1\">}</span><br/>                newd <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>Symbol<span class=\"sy1\">,</span> sz<span class=\"sy1\">)</span><br/>                newl <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>newd<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">cap</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:])</span><br/>                n <span class=\"sy2\">:=</span> <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>newd<span class=\"sy1\">[</span>newl<span class=\"sy1\">:],</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:])</span><br/>                t<span class=\"sy3\">.</span>data <span class=\"sy2\">=</span> newd<span class=\"sy1\">[:</span>newl<span class=\"sy3\">+</span>n<span class=\"sy1\">]</span><br/>                t<span class=\"sy3\">.</span>pos <span class=\"sy2\">+=</span> newl <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>left<br/>                t<span class=\"sy3\">.</span>left <span class=\"sy2\">=</span> newl<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>pos &lt; t<span class=\"sy3\">.</span>left <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>blank <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>pos<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>left<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                                t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> t<span class=\"sy3\">.</span>blank<br/>                        <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>                t<span class=\"sy3\">.</span>left <span class=\"sy2\">=</span> t<span class=\"sy3\">.</span>pos<br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> Right<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        t<span class=\"sy3\">.</span>pos <span class=\"sy2\">+=</span> n<br/>        <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>pos &gt;<span class=\"sy2\">=</span> <span class=\"kw3\">cap</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"co1\">// Extend right</span><br/>                <span class=\"kw1\">var</span> sz <span class=\"kw4\">int</span><br/>                <span class=\"kw1\">for</span> sz <span class=\"sy2\">=</span> minSz<span class=\"sy1\">;</span> t<span class=\"sy3\">.</span>pos &gt;<span class=\"sy2\">=</span> sz<span class=\"sy1\">;</span> sz &lt;&lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"sy1\">}</span><br/>                newd <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>Symbol<span class=\"sy1\">,</span> sz<span class=\"sy1\">)</span><br/>                n <span class=\"sy2\">:=</span> <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>newd<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:],</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span>t<span class=\"sy3\">.</span>left<span class=\"sy1\">:])</span><br/>                t<span class=\"sy3\">.</span>data <span class=\"sy2\">=</span> newd<span class=\"sy1\">[:</span>t<span class=\"sy3\">.</span>left<span class=\"sy3\">+</span>n<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">);</span> t<span class=\"sy3\">.</span>pos &gt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy1\">{</span><br/>                t<span class=\"sy3\">.</span>data <span class=\"sy2\">=</span> t<span class=\"sy3\">.</span>data<span class=\"sy1\">[:</span>t<span class=\"sy3\">.</span>pos<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>                <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>blank <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>data<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                                t<span class=\"sy3\">.</span>data<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> t<span class=\"sy3\">.</span>blank<br/>                        <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> State <span class=\"kw4\">string</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Rule <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        State<br/>        Symbol<br/>        Write Symbol<br/>        Motion<br/>        Next State<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">*</span>Rule<span class=\"sy1\">)</span> key<span class=\"sy1\">()</span> key       <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> key<span class=\"sy1\">{</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>State<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Symbol<span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">*</span>Rule<span class=\"sy1\">)</span> action<span class=\"sy1\">()</span> action <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> action<span class=\"sy1\">{</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>Write<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Motion<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Next<span class=\"sy1\">}</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> key <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        State<br/>        Symbol<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> action <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        write Symbol<br/>        Motion<br/>        next State<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Machine <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        tape         <span class=\"sy3\">*</span>Tape<br/>        start<span class=\"sy1\">,</span> state State<br/>        transition   <span class=\"kw4\">map</span><span class=\"sy1\">[</span>key<span class=\"sy1\">]</span>action<br/>        l            <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"sy4\">...</span><span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"co1\">// XXX</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NewMachine<span class=\"sy1\">(</span>rules <span class=\"sy1\">[]</span>Rule<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>Machine <span class=\"sy1\">{</span><br/>        m <span class=\"sy2\">:=</span> &amp;Machine<span class=\"sy1\">{</span>transition<span class=\"sy1\">:</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>key<span class=\"sy1\">]</span>action<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rules<span class=\"sy1\">))}</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rules<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>start <span class=\"sy2\">=</span> rules<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>State<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rules <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>transition<span class=\"sy1\">[</span>r<span class=\"sy3\">.</span>key<span class=\"sy1\">()]</span> <span class=\"sy2\">=</span> r<span class=\"sy3\">.</span>action<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>Machine<span class=\"sy1\">)</span> Run<span class=\"sy1\">(</span>input <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>Tape<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy3\">.</span>tape <span class=\"sy2\">=</span> input<span class=\"sy3\">.</span>Dup<span class=\"sy1\">()</span><br/>        m<span class=\"sy3\">.</span>state <span class=\"sy2\">=</span> m<span class=\"sy3\">.</span>start<br/>        <span class=\"kw1\">for</span> cnt <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> cnt<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> m<span class=\"sy3\">.</span>l <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                        m<span class=\"sy3\">.</span>l<span class=\"sy1\">(</span><span class=\"st0\">\"%3d\u00a0%4s:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> cnt<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>state<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>tape<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                sym <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>tape<span class=\"sy3\">.</span>Read<span class=\"sy1\">()</span><br/>                act<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>transition<span class=\"sy1\">[</span>key<span class=\"sy1\">{</span>m<span class=\"sy3\">.</span>state<span class=\"sy1\">,</span> sym<span class=\"sy1\">}]</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">return</span> cnt<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>tape<br/>                <span class=\"sy1\">}</span><br/>                m<span class=\"sy3\">.</span>tape<span class=\"sy3\">.</span>Write<span class=\"sy1\">(</span>act<span class=\"sy3\">.</span>write<span class=\"sy1\">)</span><br/>                m<span class=\"sy3\">.</span>tape<span class=\"sy3\">.</span>Move<span class=\"sy1\">(</span>act<span class=\"sy3\">.</span>Motion<span class=\"sy1\">)</span><br/>                m<span class=\"sy3\">.</span>state <span class=\"sy2\">=</span> act<span class=\"sy3\">.</span>next<br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 29, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- Some elementary types for Turing Machine</span><br/><span class=\"kw1\">data</span> Move <span class=\"sy0\">=</span> MLeft <span class=\"sy0\">|</span> MRight <span class=\"sy0\">|</span> Stay <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">data</span> Tape a <span class=\"sy0\">=</span> Tape a <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/><span class=\"kw1\">data</span> Action state val <span class=\"sy0\">=</span> Action val Move state <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> <span class=\"br0\">(</span>Tape a<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>Tape x lts rts<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> left <span class=\"sy0\">++</span> <span class=\"br0\">[</span>hd<span class=\"br0\">]</span> <span class=\"sy0\">++</span> right<br/>                          <span class=\"kw1\">where</span> hd <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\"]\"</span><br/>                                left <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> lts<br/>                                right <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> rts<br/>\u00a0<br/><span class=\"co1\">-- new tape</span><br/>tape blank lts rts <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> rts <span class=\"sy0\">=</span> Tape blank left blanks<br/>                   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> Tape <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> rts<span class=\"br0\">)</span> left right<br/>                   <span class=\"kw1\">where</span> blanks <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> blank<br/>                         left <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> lts <span class=\"sy0\">++</span> blanks<br/>                         right <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> rts <span class=\"sy0\">++</span> blanks   <br/>\u00a0<br/><span class=\"co1\">-- Turing Machine</span><br/>step rules <span class=\"br0\">(</span>state<span class=\"sy0\">,</span> Tape x <span class=\"br0\">(</span>lh:lts<span class=\"br0\">)</span> <span class=\"br0\">(</span>rh:rts<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>state<span class=\"st0\">', tape'</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">where</span>  Action x<span class=\"st0\">' dir state'</span> <span class=\"sy0\">=</span> rules state x<br/>            tape<span class=\"st0\">' = move dir<br/>            move Stay = Tape x'</span> <span class=\"br0\">(</span>lh:lts<span class=\"br0\">)</span> <span class=\"br0\">(</span>rh:rts<span class=\"br0\">)</span><br/>            move MLeft <span class=\"sy0\">=</span> Tape lh lts <span class=\"br0\">(</span>x<span class=\"st0\">':rh:rts)<br/>            move MRight = Tape rh (x'</span>:lh:lts<span class=\"br0\">)</span> rts<br/>\u00a0<br/>runUTM rules stop start tape <span class=\"sy0\">=</span> steps <span class=\"sy0\">++</span> <span class=\"br0\">[</span>final<span class=\"br0\">]</span><br/>      <span class=\"kw1\">where</span> <span class=\"br0\">(</span>steps<span class=\"sy0\">,</span> final:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> stop<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>step rules<span class=\"br0\">)</span> <span class=\"br0\">(</span>start<span class=\"sy0\">,</span> tape<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 118, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">record</span> TM<span class=\"br0\">(</span>start<span class=\"sy0\">,</span>final<span class=\"sy0\">,</span>delta<span class=\"sy0\">,</span>tape<span class=\"sy0\">,</span>blank<span class=\"br0\">)</span><br/><span class=\"kw1\">record</span> delta<span class=\"br0\">(</span>old_state<span class=\"sy0\">,</span> input_symbol<span class=\"sy0\">,</span> new_state<span class=\"sy0\">,</span> output_symbol<span class=\"sy0\">,</span> direction<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">global</span> start_tape<br/><span class=\"kw2\">global</span> show_count<span class=\"sy0\">,</span> full_display<span class=\"sy0\">,</span> trace_list  <span class=\"co1\"># trace flags</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    init<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    runTuringMachine<span class=\"br0\">(</span>get_tm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> init<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    trace_list <span class=\"sy0\">:=</span> <span class=\"st0\">\":\"</span><br/>    <span class=\"kw1\">while</span> arg <span class=\"sy0\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> arg <span class=\"sy0\">==</span> <span class=\"st0\">\"-f\"</span> <span class=\"kw1\">then</span> full_display <span class=\"sy0\">:=</span> <span class=\"st0\">\"yes\"</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"kw4\">match</span><span class=\"br0\">(</span><span class=\"st0\">\"-t\"</span><span class=\"sy0\">,</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">then</span> trace_list <span class=\"sy0\">||:=</span> arg<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><br/>        <span class=\"kw1\">else</span> show_count <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> get_tm<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    D <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"What is the start state? \"</span><span class=\"br0\">)</span><br/>    start <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"What are the final states (colon separated)? \"</span><span class=\"br0\">)</span><br/>    finals <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><br/>    <span class=\"br0\">(</span>finals<span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw1\">every</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>fStates <span class=\"sy0\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"What is the tape blank symbol?\"</span><span class=\"br0\">)</span><br/>    blank <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><br/>\u00a0<br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter the delta mappings, using the following format:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>enter delta(curState,tapeSymbol) = (newState,newSymbol,direct) as\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>   curState:tapeSymbol:newState:newSymbol:direct\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>where direct is left, right, stay, or halt\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"End with a blank line.\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>line <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span><br/>        line <span class=\"sy0\">?</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span>os <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ic <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 ns <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> oc <span class=\"sy0\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 d  <span class=\"sy0\">:=</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> D<span class=\"br0\">[</span>os<span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><span class=\"sy0\">||</span>ic<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> delta<span class=\"br0\">(</span>os<span class=\"sy0\">,</span>ic<span class=\"sy0\">,</span>ns<span class=\"sy0\">,</span>oc<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>line<span class=\"sy0\">,</span> <span class=\"st0\">\" is in bad form, correct it\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>start_tape <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter the input tape\"</span><span class=\"br0\">)</span><br/>        start_tape <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> TM<span class=\"br0\">(</span>start<span class=\"sy0\">,</span>fStates<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>start_tape<span class=\"sy0\">,</span>blank<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> runTuringMachine<span class=\"br0\">(</span>tm<span class=\"br0\">)</span><br/>    trans <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">delta</span><br/>    rightside <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">tape</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>rightside <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>rightside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> rightside <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">blank</span><br/>    leftside <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    cur_state <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">start</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Machine starts in \"</span><span class=\"sy0\">,</span>cur_state<span class=\"sy0\">,</span><span class=\"st0\">\" with tape:\"</span><span class=\"br0\">)</span><br/>    show_tape<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>leftside<span class=\"sy0\">,</span>rightside<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> mapping <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>trans<span class=\"br0\">[</span>cur_state<span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><span class=\"sy0\">||</span>rightside<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        rightside<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> mapping<span class=\"sy0\">.</span><span class=\"me1\">output_symbol</span><br/>        <span class=\"kw1\">case</span> mapping<span class=\"sy0\">.</span><span class=\"me1\">direction</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"left\"</span> <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                 <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>leftside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> leftside <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">blank</span><br/>                 rightside <span class=\"sy0\">:=</span> leftside<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> rightside<br/>                 leftside<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>                 <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"right\"</span> <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                 leftside <span class=\"sy0\">||:=</span> rightside<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                 rightside<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>                 <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>rightside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> rightside <span class=\"sy0\">:=</span> tm<span class=\"sy0\">.</span><span class=\"me1\">blank</span><br/>                 <span class=\"br0\">}</span><br/>            <span class=\"st0\">\"halt\"</span> <span class=\"sy0\">:</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        cur_state <span class=\"sy0\">:=</span> mapping<span class=\"sy0\">.</span><span class=\"me1\">new_state</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>tm<span class=\"sy0\">.</span><span class=\"me1\">final</span><span class=\"sy0\">,</span>cur_state<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span><br/>        trace<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>cur_state<span class=\"sy0\">,</span>leftside<span class=\"sy0\">,</span>rightside<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Machine halts in \"</span><span class=\"sy0\">,</span>cur_state<span class=\"sy0\">,</span><span class=\"st0\">\" with tape:\"</span><span class=\"br0\">)</span><br/>    show_tape<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>leftside<span class=\"sy0\">,</span>rightside<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> trace<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>cs<span class=\"sy0\">,</span>ls<span class=\"sy0\">,</span>rs<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> count<span class=\"sy0\">,</span> last_state<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>       count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>       last_state <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>       <span class=\"br0\">}</span><br/>\u00a0<br/>    count <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>show_count <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>count <span class=\"sy0\">%</span> show_count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> show_tape<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>ls<span class=\"sy0\">,</span>rs<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"sy0\">||</span>cs<span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><span class=\"sy0\">,</span>trace_list<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>last_state <span class=\"sy0\">~==</span> cs<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>now in state: \"</span><span class=\"sy0\">,</span>cs<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>full_display <span class=\"kw1\">then</span> show_delta<span class=\"br0\">(</span>tm<span class=\"sy0\">.</span><span class=\"me1\">delta</span><span class=\"br0\">[</span>cs<span class=\"sy0\">||</span><span class=\"st0\">\":\"</span><span class=\"sy0\">||</span>rs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    last_state <span class=\"sy0\">:=</span> cs<br/>    <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> show_delta<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>m <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"NO MOVE!\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>next move is \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"delta(\"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">.</span><span class=\"me1\">old_state</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">.</span><span class=\"me1\">input_symbol</span><span class=\"sy0\">,</span><span class=\"st0\">\")\u00a0::= \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">.</span><span class=\"me1\">new_state</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">.</span><span class=\"me1\">output_symbol</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">.</span><span class=\"me1\">direction</span><span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> show_tape<span class=\"br0\">(</span>tm<span class=\"sy0\">,</span>l<span class=\"sy0\">,</span>r<span class=\"br0\">)</span><br/>    l <span class=\"sy0\">:=</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">reverse</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span>tm<span class=\"sy0\">.</span><span class=\"me1\">blank</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    r <span class=\"sy0\">:=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>tm<span class=\"sy0\">.</span><span class=\"me1\">blank</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>l<span class=\"sy0\">,</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,*</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 17, "block": "<pre class=\"j highlighted_source\">   \". noun define -. CRLF     <span class=\"co1\">NB. Fixed tacit universal Turing machine code...</span><br/>\u00a0<br/>utm=.<br/><span class=\"sy0\">(((</span>\":@:<span class=\"sy0\">(</span>]&amp;:&gt;<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">6</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> ,: <span class=\"sy0\">(</span>\":@] <span class=\"nu0\">9</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)))</span> ,. <span class=\"st_h\">':'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> ,. <span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> &gt;@:<span class=\"sy0\">(((</span><br/><span class=\"nu0\">48</span> + ]<span class=\"sy0\">)</span> { a.\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>@[\u00a0; <span class=\"sy0\">(</span>] $ <span class=\"st_h\">' '</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> , <span class=\"st_h\">'^'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> <span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span>@:<span class=\"sy0\">(</span>[ <span class=\"sy0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> $ <span class=\"nu0\">1</span>!:<span class=\"nu0\">2</span>&amp;<span class=\"nu0\">2</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><br/><span class=\"st_h\">'A changeless cycle was detected!'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"15383b55\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span><span class=\"nu0\">_1</span>\"<span class=\"nu0\">_</span> = <span class=\"nu0\">1</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))))</span>@:<span class=\"sy0\">((((</span><span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span><br/>{::<span class=\"sy0\">)</span> + <span class=\"nu0\">8</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span>\u00a0; <span class=\"nu0\">1</span> + <span class=\"nu0\">9</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> <span class=\"nu0\">3</span> <span class=\"nu0\">9</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;@:<span class=\"sy0\">((</span>0: <span class=\"nu0\">0</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span>@]`<span class=\"sy0\">(</span>&lt;@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span><br/>@]<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span><span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span>@]<span class=\"sy0\">)</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span>&amp;{<span class=\"sy0\">))</span> <span class=\"nu0\">2</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;\"<span class=\"nu0\">0</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">6</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>&lt;@[ { ]<span class=\"sy0\">)</span> <span class=\"nu0\">0</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>[ <span class=\"sy0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> $ <span class=\"nu0\">1</span>!:<span class=\"nu0\">2</span>&amp;<span class=\"nu0\">2</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(((</span>\":@:<span class=\"sy0\">(</span>]&amp;:&gt;<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">6</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> ,: <span class=\"sy0\">(</span>\":@] <span class=\"nu0\">9</span>&amp;<span class=\"sy0\">(</span>{:<br/>:<span class=\"sy0\">)))</span> ,. <span class=\"st_h\">':'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> ,. <span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> &gt;@:<span class=\"sy0\">(((</span><span class=\"nu0\">48</span> + ]<span class=\"sy0\">)</span> { a.\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>@[\u00a0; <span class=\"sy0\">(</span>] $ <span class=\"st_h\">' '</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> , <span class=\"st_h\">'^'</span>\"<span class=\"nu0\">_</span><br/><span class=\"sy0\">)</span> <span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span> = <span class=\"nu0\">4</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> | <span class=\"nu0\">9</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)))</span>@:<span class=\"sy0\">(</span>&lt;@:<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span>\u00a0; <span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> { <span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span><br/> <span class=\"nu0\">6</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;@:<span class=\"sy0\">(</span><span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> + <span class=\"nu0\">_1</span> = <span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> <span class=\"nu0\">3</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;@:<span class=\"sy0\">(((</span><span class=\"nu0\">_1</span> = <span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> {:: <span class=\"nu0\">5</span>&amp;<br/><span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> , <span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> , <span class=\"sy0\">(</span><span class=\"nu0\">3</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)</span> = #@:<span class=\"sy0\">(</span><span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)))</span> {:: <span class=\"nu0\">5</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">))</span> <span class=\"nu0\">2</span>} ]<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"8ba6a5cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span><span class=\"nu0\">_</span><br/><span class=\"nu0\">1</span>\"<span class=\"nu0\">_</span> = <span class=\"nu0\">1</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)))</span>^:<span class=\"nu0\">_</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">((</span><span class=\"nu0\">0</span>\u00a0; <span class=\"sy0\">((</span>{. , <span class=\"sy0\">(</span>{:\u00a0% 3:<span class=\"sy0\">)</span> , 3:<span class=\"sy0\">)</span>@:$ $ ,<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>}.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>\".;<br/>.<span class=\"nu0\">_2</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>&amp;<span class=\"sy0\">(</span>{::<span class=\"sy0\">)))</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>&lt;@:<span class=\"sy0\">(</span><span class=\"st_h\">''</span>\u00a0; <span class=\"nu0\">0</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span> <span class=\"nu0\">5</span>} ]<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">5</span>&amp;<span class=\"sy0\">(</span>] , a: $~ [<span class=\"sy0\">))</span>@:<span class=\"sy0\">(</span>,~<span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 238, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ListIterator</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> UTM <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> tape<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> blankSymbol<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ListIterator.html\"><span class=\"kw46\">ListIterator</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> head<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span>StateTapeSymbolPair, Transition<span class=\"sy0\">&gt;</span> transitions = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span>StateTapeSymbolPair, Transition<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> terminalStates<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> initialState<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> UTM<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span>Transition<span class=\"sy0\">&gt;</span> transitions, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> terminalStates, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> initialState, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> blankSymbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">blankSymbol</span> = blankSymbol<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Transition t\u00a0: transitions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">transitions</span>.<span class=\"me1\">put</span><span class=\"br0\">(</span>t.<span class=\"me1\">from</span>, t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">terminalStates</span> = terminalStates<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">initialState</span> = initialState<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">class</span> StateTapeSymbolPair <span class=\"br0\">{</span><br/>        <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> state<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">private</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> tapeSymbol<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> StateTapeSymbolPair<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> state, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> tapeSymbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">state</span> = state<span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">tapeSymbol</span> = tapeSymbol<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// These methods can be auto-generated by Eclipse.</span><br/>        @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">int</span> hashCode<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> prime = <span class=\"nu0\">31</span><span class=\"sy0\">;</span><br/>            <span class=\"kw3\">int</span> result = <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            result = prime <span class=\"sy0\">*</span> result<br/>                    + <span class=\"br0\">(</span><span class=\"br0\">(</span>state == <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: state.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            result = prime<br/>                    <span class=\"sy0\">*</span> result<br/>                    + <span class=\"br0\">(</span><span class=\"br0\">(</span>tapeSymbol == <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: tapeSymbol<br/>                            .<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">return</span> result<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// These methods can be auto-generated by Eclipse.</span><br/>        @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">boolean</span> equals<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">this</span> == obj<span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>obj == <span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>getClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= obj.<span class=\"me1\">getClass</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            StateTapeSymbolPair other = <span class=\"br0\">(</span>StateTapeSymbolPair<span class=\"br0\">)</span> obj<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state == <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>other.<span class=\"me1\">state</span> <span class=\"sy0\">!</span>= <span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>                    <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>state.<span class=\"me1\">equals</span><span class=\"br0\">(</span>other.<span class=\"me1\">state</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tapeSymbol == <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>other.<span class=\"me1\">tapeSymbol</span> <span class=\"sy0\">!</span>= <span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>                    <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>tapeSymbol.<span class=\"me1\">equals</span><span class=\"br0\">(</span>other.<span class=\"me1\">tapeSymbol</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>        <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"st0\">\"(\"</span> + state + <span class=\"st0\">\",\"</span> + tapeSymbol + <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">class</span> Transition <span class=\"br0\">{</span><br/>        <span class=\"kw2\">private</span> StateTapeSymbolPair from<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">private</span> StateTapeSymbolPair to<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">private</span> <span class=\"kw3\">int</span> direction<span class=\"sy0\">;</span> <span class=\"co1\">// -1 left, 0 neutral, 1 right.</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> Transition<span class=\"br0\">(</span>StateTapeSymbolPair from, StateTapeSymbolPair to, <span class=\"kw3\">int</span> direction<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <span class=\"kw2\">this</span>.<span class=\"me1\">from</span> = from<span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">to</span> = to<span class=\"sy0\">;</span><br/>            <span class=\"kw2\">this</span>.<span class=\"me1\">direction</span> = direction<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>        <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> from + <span class=\"st0\">\"=&gt;\"</span> + to + <span class=\"st0\">\"/\"</span> + direction<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> initializeTape<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Arbitrary Strings as symbols.</span><br/>        tape = input<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> initializeTape<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> input<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Uses single characters as symbols.</span><br/>        tape = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tape.<span class=\"me1\">add</span><span class=\"br0\">(</span>input.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> runTM<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Returns null if not in terminal state.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tape.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tape.<span class=\"me1\">add</span><span class=\"br0\">(</span>blankSymbol<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        head = tape.<span class=\"me1\">listIterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        head.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        head.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        StateTapeSymbolPair tsp = <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span>initialState, tape.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>transitions.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>tsp<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// While a matching transition exists.</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"kw2\">this</span> + <span class=\"st0\">\" --- \"</span> + transitions.<span class=\"me1\">get</span><span class=\"br0\">(</span>tsp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Transition trans = transitions.<span class=\"me1\">get</span><span class=\"br0\">(</span>tsp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            head.<span class=\"me1\">set</span><span class=\"br0\">(</span>trans.<span class=\"me1\">to</span>.<span class=\"me1\">tapeSymbol</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Write tape symbol.</span><br/>            tsp.<span class=\"me1\">state</span> = trans.<span class=\"me1\">to</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span> <span class=\"co1\">// Change state.</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trans.<span class=\"me1\">direction</span> == -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Go left.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>head.<span class=\"me1\">hasPrevious</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    head.<span class=\"me1\">add</span><span class=\"br0\">(</span>blankSymbol<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Extend tape.</span><br/>                <span class=\"br0\">}</span><br/>                tsp.<span class=\"me1\">tapeSymbol</span> = head.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Memorize tape symbol.</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trans.<span class=\"me1\">direction</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Go right.</span><br/>                head.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>head.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    head.<span class=\"me1\">add</span><span class=\"br0\">(</span>blankSymbol<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Extend tape.</span><br/>                    head.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                tsp.<span class=\"me1\">tapeSymbol</span> = head.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Memorize tape symbol.</span><br/>                head.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                tsp.<span class=\"me1\">tapeSymbol</span> = trans.<span class=\"me1\">to</span>.<span class=\"me1\">tapeSymbol</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"kw2\">this</span> + <span class=\"st0\">\" --- \"</span> + tsp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>terminalStates.<span class=\"me1\">contains</span><span class=\"br0\">(</span>tsp.<span class=\"me1\">state</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> tape<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"kw4\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>    <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>        \t<span class=\"kw3\">int</span> headPos = head.<span class=\"me1\">previousIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s = <span class=\"st0\">\"[ \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= headPos<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                s += tape.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            s += <span class=\"st0\">\"[H] \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = headPos + <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> tape.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                s += tape.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw2\">return</span> s + <span class=\"st0\">\"]\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Simple incrementer.</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> init = <span class=\"st0\">\"q0\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> blank = <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> term = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        term.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"qf\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span>Transition<span class=\"sy0\">&gt;</span> trans = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span>Transition<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"qf\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        UTM machine = <span class=\"kw2\">new</span> UTM<span class=\"br0\">(</span>trans, term, init, blank<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        machine.<span class=\"me1\">initializeTape</span><span class=\"br0\">(</span><span class=\"st0\">\"111\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Output (si): \"</span> + machine.<span class=\"me1\">runTM</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Busy Beaver (overwrite variables from above).</span><br/>        init = <span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        term.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        term.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"halt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        blank = <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        trans.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Change state from \"a\" to \"b\" if \"0\" is read on tape, write \"1\" and go to the right. (-1 left, 0 nothing, 1 right.)</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"halt\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        machine = <span class=\"kw2\">new</span> UTM<span class=\"br0\">(</span>trans, term, init, blank<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        machine.<span class=\"me1\">initializeTape</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Output (bb): \"</span> + machine.<span class=\"me1\">runTM</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Sorting test (overwrite variables from above).</span><br/>        init = <span class=\"st0\">\"s0\"</span><span class=\"sy0\">;</span><br/>        blank = <span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        term = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        term.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"see\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        trans = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span>Transition<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s0\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s0\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s0\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s0\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"se\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s1\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s2\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s2\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s2\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s2\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s2\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"se\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s3\"</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"s0\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"se\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"se\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trans.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> Transition<span class=\"br0\">(</span><span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"se\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, <span class=\"kw2\">new</span> StateTapeSymbolPair<span class=\"br0\">(</span><span class=\"st0\">\"see\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        machine = <span class=\"kw2\">new</span> UTM<span class=\"br0\">(</span>trans, term, init, blank<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        machine.<span class=\"me1\">initializeTape</span><span class=\"br0\">(</span><span class=\"st0\">\"babbababaa\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Output (sort): \"</span> + machine.<span class=\"me1\">runTM</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 44, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> tm<span class=\"br0\">(</span>d<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>t<span class=\"sy0\">,</span>... <span class=\"me1\">r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tdocument.<span class=\"me1\">write</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span> <span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">||</span>i<span class=\"sy0\">&gt;=</span>t.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>\t<span class=\"kw1\">var</span> re<span class=\"sy0\">=</span><span class=\"kw1\">new</span> RegExp<span class=\"br0\">(</span>b<span class=\"sy0\">,</span><span class=\"st0\">'g'</span><span class=\"br0\">)</span><br/>\twrite<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>t<span class=\"sy0\">=</span>t.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">var</span> p<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> r.<span class=\"me1\">forEach</span><span class=\"br0\">(</span>e<span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>w<span class=\"sy0\">,</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">{</span>p<span class=\"br0\">[</span>s<span class=\"sy0\">+</span><span class=\"st0\">'.'</span><span class=\"sy0\">+</span>r<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">{</span>w<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>m<span class=\"sy0\">:</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"st0\">'RL'</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span>... <span class=\"me1\">e</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"co2\">/[ .:,]+/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> s<span class=\"sy0\">!=</span>e<span class=\"sy0\">;</span> n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\twith <span class=\"br0\">(</span>p<span class=\"br0\">[</span>s<span class=\"sy0\">+</span><span class=\"st0\">'.'</span><span class=\"sy0\">+</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>w<span class=\"sy0\">,</span>s<span class=\"sy0\">=</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">+=</span>m<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>t.<span class=\"me1\">unshift</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span>t.<span class=\"me1\">length</span><span class=\"br0\">)</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>b<br/>\t\twrite<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\tdocument.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">function</span> write<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt <span class=\"sy0\">=</span> t.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\t\tt <span class=\"sy0\">=</span> t.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'&lt;u&gt;'</span> <span class=\"sy0\">+</span> t.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'&lt;/u&gt;'</span> <span class=\"sy0\">+</span> t.<span class=\"me1\">substr</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tdocument.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"sy0\">+</span>n<span class=\"br0\">)</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"sy0\">/</span>g<span class=\"sy0\">,</span><span class=\"st0\">'&amp;nbsp;'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">': '</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"st0\">' ['</span><span class=\"sy0\">,</span> t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>re<span class=\"sy0\">,</span><span class=\"st0\">'&amp;nbsp;'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">']'</span><span class=\"sy0\">,</span> <span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tm<span class=\"br0\">(</span> <span class=\"st0\">'Unary incrementer'</span><span class=\"sy0\">,</span><br/><span class=\"co1\">//\t s    e   i   b    t</span><br/>\t<span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'h'</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'111'</span><span class=\"sy0\">,</span><br/><span class=\"co1\">//\t s.r: w, m, n</span><br/>\t<span class=\"st0\">'a.1: 1, L, a'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'a.B: 1, S, h'</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>tm<span class=\"br0\">(</span> <span class=\"st0\">'Unary adder'</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1110111'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'1.1: 0, R, 2'</span><span class=\"sy0\">,</span> <span class=\"co1\">// write 0 rigth goto 2</span><br/>\t<span class=\"st0\">'2.1: 1, R, 2'</span><span class=\"sy0\">,</span> <span class=\"co1\">// while (1) rigth</span><br/>\t<span class=\"st0\">'2.0: 1, S, 0'</span>  <span class=\"co1\">// write 1 stay halt</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>tm<span class=\"br0\">(</span> <span class=\"st0\">'Three-state busy beaver'</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'1.0: 1, R, 2'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'1.1: 1, R, 0'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'2.0: 0, R, 3'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'2.1: 1, R, 2'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'3.0: 1, L, 3'</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">'3.1: 1, L, 1'</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Kotlin", "loc": 172, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Dir <span class=\"br0\">{</span> LEFT, RIGHT, STAY <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Rule<span class=\"br0\">(</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> state1<span class=\"sy0\">:</span> String,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbol1<span class=\"sy0\">:</span> Char,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbol2<span class=\"sy0\">:</span> Char,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dir<span class=\"sy0\">:</span> Dir,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> state2<span class=\"sy0\">:</span> String<br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Tape<span class=\"br0\">(</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> symbol<span class=\"sy0\">:</span> Char,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> left<span class=\"sy0\">:</span> Tape<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> right<span class=\"sy0\">:</span> Tape<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Turing<span class=\"br0\">(</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> states<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> finalStates<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbols<span class=\"sy0\">:</span> CharArray,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blank<span class=\"sy0\">:</span> Char,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> state<span class=\"sy0\">:</span> String,<br/>    tapeInput<span class=\"sy0\">:</span> CharArray,<br/>    rules<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span><br/><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tape<span class=\"sy0\">:</span> Tape<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> transitions <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>states.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> arrayOfNulls<span class=\"sy0\">&lt;</span>Rule<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>symbols.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until tapeInput.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            move<span class=\"br0\">(</span>Dir.<span class=\"me1\">RIGHT</span><span class=\"br0\">)</span><br/>            tape<span class=\"sy0\">!!</span>.<span class=\"me1\">symbol</span> <span class=\"sy0\">=</span> tapeInput<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>tapeInput.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> move<span class=\"br0\">(</span>Dir.<span class=\"me1\">RIGHT</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>tape<span class=\"sy0\">!!</span>.<span class=\"me1\">left</span> <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> tape <span class=\"sy0\">=</span> tape<span class=\"sy0\">!!</span>.<span class=\"me1\">left</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rules.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rule <span class=\"sy0\">=</span> rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            transitions<span class=\"br0\">[</span>stateIndex<span class=\"br0\">(</span>rule.<span class=\"me1\">state1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>symbolIndex<span class=\"br0\">(</span>rule.<span class=\"me1\">symbol1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> rule<br/>        <span class=\"br0\">}</span>            <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun stateIndex<span class=\"br0\">(</span>state<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> states.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>state<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun symbolIndex<span class=\"br0\">(</span>symbol<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> symbols.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>symbol<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun move<span class=\"br0\">(</span>dir<span class=\"sy0\">:</span> Dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> orig <span class=\"sy0\">=</span> tape<br/>        when <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Dir.<span class=\"me1\">RIGHT</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>orig <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> orig.<span class=\"me1\">right</span> <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tape <span class=\"sy0\">=</span> orig.<span class=\"me1\">right</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                    tape <span class=\"sy0\">=</span> Tape<span class=\"br0\">(</span>blank<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>orig <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        tape<span class=\"sy0\">!!</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> orig<br/>                        orig.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> tape<br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Dir.<span class=\"me1\">LEFT</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>orig <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> orig.<span class=\"me1\">left</span> <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tape <span class=\"sy0\">=</span> orig.<span class=\"me1\">left</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                    tape <span class=\"sy0\">=</span> Tape<span class=\"br0\">(</span>blank<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>orig <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        tape<span class=\"sy0\">!!</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> orig<br/>                        orig.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> tape<br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Dir.<span class=\"me1\">STAY</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun printState<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"%-10s \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>state<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> tape<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>t<span class=\"sy0\">!!</span>.<span class=\"me1\">left</span> <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"br0\">)</span> t <span class=\"sy0\">=</span> t.<span class=\"me1\">left</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>t <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>t <span class=\"sy0\">==</span> tape<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"[${t.symbol}]\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>           print<span class=\"br0\">(</span><span class=\"st0\">\" ${t.symbol} \"</span><span class=\"br0\">)</span><br/>            t <span class=\"sy0\">=</span> t.<span class=\"me1\">right</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun run<span class=\"br0\">(</span>maxLines<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            printState<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>finalState in finalStates<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>finalState <span class=\"sy0\">==</span> state<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>++lines <span class=\"sy0\">==</span> maxLines<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"(Only the first $maxLines lines displayed)\"</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rule <span class=\"sy0\">=</span> transitions<span class=\"br0\">[</span>stateIndex<span class=\"br0\">(</span>state<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>symbolIndex<span class=\"br0\">(</span>tape<span class=\"sy0\">!!</span>.<span class=\"me1\">symbol</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            tape<span class=\"sy0\">!!</span>.<span class=\"me1\">symbol</span> <span class=\"sy0\">=</span> rule<span class=\"sy0\">!!</span>.<span class=\"me1\">symbol2</span><br/>            move<span class=\"br0\">(</span>rule.<span class=\"me1\">dir</span><span class=\"br0\">)</span><br/>            state <span class=\"sy0\">=</span> rule.<span class=\"me1\">state2</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Simple incrementer\"</span><span class=\"br0\">)</span><br/>    Turing<span class=\"br0\">(</span><br/>        states      <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">\"qf\"</span><span class=\"br0\">)</span>,<br/>        finalStates <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"qf\"</span><span class=\"br0\">)</span>,<br/>        symbols     <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'B'</span>, <span class=\"st0\">'1'</span><span class=\"br0\">)</span>,<br/>        blank       <span class=\"sy0\">=</span> <span class=\"st0\">'B'</span>,<br/>        state       <span class=\"sy0\">=</span> <span class=\"st0\">\"q0\"</span>,<br/>        tapeInput   <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span><span class=\"br0\">)</span>,<br/>        rules       <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"q0\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"q0\"</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">STAY</span>, <span class=\"st0\">\"qf\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Three-state busy beaver\"</span><span class=\"br0\">)</span><br/>    Turing<span class=\"br0\">(</span><br/>        states      <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"halt\"</span><span class=\"br0\">)</span>,<br/>        finalStates <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"halt\"</span><span class=\"br0\">)</span>,<br/>        symbols     <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span><span class=\"br0\">)</span>,<br/>        blank       <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span>,<br/>        state       <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span>,<br/>        tapeInput   <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        rules       <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"c\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">STAY</span>, <span class=\"st0\">\"halt\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Five-state two-symbol probable busy beaver\"</span><span class=\"br0\">)</span><br/>    Turing<span class=\"br0\">(</span><br/>        states      <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">\"B\"</span>, <span class=\"st0\">\"C\"</span>, <span class=\"st0\">\"D\"</span>, <span class=\"st0\">\"E\"</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span>,<br/>        finalStates <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"H\"</span><span class=\"br0\">)</span>,<br/>        symbols     <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span><span class=\"br0\">)</span>,<br/>        blank       <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span>,<br/>        state       <span class=\"sy0\">=</span> <span class=\"st0\">\"A\"</span>,<br/>        tapeInput   <span class=\"sy0\">=</span> charArrayOf<span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        rules       <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"B\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">RIGHT</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"C\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'0'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"E\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"D\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"A\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"D\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"D\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"E\"</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span>, Dir.<span class=\"me1\">STAY</span>, <span class=\"st0\">\"H\"</span><span class=\"br0\">)</span>,<br/>            Rule<span class=\"br0\">(</span><span class=\"st0\">\"E\"</span>, <span class=\"st0\">'1'</span>, <span class=\"st0\">'0'</span>, Dir.<span class=\"me1\">LEFT</span>, <span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 84, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Machine definitions</span><br/><span class=\"kw1\">local</span> incrementer <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    name <span class=\"sy0\">=</span> <span class=\"st0\">\"Simple incrementer\"</span><span class=\"sy0\">,</span><br/>    initState <span class=\"sy0\">=</span> <span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span><br/>    endState <span class=\"sy0\">=</span> <span class=\"st0\">\"qf\"</span><span class=\"sy0\">,</span><br/>    blank <span class=\"sy0\">=</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><br/>    rules <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"q0\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"q0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"stay\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"qf\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">local</span> threeStateBB <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    name <span class=\"sy0\">=</span> <span class=\"st0\">\"Three-state busy beaver\"</span><span class=\"sy0\">,</span><br/>    initState <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><br/>    endState <span class=\"sy0\">=</span> <span class=\"st0\">\"halt\"</span><span class=\"sy0\">,</span><br/>    blank <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span><br/>    rules <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"stay\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"halt\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">local</span> fiveStateBB <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    name <span class=\"sy0\">=</span> <span class=\"st0\">\"Five-state busy beaver\"</span><span class=\"sy0\">,</span><br/>    initState <span class=\"sy0\">=</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><br/>    endState <span class=\"sy0\">=</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span><br/>    blank <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span><br/>    rules <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"stay\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- Display a representation of the tape and machine state on the screen</span><br/><span class=\"kw1\">function</span> show <span class=\"br0\">(</span>state<span class=\"sy0\">,</span> headPos<span class=\"sy0\">,</span> tape<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> leftEdge <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> tape<span class=\"br0\">[</span>leftEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> leftEdge <span class=\"sy0\">=</span> leftEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> state <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>| \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> leftEdge<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>tape <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> pos <span class=\"sy0\">==</span> headPos <span class=\"kw1\">then</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span> <span class=\"sy0\">..</span> tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"] \"</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Simulate a turing machine</span><br/><span class=\"kw1\">function</span> UTM <span class=\"br0\">(</span>machine<span class=\"sy0\">,</span> tape<span class=\"sy0\">,</span> countOnly<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> state<span class=\"sy0\">,</span> headPos<span class=\"sy0\">,</span> counter <span class=\"sy0\">=</span> machine<span class=\"sy0\">.</span>initState<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">..</span> machine<span class=\"sy0\">.</span>name<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.rep</span><span class=\"br0\">(</span><span class=\"st0\">\"=\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>machine<span class=\"sy0\">.</span>name<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> countOnly <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" State\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"| Tape [head]<span class=\"es1\">\\n</span>---------------------\"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">repeat</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> tape<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"kw1\">then</span> tape<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> machine<span class=\"sy0\">.</span>blank <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> countOnly <span class=\"kw1\">then</span> show<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> headPos<span class=\"sy0\">,</span> tape<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> rule <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>machine<span class=\"sy0\">.</span>rules<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> rule<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> state <span class=\"kw2\">and</span> rule<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> tape<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>                tape<span class=\"br0\">[</span>headPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rule<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> rule<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"left\"</span> <span class=\"kw1\">then</span> headPos <span class=\"sy0\">=</span> headPos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>                <span class=\"kw1\">if</span> rule<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"right\"</span> <span class=\"kw1\">then</span> headPos <span class=\"sy0\">=</span> headPos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>                state <span class=\"sy0\">=</span> rule<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        counter <span class=\"sy0\">=</span> counter <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">until</span> state <span class=\"sy0\">==</span> machine<span class=\"sy0\">.</span>endState<br/>    <span class=\"kw1\">if</span> countOnly <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Steps taken: \"</span> <span class=\"sy0\">..</span> counter<span class=\"br0\">)</span> <span class=\"kw1\">else</span> show<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> headPos<span class=\"sy0\">,</span> tape<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/>UTM<span class=\"br0\">(</span>incrementer<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>UTM<span class=\"br0\">(</span>threeStateBB<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>UTM<span class=\"br0\">(</span>fiveStateBB<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"countOnly\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>left = 1; right = -1; stay = 0;<br/>cmp[s_]\u00a0:= ToExpression[StringSplit[s, \",\"]];<br/>utm[rules_, initial_, head_]\u00a0:= <br/>  Module[{tape = initial, rh = head, n = 1},<br/>   Clear[nxt];<br/>   nxt[state_, field_]\u00a0:= <br/>    nxt[state, field] = Position[rules, {rules[[state, 5]], field, _, _, _}][[1, 1]];<br/>   n = Position[rules, {rules[[n, 1]], BitGet[tape, rh], _, _, _}][[1,1]];<br/>   While[rules[[n, 4]]\u00a0!= 0,<br/>    If[rules[[n, 3]]\u00a0!= BitGet[tape, rh],<br/>     If[rules[[n, 3]] == 1, tape = BitSet[tape, rh], <br/>      tape = BitClear[tape, rh]]];<br/>    rh = rh + rules[[n, 4]];<br/>    If[rh &lt; 0, rh = 0; tape = 2*tape];<br/>    n = nxt[n, BitGet[tape, rh]];<br/>    ]; {tape, rh}<br/>   ];<br/>]; </pre>"}, {"lang": "Mercury", "loc": 58, "block": "<pre class=\"text highlighted_source\">:- module turing.<br/>\u00a0<br/>:- interface.<br/>\u00a0<br/>:- import_module list.<br/>:- import_module set.<br/>\u00a0<br/>:- type config(State, Symbol)<br/>    ---&gt; config(initial_state \u00a0:: State,<br/>                halting_states\u00a0:: set(State),<br/>                blank         \u00a0:: Symbol ).<br/>\u00a0<br/>:- type action ---&gt; left\u00a0; stay\u00a0; right.<br/>\u00a0<br/>:- func turing(config(State, Symbol),<br/>               pred(State, Symbol, Symbol, action, State),<br/>               list(Symbol)) = list(Symbol).<br/>:- mode turing(in,<br/>               pred(in, in, out, out, out) is semidet,<br/>               in) = out is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module pair.<br/>:- import_module require.<br/>\u00a0<br/>turing(<a class=\"__cf_email__\" data-cfemail=\"2f6c40414946486f4c4041494648\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Start, _, _), Rules, Input) = Output\u00a0:-<br/>    (Left-Right) = perform(Config, Rules, Start, ([]-Input)),<br/>    Output = append(reverse(Left), Right).<br/>\u00a0<br/>:- func perform(config(State, Symbol),<br/>                pred(State, Symbol, Symbol, action, State),<br/>                State, pair(list(Symbol))) = pair(list(Symbol)).<br/>:- mode perform(in, pred(in, in, out, out, out) is semidet,<br/>                in, in) = out is det.<br/>perform(<a class=\"__cf_email__\" data-cfemail=\"51123e3f37383611323e3f373836\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(_, Halts, Blank), Rules, State,<br/>        <a class=\"__cf_email__\" data-cfemail=\"ca83a4babfbe8a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(LeftInput-RightInput)) = Output\u00a0:-<br/>    symbol(RightInput, Blank, RightNew, Symbol),<br/>    ( set.member(State, Halts) -&gt;<br/>        Output = Input<br/>   \u00a0; Rules(State, Symbol, NewSymbol, Action, NewState) -&gt;<br/>        NewLeft  = pair(LeftInput, [NewSymbol|RightNew]),<br/>        NewRight = action(Action, Blank, NewLeft),<br/>        Output   = perform(Config, Rules, NewState, NewRight)<br/>   \u00a0;<br/>        error(\"an impossible state has apparently become possible\") ).<br/>\u00a0<br/>:- pred symbol(list(Symbol), Symbol, list(Symbol), Symbol).<br/>:- mode symbol(in, in, out, out) is det.<br/>symbol([],        Blank, [],  Blank).<br/>symbol([Sym|Rem], _,     Rem, Sym).<br/>\u00a0<br/>:- func action(action, State, pair(list(State))) = pair(list(State)).<br/>action(left,  Blank, ([]-Right))            = ([]-[Blank|Right]).<br/>action(left,  _,     ([Left|Lefts]-Rights)) = (Lefts-[Left|Rights]).<br/>action(stay,  _,     Tape)                  = Tape.<br/>action(right, Blank, (Left-[]))             = ([Blank|Left]-[]).<br/>action(right, _,     (Left-[Right|Rights])) = ([Right|Left]-Rights).</pre>"}, {"lang": "NetLogo", "loc": 375, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>;; \"A Turing Turtle\": a Turing Machine implemented in NetLogo<br/>;;    by Dan Dewey 1/16/2016<br/>;;<br/>;; This NetLogo code implements a Turing Machine, see, e.g.,<br/>;;    http://en.wikipedia.org/wiki/Turing_machine<br/>;; The Turing machine fits nicely into the NetLogo paradigm in which<br/>;; there are agents (aka the turtles), that move around<br/>;; in a world of \"patches\" (2D cells).<br/>;; Here, a single agent represents the Turing machine read/write head<br/>;; and the patches represent the Turing tape values via their colors.<br/>;; The 2D array of patches is treated as a single long 1D tape in an<br/>;; obvious way.<br/>\u00a0<br/>;; This program is presented as a NetLogo example on the page:<br/>;;    http://rosettacode.org/wiki/Universal_Turing_machine<br/>;;    This file may be larger than others on that page, note however<br/>;;    that I include many comments in the code and I have made no<br/>;;    effort to 'condense' the code, prefering clarity over compactness.<br/>;; A demo and discussion of this program is on the web page:<br/>;;    http://sites.google.com/site/dan3deweyscspaimsportfolio/extra-turing-machine<br/>;; The Copy example machine was taken from:<br/>;;    http://en.wikipedia.org/wiki/Turing_machine_examples<br/>;; The \"Busy Beaver\" machines encoded below were taken from:<br/>;;    http://www.logique.jussieu.fr/~michel/ha.html<br/>\u00a0<br/>;; The implementation here allows 3 symbols (blank, 0, 1) on the tape<br/>;; and 3 head motions (left, stay, right).<br/>\u00a0<br/>;; The 2D world is nominally set to be 29x29, going from (-14,-14) to<br/>;; (14,14) from lower left to upper right and with (0,0) at the center.<br/>;; This gives a total Turing tape length of 29^2 = 841 cells, sufficient for the<br/>;; \"Lazy\" Beaver 5,2 example.<br/>;; Since the max-pxcor variable is used in the code below (as opposed to<br/>;; a hard-coded number), the effective tape size can be changed by<br/>;; changing the size of the 2D world with the Settings...  button on the interface.<br/>\u00a0<br/>;; The \"Info\" tab of the NetLogo interface contains some further comments.<br/>;; - - - - - - -<br/>\u00a0<br/>\u00a0<br/>;; - - - - - - - - - - - Global/Agent variables<br/>;; These three 2D arrays (lists of lists) encode the Turing Machine rules:<br/>;;    WhatToWrite:  -1 (Blank), 0, 1<br/>;;    HowToMove:    -1 (left), 0(stay), 1 (right)<br/>;;    NextState:    0 to N-1, negative value goes to a halt state.<br/>;; The above are a function of the current state and the current tape (patch) value.<br/>;; MachineState is used by the turtle to pass the current state of the Turing machine<br/>;; (or the halt code) to the observer.<br/>globals [ WhatToWrite HowToMove NextState MachineState<br/>  \u00a0;; some other golobals of secondary importance...<br/>  \u00a0;; set different patch colors to record the Turing tape values<br/>    BlankColor ZeroColor OneColor<br/>  \u00a0;; a delay constant to slow down the operation<br/>    RealTimePerTick ]<br/>\u00a0<br/>;; We'll have one turtle which is the Turing machine read/write head<br/>;; it will keep track of the current Turing state in its own MyState value<br/>turtles-own [ MyState ]<br/>\u00a0<br/>\u00a0<br/>;; - - - - - - - - - - -<br/>to Setup \u00a0;; sets up the world<br/>  clear-all \u00a0;; clears the world first<br/>\u00a0<br/> \u00a0;; Try to not have (too many) ad hoc numbers in the code,<br/> \u00a0;; collect and set various values here especially if they might be used in multiple places:<br/> \u00a0;;    The colors for Blank, Zero and One\u00a0:   (user can can change as desired)<br/>  set BlankColor 2\u00a0;; dark gray<br/>  set OneColor green<br/>  set ZeroColor red<br/> \u00a0;;    slow it down for the humans to watch<br/>  set RealTimePerTick 0.2 \u00a0;; have simulation go at nice realtime speed<br/>\u00a0<br/>  create-turtles 1  \u00a0;; create the one Turing turtle<br/>  [                 \u00a0;; set default parameters<br/>    set size 2      \u00a0;; set a nominal size<br/>    set color yellow\u00a0;; color of border<br/>   \u00a0;; set the starting location, some Turing programs will adjust this if needed:<br/>    setxy 0 0\u00a0;; -1 * max-pxcor -1 * max-pxcor<br/>    set shape \"square2empty\"  \u00a0;; edited version of \"square 2\" to have clear in middle<br/>\u00a0<br/>   \u00a0;; set the starting state - always 0<br/>    set MyState 0<br/>    set MachineState 0  \u00a0;; the turtle will update this global value from now on<br/>  ]<br/>\u00a0<br/> \u00a0;; Define the Turing machine rules with 2D lists.<br/> \u00a0;; Based on the selection made on interface panel, setting the string Turing_Program_Selection.<br/> \u00a0;; This routine has all the Turing 'programs' in it - it's at the very bottom of this file.<br/>  LoadTuringProgram<br/>\u00a0<br/> \u00a0;; the environment, e.g. the Turing tape<br/>  ask patches<br/>  [<br/>   \u00a0;; all patches are set to the blank color<br/>    set pcolor BlankColor<br/>  ]<br/>\u00a0<br/> \u00a0;; keep track of time; each tick is a Turing step<br/>  reset-ticks<br/>end<br/>\u00a0<br/>\u00a0<br/>;; - - - - - - - - - - - - - - - -<br/>to Go \u00a0;; this  repeatedly does steps<br/>\u00a0<br/> \u00a0;; The turtle does the main work<br/>  ask turtles<br/>  [<br/>    DoOneStep<br/>    wait RealTimePerTick<br/>  ]<br/>\u00a0<br/>  tick<br/>\u00a0<br/> \u00a0;; The Turing turtle will die if it tries to go beyond the cells,<br/> \u00a0;; in that case (no turtles left) we'll stop.<br/> \u00a0;; Also stop if the MachineState has been set to a negative number (a halt state).<br/>  if ((count turtles = 0) or (MachineState &lt; 0))<br/>  [ stop ]<br/>\u00a0<br/>end<br/>\u00a0<br/>to DoOneStep<br/>  \u00a0;; have the turtle do one Turing step<br/>  \u00a0;; First, 'read the tape', i.e., based on the patch color here:<br/>   let tapeValue GetTapeValue<br/>\u00a0<br/>  \u00a0;; using the tapeValue and MyState, get the desired actions here:<br/>  \u00a0;; (the item commands extract the appropriate value from the list-of-lists)<br/>   let myWrite item (tapeValue + 1) (item MyState WhatToWrite)<br/>   let myMove item (tapeValue + 1) (item MyState HowToMove)<br/>   let myNextState item (tapeValue + 1) (item MyState NextState)<br/>\u00a0<br/>  \u00a0;; Write to the tape as appropriate<br/>   SetTapeValue myWrite<br/>\u00a0<br/>  \u00a0;; Move as appropriate<br/>   if (myMove = 1) [MoveForward]<br/>   if (myMove = -1) [MoveBackward]<br/>\u00a0<br/>  \u00a0;; Go to the next state; check if it is a halt state.<br/>  \u00a0;; Update the global MachineState value<br/>   set MachineState myNextState<br/>   ifelse (myNextState &lt; 0)<br/>   [<br/>    \u00a0;; It's a halt state.  The negative MachineState will signal the stop.<br/>    \u00a0;; Go back to the starting state so it can be re-run if desired.<br/>     set MyState 0]<br/>   [<br/>    \u00a0;; Not a halt state, so change to the desired next state<br/>     set MyState myNextState<br/>     ]<br/>end<br/>\u00a0<br/>to MoveForward<br/> \u00a0;; move the turtle forward one cell, including line wrapping.<br/>  set heading 90<br/>  ifelse (xcor = max-pxcor)<br/>    [set xcor -1 * max-pxcor<br/>     \u00a0;; and go up a row if possible... otherwise die<br/>      ifelse ycor = max-pxcor<br/>      [ die ] \u00a0;; tape too short - a somewhat crude end of things\u00a0;-)<br/>      [set ycor ycor + 1]<br/>    ]<br/>    [jump 1]<br/>end<br/>\u00a0<br/>to MoveBackward<br/> \u00a0;; move the turtle backward one cell, including line-wrapping.<br/>  set heading -90<br/>  ifelse (xcor = -1 * max-pxcor)<br/>    [<br/>      set xcor max-pxcor<br/>     \u00a0;; and go down a row... or die<br/>      ifelse ycor = -1 * max-pxcor<br/>      [ die ] \u00a0;; tape too short - a somewhat crude end of things\u00a0;-)<br/>      [set ycor ycor - 1]<br/>    ]<br/>    [jump 1]<br/>end<br/>\u00a0<br/>to-report GetTapeValue<br/> \u00a0;; report the tape color equivalent value<br/>  if (pcolor = ZeroColor) [report 0]<br/>  if (pcolor = OneColor) [report 1]<br/>  report -1<br/>end<br/>\u00a0<br/>to SetTapeValue [ value ]<br/> \u00a0;; write the appropriate color on the tape<br/>  ifelse (value = 1)<br/>  [set pcolor OneColor]<br/>  [ ifelse (value = 0)<br/>    [set pcolor ZeroColor][set pcolor BlankColor]]<br/>end<br/>\u00a0<br/>\u00a0<br/>;; - - - - - OK, here are the data for the various Turing programs...<br/>;; Note that besdes settting the rules (array values) these sections can also<br/>;; include commands to clear the tape, position the r/w head, adjust wait time, etc.<br/>to LoadTuringProgram<br/>\u00a0<br/> \u00a0;; A template of the rules structure: a list of lists<br/> \u00a0;; E.g. values are given for States 0 to 4, when looking at Blank, Zero, One:<br/> \u00a0;; For 2-symbol machines use Blank(-1) and One(1) and ignore the middle values (never see zero).<br/> \u00a0;; Normal Halt will be state -1, the -9 default shows an unexpected halt.<br/> \u00a0;;                       state 0       state 1       state 2       state 3       state 4<br/>  set WhatToWrite (list (list -1 0 1) (list -1 0 1) (list -1 0 1) (list -1 0 1) (list -1 0 1) )<br/>  set HowToMove    (list (list 0 0 0)  (list 0 0 0)  (list 0 0 0)  (list 0 0 0)  (list 0 0 0) )<br/>  set NextState(list (list -9 -9 -9) (list -9 -9 -9) (list -9 -9 -9) (list -9 -9 -9) (list -9 -9 -9) )<br/>\u00a0<br/> \u00a0;; Fill the rules based on the selected case<br/>  if (Turing_Program_Selection = \"Simple Incrementor\")<br/>  [<br/>   \u00a0;; simple Incrementor - this is from the RosettaCode Universal Turing Machine page - very simple!<br/>    set WhatToWrite (list (list 1 0 1) )<br/>    set HowToMove   (list (list 0 0 1) )<br/>    set NextState   (list (list -1 -9 0) )<br/>  ]<br/>\u00a0<br/> \u00a0;; Fill the rules based on the selected case<br/>  if (Turing_Program_Selection = \"Incrementor w/Return\")<br/>  [<br/>   \u00a0;; modified Incrementor: it returns to the first 1 on the left.<br/>   \u00a0;; This version allows the \"Copy Ones to right\" program to directly follow it.<br/>   \u00a0;;                     move right    append one    back to beginning<br/>    set WhatToWrite (list (list -1 0 1) (list 1 0 1)   (list -1 0 1) )<br/>    set HowToMove   (list (list 1 0 1)  (list 0 0 1)   (list 1 0 -1) )<br/>    set NextState   (list (list 1 -9 1) (list 2 -9 1)  (list -1 -9 2) )<br/>  ]<br/>\u00a0<br/> \u00a0;; Fill the rules based on the selected case<br/>  if (Turing_Program_Selection = \"Copy Ones to right\")<br/>  [<br/>   \u00a0;; \"Copy\" from Wiki \"Turing machine examples\" page; slight mod so that it ends on first 1<br/>   \u00a0;; of the copy allowing Copy to be re-executed to create another copy.<br/>   \u00a0;; Has 5 states and uses Blank and 1 to make a copy of a string of ones;<br/>   \u00a0;; this can be run after runs of the \"Incrementor w/Return\".<br/>   \u00a0;;                       state 0       state 1        state 2       state 3       state 4<br/>    set WhatToWrite (list (list -1 0 -1) (list -1 0 1)  (list 1 0 1)   (list -1 0 1)  (list 1 0 1) )<br/>    set HowToMove   (list (list 1 0 1)   (list 1 0 1)   (list -1 0 1)   (list -1 0 -1)   (list 1 0 -1) )<br/>    set NextState   (list (list -1 -9 1)  (list 2 -9 1)  (list 3 -9 2)  (list 4 -9 3)  (list 0 -9 4) )<br/>  ]<br/>\u00a0<br/> \u00a0;; Fill the rules based on the selected case<br/>  if (Turing_Program_Selection = \"Binary Counter\")<br/>  [<br/>   \u00a0;; Count in binary - can start on a blank space.<br/>   \u00a0;;         States:       start          carry-1          back-to-beginning<br/>    set WhatToWrite (list (list 1 1 0)      (list 1 1 0)      (list -1 0 1)  )<br/>    set HowToMove (list   (list 0 0 -1)     (list 0 0 -1)     (list -1 1 1)  )<br/>    set NextState (list   (list -1 -1 1)    (list 2 2 1)      (list -1 2 2)  )<br/>   \u00a0;; Select line above from these two:<br/>   \u00a0;; can either count by 1 each time it is run:<br/>   \u00a0;;    set NextState (list   (list -1 -1 1)    (list 2 2 1)      (list -1 2 2)  )<br/>   \u00a0;; or count forever once started:<br/>   \u00a0;;    set NextState (list   (list 0 0 1)      (list 2 2 1)      (list 0 2 2)  )<br/>    set RealTimePerTick 0.2<br/>  ]<br/>\u00a0<br/>  if (Turing_Program_Selection = \"Busy-Beaver 3-State, 2-Sym\")<br/>  [<br/>   \u00a0;; from the RosettaCode.org Universal Turing Machine page<br/>   \u00a0;;      state name:           a             b             c<br/>    set WhatToWrite (list (list 1 0 1) (list 1 0 1) (list 1 0 1) (list -1 0 1) (list -1 0 1) )<br/>    set HowToMove (list (list 1 0 -1) (list -1 0 1) (list -1 0 0) (list 0 0 0) (list 0 0 0) )<br/>    set NextState (list (list 1 -9 2) (list 0 -9 1) (list 1 -9 -1) (list -9 -9 -9) (list -9 -9 -9) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>  ]<br/>\u00a0<br/> \u00a0;; should output 13 ones and take 107 steps to do it...<br/>  if (Turing_Program_Selection = \"Busy-Beaver 4-State, 2-Sym\")<br/>  [<br/>   \u00a0;; from the RosettaCode.org Universal Turing Machine page<br/>   \u00a0;;      state name:           A            B            C             D<br/>    set WhatToWrite (list (list 1 0 1) (list 1 0 -1) (list 1 0 1) (list 1 0 -1) (list -1 0 1) )<br/>    set HowToMove (list (list 1 0 -1) (list -1 0 -1) (list 1 0 -1) (list 1 0 1) (list 0 0 0) )<br/>    set NextState (list (list 1 -9 1) (list 0 -9 2) (list -1 -9 3) (list 3 -9 0) (list -9 -9 -9) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>  ]<br/>\u00a0<br/> \u00a0;; This takes 38 steps to write 9 ones/zeroes<br/>  if (Turing_Program_Selection = \"Busy-Beaver 2-State, 3-Sym\")<br/>  [<br/>   \u00a0;;                            A            B<br/>    set WhatToWrite (list (list 0 1 0) (list 1 1 0) (list -1 0 1) (list -1 0 1) (list -1 0 1) )<br/>    set HowToMove    (list (list 1 -1 1)  (list -1 1 -1)  (list 0 0 0)  (list 0 0 0)  (list 0 0 0) )<br/>    set NextState(list (list 1 1 -1) (list 0 1 1) (list -9 -9 -9) (list -9 -9 -9) (list -9 -9 -9) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>  ]<br/>\u00a0<br/> \u00a0;; This only makes 501 ones and stops after 134,467 steps -- it does do that\u00a0!!!<br/>  if (Turing_Program_Selection = \"Lazy-Beaver 5-State, 2-Sym\")<br/>  [<br/>   \u00a0;; from the RosettaCode.org Universal Turing Machine page<br/>   \u00a0;;      state name:           A0            B1           C2             D3           E4<br/>    set WhatToWrite (list (list 1 0 -1) (list 1 0 1) (list 1 0 -1) (list -1 0 1) (list 1 0 1) )<br/>    set HowToMove (list (list 1 0 -1) (list 1 0 1) (list -1 0 1) (list 1 0 1) (list -1 0 1) )<br/>    set NextState (list (list 1 -9 2) (list 2 -9 3) (list 0 -9 1) (list 4 -9 -1) (list 2 -9 0) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>   \u00a0;; Looks like it goes much more forward than back on the tape<br/>   \u00a0;; so start the head just a row from the bottom:<br/>    ask turtles [setxy 0 -1 * max-pxcor + 1]<br/>   \u00a0;; and go faster<br/>    set RealTimePerTick 0.02<br/>  ]<br/>\u00a0<br/> \u00a0;; The rest have large outputs and run for a long time, so I haven't confirmed<br/> \u00a0;; that they work as advertised...<br/>\u00a0<br/> \u00a0;; This is the 5,2 record holder: 4098 ones in 47,176,870 steps.<br/> \u00a0;; With max-pxcor of 14 and offset r/w head start (below), this will<br/> \u00a0;; run off the tape at about 150,000+steps...<br/>  if (Turing_Program_Selection = \"Busy-Beaver 5-State, 2-Sym\")<br/>  [<br/>   \u00a0;; from the RosettaCode.org Universal Turing Machine page<br/>   \u00a0;;      state name:           A            B            C             D             E<br/>    set WhatToWrite (list (list 1 0 1) (list 1 0 1) (list 1 0 -1) (list 1 0 1) (list 1 0 -1) )<br/>    set HowToMove (list (list 1 0 -1) (list 1 0 1) (list 1 0 -1) (list -1 0 -1) (list 1 0 -1) )<br/>    set NextState (list (list 1 -9 2) (list 2 -9 1) (list 3 -9 4) (list 0 -9 3) (list -1 -9 0) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>   \u00a0;; Writes more backward than forward, so start a few rows from the top:<br/>    ask turtles [setxy 0 max-pxcor - 3]<br/>   \u00a0;; and go faster<br/>    set RealTimePerTick 0.02<br/>  ]<br/>\u00a0<br/>  if (Turing_Program_Selection = \"Lazy-Beaver 3-State, 3-Sym\")<br/>  [<br/>   \u00a0;; This should write 5600 ones/zeros and take 29,403,894 steps.<br/>   \u00a0;; Ran it to 175,000+ steps and only covered 1/2 of the cells (w/max-pxcor = 14)...<br/>   \u00a0;;      state name:           A            B            C<br/>    set WhatToWrite (list (list 0 1 0) (list 1 -1 0) (list 0 1 0) (list -1 0 1) (list -1 0 1) )<br/>    set HowToMove (list (list 1 1 -1) (list -1 1 1) (list 1 -1 1) (list 0 0 0) (list 0 0 0) )<br/>    set NextState (list (list 1 0 0) (list 2 2 1) (list -1 0 1) (list -9 -9 -9) (list -9 -9 -9) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>   \u00a0;; It goes much more forward than back on the tape<br/>   \u00a0;; so start the head just a row from the bottom:<br/>    ask turtles [setxy 0 -1 * max-pxcor + 1]<br/>   \u00a0;; and go faster<br/>    set RealTimePerTick 0.02<br/>  ]<br/>\u00a0<br/>  if (Turing_Program_Selection = \"Busy-Beaver 3-State, 3-Sym\")<br/>  [<br/>   \u00a0;; This should write 374,676,383 ones/zeros and take 119,112,334,170,342,540 (!!!) steps.<br/>   \u00a0;; Rn it to ~ 175,000 steps covering about 2/3 of the max-pxcor=14 cells.<br/>   \u00a0;;      state name:           A            B            C<br/>    set WhatToWrite (list (list 0 1 0) (list -1 1 0) (list 0 0 0) (list -1 0 1) (list -1 0 1) )<br/>    set HowToMove (list (list 1 -1 -1) (list -1 1 -1) (list 1 1 1) (list 0 0 0) (list 0 0 0) )<br/>    set NextState (list (list 1 0 2) (list 0 1 1) (list -1 0 2) (list -9 -9 -9) (list -9 -9 -9) )<br/>   \u00a0;; Clear the tape<br/>    ask Patches [set pcolor BlankColor]<br/>   \u00a0;; Writes more backward than forward, so start a rowish from the top:<br/>    ask turtles [setxy 0 max-pxcor - 1]<br/>   \u00a0;; and go faster<br/>    set RealTimePerTick 0.02<br/>  ]<br/>\u00a0<br/> \u00a0;; in all cases reset the machine state to 0:<br/>  ask turtles [set MyState 0]<br/>  set MachineState 0<br/> \u00a0;; and the ticks<br/>  reset-ticks<br/>\u00a0<br/>end<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 76, "block": "<pre class=\"text highlighted_source\">import strutils, tables<br/>\u00a0<br/>proc runUTM(state, halt, blank: string, tape: seq[string] = @[],<br/>            rules: seq[seq[string]]) =<br/>  var<br/>    st = state<br/>    pos = 0<br/>    tape = tape<br/>    rulesTable = initTable[tuple[s0, v0: string], tuple[v1, dr, s1: string]]()<br/>\u00a0<br/>  if tape.len == 0: tape = @[blank]<br/>  if pos &lt; 0: pos += tape.len<br/>  assert pos in 0..tape.high<br/>\u00a0<br/>  for r in rules:<br/>    assert r.len == 5<br/>    rulesTable[(r[0], r[1])] = (r[2], r[3], r[4])<br/>\u00a0<br/>  while true:<br/>    stdout.write st,'\\t'<br/>    for i, v in tape:<br/>      if i == pos: stdout.write '[',v,']'<br/>      else:        stdout.write ' ',v,' '<br/>    echo \"\"<br/>\u00a0<br/>    if st == halt: break<br/>    if not rulesTable.hasKey((st, tape[pos])): break<br/>\u00a0<br/>    let (v1, dr, s1) = rulesTable[(st, tape[pos])]<br/>    tape[pos] = v1<br/>    if dr == \"left\":<br/>      if pos &gt; 0: dec pos<br/>      else: tape.insert blank<br/>    if dr == \"right\":<br/>      inc pos<br/>      if pos &gt;= tape.len: tape.add blank<br/>    st = s1<br/>\u00a0<br/>echo \"incr machine\\n\"<br/>runUTM(halt  = \"qf\",<br/>       state = \"q0\",<br/>       tape  = \"1 1 1\".split,<br/>       blank = \"B\",<br/>       rules = @[\"q0 1 1 right q0\".split,<br/>                 \"q0 B 1 stay  qf\".split])<br/>\u00a0<br/>echo \"\\nbusy beaver\\n\"<br/>runUTM(halt  = \"halt\",<br/>       state = \"a\",<br/>       blank = \"0\",<br/>       rules = @[\"a 0 1 right b\".split,<br/>                 \"a 1 1 left  c\".split,<br/>                 \"b 0 1 left  a\".split,<br/>                 \"b 1 1 right b\".split,<br/>                 \"c 0 1 left  b\".split,<br/>                 \"c 1 1 stay  halt\".split])<br/>\u00a0<br/>echo \"\\nsorting test\\n\"<br/>runUTM(halt  = \"STOP\",<br/>       state = \"A\",<br/>       blank = \"0\",<br/>       tape  = \"2 2 2 1 2 2 1 2 1 2 1 2 1 2\".split,<br/>       rules = @[\"A 1 1 right A\".split,<br/>                 \"A 2 3 right B\".split,<br/>                 \"A 0 0 left  E\".split,<br/>                 \"B 1 1 right B\".split,<br/>                 \"B 2 2 right B\".split,<br/>                 \"B 0 0 left  C\".split,<br/>                 \"C 1 2 left  D\".split,<br/>                 \"C 2 2 left  C\".split,<br/>                 \"C 3 2 left  E\".split,<br/>                 \"D 1 1 left  D\".split,<br/>                 \"D 2 2 left  D\".split,<br/>                 \"D 3 1 right A\".split,<br/>                 \"E 1 1 left  E\".split,<br/>                 \"E 0 0 right STOP\".split])</pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre>program project1;\nuses\n Classes, sysutils;\n\ntype\n TCurrent = record\n   state\u00a0: string;\n   input\u00a0: char;\n end;\n\n TMovesTo = record\n   state\u00a0: string;\n   output\u00a0: char;\n   moves\u00a0: char;\n end;\n\n var\n   ST, ET: TDateTime;\n   C:TCurrent;\n   M:TMovesTo;\n   Tape, Rules:TStringList;\n   TP:integer; //TP = Tape position\n   Blank\u00a0: char;\n   j:integer;\n   FinalState, InitialState, R\u00a0: string;\n   Count:integer;\n\nFunction ApplyRule(C:TCurrent):TMovesTo;\nvar\n  x,k:integer;\nbegin\n  //Find the appropriate rule and pass it as the result\n  For k:= 0 to Rules.Count-1 do\n  begin\n     If (k mod 5 = 0) and (Rules[k] = C.state) and (Rules[k+1] = C.input) then\n     begin\n         Result.output\u00a0:= Rules[k+2][1];\n         Result.moves\u00a0:= Rules[k+3][1];\n         Result.state\u00a0:= Rules[k+4];\n     end;\n  end;\nend;\n\nProcedure ChangeTape(var TapePosition:integer;N:TMovesTo);\nbegin\n   Tape[TapePosition]:=N.output;\n   Case N.moves of\n   'l':begin\n         TapePosition\u00a0:= TapePosition-1;\n       end;\n   'r':begin\n         TapePosition\u00a0:= TapePosition+1;\n       end;\n   end;\nend;\n\nfunction GetInput(TapePosition:integer):char;\nbegin\n  Result:=Tape[TapePosition][1];\nend;\n\nprocedure ShowResult;\nvar\n  k:integer;\nbegin\n  writeln('Current State \u00a0:',C.state);\n  writeln('Input         \u00a0:',C.input);\n  write(' Tape ');\n  For k:= 0 to Tape.count-1 do\n  begin\n     write(Tape[k]);\n  end;\n  writeln;\n  writeln('New    State \u00a0:',M.state);\n  writeln('Tape position\u00a0:',TP);\n  writeln('-----------------------');\nend;\n\nbegin\n  writeln('Universal Turing Machine');\n  writeln('------------------------');\n  Count:=0;\n  ST:=Time;\n\n  //Set up the rules\n  Rules\u00a0:= TStringList.create;\n  R\u00a0:= 'q0,1,1,right,q0,q0,B,1,stay,qf';\n  Rules.CommaText\u00a0:= R;\n  InitialState\u00a0:= 'q0';\n  FinalState\u00a0:= 'qf';\n\n  //Set up the tape\n  Tape:=TStringList.create;\n  Tape.add('1');\n  Tape.add('1');\n  Tape.add('1');\n  Blank\u00a0:= 'B';\n  For j:= 1 to 10 do\n  begin\n     Tape.add(Blank);\n  end;\n\n  //Set up the initial state\n  writeln('Initial state');\n  C.state:=InitialState;\n  C.input:=' ';\n  M.state:='';\n  M.output:=' ';\n  M.moves:=' ';\n  TP:=0;\n\n  //Run the machine\n  While (TP &gt;= 0) and (M.State &lt;&gt; FinalState) do\n  begin\n    C.Input\u00a0:= GetInput(TP);\n    If M.state &lt;&gt; '' then\n    begin\n      C.State\u00a0:= M.State;\n    end;\n    M:=ApplyRule(C);\n    ChangeTape(TP,M);\n    Count:=Count+1;\n    ShowResult;\n  end;\n\n  //State the outcome.\n  If TP &lt; 0 then\n  begin\n     writeln('Error! Tape has slipped off at left!');\n  end;\n  If M.state = FinalState then\n  begin\n     writeln('Program has finished');\n     ET:=Time;\n     writeln('Time taken ');\n     writeln(FormatDateTime('sss:zzz',ET-ST));\n     writeln(Count, ' steps taken');\n  end;\n\n  Tape.free;\n  Rules.free;\n  readln;\nend.\n</pre>"}, {"lang": "Perl", "loc": 83, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> run_utm <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">%o</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$st</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"br0\">{</span>state<span class=\"br0\">}</span>\t<span class=\"sy0\">//</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"init head state undefined\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$blank</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"br0\">{</span>blank<span class=\"br0\">}</span>\t<span class=\"sy0\">//</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"blank symbol undefined\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@rules</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$o</span><span class=\"br0\">{</span>rules<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"rules undefined\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@tape</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"br0\">{</span>tape<span class=\"br0\">}</span> <span class=\"sy0\">?</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$o</span><span class=\"br0\">{</span>tape<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$blank</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$halt</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"br0\">{</span>halt<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <span class=\"re0\">$o</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/pos.html\"><span class=\"kw3\">pos</span></a><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$pos</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@tape</span> <span class=\"kw1\">if</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"bad init position\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">@tape</span> <span class=\"sy0\">||</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>step<span class=\"sy0\">:</span>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$st<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#tape</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tape</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co5\">$_</span> <span class=\"sy0\">==</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"[$v]\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" $v \"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$st</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$halt</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@rules</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s0</span><span class=\"sy0\">,</span> <span class=\"re0\">$v0</span><span class=\"sy0\">,</span> <span class=\"re0\">$v1</span><span class=\"sy0\">,</span> <span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">$s1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$s0</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$st</span> <span class=\"kw1\">and</span> <span class=\"re0\">$tape</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$v0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"re0\">$tape</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'left'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/unshift.html\"><span class=\"kw3\">unshift</span></a> <span class=\"re0\">@tape</span><span class=\"sy0\">,</span> <span class=\"re0\">$blank</span><span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"re0\">$pos</span><span class=\"sy0\">--</span> <span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'right'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@tape</span><span class=\"sy0\">,</span> <span class=\"re0\">$blank</span> <span class=\"kw1\">if</span> <span class=\"sy0\">++</span><span class=\"re0\">$pos</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">@tape</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"re0\">$st</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">next</span> step<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"no matching rules\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"incr machine<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>run_utm\thalt<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'qf'</span><span class=\"sy0\">,</span><br/>\tstate<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'q0'</span><span class=\"sy0\">,</span><br/>\ttape<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\tblank<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'B'</span><span class=\"sy0\">,</span><br/>\trules<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>q0 <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right q0<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>q0 B <span class=\"nu0\">1</span> stay  qf<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>busy beaver<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>run_utm halt<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'halt'</span><span class=\"sy0\">,</span><br/>\tstate<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'a'</span><span class=\"sy0\">,</span><br/>\tblank<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'0'</span><span class=\"sy0\">,</span><br/>\trules<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>a <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> right b<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>a <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  c<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>b <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  a<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>b <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right b<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>c <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  b<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>c <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> stay  halt<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>sorting test<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>run_utm halt<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'STOP'</span><span class=\"sy0\">,</span><br/>\tstate<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'A'</span><span class=\"sy0\">,</span><br/>\tblank<span class=\"sy0\">=&gt;</span><span class=\"st_h\">'0'</span><span class=\"sy0\">,</span><br/>\ttape<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\trules<span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>A <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right A<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> right B<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>A <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  E<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>B <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right B<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>B <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> right B<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>B <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  C<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>C <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> left  D<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>C <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  C<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>C <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> left  E<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>D <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  D<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>D <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  D<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>D <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> right A<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>E <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  E<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>E <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> right STOP<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 84, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> run_utm<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$state</span><span class=\"sy0\">!</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$blank</span><span class=\"sy0\">!,</span> <span class=\"sy0\">:</span><span class=\"re0\">@rules</span><span class=\"sy0\">!,</span> <span class=\"sy0\">:</span><span class=\"re0\">@tape</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$blank</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$halt</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$pos</span> <span class=\"kw1\">is</span> copy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$pos</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@tape</span> <span class=\"kw1\">if</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">die</span> <span class=\"st0\">\"Bad initial position\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">~~</span> <span class=\"sy0\">^</span><span class=\"re0\">@tape</span><span class=\"sy0\">;</span><br/>\u00a0<br/>STEP<span class=\"sy0\">:</span> <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"$state<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@tape</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"re0\">@tape</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw3\">print</span> <span class=\"re0\">$_</span> <span class=\"sy0\">==</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"[$v]\"</span> <span class=\"sy0\">!!</span> <span class=\"st0\">\" $v \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$state</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$halt</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@rules</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">@</span><span class=\"kw2\">rule</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s0</span><span class=\"sy0\">,</span> <span class=\"re0\">$v0</span><span class=\"sy0\">,</span> <span class=\"re0\">$v1</span><span class=\"sy0\">,</span> <span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">$s1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">rule</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$s0</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$state</span> <span class=\"kw1\">and</span> <span class=\"re0\">@tape</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$v0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"re0\">@tape</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">given</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> <span class=\"st_h\">'left'</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"kw3\">unshift</span> <span class=\"re0\">@tape</span><span class=\"sy0\">,</span> <span class=\"re0\">$blank</span> <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"re0\">$pos</span><span class=\"sy0\">--</span> <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"st_h\">'right'</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw3\">push</span> <span class=\"re0\">@tape</span><span class=\"sy0\">,</span> <span class=\"re0\">$blank</span> <span class=\"kw1\">if</span> <span class=\"sy0\">++</span><span class=\"re0\">$pos</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">@tape</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"re0\">$state</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">next</span> STEP<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">die</span> <span class=\"st_h\">'No matching rules'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"incr machine\"</span><span class=\"sy0\">;</span><br/>run_utm\t<span class=\"sy0\">:</span>halt<span class=\"sy0\">&lt;</span>qf<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>state<span class=\"sy0\">&lt;</span>q0<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>tape<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">:</span>blank<span class=\"sy0\">&lt;</span>B<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>rules<span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> q0 <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right q0 <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> q0 B <span class=\"nu0\">1</span> stay  qf <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>busy beaver\"</span><span class=\"sy0\">;</span><br/>run_utm <span class=\"sy0\">:</span>halt<span class=\"sy0\">&lt;</span>halt<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>state<span class=\"sy0\">&lt;</span>a<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>blank<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>rules<span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> a <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> right b <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> a <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  c <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> b <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  a <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> b <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right b <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> c <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  b <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> c <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> stay  halt <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>sorting test\"</span><span class=\"sy0\">;</span><br/>run_utm <span class=\"sy0\">:</span>halt<span class=\"sy0\">&lt;</span>STOP<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>state<span class=\"sy0\">&lt;</span>A<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>blank<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>tape<span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">:</span>rules<span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> A <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right A <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> right B <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> A <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  E <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> B <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right B <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> B <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> right B <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> B <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  C <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> C <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> left  D <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> C <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  C <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> C <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> left  E <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> D <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  D <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> D <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  D <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> D <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> right A <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> E <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  E <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> E <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> right STOP <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 93, "block": "<pre class=\"text highlighted_source\">enum name, initState, endState, blank, rules<br/>\u00a0<br/>-- Machine definitions<br/>constant incrementer = {<br/>    /*name =*/ \"Simple incrementer\",<br/>    /*initState =*/ \"q0\",<br/>    /*endState =*/ \"qf\",<br/>    /*blank =*/ \"B\",<br/>    /*rules =*/ {<br/>        {\"q0\", \"1\", \"1\", \"right\", \"q0\"},<br/>        {\"q0\", \"B\", \"1\", \"stay\", \"qf\"}<br/>    }<br/>}<br/>\u00a0<br/>constant threeStateBB = {<br/>    /*name =*/ \"Three-state busy beaver\",<br/>    /*initState =*/ \"a\",<br/>    /*endState =*/ \"halt\",<br/>    /*blank =*/ \"0\",<br/>    /*rules =*/ {<br/>        {\"a\", \"0\", \"1\", \"right\", \"b\"},<br/>        {\"a\", \"1\", \"1\", \"left\", \"c\"},<br/>        {\"b\", \"0\", \"1\", \"left\", \"a\"},<br/>        {\"b\", \"1\", \"1\", \"right\", \"b\"},<br/>        {\"c\", \"0\", \"1\", \"left\", \"b\"},<br/>        {\"c\", \"1\", \"1\", \"stay\", \"halt\"}<br/>    }<br/>}<br/>\u00a0<br/>constant fiveStateBB = {<br/>    /*name =*/ \"Five-state busy beaver\",<br/>    /*initState =*/ \"A\",<br/>    /*endState =*/ \"H\",<br/>    /*blank =*/ \"0\",<br/>    /*rules =*/ {<br/>        {\"A\", \"0\", \"1\", \"right\", \"B\"},<br/>        {\"A\", \"1\", \"1\", \"left\", \"C\"},<br/>        {\"B\", \"0\", \"1\", \"right\", \"C\"},<br/>        {\"B\", \"1\", \"1\", \"right\", \"B\"},<br/>        {\"C\", \"0\", \"1\", \"right\", \"D\"},<br/>        {\"C\", \"1\", \"0\", \"left\", \"E\"},<br/>        {\"D\", \"0\", \"1\", \"left\", \"A\"},<br/>        {\"D\", \"1\", \"1\", \"left\", \"D\"},<br/>        {\"E\", \"0\", \"1\", \"stay\", \"H\"},<br/>        {\"E\", \"1\", \"0\", \"left\", \"A\"}<br/>    }<br/>}<br/>\u00a0<br/>procedure show(string state, integer headpos, sequence tape)<br/>    printf(1,\"\u00a0%-6s | \",{state})<br/>    for p=1 to length(tape) do<br/>        printf(1,iff(p=headpos?\"[%s]\":\"\u00a0%s \"),{tape[p]})<br/>    end for<br/>    printf(1,\"\\n\")<br/>end procedure<br/>\u00a0<br/>-- a universal turing machine<br/>procedure UTM(sequence machine, sequence tape, integer countOnly=0)<br/>string state = machine[initState]<br/>integer headpos = 1, counter = 0<br/>    printf(1,\"\\n\\n%s\\n%s\\n\",{machine[name],repeat('=',length(machine[name]))})<br/>    if not countOnly then printf(1,\" State  | Tape [head]\\n---------------------\\n\") end if<br/>    while 1 do<br/>        if headpos&gt;length(tape) then<br/>            tape = append(tape,machine[blank])<br/>        elsif headpos&lt;1 then<br/>            tape = prepend(tape,machine[blank])<br/>            headpos = 1<br/>        end if<br/>        if not countOnly then show(state, headpos, tape) end if<br/>        for i=1 to length(machine[rules]) do<br/>            sequence rule = machine[rules][i]<br/>            if rule[1]=state and rule[2]=tape[headpos] then<br/>                tape[headpos] = rule[3]<br/>                if rule[4] == \"left\" then headpos -= 1 end if<br/>                if rule[4] == \"right\" then headpos += 1 end if<br/>                state = rule[5]<br/>                exit<br/>            end if<br/>        end for<br/>        counter += 1<br/>        if state=machine[endState] then exit end if<br/>    end while<br/>    if countOnly then<br/>        printf(1,\"Steps taken:\u00a0%d\\n\",{counter})<br/>    else<br/>        show(state, headPos, tape)<br/>    end if<br/>end procedure<br/>\u00a0<br/>UTM(incrementer, {\"1\", \"1\", \"1\"})<br/>UTM(threeStateBB, {})<br/>UTM(fiveStateBB, {}, countOnly:=1)</pre>"}, {"lang": "PicoLisp", "loc": 76, "block": "<pre class=\"text highlighted_source\"># Finite state machine<br/>(de turing (Tape Init Halt Blank Rules Verbose)<br/>   (let<br/>      (Head 1 <br/>         State Init<br/>         Rule NIL<br/>         S 'start <br/>         C (length Tape))<br/>      (catch NIL<br/>         (loop<br/>            (state 'S<br/>               (start 'print<br/>                  (when (=0 C)<br/>                     (setq Tape (insert Head Tape Blank)) <br/>                     (inc 'C) ) )<br/>               (print 'lookup<br/>                  (when Verbose<br/>                     (for (N . I) Tape<br/>                        (if (= N Head)<br/>                           (print (list I))<br/>                           (prin I) ) )<br/>                     (prinl) )<br/>                  (when (= State Halt) (throw NIL) ) )<br/>               (lookup 'do<br/>                  (setq Rule<br/>                     (find<br/>                        '((X)<br/>                           (and<br/>                              (= (car X) State)<br/>                              (= (cadr X) (car (nth Tape Head))) ) )<br/>                        Rules ) ) )<br/>               (do 'step<br/>                  (setq Tape (place Head Tape (caddr Rule))) )<br/>               (step 'print<br/>                  (cond<br/>                     ((= (cadddr Rule) 'R) (inc 'Head))<br/>                     ((= (cadddr Rule) 'L) (dec 'Head)) )<br/>                  (cond<br/>                     ((&lt; Head 1)<br/>                        (setq Tape (insert Head Tape Blank))<br/>                        (inc 'C)<br/>                        (one Head) )<br/>                     ((&gt; Head C)<br/>                        (setq Tape (insert Head Tape Blank))<br/>                        (inc 'C) ) )<br/>                  (setq State (last Rule)) ) ) ) ) ) <br/>   Tape )<br/>\u00a0<br/>(println \"Simple incrementer\")<br/>(turing '(1 1 1) 'A 'H 'B '((A 1 1 R A) (A B 1 S H)) T)<br/>\u00a0<br/>(println \"Three-state busy beaver\")<br/>(turing '() 'A 'H 0 <br/>   '((A 0 1 R B) <br/>     (A 1 1 L C)<br/>     (B 0 1 L A)<br/>     (B 1 1 R B)<br/>     (C 0 1 L B)<br/>     (C 1 1 S H)) T )<br/>\u00a0<br/>(println \"Five-state busy beaver\")<br/>(let Tape (turing '() 'A 'H 0<br/>   '((A 0 1 R B)<br/>     (A 1 1 L C)<br/>     (B 0 1 R C)<br/>     (B 1 1 R B)<br/>     (C 0 1 R D)<br/>     (C 1 0 L E)<br/>     (D 0 1 L A)<br/>     (D 1 1 L D)<br/>     (E 0 1 S H)<br/>     (E 1 0 L A)) NIL)<br/>   (println '0s: (cnt '((X) (= 0 X)) Tape))<br/>   (println '1s: (cnt '((X) (= 1 X)) Tape)) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PHL", "loc": 152, "block": "<pre class=\"text highlighted_source\">module turing;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>struct @Command {<br/>\tfield @Integer tape {get:tape,set:stape};<br/>\tfield @Integer move {get:move,set:smove};<br/>\tfield @Integer next {get:next,set:snext};<br/>\u00a0<br/>\t@Command init(@Integer tape, @Integer move, @Integer next) [<br/>\t\tthis.stape(tape);<br/>\t\tthis.smove(move);<br/>\t\tthis.snext(next);<br/>\t\treturn this;<br/>\t]<br/>};<br/>\u00a0<br/>doc 2 dimansional array structure;<br/>\u00a0<br/>struct @Rules {<br/>\u00a0<br/>\tfield @Integer maxstates { get: maxstates, set: smaxstates };<br/>\tfield @Integer maxvalue  { get: maxvalue, set: smaxvalue };<br/>\u00a0<br/>\tfield @Array&lt;@Array&lt;@Command&gt; &gt; table {get: t, set: st};<br/>\u00a0<br/>\t@Rules init(@Integer states, @Integer values) <br/>\t[<br/>\t\tthis.smaxstates(states);<br/>\t\tthis.smaxvalue(values);<br/>\t\tthis.st(new @Array&lt;@Array&lt;@Command&gt; &gt;.init(states));<br/>\t\treturn this;<br/>\t]<br/>\u00a0<br/>\t@Void setRule(@Integer state, @Integer tape, @Command command)<br/>\t[<br/>\t\tif (null == this::t.get(state)) {<br/>\t\t\tthis::t.set(state, new @Array&lt;@Command&gt;.init(this::maxvalue));<br/>\t\t}<br/>\t\tthis::t.get(state).set(tape, command);<br/>\t]<br/>\u00a0<br/>\t@Command getRule(@Integer state, @Integer tape)<br/>\t[<br/>\t\treturn this::t.get(state).get(tape);<br/>\t]<br/>\u00a0<br/>};<br/>\u00a0<br/>@Void emulateTuring(@Rules rules, @Integer start, @Integer stop, @Array&lt;@Integer&gt; tape, @Integer blank) [<br/>\tvar tapepointer = 0;<br/>\tvar state = start;<br/>\u00a0<br/>\tdoc output;<br/>\tprintf(\"Tape\\tState\\n\");<br/>\u00a0<br/>\twhile (state\u00a0!= stop) {<br/>\t\tdoc add more cells to the tape;<br/>\t\tif (tapepointer == tape::size) tape.add(blank);<br/>\t\tif (tapepointer == 0-1) { tape = (new @Array&lt;@Integer&gt;..blank).addAll(tape); tapepointer = 0; }<br/>\u00a0<br/>\t\tdoc output;<br/>\t\tfor (var i = 0; i &lt; tape::size; i=i+1) {<br/>\t\t\tprintf(\"%i\", tape.get(i));<br/>\t\t}<br/>\t\tprintf(\"\\t%i\\n\", state);<br/>\t\tfor (var i = 0; i &lt; tapepointer; i=i+1) {<br/>\t\t\tprintf(\" \");<br/>\t\t}<br/>\t\tprintf(\"^\\n\");<br/>\u00a0<br/>\t\tdoc the value of the current cell;<br/>\t\tvar tapeval = tape.get(tapepointer);<br/>\u00a0<br/>\t\tdoc the current state;<br/>\t\tvar command = rules.getRule(state, tapeval);<br/>\u00a0<br/>\t\ttape.set(tapepointer, command::tape);<br/>\t\ttapepointer = tapepointer + command::move;<br/>\t\tstate = command::next;<br/>\t}<br/>\u00a0<br/>\tdoc output;<br/>\tfor (var i = 0; i &lt; tape::size; i=i+1) {<br/>\t\tprintf(\"%i\", tape.get(i));<br/>\t}<br/>\tprintf(\"\\t%i\\n\", state);<br/>\tfor (var i = 0; i &lt; tapepointer; i=i+1) {<br/>\t\tprintf(\" \");<br/>\t}<br/>\tprintf(\"^\\n\");<br/>]<br/>\u00a0<br/>@Integer main [<br/>\u00a0<br/>\tdoc incrementer;<br/>\u00a0<br/>\tdoc 2 states, 2 symbols;<br/>\u00a0<br/>\tvar rules = new @Rules.init(2, 2);<br/>\u00a0<br/>\tdoc q0, 1 -&gt; 1, right, q0;<br/>\tdoc q0, B -&gt; 1, stay, qf;<br/>\u00a0<br/>\trules.setRule(0, 1, new @Command.init(1, 1, 0));<br/>\trules.setRule(0, 0, new @Command.init(1, 0, 1));<br/>\u00a0<br/>\tdoc tape = [1, 1, 1];<br/>\u00a0<br/>\tvar tape = new @Array&lt;@Integer&gt;..1..1..1;<br/>\u00a0<br/>\tdoc start turing machine;<br/>\u00a0<br/>\temulateTuring(rules, 0, 1, tape, 0);<br/>\u00a0<br/>\tdoc ---------------------------------------------------;<br/>\u00a0<br/>\tdoc three state busy beaver;<br/>\u00a0<br/>\tdoc 4 states, 2 symbols;<br/>\u00a0<br/>\trules = new @Rules.init(4, 2);<br/>\u00a0<br/>\tdoc\ta, 0 -&gt; 1, right, b<br/>\t\ta, 1 -&gt; 1, left, c<br/>\t\tb, 0 -&gt; 1, left, a<br/>\t\tb, 1 -&gt; 1, right, b<br/>\t\tc, 0 -&gt; 1, left, b<br/>\t\tc, 1 -&gt; 1, stay, halt<br/>\t;<br/>\u00a0<br/>\tdoc\ta = 0,<br/>\t\tb = 1,<br/>\t\tc = 2,<br/>\t\thalt = 3;<br/>\u00a0<br/>\trules.setRule(0, 0, new @Command.init(1, 1, 1));<br/>\trules.setRule(0, 1, new @Command.init(1, 0-1, 2));<br/>\trules.setRule(1, 0, new @Command.init(1, 0-1, 0));<br/>\trules.setRule(1, 1, new @Command.init(1, 1, 1));<br/>\trules.setRule(2, 0, new @Command.init(1, 0-1, 1));<br/>\trules.setRule(2, 1, new @Command.init(1, 0, 3));<br/>\u00a0<br/>\tdoc tape = [];<br/>\u00a0<br/>\ttape = new @Array&lt;@Integer&gt;;<br/>\u00a0<br/>\tdoc start turing machine;<br/>\u00a0<br/>\temulateTuring(rules, 0, 3, tape, 0);<br/>\treturn 0;<br/>]</pre>"}, {"lang": "Prolog", "loc": 31, "block": "<pre class=\"prolog highlighted_source\">turing<span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> TapeIn<span class=\"sy4\">,</span> TapeOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">IS</span></a><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    perform<span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">IS</span></a><span class=\"sy4\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> TapeIn<span class=\"br0\">}</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>Ls<span class=\"sy4\">,</span> Rs<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    reverse<span class=\"br0\">(</span>Ls<span class=\"sy4\">,</span> Ls1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    append<span class=\"br0\">(</span>Ls1<span class=\"sy4\">,</span> Rs<span class=\"sy4\">,</span> TapeOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>perform<span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> State<span class=\"sy4\">,</span> TapeIn<span class=\"sy4\">,</span> TapeOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> FS<span class=\"sy4\">,</span> RS<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> Symbols<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <span class=\"br0\">(</span> memberchk<span class=\"br0\">(</span>State<span class=\"sy4\">,</span> FS<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>        TapeOut <span class=\"sy6\">=</span> TapeIn<br/>    <span class=\"sy4\">;</span> memberchk<span class=\"br0\">(</span>State<span class=\"sy4\">,</span> RS<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>        <span class=\"br0\">{</span>LeftIn<span class=\"sy4\">,</span> RightIn<span class=\"br0\">}</span> <span class=\"sy6\">=</span> TapeIn<span class=\"sy4\">,</span><br/>        symbol<span class=\"br0\">(</span>RightIn<span class=\"sy4\">,</span> Symbol<span class=\"sy4\">,</span> RightRem<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        memberchk<span class=\"br0\">(</span>Symbol<span class=\"sy4\">,</span> Symbols<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">once</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Rules<span class=\"sy4\">,</span> State<span class=\"sy4\">,</span> Symbol<span class=\"sy4\">,</span> NewSymbol<span class=\"sy4\">,</span> Action<span class=\"sy4\">,</span> NewState<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        memberchk<span class=\"br0\">(</span>NewSymbol<span class=\"sy4\">,</span> Symbols<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        action<span class=\"br0\">(</span>Action<span class=\"sy4\">,</span> <span class=\"br0\">{</span>LeftIn<span class=\"sy4\">,</span> <span class=\"br0\">[</span>NewSymbol<span class=\"sy5\">|</span>RightRem<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>LeftOut<span class=\"sy4\">,</span> RightOut<span class=\"br0\">}</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        perform<span class=\"br0\">(</span>Config<span class=\"sy4\">,</span> Rules<span class=\"sy4\">,</span> NewState<span class=\"sy4\">,</span> <span class=\"br0\">{</span>LeftOut<span class=\"sy4\">,</span> RightOut<span class=\"br0\">}</span><span class=\"sy4\">,</span> TapeOut<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>symbol<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>       B<span class=\"sy4\">,</span>   <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>symbol<span class=\"br0\">(</span><span class=\"br0\">[</span>Sym<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Sym<span class=\"sy4\">,</span> Rs<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>action<span class=\"br0\">(</span>left<span class=\"sy4\">,</span>  <span class=\"br0\">{</span>Lin<span class=\"sy4\">,</span> Rin<span class=\"br0\">}</span><span class=\"sy4\">,</span>  <span class=\"br0\">{</span>Lout<span class=\"sy4\">,</span> Rout<span class=\"br0\">}</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> left<span class=\"br0\">(</span>Lin<span class=\"sy4\">,</span> Rin<span class=\"sy4\">,</span> Lout<span class=\"sy4\">,</span> Rout<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>action<span class=\"br0\">(</span>stay<span class=\"sy4\">,</span>  Tape<span class=\"sy4\">,</span>        Tape<span class=\"sy4\">,</span>         _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>action<span class=\"br0\">(</span>right<span class=\"sy4\">,</span> <span class=\"br0\">{</span>Lin<span class=\"sy4\">,</span> Rin<span class=\"br0\">}</span><span class=\"sy4\">,</span>  <span class=\"br0\">{</span>Lout<span class=\"sy4\">,</span> Rout<span class=\"br0\">}</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> right<span class=\"br0\">(</span>Lin<span class=\"sy4\">,</span> Rin<span class=\"sy4\">,</span> Lout<span class=\"sy4\">,</span> Rout<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>left<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>     Rs<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>B<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>left<span class=\"br0\">(</span><span class=\"br0\">[</span>L<span class=\"sy5\">|</span>Ls<span class=\"br0\">]</span><span class=\"sy4\">,</span> Rs<span class=\"sy4\">,</span> Ls<span class=\"sy4\">,</span> <span class=\"br0\">[</span>L<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>right<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>     <span class=\"br0\">[</span>B<span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>right<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <span class=\"br0\">[</span>S<span class=\"sy5\">|</span>Rs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>S<span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> Rs<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 88, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/>\u00a0<br/><span class=\"kw1\">def</span> run_utm<span class=\"br0\">(</span><br/>        state <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span><br/>        blank <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span><br/>        rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        tape <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        halt <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span><br/>        pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    st <span class=\"sy0\">=</span> state<br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> tape: tape <span class=\"sy0\">=</span> <span class=\"br0\">[</span>blank<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> pos <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: pos +<span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>tape<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> pos <span class=\"sy0\">&gt;=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>tape<span class=\"br0\">)</span> <span class=\"kw1\">or</span> pos <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">raise</span> Error<span class=\"br0\">(</span> <span class=\"st0\">\"bad init position\"</span><span class=\"br0\">)</span><br/>    rules <span class=\"sy0\">=</span> <span class=\"kw2\">dict</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> v0<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> dr<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> v0<span class=\"sy0\">,</span> v1<span class=\"sy0\">,</span> dr<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span> <span class=\"kw1\">in</span> rules<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>tape<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> pos: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"[%s]\"</span>\u00a0% <span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> st <span class=\"sy0\">==</span> halt: <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>st<span class=\"sy0\">,</span> tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> rules: <span class=\"kw1\">break</span><br/>\u00a0<br/>        <span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> dr<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rules<span class=\"br0\">[</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v1<br/>        <span class=\"kw1\">if</span> dr <span class=\"sy0\">==</span> <span class=\"st0\">'left'</span>:<br/>            <span class=\"kw1\">if</span> pos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>: pos -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">else</span>: tape.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> blank<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> dr <span class=\"sy0\">==</span> <span class=\"st0\">'right'</span>:<br/>            pos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span> pos <span class=\"sy0\">&gt;=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>tape<span class=\"br0\">)</span>: tape.<span class=\"me1\">append</span><span class=\"br0\">(</span>blank<span class=\"br0\">)</span> <br/>        st <span class=\"sy0\">=</span> s1<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># EXAMPLES</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"incr machine<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>run_utm<span class=\"br0\">(</span><br/>    halt <span class=\"sy0\">=</span> <span class=\"st0\">'qf'</span><span class=\"sy0\">,</span><br/>\tstate <span class=\"sy0\">=</span> <span class=\"st0\">'q0'</span><span class=\"sy0\">,</span><br/>\ttape <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"st0\">\"111\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\tblank <span class=\"sy0\">=</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span><br/>\trules <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"sy0\">,</span> <br/>               <span class=\"br0\">[</span><span class=\"st0\">\"q0 1 1 right q0\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t        <span class=\"st0\">\"q0 B 1 stay  qf\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>busy beaver<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>run_utm<span class=\"br0\">(</span><br/>    halt <span class=\"sy0\">=</span> <span class=\"st0\">'halt'</span><span class=\"sy0\">,</span><br/>\tstate <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">,</span><br/>\tblank <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>\trules <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"st0\">\"a 0 1 right b\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"a 1 1 left  c\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"b 0 1 left  a\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"b 1 1 right b\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"c 0 1 left  b\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"c 1 1 stay  halt\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>sorting test<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>run_utm<span class=\"br0\">(</span>halt <span class=\"sy0\">=</span> <span class=\"st0\">'STOP'</span><span class=\"sy0\">,</span><br/>\tstate <span class=\"sy0\">=</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span><br/>\tblank <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>\ttape <span class=\"sy0\">=</span> <span class=\"st0\">\"2 2 2 1 2 2 1 2 1 2 1 2 1 2\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\trules <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"st0\">\"A 1 1 right A\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"A 2 3 right B\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"A 0 0 left  E\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"B 1 1 right B\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"B 2 2 right B\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"B 0 0 left  C\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"C 1 2 left  D\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"C 2 2 left  C\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"C 3 2 left  E\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"D 1 1 left  D\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"D 2 2 left  D\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"D 3 1 right A\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"E 1 1 left  E\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"E 0 0 right STOP\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 98, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;;;=============================================================<br/>;;; Due to heavy use of pattern matching we define few macros<br/>;;;=============================================================<br/>\u00a0<br/>(define-syntax-rule (define-m f m ...)<br/>  (define f (match-lambda m ... (x x))))<br/>\u00a0<br/>(define-syntax-rule (define-m* f m ...)<br/>  (define f (match-lambda** m ...)))<br/>\u00a0<br/>;;;=============================================================<br/>;;; The definition of a functional type Tape, <br/>;;; representing infinite tape with O(1) operations: <br/>;;; put, get, shift-right and shift-left.<br/>;;;=============================================================<br/>(struct Tape (the-left-part     \u00a0; i-1 i-2 i-3 ...<br/>              the-current-record\u00a0; i<br/>              the-right-part))  \u00a0; i+1 i+2 i+3 ...<br/>\u00a0<br/>;; the initial record on the tape<br/>(define-m initial-tape <br/>  [(cons h t) (Tape '() h t)])<br/>\u00a0<br/>;; shifts caret to the right<br/>(define (snoc a b) (cons b a))<br/>(define-m shift-right<br/>  [(Tape '() '() (cons h t)) (Tape '() h t)]     \u00a0; left end<br/>  [(Tape  l x '()) (Tape (snoc l x) '() '())]    \u00a0; right end<br/>  [(Tape  l x (cons h t)) (Tape (snoc l x) h t)])\u00a0; general case<br/>\u00a0<br/>;; shifts caret to the left<br/>(define-m flip-tape [(Tape l x r) (Tape r x l)])<br/>\u00a0<br/>(define shift-left <br/>  (compose flip-tape shift-right flip-tape))<br/>\u00a0<br/>;; returns the current record on the tape<br/>(define-m get [(Tape _ v _) v])<br/>\u00a0<br/>;; writes to the current position on the tape<br/>(define-m* put <br/>  [('() t) t]<br/>  [(v (Tape l _ r)) (Tape l v r)])<br/>\u00a0<br/>;; Shows the list representation of the tape (\u2264 O(n)).<br/>;; A tape is shown as (... a b c (d) e f g ...)<br/>;; where (d) marks the current position of the caret.<br/>\u00a0<br/>(define (revappend a b) (foldl cons b a))<br/>\u00a0<br/>(define-m show-tape<br/>  [(Tape '() '() '()) '()]<br/>  [(Tape l '() r) (revappend l (cons '() r))]<br/>  [(Tape l v r) (revappend l (cons (list v) r))])<br/>\u00a0<br/>;;;-------------------------------------------------------------------<br/>;;; The Turing Machine interpreter<br/>;;;<br/>\u00a0<br/>;; interpretation of output triple for a given tape<br/>(define-m* interprete<br/>  [((list v 'right S) tape) (list S (shift-right (put v tape)))]<br/>  [((list v 'left S) tape) (list S (shift-left (put v tape)))]<br/>  [((list v 'stay S) tape) (list S (put v tape))]<br/>  [((list S _) tape) (list S tape)])<br/>\u00a0<br/>;; Runs the program.<br/>;; The initial state is set to start.<br/>;; The initial tape is given as a list of records.<br/>;; The initial position is the leftmost symbol of initial record.<br/>(define (run-turing prog t0 start)<br/>  ((fixed-point<br/>    (match-lambda<br/>      [`(,S ,T) (begin<br/>                  (printf \"~a\\t~a\\n\" S (show-tape T))<br/>                  (interprete (prog `(,S ,(get T))) T))]))<br/>   (list start (initial-tape t0))))<br/>\u00a0<br/>;; a general fixed point operator<br/>(define ((fixed-point f) x)<br/>  (let F ([x x] [fx (f x)])<br/>    (if (equal? x fx)<br/>        fx<br/>        (F fx (f fx)))))<br/>\u00a0<br/>;; A macro for definition of a Turing-Machines.<br/>;; Transforms to a function which accepts a list of initial <br/>;; tape records as input and returns the tape after stopping. <br/>(define-syntax-rule (Turing-Machine #:start start (a b c d e) ...)<br/>  (\u03bb (l)<br/>    (displayln \"STATE\\tTAPE\")<br/>    ((match-lambda [(list _ t) (flatten (show-tape t))]) <br/>     (run-turing <br/>      (match-lambda ['(a b) '(c d e)] ... [x x]) <br/>      l start))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 44, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program executes a  Turing machine  based on   initial state,  tape, and rules.  */</span><br/>state = <span class=\"st0\">'q0'</span>                                     <span class=\"coMULTI\">/*the initial Turing machine state.    */</span><br/>term  = <span class=\"st0\">'qf'</span>                                     <span class=\"coMULTI\">/*a state that is used for a  halt.    */</span><br/>blank = <span class=\"st0\">'B'</span>                                      <span class=\"coMULTI\">/*this character is a  \"true\"  blank.  */</span><br/><span class=\"kw1\">call</span> Turing_rule  <span class=\"st0\">'q0 1 1 right q0'</span>              <span class=\"coMULTI\">/*define a rule for the Turing machine.*/</span><br/><span class=\"kw1\">call</span> Turing_rule  <span class=\"st0\">'q0 B 1 stay  qf'</span>              <span class=\"coMULTI\">/*   \"   \"   \"   \"   \"     \"      \"    */</span><br/><span class=\"kw1\">call</span> Turing_init   <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>                         <span class=\"coMULTI\">/*initialize the tape to some string(s)*/</span><br/><span class=\"kw1\">call</span> TM                                          <span class=\"coMULTI\">/*go and invoke the  Turning  machine. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>TM: \u00a0!=<span class=\"nu0\">1</span>;   bot=<span class=\"nu0\">1</span>;   top=<span class=\"nu0\">1</span>;   @er= <span class=\"st0\">'***error***'</span> <span class=\"coMULTI\">/*start at  the tape location   1.     */</span><br/>     <span class=\"kw1\">say</span>                                         <span class=\"coMULTI\">/*might as well display a blank line.  */</span><br/>          <span class=\"kw1\">do</span> cycle=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span>  state==term         <span class=\"coMULTI\">/*process Turing machine  instructions.*/</span><br/>             <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rules                   <span class=\"coMULTI\">/*   \"       \"       \"        rules.   */</span><br/>             <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> rule<span class=\"sy0\">.</span>k rState rTape rWrite rMove rNext <span class=\"sy0\">.</span>          <span class=\"coMULTI\">/*pick pieces. */</span><br/>             <span class=\"kw1\">if</span> state<span class=\"sy0\">\\</span>==rState <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>!<span class=\"sy0\">\\</span>==rTape  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*wrong rule\u00a0? */</span><br/>             @<span class=\"sy0\">.</span>!=rWrite                          <span class=\"coMULTI\">/*right rule;  write it \u2500\u2500\u2500\u25ba the tape. */</span><br/>             <span class=\"kw1\">if</span> rMove== <span class=\"st0\">'left'</span>  <span class=\"kw3\">then</span>\u00a0!=!-<span class=\"nu0\">1</span>       <span class=\"coMULTI\">/*Are we moving left?   Then subtract 1*/</span><br/>             <span class=\"kw1\">if</span> rMove==<span class=\"st0\">'right'</span>  <span class=\"kw3\">then</span>\u00a0!=!+<span class=\"nu0\">1</span>       <span class=\"coMULTI\">/* \"   \"    \"   right?    \"    add    1*/</span><br/>             bot=<span class=\"kw6\">min</span><span class=\"br0\">(</span>bot,\u00a0!<span class=\"br0\">)</span>;   top=<span class=\"kw6\">max</span><span class=\"br0\">(</span>top,\u00a0!<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*find the  tape  bottom and top.      */</span><br/>             state=rNext;       <span class=\"kw1\">iterate</span> cycle    <span class=\"coMULTI\">/*use this for the next  state;  and   */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">say</span> @er <span class=\"st0\">'unknown state:'</span> state;  <span class=\"kw1\">leave</span> <span class=\"coMULTI\">/*oops, we have an unknown state error.*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cycle*/</span><br/>     $=                                          <span class=\"coMULTI\">/*start with empty string  (the tape). */</span><br/>          <span class=\"kw1\">do</span> t=bot  <span class=\"kw2\">to</span> top;        <a class=\"__cf_email__\" data-cfemail=\"08573548\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>t<br/>          <span class=\"kw1\">if</span> _==blank  <span class=\"kw3\">then</span> _=<span class=\"st0\">' '</span>                <span class=\"coMULTI\">/*do we need to translate a true blank?*/</span><br/>          $=$ <span class=\"sy0\">||</span> pad <span class=\"sy0\">||</span> _                        <span class=\"coMULTI\">/*construct char by char, maybe pad it.*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span>                            <span class=\"coMULTI\">/* [\u2191]  construct  the  tape's contents*/</span><br/>     L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*obtain length of  \"     \"       \"    */</span><br/>     <span class=\"kw1\">if</span> L==<span class=\"nu0\">0</span>     <span class=\"kw3\">then</span> $= <span class=\"st0\">\"[tape is blank.]\"</span>      <span class=\"coMULTI\">/*make an  empty tape  visible to user.*/</span><br/>     <span class=\"kw1\">if</span> L<span class=\"sy0\">&gt;</span><span class=\"nu0\">1000</span>   <span class=\"kw3\">then</span> $=<span class=\"kw6\">left</span><span class=\"br0\">(</span>$, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span>        <span class=\"coMULTI\">/*truncate tape to 1k bytes, append \u00b7\u00b7\u00b7*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">\"tape's contents:\"</span>  $                   <span class=\"coMULTI\">/*show the tape's contents (or 1st 1k).*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">\"tape's   length: \"</span> L                   <span class=\"coMULTI\">/*  \"   \"     \"   length.              */</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'Turning machine used '</span>    rules    <span class=\"st0\">\" rules in \"</span>    cycle    <span class=\"st0\">' cycles.'</span><br/>     <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Turing_init:  @<span class=\"sy0\">.</span>=blank;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;  @<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x,j<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>              <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Turing_rule:  <span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'RULES'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"LIT\"</span>  <span class=\"kw3\">then</span> rules=<span class=\"nu0\">0</span>;       rules=rules+<span class=\"nu0\">1</span><br/>              pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span> <span class=\"br0\">)</span>          <span class=\"coMULTI\">/*padding for rule*/</span><br/>              rule<span class=\"sy0\">.</span>rules=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;         <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'rule'</span> rules, <span class=\"nu0\">20</span><span class=\"br0\">)</span>   <span class=\"st0\">\"\u2550\u2550\u2550\u25ba\"</span>   rule<span class=\"sy0\">.</span>rules<br/>              <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 62, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Turing<br/>    <span class=\"kw1\">class</span> Tape<br/>        <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>symbols, blank, starting_tape<span class=\"br0\">)</span><br/>            <span class=\"re1\">@symbols</span> = symbols<br/>            <span class=\"re1\">@blank</span> = blank<br/>            <span class=\"re1\">@tape</span> = starting_tape<br/>            <span class=\"re1\">@index</span> = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> read<br/>            retval = <span class=\"re1\">@tape</span><span class=\"br0\">[</span>@index<span class=\"br0\">]</span><br/>            <span class=\"kw1\">unless</span> retval<br/>                retval = <span class=\"re1\">@tape</span><span class=\"br0\">[</span>@index<span class=\"br0\">]</span> = <span class=\"re1\">@blank</span><br/>            <span class=\"kw1\">end</span><br/>            <span class=\"kw3\">raise</span> <span class=\"st0\">\"invalid symbol '#{retval}' on tape\"</span> <span class=\"kw1\">unless</span> <span class=\"re1\">@tape</span>.<span class=\"me1\">member</span>?<span class=\"br0\">(</span>retval<span class=\"br0\">)</span><br/>            <span class=\"kw2\">return</span> retval<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> write<span class=\"br0\">(</span>symbol<span class=\"br0\">)</span><br/>            <span class=\"re1\">@tape</span><span class=\"br0\">[</span>@index<span class=\"br0\">]</span> = symbol<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> right<br/>            <span class=\"re1\">@index</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> left<br/>            <span class=\"kw1\">if</span> <span class=\"re1\">@index</span> == <span class=\"nu0\">0</span><br/>              <span class=\"re1\">@tape</span>.<span class=\"me1\">unshift</span> <span class=\"re1\">@blank</span><br/>            <span class=\"kw1\">else</span><br/>              <span class=\"re1\">@index</span> <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> stay<br/>            <span class=\"co1\"># nop</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">def</span> get_tape<br/>            <span class=\"kw2\">return</span> <span class=\"re1\">@tape</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>symbols, blank,<br/>                   initial_state, halt_states, running_states,<br/>                   rules, starting_tape = <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"re1\">@tape</span> = Tape.<span class=\"me1\">new</span><span class=\"br0\">(</span>symbols, blank, starting_tape<span class=\"br0\">)</span><br/>        <span class=\"re1\">@initial_state</span> = initial_state<br/>        <span class=\"re1\">@halt_states</span> = halt_states<br/>        <span class=\"re1\">@running_states</span> = running_states<br/>        <span class=\"re1\">@rules</span> = rules<br/>        <span class=\"re1\">@halted</span> = <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">def</span> run<br/>        <span class=\"kw3\">raise</span> <span class=\"st0\">\"machine already halted\"</span> <span class=\"kw1\">if</span> <span class=\"re1\">@halted</span><br/>        state = <span class=\"re1\">@initial_state</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> <span class=\"re1\">@halt_states</span>.<span class=\"me1\">member</span>? state<br/>            <span class=\"kw3\">raise</span> <span class=\"st0\">\"unknown state '#{state}'\"</span> <span class=\"kw1\">unless</span> <span class=\"re1\">@running_states</span>.<span class=\"me1\">member</span>? state<br/>            symbol = <span class=\"re1\">@tape</span>.<span class=\"me1\">read</span><br/>            outsym, action, state = <span class=\"re1\">@rules</span><span class=\"br0\">[</span>state<span class=\"br0\">]</span><span class=\"br0\">[</span>symbol<span class=\"br0\">]</span><br/>            <span class=\"re1\">@tape</span>.<span class=\"me1\">write</span> outsym<br/>            <span class=\"re1\">@tape</span>.<span class=\"me1\">send</span> action<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"re1\">@halted</span> = <span class=\"kw2\">true</span><br/>        <span class=\"kw2\">return</span> <span class=\"re1\">@tape</span>.<span class=\"me1\">get_tape</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "SequenceL", "loc": 218, "block": "<pre class=\"text highlighted_source\">//region Imports<br/>\u00a0<br/>import &lt;Utilities/Conversion.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Types<br/>\u00a0<br/>MCONFIG\u00a0::= (Label: char(1), Symbols: char(2), Operations: char(2), FinalConfig: char(1));<br/>STATE\u00a0::= (CurrentConfig: char(1), CurrentPosition: int(0), Tape: char(1));<br/>INPUT_DATA\u00a0::= (Iterations: int(0), InitialTape: char(1), StartingPosition: int(0), InitialConfig: char(1), MConfigs: MCONFIG(1));<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Constants<br/>\u00a0<br/>SPACE_CHAR\u00a0:= '_';<br/>DELIMITTER\u00a0:= '|';<br/>\u00a0<br/>NULL_CONFIG\u00a0:= (Label: \"\", Symbols: [], Operations: [], FinalConfig: \"\");<br/>\u00a0<br/>TRACE_HEADER\u00a0:= [\"Config:\\t| Place:\\t| Tape:\"];<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Helpers<br/>\u00a0<br/>StateToString(state(0))\u00a0:=<br/>    state.CurrentConfig ++ <br/>    \"  \\t\\t| \" ++ intToString(state.CurrentPosition) ++ <br/>    \"  \\t| \" ++ state.Tape;<br/>\u00a0<br/>StateToArrowString(state(0))\u00a0:=<br/>    state.Tape ++ \"\\n\" ++<br/>    duplicate(' ', state.CurrentPosition - 1) ++ \"|\\n\" ++<br/>    duplicate(' ', state.CurrentPosition - 1) ++ state.CurrentConfig ++ \"\\n\";<br/>\u00a0<br/>HeadOfEach(strings(2))[i]\u00a0:=<br/>    head(strings[i]);<br/>\u00a0<br/>RemoveCharacter(character(0), string(1))[i]\u00a0:=<br/>    string[i] when not(string[i] = character); <br/>\u00a0<br/>GetFSquares(Tape(1))[i]\u00a0:=<br/>    Tape[i] when (i mod 2) = 1;<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Parsing<br/>\u00a0<br/>ParseConfig(Line(1))\u00a0:=<br/>    let<br/>        entries\u00a0:= split(Line, DELIMITTER);<br/>        label\u00a0:= entries[1];<br/>        symbols\u00a0:= split(entries[2], ',');<br/>        operations\u00a0:= split(entries[3], ',');<br/>        finalConfig\u00a0:= entries[4];<br/>    in<br/>        ((Label: label, Symbols: symbols, Operations: operations, FinalConfig: finalConfig) when not((Line[1] = '/') and (Line[2] = '/'))) <br/>            when size(Line) &gt; 0;<br/>\u00a0<br/>ParseTextFile(Text(1))\u00a0:=<br/>    let<br/>        noSpaces\u00a0:= RemoveCharacter('\\t', RemoveCharacter('\\r', RemoveCharacter(' ', Text)));<br/>        lines\u00a0:= split(noSpaces, '\\n');<br/>        iterations\u00a0:= stringToInt(lines[1]);<br/>        initialTape\u00a0:= lines[2];<br/>        initialPosition\u00a0:= stringToInt(lines[3]);<br/>        initialConfig\u00a0:= lines[4];<br/>        mConfigs\u00a0:= ParseConfig(lines[5 ... size(lines)]);<br/>    in<br/>        (Iterations: iterations, InitialTape: initialTape, StartingPosition: initialPosition, InitialConfig: initialConfig, MConfigs: mConfigs);<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Config Finding<br/>\u00a0<br/>Matches: char(0) * char(2) -&gt; bool;<br/>Matches(currentSymbol(0), symbols(2))\u00a0:=<br/>        true when size(symbols) = 0 //some(equalListNT(\"\", symbols))<br/>    else<br/>        true when currentSymbol = SPACE_CHAR and some(equalListNT(\"none\", symbols))<br/>    else<br/>        true when not(currentSymbol = SPACE_CHAR) and some(equalListNT(\"any\", symbols))<br/>    else<br/>        true when some(currentSymbol = HeadOfEach(symbols))<br/>    else<br/>        false;<br/>\u00a0<br/>GetCurrentSymbol(State(0))\u00a0:=<br/>        State.Tape[State.CurrentPosition] when size(State.Tape) &gt;= State.CurrentPosition and State.CurrentPosition &gt; 0<br/>    else <br/>        SPACE_CHAR;<br/>\u00a0<br/>GetConfigHelper(label(1), symbol(0), mConfigs(1))[i]\u00a0:=<br/>    mConfigs[i] when equalList(mConfigs[i].Label, label) and Matches(symbol, mConfigs[i].Symbols);<br/>\u00a0<br/>GetConfig(label(1), symbol(0), mConfigs(1))\u00a0:=<br/>    let<br/>        searchResults\u00a0:= GetConfigHelper(label, symbol, mConfigs);<br/>    in<br/>            NULL_CONFIG when size(searchResults) = 0<br/>        else<br/>            searchResults[1];<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Operations<br/>\u00a0<br/>TrimTapeEnd(tape(1), position(0))\u00a0:=<br/>        tape when position = size(tape)<br/>    else<br/>        tape when not(last(tape) = SPACE_CHAR)<br/>    else<br/>        TrimTapeEnd(allButLast(tape), position);        <br/>\u00a0<br/>ApplyOperations(State(0), Operations(2))\u00a0:=<br/>    let<br/>        newState\u00a0:= ApplyOperation(State, head(Operations));<br/>    in<br/>            State when size(Operations) = 0<br/>        else<br/>            ApplyOperations(newState, tail(Operations));<br/>\u00a0<br/>ApplyOperation(State(0), Operation(1))\u00a0:=<br/>    let<br/>        newTape\u00a0:= <br/>                PrintOperation(head(tail(Operation)), State.CurrentPosition, State.Tape) when head(Operation) = 'P'<br/>            else<br/>                EraseOperation(State.CurrentPosition, State.Tape) when head(Operation) = 'E'<br/>            else<br/>                [SPACE_CHAR] ++ State.Tape when head(Operation) = 'L' and State.CurrentPosition = 1<br/>            else<br/>                State.Tape ++ [SPACE_CHAR] when head(Operation) = 'R' and State.CurrentPosition = size(State.Tape)<br/>            else<br/>                State.Tape;<br/>\u00a0<br/>        newPosition\u00a0:= <br/>                1 when head(Operation) = 'L' and State.CurrentPosition = 1<br/>            else<br/>                State.CurrentPosition + 1 when head(Operation) = 'R'<br/>            else<br/>                State.CurrentPosition - 1 when head(Operation) = 'L'<br/>            else<br/>                State.CurrentPosition;<br/>\u00a0<br/>        trimmedTape\u00a0:= TrimTapeEnd(newTape, newPosition);<br/>    in<br/>            State when size(Operation) = 0<br/>        else<br/>            (CurrentPosition: newPosition, Tape: trimmedTape);<br/>\u00a0<br/>PrintOperation(Symbol(0), Position(0), Tape(1))\u00a0:=<br/>    let<br/>        diff\u00a0:= Position - size(Tape) when Position &gt; size(Tape) else 0;<br/>        expandedTape\u00a0:= Tape ++ duplicate(SPACE_CHAR, diff);<br/>        finalTape\u00a0:= setElementAt(expandedTape, Position, Symbol);<br/>    in<br/>        finalTape;<br/>\u00a0<br/>EraseOperation(Position(0), Tape(1))\u00a0:=<br/>    PrintOperation(SPACE_CHAR, Position, Tape);<br/>\u00a0<br/>//endregion<br/>\u00a0<br/>//region Execution<br/>\u00a0<br/>RunMachine(Text(1), Flag(1))\u00a0:=<br/>    let<br/>        input\u00a0:= ParseTextFile(Text);<br/>        initialState\u00a0:= (CurrentConfig: input.InitialConfig, CurrentPosition: input.StartingPosition, Tape: input.InitialTape);<br/>\u00a0<br/>        processed\u00a0:= Process(initialState, input.MConfigs, input.Iterations);<br/>        processedWithTrace\u00a0:= ProcessWithTrace(initialState, input.MConfigs, input.Iterations);<br/>    in<br/>            \"\\n\" ++ delimit(TRACE_HEADER ++ StateToString(processedWithTrace), '\\n') when equalList(Flag, \"trace\")<br/>        else<br/>            \"\\n\" ++ delimit(StateToArrowString(processedWithTrace), '\\n') when equalList(Flag, \"arrow-trace\")<br/>        else<br/>            processed.Tape when equalList(Flag, \"tape\")<br/>        else<br/>            TrimTapeEnd(GetFSquares(processed.Tape), 1) when equalList(Flag, \"f-squares\")<br/>        else<br/>            boolToString(DoesMachineHalt(initialState, input.MConfigs, input.Iterations)) when equalList(Flag, \"halts\")<br/>        else<br/>            StateToString(processed);<br/>\u00a0<br/>DoesMachineHalt(InitialState(0), mConfigs(1), Iterations(0))\u00a0:=<br/>    let<br/>        resultState\u00a0:= Process(InitialState, mConfigs, Iterations);<br/>    in<br/>        equalList(resultState.CurrentConfig, \"halt\");<br/>\u00a0<br/>ProcessWithTrace(InitialState(0), mConfigs(1), Iterations(0))\u00a0:=<br/>        [InitialState] when Iterations &lt;= 0 or size(InitialState.CurrentConfig) = 0 or equalList(InitialState.CurrentConfig, \"halt\")<br/>    else<br/>        [InitialState] ++ ProcessWithTrace(Iterate(InitialState, mConfigs), mConfigs, Iterations - 1);<br/>\u00a0<br/>Process(InitialState(0), mConfigs(1), Iterations(0))\u00a0:=<br/>        InitialState when Iterations = 0 or size(InitialState.CurrentConfig) = 0 or equalList(InitialState.CurrentConfig, \"halt\")<br/>    else<br/>        Process(Iterate(InitialState, mConfigs), mConfigs, Iterations - 1);<br/>\u00a0<br/>Iterate(State(0), mConfigs(1))\u00a0:=<br/>    let<br/>        currentConfig\u00a0:= GetConfig(State.CurrentConfig, GetCurrentSymbol(State), mConfigs);<br/>        newState\u00a0:= Execute(State, currentConfig);<br/>    in<br/>        newState;<br/>\u00a0<br/>Execute(State(0), mConfig(0))\u00a0:=<br/>    let<br/>        newState\u00a0:= ApplyOperations(State, mConfig.Operations);<br/>    in<br/>        (CurrentConfig: mConfig.FinalConfig, CurrentPosition: newState.CurrentPosition, Tape: newState.Tape);<br/>\u00a0<br/>//endregion</pre>"}, {"lang": "Sidef", "loc": 98, "block": "<pre class=\"ruby highlighted_source\">func run_utm<span class=\"br0\">(</span>state=<span class=\"st0\">\"\"</span>, blank=<span class=\"st0\">\"\"</span>, rules=<span class=\"br0\">[</span><span class=\"br0\">]</span>, tape=<span class=\"br0\">[</span>blank<span class=\"br0\">]</span>, halt=<span class=\"st0\">\"\"</span>, pos=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        pos <span class=\"sy0\">+</span>= tape.<span class=\"me1\">len</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos\u00a0!~ tape.<span class=\"me1\">range</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        die <span class=\"st0\">\"Bad initial position\"</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"#{state}<span class=\"es0\">\\t</span>\"</span>;<br/>        tape.<span class=\"me1\">range</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>            var v = tape<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>            <span class=\"kw3\">print</span> <span class=\"br0\">(</span>i == pos\u00a0? <span class=\"st0\">\"[#{v}]\"</span>\u00a0: <span class=\"st0\">\" #{v} \"</span><span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span>;<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state == halt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">break</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        rules.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>rule<span class=\"sy0\">|</span><br/>            var <span class=\"br0\">(</span>s0, v0, v1, dir, s1<span class=\"br0\">)</span> = rule...;<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s0\u00a0!= state<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>\u00a0!= v0<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">next</span>;<br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            tape<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> = v1;<br/>\u00a0<br/>            given<span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'left'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> tape.<span class=\"me1\">unshift</span><span class=\"br0\">(</span>blank<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                     <span class=\"kw1\">else</span>          <span class=\"br0\">{</span> <span class=\"sy0\">--</span>pos <span class=\"br0\">}</span>;<br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'right'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>pos <span class=\"sy0\">&gt;</span>= tape.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        tape.<span class=\"me1\">append</span><span class=\"br0\">(</span>blank<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            state = s1;<br/>            goto\u00a0:<span class=\"kw1\">NEXT</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        die <span class=\"st0\">'No matching rules'</span>;<br/>        @:<span class=\"kw1\">NEXT</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"incr machine<span class=\"es0\">\\n</span>\"</span>;<br/>run_utm<span class=\"br0\">(</span><br/>    halt:  <span class=\"st0\">'qf'</span>,<br/>    state: <span class=\"st0\">'q0'</span>,<br/>    tape:  <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>    blank: <span class=\"st0\">'B'</span>,<br/>    rules: <span class=\"br0\">[</span><br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>q0 <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right q0<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>q0 B <span class=\"nu0\">1</span> stay  qf<span class=\"br0\">)</span>,<br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>busy beaver\"</span>;<br/>run_utm<span class=\"br0\">(</span><br/>    halt:  <span class=\"st0\">'halt'</span>,<br/>    state: <span class=\"st0\">'a'</span>,<br/>    blank: <span class=\"st0\">'0'</span>,<br/>    rules: <span class=\"br0\">[</span><br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>a <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> right b<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>a <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  c<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>b <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  a<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>b <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right b<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>c <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> left  b<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>c <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> stay  halt<span class=\"br0\">)</span>,<br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>sorting test\"</span>;<br/>run_utm<span class=\"br0\">(</span><br/>    halt:  <span class=\"st0\">'STOP'</span>,<br/>    state: <span class=\"st0\">'A'</span>,<br/>    blank: <span class=\"st0\">'0'</span>,<br/>    tape:  <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    rules: <span class=\"br0\">[</span><br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>A <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right A<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> right B<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>A <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  E<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>B <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> right B<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>B <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> right B<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>B <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> left  C<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>C <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> left  D<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>C <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  C<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>C <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> left  E<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>D <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  D<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>D <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> left  D<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>D <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> right A<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>E <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> left  E<span class=\"br0\">)</span>,<br/>        <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>E <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> right STOP<span class=\"br0\">)</span>,<br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Standard ML", "loc": 332, "block": "<pre class=\"text highlighted_source\">(*** Signatures ***)<br/>\u00a0<br/>signature TAPE = sig<br/>\tdatatype move = Left | Right | Stay<br/>\u00a0<br/>\ttype ''a tape<br/>\tval empty\u00a0: ''a tape<br/>\tval moveLeft \u00a0: ''a tape -&gt; ''a tape<br/>\tval moveRight\u00a0: ''a tape -&gt; ''a tape<br/>\tval move     \u00a0: ''a tape -&gt; move -&gt; ''a tape<br/>\tval getSymbol\u00a0: ''a tape -&gt; ''a option<br/>\tval write    \u00a0: ''a option -&gt; ''a tape -&gt; ''a tape<br/>\tval leftOf   \u00a0: ''a tape -&gt; ''a option list\t(* Symbols left of the head in reverse order *)<br/>\tval rightOf  \u00a0: ''a tape -&gt; ''a option list\t(* Symbols right of of the head *)<br/>end<br/>\u00a0<br/>signature MACHINE = sig<br/>\tstructure Tape\u00a0: TAPE<br/>\u00a0<br/>\ttype state = int<br/>\u00a0<br/>\t(* ''a is band alphabet type *)<br/>\ttype ''a transitions = (state * ''a option Vector.vector) -&gt;<br/>\t                       (state * (Tape.move * ''a option) Vector.vector)<br/>\u00a0<br/>\ttype ''a configuration = { state\u00a0: state, tapes\u00a0: ''a Tape.tape Vector.vector }<br/>\u00a0<br/>\ttype ''a machine = {<br/>\t\t\talphabet\u00a0: ''a Vector.vector,\t\t(* (not used) *)<br/>\t\t\tstates\u00a0: state Vector.vector,\t\t(* (not used) *)<br/>\t\t\tstart \u00a0: state,\t\t\t\t(* element of stats *)<br/>\t\t\tfinal \u00a0: state,\t\t\t\t(* element of stats *)<br/>\t\t\ttransitions\u00a0: ''a transitions,\t\t(* transitions *)<br/>\t\t\ttapes \u00a0: ''a Tape.tape Vector.vector\t(* vector of the initial tapes *)<br/>\t\t}<br/>end<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>signature UNIVERSALMACHINE = sig<br/>\tstructure Machine\u00a0: MACHINE<br/>\u00a0<br/>\tval start\u00a0: ''a Machine.machine -&gt; ''a Machine.configuration<br/>\u00a0<br/>\t(* Find a holding configuration (limited by n steps)<br/>\t * Execute the handler for each step *)<br/>\tval simulate\u00a0: (''a Machine.configuration -&gt; unit) -&gt; ''a Machine.machine -&gt; int option -&gt; ''a Machine.configuration option<br/>end<br/>\u00a0<br/>\u00a0<br/>(*** Implementation ***)<br/>\u00a0<br/>structure Tape\u00a0:&gt; TAPE = struct<br/>\u00a0<br/>\t(*<br/>\t * NONE   =&gt; blank field<br/>\t * SOME a =&gt; written field<br/>\t *)<br/>\ttype ''a symbol = ''a option<br/>\u00a0<br/>\tdatatype move = Left | Right | Stay<br/>\u00a0<br/>\t(*<br/>\t * Four cases:<br/>\t * 1   The tape is complete empty.<br/>\t * 2   The head is in the written area.<br/>\t *     On the right and on the left handside are symbols,<br/>\t *     On the head is a symbol.<br/>\t * 3/4 The head is (n-1) fields over the right/left edge of the written area.<br/>\t *     There is at least one entry and a rest list of entries.<br/>\t *)<br/>\tdatatype ''a tape =<br/>\t  Empty<br/>\t| Middle  of ''a symbol list * ''a symbol * ''a symbol list<br/>\t| LeftOf  of ''a symbol * ''a symbol list * int<br/>\t| RightOf of ''a symbol * ''a symbol list * int<br/>\u00a0<br/>\tval empty = Empty<br/>\u00a0<br/>\tfun rep a 0 = nil<br/>\t  | rep a n = a\u00a0:: rep a (n-1)<br/>\u00a0<br/>\tfun leftOf  (Empty)              = nil<br/>\t  | leftOf  (Middle (ls, _, _))  = ls<br/>\t  | leftOf  (RightOf (r, rs, i)) = rep NONE i @ r\u00a0:: rs<br/>\t  | leftOf  (LeftOf _)           = nil<br/>\u00a0<br/>\tfun rightOf (Empty)              = nil<br/>\t  | rightOf (Middle (_, _, rs))  = rs<br/>\t  | rightOf (RightOf _)          = nil<br/>\t  | rightOf (LeftOf (l, ls, i))  = rep NONE i @ l\u00a0:: ls<br/>\u00a0<br/>\tfun write (NONE) t = t (* Cannot write a blank field! *)<br/>\t  | write a      t = Middle (leftOf t, a, rightOf t)<br/>\u00a0<br/>\tfun getSymbol (Middle (_, m, _)) = m<br/>\t  | getSymbol _ = NONE (* blank *)<br/>\u00a0<br/>\u00a0<br/>\tfun moveRight (Empty) = Empty<br/>\t  | moveRight (Middle (ls, m,   nil)) = RightOf (m, ls, 0)<br/>\t  | moveRight (Middle (ls, m, r::rs)) = Middle (m::ls, r, rs)<br/>\t  | moveRight (RightOf (l, ls, n))    = RightOf (l, ls, n+1)<br/>\t  | moveRight (LeftOf (r, rs, 0))     = Middle (nil, r, rs)<br/>\t  | moveRight (LeftOf (r, rs,  n))    = LeftOf (r, rs, n-1)<br/>\u00a0<br/>\u00a0<br/>\tfun moveLeft (Empty) = Empty<br/>\t  | moveLeft (Middle (nil, m,   rs)) = LeftOf (m, rs, 0)<br/>\t  | moveLeft (Middle (l::ls, m, rs)) = Middle (ls, l, m::rs)<br/>\t  | moveLeft (RightOf (l, ls, 0))    = Middle (ls, l, nil)<br/>\t  | moveLeft (RightOf (l, ls, n))    = RightOf (l, ls, n-1)<br/>\t  | moveLeft (LeftOf (r, rs,  n))    = LeftOf (r, rs, n+1)<br/>\u00a0<br/>\u00a0<br/>\tfun move tape Stay  = tape<br/>\t  | move tape Right = moveRight tape<br/>\t  | move tape Left  = moveLeft  tape<br/>\u00a0<br/>\t(* Test *)<br/>\tlocal<br/>\t\tval tape\u00a0: int tape = empty\t\t(* [] *)<br/>\t\tval tape = moveRight tape\t\t(* [] *)<br/>\t\tval NONE = getSymbol tape<br/>\t\tval tape = write (SOME 42) tape\t\t(* [42] *)<br/>\t\tval (SOME 42) = getSymbol tape<br/>\t\tval tape = moveRight tape\t\t(* 42, [] *)<br/>\t\tval tape = moveRight tape\t\t(* 42, , [] *)<br/>\t\tval NONE = getSymbol tape<br/>\t\tval tape = moveLeft tape\t\t(* 42, [] *)<br/>\t\tval NONE = getSymbol tape<br/>\t\tval tape = moveLeft tape\t\t(* [42] *)<br/>\t\tval (SOME 42) = getSymbol tape<br/>\t\tval tape = write NONE tape\t\t(* [42] *) (*\u00a0!!! *)<br/>\t\tval (SOME 42) = getSymbol tape<br/>\t\tval tape = moveLeft tape\t\t(* [], 42 *)<br/>\t\tval tape = moveLeft tape\t\t(* [], , 42 *)<br/>\t\tval tape = write (SOME 47) tape\t\t(* [47], , 42 *)<br/>\t\tval (SOME 47) = getSymbol tape<br/>\t\tval tape = moveRight tape\t\t(* 47, [], 42 *)<br/>\t\tval NONE = getSymbol tape<br/>\t\tval tape = moveRight tape\t\t(* 47, , [42] *)<br/>\t\tval (SOME 42) = getSymbol tape<br/>\tin end<br/>end<br/>\u00a0<br/>structure Machine\u00a0:&gt; MACHINE = struct<br/>\tstructure Tape = Tape<br/>\u00a0<br/>\ttype state = int<br/>\u00a0<br/>\t(* ''a is band alphabet type *)<br/>\ttype ''a transitions = (state * ''a option Vector.vector) -&gt;<br/>\t                       (state * (Tape.move * ''a option) Vector.vector)<br/>\u00a0<br/>\ttype ''a configuration = { state\u00a0: state, tapes\u00a0: ''a Tape.tape Vector.vector }<br/>\u00a0<br/>\ttype ''a machine = {<br/>\t\t\talphabet\u00a0: ''a Vector.vector,<br/>\t\t\tstates\u00a0: state Vector.vector,<br/>\t\t\tstart \u00a0: state,<br/>\t\t\tfinal \u00a0: state,<br/>\t\t\ttransitions\u00a0: ''a transitions,<br/>\t\t\ttapes \u00a0: ''a Tape.tape Vector.vector<br/>\t\t}<br/>end<br/>\u00a0<br/>structure UniversalMachine\u00a0:&gt; UNIVERSALMACHINE = struct<br/>\u00a0<br/>\tstructure Machine = Machine<br/>\u00a0<br/>\tfun start ({ start, tapes, ... }\u00a0: ''a Machine.machine)\u00a0: ''a Machine.configuration = {<br/>\t\t\tstate = start,<br/>\t\t\ttapes = tapes<br/>\t\t}<br/>\u00a0<br/>\tfun doTransition ({ state, tapes }\u00a0: ''a Machine.configuration)<br/>\t    ((state', actions)\u00a0: (Machine.state * (Machine.Tape.move * ''a option) Vector.vector))<br/>\t\t: ''a Machine.configuration = {<br/>\t\t\tstate = state',<br/>\t\t\ttapes = Vector.mapi (fn (i, tape) =&gt;<br/>\t\t\t\t\tlet val (move, write) = Vector.sub (actions, i)<br/>\t\t\t\t\t    val tape'  = Machine.Tape.write write tape<br/>\t\t\t\t\t    val tape'' = Machine.Tape.move tape' move<br/>\t\t\t\t\tin tape'' end) tapes<br/>\t\t}<br/>\u00a0<br/>\tfun getSymbols ({ tapes, ... }\u00a0: ''a Machine.configuration)\u00a0: ''a option Vector.vector =<br/>\t\tVector.map (Machine.Tape.getSymbol) tapes<br/>\u00a0<br/>\tfun step ({ transitions, ... }\u00a0: ''a Machine.machine) (conf\u00a0: ''a Machine.configuration)\u00a0: ''a Machine.configuration =<br/>\t\tdoTransition conf (transitions (#state conf, getSymbols conf))<br/>\u00a0<br/>\tfun isFinal ({final, ...}\u00a0: ''a Machine.machine) ({state, ...}\u00a0: ''a Machine.configuration)\u00a0: bool =<br/>\t\tfinal = state<br/>\u00a0<br/>\tfun iter term (SOME 0) f s = NONE<br/>\t  | iter term (SOME n) f s = if term s then SOME s else iter term (SOME (n-1)) f (f s)<br/>\t  | iter term NONE     f s = if term s then SOME s else iter term NONE f (f s)<br/>\u00a0<br/>\u00a0<br/>\tfun simulate handler (machine\u00a0: ''a Machine.machine) optcount =<br/>\t\tlet val endconf = iter (isFinal machine) optcount (fn conf =&gt; (handler conf; step machine conf)) (start machine)<br/>\t\tin case endconf of NONE =&gt; NONE | SOME conf =&gt; (handler conf; endconf) end<br/>\u00a0<br/>end<br/>\u00a0<br/>\u00a0<br/>structure ExampleMachines = struct<br/>\u00a0<br/>\tstructure Machine = UniversalMachine.Machine<br/>\u00a0<br/>\t(* Tranform the 5-Tuple notation into the vector function *)<br/>\tfun makeTransitions nil\u00a0: ''a Machine.transitions = (fn (t, vec) =&gt; (print (Int.toString t); raise Subscript))<br/>\t  | makeTransitions ((s\u00a0: Machine.state,<br/>\t  \t\t      read\u00a0: ''a option,<br/>\t                      write\u00a0: ''a option,<br/>\t\t\t      move\u00a0: Machine.Tape.move,<br/>\t\t\t      s'\u00a0: Machine.state)\u00a0:: ts) =<br/>\t  \tfn (t, vec) =&gt;<br/>\t  \t\tif s=t andalso vec=(Vector.fromList [read])<br/>\t\t        then (s', Vector.fromList [(move, write)])<br/>\t\t\telse makeTransitions ts (t, vec)<br/>\u00a0<br/>\t(* `createTape xs` creates an tape initialized by xs, where the head stands on the first element of xs *)<br/>\tfun createTape' nil     = Machine.Tape.empty<br/>\t  | createTape' (x::xs) = Machine.Tape.moveLeft (Machine.Tape.write x (createTape' xs))<br/>\u00a0<br/>\tfun createTape xs = Machine.Tape.moveRight (createTape' (rev xs))<br/>\u00a0<br/>\u00a0<br/>\t(* Convert a tape into a string to print it. It needs a function that converts each symbol to string *)<br/>\tfun tapeToStr (symStr\u00a0: ''a -&gt; string) (tape\u00a0: ''a Machine.Tape.tape)\u00a0: string =<br/>\t\tlet val left    \u00a0: ''a option list = rev (Machine.Tape.leftOf tape)<br/>\t\t    val right   \u00a0: ''a option list = Machine.Tape.rightOf tape<br/>\t\t    val current \u00a0: ''a option      = Machine.Tape.getSymbol tape<br/>\t\t    val symToStr\u00a0: ''a option -&gt; string = (fn (NONE) =&gt; \"#\" | (SOME a) =&gt; symStr a)<br/>\t\tin<br/>\t\t    String.concatWith \" \" ((map symToStr left) @ [ \"|\" ^ symToStr current ^ \"|\" ] @ (map symToStr right))<br/>\t\tend<br/>\u00a0<br/>\t(* Convert a vector to a list *)<br/>\tfun vectToList vect = List.tabulate (Vector.length vect, fn i =&gt; Vector.sub (vect, i))<br/>\u00a0<br/>\u00a0<br/>\t(* Do this before every step and after the last step. *)<br/>\tfun handler (symToStr\u00a0: ''a -&gt; string) ({state, tapes}\u00a0: ''a Machine.configuration)\u00a0: unit =<br/>\t\tlet<br/>\t\t\tval str = \"State \" ^ Int.toString state ^ \"\\n\" ^<br/>\t\t\tString.concat (vectToList (Vector.mapi (fn (i, tape) =&gt; \"Tape #\" ^ Int.toString i ^ \": \" ^<br/>\t\t\ttapeToStr symToStr tape ^ \"\\n\") tapes))<br/>\t\tin<br/>\t\t\tprint str<br/>\t\tend<br/>\u00a0<br/>\u00a0<br/>\t(* Simulate and make result into string *)<br/>\tfun simulate (symToStr\u00a0: ''a -&gt; string) (machine\u00a0: ''a Machine.machine)<br/>\t    (optcount\u00a0: int option)\u00a0: string =<br/>\t\tcase (UniversalMachine.simulate (handler symToStr) machine optcount) of<br/>\t\t  NONE =&gt; \"Did not terminate.\"<br/>\t\t| SOME ({state, tapes}\u00a0: ''a Machine.configuration) =&gt; \"Terminated.\"<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\t(* Now finaly the machines! *)<br/>\u00a0<br/>\tval incrementer\u00a0: unit Machine.machine = {<br/>\t\talphabet = Vector.fromList [()],<br/>\t\tstates   = Vector.fromList [0, 1],<br/>\t\tstart    = 0,<br/>\t\tfinal    = 1,<br/>\t\ttapes    = Vector.fromList [createTape (map SOME [(), (), (), ()])],<br/>\t\ttransitions = makeTransitions [<br/>\t\t\t(0, SOME (), SOME (), Machine.Tape.Right, 0),<br/>\t\t\t(0, NONE,    SOME (), Machine.Tape.Stay,  1)]<br/>\t}<br/>\u00a0<br/>\tval busybeaver\u00a0: unit Machine.machine = {<br/>\t\talphabet = Vector.fromList [()],<br/>\t\tstates   = Vector.fromList [0, 1, 2, 3],<br/>\t\tstart    = 0,<br/>\t\tfinal    = 3,<br/>\t\ttapes    = Vector.fromList [Machine.Tape.empty],<br/>\t\ttransitions = makeTransitions [<br/>\t\t\t(0, NONE,    SOME (), Machine.Tape.Right, 1),<br/>\t\t\t(0, SOME (), SOME (), Machine.Tape.Left,  2),<br/>\t\t\t(1, NONE,    SOME (), Machine.Tape.Left,  0),<br/>\t\t\t(1, SOME (), SOME (), Machine.Tape.Right, 1),<br/>\t\t\t(2, NONE,    SOME (), Machine.Tape.Left,  1),<br/>\t\t\t(2, SOME (), SOME (), Machine.Tape.Stay,  3)]<br/>\t}<br/>\u00a0<br/>\tval sorting\u00a0: int Machine.machine = {<br/>\t\talphabet = Vector.fromList [1,2,3],<br/>\t\tstates   = Vector.fromList [0,1,2,3,4,5],<br/>\t\tstart    = 1,<br/>\t\tfinal    = 0,<br/>\t\ttapes    = Vector.fromList [createTape (map SOME [2, 1, 2, 2, 1, 1])],<br/>\t\ttransitions = makeTransitions [<br/>\t\t\t(1, SOME 1, SOME 1, Machine.Tape.Right, 1),<br/>\t\t\t(1, SOME 2, SOME 3, Machine.Tape.Right, 2),<br/>\t\t\t(1, NONE,   NONE,   Machine.Tape.Left,  5),<br/>\t\t\t(2, SOME 1, SOME 1, Machine.Tape.Right, 2),<br/>\t\t\t(2, SOME 2, SOME 2, Machine.Tape.Right, 2),<br/>\t\t\t(2, NONE,   NONE,   Machine.Tape.Left,  3),<br/>\t\t\t(3, SOME 1, SOME 2, Machine.Tape.Left,  3),<br/>\t\t\t(3, SOME 2, SOME 2, Machine.Tape.Left,  3),<br/>\t\t\t(3, SOME 3, SOME 2, Machine.Tape.Left,  5),<br/>\t\t\t(4, SOME 1, SOME 1, Machine.Tape.Left,  4),<br/>\t\t\t(4, SOME 2, SOME 2, Machine.Tape.Left,  4),<br/>\t\t\t(4, SOME 3, SOME 1, Machine.Tape.Right, 1),<br/>\t\t\t(5, SOME 1, SOME 1, Machine.Tape.Left,  5),<br/>\t\t\t(5, NONE,   NONE,   Machine.Tape.Right, 0)]<br/>\t\t}<br/>end<br/>\u00a0<br/>(** Invoke Simulations **)<br/>local<br/>\topen ExampleMachines<br/>\tval unitToString = (fn () =&gt; \"()\")<br/>\tfun simulate_unit machine optcount = print (simulate unitToString machine optcount ^ \"\\n\")<br/>\tfun simulate_int  machine optcount = print (simulate Int.toString machine optcount ^ \"\\n\")<br/>in<br/>\tval () = print \"Simulate incrementer...\\n\\n\"<br/>\tval () = simulate_unit incrementer NONE<br/>\tval () = print \"\\nSimulate Busy Beaver...\\n\\n\"<br/>\tval () = simulate_unit busybeaver NONE<br/>\tval () = print \"\\nSimulate Sorting...\\n\\n\"<br/>\tval () = simulate_int sorting NONE<br/>end<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 37, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> turing <span class=\"br0\">{</span>states initial terminating symbols blank tape rules <span class=\"br0\">{</span>doTrace <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> state <span class=\"re0\">$initial</span><br/>    <span class=\"kw1\">set</span> idx <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> tape <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$tape</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$tape</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> tape <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$blank</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> rule <span class=\"re0\">$rules</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$rule</span> state0 sym0 sym1 move state1<br/>\t<span class=\"kw1\">set</span> R<span class=\"br0\">(</span><span class=\"re0\">$state0</span>,<span class=\"re0\">$sym0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$sym1</span> <span class=\"re0\">$move</span> <span class=\"re0\">$state1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$state</span> ni <span class=\"re0\">$terminating</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> sym <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$tape</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><br/>\tlassign <span class=\"re0\">$R</span><span class=\"br0\">(</span><span class=\"re0\">$state</span>,<span class=\"re0\">$sym</span><span class=\"br0\">)</span> sym1 move state1<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$doTrace</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\">### Print the state, great for debugging</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"[join $tape \"</span><span class=\"st0\">\"]<span class=\"es0\">\\t</span>$state-&gt;$state1\"</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"[string repeat { } $idx]^\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lset</span> tape <span class=\"re0\">$idx</span> <span class=\"re0\">$sym1</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"re0\">$move</span> <span class=\"br0\">{</span><br/>\t    left <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> idx -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> idx <span class=\"nu0\">0</span><br/>\t\t    <span class=\"kw1\">set</span> tape <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$blank</span><span class=\"br0\">]</span> <span class=\"re0\">$tape</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    right <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> idx<span class=\"br0\">]</span> == <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$tape</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> tape <span class=\"re0\">$blank</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> state <span class=\"re0\">$state1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$tape</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 20, "block": "<pre class=\"text highlighted_source\">var [const] D=Dictionary;\t// short cut<br/>// blank symbol and terminating state(s) are Void<br/>var Lt=-1, Sy=0, Rt=1;  // Left, Stay, Right<br/>\u00a0<br/>fcn printTape(tape,pos){<br/>   tape.keys.apply(\"toInt\").sort()<br/>      .pump(String,'wrap(i){ ((pos==i) and \"(%s)\" or \"\u00a0%s \").fmt(tape[i]) })<br/>      .println();<br/>}<br/>fcn turing(state,[D]tape,[Int]pos,[D]rules,verbose=True,n=0){<br/>   if(not state){<br/>      print(\"%d steps. Length\u00a0%d. Tape: \".fmt(n,tape.len()));<br/>      printTape(tape,Void); <br/>      return(tape); <br/>   }<br/>   r:=rules[state][tape[pos] = tape.find(pos)];<br/>   if(verbose) printTape(tape,pos);<br/>   tape[pos]=r[0];<br/>   return(self.fcn(r[2],tape,pos+r[1],rules,verbose,n+1));<br/>}</pre>"}]}