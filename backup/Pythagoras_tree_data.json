{"task": "Pythagoras_tree", "blocks": [{"lang": "C", "loc": 68, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>point<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> pythagorasTree<span class=\"br0\">(</span>point a<span class=\"sy0\">,</span>point b<span class=\"sy0\">,</span><span class=\"kw4\">int</span> times<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\tpoint c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">;</span><br/>\u00a0<br/>\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span>  b.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\td.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span>  b.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\td.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\te.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> d.<span class=\"me1\">x</span> <span class=\"sy0\">+</span>  <span class=\"br0\">(</span> b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span>  b.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\te.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> d.<span class=\"me1\">y</span> <span class=\"sy0\">-</span>  <span class=\"br0\">(</span> b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span>  b.<span class=\"me1\">y</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>times<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tsetcolor<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">15</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tline<span class=\"br0\">(</span>a.<span class=\"me1\">x</span><span class=\"sy0\">,</span>a.<span class=\"me1\">y</span><span class=\"sy0\">,</span>b.<span class=\"me1\">x</span><span class=\"sy0\">,</span>b.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tline<span class=\"br0\">(</span>c.<span class=\"me1\">x</span><span class=\"sy0\">,</span>c.<span class=\"me1\">y</span><span class=\"sy0\">,</span>b.<span class=\"me1\">x</span><span class=\"sy0\">,</span>b.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tline<span class=\"br0\">(</span>c.<span class=\"me1\">x</span><span class=\"sy0\">,</span>c.<span class=\"me1\">y</span><span class=\"sy0\">,</span>d.<span class=\"me1\">x</span><span class=\"sy0\">,</span>d.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tline<span class=\"br0\">(</span>a.<span class=\"me1\">x</span><span class=\"sy0\">,</span>a.<span class=\"me1\">y</span><span class=\"sy0\">,</span>d.<span class=\"me1\">x</span><span class=\"sy0\">,</span>d.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpythagorasTree<span class=\"br0\">(</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>times<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpythagorasTree<span class=\"br0\">(</span>e<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>times<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\tpoint a<span class=\"sy0\">,</span>b<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> side<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> iter<span class=\"sy0\">;</span><br/>\u00a0<br/>\ttime_t t<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter initial side length\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of iterations\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>iter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ta.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">*</span>side<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> side<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\ta.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>side<span class=\"sy0\">;</span><br/>\tb.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">*</span>side<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> side<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\tb.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>side<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinitwindow<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">*</span>side<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>side<span class=\"sy0\">,</span><span class=\"st0\">\"Pythagoras Tree\u00a0?\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpythagorasTree<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>iter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getch.html\"><span class=\"kw3\">getch</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 125, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">720</span>, LINE_LEN <span class=\"sy1\">=</span> <span class=\"nu0\">120</span>, BORDER <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> myBitmap <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, brush<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, clr<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, wid<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPINFO bi<span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>        <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>    <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>      <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>       <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>      <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>        HDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        hdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        width <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> BYTE clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> pBits, clr, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setBrushColor<span class=\"br0\">(</span> DWORD bClr <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> brush <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        brush <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> bClr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenWidth<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> path <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>        BITMAPINFO       infoheader<span class=\"sy4\">;</span><br/>        BITMAP           bitmap<span class=\"sy4\">;</span><br/>        DWORD            wb<span class=\"sy4\">;</span><br/>        GetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>        GetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        HANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, <br/>                                  FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        CloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        pen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, wid, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span> HDC    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span> HBRUSH brush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span> <span class=\"kw4\">int</span>    width, height, wid<span class=\"sy4\">;</span><br/>    DWORD    clr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> tree <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    tree<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span> bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        clr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">90</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span>   clr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        clr<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> clr<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        clr<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span>   clr<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">190</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> draw<span class=\"br0\">(</span> <span class=\"kw4\">int</span> it, POINT a, POINT b <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>it <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> clr<span class=\"br0\">[</span>it <span class=\"sy2\">%</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        POINT df <span class=\"sy1\">=</span> <span class=\"br0\">{</span> b.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">x</span>, a.<span class=\"me1\">y</span> <span class=\"sy2\">-</span>  b.<span class=\"me1\">y</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span> POINT c <span class=\"sy1\">=</span> <span class=\"br0\">{</span> b.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> df.<span class=\"me1\">y</span>, b.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> df.<span class=\"me1\">x</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        POINT d <span class=\"sy1\">=</span> <span class=\"br0\">{</span> a.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> df.<span class=\"me1\">y</span>, a.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> df.<span class=\"me1\">x</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        POINT e <span class=\"sy1\">=</span> <span class=\"br0\">{</span> d.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> df.<span class=\"me1\">x</span> <span class=\"sy2\">-</span> df.<span class=\"me1\">y</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>, d.<span class=\"me1\">y</span> <span class=\"sy2\">-</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> df.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> df.<span class=\"me1\">y</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        drawSqr<span class=\"br0\">(</span> a, b, c, d <span class=\"br0\">)</span><span class=\"sy4\">;</span> draw<span class=\"br0\">(</span> it <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, d, e <span class=\"br0\">)</span><span class=\"sy4\">;</span> draw<span class=\"br0\">(</span> it <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, e, c <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> save<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> p <span class=\"br0\">)</span> <span class=\"br0\">{</span> bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> p <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> drawSqr<span class=\"br0\">(</span> POINT a, POINT b, POINT c, POINT d <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        HDC dc <span class=\"sy1\">=</span> bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        MoveToEx<span class=\"br0\">(</span> dc, a.<span class=\"me1\">x</span>, a.<span class=\"me1\">y</span>, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        LineTo<span class=\"br0\">(</span> dc, b.<span class=\"me1\">x</span>, b.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        LineTo<span class=\"br0\">(</span> dc, c.<span class=\"me1\">x</span>, c.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        LineTo<span class=\"br0\">(</span> dc, d.<span class=\"me1\">x</span>, d.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        LineTo<span class=\"br0\">(</span> dc, a.<span class=\"me1\">x</span>, a.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    myBitmap bmp<span class=\"sy4\">;</span><br/>    DWORD clr<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    POINT ptA <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> BMP_SIZE <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"br0\">(</span> LINE_LEN <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>, BMP_SIZE <span class=\"sy2\">-</span> BORDER <span class=\"br0\">}</span>,<br/>          ptB <span class=\"sy1\">=</span> <span class=\"br0\">{</span> ptA.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> LINE_LEN, ptA.<span class=\"me1\">y</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    tree t<span class=\"sy4\">;</span> t.<span class=\"me1\">draw</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span>, ptA, ptB <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// change this path </span><br/>    t.<span class=\"me1\">save</span><span class=\"br0\">(</span> <span class=\"st0\">\"?:/pt.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 59, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> Point <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x:float<span class=\"sy0\">;</span> y:<span class=\"kw4\">float</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">type</span> Line <span class=\"sy0\">=</span> <span class=\"br0\">{</span> left\u00a0: Point<span class=\"sy0\">;</span> right\u00a0: Point <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> draw_start_html <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;&lt;head&gt;&lt;title&gt;Phytagoras tree&lt;/title&gt;<br/>&lt;style type=\"</span>text<span class=\"sy0\">/</span>css<span class=\"st0\">\"&gt;polygon{fill:none;stroke:black;stroke-width:1}&lt;/style&gt;<br/>&lt;/head&gt;&lt;body&gt;<br/>&lt;svg width=\"</span><span class=\"nu0\">640</span><span class=\"st0\">\" height=\"</span><span class=\"nu0\">640</span><span class=\"st0\">\"&gt;\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> draw_end_html <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"Sorry, your browser does not support inline SVG.<br/>&lt;/svg&gt;&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> svg_square x1 y1 x2 y2 x3 y3 x4 y4 <span class=\"sy0\">=</span><br/>    sprintf <span class=\"st0\">\"\"</span><span class=\"st0\">\"&lt;polygon points=\"</span><span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i <span class=\"sy0\">%</span>i<span class=\"st0\">\" /&gt;\"</span><span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">int</span> x1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x3<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y3<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x4<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y4<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> out <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">Console</span>.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sprout line <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">x</span><br/>    <span class=\"kw1\">let</span> dy <span class=\"sy0\">=</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">y</span><br/>    <span class=\"kw1\">let</span> line2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        left <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dy<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dx <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        right <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dy <span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dx <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">let</span> triangleTop <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">=</span> line2.<span class=\"me1\">left</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>.<span class=\"sy0\">;</span><br/>        y <span class=\"sy0\">=</span> line2.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>.<br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span><br/>        <span class=\"br0\">{</span> left <span class=\"sy0\">=</span> line2.<span class=\"me1\">left</span><span class=\"sy0\">;</span> right <span class=\"sy0\">=</span> triangleTop <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> left <span class=\"sy0\">=</span> triangleTop<span class=\"sy0\">;</span> right <span class=\"sy0\">=</span> line2.<span class=\"me1\">right</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> draw_square line <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">x</span><br/>    <span class=\"kw1\">let</span> dy <span class=\"sy0\">=</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">y</span><br/>    svg_square line.<span class=\"me1\">left</span>.<span class=\"me1\">x</span> line.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">x</span> line.<span class=\"me1\">right</span>.<span class=\"me1\">y</span><br/>               <span class=\"br0\">(</span>line.<span class=\"me1\">right</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span> <span class=\"br0\">(</span>line.<span class=\"me1\">right</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span> <span class=\"br0\">(</span>line.<span class=\"me1\">left</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span> <span class=\"br0\">(</span>line.<span class=\"me1\">left</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> generate lines <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>| <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>| n <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> next <span class=\"sy0\">=</span><br/>        lines<br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> line <span class=\"sy0\">-&gt;</span><br/>            <span class=\"br0\">(</span>draw_square <span class=\"sy0\">&gt;&gt;</span> out<span class=\"br0\">)</span> line<br/>            sprout line<br/>        <span class=\"br0\">)</span><br/>    generate next <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> depth <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw1\">if</span> argv.<span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>System.<span class=\"me1\">UInt32</span>.<span class=\"me1\">Parse</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> argv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"nu0\">2</span><br/>    out draw_start_html<br/>    generate <span class=\"br0\">[</span><span class=\"br0\">{</span> left <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">275</span>.<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">500</span>. <span class=\"br0\">}</span><span class=\"sy0\">;</span> right <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">375</span>.<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">500</span>. <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">]</span> depth<br/>    out draw_end_html<br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "FreeBASIC", "loc": 38, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 03-12-2016</span><br/><span class=\"co1\">' compile with: fbc -s gui </span><br/><span class=\"co1\">' or fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> pythagoras_tree<span class=\"br0\">(</span>x1 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, y1 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, x2 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, y2 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, depth <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> depth &gt; <span class=\"nu0\">10</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> dx = x2 - x1, dy = y1 - y2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x3 = x2 - dy, y3 = y2 - dx<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x4 = x1 - dy, y4 = y1 - dx<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x5 = x4 + <span class=\"br0\">(</span>dx - dy<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> y5 = y4 - <span class=\"br0\">(</span>dx + dy<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>    <span class=\"co1\">'draw the box</span><br/>    <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span> - <span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Line</span> - <span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Line</span> - <span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Line</span> - <span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><br/>\u00a0<br/>    pythagoras_tree<span class=\"br0\">(</span>x4, y4, x5, y5, depth +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    pythagoras_tree<span class=\"br0\">(</span>x5, y5, x3, y3, depth +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/><span class=\"co1\">' max for w is about max screensize - 500</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong w = <span class=\"nu0\">800</span>, h = w * <span class=\"nu0\">11</span> \\ <span class=\"nu0\">16</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong w2 = w \\ <span class=\"nu0\">2</span>, diff = w \\ <span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"kw1\">ScreenRes</span> w, h, <span class=\"nu0\">8</span><br/>pythagoras_tree<span class=\"br0\">(</span>w2 - diff, h -<span class=\"nu0\">10</span> , w2 + diff , h -<span class=\"nu0\">10</span> , <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"co1\">' BSave \"pythagoras_tree.bmp\",0</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 86, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"image\"</span><br/>\t<span class=\"st0\">\"image/color\"</span><br/>\t<span class=\"st0\">\"image/draw\"</span><br/>\t<span class=\"st0\">\"image/png\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\twidth<span class=\"sy1\">,</span> height <span class=\"sy2\">=</span> <span class=\"nu0\">800</span><span class=\"sy1\">,</span> <span class=\"nu0\">600</span><br/>\tmaxDepth      <span class=\"sy2\">=</span> <span class=\"nu0\">11</span>                    <span class=\"co1\">// how far to recurse, between 1 and 20 is reasonable</span><br/>\tcolFactor     <span class=\"sy2\">=</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span><span class=\"nu0\">255</span> <span class=\"sy3\">/</span> maxDepth<span class=\"sy1\">)</span> <span class=\"co1\">// adjusts the colour so leaves get greener further out</span><br/>\tfileName      <span class=\"sy2\">=</span> <span class=\"st0\">\"pythagorasTree.png\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\timg <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewNRGBA<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> width<span class=\"sy1\">,</span> height<span class=\"sy1\">))</span> <span class=\"co1\">// create new image</span><br/>\tbg <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewUniform<span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">})</span> <span class=\"co1\">// prepare white for background</span><br/>\tdraw<span class=\"sy3\">.</span><span class=\"me1\">Draw</span><span class=\"sy1\">(</span>img<span class=\"sy1\">,</span> img<span class=\"sy3\">.</span><span class=\"me1\">Bounds</span><span class=\"sy1\">(),</span> bg<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span><span class=\"me1\">ZP</span><span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span><span class=\"me1\">Src</span><span class=\"sy1\">)</span>   <span class=\"co1\">// fill the background</span><br/>\u00a0<br/>\tdrawSquares<span class=\"sy1\">(</span><span class=\"nu0\">340</span><span class=\"sy1\">,</span> <span class=\"nu0\">550</span><span class=\"sy1\">,</span> <span class=\"nu0\">460</span><span class=\"sy1\">,</span> <span class=\"nu0\">550</span><span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"co1\">// start off near the bottom of the image</span><br/>\u00a0<br/>\timgFile<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span>fileName<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">defer</span> imgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>imgFile<span class=\"sy1\">,</span> img<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\timgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> drawSquares<span class=\"sy1\">(</span>ax<span class=\"sy1\">,</span> ay<span class=\"sy1\">,</span> bx<span class=\"sy1\">,</span> by <span class=\"kw4\">int</span><span class=\"sy1\">,</span> img <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.NRGBA\"><span class=\"kw5\">image.<span class=\"me1\">NRGBA</span></span></a><span class=\"sy1\">,</span> depth <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> depth &gt; maxDepth <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\tdx<span class=\"sy1\">,</span> dy <span class=\"sy2\">:=</span> bx<span class=\"sy3\">-</span>ax<span class=\"sy1\">,</span> ay<span class=\"sy3\">-</span>by<br/>\tx3<span class=\"sy1\">,</span> y3 <span class=\"sy2\">:=</span> bx<span class=\"sy3\">-</span>dy<span class=\"sy1\">,</span> by<span class=\"sy3\">-</span>dx<br/>\tx4<span class=\"sy1\">,</span> y4 <span class=\"sy2\">:=</span> ax<span class=\"sy3\">-</span>dy<span class=\"sy1\">,</span> ay<span class=\"sy3\">-</span>dx<br/>\tx5<span class=\"sy1\">,</span> y5 <span class=\"sy2\">:=</span> x4<span class=\"sy3\">+</span><span class=\"sy1\">(</span>dx<span class=\"sy3\">-</span>dy<span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> y4<span class=\"sy3\">-</span><span class=\"sy1\">(</span>dx<span class=\"sy3\">+</span>dy<span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><br/>\tcol <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>depth<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> colFactor<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"sy1\">}</span><br/>\tdrawLine<span class=\"sy1\">(</span>ax<span class=\"sy1\">,</span> ay<span class=\"sy1\">,</span> bx<span class=\"sy1\">,</span> by<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\tdrawLine<span class=\"sy1\">(</span>bx<span class=\"sy1\">,</span> by<span class=\"sy1\">,</span> x3<span class=\"sy1\">,</span> y3<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\tdrawLine<span class=\"sy1\">(</span>x3<span class=\"sy1\">,</span> y3<span class=\"sy1\">,</span> x4<span class=\"sy1\">,</span> y4<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\tdrawLine<span class=\"sy1\">(</span>x4<span class=\"sy1\">,</span> y4<span class=\"sy1\">,</span> ax<span class=\"sy1\">,</span> ay<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\tdrawSquares<span class=\"sy1\">(</span>x4<span class=\"sy1\">,</span> y4<span class=\"sy1\">,</span> x5<span class=\"sy1\">,</span> y5<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> depth<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\tdrawSquares<span class=\"sy1\">(</span>x5<span class=\"sy1\">,</span> y5<span class=\"sy1\">,</span> x3<span class=\"sy1\">,</span> y3<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> depth<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> drawLine<span class=\"sy1\">(</span>x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> x1<span class=\"sy1\">,</span> y1 <span class=\"kw4\">int</span><span class=\"sy1\">,</span> img <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.NRGBA\"><span class=\"kw5\">image.<span class=\"me1\">NRGBA</span></span></a><span class=\"sy1\">,</span> col color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tdx <span class=\"sy2\">:=</span> abs<span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">)</span><br/>\tdy <span class=\"sy2\">:=</span> abs<span class=\"sy1\">(</span>y1 <span class=\"sy3\">-</span> y0<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">var</span> sx<span class=\"sy1\">,</span> sy <span class=\"kw4\">int</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> x0 &lt; x1 <span class=\"sy1\">{</span><br/>\t\tsx <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> y0 &lt; y1 <span class=\"sy1\">{</span><br/>\t\tsy <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\terr <span class=\"sy2\">:=</span> dx <span class=\"sy3\">-</span> dy<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\timg<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> x0 <span class=\"sy3\">==</span> x1 &amp;&amp; y0 <span class=\"sy3\">==</span> y1 <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\te2 <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> err<br/>\t\t<span class=\"kw1\">if</span> e2 &gt; <span class=\"sy3\">-</span>dy <span class=\"sy1\">{</span><br/>\t\t\terr <span class=\"sy2\">-=</span> dy<br/>\t\t\tx0 <span class=\"sy2\">+=</span> sx<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> e2 &lt; dx <span class=\"sy1\">{</span><br/>\t\t\terr <span class=\"sy2\">+=</span> dx<br/>\t\t\ty0 <span class=\"sy2\">+=</span> sy<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> abs<span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> x &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy3\">-</span>x<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\">mkBranches <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>mkBranches <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> d  <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;+&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;*&gt;</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              l1 <span class=\"sy0\">=</span> d <span class=\"sy0\">&lt;+&gt;</span> orth d<br/>                              l2 <span class=\"sy0\">=</span> orth l1<br/>                    <span class=\"kw1\">in</span><br/>                      <span class=\"br0\">[</span> <span class=\"br0\">[</span>a <span class=\"sy0\">&lt;+&gt;</span> l2<span class=\"sy0\">,</span> b <span class=\"sy0\">&lt;+&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;*&gt;</span> l2<span class=\"br0\">)</span><span class=\"sy0\">,</span> a <span class=\"sy0\">&lt;+&gt;</span> l1<span class=\"sy0\">,</span> a<span class=\"br0\">]</span><br/>                      <span class=\"sy0\">,</span> <span class=\"br0\">[</span>a <span class=\"sy0\">&lt;+&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;*&gt;</span> l1<span class=\"br0\">)</span><span class=\"sy0\">,</span> b <span class=\"sy0\">&lt;+&gt;</span> l1<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">&lt;+&gt;</span> l2<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;+&gt;</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>c<span class=\"sy0\">,</span> b<span class=\"sy0\">+</span>d<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">*</span>n<span class=\"sy0\">,</span> b<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>    orth <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">)</span></pre>"}, {"lang": "Java", "loc": 75, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.geom.Path2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PythagorasTree <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> depthLimit <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">float</span> hue <span class=\"sy0\">=</span> 0.15f<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> PythagorasTree<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> drawTree<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <span class=\"kw4\">float</span> x1, <span class=\"kw4\">float</span> y1, <span class=\"kw4\">float</span> x2, <span class=\"kw4\">float</span> y2,<br/>            <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> depthLimit<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">float</span> dx <span class=\"sy0\">=</span> x2 <span class=\"sy0\">-</span> x1<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> dy <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> y2<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">float</span> x3 <span class=\"sy0\">=</span> x2 <span class=\"sy0\">-</span> dy<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> y3 <span class=\"sy0\">=</span> y2 <span class=\"sy0\">-</span> dx<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> x4 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> dy<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> y4 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> dx<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> x5 <span class=\"sy0\">=</span> x4 <span class=\"sy0\">+</span> 0.5F <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> y5 <span class=\"sy0\">=</span> y4 <span class=\"sy0\">-</span> 0.5F <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Path2D square <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Path2D.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afloat+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Float</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        square.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        square.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        square.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        square.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        square.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue <span class=\"sy0\">+</span> depth <span class=\"sy0\">*</span> 0.02f, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">lightGray</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Path2D triangle <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Path2D.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afloat+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Float</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        triangle.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        triangle.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        triangle.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x5, y5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        triangle.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue <span class=\"sy0\">+</span> depth <span class=\"sy0\">*</span> 0.035f, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">lightGray</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawTree<span class=\"br0\">(</span>g, x4, y4, x5, y5, depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span>g, x5, y5, x3, y3, depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> g, <span class=\"nu0\">275</span>, <span class=\"nu0\">500</span>, <span class=\"nu0\">375</span>, <span class=\"nu0\">500</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Pythagoras Tree\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> PythagorasTree<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 105, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>html lang<span class=\"sy0\">=</span><span class=\"st0\">\"en\"</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>meta charset<span class=\"sy0\">=</span><span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>style<span class=\"sy0\">&gt;</span><br/>        canvas <span class=\"br0\">{</span><br/>            position<span class=\"sy0\">:</span> absolute<span class=\"sy0\">;</span><br/>            top<span class=\"sy0\">:</span> <span class=\"nu0\">45</span><span class=\"sy0\">%;</span><br/>            left<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">%;</span><br/>            width<span class=\"sy0\">:</span> 640px<span class=\"sy0\">;</span><br/>            height<span class=\"sy0\">:</span> 640px<span class=\"sy0\">;</span><br/>            margin<span class=\"sy0\">:</span> <span class=\"sy0\">-</span>320px <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span>320px<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;/</span>style<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>head<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>canvas<span class=\"sy0\">&gt;&lt;/</span>canvas<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/>        <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">querySelector</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        canvas.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">;</span><br/>        canvas.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> depthLimit <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> hue <span class=\"sy0\">=</span> <span class=\"nu0\">0.15</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> drawTree<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> depthLimit<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> dx <span class=\"sy0\">=</span> x2 <span class=\"sy0\">-</span> x1<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> dy <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> y2<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> x3 <span class=\"sy0\">=</span> x2 <span class=\"sy0\">-</span> dy<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> y3 <span class=\"sy0\">=</span> y2 <span class=\"sy0\">-</span> dx<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> x4 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> dy<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> y4 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> dx<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> x5 <span class=\"sy0\">=</span> x4 <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> y5 <span class=\"sy0\">=</span> y4 <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x3<span class=\"sy0\">,</span> y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x4<span class=\"sy0\">,</span> y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> HSVtoRGB<span class=\"br0\">(</span>hue <span class=\"sy0\">+</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">0.02</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">strokeStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"lightGray\"</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x3<span class=\"sy0\">,</span> y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x4<span class=\"sy0\">,</span> y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x5<span class=\"sy0\">,</span> y5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> HSVtoRGB<span class=\"br0\">(</span>hue <span class=\"sy0\">+</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">0.035</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">strokeStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"lightGray\"</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            drawTree<span class=\"br0\">(</span>x4<span class=\"sy0\">,</span> y4<span class=\"sy0\">,</span> x5<span class=\"sy0\">,</span> y5<span class=\"sy0\">,</span> depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            drawTree<span class=\"br0\">(</span>x5<span class=\"sy0\">,</span> y5<span class=\"sy0\">,</span> x3<span class=\"sy0\">,</span> y3<span class=\"sy0\">,</span> depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* copied from stackoverflow */</span><br/>        <span class=\"kw1\">function</span> HSVtoRGB<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> r<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\u00a0<br/>            i <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>h <span class=\"sy0\">*</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f <span class=\"sy0\">=</span> h <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>            p <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            q <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> f <span class=\"sy0\">*</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> f<span class=\"br0\">)</span> <span class=\"sy0\">*</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> v<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> t<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> q<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> v<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> p<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> v<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> p<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> q<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> t<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> p<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span> r <span class=\"sy0\">=</span> v<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> p<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"rgb(\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">round</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">round</span><span class=\"br0\">(</span>g <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">round</span><span class=\"br0\">(</span>b <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> draw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">clearRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> canvas.<span class=\"me1\">width</span><span class=\"sy0\">,</span> canvas.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            drawTree<span class=\"br0\">(</span><span class=\"nu0\">275</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">375</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        draw<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Julia", "loc": 44, "block": "<pre class=\"text highlighted_source\">using Gadfly<br/>using DataFrames<br/>\u00a0<br/>const xarray = zeros(Float64, 80000)<br/>const yarray = zeros(Float64, 80000)<br/>const arraypos = ones(Int32,1)<br/>const maxdepth = zeros(Int32, 1)<br/>\u00a0<br/>\u00a0<br/>function addpoints(x1, y1, x2, y2)<br/>    xarray[arraypos[1]] = x1 <br/>    xarray[arraypos[1]+1] = x2<br/>    yarray[arraypos[1]] = y1<br/>    yarray[arraypos[1]+1] = y2<br/>    arraypos[1] += 2<br/>end<br/>\u00a0<br/>\u00a0<br/>function pythtree(ax, ay, bx, by, depth)<br/>    if(depth &gt; maxdepth[1])<br/>        return<br/>    end<br/>    dx=bx-ax; dy=ay-by;<br/>    x3=bx-dy; y3=by-dx;<br/>    x4=ax-dy; y4=ay-dx;<br/>    x5=x4+(dx-dy)/2; y5=y4-(dx+dy)/2;<br/>    addpoints(ax, ay, bx, by)<br/>    addpoints(bx, by, x3, y3)<br/>    addpoints(x3, y3, x4, y4)<br/>    addpoints(x4, y4, ax, ay)<br/>    pythtree(x4, y4, x5, y5, depth + 1)<br/>    pythtree(x5, y5, x3, y3, depth + 1)<br/>end<br/>\u00a0<br/>\u00a0<br/>function pythagorastree(x1, y1, x2, y2, size, maxdep)<br/>    maxdepth[1] = maxdep<br/>    println(\"Pythagoras Tree, depth $(maxdepth[1]), size $size, starts at ($x1, $y1, $x2, $y2)\");<br/>    pythtree(x1, y1, x2, y2, 0);<br/>    df = DataFrame(x=xarray[1:arraypos[1]-1], y=-yarray[1:arraypos[1]-1])<br/>    plot(df, x=:x, y=:y, Geom.path(), Theme(default_color=\"green\", point_size=0.4mm))<br/>end<br/>\u00a0<br/>pythagorastree(275.,500.,375.,500.,640., 9)</pre>"}, {"lang": "Kotlin", "loc": 80, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Path2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PythagorasTree <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> depthLimit <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hue <span class=\"sy0\">=</span> 0.15f<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawTree<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x1<span class=\"sy0\">:</span> Float, y1<span class=\"sy0\">:</span> Float,<br/>                                        x2<span class=\"sy0\">:</span> Float, y2<span class=\"sy0\">:</span> Float, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> depthLimit<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx <span class=\"sy0\">=</span> x2 - x1<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy <span class=\"sy0\">=</span> y1 - y2<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x3 <span class=\"sy0\">=</span> x2 - dy<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y3 <span class=\"sy0\">=</span> y2 - dx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x4 <span class=\"sy0\">=</span> x1 - dy<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y4 <span class=\"sy0\">=</span> y1 - dx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x5 <span class=\"sy0\">=</span> x4 + 0.5f <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx - dy<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y5 <span class=\"sy0\">=</span> y4 - 0.5f <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx + dy<span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> square <span class=\"sy0\">=</span> Path2D.<span class=\"me1\">Float</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>square<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            moveTo<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><br/>            lineTo<span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span><br/>            lineTo<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><br/>            lineTo<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><br/>            closePath<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue + depth <span class=\"sy0\">*</span> 0.02f, 1.0f, 1.0f<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">lightGray</span><br/>        g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> triangle <span class=\"sy0\">=</span> Path2D.<span class=\"me1\">Float</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>triangle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            moveTo<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><br/>            lineTo<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><br/>            lineTo<span class=\"br0\">(</span>x5, y5<span class=\"br0\">)</span><br/>            closePath<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue + depth <span class=\"sy0\">*</span> 0.035f, 1.0f, 1.0f<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">lightGray</span><br/>        g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><br/>\u00a0<br/>        drawTree<span class=\"br0\">(</span>g, x4, y4, x5, y5, depth + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>g, x5, y5, x3, y3, depth + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>g as Graphics2D, 275.0f, 500.0f, 375.0f, 500.0f, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            defaultCloseOperation <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>            title <span class=\"sy0\">=</span> <span class=\"st0\">\"Pythagoras Tree\"</span><br/>            isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            add<span class=\"br0\">(</span>PythagorasTree<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>            pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 34, "block": "<pre class=\"parigp highlighted_source\"><span class=\"co1\">\\\\ Pythagoras Tree (w/recursion)</span><br/><span class=\"co1\">\\\\ 4/11/16 aev</span><br/>plotline<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw1\">plotmove</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">plotrline</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>x2<span class=\"sy0\">-</span>x1<span class=\"sy0\">,</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>pythtree<span class=\"br0\">(</span>ax<span class=\"sy0\">,</span>ay<span class=\"sy0\">,</span>bx<span class=\"sy0\">,</span>by<span class=\"sy0\">,</span>d<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>dx<span class=\"sy0\">,</span>dy<span class=\"sy0\">,</span>x3<span class=\"sy0\">,</span>y3<span class=\"sy0\">,</span>x4<span class=\"sy0\">,</span>y4<span class=\"sy0\">,</span>x5<span class=\"sy0\">,</span>y5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>d<span class=\"sy0\">&gt;</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>dx<span class=\"sy0\">=</span>bx<span class=\"sy0\">-</span>ax<span class=\"sy0\">;</span> dy<span class=\"sy0\">=</span>ay<span class=\"sy0\">-</span>by<span class=\"sy0\">;</span><br/>x3<span class=\"sy0\">=</span>bx<span class=\"sy0\">-</span>dy<span class=\"sy0\">;</span> y3<span class=\"sy0\">=</span>by<span class=\"sy0\">-</span>dx<span class=\"sy0\">;</span><br/>x4<span class=\"sy0\">=</span>ax<span class=\"sy0\">-</span>dy<span class=\"sy0\">;</span> y4<span class=\"sy0\">=</span>ay<span class=\"sy0\">-</span>dx<span class=\"sy0\">;</span><br/>x5<span class=\"sy0\">=</span>x4<span class=\"sy0\">+</span><span class=\"br0\">(</span>dx<span class=\"sy0\">-</span>dy<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span> y5<span class=\"sy0\">=</span>y4<span class=\"sy0\">-</span><span class=\"br0\">(</span>dx<span class=\"sy0\">+</span>dy<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><br/>plotline<span class=\"br0\">(</span>ax<span class=\"sy0\">,</span>ay<span class=\"sy0\">,</span>bx<span class=\"sy0\">,</span>by<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>plotline<span class=\"br0\">(</span>bx<span class=\"sy0\">,</span>by<span class=\"sy0\">,</span>x3<span class=\"sy0\">,</span>y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>plotline<span class=\"br0\">(</span>x3<span class=\"sy0\">,</span>y3<span class=\"sy0\">,</span>x4<span class=\"sy0\">,</span>y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>plotline<span class=\"br0\">(</span>x4<span class=\"sy0\">,</span>y4<span class=\"sy0\">,</span>ax<span class=\"sy0\">,</span>ay<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pythtree<span class=\"br0\">(</span>x4<span class=\"sy0\">,</span>y4<span class=\"sy0\">,</span>x5<span class=\"sy0\">,</span>y5<span class=\"sy0\">,</span>d<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pythtree<span class=\"br0\">(</span>x5<span class=\"sy0\">,</span>y5<span class=\"sy0\">,</span>x3<span class=\"sy0\">,</span>y3<span class=\"sy0\">,</span>d<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>PythagorTree<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span>depth<span class=\"sy0\">=</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>dx<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>dy<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>ttlb<span class=\"sy0\">=</span><span class=\"st0\">\"Pythagoras Tree, depth \"</span><span class=\"sy0\">,</span>ttl<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>ttlb<span class=\"sy0\">,</span>depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\" *** \"</span><span class=\"sy0\">,</span>ttl<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\", size \"</span><span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Start: \"</span><span class=\"sy0\">,</span>x1<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotinit</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotcolor</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\green</span><br/><span class=\"kw1\">plotscale</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>size<span class=\"sy0\">,</span>size<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span><span class=\"nu1\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">plotmove</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pythtree<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotdraw</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>size<span class=\"sy0\">,</span>size<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Executing:</span><br/>PythagorTree<span class=\"br0\">(</span><span class=\"nu1\">275</span><span class=\"sy0\">,</span><span class=\"nu1\">500</span><span class=\"sy0\">,</span><span class=\"nu1\">375</span><span class=\"sy0\">,</span><span class=\"nu1\">500</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">640</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"co1\">\\\\PythTree1.png</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 47, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Imager<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tree <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$dx</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$dy</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x3</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$y3</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dx</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x4</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$y4</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dx</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x5</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x4</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$dx</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$y5</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y4</span> <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$dx</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># Square</span><br/>    <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">polygon</span><span class=\"br0\">(</span><br/>        points <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x3</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x4</span><span class=\"sy0\">,</span> <span class=\"re0\">$y4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"sy0\">/</span> <span class=\"re0\">$depth</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># Triangle</span><br/>    <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">polygon</span><span class=\"br0\">(</span><br/>        points <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x3</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x4</span><span class=\"sy0\">,</span> <span class=\"re0\">$y4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"re0\">$x5</span><span class=\"sy0\">,</span> <span class=\"re0\">$y5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"sy0\">/</span> <span class=\"re0\">$depth</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    tree<span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$x4</span><span class=\"sy0\">,</span> <span class=\"re0\">$y4</span><span class=\"sy0\">,</span> <span class=\"re0\">$x5</span><span class=\"sy0\">,</span> <span class=\"re0\">$y5</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$x5</span><span class=\"sy0\">,</span> <span class=\"re0\">$y5</span><span class=\"sy0\">,</span> <span class=\"re0\">$x3</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1920</span><span class=\"sy0\">,</span> <span class=\"nu0\">1080</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$width</span><span class=\"sy0\">,</span> ysize <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">box</span><span class=\"br0\">(</span>filled <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> color <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'white'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>tree<span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">2.3</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">1.8</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/write.html\"><span class=\"kw3\">write</span></a><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'pythagoras_tree.png'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 31, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Square <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Complex <span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">position</span><span class=\"sy0\">,</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">edge</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> size <span class=\"br0\">{</span> <span class=\"re0\">$!edge</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> svg<span class=\"sy0\">-</span>polygon <span class=\"br0\">{</span><br/>\tqq<span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>polygon points<span class=\"sy0\">=</span><span class=\"st0\">\"{join ' ', map<br/>\t{ ($!position + $_ * $!edge).reals.join(',') },<br/>\t0, 1, 1+1i, 1i}\"</span> style<span class=\"sy0\">=</span><span class=\"st0\">\"fill:lime;stroke=black\"</span> <span class=\"sy0\">/&gt;</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> left<span class=\"sy0\">-</span>child <span class=\"br0\">{</span><br/>\tself<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span><br/>\tposition <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$!position</span> <span class=\"sy0\">+</span> <span class=\"kw3\">i</span><span class=\"sy0\">*</span><span class=\"re0\">$!edge</span><span class=\"sy0\">,</span><br/>\tedge <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">cis</span><span class=\"br0\">(</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$!edge</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> right<span class=\"sy0\">-</span>child <span class=\"br0\">{</span><br/>\tself<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span><br/>\tposition <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$!position</span> <span class=\"sy0\">+</span> <span class=\"kw3\">i</span><span class=\"sy0\">*</span><span class=\"re0\">$!edge</span> <span class=\"sy0\">+</span> self<span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">-</span>child<span class=\"sy0\">.</span><span class=\"me1\">edge</span><span class=\"sy0\">,</span><br/>\tedge <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">cis</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$!edge</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'&lt;svg width=\"500\" height=\"500\"&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">END</span>   <span class=\"kw3\">say</span> <span class=\"st_h\">'&lt;/svg&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tree<span class=\"br0\">(</span>Square <span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> <span class=\"re0\">$level</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">svg</span><span class=\"sy0\">-</span>polygon<span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">-</span>child<span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">-</span>child<span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tree Square<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>position<span class=\"br0\">(</span><span class=\"nu0\">250</span><span class=\"sy0\">+</span>0i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>edge<span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"sy0\">+</span>0i<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 98, "block": "<pre class=\"text highlighted_source\">---- demo\\rosetta\\PythagorasTree.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>function rgb(integer r, integer g, integer b)<br/>    return r*#10000 + g*#100 + b<br/>end function<br/>\u00a0<br/>procedure drawTree(atom x1, atom y1, atom x2, atom y2, integer depth)<br/>atom dx = x2 - x1<br/>atom dy = y1 - y2<br/>\u00a0<br/>atom x3 = x2 - dy<br/>atom y3 = y2 - dx<br/>atom x4 = x1 - dy<br/>atom y4 = y1 - dx<br/>atom x5 = x4 + 0.5 * (dx - dy)<br/>atom y5 = y4 - 0.5 * (dx + dy)<br/>\u00a0<br/>integer r = 250-depth*20<br/>\u00a0<br/>    cdCanvasSetForeground(cddbuffer, rgb(r,#FF,0))<br/>    cdCanvasBegin(cddbuffer,CD_FILL)<br/>    cdCanvasVertex(cddbuffer, x1, 640-y1)<br/>    cdCanvasVertex(cddbuffer, x2, 640-y2)<br/>    cdCanvasVertex(cddbuffer, x3, 640-y3)<br/>    cdCanvasVertex(cddbuffer, x4, 640-y4)<br/>    cdCanvasEnd(cddbuffer)<br/>\u00a0<br/>    cdCanvasSetForeground(cddbuffer, CD_GRAY)<br/>    cdCanvasBegin(cddbuffer,CD_CLOSED_LINES)<br/>    cdCanvasVertex(cddbuffer, x1, 640-y1)<br/>    cdCanvasVertex(cddbuffer, x2, 640-y2)<br/>    cdCanvasVertex(cddbuffer, x3, 640-y3)<br/>    cdCanvasVertex(cddbuffer, x4, 640-y4)<br/>    cdCanvasEnd(cddbuffer)<br/>\u00a0<br/>    cdCanvasSetForeground(cddbuffer, rgb(r-depth*10,#FF,0))<br/>    cdCanvasBegin(cddbuffer,CD_FILL)<br/>    cdCanvasVertex(cddbuffer, x3, 640-y3)<br/>    cdCanvasVertex(cddbuffer, x4, 640-y4)<br/>    cdCanvasVertex(cddbuffer, x5, 640-y5)<br/>    cdCanvasEnd(cddbuffer)<br/>\u00a0<br/>    cdCanvasSetForeground(cddbuffer, CD_GRAY)<br/>    cdCanvasBegin(cddbuffer,CD_CLOSED_LINES)<br/>    cdCanvasVertex(cddbuffer, x3, 640-y3)<br/>    cdCanvasVertex(cddbuffer, x4, 640-y4)<br/>    cdCanvasVertex(cddbuffer, x5, 640-y5)<br/>    cdCanvasEnd(cddbuffer)<br/>\u00a0<br/>    if depth&lt;8 then<br/>        drawTree(x4, y4, x5, y5, depth + 1)<br/>        drawTree(x5, y5, x3, y3, depth + 1)<br/>    end if<br/>end procedure<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>    cdCanvasActivate(cddbuffer)<br/>    drawTree(275, 500, 375, 500, 0)<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_RED)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"640x640\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas,\"RESIZE=NO\")<br/>    IupSetAttribute(dlg, \"TITLE\", \"Pythagoras Tree\")<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"esc_close\"))<br/>\u00a0<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "Processing", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw4\">void</span> tree<span class=\"br0\">(</span><span class=\"kw4\">float</span> x1, <span class=\"kw4\">float</span> y1, <span class=\"kw4\">float</span> x2, <span class=\"kw4\">float</span> y2, <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">float</span> dx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x2 <span class=\"sy0\">-</span> x1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> dy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">float</span> x3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x2 <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> y3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y2 <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> x4 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> y4 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> x5 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x4 <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>dx <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">float</span> y5 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y4 <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// square</span><br/>  beginShape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fill<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">255.0</span><span class=\"sy0\">/</span>depth, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  endShape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// triangle</span><br/>  beginShape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fill<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">255.0</span><span class=\"sy0\">/</span>depth, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x5, y5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  vertex<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  endShape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  tree<span class=\"br0\">(</span>x4, y4, x5, y5, depth<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  tree<span class=\"br0\">(</span>x5, y5, x3, y3, depth<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>  <br/>\u00a0<br/><span class=\"kw4\">void</span> setup<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  size<span class=\"br0\">(</span><span class=\"nu0\">1920</span>, <span class=\"nu0\">1080</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  background<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  stroke<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  tree<span class=\"br0\">(</span>width<span class=\"sy0\">/</span><span class=\"nu0\">2.3</span>, height, width<span class=\"sy0\">/</span><span class=\"nu0\">1.8</span>, height, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 61, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DisableDebugger</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d maxXY<span class=\"br0\">(</span>a.d,b.d,c.d,d.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&lt;</span>b\u00a0: <span class=\"kw1\">Swap</span> a,b\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&lt;</span>c\u00a0: <span class=\"kw1\">Swap</span> a,c\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&lt;</span>d\u00a0: <span class=\"kw1\">Swap</span> a,d\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> a<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d minXY<span class=\"br0\">(</span>a.d,b.d,c.d,d.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&gt;</span>b\u00a0: <span class=\"kw1\">Swap</span> a,b\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&gt;</span>c\u00a0: <span class=\"kw1\">Swap</span> a,c\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&gt;</span>d\u00a0: <span class=\"kw1\">Swap</span> a,d\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> a<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Ptree<span class=\"br0\">(</span>x1.d, y1.d, x2.d, y2.d, d.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> d<span class=\"sy0\">&gt;</span><span class=\"nu0\">10</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">Define</span> dx.d<span class=\"sy0\">=</span>x2<span class=\"sy0\">-</span>x1,<br/>         dy.d<span class=\"sy0\">=</span>y1<span class=\"sy0\">-</span>y2,<br/>         x3.d<span class=\"sy0\">=</span>x2<span class=\"sy0\">-</span>dy,<br/>         y3.d<span class=\"sy0\">=</span>y2<span class=\"sy0\">-</span>dx,<br/>         x4.d<span class=\"sy0\">=</span>x1<span class=\"sy0\">-</span>dy,<br/>         y4.d<span class=\"sy0\">=</span>y1<span class=\"sy0\">-</span>dx,<br/>         x5.d<span class=\"sy0\">=</span>x4<span class=\"sy0\">+</span><span class=\"br0\">(</span>dx<span class=\"sy0\">-</span>dy<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>,<br/>         y5.d<span class=\"sy0\">=</span>y4<span class=\"sy0\">-</span><span class=\"br0\">(</span>dx<span class=\"sy0\">+</span>dy<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>,<br/>         p1.d<span class=\"sy0\">=</span><span class=\"br0\">(</span>maxXY<span class=\"br0\">(</span>x1,x2,x3,x4<span class=\"br0\">)</span><span class=\"sy0\">+</span>minXY<span class=\"br0\">(</span>x1,x2,x3,x4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>,<br/>         p2.d<span class=\"sy0\">=</span><span class=\"br0\">(</span>maxXY<span class=\"br0\">(</span>y1,y2,y3,y4<span class=\"br0\">)</span><span class=\"sy0\">+</span>minXY<span class=\"br0\">(</span>y1,y2,y3,y4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>,<br/>         p3.d<span class=\"sy0\">=</span><span class=\"br0\">(</span>maxXY<span class=\"br0\">(</span>x1,x2,x3,x4<span class=\"br0\">)</span><span class=\"sy0\">-</span>minXY<span class=\"br0\">(</span>x1,x2,x3,x4<span class=\"br0\">)</span><span class=\"br0\">)</span>        <br/>\u00a0<br/>  <span class=\"kw2\">FrontColor</span><span class=\"br0\">(</span><span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">125</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">255</span>,<span class=\"nu0\">125</span><span class=\"br0\">)</span>,<span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">125</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>  <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>x1,y1,x2,y2<span class=\"br0\">)</span><br/>  <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>x2,y2,x3,y3<span class=\"br0\">)</span><br/>  <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>x3,y3,x4,y4<span class=\"br0\">)</span><br/>  <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>x4,y4,x1,y1<span class=\"br0\">)</span><br/>  BoxedGradient<span class=\"br0\">(</span>minXY<span class=\"br0\">(</span>x1,x2,x3,x4<span class=\"br0\">)</span>,minXY<span class=\"br0\">(</span>y1,y2,y3,y4<span class=\"br0\">)</span>,p3,p3<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FillArea</span><span class=\"br0\">(</span>p1,p2,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Ptree<span class=\"br0\">(</span>x4,y4,x5,y5,d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  Ptree<span class=\"br0\">(</span>x5,y5,x3,y3,d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> w1.i<span class=\"sy0\">=</span><span class=\"nu0\">800</span>,<br/>       h1.i<span class=\"sy0\">=</span>w1<span class=\"sy0\">*</span><span class=\"nu0\">11</span><span class=\"sy0\">/</span><span class=\"nu0\">16</span>,<br/>       w2.i<span class=\"sy0\">=</span>w1<span class=\"sy0\">/</span><span class=\"nu0\">2</span>,<br/>       di.i<span class=\"sy0\">=</span>w1<span class=\"sy0\">/</span><span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,#PB_Ignore,#PB_Ignore,w1,h1,<span class=\"st0\">\"Pythagoras tree\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,w1,h1,<span class=\"nu0\">24</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">DrawingMode</span><span class=\"br0\">(</span>#PB_2DDrawing_Gradient<span class=\"br0\">)</span><br/>    <span class=\"kw2\">BackColor</span><span class=\"br0\">(</span>$000000<span class=\"br0\">)</span><br/>    Ptree<span class=\"br0\">(</span>w2<span class=\"sy0\">-</span>di,h1<span class=\"sy0\">-</span><span class=\"nu0\">10</span>,w2<span class=\"sy0\">+</span>di,h1<span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>    <br/>    <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"kw2\">ImageID</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Repeat</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>#PB_Event_CloseWindow<br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">turtle</span> <span class=\"kw1\">import</span> goto<span class=\"sy0\">,</span> pu<span class=\"sy0\">,</span> pd<span class=\"sy0\">,</span> color<span class=\"sy0\">,</span> done<br/>\u00a0<br/><span class=\"kw1\">def</span> level<span class=\"br0\">(</span>ax<span class=\"sy0\">,</span> ay<span class=\"sy0\">,</span> bx<span class=\"sy0\">,</span> by<span class=\"sy0\">,</span> depth<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> depth <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>        dx<span class=\"sy0\">,</span>dy <span class=\"sy0\">=</span> bx-ax<span class=\"sy0\">,</span> ay-by<br/>        x3<span class=\"sy0\">,</span>y3 <span class=\"sy0\">=</span> bx-dy<span class=\"sy0\">,</span> by-dx<br/>        x4<span class=\"sy0\">,</span>y4 <span class=\"sy0\">=</span> ax-dy<span class=\"sy0\">,</span> ay-dx<br/>        x5<span class=\"sy0\">,</span>y5 <span class=\"sy0\">=</span> x4 + <span class=\"br0\">(</span>dx - dy<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"sy0\">,</span> y4 - <span class=\"br0\">(</span>dx + dy<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/>        goto<span class=\"br0\">(</span>ax<span class=\"sy0\">,</span> ay<span class=\"br0\">)</span><span class=\"sy0\">,</span> pd<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bx<span class=\"sy0\">,</span> by<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x3<span class=\"sy0\">,</span> y3<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x4<span class=\"sy0\">,</span> y4<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ax<span class=\"sy0\">,</span> ay<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>            goto<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        pu<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        level<span class=\"br0\">(</span>x4<span class=\"sy0\">,</span>y4<span class=\"sy0\">,</span> x5<span class=\"sy0\">,</span>y5<span class=\"sy0\">,</span> depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        level<span class=\"br0\">(</span>x5<span class=\"sy0\">,</span>y5<span class=\"sy0\">,</span> x3<span class=\"sy0\">,</span>y3<span class=\"sy0\">,</span> depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    color<span class=\"br0\">(</span><span class=\"st0\">'red'</span><span class=\"sy0\">,</span> <span class=\"st0\">'yellow'</span><span class=\"br0\">)</span><br/>    pu<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    level<span class=\"br0\">(</span>-<span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> depth<span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    done<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 32, "block": "<pre class=\"text highlighted_source\">## Recursive PT plotting<br/>pythtree &lt;- function(ax,ay,bx,by,d) {<br/>  if(d&lt;0) {return()}; clr=\"darkgreen\";<br/>  dx=bx-ax; dy=ay-by;<br/>  x3=bx-dy; y3=by-dx;<br/>  x4=ax-dy; y4=ay-dx;<br/>  x5=x4+(dx-dy)/2; y5=y4-(dx+dy)/2;<br/>  segments(ax,-ay,bx,-by, col=clr);<br/>  segments(bx,-by,x3,-y3, col=clr);<br/>  segments(x3,-y3,x4,-y4, col=clr);<br/>  segments(x4,-y4,ax,-ay, col=clr);<br/>  pythtree(x4,y4,x5,y5,d-1);<br/>  pythtree(x5,y5,x3,y3,d-1);<br/>}<br/>## Plotting Pythagoras Tree. aev 3/27/17<br/>## x1,y1,x2,y2 - starting position<br/>## ord - order/depth, fn - file name, ttl - plot title.<br/>pPythagorasT &lt;- function(x1, y1,x2, y2, ord, fn=\"\", ttl=\"\") {<br/>  cat(\" *** START PYTHT:\", date(), \"\\n\");<br/>  m=640; i=j=k=m1=m-2; x=y=d=dm=0;<br/>  if(fn==\"\") {pf=paste0(\"PYTHTR\", ord, \".png\")} else {pf=paste0(fn, \".png\")};<br/>  if(ttl==\"\") {ttl=paste0(\"Pythagoras tree, order - \", ord)};<br/>  cat(\" *** Plot file -\", pf, \"title:\", ttl, \"\\n\");<br/>  plot(NA, xlim=c(0,m), ylim=c(-m,0), xlab=\"\", ylab=\"\", main=ttl);<br/>  pythtree(x1,y1, x2,y2, ord);<br/>  dev.copy(png, filename=pf, width=m, height=m);<br/>  dev.off(); graphics.off();<br/>  cat(\" *** END PYTHT:\",date(),\"\\n\");<br/>}<br/>## Executing:<br/>pPythagorasT(275,500,375,500,9) <br/>pPythagorasT(275,500,375,500,7)</pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require racket/draw pict)<br/>\u00a0<br/>(define (draw-pythagoras-tree order x0 y0 x1 y1)<br/>  (\u03bb (the-dc dx dy)<br/>    (define (inr order x0 y0 x1 y1)<br/>      (when (positive? order)<br/>        (let* ((y0-1 (- y0 y1))<br/>               (x1-0 (- x1 x0))<br/>               (x2 (+ x1 y0-1))<br/>               (y2 (+ y1 x1-0))<br/>               (x3 (+ x0 y0-1))<br/>               (y3 (+ y0 x1-0))<br/>               (x4 (+ x2 x3 (/ (+ x0 x2) -2)))<br/>               (y4 (+ y2 y3 (/ (+ y0 y2) -2)))<br/>               (path (new dc-path%)))<br/>          (send* path [move-to x0 y0]<br/>            [line-to x1 y1] [line-to x2 y2] [line-to x3 y3]<br/>            [close])<br/>          (send the-dc draw-path path dx dy)<br/>          (inr (sub1 order) x3 y3 x4 y4)<br/>          (inr (sub1 order) x4 y4 x2 y2))))<br/>\u00a0<br/>    (define old-brush (send the-dc get-brush))<br/>    (define old-pen (send the-dc get-pen))<br/>    (send the-dc set-pen (new pen% [width 1] [color \"black\"]))<br/>    (inr (add1 order) x0 y0 x1 y1)<br/>    (send the-dc set-brush old-brush)<br/>    (send the-dc set-pen old-pen)))<br/>\u00a0<br/>(dc (draw-pythagoras-tree 7 (+ 200 32) 255 (- 200 32) 255) 400 256)</pre>"}, {"lang": "Ring", "loc": 68, "block": "<pre class=\"text highlighted_source\"># Project\u00a0: Pythagoras tree<br/>\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>paint = null<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Pythagoras tree\")<br/>                  setgeometry(100,100,800,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,800,600)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(150,500,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>        w = 800<br/>        h = floor(w*11/16)<br/>        w2 = floor(w/2)<br/>        diff = floor(w/12)<br/>\u00a0<br/>        pythagorastree(w2 - diff,h -10,w2 + diff ,h -10 ,0)<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>        return<br/>\u00a0<br/>\u00a0<br/>func pythagorastree(x1,y1,x2,y2,depth) <br/>        if depth &gt; 10 <br/>           return<br/>        ok <br/>        dx = x2 - x1<br/>        dy = y1 - y2<br/>        x3 = x2 - dy<br/>        y3 = y2 - dx<br/>        x4 = x1 - dy<br/>        y4 = y1 - dx<br/>        x5 = x4 + floor((dx - dy) / 2)<br/>        y5 = y4 - floor((dx + dy) / 2)<br/>        paint.drawline(x1,y1,x2,y2)<br/>        paint.drawline(x2,y2,x3,y3)<br/>        paint.drawline(x4,y4,x1,y1) <br/>        pythagorastree(x4, y4, x5, y5, depth +1)<br/>        pythagorastree(x5, y5, x3, y3, depth +1)</pre>"}, {"lang": "Scala", "loc": 57, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Path2D</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"br0\">{</span>JFrame, JPanel, SwingUtilities, WindowConstants<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PythagorasTree <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PythagorasTree <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>depthLimit, hue<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>, 0.15f<span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawTree<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, x1<span class=\"sy0\">:</span> Float, y1<span class=\"sy0\">:</span> Float, x2<span class=\"sy0\">:</span> Float, y2<span class=\"sy0\">:</span> Float, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> depthLimit<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dx, dy<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x2 - x1, y1 - y2<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x2 - dy, y2 - dx<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1 - dy, y1 - dx<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>x5, y5<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x4 + 0.5F <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx - dy<span class=\"br0\">)</span>, y4 - 0.5F <span class=\"sy0\">*</span> <span class=\"br0\">(</span>dx + dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> square <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Path2D.<span class=\"me1\">Float</span> <span class=\"br0\">{</span><br/>              moveTo<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><span class=\"sy0\">;</span> lineTo<span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span><span class=\"sy0\">;</span> lineTo<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span> lineTo<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span> closePath<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> triangle <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Path2D.<span class=\"me1\">Float</span> <span class=\"br0\">{</span><br/>              moveTo<span class=\"br0\">(</span>x3, y3<span class=\"br0\">)</span><span class=\"sy0\">;</span> lineTo<span class=\"br0\">(</span>x4, y4<span class=\"br0\">)</span><span class=\"sy0\">;</span> lineTo<span class=\"br0\">(</span>x5, y5<span class=\"br0\">)</span><span class=\"sy0\">;</span> closePath<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue + depth <span class=\"sy0\">*</span> 0.02f, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">lightGray</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>hue + depth <span class=\"sy0\">*</span> 0.035f, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">lightGray</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><br/>            drawTree<span class=\"br0\">(</span>g, x4, y4, x5, y5, depth + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            drawTree<span class=\"br0\">(</span>g, x5, y5, x3, y3, depth + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>          drawTree<span class=\"br0\">(</span>g.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span>, <span class=\"nu0\">275</span>, <span class=\"nu0\">500</span>, <span class=\"nu0\">375</span>, <span class=\"nu0\">500</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setTitle<span class=\"br0\">(</span><span class=\"st0\">\"Pythagoras Tree\"</span><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PythagorasTree, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 92, "block": "<pre class=\"text highlighted_source\">side = 1;       //side length of the square<br/>depth = 8;      //final number of branch levels<br/>\u00a0<br/>//L-system definition:<br/>//Alphabet: UTDB+-[]<br/>    //U: go upwards             T: top of the square<br/>    //D: go downwards           B: bottom of the square<br/>    //[: start new branch       ]: end current branch<br/>    //+: branch to the right    -: branch to the left<br/>//Axiom:    UTDB<br/>//Rule:     T -&gt; [+UTD-UTD]<br/>\u00a0<br/>//L-system sentence generation<br/>sentence = 'UTDB'<br/>rule = '[+UTD-UTD]';<br/>for i=1:depth<br/>    sentence = strsubst(sentence,'T',rule);<br/>end<br/>sentence = strsplit(sentence)';<br/>\u00a0<br/>//Empty tree<br/>tree_size = 1.0...<br/>            + length(find(sentence == \"U\" | sentence == \"T\" |...<br/>                          sentence == \"D\" | sentence == \"B\"))...<br/>            + 2 * length(find(sentence == \"]\" | sentence == \"-\" |...<br/>                              sentence == \"+\"));<br/>tree=zeros(tree_size,1);<br/>\u00a0<br/>//Vectorial operation to calculate a new point in the tree<br/>deff('z = new_point(origin,rho,theta)',...<br/>     'z = origin + rho * exp(%i*theta)');<br/>\u00a0<br/>//Drawing the tree<br/>curr_angle =\u00a0%pi/2;<br/>curr_pos = 1;<br/>ratio = 1/sqrt(2);<br/>for ind = 1:size(sentence,'c')<br/>    charac = sentence(ind);<br/>\u00a0<br/>    select charac<br/>    case 'U' then //Draw line upwards<br/>        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>        curr_pos = curr_pos + 1;<br/>\u00a0<br/>    case 'T' then //Draw top of the square<br/>        curr_angle = curr_angle -\u00a0%pi/2;<br/>        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>        curr_pos = curr_pos + 1;<br/>\u00a0<br/>    case 'D' then //Draw line downwards<br/>        curr_angle = curr_angle -\u00a0%pi/2;<br/>        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>        curr_pos = curr_pos + 1;<br/>\u00a0<br/>    case 'B' then //Draw the bottom<br/>        curr_angle = curr_angle -\u00a0%pi/2;<br/>        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>        curr_pos = curr_pos + 1;<br/>\u00a0<br/>    case '[' then //Start branch<br/>        side = side * ratio;<br/>\u00a0<br/>    case '+' then //Start going to the left<br/>        curr_angle = curr_angle -\u00a0%pi/4;<br/>//        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>//        tree(curr_pos+2) = new_point(tree(curr_pos+1),side,%pi+curr_angle);<br/>//        curr_pos = curr_pos + 2;<br/>        curr_angle = curr_angle +\u00a0%pi/2;<br/>\u00a0<br/>    case '-' then //Start going to the left<br/>//        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>//        tree(curr_pos+2) = new_point(tree(curr_pos+1),side,%pi+curr_angle);<br/>//        curr_pos = curr_pos + 2;<br/>        curr_angle = curr_angle +\u00a0%pi/2;<br/>    case ']' then<br/>        side = side / ratio;<br/>        curr_angle = curr_angle -\u00a0%pi/4;<br/>//        tree(curr_pos+1) = new_point(tree(curr_pos),side,curr_angle);<br/>//        tree(curr_pos+2) = new_point(tree(curr_pos+1),side,%pi+curr_angle);<br/>//        curr_pos = curr_pos + 2;<br/>        curr_angle = curr_angle +\u00a0%pi;<br/>\u00a0<br/>    else<br/>        error('L-system sentence error');<br/>    end<br/>end<br/>\u00a0<br/>scf(); clf();<br/>xname('Pythagoras tree: '+string(depth)+' levels')<br/>plot2d(real(tree),imag(tree),14);<br/>set(gca(),'isoview','on');<br/>set(gca(),'axes_visible',['off','off','off']);</pre>"}, {"lang": "Sidef", "loc": 46, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func tree<span class=\"br0\">(</span>img, x1, y1, x2, y2, depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    depth <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var dx = <span class=\"br0\">(</span>x2 <span class=\"sy0\">-</span> x1<span class=\"br0\">)</span><br/>    var dy = <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span><br/>\u00a0<br/>    var x3 = <span class=\"br0\">(</span>x2 <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><br/>    var y3 = <span class=\"br0\">(</span>y2 <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><br/>    var x4 = <span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><br/>    var y4 = <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><br/>    var x5 = <span class=\"br0\">(</span>x4 <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>dx <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    var y5 = <span class=\"br0\">(</span>y4 <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># square</span><br/>    img.<span class=\"me1\">polygon</span><span class=\"br0\">(</span><br/>        points <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span>x1, y1<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>x2, y2<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>x3, y3<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>x4, y4<span class=\"br0\">]</span>,<br/>        <span class=\"br0\">]</span>,<br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">255</span><span class=\"sy0\">/</span>depth, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># triangle</span><br/>    img.<span class=\"me1\">polygon</span><span class=\"br0\">(</span><br/>        points <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span>x3, y3<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>x4, y4<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>x5, y5<span class=\"br0\">]</span>,<br/>        <span class=\"br0\">]</span>,<br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">255</span><span class=\"sy0\">/</span>depth, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    tree<span class=\"br0\">(</span>img, x4, y4, x5, y5, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    tree<span class=\"br0\">(</span>img, x5, y5, x3, y3, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>width=<span class=\"nu0\">1920</span>, height=<span class=\"nu0\">1080</span><span class=\"br0\">)</span><br/>var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> width, ysize <span class=\"sy0\">=&gt;</span> height<span class=\"br0\">)</span><br/>img.<span class=\"me1\">box</span><span class=\"br0\">(</span>filled <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span>, color <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'white'</span><span class=\"br0\">)</span><br/>tree<span class=\"br0\">(</span>img, width<span class=\"sy0\">/</span><span class=\"nu0\">2.3</span>, height, width<span class=\"sy0\">/</span><span class=\"nu0\">1.8</span>, height, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'pythagoras_tree.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">fcn pythagorasTree{<br/>   bitmap:=PPM(640,640,0xFF|FF|FF);  // White background<br/>\u00a0<br/>   fcn(bitmap, ax,ay, bx,by, depth=0){<br/>      if(depth&gt;10) return();<br/>      dx,dy:=bx-ax, ay-by;<br/>      x3,y3:=bx-dy, by-dx;<br/>      x4,y4:=ax-dy, ay-dx;<br/>      x5,y5:=x4 + (dx - dy)/2, y4 - (dx + dy)/2;<br/>      bitmap.cross(x3,y3);bitmap.cross(x4,y4);bitmap.cross(x5,y5);<br/>      bitmap.line(ax,ay, bx,by, 0); bitmap.line(bx,by, x3,y3, 0);<br/>      bitmap.line(x3,y3, x4,y4, 0); bitmap.line(x4,y4, ax,ay, 0);<br/>\u00a0<br/>      self.fcn(bitmap,x4,y4, x5,y5, depth+1);<br/>      self.fcn(bitmap,x5,y5, x3,y3, depth+1);<br/>   }(bitmap,275,500, 375,500);<br/>\u00a0<br/>   bitmap.writeJPGFile(\"pythagorasTree.jpg\",True);<br/>}();</pre>"}]}