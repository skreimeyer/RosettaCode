{"task": "Voronoi_diagram", "blocks": [{"lang": "C", "loc": 119, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N_SITES 150</span><br/><span class=\"kw4\">double</span> site<span class=\"br0\">[</span>N_SITES<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> rgb<span class=\"br0\">[</span>N_SITES<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> size_x <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">,</span> size_y <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> sq2<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define for_k for (k = 0; k &lt; N_SITES; k++)</span><br/><span class=\"kw4\">int</span> nearest_site<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> k<span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> d<span class=\"sy0\">,</span> dist <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tfor_k <span class=\"br0\">{</span><br/>\t\td <span class=\"sy0\">=</span> sq2<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>k <span class=\"sy0\">||</span> d <span class=\"sy0\">&lt;</span> dist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tdist <span class=\"sy0\">=</span> d<span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* see if a pixel is different from any neighboring ones */</span><br/><span class=\"kw4\">int</span> at_edge<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>color<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> color<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> size_x <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">&gt;=</span> size_y<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">&gt;=</span> size_x<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>color<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> size_x <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define AA_RES 4 /* average over 4x4 supersampling grid */</span><br/><span class=\"kw4\">void</span> aa_color<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pix<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> xx<span class=\"sy0\">,</span> yy<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> AA_RES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tyy <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>. <span class=\"sy0\">/</span> AA_RES <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu18\">.5</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> AA_RES<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\txx <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>. <span class=\"sy0\">/</span> AA_RES <span class=\"sy0\">*</span> j <span class=\"sy0\">+</span> <span class=\"nu18\">.5</span><span class=\"sy0\">;</span><br/>\t\t\tn <span class=\"sy0\">=</span> nearest_site<span class=\"br0\">(</span>xx<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tr <span class=\"sy0\">+=</span> rgb<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tg <span class=\"sy0\">+=</span> rgb<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tb <span class=\"sy0\">+=</span> rgb<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tpix<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>AA_RES <span class=\"sy0\">*</span> AA_RES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpix<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> g <span class=\"sy0\">/</span> <span class=\"br0\">(</span>AA_RES <span class=\"sy0\">*</span> AA_RES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpix<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> b <span class=\"sy0\">/</span> <span class=\"br0\">(</span>AA_RES <span class=\"sy0\">*</span> AA_RES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define for_i for (i = 0; i &lt; size_y; i++)</span><br/><span class=\"co2\">#define for_j for (j = 0; j &lt; size_x; j++)</span><br/><span class=\"kw4\">void</span> gen_map<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>nearest <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> size_y <span class=\"sy0\">*</span> size_x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ptr<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">,</span> color<span class=\"sy0\">;</span><br/>\u00a0<br/>\tptr <span class=\"sy0\">=</span> buf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> size_x <span class=\"sy0\">*</span> size_y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfor_i for_j nearest<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> size_x <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> nearest_site<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tfor_i for_j <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>at_edge<span class=\"br0\">(</span>nearest<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>ptr<span class=\"sy0\">,</span> rgb<span class=\"br0\">[</span>nearest<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> size_x <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>\t<span class=\"coMULTI\">/* at edge, do anti-alias rastering */</span><br/>\t\t\taa_color<span class=\"br0\">(</span>ptr<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tptr <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* draw sites */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> N_SITES<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tcolor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rgb<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu18\">.25</span> <span class=\"sy0\">+</span> rgb<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu18\">.6</span> <span class=\"sy0\">+</span> rgb<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu18\">.15</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">80</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">&gt;=</span> size_y<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> site<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">&gt;=</span> size_x<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tptr <span class=\"sy0\">=</span> buf <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> size_x <span class=\"sy0\">+</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tptr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ptr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ptr<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> color<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"P6<span class=\"es1\">\\n</span>%d\u00a0%d<span class=\"es1\">\\n</span>255<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> size_x<span class=\"sy0\">,</span> size_y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> size_y <span class=\"sy0\">*</span> size_x <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define frand(x) (rand() / (1. + RAND_MAX) * x)</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> k<span class=\"sy0\">;</span><br/>\tfor_k <span class=\"br0\">{</span><br/>\t\tsite<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> frand<span class=\"br0\">(</span>size_x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsite<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> frand<span class=\"br0\">(</span>size_y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trgb <span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> frand<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trgb <span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> frand<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trgb <span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> frand<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tgen_map<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 193, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"kw4\">struct</span> Point <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"kw2\">class</span> MyBitmap <span class=\"br0\">{</span><br/> <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  MyBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen_<span class=\"br0\">(</span>nullptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  ~MyBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    DeleteObject<span class=\"br0\">(</span>pen_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    DeleteDC<span class=\"br0\">(</span>hdc_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    DeleteObject<span class=\"br0\">(</span>bmp_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">bool</span> Create<span class=\"br0\">(</span><span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BITMAPINFO\tbi<span class=\"sy4\">;</span><br/>    ZeroMemory<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>bi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>bi.<span class=\"me1\">bmiHeader</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>    bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>bits_ptr <span class=\"sy1\">=</span> nullptr<span class=\"sy4\">;</span><br/>    HDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span>GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    bmp_ <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span>dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>bits_ptr, nullptr, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>bmp_<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    hdc_ <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span>dc<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    SelectObject<span class=\"br0\">(</span>hdc_, bmp_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ReleaseDC<span class=\"br0\">(</span>GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    width_ <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>    height_ <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> SetPenColor<span class=\"br0\">(</span>DWORD clr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pen_<span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span>pen_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    pen_ <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span>PS_SOLID, <span class=\"nu0\">1</span>, clr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    SelectObject<span class=\"br0\">(</span>hdc_, pen_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">bool</span> SaveBitmap<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> path<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    HANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span>path, GENERIC_WRITE, <span class=\"nu0\">0</span>, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>file <span class=\"sy1\">==</span> INVALID_HANDLE_VALUE<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    BITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>    BITMAPINFO infoheader<span class=\"sy4\">;</span><br/>    BITMAP bitmap<span class=\"sy4\">;</span>    <br/>    GetObject<span class=\"br0\">(</span>bmp_, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>bitmap<span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    DWORD<span class=\"sy2\">*</span> dwp_bits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    ZeroMemory<span class=\"br0\">(</span>dwp_bits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ZeroMemory<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>BITMAPINFO<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ZeroMemory<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>BITMAPFILEHEADER<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>infoheader.<span class=\"me1\">bmiHeader</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>    infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    fileheader.<span class=\"me1\">bfType</span> <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>    fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>infoheader.<span class=\"me1\">bmiHeader</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>BITMAPFILEHEADER<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    fileheader.<span class=\"me1\">bfSize</span> <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    GetDIBits<span class=\"br0\">(</span>hdc_, bmp_, <span class=\"nu0\">0</span>, height_, <span class=\"br0\">(</span>LPVOID<span class=\"br0\">)</span>dwp_bits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    DWORD wb<span class=\"sy4\">;</span><br/>    WriteFile<span class=\"br0\">(</span>file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>BITMAPFILEHEADER<span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, nullptr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    WriteFile<span class=\"br0\">(</span>file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>infoheader.<span class=\"me1\">bmiHeader</span><span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, nullptr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    WriteFile<span class=\"br0\">(</span>file, dwp_bits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, nullptr<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    CloseHandle<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dwp_bits<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  HDC hdc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc_<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw4\">int</span> width<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width_<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw4\">int</span> height<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height_<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  HBITMAP bmp_<span class=\"sy4\">;</span><br/>  HDC hdc_<span class=\"sy4\">;</span><br/>  HPEN pen_<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> width_, height_<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> DistanceSqrd<span class=\"br0\">(</span><span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> point, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> xd <span class=\"sy1\">=</span> x <span class=\"sy2\">-</span> point.<span class=\"me1\">x</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> yd <span class=\"sy1\">=</span> y <span class=\"sy2\">-</span> point.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xd <span class=\"sy2\">*</span> xd<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>yd <span class=\"sy2\">*</span> yd<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"kw2\">class</span> Voronoi <span class=\"br0\">{</span><br/> <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">void</span> Make<span class=\"br0\">(</span>MyBitmap<span class=\"sy2\">*</span> bmp, <span class=\"kw4\">int</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    bmp_ <span class=\"sy1\">=</span> bmp<span class=\"sy4\">;</span><br/>    CreatePoints<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    CreateColors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    CreateSites<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    SetSitesPoints<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">void</span> CreateSites<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>width<span class=\"br0\">(</span><span class=\"br0\">)</span>, h <span class=\"sy1\">=</span> bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>height<span class=\"br0\">(</span><span class=\"br0\">)</span>, d<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> hh <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> hh <span class=\"sy1\">&lt;</span> h<span class=\"sy4\">;</span> hh<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ww <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> ww <span class=\"sy1\">&lt;</span> w<span class=\"sy4\">;</span> ww<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> ind <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, dist <span class=\"sy1\">=</span> <span class=\"kw2\">INT_MAX</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> it <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> it <span class=\"sy1\">&lt;</span> points_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> p <span class=\"sy1\">=</span> points_<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>          d <span class=\"sy1\">=</span> DistanceSqrd<span class=\"br0\">(</span>p, ww, hh<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy1\">&lt;</span> dist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dist <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>            ind <span class=\"sy1\">=</span> it<span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ind <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          SetPixel<span class=\"br0\">(</span>bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>hdc<span class=\"br0\">(</span><span class=\"br0\">)</span>, ww, hh, colors_<span class=\"br0\">[</span>ind<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">else</span><br/>          __asm nop <span class=\"co1\">// should never happen!</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> SetSitesPoints<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> point <span class=\"sy4\">:</span> points_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> point.<span class=\"me1\">x</span>, y <span class=\"sy1\">=</span> point.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>          SetPixel<span class=\"br0\">(</span>bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>hdc<span class=\"br0\">(</span><span class=\"br0\">)</span>, x <span class=\"sy2\">+</span> i, y <span class=\"sy2\">+</span> j, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> CreatePoints<span class=\"br0\">(</span><span class=\"kw4\">int</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>width<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">20</span>, h <span class=\"sy1\">=</span> bmp_<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>height<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> count<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      points_.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> w <span class=\"sy2\">+</span> <span class=\"nu0\">10</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> h <span class=\"sy2\">+</span> <span class=\"nu0\">10</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> CreateColors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> points_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      DWORD c <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">200</span> <span class=\"sy2\">+</span> <span class=\"nu0\">50</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">200</span> <span class=\"sy2\">+</span> <span class=\"nu0\">55</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">200</span> <span class=\"sy2\">+</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      colors_.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  vector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> points_<span class=\"sy4\">;</span><br/>  vector<span class=\"sy1\">&lt;</span>DWORD<span class=\"sy1\">&gt;</span> colors_<span class=\"sy4\">;</span><br/>  MyBitmap<span class=\"sy2\">*</span> bmp_<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  ShowWindow<span class=\"br0\">(</span>GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw3\">srand</span><span class=\"br0\">(</span>GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  MyBitmap bmp<span class=\"sy4\">;</span><br/>  bmp.<span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"nu0\">512</span>, <span class=\"nu0\">512</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  bmp.<span class=\"me1\">SetPenColor</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  Voronoi v<span class=\"sy4\">;</span><br/>  v.<span class=\"me1\">Make</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>bmp, <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  BitBlt<span class=\"br0\">(</span>GetDC<span class=\"br0\">(</span>GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">512</span>, <span class=\"nu0\">512</span>, bmp.<span class=\"me1\">hdc</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  bmp.<span class=\"me1\">SaveBitmap</span><span class=\"br0\">(</span><span class=\"st0\">\"v.bmp\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"pause\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 41, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> bitmap<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Point <span class=\"br0\">{</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> randomPoints <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> nPoints<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> nx<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> ny<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    nPoints.<span class=\"me1\">iota</span><br/>    .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Point<span class=\"br0\">(</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> nx<span class=\"br0\">)</span><span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Image<span class=\"sy0\">!</span>RGB generateVoronoi<span class=\"br0\">(</span><span class=\"kw2\">in</span> Point<span class=\"br0\">[</span><span class=\"br0\">]</span> pts<span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> nx<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> ny<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Generate a random color for each centroid.</span><br/>    <span class=\"kw4\">immutable</span> rndRBG <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> RGB<span class=\"br0\">(</span>uniform<span class=\"sy0\">!</span><span class=\"st0\">\"[]\"</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span>.<span class=\"me1\">min</span><span class=\"sy0\">,</span> <span class=\"kw4\">ubyte</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                    uniform<span class=\"sy0\">!</span><span class=\"st0\">\"[]\"</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span>.<span class=\"me1\">min</span><span class=\"sy0\">,</span> <span class=\"kw4\">ubyte</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                    uniform<span class=\"sy0\">!</span><span class=\"st0\">\"[]\"</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span>.<span class=\"me1\">min</span><span class=\"sy0\">,</span> <span class=\"kw4\">ubyte</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> colors <span class=\"sy0\">=</span> pts.<span class=\"me1\">length</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>rndRBG.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Generate diagram by coloring pixels with color of nearest site.</span><br/>    <span class=\"kw4\">auto</span> img <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>nx<span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nx</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">ny</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> dCmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> Point a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Point b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"sy0\">=&gt;</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>b.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// img[x, y] = colors[pts.reduce!(min!dCmp)];</span><br/>            img<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> colors<span class=\"br0\">[</span>pts.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> pts.<span class=\"me1\">minPos</span><span class=\"sy0\">!</span>dCmp.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Mark each centroid with a white dot.</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> p<span class=\"sy0\">;</span> pts<span class=\"br0\">)</span><br/>        img<span class=\"br0\">[</span>p.<span class=\"me1\">tupleof</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> RGB.<span class=\"me1\">white</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> img<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> imageWidth <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">,</span><br/>         imageHeight <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><span class=\"sy0\">;</span><br/>    randomPoints<span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span> imageWidth<span class=\"sy0\">,</span> imageHeight<span class=\"br0\">)</span><br/>    .<span class=\"me1\">generateVoronoi</span><span class=\"br0\">(</span>imageWidth<span class=\"sy0\">,</span> imageHeight<span class=\"br0\">)</span><br/>    .<span class=\"me1\">savePPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"voronoi.ppm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 83, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/color\"</span><br/>    <span class=\"st0\">\"image/draw\"</span><br/>    <span class=\"st0\">\"image/png\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    imageWidth  <span class=\"sy2\">=</span> <span class=\"nu0\">300</span><br/>    imageHeight <span class=\"sy2\">=</span> <span class=\"nu0\">200</span><br/>    nSites      <span class=\"sy2\">=</span> <span class=\"nu0\">10</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    writePngFile<span class=\"sy1\">(</span>generateVoronoi<span class=\"sy1\">(</span>randomSites<span class=\"sy1\">()))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> generateVoronoi<span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> sy <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <a href=\"http://golang.org/search?q=image.Image\"><span class=\"kw5\">image.<span class=\"me1\">Image</span></span></a> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// generate a random color for each site</span><br/>    sc <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>color<span class=\"sy3\">.</span>NRGBA<span class=\"sy1\">,</span> nSites<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sx <span class=\"sy1\">{</span><br/>        sc<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> color<span class=\"sy3\">.</span>NRGBA<span class=\"sy1\">{</span><span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">256</span><span class=\"sy1\">)),</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">256</span><span class=\"sy1\">)),</span><br/>            <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">256</span><span class=\"sy1\">)),</span> <span class=\"nu0\">255</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// generate diagram by coloring each pixel with color of nearest site</span><br/>    img <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewNRGBA<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> imageWidth<span class=\"sy1\">,</span> imageHeight<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; imageWidth<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &lt; imageHeight<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            dMin <span class=\"sy2\">:=</span> dot<span class=\"sy1\">(</span>imageWidth<span class=\"sy1\">,</span> imageHeight<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">var</span> sMin <span class=\"kw4\">int</span><br/>            <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> s &lt; nSites<span class=\"sy1\">;</span> s<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> d <span class=\"sy2\">:=</span> dot<span class=\"sy1\">(</span>sx<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">-</span>x<span class=\"sy1\">,</span> sy<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">-</span>y<span class=\"sy1\">);</span> d &lt; dMin <span class=\"sy1\">{</span><br/>                    sMin <span class=\"sy2\">=</span> s<br/>                    dMin <span class=\"sy2\">=</span> d<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            img<span class=\"sy3\">.</span>SetNRGBA<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> sc<span class=\"sy1\">[</span>sMin<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// mark each site with a black box</span><br/>    black <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewUniform<span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Black<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> s &lt; nSites<span class=\"sy1\">;</span> s<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        draw<span class=\"sy3\">.</span>Draw<span class=\"sy1\">(</span>img<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span>sx<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> sy<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> sx<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> sy<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">),</span><br/>            black<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span>ZP<span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span>Src<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> img<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dot<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy3\">*</span>x <span class=\"sy3\">+</span> y<span class=\"sy3\">*</span>y<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> randomSites<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>sx<span class=\"sy1\">,</span> sy <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    sx <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nSites<span class=\"sy1\">)</span><br/>    sy <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nSites<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sx <span class=\"sy1\">{</span><br/>        sx<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>imageWidth<span class=\"sy1\">)</span><br/>        sy<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>imageHeight<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> writePngFile<span class=\"sy1\">(</span>img <a href=\"http://golang.org/search?q=image.Image\"><span class=\"kw5\">image.<span class=\"me1\">Image</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"voronoi.png\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> img<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 63, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"co1\">-- Compile with: ghc -O2 -fllvm -fforce-recomp -threaded --make</span><br/><span class=\"coMULTI\">{-# LANGUAGE BangPatterns #-}</span><br/><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Word<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>Repa <span class=\"kw1\">as</span> Repa<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>Repa<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>BMP<br/>\u00a0<br/><span class=\"coMULTI\">{-# INLINE sqDistance #-}</span>    <br/>sqDistance <span class=\"sy0\">::</span> Word32 <span class=\"sy0\">-&gt;</span> Word32 <span class=\"sy0\">-&gt;</span> Word32 <span class=\"sy0\">-&gt;</span> Word32 <span class=\"sy0\">-&gt;</span> Word32<br/>sqDistance <span class=\"sy0\">!</span>x1 <span class=\"sy0\">!</span>y1 <span class=\"sy0\">!</span>x2 <span class=\"sy0\">!</span>y2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x1<span class=\"sy0\">-</span>x2<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y1<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>centers <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Array U DIM2 Word32<br/>centers nCenters nCells <span class=\"sy0\">=</span><br/>    fromListUnboxed <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> nCenters\u00a0:<span class=\"sy0\">.</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>nCenters<span class=\"br0\">)</span> <span class=\"sy0\">$</span> randomRs <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> nCells<span class=\"br0\">)</span> <span class=\"br0\">(</span>mkStdGen <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>applyReduce2 arr f <span class=\"sy0\">=</span> <br/>    traverse arr <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>i\u00a0:<span class=\"sy0\">.</span> j<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> <span class=\"br0\">(</span>Z:<span class=\"sy0\">.</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        f <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> <span class=\"br0\">(</span>Z:<span class=\"sy0\">.</span>i:<span class=\"sy0\">.</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> <span class=\"br0\">(</span>Z:<span class=\"sy0\">.</span>i:<span class=\"sy0\">.</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>minimize1D arr <span class=\"sy0\">=</span> foldS f h t<br/>  <span class=\"kw1\">where</span><br/>    indexed arr <span class=\"sy0\">=</span> traverse arr <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"br0\">(</span>\\src idx<span class=\"sy0\">@</span><span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>src idx<span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <br/>    <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> extent arr<br/>    iarr <span class=\"sy0\">=</span> indexed arr<br/>    h <span class=\"sy0\">=</span> iarr <span class=\"sy0\">!</span> <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    t <span class=\"sy0\">=</span> extract <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> iarr<br/>\u00a0<br/>    f <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>valMin<span class=\"sy0\">,</span> <span class=\"sy0\">!</span>iMin <span class=\"br0\">)</span> x<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>val<span class=\"sy0\">,</span> <span class=\"sy0\">!</span>i<span class=\"br0\">)</span> <span class=\"sy0\">|</span> val <span class=\"sy0\">&lt;</span> valMin <span class=\"sy0\">=</span> x<br/>                                         <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a><br/>\u00a0<br/>voronoi <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Array D DIM2 Word32<br/>voronoi nCenters nCells <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span><br/>      <span class=\"coMULTI\">{-# INLINE cellReducer #-}</span><br/>      cellReducer <span class=\"sy0\">=</span> applyReduce2 <span class=\"br0\">(</span>centers nCenters nCells<span class=\"br0\">)</span><br/>      <span class=\"coMULTI\">{-# INLINE nearestCenterIndex #-}</span><br/>      nearestCenterIndex <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>Repa<span class=\"sy0\">.!</span> Z<span class=\"br0\">)</span> <span class=\"sy0\">.</span> minimize1D<br/>    <span class=\"kw1\">in</span>        <br/>      Repa<span class=\"sy0\">.</span>fromFunction <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> nCells\u00a0:<span class=\"sy0\">.</span> nCells <span class=\"sy0\">::</span> DIM2<span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\ <span class=\"br0\">(</span>Z:<span class=\"sy0\">.</span>i:<span class=\"sy0\">.</span>j<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>          nearestCenterIndex <span class=\"sy0\">$</span> cellReducer <span class=\"br0\">(</span>sqDistance <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>genColorTable <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Array U DIM1 <span class=\"br0\">(</span>Word8<span class=\"sy0\">,</span> Word8<span class=\"sy0\">,</span> Word8<span class=\"br0\">)</span><br/>genColorTable n <span class=\"sy0\">=</span> fromListUnboxed <span class=\"br0\">(</span>Z\u00a0:<span class=\"sy0\">.</span> n<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip3\"><span class=\"kw3\">zip3</span></a> l1 l2 l3<br/>    <span class=\"kw1\">where</span><br/>      randoms <span class=\"sy0\">=</span> randomRs <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mkStdGen <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>l1<span class=\"sy0\">,</span> rest1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> n randoms<br/>      <span class=\"br0\">(</span>l2<span class=\"sy0\">,</span> rest2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> n rest1<br/>      l3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n rest2<br/>\u00a0<br/>colorize <span class=\"sy0\">::</span> Array U DIM1 <span class=\"br0\">(</span>Word8<span class=\"sy0\">,</span> Word8<span class=\"sy0\">,</span> Word8<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Array D DIM2 Word32 <span class=\"sy0\">-&gt;</span> Array D DIM2 <span class=\"br0\">(</span>Word8<span class=\"sy0\">,</span> Word8<span class=\"sy0\">,</span> Word8<span class=\"br0\">)</span><br/>colorize ctable <span class=\"sy0\">=</span> Repa<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"sy0\">$</span> \\x <span class=\"sy0\">-&gt;</span> ctable Repa<span class=\"sy0\">.!</span> <span class=\"br0\">(</span>Z:<span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> x<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> nsites <span class=\"sy0\">=</span> <span class=\"nu0\">150</span><br/>  <span class=\"kw1\">let</span> ctable <span class=\"sy0\">=</span> genColorTable nsites <br/>  voro <span class=\"sy0\">&lt;-</span> computeP <span class=\"sy0\">$</span> colorize ctable <span class=\"br0\">(</span>voronoi nsites <span class=\"nu0\">512</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>Array U DIM2 <span class=\"br0\">(</span>Word8<span class=\"sy0\">,</span> Word8<span class=\"sy0\">,</span> Word8<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  writeImageToBMP <span class=\"st0\">\"out.bmp\"</span> voro<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 71, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> graphics<span class=\"sy1\">,</span>printf<span class=\"sy1\">,</span>strings<br/>\u00a0<br/><span class=\"kw1\">record</span> site<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>colour<span class=\"br0\">)</span>  <span class=\"co1\"># site data position and colour</span><br/><span class=\"kw1\">invocable</span> all            <span class=\"co1\"># needed for string metrics</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>  <span class=\"co1\"># voronoi</span><br/>\u00a0<br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"Voronoi\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"g\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"bg=black\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open window\"</span><span class=\"br0\">)</span>   <br/>\u00a0<br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"canvas=hidden\"</span><span class=\"br0\">)</span>   <span class=\"co1\"># figure out maximal size width &amp; height </span><br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"displaywidth\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"displayheight\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"canvas=maximal\"</span><span class=\"br0\">)</span><br/>height <span class=\"sy1\">:=</span> <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"height\"</span><span class=\"br0\">)</span><br/>width  <span class=\"sy1\">:=</span> <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"width\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>metrics <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"hypot\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"taxi\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"taxi3\"</span><span class=\"br0\">]</span>  <span class=\"co1\"># different metrics </span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw1\">case</span> a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span>          <span class=\"co1\"># command line arguments</span><br/>  <span class=\"st0\">\"--sites\"</span>  <span class=\"sy1\">|</span> <span class=\"st0\">\"-s\"</span> <span class=\"sy1\">:</span> sites  <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"--height\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"-h\"</span> <span class=\"sy1\">:</span> height <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span>height <span class=\"sy1\">&gt;=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"--width\"</span>  <span class=\"sy1\">|</span> <span class=\"st0\">\"-w\"</span> <span class=\"sy1\">:</span> width  <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span>width  <span class=\"sy1\">&gt;=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"--metric\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"-m\"</span> <span class=\"sy1\">:</span> metric <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">!</span>metrics<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"--help\"</span>   <span class=\"sy1\">|</span> <span class=\"st0\">\"-?\"</span> <span class=\"sy1\">:</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage:<span class=\"es0\">\\n</span> voronoi [[--sites|-s] n] \"</span><span class=\"sy1\">,</span><br/>\t\t\t    <span class=\"st0\">\"[[--height|-h] pixels] [[--width|-w] pixels]\"</span><span class=\"sy1\">,</span><br/>\t\t\t    <span class=\"st0\">\"[[--metric|-m] metric_procedure]\"</span><span class=\"sy1\">,</span><br/>\t\t\t    <span class=\"st0\">\"[--help|-?]<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy1\">/</span>metric <span class=\"sy1\">:=</span> metrics<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>                     <span class=\"co1\"># default to normal</span><br/><span class=\"sy1\">/</span>sites <span class=\"sy1\">:=</span> <span class=\"sy1\">?</span><span class=\"br0\">(</span>r <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">.</span>1<span class=\"sy1\">*</span>width<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> r   <span class=\"co1\"># sites = random .1 to .2 of width if not given</span><br/>\u00a0<br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"label=Voronoi\u00a0%dx%d\u00a0%d\u00a0%s\"</span><span class=\"sy1\">,</span>width<span class=\"sy1\">,</span>height<span class=\"sy1\">,</span>sites<span class=\"sy1\">,</span>metric<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span>width<span class=\"sy1\">,</span>height<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/>x <span class=\"sy1\">:=</span> <span class=\"st0\">\"0123456789abcdef\"</span>    <span class=\"co1\"># hex for random sites (colour)</span><br/>siteL <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> sites <span class=\"kw1\">do</span>        <span class=\"co1\"># random sites</span><br/>  <span class=\"kw4\">put</span><span class=\"br0\">(</span>siteL<span class=\"sy1\">,</span> site<span class=\"br0\">(</span><span class=\"sy1\">?</span>width<span class=\"sy1\">,?</span>height<span class=\"sy1\">,</span>cat<span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"sy1\">,?</span>x<span class=\"sy1\">,?</span>x<span class=\"sy1\">,?</span>x<span class=\"sy1\">,?</span>x<span class=\"sy1\">,?</span>x<span class=\"sy1\">,?</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/>VoronoiDiagram<span class=\"br0\">(</span>width<span class=\"sy1\">,</span>height<span class=\"sy1\">,</span>siteL<span class=\"sy1\">,</span>metric<span class=\"br0\">)</span>  <span class=\"co1\"># Voronoi-ize it</span><br/>WDone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> hypot<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>site<span class=\"br0\">)</span>  <span class=\"co1\"># normal metric</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>y<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> taxi<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>site<span class=\"br0\">)</span>   <span class=\"co1\"># \"taxi\" metric</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>x<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"kw4\">abs</span><span class=\"br0\">(</span>y<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> taxi3<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>site<span class=\"br0\">)</span>  <span class=\"co1\"># copied from a commented out version (TCL)</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">abs</span><span class=\"br0\">(</span>x<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">3</span><span class=\"sy1\">+</span><span class=\"kw4\">abs</span><span class=\"br0\">(</span>y<span class=\"sy1\">-</span>site<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"br0\">(</span><span class=\"sy1\">.</span>3<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> VoronoiDiagram<span class=\"br0\">(</span>width<span class=\"sy1\">,</span>height<span class=\"sy1\">,</span>siteL<span class=\"sy1\">,</span>metric<span class=\"br0\">)</span><br/>   <span class=\"sy1\">/</span>metric <span class=\"sy1\">:=</span> hypot<br/>   <span class=\"kw1\">every</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> height <span class=\"sy1\">&amp;</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      dist <span class=\"sy1\">:=</span> width<span class=\"sy1\">+</span>height         <span class=\"co1\"># anything larger than diagonal</span><br/>      <span class=\"kw1\">every</span> site <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>siteL <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span> dist <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span>dt <span class=\"sy1\">:=</span>  metric<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>site<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">next</span>  <span class=\"co1\"># skip</span><br/>         <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> dist <span class=\"sy1\">&gt;:=</span> dt <span class=\"kw1\">then</span> <span class=\"kw5\">Fg</span><span class=\"br0\">(</span>site<span class=\"sy1\">.</span><span class=\"me1\">colour</span><span class=\"br0\">)</span>       <span class=\"co1\"># site</span><br/>         <span class=\"kw1\">else</span> <span class=\"kw5\">Fg</span><span class=\"br0\">(</span><span class=\"st0\">\"#000000\"</span><span class=\"br0\">)</span>                             <span class=\"co1\"># unowned</span><br/>         <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw5\">Fg</span><span class=\"br0\">(</span><span class=\"st0\">\"Black\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> site <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>siteL <span class=\"kw1\">do</span>                              <span class=\"co1\"># mark sites</span><br/>      <span class=\"kw5\">DrawCircle</span><span class=\"br0\">(</span>site<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>site<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>     <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. (number of points) voronoi (shape)</span><br/><span class=\"co1\">NB. Generates an array of indices of the nearest point</span><br/>voronoi =: <span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  p =. <span class=\"sy0\">(</span><span class=\"kw2\">x</span>,<span class=\"nu0\">2</span><span class=\"sy0\">)</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"457a05\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$ <span class=\"kw2\">y</span><br/>  <span class=\"sy0\">(</span>i.&lt;./<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>+/@:*:@:-\"<span class=\"nu0\">1</span>&amp;p<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> ,\"<span class=\"nu0\">0</span>/&amp;i./ <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>load<span class=\"st_h\">'viewmat'</span><br/>viewmat <span class=\"nu0\">25</span> voronoi <span class=\"nu0\">500</span> <span class=\"nu0\">500</span></pre>"}, {"lang": "Delphi", "loc": 108, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> TForm1<span class=\"sy1\">.</span><span class=\"me1\">Voronoi</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>   p <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>   cells <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>   size <span class=\"sy3\">=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  aCanvas <span class=\"sy1\">:</span> TCanvas<span class=\"sy1\">;</span><br/>  px<span class=\"sy1\">,</span> py<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  color<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Tcolor<span class=\"sy1\">;</span><br/>  Img<span class=\"sy1\">:</span> TBitmap<span class=\"sy1\">;</span><br/>  lastColor<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  auxList<span class=\"sy1\">:</span> TList&lt;TPoint&gt;<span class=\"sy1\">;</span><br/>  poligonlist <span class=\"sy1\">:</span> TDictionary&lt;<span class=\"kw4\">integer</span><span class=\"sy1\">,</span>TList&lt;TPoint&gt;&gt;<span class=\"sy1\">;</span><br/>  pointarray <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> TPoint<span class=\"sy1\">;</span><br/>\u00a0<br/>  n<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  d1<span class=\"sy1\">,</span>d2<span class=\"sy1\">:</span> <span class=\"kw4\">double</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> distance<span class=\"br0\">(</span>x1<span class=\"sy1\">,</span>x2<span class=\"sy1\">,</span>y1<span class=\"sy1\">,</span>y2 <span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x1 <span class=\"sy3\">-</span> x2<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span>x1 <span class=\"sy3\">-</span> x2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>y1 <span class=\"sy3\">-</span> y2<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span>y1 <span class=\"sy3\">-</span> y2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">///Euclidian</span><br/>    <span class=\"co1\">// result\u00a0:=  abs(x1 - x2) + abs(y1 - y2); // Manhattan</span><br/>    <span class=\"co1\">// result\u00a0:= power(power(abs(x1 - x2), p) + power(abs(y1 - y2), p), (1 / p)); // Minkovski</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>    poligonlist <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TDictionary&lt;<span class=\"kw4\">integer</span><span class=\"sy1\">,</span>TList&lt;Tpoint&gt;&gt;<span class=\"sy1\">.</span><span class=\"me1\">create</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    Randomize<span class=\"sy1\">;</span><br/>\u00a0<br/>    img <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TBitmap<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>    img<span class=\"sy1\">.</span><span class=\"me1\">Width</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>    img<span class=\"sy1\">.</span><span class=\"me1\">Height</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>px<span class=\"sy1\">,</span>cells<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>py<span class=\"sy1\">,</span>cells<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>color<span class=\"sy1\">,</span>cells<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cells<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      px<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      py<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      color<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">16777215</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      auxList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList&lt;Tpoint&gt;<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>      poligonlist<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span>auxList<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      lastColor<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        n<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cells <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">begin</span><br/>          d1<span class=\"sy1\">:</span><span class=\"sy3\">=</span> distance<span class=\"br0\">(</span>px<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> py<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          d2<span class=\"sy1\">:</span><span class=\"sy3\">=</span> distance<span class=\"br0\">(</span>px<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> py<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span> d1 &lt; d2 <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">begin</span><br/>            n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>\t  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> n &lt;&gt; lastColor <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>           poligonlist<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>           poligonlist<span class=\"br0\">[</span>lastColor<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>           lastColor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      poligonlist<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      poligonlist<span class=\"br0\">[</span>lastColor<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      lastColor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span>  cells <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>\u00a0<br/>      <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>pointarray<span class=\"sy1\">,</span> poligonlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> poligonlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">Odd</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        pointarray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poligonlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Items</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> poligonlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">Odd</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        pointarray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poligonlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Items</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Pen</span><span class=\"sy1\">.</span><span class=\"me1\">Color</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> color<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Brush</span><span class=\"sy1\">.</span><span class=\"me1\">Color</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> color<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Polygon</span><span class=\"br0\">(</span>pointarray<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Pen</span><span class=\"sy1\">.</span><span class=\"me1\">Color</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> clBlack<span class=\"sy1\">;</span><br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Brush</span><span class=\"sy1\">.</span><span class=\"me1\">Color</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> clBlack<span class=\"sy1\">;</span><br/>      Img<span class=\"sy1\">.</span><span class=\"me1\">Canvas</span><span class=\"sy1\">.</span><span class=\"me1\">Rectangle</span><span class=\"br0\">(</span>px<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> py<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> px<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> py<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Canvas<span class=\"sy1\">.</span><span class=\"me1\">Draw</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> img<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 78, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Color</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.geom.Ellipse2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.image.BufferedImage</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.imageio.ImageIO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JFrame</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Voronoi <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">double</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> I<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">int</span> px<span class=\"br0\">[</span><span class=\"br0\">]</span>, py<span class=\"br0\">[</span><span class=\"br0\">]</span>, color<span class=\"br0\">[</span><span class=\"br0\">]</span>, cells <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>, size <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> Voronoi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">super</span><span class=\"br0\">(</span><span class=\"st0\">\"Voronoi Diagram\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsetBounds<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, size, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsetDefaultCloseOperation<span class=\"br0\">(</span>EXIT_ON_CLOSE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tI <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a><span class=\"br0\">(</span>size, size, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a>.<span class=\"me1\">TYPE_INT_RGB</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tpx <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>cells<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tpy <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>cells<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tcolor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>cells<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cells<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tpx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tpy<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tcolor<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">16777215</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cells<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance<span class=\"br0\">(</span>px<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, x, py<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> distance<span class=\"br0\">(</span>px<span class=\"br0\">[</span>n<span class=\"br0\">]</span>, x, py<span class=\"br0\">[</span>n<span class=\"br0\">]</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t\tn <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tI.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, y, color<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> I.<span class=\"me1\">createGraphics</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tg.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">BLACK</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cells<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tg.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aellipse2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Ellipse2D</span></a> .<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">(</span>px<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2.5</span>, py<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2.5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\tImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>I, <span class=\"st0\">\"png\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"voronoi.png\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tg.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>I, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">double</span> distance<span class=\"br0\">(</span><span class=\"kw4\">int</span> x1, <span class=\"kw4\">int</span> x2, <span class=\"kw4\">int</span> y1, <span class=\"kw4\">int</span> y2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> d<span class=\"sy0\">;</span><br/>\t    d <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> x2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> x2<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Euclidian</span><br/>\t<span class=\"co1\">//  d = Math.abs(x1 - x2) + Math.abs(y1 - y2); // Manhattan</span><br/>\t<span class=\"co1\">//  d = Math.pow(Math.pow(Math.abs(x1 - x2), p) + Math.pow(Math.abs(y1 - y2), p), (1 / p)); // Minkovski</span><br/>\t  \t<span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">new</span> Voronoi<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 64, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;!-- VoronoiD.html --&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;&lt;title&gt;Voronoi diagram&lt;/title&gt;<br/>&lt;script&gt;<br/>// HF#1 Like in PARI/GP: return random number 0..max-1<br/>function randgp(max) {return Math.floor(Math.random()*max)}<br/>// HF#2 Random hex color<br/>function randhclr() {<br/>  return \"#\"+<br/>  (\"00\"+randgp(256).toString(16)).slice(-2)+<br/>  (\"00\"+randgp(256).toString(16)).slice(-2)+<br/>  (\"00\"+randgp(256).toString(16)).slice(-2)<br/>}<br/>// HF#3 Metrics: Euclidean, Manhattan and Minkovski 3/20/17<br/>function Metric(x,y,mt) {<br/>  if(mt==1) {return Math.sqrt(x*x + y*y)}<br/>  if(mt==2) {return Math.abs(x) + Math.abs(y)}<br/>  if(mt==3) {return(Math.pow(Math.pow(Math.abs(x),3) + Math.pow(Math.abs(y),3),0.33333))}<br/>}<br/>// Plotting Voronoi diagram. aev 3/10/17<br/>function pVoronoiD() {<br/>  var cvs=document.getElementById(\"cvsId\");<br/>  var ctx=cvs.getContext(\"2d\");<br/>  var w=cvs.width, h=cvs.height;<br/>  var x=y=d=dm=j=0, w1=w-2, h1=h-2;<br/>  var n=document.getElementById(\"sites\").value;<br/>  var mt=document.getElementById(\"mt\").value;<br/>  var X=new Array(n), Y=new Array(n), C=new Array(n);<br/>  ctx.fillStyle=\"white\"; ctx.fillRect(0,0,w,h);<br/>  for(var i=0; i&lt;n; i++) {<br/>    X[i]=randgp(w1); Y[i]=randgp(h1); C[i]=randhclr();<br/>  }<br/>  for(y=0; y&lt;h1; y++) {<br/>    for(x=0; x&lt;w1; x++) {<br/>      dm=Metric(h1,w1,mt); j=-1;<br/>      for(var i=0; i&lt;n; i++) {<br/>        d=Metric(X[i]-x,Y[i]-y,mt)<br/>        if(d&lt;dm) {dm=d; j=i;}<br/>      }//fend i<br/>      ctx.fillStyle=C[j]; ctx.fillRect(x,y,1,1);<br/>    }//fend x<br/>  }//fend y<br/>  ctx.fillStyle=\"black\";<br/>  for(var i=0; i&lt;n; i++) {<br/>    ctx.fillRect(X[i],Y[i],3,3);<br/>  }<br/>}<br/>&lt;/script&gt;&lt;/head&gt;<br/>&lt;body style=\"font-family: arial, helvatica, sans-serif;\"&gt;<br/>  &lt;b&gt;Please input number of sites: &lt;/b&gt;<br/>  &lt;input id=\"sites\" value=100 type=\"number\" min=\"10\" max=\"150\" size=\"3\"&gt;&amp;nbsp;&amp;nbsp;<br/>  &lt;b&gt;Metric: &lt;/b&gt;<br/>  &lt;select id=\"mt\"&gt;<br/>    &lt;option value=1 selected&gt;Euclidean&lt;/option&gt;<br/>    &lt;option value=2&gt;Manhattan&lt;/option&gt;<br/>    &lt;option value=3&gt;Minkovski&lt;/option&gt;<br/>  &lt;/select&gt;&amp;nbsp;<br/>  &lt;input type=\"button\" value=\"Plot it!\" onclick=\"pVoronoiD();\"&gt;&amp;nbsp;&amp;nbsp;<br/>  &lt;h3&gt;Voronoi diagram&lt;/h3&gt;<br/>  &lt;canvas id=\"cvsId\" width=\"640\" height=\"640\" style=\"border: 2px inset;\"&gt;&lt;/canvas&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Images<br/>function voronoi(w, h, n_centroids)<br/>    dist = (point,vector) -&gt; sqrt.((point[1].-vector[:,1]).^2 .+ (point[2].-vector[:,2]).^2)<br/>    dots = [rand(1:h, n_centroids) rand(1:w, n_centroids) rand(RGB{N0f8}, n_centroids)]<br/>    img  = zeros(RGB{N0f8}, h, w)<br/>    for x in 1:h, y in 1:w<br/>        distances = dist([x,y],dots) # distance<br/>        nn = findmin(distances)[2]<br/>        img[x,y]  = dots[nn,:][3]<br/>    end<br/>    return img<br/>end<br/>img = voronoi(800, 600, 200)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 51, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Color</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Ellipse2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"me1\">BufferedImage</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/>\u00a0<br/>fun distSq<span class=\"br0\">(</span>x1<span class=\"sy0\">:</span> Int, x2<span class=\"sy0\">:</span> Int, y1<span class=\"sy0\">:</span> Int, y2<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> x1 - x2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> y1 - y2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Voronoi<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cells<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Voronoi Diagram\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bi<span class=\"sy0\">:</span> BufferedImage<br/>\u00a0<br/>    init <span class=\"br0\">{</span> <br/>        setBounds<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, size, size<span class=\"br0\">)</span><br/>        defaultCloseOperation <span class=\"sy0\">=</span> EXIT<span class=\"sy0\">_</span>ON<span class=\"sy0\">_</span>CLOSE<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        bi <span class=\"sy0\">=</span> BufferedImage<span class=\"br0\">(</span>size, size, BufferedImage.<span class=\"me1\">TYPE_INT_RGB</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> px <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>cells<span class=\"br0\">)</span> <span class=\"br0\">{</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> py <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>cells<span class=\"br0\">)</span> <span class=\"br0\">{</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cl <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>cells<span class=\"br0\">)</span> <span class=\"br0\">{</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">16777215</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until cells<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>distSq<span class=\"br0\">(</span>px<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, x, py<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> distSq<span class=\"br0\">(</span>px<span class=\"br0\">[</span>n<span class=\"br0\">]</span>, x, py<span class=\"br0\">[</span>n<span class=\"br0\">]</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> n <span class=\"sy0\">=</span> i                   <br/>                <span class=\"br0\">}</span><br/>                bi.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, y, cl<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> bi.<span class=\"me1\">createGraphics</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">BLACK</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until cells<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">fill</span><span class=\"br0\">(</span>Ellipse2D.<span class=\"me1\">Double</span><span class=\"br0\">(</span>px<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - <span class=\"nu0\">2.5</span>, py<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - <span class=\"nu0\">2.5</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>      <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paint<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>bi, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Voronoi<span class=\"br0\">(</span><span class=\"nu0\">70</span>, <span class=\"nu0\">700</span><span class=\"br0\">)</span>.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 93, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span><span class=\"nu0\">600</span><br/><span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span><span class=\"nu0\">600</span><br/>\u00a0<br/>sites <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>xEdge <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><br/>yEdge <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><br/><span class=\"kw1\">graphicbox</span> <span class=\"sy0\">#</span>w.gb1<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> xEdge<span class=\"sy0\">,</span> yEdge<br/>\u00a0<br/><span class=\"kw1\">open</span> <span class=\"st0\">\"Voronoi neighbourhoods\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">window</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/><span class=\"sy0\">#</span>w     <span class=\"st0\">\"trapclose quit\"</span><br/><span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"down\u00a0; fill black\u00a0; size 4\"</span><br/><span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"font courier_new 12\"</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> townX<span class=\"br0\">(</span> sites<span class=\"br0\">)</span><span class=\"sy0\">,</span> townY<span class=\"br0\">(</span> sites<span class=\"br0\">)</span><span class=\"sy0\">,</span> col$<span class=\"br0\">(</span> sites<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> sites<br/>    townX<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> xEdge <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    townY<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> yEdge <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    col$<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"color \"</span>; col$<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>    <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"set \"</span>; townX<span class=\"br0\">(</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; townY<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"size 1\"</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> nearestIndex<span class=\"br0\">(</span>xEdge<span class=\"sy0\">,</span> yEdge<span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> dist<span class=\"br0\">(</span>xEdge<span class=\"sy0\">,</span> yEdge<span class=\"br0\">)</span><br/>\u00a0<br/>start <span class=\"sy0\">=</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'fill distance table with distances from the first site</span><br/><span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> xEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> yEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        dist<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>townX<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> ^ <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>townY<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> ^ <span class=\"nu0\">2</span><br/>        nearestIndex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> y<br/><span class=\"kw1\">next</span> x<br/>\u00a0<br/><span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"color darkblue\"</span><br/><span class=\"co1\">'for other towns</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> sites<br/>    <span class=\"co1\">'display some progress</span><br/>    <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"place 0 20\"</span><br/>    <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"\\computing: \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span><span class=\"st0\">\"###.#\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">/</span> sites <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>; <span class=\"st0\">\"%\"</span><br/>    <span class=\"co1\">'look left</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> townX<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"nu0\">0</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span>checkRow<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> yEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">next</span> x<br/>    <span class=\"co1\">'look right</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> townX<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> xEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span>checkRow<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> yEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">next</span> x<br/>    <span class=\"kw1\">scan</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> xEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> yEdge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"color \"</span>; col$<span class=\"br0\">(</span>nearestIndex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        startY <span class=\"sy0\">=</span> y<br/>        nearest <span class=\"sy0\">=</span> nearestIndex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> yEdge<br/>            <span class=\"kw1\">if</span> nearestIndex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> nearest <span class=\"kw1\">then</span> y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">next</span> y<br/>        <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"line \"</span>; x; <span class=\"st0\">\" \"</span>; startY; <span class=\"st0\">\" \"</span>; x; <span class=\"st0\">\" \"</span>; y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> y<br/><span class=\"kw1\">next</span> x<br/>\u00a0<br/><span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"color black; size 4\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> sites<br/>    <span class=\"sy0\">#</span>w.gb1 <span class=\"st0\">\"set \"</span>; townX<span class=\"br0\">(</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; townY<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/><span class=\"kw1\">print</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> start<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> quit w$<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w$<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> checkRow<span class=\"br0\">(</span>site<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> startY<span class=\"sy0\">,</span> endY<span class=\"br0\">)</span><br/>    dxSquared <span class=\"sy0\">=</span> <span class=\"br0\">(</span>townX<span class=\"br0\">(</span>site<span class=\"br0\">)</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> ^ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> startY <span class=\"kw1\">to</span> endY<br/>         dSquared <span class=\"sy0\">=</span> <span class=\"br0\">(</span>townY<span class=\"br0\">(</span>site<span class=\"br0\">)</span> <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> ^ <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> dxSquared<br/>         <span class=\"kw1\">if</span> dSquared <span class=\"sy0\">&lt;=</span> dist<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>             dist<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dSquared<br/>             nearestIndex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> site<br/>             checkRow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> y<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 79, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\tlove<span class=\"sy0\">.</span><span class=\"kw3\">math</span><span class=\"sy0\">.</span>setRandomSeed<span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">--set the random seed</span><br/>\tkeys <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--an empty table where we will store key presses</span><br/>\tnumber_cells <span class=\"sy0\">=</span> <span class=\"nu0\">50</span> <span class=\"co1\">--the number of cells we want in our diagram</span><br/>\t<span class=\"co1\">--draw the voronoi diagram to a canvas</span><br/>\tvoronoiDiagram <span class=\"sy0\">=</span> generateVoronoi<span class=\"br0\">(</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> number_cells <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> hypot<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span> x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> generateVoronoi<span class=\"br0\">(</span> width<span class=\"sy0\">,</span> height<span class=\"sy0\">,</span> num_cells <span class=\"br0\">)</span><br/>\tcanvas <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> width<span class=\"sy0\">,</span> height <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> imgx <span class=\"sy0\">=</span> canvas<span class=\"sy0\">:</span>getWidth<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> imgy <span class=\"sy0\">=</span> canvas<span class=\"sy0\">:</span>getHeight<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> nx <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> ny <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> nr <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> ng <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> nb <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> num_cells <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> nx<span class=\"sy0\">,</span> love<span class=\"sy0\">.</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> imgx <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> ny<span class=\"sy0\">,</span> love<span class=\"sy0\">.</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> imgy <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> nr<span class=\"sy0\">,</span> love<span class=\"sy0\">.</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> ng<span class=\"sy0\">,</span> love<span class=\"sy0\">.</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> nb<span class=\"sy0\">,</span> love<span class=\"sy0\">.</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> imgy <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> imgx <span class=\"kw1\">do</span><br/>\t\t\tdmin <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span> imgx<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> imgy<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\tj <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> num_cells <span class=\"kw1\">do</span><br/>\t\td <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span> nx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span>x<span class=\"sy0\">,</span> ny<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span>y <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> d <span class=\"sy0\">&lt;</span> dmin <span class=\"kw1\">then</span><br/>\t \t    dmin <span class=\"sy0\">=</span> d<br/>\t\t\tj <span class=\"sy0\">=</span> i<br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> nr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> ng<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> nb<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"co1\">--reset color</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t<span class=\"co1\">--draw points</span><br/>\t<span class=\"kw1\">for</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> num_cells <span class=\"kw1\">do</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> nx<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span> ny<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> canvas<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--RENDER</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t<span class=\"co1\">--reset color</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t<span class=\"co1\">--draw diagram</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> voronoiDiagram <span class=\"br0\">)</span><br/>\t<span class=\"co1\">--draw drop shadow text</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"space: regenerate<span class=\"es1\">\\n</span>esc: quit\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"co1\">--draw text</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\tlove<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"space: regenerate<span class=\"es1\">\\n</span>esc: quit\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--CONTROL</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>keyreleased<span class=\"br0\">(</span> key <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> key <span class=\"sy0\">==</span> <span class=\"st0\">'space'</span> <span class=\"kw1\">then</span><br/>\tvoronoiDiagram <span class=\"sy0\">=</span> generateVoronoi<span class=\"br0\">(</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> number_cells <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">elseif</span> key <span class=\"sy0\">==</span> <span class=\"st0\">'escape'</span> <span class=\"kw1\">then</span><br/>\tlove<span class=\"sy0\">.</span>event<span class=\"sy0\">.</span>quit<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">Needs[\"ComputationalGeometry`\"]<br/>DiagramPlot[{{4.4, 14}, {6.7, 15.25}, {6.9, 12.8}, {2.1, 11.1}, {9.5, 14.9}, {13.2, 11.9}, {10.3, 12.3}, <br/>{6.8, 9.5}, {3.3, 7.7}, {0.6, 5.1}, {5.3, 2.4}, {8.45, 4.7}, {11.5, 9.6}, {13.8, 7.3}, {12.9, 3.1}, {11, 1.1}}]</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 11, "block": "<pre class=\"text highlighted_source\">0\t\u041f4<br/>\t0\t\u041f5<br/>\t\t\u0418\u041f0\t1\t-\tx^2\t\u0418\u041f1\t1\t-\tx^2\t+\t\u041a\u0432\u041a\u043e\u0440\t\u041f3<br/>\t\t9\t\u041f6<br/>\t\t\t\u041a\u0418\u041f6\t\u041f8\t{x}\t2\t10^x\t*\t\u041f9<br/>\t\t\t[x]\t\u0418\u041f5\t-\tx^2\t\u0418\u041f9\t{x}\t2\t10^x\t*\t\u0418\u041f4\t-\tx^2\t+\t\u041a\u0432\u041a\u043e\u0440\t\u041f9<br/>\t\t\t\u0418\u041f3\t-\tx&lt;0\t47\t\u0418\u041f9\t\u041f3\t\u0418\u041f6\t\u041f7<br/>\t\t\u0418\u041f6\t\u0418\u041f2\t-\t9\t-\tx&gt;=0\t17<br/>\t\t\u041a\u0418\u041f7\t[x]\t\u0421/\u041f<br/>\t\u041a\u0418\u041f5\t\u0418\u041f5\t\u0418\u041f1\t-\tx&gt;=0\t04<br/>\u041a\u0418\u041f4\t\u0418\u041f4\t\u0418\u041f0\t-\tx&gt;=0\t02</pre>"}, {"lang": "Perl 6", "loc": 47, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@bars</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u2587\u2586\u2585\u2584\u2583\u2582\u2581'</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%type</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"co1\"># Voronoi diagram type distance calculation</span><br/>    <span class=\"st_h\">'Taxicab'</span>   <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span><span class=\"sy0\">,</span> <span class=\"re0\">$py</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span>  <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$py</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span>  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'Euclidean'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span><span class=\"sy0\">,</span> <span class=\"re0\">$py</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span>\u00b2     <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$py</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span>\u00b2     <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'Minkowski'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span><span class=\"sy0\">,</span> <span class=\"re0\">$py</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span>\u00b3<span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$py</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span>\u00b3<span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$width</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$dots</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@domains</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> Hash<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><br/>    <span class=\"st_h\">'x'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">..</span><span class=\"re0\">$width</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'y'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">..</span><span class=\"re0\">$height</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'rgb'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">..</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">$dots</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">%type</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$type</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Generating $type diagram...    \"</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">@bars</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> voronoi<span class=\"br0\">(</span><span class=\"re0\">@domains</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w<span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>h<span class=\"br0\">(</span><span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$type</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@domains</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"re0\">&amp;dot</span><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$img</span><span class=\"sy0\">.</span><span class=\"me1\">write</span><span class=\"sy0\">:</span> <span class=\"st0\">\"Voronoi-{$type}-perl6.png\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> voronoi <span class=\"br0\">(</span><span class=\"re0\">@domains</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$type</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$png</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>width<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>height<span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$w</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\b</span>\"</span> <span class=\"kw1\">x</span> <span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"re0\">@bars</span><span class=\"sy0\">,</span> <span class=\"re0\">@bars</span><span class=\"sy0\">.=</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span> <span class=\"sy0\">,</span> <span class=\"st_h\">'  '</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$h</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"br0\">(</span>$<span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">min</span> <span class=\"re0\">@domains</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">%type</span><span class=\"br0\">{</span><span class=\"re0\">$type</span><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>x<span class=\"sy0\">&gt;,</span> <span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>y<span class=\"sy0\">&gt;,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> $<span class=\"sy0\">++</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">set</span><span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">@domains</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>rgb<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$png</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dot <span class=\"br0\">(</span><span class=\"re0\">%h</span><span class=\"sy0\">,</span> <span class=\"re0\">$png</span><span class=\"sy0\">,</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>x<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">..</span> <span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>x<span class=\"sy0\">&gt;</span> <span class=\"sy0\">+</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>y<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">..</span> <span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>y<span class=\"sy0\">&gt;</span> <span class=\"sy0\">+</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>x<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">%h</span><span class=\"sy0\">&lt;</span>y<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">i</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$radius</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 195, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\VoronoiDiagram.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas, timer<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>-- Stop any current drawing process before starting a new one:<br/>-- Without this it /is/ going to crash, if it tries to finish<br/>-- drawing all 100 sites, when there are now only 50, for eg.<br/>integer timer_active = 0    <br/>\u00a0<br/>integer nsites = 200<br/>integer last_width = -1, last_height<br/>sequence siteX, siteY, siteC<br/>\u00a0<br/>enum EUCLID, MANHATTAN, MINKOWSKI<br/>\u00a0<br/>constant dmodes = {\"Euclid\", \"Manhattan\", \"Minkowski\"}<br/>\u00a0<br/>integer dmode = EUCLID,<br/>        drawn = 0       -- (last dmode actually shown)<br/>\u00a0<br/>function distance(integer x1,y1, x2,y2)<br/>atom d<br/>    x1 -= x2<br/>    y1 -= y2<br/>    switch dmode do<br/>        case EUCLID:    d = x1*x1+y1*y1                       -- (no need for sqrt)<br/>        case MANHATTAN: d = abs(x1)+abs(y1)<br/>        case MINKOWSKI: d = power(abs(x1),3)+power(abs(y1),3) -- (\"\" power(d,1/3))<br/>    end switch<br/>    return d<br/>end function<br/>\u00a0<br/>sequence nearestIndex, dist<br/>\u00a0<br/>function checkRow(integer site, integer x, integer height)<br/>bool res = false<br/>atom dxSquared<br/>    integer x1 = siteX[site]-x<br/>    switch dmode do<br/>        case EUCLID:    dxSquared = x1*x1<br/>        case MANHATTAN: dxSquared = abs(x1)<br/>        case MINKOWSKI: dxSquared = power(abs(x1),3)<br/>    end switch<br/>    for y=1 to height do<br/>--      atom dSquared = distance(siteX[site],siteY[site],x,y)   -- (sub-optimal..)<br/>        atom dSquared<br/>        integer y1 = siteY[site]-y<br/>        switch dmode do<br/>            case EUCLID:    dSquared = dxSquared + y1*y1<br/>            case MANHATTAN: dSquared = dxSquared + abs(y1)<br/>            case MINKOWSKI: dSquared = dxSquared + power(abs(y1),3)<br/>        end switch<br/>        if dSquared&lt;=dist[x,y] then<br/>            dist[x,y] = dSquared<br/>            nearestIndex[x,y] = site<br/>            res = true<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>integer {width, height} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    if width!=last_width<br/>    or height!=last_height<br/>    or nsites!=length(siteX) then<br/>        if nsites&lt;1 then nsites = 1 end if<br/>        siteX = sq_rand(repeat(width,nsites))<br/>        siteY = sq_rand(repeat(height,nsites))<br/>        siteC = sq_rand(repeat(#FFFFFF,nsites))<br/>        last_width = width<br/>        last_height = height<br/>        drawn = 0<br/>    end if<br/>    if drawn!=dmode             -- (prevent double-draw, and)<br/>    and not timer_active then   -- (drawing when rug moved..)<br/>        drawn = dmode<br/>        cdCanvasActivate(cddbuffer)<br/>        atom t0 = time(), t1<br/>        t1 = time()+0.25<br/>        nearestIndex = repeat(repeat(1,height),width)<br/>        dist = repeat(repeat(0,height),width)<br/>        -- fill distance table with distances from the first site<br/>        integer x1 = siteX[1], y1 = siteY[1]<br/>        for x=1 to width do<br/>            for y=1 to height do<br/>                dist[x,y] = distance(x1,y1,x,y)<br/>            end for<br/>            if timer_active then exit end if<br/>        end for<br/>        --for other towns<br/>        for i=2 to nsites do<br/>            -- look left<br/>            for x=siteX[i] to 1 by -1 do<br/>                if not checkRow(i, x, height) then exit end if<br/>            end for<br/>            -- look right<br/>            for x=siteX[i]+1 to width do<br/>                if not checkRow(i, x, height) then exit end if<br/>            end for<br/>            if timer_active then exit end if<br/>            if time()&gt;t1 then<br/>                IupSetStrAttribute(dlg, \"TITLE\", \"Voronoi diagram (generating -\u00a0%3.2f%%)\",{100*i/nsites})<br/>                IupFlush()<br/>                t1 = time()+0.25<br/>            end if<br/>        end for<br/>        t1 = time()<br/>        for y=1 to height do<br/>            integer nearest = nearestIndex[1,y]<br/>            integer s = 1<br/>            for x=2 to width do<br/>                if nearestIndex[x,y]&lt;&gt;nearest then<br/>                    cdCanvasSetForeground(cddbuffer, siteC[nearest])<br/>                    cdCanvasLine(cddbuffer, s-1, y-1, x-2, y-1)<br/>                    nearest = nearestIndex[x,y]<br/>                    s = x<br/>                end if<br/>            end for<br/>            if timer_active then exit end if<br/>            cdCanvasSetForeground(cddbuffer, siteC[nearest])<br/>            cdCanvasLine(cddbuffer, s-1, y-1, width-1, y-1)<br/>        end for<br/>        if not timer_active then<br/>            cdCanvasSetForeground(cddbuffer, CD_BLACK)<br/>            for i=1 to nsites do<br/>                cdCanvasSector(cddbuffer, siteX[i], siteY[i], 2, 2, 0, 360) <br/>            end for<br/>            cdCanvasFlush(cddbuffer)<br/>            IupSetStrAttribute(dlg, \"TITLE\", \"Voronoi diagram -\u00a0%s,\u00a0%dx%d,\u00a0%d sites,\u00a0%3.2fs\",{dmodes[dmode],width,height,nsites,time()-t0})<br/>        end if<br/>    end if<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_BLACK)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    integer wasdmode = dmode<br/>    switch c do<br/>        case '+': nsites *= 2<br/>        case '-': nsites = max(floor(nsites/2),1)<br/>        case 'E','e': dmode = EUCLID<br/>        case 'M','m': dmode = MANHATTAN<br/>        case 'W','w': dmode = MINKOWSKI<br/>    end switch<br/>    if dmode!=wasdmode<br/>    or nsites!=length(siteX) then<br/>        -- give any current drawing process 0.1s to abandon:<br/>        timer_active = 1<br/>        IupStoreAttribute(timer, \"RUN\", \"YES\")<br/>--      IupUpdate(canvas)<br/>    end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>function timer_cb(Ihandle /*ih*/)<br/>    timer_active = 0<br/>    IupStoreAttribute(timer, \"RUN\", \"NO\")<br/>    IupUpdate(canvas)<br/>    return IUP_IGNORE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"600x400\") -- initial size<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>\u00a0<br/>    timer = IupTimer(Icallback(\"timer_cb\"), 100, 0) -- (inactive)<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", \"Voronoi diagram\")<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"esc_close\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    IupMap(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL) -- release the minimum limitation<br/>    IupShowXY(dlg,IUP_CENTER,IUP_CENTER)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>main()</pre>"}, {"lang": "Prolog", "loc": 62, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> pt<span class=\"sy3\">/</span><span class=\"nu0\">6</span><span class=\"sy4\">.</span><br/>voronoi <span class=\"sy1\">:-</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">20</span><span class=\"sy4\">,</span><br/>\tretractall<span class=\"br0\">(</span>pt<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">390</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\t         Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">390</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\t\t R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">65535</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t G <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">65535</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">65535</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">assertz</span></a><span class=\"br0\">(</span>pt<span class=\"br0\">(</span>I<span class=\"sy4\">,</span>X<span class=\"sy4\">,</span>Y<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t       <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tvoronoi<span class=\"br0\">(</span>manhattan<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tvoronoi<span class=\"br0\">(</span>euclide<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tvoronoi<span class=\"br0\">(</span>minkowski_3<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>voronoi<span class=\"br0\">(</span>Distance<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsformat<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"st_h\">'Voronoi 400X400 ~w ~w'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy4\">,</span> Distance<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy4\">,</span><span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> image<span class=\"br0\">(</span><span class=\"sy5\">@</span>nil<span class=\"sy4\">,</span> width <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">400</span><span class=\"sy4\">,</span> height <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">400</span> <span class=\"sy4\">,</span> kind <span class=\"sy4\">:</span><span class=\"sy6\">=</span> pixmap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% get the list of the sites</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> R^G^B^pt<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">399</span><span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">399</span><span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t   <span class=\"br0\">(</span>  get_nearest_site<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> Distance<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t      pt<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t      send<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> pixel<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>Bmp<span class=\"sy4\">,</span> bitmap<span class=\"br0\">(</span>Img<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Bmp<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% define predicatea foldl (functionnal spirit)</span><br/>foldl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _Pred<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>foldl<span class=\"br0\">(</span><span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> Pred<span class=\"sy4\">,</span> Acc<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Pred<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> Acc<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> Pred<span class=\"sy4\">,</span> R1<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% predicate for foldl</span><br/>compare<span class=\"br0\">(</span>Distance<span class=\"sy4\">,</span> XP<span class=\"sy4\">,</span> YP<span class=\"sy4\">,</span> <span class=\"br0\">(</span>N<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>D<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Distance<span class=\"sy4\">,</span> XP<span class=\"sy4\">,</span> YP<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> DT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   DT <span class=\"sy6\">&lt;</span> D <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"br0\">(</span>DT<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy4\">;</span> R <span class=\"sy6\">=</span> <span class=\"br0\">(</span>D<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% use of a fake site for the init of foldl</span><br/>get_nearest_site<span class=\"br0\">(</span>Distance<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tfoldl<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> compare<span class=\"br0\">(</span>Distance<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span>  <span class=\"br0\">(</span><span class=\"nu0\">65535</span><span class=\"sy4\">,</span> nil<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>_<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>manhattan<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tD <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>X2 <span class=\"sy3\">-</span> X1<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>Y2<span class=\"sy3\">-</span>Y1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>euclide<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tD <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>X2 <span class=\"sy3\">-</span> X1<span class=\"br0\">)</span><span class=\"sy3\">**</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>Y2<span class=\"sy3\">-</span>Y1<span class=\"br0\">)</span><span class=\"sy3\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>minkowski_3<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tD <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>X2 <span class=\"sy3\">-</span> X1<span class=\"br0\">)</span><span class=\"sy3\">**</span><span class=\"nu0\">3</span> <span class=\"sy3\">+</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>Y2<span class=\"sy3\">-</span>Y1<span class=\"br0\">)</span><span class=\"sy3\">**</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy3\">**</span><span class=\"nu0\">0.33</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 70, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> VCoo<br/>  x.i:  y.i<br/>  Colour.i: FillColour.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> RandInt<span class=\"br0\">(</span>MAXLIMIT<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Int</span><span class=\"br0\">(</span>MAXLIMIT<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>#MAXLONG<span class=\"br0\">)</span><span class=\"sy0\">/</span>#MAXLONG<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> SQ2<span class=\"br0\">(</span>X, Y<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> GenRandomPoints<span class=\"br0\">(</span>Array a.VCoo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, xMax, yMax, cnt<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j, k, l<br/>  cnt<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> cnt<br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> RandInt<span class=\"br0\">(</span>xMax<span class=\"br0\">)</span>: a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> RandInt<span class=\"br0\">(</span>yMax<span class=\"br0\">)</span><br/>    j <span class=\"sy0\">=</span> RandInt<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>: k <span class=\"sy0\">=</span> RandInt<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>: l <span class=\"sy0\">=</span> RandInt<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Colour <span class=\"sy0\">=</span> RGBA<span class=\"br0\">(</span>j, k, l, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>FillColour <span class=\"sy0\">=</span> RGBA<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span>j, <span class=\"nu0\">255</span><span class=\"sy0\">-</span>k, <span class=\"nu0\">255</span><span class=\"sy0\">-</span>l, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> MakeVoronoiDiagram<span class=\"br0\">(</span>Array a.VCoo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,xMax, yMax<span class=\"br0\">)</span> <span class=\"co1\">; Euclidean</span><br/>  <span class=\"kw1\">Protected</span> i, x, y, img, dist.d, dt.d<br/>  img <span class=\"sy0\">=</span> <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span>#PB_Any, xMax<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, yMax<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span>img<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> y<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> yMax<br/>      <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> xMax<br/>        dist <span class=\"sy0\">=</span> Infinity<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          dt <span class=\"sy0\">=</span> SQ2<span class=\"br0\">(</span>x<span class=\"sy0\">-</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y<span class=\"sy0\">-</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> dt <span class=\"sy0\">&gt;</span> dist <br/>            <span class=\"kw1\">Continue</span><br/>          <span class=\"kw1\">ElseIf</span> dt <span class=\"sy0\">&lt;</span> dist<br/>            dist <span class=\"sy0\">=</span> dt<br/>            <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x,y,a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>FillColour<span class=\"br0\">)</span><br/>          <span class=\"kw1\">Else</span> <span class=\"co1\">; 'Owner ship' is unclear, set pixel to transparent.</span><br/>            <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x,y,RGBA<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Circle</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y, <span class=\"nu0\">1</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Colour<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> img <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; Main code</span><br/><span class=\"kw1\">Define</span> img, x, y, file$<br/><span class=\"kw1\">Dim</span> V.VCoo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>x <span class=\"sy0\">=</span> <span class=\"nu0\">640</span>: y <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> GenRandomPoints<span class=\"br0\">(</span>V<span class=\"br0\">(</span><span class=\"br0\">)</span>, x, y, <span class=\"nu0\">150</span><span class=\"br0\">)</span>: <span class=\"kw1\">End</span>: <span class=\"kw1\">EndIf</span>  <br/>img <span class=\"sy0\">=</span> MakeVoronoiDiagram<span class=\"br0\">(</span>V<span class=\"br0\">(</span><span class=\"br0\">)</span>, x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> img <span class=\"kw1\">And</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, x, y, <span class=\"st0\">\"Voronoi Diagram in PureBasic\"</span>, #PB_Window_SystemMenu<span class=\"br0\">)</span><br/>  <span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, x, y, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span>img<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #PB_Event_CloseWindow<br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw2\">UsePNGImageEncoder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>file$ <span class=\"sy0\">=</span> <span class=\"kw2\">SaveFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Save Image?\"</span>, <span class=\"st0\">\"Voronoi_Diagram_in_PureBasic.png\"</span>, <span class=\"st0\">\"PNG|*.png\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> file$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">SaveImage</span><span class=\"br0\">(</span>img, file$, #PB_ImagePlugin_PNG<span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 33, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> PIL <span class=\"kw1\">import</span> Image<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw1\">def</span> generate_voronoi_diagram<span class=\"br0\">(</span>width<span class=\"sy0\">,</span> height<span class=\"sy0\">,</span> num_cells<span class=\"br0\">)</span>:<br/>\timage <span class=\"sy0\">=</span> Image.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"RGB\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>width<span class=\"sy0\">,</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tputpixel <span class=\"sy0\">=</span> image.<span class=\"me1\">putpixel</span><br/>\timgx<span class=\"sy0\">,</span> imgy <span class=\"sy0\">=</span> image.<span class=\"me1\">size</span><br/>\tnx <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tny <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tnr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tng <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tnb <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>num_cells<span class=\"br0\">)</span>:<br/>\t\tnx.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span>imgx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tny.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span>imgy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tnr.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tng.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tnb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>imgy<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>imgx<span class=\"br0\">)</span>:<br/>\t\t\tdmin <span class=\"sy0\">=</span> <span class=\"kw3\">math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>imgx-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> imgy-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\tj <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>num_cells<span class=\"br0\">)</span>:<br/>\t\t\t\td <span class=\"sy0\">=</span> <span class=\"kw3\">math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>nx<span class=\"br0\">[</span>i<span class=\"br0\">]</span>-x<span class=\"sy0\">,</span> ny<span class=\"br0\">[</span>i<span class=\"br0\">]</span>-y<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> d <span class=\"sy0\">&lt;</span> dmin:<br/>\t\t\t\t\tdmin <span class=\"sy0\">=</span> d<br/>\t\t\t\t\tj <span class=\"sy0\">=</span> i<br/>\t\t\tputpixel<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>nr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> ng<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> nb<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\timage.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"st0\">\"VoronoiDiagram.png\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"PNG\"</span><span class=\"br0\">)</span><br/>        image.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>generate_voronoi_diagram<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## HF#1 Random Hex color<br/>randHclr &lt;- function() {<br/>  m=255;r=g=b=0;<br/>  r &lt;- sample(0:m, 1, replace=TRUE);<br/>  g &lt;- sample(0:m, 1, replace=TRUE);<br/>  b &lt;- sample(0:m, 1, replace=TRUE);<br/>  return(rgb(r,g,b,maxColorValue=m));<br/>}<br/>## HF#2 Metrics: Euclidean, Manhattan and Minkovski<br/>Metric &lt;- function(x, y, mt) {<br/>  if(mt==1) {return(sqrt(x*x + y*y))}<br/>  if(mt==2) {return(abs(x) + abs(y))}<br/>  if(mt==3) {return((abs(x)^3 + abs(y)^3)^0.33333)}<br/>}<br/>\u00a0<br/>## Plotting Voronoi diagram. aev 3/12/17<br/>## ns - number of sites, fn - file name, ttl - plot title.<br/>## mt - type of metric: 1 - Euclidean, 2 - Manhattan, 3 - Minkovski.<br/>pVoronoiD &lt;- function(ns, fn=\"\", ttl=\"\",mt=1) {<br/>  cat(\" *** START VD:\", date(), \"\\n\");<br/>  if(mt&lt;1||mt&gt;3) {mt=1}; mts=\"\"; if(mt&gt;1) {mts=paste0(\", mt - \",mt)}; <br/>  m=640; i=j=k=m1=m-2; x=y=d=dm=0;<br/>  if(fn==\"\") {pf=paste0(\"VDR\", mt, ns, \".png\")} else {pf=paste0(fn, \".png\")};<br/>  if(ttl==\"\") {ttl=paste0(\"Voronoi diagram, sites - \", ns, mts)};<br/>  cat(\" *** Plot file -\", pf, \"title:\", ttl, \"\\n\");<br/>  plot(NA, xlim=c(0,m), ylim=c(0,m), xlab=\"\", ylab=\"\", main=ttl);<br/>  X=numeric(ns); Y=numeric(ns); C=numeric(ns);<br/>  for(i in 1:ns) {<br/>    X[i]=sample(0:m1, 1, replace=TRUE); <br/>    Y[i]=sample(0:m1, 1, replace=TRUE);<br/>    C[i]=randHclr();<br/>  }<br/>  for(i in 0:m1) {<br/>    for(j in 0:m1) {<br/>      dm=Metric(m1,m1,mt); k=-1;<br/>      for(n in 1:ns) {<br/>        d=Metric(X[n]-j,Y[n]-i, mt);<br/>        if(d&lt;dm) {dm=d; k=n;}<br/>      }<br/>      clr=C[k]; segments(j, i, j, i, col=clr);<br/>    }<br/>  }<br/>  points(X, Y, pch = 19, col = \"black\", bg = \"white\")<br/>  dev.copy(png, filename=pf, width=m, height=m);<br/>  dev.off(); graphics.off();<br/>  cat(\" *** END VD:\",date(),\"\\n\");<br/>}<br/>## Executing:<br/>pVoronoiD(150)          ## Euclidean metric<br/>pVoronoiD(10,\"\",\"\",2)   ## Manhattan metric<br/>pVoronoiD(10,\"\",\"\",3)   ## Minkovski metric<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require plot)<br/>\u00a0<br/>;; Performs clustering of points in a grid<br/>;; using the nearest neigbour approach and shows<br/>;; clusters in different colors<br/>(define (plot-Voronoi-diagram point-list)<br/>  (define pts<br/>    (for*/list ([x (in-range 0 1 0.005)]<br/>                [y (in-range 0 1 0.005)])<br/>      (vector x y)))<br/>\u00a0<br/>  (define clusters (clusterize pts point-list))<br/>\u00a0<br/>  (plot<br/>   (append<br/>    (for/list ([r (in-list clusters)] [i (in-naturals)])<br/>      (points (rest r) #:color i #:sym 'fullcircle1))<br/>    (list (points point-list #:sym 'fullcircle5 #:fill-color 'white)))))<br/>\u00a0<br/>;; Divides the set of points into clusters<br/>;; using given centroids<br/>(define (clusterize data centroids)<br/>  (for*/fold ([res (map list centroids)]) ([x (in-list data)])<br/>    (define c (argmin (curryr (metric) x) centroids))<br/>    (dict-set res c (cons x (dict-ref res c)))))<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 123, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Voronoi diagram<br/>\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>paint = null<br/>\u00a0<br/>new qapp <br/>        {<br/>        spots\t= 100<br/>        leftside = 400<br/>        rightside = 400<br/>\u00a0<br/>        locx = list(spots)<br/>        locy = list(spots)<br/>        rgb = newlist(spots,3)<br/>        seal = newlist(leftside, rightside)<br/>        reach = newlist(leftside, rightside)<br/>\u00a0<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Voronoi diagram\")<br/>                  setgeometry(100,100,800,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,800,600)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(150,550,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>        for i =1 to spots<br/>             locx[i] = floor(leftside  * randomf())<br/>             locy[i] = floor(rightside * randomf())<br/>             rgb[i][1] = floor(256 * randomf())<br/>             rgb[i][2] = floor(256 * randomf())<br/>             rgb[i][3] = floor(256 * randomf())<br/>        next <br/>        for x = 1 to leftside <br/>             for y = 1 to rightside <br/>                 reach[x][y] = pow((locx[1] - x),2) + pow((locy[1] - y),2)<br/>                 seal[x][y] = 1<br/>             next <br/>        next <br/>        for i = 2 to spots<br/>             for x = locx[i] to 0 step -1\t\t<br/>                 if not (chkpos(i,x,1, rightside-1))<br/>                   exit <br/>                 ok<br/>             next <br/>             for x = locx[i] + 1 to leftside - 1\t\t<br/>                  if not (chkpos(i, x, 1, rightside-1))<br/>                     exit<br/>                  ok<br/>             next <br/>        next  <br/>        for x = 1 to leftside <br/>             for y = 1 to rightside<br/>           \t  c1 = rgb[seal[x][y]][1]<br/>        \t  c2 = rgb[seal[x][y]][2]<br/>\t          c3 = rgb[seal[x][y]][3]<br/>                  color = new qcolor() { setrgb(c1,c2,c3,255) }<br/>                  pen = new qpen()   { setcolor(color) setwidth(10) }<br/>                  setpen(pen)<br/>                  starty = y<br/>                  nearest = seal[x][y]<br/>                  for y = (y + 1)  to rightside<br/>                       if seal[x][y]\u00a0!= nearest <br/>                          y = y - 1<br/>                          exit <br/>                       ok<br/>                  next<br/>                  paint.drawline(x,starty,x,y + 1)<br/>             next<br/>        next<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>        return<br/>\u00a0<br/>func chkpos(site,x,starty,endy)<br/>        chkpos = 0<br/>        dxsqr = 0<br/>\tdxsqr = pow((locx[site]- x),2)<br/>\tfor y = starty to endy<br/>\t     dsqr = pow((locy[site] - y),2) + dxsqr<br/>             if x &lt;= leftside and y &lt;= leftside and x &gt; 0 and y &gt; 0<br/>\t     if dsqr &lt;= reach[x][y]<br/>\t\treach[x][y]\t= dsqr<br/>\t\tseal[x][y] = site<br/>\t\tchkpos = 1<br/>             ok<br/>\t     ok<br/>\tnext <br/>        return chkpos<br/>\u00a0<br/>func randomf()<br/>       decimals(10)<br/>       str = \"0.\"<br/>       for i = 1 to 10<br/>            nr = random(9)<br/>            str = str + string(nr)<br/>       next<br/>       return number(str)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 36, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">load</span> <span class=\"st0\">'raster_graphics.rb'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> ColourPixel <span class=\"sy0\">&lt;</span> Pixel<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>x, y, colour<span class=\"br0\">)</span><br/>    <span class=\"re1\">@colour</span> = colour<br/>    <span class=\"kw1\">super</span> x, y<br/>  <span class=\"kw1\">end</span><br/>  attr_accessor <span class=\"re3\">:colour</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> distance_to<span class=\"br0\">(</span>px, py<span class=\"br0\">)</span><br/>    <span class=\"kw4\">Math</span>::hypot<span class=\"br0\">(</span>px <span class=\"sy0\">-</span> x, py <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/>width, height = <span class=\"nu0\">300</span>, <span class=\"nu0\">200</span><br/>npoints = <span class=\"nu0\">20</span><br/>pixmap = Pixmap.<span class=\"me1\">new</span><span class=\"br0\">(</span>width,height<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re1\">@bases</span> = npoints.<span class=\"me1\">times</span>.<span class=\"me1\">collect</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  ColourPixel.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>      <span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span>width<span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span>height<span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>,  <span class=\"co1\"># provide a margin to draw a circle</span><br/>      RGBColour.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>pixmap.<span class=\"me1\">each_pixel</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> <br/>  nearest = <span class=\"re1\">@bases</span>.<span class=\"me1\">min_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>base<span class=\"sy0\">|</span> base.<span class=\"me1\">distance_to</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  pixmap<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> = nearest.<span class=\"me1\">colour</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"re1\">@bases</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>base<span class=\"sy0\">|</span> <br/>  pixmap<span class=\"br0\">[</span>base.<span class=\"me1\">x</span>, base.<span class=\"me1\">y</span><span class=\"br0\">]</span> = <span class=\"re2\">RGBColour::BLACK</span><br/>  pixmap.<span class=\"me1\">draw_circle</span><span class=\"br0\">(</span>base, <span class=\"nu0\">2</span>, <span class=\"re2\">RGBColour::BLACK</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>pixmap.<span class=\"me1\">save_as_png</span><span class=\"br0\">(</span><span class=\"st0\">\"voronoi_rb.png\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 75, "block": "<pre class=\"text highlighted_source\">graphic #g, 400,400<br/>#g flush()<br/>spots\t\t= 100<br/>leftSide\t= 400<br/>rightSide\t= 400<br/>\u00a0<br/>dim locX(spots)<br/>dim locY(spots)<br/>dim rgb(spots,3)<br/>dim seal(leftSide, rightSide)<br/>dim reach(leftSide, rightSide)<br/>\u00a0<br/>for i =1 to spots<br/>    locX(i)\t= int(leftSide  * rnd(1))<br/>    locY(i)\t= int(rightSide * rnd(1))<br/>    rgb(i,1)\t= int(256 * rnd(1))<br/>    rgb(i,2)\t= int(256 * rnd(1))<br/>    rgb(i,3)\t= int(256 * rnd(1))<br/>    #g color(rgb(i,1),rgb(i,2),rgb(i,3))<br/>    #g set(locX(i),locY(i))<br/>next i<br/>#g size(1)<br/>' find reach to the first site<br/>for x = 0 to leftSide - 1<br/>    for y = 0 to rightSide - 1<br/>        reach(x, y) = (locX(1) - x) ^ 2 + (locY(1) - y) ^ 2<br/>        seal(x, y) = 1<br/>    next y<br/>next x<br/>#g color(\"darkblue\")<br/>\u00a0<br/>' spots other than 1st spot<br/>for i = 2 to spots<br/>    for x = locX(i) to 0 step -1\t\t' looking left<br/>        if not(chkPos(i,x,0, rightSide - 1)) then exit for<br/>    next x<br/>    for x = locX(i) + 1 to leftSide - 1\t\t' looking right<br/>        if not(chkPos(i, x, 0, rightSide - 1)) then exit for<br/>    next x<br/>next i<br/>\u00a0<br/>for x = 0 to leftSide - 1<br/>    for y = 0 to rightSide - 1<br/>\tc1\t= rgb(seal(x, y),1)<br/>\tc2\t= rgb(seal(x, y),2)<br/>\tc3\t= rgb(seal(x, y),3)<br/>        #g color(c1,c2,c3)<br/>        startY\t= y<br/>        nearest\t= seal(x, y)<br/>        for y = y + 1 to rightSide<br/>            if seal(x, y) &lt;&gt; nearest then y = y - 1\u00a0: exit for<br/>        next y<br/>        #g line(x,startY,x,y + 1)<br/>    next y<br/>next x<br/>\u00a0<br/>#g color(\"black\")<br/>#g size(4)<br/>for i =1 to spots<br/>    #g set(locX(i),locY(i))<br/>next i<br/>render #g<br/>end<br/>\u00a0<br/>function chkPos(site, x, startY, endY)<br/>\tdxSqr = (locX(site) - x) ^ 2<br/>\tfor y = startY to endY<br/>\t\tdSqr = (locY(site) - y) ^ 2 + dxSqr<br/>\t\tif dSqr &lt;= reach(x, y) then<br/>\t\t\treach(x,y)\t= dSqr<br/>\t\t\tseal(x,y)\t= site<br/>\t\t\tchkPos\t\t= 1<br/>\t\tend if<br/>\tnext y<br/>end function</pre>"}, {"lang": "Rust", "loc": 181, "block": "<pre class=\"text highlighted_source\">extern crate piston;<br/>extern crate opengl_graphics;<br/>extern crate graphics;<br/>extern crate touch_visualizer;<br/>\u00a0<br/>#[cfg(feature = \"include_sdl2\")]<br/>extern crate sdl2_window;<br/>\u00a0<br/>extern crate getopts;<br/>extern crate voronoi;<br/>extern crate rand;<br/>\u00a0<br/>use touch_visualizer::TouchVisualizer;<br/>use opengl_graphics::{ GlGraphics, OpenGL };<br/>use graphics::{ Context, Graphics };<br/>use piston::window::{ Window, WindowSettings };<br/>use piston::input::*;<br/>use piston::event_loop::*;<br/>#[cfg(feature = \"include_sdl2\")]<br/>use sdl2_window::Sdl2Window as AppWindow;<br/>use voronoi::{voronoi, Point, make_polygons};<br/>use rand::Rng;<br/>\u00a0<br/>static DEFAULT_WINDOW_HEIGHT: u32 = 600;<br/>static DEFAULT_WINDOW_WIDTH:  u32 = 600;<br/>\u00a0<br/>struct Settings {<br/>    lines_only: bool,<br/>    random_count: usize<br/>}<br/>\u00a0<br/>fn main() {<br/>    let args: Vec&lt;String&gt; = std::env::args().collect();<br/>    let mut opts = getopts::Options::new();<br/>    opts.optflag(\"l\", \"lines_only\", \"Don't color polygons, just outline them\");<br/>    opts.optopt(\"r\", \"random_count\", \"On keypress \\\"R\\\", put this many random points on-screen\", \"RANDOMCOUNT\");<br/>    let matches = opts.parse(&amp;args[1..]).expect(\"Failed to parse args\");<br/>\u00a0<br/>    let settings = Settings{<br/>        lines_only: matches.opt_present(\"l\"),<br/>        random_count: match matches.opt_str(\"r\") {<br/>            None =&gt; { 50 },<br/>            Some(s) =&gt; { s.parse().expect(\"Random count of bad format\") }<br/>        }<br/>    };<br/>\u00a0<br/>    event_loop(&amp;settings);<br/>\u00a0<br/>}<br/>\u00a0<br/>fn random_point() -&gt; [f64; 2] {<br/>    [rand::thread_rng().gen_range(0., DEFAULT_WINDOW_HEIGHT as f64), rand::thread_rng().gen_range(0., DEFAULT_WINDOW_WIDTH as f64)]<br/>}<br/>\u00a0<br/>fn random_color() -&gt; [f32; 4] {<br/>    [rand::random::&lt;f32&gt;(), rand::random::&lt;f32&gt;(), rand::random::&lt;f32&gt;(), 1.0]<br/>}<br/>\u00a0<br/>fn random_voronoi(dots: &amp;mut Vec&lt;[f64;2]&gt;, colors: &amp;mut Vec&lt;[f32;4]&gt;, num: usize) {<br/>    dots.clear();<br/>    colors.clear();<br/>\u00a0<br/>    for _ in 0..num {<br/>        dots.push(random_point());<br/>        colors.push(random_color());<br/>    }<br/>}<br/>\u00a0<br/>fn event_loop(settings: &amp;Settings) {<br/>    let opengl = OpenGL::V3_2;<br/>    let mut window: AppWindow = WindowSettings::new(\"Interactive Voronoi\", [DEFAULT_WINDOW_HEIGHT, DEFAULT_WINDOW_WIDTH])<br/>        .exit_on_esc(true).opengl(opengl).build().unwrap();<br/>\u00a0<br/>    let ref mut gl = GlGraphics::new(opengl);<br/>    let mut touch_visualizer = TouchVisualizer::new();<br/>    let mut events = Events::new(EventSettings::new().lazy(true));<br/>    let mut dots = Vec::new();<br/>    let mut colors = Vec::new();<br/>\u00a0<br/>    let mut mx = 0.0;<br/>    let mut my = 0.0;<br/>\u00a0<br/>    while let Some(e) = events.next(&amp;mut window) {<br/>        touch_visualizer.event(window.size(), &amp;e);<br/>        if let Some(button) = e.release_args() {<br/>            match button {<br/>                Button::Keyboard(key) =&gt; {<br/>                    if key == piston::input::keyboard::Key::N { dots.clear(); colors.clear(); }<br/>                    if key == piston::input::keyboard::Key::R { random_voronoi(&amp;mut dots, &amp;mut colors, settings.random_count); }<br/>                }<br/>                Button::Mouse(_) =&gt; {<br/>                    dots.push([mx, my]);<br/>                    colors.push(random_color());<br/>                },<br/>                _ =&gt; ()<br/>            }<br/>        };<br/>        e.mouse_cursor(|x, y| {<br/>            mx = x;<br/>            my = y;<br/>        });<br/>        if let Some(args) = e.render_args() {<br/>            gl.draw(args.viewport(), |c, g| {<br/>                graphics::clear([1.0; 4], g);<br/>                let mut vor_pts = Vec::new();<br/>                for d in &amp;dots {<br/>                    vor_pts.push(Point::new(d[0], d[1]));<br/>                }<br/>                if vor_pts.len() &gt; 0 {<br/>                    let vor_diagram = voronoi(vor_pts, DEFAULT_WINDOW_WIDTH as f64);<br/>                    let vor_polys = make_polygons(&amp;vor_diagram);<br/>                    for (i, poly) in vor_polys.iter().enumerate() {<br/>                        if settings.lines_only {<br/>                            draw_lines_in_polygon(poly, &amp;c, g);<br/>                        } else {<br/>                            draw_polygon(poly, &amp;c, g, colors[i]);<br/>                        }<br/>                    }<br/>                }<br/>                for d in &amp;dots {<br/>                    draw_ellipse(&amp;d, &amp;c, g);<br/>                }<br/>            });<br/>        }<br/>    } <br/>\u00a0<br/>}<br/>\u00a0<br/>fn draw_lines_in_polygon&lt;G: Graphics&gt;(<br/>    poly: &amp;Vec&lt;Point&gt;,<br/>    c: &amp;Context,<br/>    g: &amp;mut G,<br/>)<br/>{<br/>    let color = [0.0, 0.0, 1.0, 1.0];<br/>\u00a0<br/>    for i in 0..poly.len()-1 {<br/>        graphics::line(<br/>            color,<br/>            2.0,<br/>            [poly[i].x.into(), poly[i].y.into(), poly[i+1].x.into(), poly[i+1].y.into()],<br/>            c.transform,<br/>            g<br/>        )<br/>    }<br/>}<br/>\u00a0<br/>fn draw_polygon&lt;G: Graphics&gt;(<br/>    poly: &amp;Vec&lt;Point&gt;,<br/>    c: &amp;Context,<br/>    g: &amp;mut G,<br/>    color: [f32; 4]<br/>) {<br/>    let mut polygon_points: Vec&lt;[f64; 2]&gt; = Vec::new();<br/>\u00a0<br/>    for p in poly {<br/>        polygon_points.push([p.x.into(), p.y.into()]);<br/>    }<br/>\u00a0<br/>    graphics::polygon(<br/>        color,<br/>        polygon_points.as_slice(),<br/>        c.transform,<br/>        g<br/>    )<br/>}<br/>\u00a0<br/>fn draw_ellipse&lt;G: Graphics&gt;(<br/>    cursor: &amp;[f64; 2],<br/>    c: &amp;Context,<br/>    g: &amp;mut G,<br/>) {<br/>    let color = [0.0, 0.0, 0.0, 1.0];<br/>    graphics::ellipse(<br/>        color,<br/>        graphics::ellipse::circle(cursor[0], cursor[1], 4.0),<br/>        c.transform,<br/>        g<br/>    );<br/>}<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 52, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"draw.s7i\";<br/>  include \"keybd.s7i\";<br/>\u00a0<br/>const type: point is new struct<br/>    var integer: xPos is 0;<br/>    var integer: yPos is 0;<br/>    var color: col is black;<br/>  end struct;<br/>\u00a0<br/>const proc: generateVoronoiDiagram (in integer: width, in integer: height, in integer: numCells) is func<br/>  local<br/>    var array point: points is 0 times point.value;<br/>    var integer: index is 0;<br/>    var integer: x is 0;<br/>    var integer: y is 0;<br/>    var integer: distSquare is 0;<br/>    var integer: minDistSquare is 0;<br/>    var integer: indexOfNearest is 0;<br/>  begin<br/>    screen(width, height);<br/>    points\u00a0:= numCells times point.value;<br/>    for index range 1 to numCells do<br/>      points[index].xPos\u00a0:= rand(0, width);<br/>      points[index].yPos\u00a0:= rand(0, height);<br/>      points[index].col\u00a0:= color(rand(0, 65535), rand(0, 65535), rand(0, 65535));<br/>    end for;<br/>    for y range 0 to height do<br/>      for x range 0 to width do<br/>        minDistSquare\u00a0:= width ** 2 + height ** 2;<br/>        for index range 1 to numCells do<br/>          distSquare\u00a0:= (points[index].xPos - x) ** 2 + (points[index].yPos - y) ** 2;<br/>          if distSquare &lt; minDistSquare then<br/>            minDistSquare\u00a0:= distSquare;<br/>            indexOfNearest\u00a0:= index;<br/>          end if;<br/>        end for;<br/>        point(x, y, points[indexOfNearest].col);<br/>      end for;<br/>    end for;<br/>    for index range 1 to numCells do<br/>      line(points[index].xPos - 2, points[index].yPos, 4, 0, black);<br/>      line(points[index].xPos, points[index].yPos - 2, 0, 4, black);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    generateVoronoiDiagram(500, 500, 25);<br/>    KEYBOARD\u00a0:= GRAPH_KEYBOARD;<br/>    readln(KEYBOARD);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func generate_voronoi_diagram<span class=\"br0\">(</span>width, height, num_cells<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> width, ysize <span class=\"sy0\">=&gt;</span> height<span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>nx,ny,nr,ng,nb<span class=\"br0\">)</span> = <span class=\"nu0\">5</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>...<br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^num_cells<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nx <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>^width<span class=\"br0\">)</span><br/>        ny <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>^height<span class=\"br0\">)</span><br/>        nr <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>^<span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>        ng <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>^<span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>        nb <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>^<span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> y=<span class=\"br0\">(</span>^height<span class=\"br0\">)</span>, x=<span class=\"br0\">(</span>^width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var j = <span class=\"br0\">(</span>^num_cells <span class=\"sy0\">-&gt;</span> min_by <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> hypot<span class=\"br0\">(</span>nx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span>x, ny<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span>y<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, y <span class=\"sy0\">=&gt;</span> y, color <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>nr<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, ng<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, nb<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> img<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var img = generate_voronoi_diagram<span class=\"br0\">(</span><span class=\"nu0\">500</span>, <span class=\"nu0\">500</span>, <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'VoronoiDiagram.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 35, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/><span class=\"kw1\">proc</span> r to <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$to</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Simple helper</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> voronoi <span class=\"br0\">{</span>photo pointCount<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$pointCount</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> points <span class=\"br0\">[</span>r <span class=\"br0\">[</span>image width <span class=\"re0\">$photo</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>r <span class=\"br0\">[</span>image height <span class=\"re0\">$photo</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"re0\">$points</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> colors <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%02x%02x%02x\"</span> <span class=\"br0\">[</span>r <span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>r <span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>r <span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> initd <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>image width <span class=\"re0\">$photo</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span>image height <span class=\"re0\">$photo</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span>image width <span class=\"re0\">$photo</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span>image height <span class=\"re0\">$photo</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> color black<br/>\t    <span class=\"kw1\">set</span> d <span class=\"re0\">$initd</span><br/>\t    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"re0\">$points</span> c <span class=\"re0\">$colors</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> h <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"re0\">$x</span>-<span class=\"re0\">$i</span>,<span class=\"re0\">$y</span>-<span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"co1\">### Other interesting metrics</span><br/>\t\t<span class=\"co1\">#set h [expr {abs($x-$i)+abs($y-$j)}]</span><br/>\t\t<span class=\"co1\">#set h [expr {(abs($x-$i)**3+abs($y-$j)**3)**0.3}]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$h</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> d <span class=\"re0\">$h</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> color <span class=\"re0\">$c</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"re0\">$photo</span> put <span class=\"re0\">$color</span> -to <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># To display while generating, uncomment this line and the other one so commented</span><br/>\t<span class=\"co1\">#if {$i%4==0} {update idletasks}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Generate a 600x400 Voronoi diagram with 60 random points</span><br/>image create photo demo -width <span class=\"nu0\">600</span> -height <span class=\"nu0\">400</span><br/>pack <span class=\"br0\">[</span>label .l -image demo<span class=\"br0\">]</span><br/><span class=\"co1\"># To display while generating, uncomment this line and the other one so commented</span><br/><span class=\"co1\">#update</span><br/>voronoi demo <span class=\"nu0\">60</span></pre>"}, {"lang": "XPL0", "loc": 22, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>def     N = 15;                 \\number of sites<br/>int     SiteX(N), SiteY(N),     \\coordinates of sites<br/>        Dist2, MinDist2, MinI,  \\distance squared, and minimums<br/>        X, Y, I;<br/>[SetVid($13);                   \\set 320x200x8 graphics<br/>for I:= 0 to N-1 do             \\create a number of randomly placed sites<br/>        [SiteX(I):= Ran(160);  SiteY(I):= Ran(100)];<br/>for Y:= 0 to 100-1 do           \\generate Voronoi diagram<br/>    for X:= 0 to 160-1 do       \\for all points...<br/>        [MinDist2:= -1&gt;&gt;1;      \\find closest site<br/>        for I:= 0 to N-1 do<br/>                [Dist2:= sq(X-SiteX(I)) + sq(Y-SiteY(I));<br/>                if Dist2 &lt; MinDist2 then<br/>                        [MinDist2:= Dist2;  MinI:= I];<br/>                ];<br/>        if MinDist2 then Point(X, Y, MinI+1);   \\leave center black<br/>        ];<br/>I:= ChIn(1);                    \\wait for keystroke<br/>SetVid($03);                    \\restore normal text screen<br/>]</pre>"}, {"lang": "Yabasic", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>clear screen<br/>\u00a0<br/>sites = 200<br/>xEdge = 600<br/>yEdge = 400<br/>\u00a0<br/>open window xEdge, yEdge<br/>\u00a0<br/>dim townX(sites), townY(sites), col$(sites)<br/>\u00a0<br/>for i =1 to sites<br/>    townX(i) =int(xEdge *ran(1))<br/>    townY(i) =int(yEdge *ran(1))<br/>    col$(i) = str$(int(256 * ran(1))) + \", \" + str$(int(256 * ran(1))) + \", \" + str$(int(256 * ran(1)))<br/>    color col$(i)<br/>    fill circle townX(i), townY(i), 2<br/>next i<br/>\u00a0<br/>dim nearestIndex(xEdge, yEdge)<br/>dim dist(xEdge, yEdge)<br/>\u00a0<br/>//fill distance table with distances from the first site<br/>for x = 0 to xEdge - 1<br/>    for y = 0 to yEdge - 1<br/>        dist(x, y) = (townX(1) - x) ^ 2 + (townY(1) - y) ^ 2<br/>        nearestIndex(x, y) = 1<br/>    next y<br/>next x<br/>\u00a0<br/>color 0,0,255<br/>//for other towns<br/>for i = 2 to sites<br/>    //display some progress<br/>    //print at(0,20) \"computing: \", (i/sites*100) using \"###.#\", \"\u00a0%\"<br/>\u00a0<br/>    //look left<br/>    for x = townX(i) to 0 step -1<br/>        if not(checkRow(i, x,0, yEdge - 1)) break<br/>    next x<br/>    //look right<br/>    for x = townX(i) + 1 to xEdge - 1<br/>        if not(checkRow(i, x, 0, yEdge - 1)) break<br/>    next x<br/>next i<br/>\u00a0<br/>for x = 0 to xEdge - 1<br/>    for y =0 to yEdge - 1<br/>    \tcolor col$(nearestIndex(x, y))<br/>        startY = y<br/>        nearest = nearestIndex(x, y)<br/>        for y = y + 1 to yEdge<br/>            if nearestIndex(x, y) &lt;&gt; nearest then y = y - 1\u00a0: break\u00a0: end if<br/>        next y<br/>        line x, startY, x, y + 1<br/>    next y<br/>next x<br/>\u00a0<br/>color 0,0,0<br/>for i =1 to sites<br/>    fill circle townX( i), townY( i), 2<br/>next i<br/>print peek(\"millisrunning\"), \" ms\"<br/>\u00a0<br/>sub checkRow(site, x, startY, endY)<br/>    local dxSquared, y, check<br/>\u00a0<br/>    dxSquared = (townX(site) - x) ^ 2<br/>    for y = startY to endY<br/>         dSquared = (townY(site) - y) ^ 2 + dxSquared<br/>         if dSquared &lt;= dist(x, y) then<br/>             dist(x, y) = dSquared<br/>             nearestIndex(x, y) = site<br/>             check = 1<br/>         end if<br/>    next y<br/>    return check<br/>end sub</pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">fcn generate_voronoi_diagram(width,height,num_cells){<br/>   image,imgx,imgy:=PPM(width,height),width,height;<br/>   nx:=num_cells.pump(List,(0).random.fp(imgx));<br/>   ny:=num_cells.pump(List,(0).random.fp(imgy));<br/>   nr:=num_cells.pump(List,(0).random.fp(256));  // red<br/>   ng:=num_cells.pump(List,(0).random.fp(256));  // blue<br/>   nb:=num_cells.pump(List,(0).random.fp(256));  // green<br/>\u00a0<br/>   foreach y,x in (imgy,imgx){<br/>      dmin:=(imgx-1).toFloat().hypot(imgy-1);<br/>      j:=-1;<br/>      foreach i in (num_cells){<br/>         d:=(nx[i] - x).toFloat().hypot(ny[i] - y);<br/>\t if(d&lt;dmin) dmin,j = d,i<br/>      }<br/>      image[x,y]=(nr[j]*0xff00 + ng[j])*0xff00 + nb[j];<br/>   }<br/>   image<br/>}</pre>"}]}