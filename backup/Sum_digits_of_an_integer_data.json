{"task": "Sum_digits_of_an_integer", "blocks": [{"lang": "360 Assembly", "loc": 56, "block": "<pre class=\"text highlighted_source\">*        Sum digits of an integer  08/07/2016<br/>SUMDIGIN CSECT<br/>         USING  SUMDIGIN,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \" &lt;-<br/>         ST     R15,8(R13)         \" -&gt;<br/>         LR     R13,R15            \" addressability<br/>         LA     R11,NUMBERS        @numbers<br/>         LA     R8,1               k=1<br/>LOOPK    CH     R8,=H'4'           do k=1 to hbound(numbers)<br/>         BH     ELOOPK             \"<br/>         SR     R10,R10              sum=0<br/>         LA     R7,1                 j=1<br/>LOOPJ    CH     R7,=H'8'             do j=1 to length(number)<br/>         BH     ELOOPJ               \"<br/>         LR     R4,R11                 @number<br/>         BCTR   R4,0                   -1<br/>         AR     R4,R7                  +j<br/>         MVC    D,0(R4)                d=substr(number,j,1)<br/>         SR     R9,R9                  ii=0<br/>         SR     R6,R6                  i=0<br/>LOOPI    CH     R6,=H'15'              do i=0 to 15<br/>         BH     ELOOPI                 \"<br/>         LA     R4,DIGITS                @digits<br/>         AR     R4,R6                    i<br/>         MVC    C,0(R4)                  c=substr(digits,i+1,1)<br/>         CLC    D,C                      if d=c<br/>         BNE    NOTEQ                    then<br/>         LR     R9,R6                      ii=i<br/>         B      ELOOPI                     leave i<br/>NOTEQ    LA     R6,1(R6)                 i=i+1<br/>         B      LOOPI                  end do i<br/>ELOOPI   AR     R10,R9                 sum=sum+ii<br/>         LA     R7,1(R7)               j=j+1<br/>         B      LOOPJ                end do j<br/>ELOOPJ   MVC    PG(8),0(R11)         number<br/>         XDECO  R10,XDEC             edit sum<br/>         MVC    PG+8(8),XDEC+4       output sum<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R11,8(R11)           @<a class=\"__cf_email__\" data-cfemail=\"ddb3a8b0bfb8afe09db3a8b0bfb8af\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+8<br/>         LA     R8,1(R8)             k=k+1<br/>         B      LOOPK              end do k<br/>ELOOPK   L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \" restore<br/>         XR     R15,R15            \" rc=0<br/>         BR     R14                exit<br/>DIGITS   DC     CL16'0123456789ABCDEF'<br/>NUMBERS  DC     CL8'1',CL8'1234',CL8'FE',CL8'F0E'<br/>C        DS     CL1<br/>D        DS     CL1<br/>PG       DC     CL16' '            buffer<br/>XDEC     DS     CL12               temp<br/>         YREGS<br/>         END    SUMDIGIN</pre>"}, {"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sum_Digits <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- sums the digits of an integer (in whatever base)</span><br/>   <span class=\"co1\">-- outputs the sum (in base 10)</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Sum_Of_Digits<span class=\"br0\">(</span>N: Natural; Base: Natural\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Sum: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      Val: Natural\u00a0:= N;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Val &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         Sum\u00a0:= Sum + <span class=\"br0\">(</span>Val <span class=\"kw2\">mod</span> Base<span class=\"br0\">)</span>;<br/>         Val\u00a0:= Val / Base;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Sum;<br/>   <span class=\"kw1\">end</span> Sum_Of_Digits;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Integer_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span> <span class=\"co1\">-- main procedure Sum_Digits</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;            <span class=\"co1\">--   1</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;        <span class=\"co1\">--  15</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;       <span class=\"co1\">--  15</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">123045</span>,  <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">-- 104</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">16</span>#fe#,  <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">--  11</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">16</span>#fe#,  <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">--  29</span><br/>   Put<span class=\"br0\">(</span>Sum_OF_Digits<span class=\"br0\">(</span><span class=\"nu0\">16</span>#f0e#, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">--  29</span><br/><span class=\"kw1\">end</span> Sum_Digits;</pre>"}, {"lang": "ALGOL 68", "loc": 47, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"coMULTI\"># operator to return the sum of the digits of an integer value in the #</span><br/><span class=\"coMULTI\"># specified base                                                      #</span><br/><span class=\"kw4\">PRIO</span> SUMDIGITS <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SUMDIGITS <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> value<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> base <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> base <span class=\"sy1\">&lt;</span> 2<br/>     <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># invalid base #</span><br/>         <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Base for digit sum must be at least 2\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         stop<br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"coMULTI\"># the base is OK #</span><br/>         <span class=\"kw3\">INT</span>    result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span>    rest   <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> value<span class=\"sy1\">;</span><br/>\u00a0<br/>         <span class=\"kw2\">WHILE</span> rest <span class=\"sy1\">/=</span> 0<br/>         <span class=\"kw2\">DO</span><br/>             result <span class=\"kw17\">PLUSAB</span> <span class=\"br0\">(</span> rest <span class=\"kw12\">MOD</span> base <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             rest   <span class=\"kw17\">OVERAB</span> base<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>         result<br/>     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># SUMDIGITS #</span><br/>\u00a0<br/><span class=\"coMULTI\"># additional operator so we can sum the digits of values expressed in #</span><br/><span class=\"coMULTI\"># other than base 10, e.g. 16ra is a hex lteral with value 10         #</span><br/><span class=\"coMULTI\"># (Algol 68 allows bases 2, 4, 8 and 16 for non-base 10 literals)     #</span><br/><span class=\"coMULTI\"># however as such literals are BITS values, not INTs, we need this    #</span><br/><span class=\"coMULTI\"># second operator                                                     #</span><br/><span class=\"kw4\">OP</span>   SUMDIGITS <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">BITS</span> value<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> base <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw8\">ABS</span> value SUMDIGITS base<span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># test the SUMDIGITS operator #</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"value\\base base digit-sum\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"      1\\10   10 \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>      1 SUMDIGITS 10<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"   1234\\10   10 \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>   1234 SUMDIGITS 10<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"     fe\\16   16 \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>  <span class=\"re0\">16rfe</span> SUMDIGITS 16<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"    f0e\\16   16 \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> <span class=\"re0\">16rf0e</span> SUMDIGITS 16<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># of course, we don't have to express the number in the base we sum #</span><br/>    <span class=\"coMULTI\"># the digits in...                                                  #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"     73\\10   71 \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>     73 SUMDIGITS 71<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 103, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- INTEGER DIGITS SUMMED -----------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- digitsSummed\u00a0:: (Int | String) -&gt; Int</span><br/><span class=\"kw3\">on</span> digitsSummed<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- digitAdded\u00a0:: Int -&gt; String -&gt; Int</span><br/>    <span class=\"kw3\">script</span> digitAdded<br/>\u00a0<br/>        <span class=\"co1\">-- Numeric values of known glyphs: 0-9 A-Z a-z</span><br/>        <span class=\"co1\">-- digitValue\u00a0:: String -&gt; Int</span><br/>        <span class=\"kw3\">on</span> digitValue<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> i <span class=\"kw3\">to</span> <span class=\"kw1\">id</span> <span class=\"kw3\">of</span> s<br/>            <span class=\"kw3\">if</span> i &gt; <span class=\"nu0\">47</span> <span class=\"kw2\">and</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span> <span class=\"kw3\">then</span> <span class=\"co1\">-- 0-z</span><br/>                <span class=\"kw3\">if</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">58</span> <span class=\"kw3\">then</span> <span class=\"co1\">-- 0-9</span><br/>                    i <span class=\"sy0\">-</span> <span class=\"nu0\">48</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> i &gt; <span class=\"nu0\">96</span> <span class=\"kw3\">then</span> <span class=\"co1\">-- a-z</span><br/>                    i <span class=\"sy0\">-</span> <span class=\"nu0\">87</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> i &gt; <span class=\"nu0\">64</span> <span class=\"kw2\">and</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">91</span> <span class=\"kw3\">then</span> <span class=\"co1\">-- A-Z</span><br/>                    i <span class=\"sy0\">-</span> <span class=\"nu0\">55</span><br/>                <span class=\"kw3\">else</span> <span class=\"co1\">-- unknown glyph</span><br/>                    <span class=\"nu0\">0</span><br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">else</span> <span class=\"co1\">-- unknown glyph</span><br/>                <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> digitValue<br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>accumulator, strDigit<span class=\"br0\">)</span><br/>            accumulator <span class=\"sy0\">+</span> digitValue<span class=\"br0\">(</span>strDigit<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>digitAdded, <span class=\"nu0\">0</span>, splitOn<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> digitsSummed<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- showDigitSum\u00a0:: Int -&gt; String</span><br/>    <span class=\"kw3\">script</span> showDigitSum<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy0\">&amp;</span> digitsSummed<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed, \u00ac<br/>        map<span class=\"br0\">(</span>showDigitSum, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1234</span>, <span class=\"st0\">\"254\"</span>, <span class=\"st0\">\"fe\"</span>, <span class=\"st0\">\"f0e\"</span>, <span class=\"st0\">\"999ABCXYZ\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: Text -&gt; Text -&gt; [Text]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> xs<br/><span class=\"kw3\">end</span> splitOn</pre>"}, {"lang": "ATS", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>// How to compile:<br/>// patscc -DATS_MEMALLOC_LIBC -o SumDigits SumDigits.dats<br/>//<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>extern<br/>fun{a:<a class=\"__cf_email__\" data-cfemail=\"493d0930392c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}<br/>SumDigits(n: a, base: int): a<br/>\u00a0<br/>implement<br/>{a}(*tmp*)<br/>SumDigits(n, base) = let<br/>//<br/>val base = gnumber_int(base)<br/>//<br/>fun<br/>loop (n: a, res: a): a =<br/>  if gisgtz_val&lt;a&gt; (n)<br/>    then loop (gdiv_val&lt;a&gt;(n, base), gadd_val&lt;a&gt;(res, gmod_val&lt;a&gt;(n, base)))<br/>    else res<br/>//<br/>in<br/>  loop (n, gnumber_int(0))<br/>end // end of [SumDigits]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>val SumDigits_int = SumDigits&lt;int&gt;<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>val n = 1<br/>val () = println! (\"SumDigits(1, 10) = \", SumDigits_int(n, 10))<br/>val n = 12345<br/>val () = println! (\"SumDigits(12345, 10) = \", SumDigits_int(n, 10))<br/>val n = 123045<br/>val () = println! (\"SumDigits(123045, 10) = \", SumDigits_int(n, 10))<br/>val n = 0xfe<br/>val () = println! (\"SumDigits(0xfe, 16) = \", SumDigits_int(n, 16))<br/>val n = 0xf0e<br/>val () = println! (\"SumDigits(0xf0e, 16) = \", SumDigits_int(n, 16))<br/>//<br/>} (* end of [main0] *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% sprintf<span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d`n\"</span><br/>\t<span class=\"sy0\">,</span>SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span>SumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span>SumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span>SumDigits<span class=\"br0\">(</span>0xfe<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span>SumDigits<span class=\"br0\">(</span>0xf0e<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>SumDigits<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tsum <span class=\"sy0\">+=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base<span class=\"br0\">)</span><br/>\t\tn <span class=\"sy0\">/=</span> base<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>sprintf<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>fmt<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tfor each<span class=\"sy0\">,</span> f in fmt<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>`%d<span class=\"sy0\">,</span>\u00a0% f<br/>\t<span class=\"kw1\">return</span> s<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 24, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"st0\">\"12\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"st0\">\"fe\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"st0\">\"f0e\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> sumDigits<span class=\"br0\">(</span>num,    nDigs, digits, sum, d, dig, val, sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    nDigs = <span class=\"kw4\">split</span><span class=\"br0\">(</span>num, digits, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    sum = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>d = <span class=\"nu0\">1</span>; d <span class=\"sy2\">&lt;=</span> nDigs; d<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dig = digits<span class=\"br0\">[</span>d<span class=\"br0\">]</span><br/>        val = digToDec<span class=\"br0\">(</span>dig<span class=\"br0\">)</span><br/>        sum <span class=\"sy3\">+</span>= val<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> digToDec<span class=\"br0\">(</span>dig<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw6\">return</span> <span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">\"0123456789abcdef\"</span>, <span class=\"kw4\">tolower</span><span class=\"br0\">(</span>dig<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 24, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> sumDigits<span class=\"br0\">(</span>num <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> bas <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>    <span class=\"co1\">'can handle up to base 36</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> outp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> validNums <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> tmp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> lennum <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>    <span class=\"co1\">'ensure num contains only valid characters</span><br/>    validNums <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckleft%24.shtml\"><span class=\"kw3\">LEFT$</span></a><span class=\"br0\">(</span><span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">,</span> bas<span class=\"br0\">)</span><br/>    lennum <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> lennum <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw1\">STEP</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>validNums<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckucase%24.shtml\"><span class=\"kw3\">UCASE$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>num<span class=\"sy0\">,</span> L0<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">IF</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">=</span> x <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">FUNCTION</span><br/>        tmp <span class=\"sy0\">=</span> tmp <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> <span class=\"br0\">(</span>bas <span class=\"sy0\">^</span> <span class=\"br0\">(</span>lennum <span class=\"sy0\">-</span> L0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>    <span class=\"kw1\">WHILE</span> tmp<br/>        outp <span class=\"sy0\">=</span> outp <span class=\"sy0\">+</span> <span class=\"br0\">(</span>tmp <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> bas<span class=\"br0\">)</span><br/>        tmp <span class=\"sy0\">=</span> tmp \\ bas<br/>    <span class=\"kw1\">WEND</span><br/>    sumDigits <span class=\"sy0\">=</span> outp<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumDigits<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckltrim%24.shtml\"><span class=\"kw3\">LTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumDigits<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckltrim%24.shtml\"><span class=\"kw3\">LTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumDigits<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckltrim%24.shtml\"><span class=\"kw3\">LTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span><span class=\"re1\">&amp;HFE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumDigits<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckltrim%24.shtml\"><span class=\"kw3\">LTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span><span class=\"re1\">&amp;HF0E</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumDigits<span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">      *FLOAT64<br/>      PRINT \"Digit sum of 1 (base 10) is \"; FNdigitsum(1, 10)<br/>      PRINT \"Digit sum of 12345 (base 10) is \"; FNdigitsum(12345, 10)<br/>      PRINT \"Digit sum of 9876543210 (base 10) is \"; FNdigitsum(9876543210, 10)<br/>      PRINT \"Digit sum of FE (base 16) is \"; ~FNdigitsum(&amp;FE, 16) \" (base 16)\"<br/>      PRINT \"Digit sum of F0E (base 16) is \"; ~FNdigitsum(&amp;F0E, 16) \" (base 16)\"<br/>      END<br/>\u00a0<br/>      DEF FNdigitsum(n, b)<br/>      LOCAL q, s<br/>      WHILE n &lt;&gt; 0<br/>        q = INT(n / b)<br/>        s += n - q * b<br/>        n = q<br/>      ENDWHILE<br/>      = s</pre>"}, {"lang": "bc", "loc": 20, "block": "<pre class=\"text highlighted_source\">define s(n) {<br/>    auto i, o, s<br/>\u00a0<br/>    o = scale<br/>    scale = 0<br/>\u00a0<br/>    for (i = n; i &gt; 0; i /= ibase) {<br/>        s += i\u00a0% ibase<br/>    }<br/>\u00a0<br/>    scale = o<br/>    return(s)<br/>}<br/>\u00a0<br/>ibase = 10<br/>s(1)<br/>s(1234)<br/>ibase = 16<br/>s(FE)<br/>s(F0E)</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">\"\u00a0:rebmuN\"&gt;:#,_&amp;0v<br/>|_,#!&gt;#:&lt;\"Base: \"&lt;<br/>&lt;&gt;10g+\\00g/:v:p00&amp;<br/>v^\\p01&lt;%g00:_55+\\&gt;<br/>&gt;\"\u00a0:muS\"&gt;:#,_$\\.,@</pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> SumDigits<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> base<span class=\"br0\">)</span><br/>    \tsum <span class=\"sy0\">+=</span> n <span class=\"sy0\">%</span> base<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        SumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        SumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        SumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xfe</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        SumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xf0e</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 58, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">SumDigitsOfAnInteger</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">///     Enumerates the digits of a number in a given base.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"number\"&gt; The number. &lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"base\"&gt; The base. &lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt; The digits of the number in the given base. &lt;/returns&gt;</span><br/>        <span class=\"co1\">/// &lt;remarks&gt;</span><br/>        <span class=\"co1\">///     The digits are enumerated from least to most significant.</span><br/>        <span class=\"co1\">/// &lt;/remarks&gt;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Digits<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number, <span class=\"kw4\">int</span> @<span class=\"kw1\">base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>number <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> digit<span class=\"sy0\">;</span><br/>                number <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">DivRem</span><span class=\"br0\">(</span>number, @<span class=\"kw1\">base</span>, <span class=\"kw1\">out</span> digit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> digit<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">///     Sums the digits of a number in a given base.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"number\"&gt; The number. &lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"base\"&gt; The base. &lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt; The sum of the digits of the number in the given base. &lt;/returns&gt;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> SumOfDigits<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number, <span class=\"kw4\">int</span> @<span class=\"kw1\">base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> number<span class=\"sy0\">.</span><span class=\"me1\">Digits</span><span class=\"br0\">(</span>@<span class=\"kw1\">base</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">///     Demonstrates &lt;see cref=\"SumOfDigits\" /&gt;.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> example <span class=\"kw1\">in</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span>Number <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span>Number <span class=\"sy0\">=</span> <span class=\"nu0\">12345</span>, <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span>Number <span class=\"sy0\">=</span> <span class=\"nu0\">123045</span>, <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span>,<br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span>Number <span class=\"sy0\">=</span> 0xfe, <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> 0x10<span class=\"br0\">}</span>,<br/>                    <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span>Number <span class=\"sy0\">=</span> 0xf0e, <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> 0x10<span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>example<span class=\"sy0\">.</span><span class=\"me1\">Number</span><span class=\"sy0\">.</span><span class=\"me1\">SumOfDigits</span><span class=\"br0\">(</span>example<span class=\"sy0\">.</span><span class=\"kw1\">Base</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"kw4\">int</span> SumDigits<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> digits, <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BASE <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> digits<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>BASE<span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&gt;</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> z <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>BASE,i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t  <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> t <span class=\"sy1\">=</span> x<span class=\"sy2\">/</span>z<span class=\"sy4\">;</span><br/>\t  sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>\t  x <span class=\"sy2\">-</span><span class=\"sy1\">=</span> t<span class=\"sy2\">*</span>z<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy2\">+</span>sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><br/>                  <span class=\"sy1\">&lt;&lt;</span> SumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><br/>                  <span class=\"sy1\">&lt;&lt;</span> SumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><br/>                  <span class=\"sy1\">&lt;&lt;</span> SumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xfe</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><br/>                  <span class=\"sy1\">&lt;&lt;</span> SumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xf0e</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sum<span class=\"sy0\">-</span>digits <span class=\"br0\">[</span>n base<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>number <span class=\"br0\">(</span><span class=\"kw1\">if-not</span> <span class=\"br0\">(</span><span class=\"kw1\">string?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>toString n base<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>valueOf <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> base<span class=\"br0\">)</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-digits <span class=\"br0\">(</span>number base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for n <span class=\"sy0\">=</span> number then q<br/>        for <span class=\"br0\">(</span>q r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>multiple-value-<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> n base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sum r until <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> sum_digits<span class=\"br0\">(</span>base\u00a0: Int<span class=\"br0\">)</span>\u00a0: Int32<br/>  \t<span class=\"kw2\">self</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>acc, c<span class=\"sy0\">|</span><br/>  \t\tvalue = c.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>  \t\tacc <span class=\"sy0\">+</span>= value<br/>  \t<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>.<span class=\"me1\">sum_digits</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"1234\"</span>.<span class=\"me1\">sum_digits</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"fe\"</span>.<span class=\"me1\">sum_digits</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"f0e\"</span>.<span class=\"me1\">sum_digits</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint</span> sumDigits<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> base<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>base <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"sy0\">;</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> base<span class=\"br0\">)</span><br/>        total <span class=\"sy0\">+=</span> n <span class=\"sy0\">%</span> base<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> total<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span>.<span class=\"me1\">sumDigits</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">1</span>_234.<span class=\"me1\">sumDigits</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    sumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xfe</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    sumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xf0e</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">1</span>_234.<span class=\"me1\">BigInt</span>.<span class=\"me1\">sumDigits</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def sumDigits(n, base\\\\10)<br/>  def sumDigits(n, base) when is_integer(n) do<br/>    Integer.digits(n, base) |&gt; Enum.sum<br/>  end<br/>  def sumDigits(n, base) when is_binary(n) do<br/>    String.codepoints(n) |&gt; Enum.map(&amp;String.to_integer(&amp;1, base)) |&gt; Enum.sum<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([{1, 10}, {1234, 10}, {0xfe, 16}, {0xf0e, 16}], fn {n,base} -&gt;<br/>  IO.puts \"#{Integer.to_string(n,base)}(#{base}) sums to #{ RC.sumDigits(n,base) }\"<br/>end)<br/>IO.puts \"\"<br/>Enum.each([{\"1\", 10}, {\"1234\", 10}, {\"fe\", 16}, {\"f0e\", 16}], fn {n,base} -&gt;<br/>  IO.puts \"#{n}(#{base}) sums to #{ RC.sumDigits(n,base) }\"<br/>end)</pre>"}, {"lang": "Emacs Lisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun digit-sum (n)<br/>  (apply '+<br/>        (mapcar 'string-to-number<br/>                (cdr (butlast (split-string (number-to-string n) \"\") )))))<br/>\u00a0<br/>(insert (format \"%d\\n\" (digit-sum 1234) ))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 17, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>sum_digits<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>sum_digits<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> sum_digits<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">B</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"re5\">N</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Ezhil", "loc": 21, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\"># \u0b87\u0ba4\u0bc1 \u0b92\u0bb0\u0bc1 \u0b8e\u0bb4\u0bbf\u0bb2\u0bcd \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0ba8\u0bbf\u0bb0\u0bb2\u0bbe\u0b95\u0bcd\u0b95 \u0bae\u0bca\u0bb4\u0bbf \u0b89\u0ba4\u0bbe\u0bb0\u0ba3\u0bae\u0bcd</span><br/>\u00a0<br/><span class=\"co1\"># sum of digits of a number</span><br/><span class=\"co1\"># \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0b95\u0bcd\u0b95\u0bc8\u0baf\u0bbf\u0bb2\u0bbe\u0ba9 \u0b87\u0bb2\u0b95\u0bcd\u0b95\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0ba4\u0bca\u0b95\u0bc8</span><br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0b8e\u0ba3\u0bcd_\u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd<span class=\"br0\">(</span> \u0b8e\u0ba3\u0bcd <span class=\"br0\">)</span><br/>  \u0ba4\u0bca\u0b95\u0bc8 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">@</span><span class=\"br0\">(</span> \u0b8e\u0ba3\u0bcd <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> \u0bb5\u0bb0\u0bc8<br/>     d <span class=\"sy0\">=</span> \u0b8e\u0ba3\u0bcd%<span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>     \u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf <span class=\"st0\">\"digit = \"</span><span class=\"sy0\">,</span>d<br/>     \u0b8e\u0ba3\u0bcd <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\u0b8e\u0ba3\u0bcd-d<span class=\"br0\">)</span>/<span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>     \u0ba4\u0bca\u0b95\u0bc8  <span class=\"sy0\">=</span> \u0ba4\u0bca\u0b95\u0bc8  + d<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>  \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0ba4\u0bca\u0b95\u0bc8 <br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \u0b8e\u0ba3\u0bcd_\u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd<span class=\"br0\">(</span> <span class=\"nu0\">1289</span><span class=\"br0\">)</span><span class=\"co1\">#20</span><br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \u0b8e\u0ba3\u0bcd_\u0b95\u0bc2\u0b9f\u0bcd\u0b9f\u0bb2\u0bcd<span class=\"br0\">(</span> <span class=\"nu0\">123456789</span><span class=\"br0\">)</span><span class=\"co1\"># 45</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 18, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> digsum b n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>        | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> m, r <span class=\"sy0\">=</span> Math.<span class=\"me1\">DivRem</span><span class=\"br0\">(</span>n, b<span class=\"br0\">)</span><br/>            loop <span class=\"br0\">(</span>acc <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> m<br/>        | _ <span class=\"sy0\">-&gt;</span> acc<br/>    loop <span class=\"nu0\">0</span> n<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> show <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <br/>        | n\u00a0:: b\u00a0:: r <span class=\"sy0\">-&gt;</span> printf <span class=\"st0\">\"\u00a0%d\"</span> <span class=\"br0\">(</span>digsum b n<span class=\"br0\">)</span><span class=\"sy0\">;</span> show r<br/>        | _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    show <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">1234</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> 0xFE<span class=\"sy0\">;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span> 0xF0E<span class=\"sy0\">;</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span>     <span class=\"co1\">// -&gt;  1 10 29 29</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">: sum-digits ( base n -- sum ) 0 swap [ dup zero? ] [ pick /mod swapd + swap ] until drop nip\u00a0;<br/>\u00a0<br/>{ 10 10 16 16 } { 1 1234 0xfe 0xf0e } [ sum-digits ] 2each</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: sum_int 0 begin over while swap base @ /mod swap rot + repeat nip\u00a0;<br/>\u00a0<br/> 2 base\u00a0! 11110 sum_int decimal  . cr<br/>10 base\u00a0! 12345 sum_int decimal  . cr<br/>16 base\u00a0! f0e   sum_int decimal  . cr</pre>"}, {"lang": "Fortran", "loc": 93, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Fri Jun  7 21:00:12</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; $a</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</span><br/><span class=\"co1\">!f.f08:57.29:</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!  subroutine process1(fmt,s,b)</span><br/><span class=\"co1\">!                             1</span><br/><span class=\"co1\">!Warning: Unused dummy argument 'b' at (1)</span><br/><span class=\"co1\">!digit sum       n</span><br/><span class=\"co1\">!        1 1</span><br/><span class=\"co1\">!       10 1234</span><br/><span class=\"co1\">!       29 fe</span><br/><span class=\"co1\">!       29 f0e</span><br/><span class=\"co1\">! sum of digits of n expressed in base is...</span><br/><span class=\"co1\">!      n   base    sum</span><br/><span class=\"co1\">!      1     10      1</span><br/><span class=\"co1\">!   1234     10     10</span><br/><span class=\"co1\">!    254     16     29</span><br/><span class=\"co1\">!   3854     16     29</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Fri Jun  7 21:00:12</span><br/>\u00a0<br/><span class=\"kw1\">module</span> base_mod<br/>  <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">reverse</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">subroutine</span> reverse<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, t<br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>       j <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       t <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>       a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> reverse  <br/>\u00a0<br/>  <span class=\"kw1\">function</span> antibase<span class=\"br0\">(</span>b, n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span>,n<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span>, i<br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    m <span class=\"sy0\">=</span> n<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>       a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>m, b<span class=\"br0\">)</span><br/>       m <span class=\"sy0\">=</span> m<span class=\"sy0\">/</span>b<br/>       i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">call</span> reverse<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> antibase<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> base_mod<br/>\u00a0<br/><span class=\"kw1\">program</span> digit_sum<br/>  <span class=\"kw3\">use</span> base_mod<br/>  <span class=\"kw1\">call</span> still<br/>  <span class=\"kw1\">call</span> confused<br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">subroutine</span> still<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">'(i9,a)'</span><br/>    print<span class=\"st0\">'(a9,a8)'</span>,<span class=\"st0\">'digit sum'</span>,<span class=\"st0\">'n'</span><br/>    <span class=\"kw1\">call</span> process1<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,<span class=\"st0\">'1'</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process1<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,<span class=\"st0\">'1234'</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process1<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,<span class=\"st0\">'fe'</span>,<span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process1<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,<span class=\"st0\">'f0e'</span>,<span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> still<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> process1<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,s,b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span>, s<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    print <span class=\"kw1\">fmt</span>,sum<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">'123456789abcdef'</span>,s<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"st0\">' '</span><span class=\"sy0\">//</span>s<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> process1<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> confused<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">'(3i7)'</span><br/>    print<span class=\"sy0\">*</span>,<span class=\"st0\">'sum of digits of n expressed in base is...'</span><br/>    print<span class=\"st0\">'(3a7)'</span>,<span class=\"st0\">'n'</span>,<span class=\"st0\">'base'</span>,<span class=\"st0\">'sum'</span><br/>    <span class=\"kw1\">call</span> process0<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">1</span>,<span class=\"kw1\">fmt</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process0<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">1234</span>,<span class=\"kw1\">fmt</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process0<span class=\"br0\">(</span><span class=\"nu0\">16</span>,<span class=\"nu0\">254</span>,<span class=\"kw1\">fmt</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> process0<span class=\"br0\">(</span><span class=\"nu0\">16</span>,<span class=\"nu0\">3854</span>,<span class=\"kw1\">fmt</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> confused<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> process0<span class=\"br0\">(</span>b,n,<span class=\"kw1\">fmt</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span>, n<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span><br/>    print <span class=\"kw1\">fmt</span>,n,b,sum<span class=\"br0\">(</span>antibase<span class=\"br0\">(</span>b, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> process0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> digit_sum<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 22, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> SumDigits<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, nBase <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> number &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> number = -number  <span class=\"co1\">' convert negative numbers to positive</span><br/>  <span class=\"kw1\">If</span> nBase &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> nBase = <span class=\"nu0\">2</span>   <span class=\"co1\">' nBase can't be less than 2</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">While</span> number &gt; <span class=\"nu0\">0</span><br/>    sum += number <span class=\"kw1\">Mod</span> nBase<br/>    number \\= nBase<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The sums of the digits are:\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"1    base 10\u00a0:\"</span>; SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"1234 base 10\u00a0:\"</span>; SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1234</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"fe   base 16\u00a0:\"</span>; SumDigits<span class=\"br0\">(</span>&amp;Hfe, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f0e  base 16\u00a0:\"</span>; SumDigits<span class=\"br0\">(</span>&amp;Hf0e, <span class=\"nu0\">16</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit the program\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 41, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// File digit.go</span><br/>\u00a0<br/><span class=\"kw1\">package</span> digit<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> SumString<span class=\"sy1\">(</span>n <span class=\"kw4\">string</span><span class=\"sy1\">,</span> base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"nu2\">i</span><span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> strconv<span class=\"sy3\">.</span>ErrSyntax<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Sign<span class=\"sy1\">()</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> strconv<span class=\"sy3\">.</span>ErrRange<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">64</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> Sum<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>Uint64<span class=\"sy1\">(),</span> base<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> SumBig<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> base<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Sum<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">,</span> base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>sum <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tb64 <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>base<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">/=</span> b64 <span class=\"sy1\">{</span><br/>\t\tsum <span class=\"sy2\">+=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">%</span> b64<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> SumBig<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">,</span> base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>sum <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>\tb <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetUint64<span class=\"sy1\">(</span><span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>base<span class=\"sy1\">))</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"nu2\">i</span><span class=\"sy3\">.</span>DivMod<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>\t\tsum <span class=\"sy2\">+=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>Uint64<span class=\"sy1\">())</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> digitsum <span class=\"sy0\">=</span> <span class=\"br0\">{</span> number, radix <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>number, radix<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>it, radix<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\">digsum<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>digsum base <span class=\"sy0\">=</span> f <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">where</span><br/>    f a <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> a<br/>    f a n <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> q<br/>      <span class=\"kw1\">where</span><br/>        <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a>` base<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> digsum <span class=\"nu0\">16</span> <span class=\"nu0\">255</span> <span class=\"co1\">-- \"FF\": 15 + 15 = 30</span></pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>dsum<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">|</span><span class=\"nu0\">1234</span><span class=\"sy0\">,</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">|</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> dsum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>b<span class=\"sy0\">|</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"st0\">\"r\"</span><span class=\"sy0\">||</span>n<span class=\"br0\">)</span><br/>    sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> sum <span class=\"sy0\">+:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> b <span class=\"kw1\">do</span> n <span class=\"sy0\">/:=</span> b<br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">digsum=: <span class=\"nu0\">10</span>&amp;$:\u00a0: <span class=\"sy0\">(</span>+/@<span class=\"sy0\">(</span>#.inv<span class=\"sy0\">))</span></pre>"}, {"lang": "Java", "loc": 32, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SumDigits <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><span class=\"kw4\">long</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> sumDigits<span class=\"br0\">(</span>num, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><span class=\"kw4\">long</span> num, <span class=\"kw4\">int</span> base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>num, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t    result <span class=\"sy0\">+=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">digit</span><span class=\"br0\">(</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> sumDigits<span class=\"br0\">(</span>num, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> num, <span class=\"kw4\">int</span> base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> num.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t    result <span class=\"sy0\">+=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">digit</span><span class=\"br0\">(</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span>0xfe, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span>0xf0e, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span><span class=\"st0\">\"12345678901234567890\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tn <span class=\"sy0\">+=</span> <span class=\"st0\">''</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> e<span class=\"sy0\">=</span>n.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>e<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> s<span class=\"sy0\">+=</span>parseInt<span class=\"br0\">(</span>n.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> s<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n of <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> 0xfe<span class=\"sy0\">,</span> <span class=\"st0\">'fe'</span><span class=\"sy0\">,</span> <span class=\"st0\">'f0e'</span><span class=\"sy0\">,</span> <span class=\"st0\">'999ABCXYZ'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> document.<span class=\"me1\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">' sum to '</span><span class=\"sy0\">,</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">tostring | explode | map(tonumber - 48) | add</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">sumdigits(n, base=10) = sum(digits(n, base))</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digits <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789abcdefghijklmnopqrstuvwxyz\"</span><br/>\u00a0<br/>fun sumDigits<span class=\"br0\">(</span>ns<span class=\"sy0\">:</span> String, base<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> ns.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>base <span class=\"sy0\">!</span>in <span class=\"nu0\">2</span>..<span class=\"nu0\">36</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Base must be between 2 and 36\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Number string can't be blank or empty\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>digit in n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> index <span class=\"sy0\">=</span> digits.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>digit<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span> || index <span class=\"sy0\">&gt;=</span> base<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Number string contains an invalid digit\"</span><span class=\"br0\">)</span><br/>        sum +<span class=\"sy0\">=</span> index<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span> to <span class=\"nu0\">10</span>, <span class=\"st0\">\"1234\"</span> to <span class=\"nu0\">10</span>, <span class=\"st0\">\"fe\"</span> to <span class=\"nu0\">16</span>, <span class=\"st0\">\"f0e\"</span> to <span class=\"nu0\">16</span>, <span class=\"st0\">\"1010\"</span> to <span class=\"nu0\">2</span>, <span class=\"st0\">\"777\"</span> to <span class=\"nu0\">8</span>, <span class=\"st0\">\"16xyz\"</span> to <span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The sum of digits is:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>number, base<span class=\"br0\">)</span> in numbers<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"$number<span class=\"es1\">\\t</span>base $base<span class=\"es1\">\\t</span>-&gt; ${sumDigits(number, base)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 25, "block": "<pre class=\"text highlighted_source\">define br =&gt; '&lt;br /&gt;\\n'<br/>\u00a0<br/>define sumdigits(int, base = 10) =&gt; {<br/>\tfail_if(#base &lt; 2, -1, 'Base need to be at least 2')<br/>\tlocal(<br/>\t\tout\t\t= integer,<br/>\t\tdivmod<br/>\t)<br/>\twhile(#int) =&gt; {<br/>\t\t #divmod = #int -&gt; div(#base)<br/>\t\t #int = #divmod -&gt; first<br/>\t\t #out += #divmod -&gt; second<br/>\t}<br/>\treturn #out<br/>}<br/>\u00a0<br/>sumdigits(1)<br/>br<br/>sumdigits(12345)<br/>br<br/>sumdigits(123045)<br/>br<br/>sumdigits(0xfe, 16)<br/>br<br/>sumdigits(0xf0e, 16)</pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">on sum_digits (n, base)<br/>  sum = 0<br/>  repeat while n<br/>    m = n / base<br/>    sum = sum + n - m * base<br/>    n = m<br/>  end repeat<br/>  return sum<br/>end</pre>"}, {"lang": "LiveCode", "loc": 8, "block": "<pre class=\"text highlighted_source\">function sumDigits n, base<br/>    local numb<br/>    if base is empty then put 10 into base<br/>    repeat for each char d in n<br/>        add baseConvert(d,base,10) to numb<br/>    end repeat<br/>    return numb<br/>end sumDigits</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">make \"digits \"0123456789abcdefghijklmnopqrstuvwxyz<br/>\u00a0<br/>to digitvalue\u00a0:digit<br/>   output difference find [equal?\u00a0:digit item\u00a0?\u00a0:digits] iseq 1 count\u00a0:digits 1<br/>end<br/>\u00a0<br/>to sumdigits\u00a0:number [:base 10]<br/>  output reduce \"sum map.se \"digitvalue\u00a0:number<br/>end<br/>\u00a0<br/>foreach [1 1234 fe f0e] [print (se\u00a0? \"-&gt; sumdigits\u00a0?)]</pre>"}, {"lang": "Lua", "loc": 15, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> sum_digits<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>    sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"kw1\">do</span><br/>        m <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> base<span class=\"br0\">)</span><br/>        digit <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> m <span class=\"sy0\">*</span> base<br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> digit<br/>        n <span class=\"sy0\">=</span> m<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum_digits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum_digits<span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum_digits<span class=\"br0\">(</span><span class=\"nu0\">0xfe</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum_digits<span class=\"br0\">(</span><span class=\"nu0\">0xf0e</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">sumDigits\u00a0:= proc( num )<br/>\tlocal digits, number_to_string, i;<br/>\tnumber_to_string\u00a0:= convert( num, string );<br/>\tdigits\u00a0:= [ seq( convert( h, decimal, hex ), h in seq( parse( i ) , i in number_to_string ) ) ];<br/>\treturn add( digits ); <br/>end proc:<br/>sumDigits( 1234 );<br/>sumDigits( \"fe\" );</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">Total[IntegerDigits[1234]]<br/>Total[IntegerDigits[16^^FE, 16]]</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f0\t&lt;-&gt;\t\u041f1\t\u0421x\t\u041f2\t\u0418\u041f1\t^\t\u0418\u041f0\t/\t[x]<br/>\u041f3\t\u0418\u041f0\t*\t-\t\u0418\u041f2\t+\t\u041f2\t\u0418\u041f3\t\u041f1\tx=0<br/>05\t\u0418\u041f2\t\u0421/\u041f</pre>"}, {"lang": "ML", "loc": 42, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">exception</span> <span class=\"sy0\">:</span>radix_out_of_range <span class=\"kw1\">and</span> <span class=\"sy0\">:</span>unknown_digit<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> to_radix <span class=\"br0\">(</span><span class=\"nu0\">0</span>, radix, result<span class=\"br0\">)</span> <span class=\"sy0\">=</span> implode result<br/>           <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n, radix <span class=\"sy0\">&gt;</span> <span class=\"nu0\">36</span>, result<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">raise</span> <span class=\"sy0\">:</span>radix_out_of_range<br/>           <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n rem radix <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span>, radix, result<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>               to_radix <span class=\"br0\">(</span>n div radix, radix,<br/>                         chr <span class=\"br0\">(</span>n rem radix <span class=\"sy0\">+</span> ord <span class=\"sy0\">#</span><span class=\"st0\">\"a\"</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> result<span class=\"br0\">)</span><br/>           <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n, radix, result<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>               to_radix <span class=\"br0\">(</span>n div radix, radix,<br/>                         chr <span class=\"br0\">(</span>n rem radix <span class=\"sy0\">+</span> ord <span class=\"sy0\">#</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> result<span class=\"br0\">)</span><br/>           <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n, radix<span class=\"br0\">)</span> <span class=\"sy0\">=</span> to_radix <span class=\"br0\">(</span>n, radix, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;</span><br/><span class=\"kw1\">fun</span> from_radix <span class=\"br0\">(</span>s, radix<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> <span class=\"kw1\">val</span> digits <span class=\"sy0\">=</span> explode <span class=\"st0\">\"0123456789abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">val</span> len_digits <span class=\"sy0\">=</span> len digits<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">fun</span> index <span class=\"br0\">(</span>_, n <span class=\"sy0\">&gt;=</span> radix, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">raise</span> <span class=\"sy0\">:</span>unknown_digit<br/>                  <span class=\"sy0\">|</span> <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, n, c <span class=\"sy0\">=</span> h<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>                  <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_ <span class=\"sy0\">::</span> t, n, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> index <span class=\"br0\">(</span>t, n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, c<span class=\"br0\">)</span><br/>                  <span class=\"sy0\">|</span> c <span class=\"sy0\">=</span> index <span class=\"br0\">(</span>digits, <span class=\"nu0\">0</span>, c<span class=\"br0\">)</span><br/>          <span class=\"kw1\">and</span> conv <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, radix, power, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>                 <span class=\"sy0\">|</span> <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, radix, power, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>                     conv <span class=\"br0\">(</span>t, radix, power <span class=\"sy0\">*</span> radix, index h <span class=\"sy0\">*</span> power <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>                 <span class=\"sy0\">|</span> <span class=\"br0\">(</span>s, radix<span class=\"br0\">)</span> <span class=\"sy0\">=</span> conv <span class=\"br0\">(</span>rev ` explode s, radix, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">in</span><br/>            conv <span class=\"br0\">(</span>s, radix<span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy0\">;</span><br/><span class=\"kw1\">fun</span> sumdig<br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, base, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, base, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sumdig <span class=\"br0\">(</span>t, base, from_radix <span class=\"br0\">(</span>implode <span class=\"br0\">[</span>h<span class=\"br0\">]</span>, base<span class=\"br0\">)</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>s, base<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sumdig <span class=\"br0\">(</span>explode s, base, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">;</span><br/><span class=\"kw1\">fun</span> shosum <span class=\"br0\">(</span>s, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>print <span class=\"st0\">\"sum of digits of \"</span><span class=\"sy0\">;</span> print s<span class=\"sy0\">;</span> print <span class=\"st0\">\" (base \"</span><span class=\"sy0\">;</span> print b<span class=\"sy0\">;</span> print <span class=\"st0\">\") = \"</span><span class=\"sy0\">;</span> println ` sumdig <span class=\"br0\">(</span>s, b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/>shosum <span class=\"br0\">(</span><span class=\"st0\">\"10fg\"</span>,<span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>shosum <span class=\"br0\">(</span><span class=\"st0\">\"deadbeef\"</span>,<span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>shosum <span class=\"br0\">(</span><span class=\"st0\">\"1101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\"</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>shosum <span class=\"br0\">(</span><span class=\"st0\">\"thequickbrownfoxjumpsoverthelazydog\"</span>,<span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 51, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> SumOFDigits;<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteString<span class=\"sy0\">,</span> WriteLn;<br/><span class=\"kw1\">FROM</span> SWholeIO <span class=\"kw1\">IMPORT</span><br/>  WriteInt;<br/><span class=\"kw1\">FROM</span> Conversions <span class=\"kw1\">IMPORT</span><br/>  StrBaseToLong;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SumOfDigitBase<span class=\"br0\">(</span>N<span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>; Base<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">VAR</span><br/>  Tmp<span class=\"sy0\">,</span> LBase<span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/>  Digit<span class=\"sy0\">,</span> Sum <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  Digit <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  Sum   <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  LBase <span class=\"sy0\">:=</span> Base;<br/>  <span class=\"kw1\">WHILE</span> N &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>    Tmp <span class=\"sy0\">:=</span> N <span class=\"sy0\">/</span> LBase;<br/>    Digit <span class=\"sy0\">:=</span> N <span class=\"sy0\">-</span> LBase <span class=\"sy0\">*</span> Tmp;<br/>    N <span class=\"sy0\">:=</span> Tmp;<br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>Sum<span class=\"sy0\">,</span> Digit<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> Sum;<br/><span class=\"kw1\">END</span> SumOfDigitBase;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  Num<span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  WriteString<span class=\"br0\">(</span><span class=\"st_h\">'   1 sums to '</span><span class=\"br0\">)</span>; <br/>  WriteInt<span class=\"br0\">(</span>SumOfDigitBase<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <br/>  WriteLn;<br/>  WriteString<span class=\"br0\">(</span><span class=\"st_h\">'1234 sums to '</span><span class=\"br0\">)</span>; <br/>  WriteInt<span class=\"br0\">(</span>SumOfDigitBase<span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <br/>  WriteLn;<br/>  <span class=\"kw1\">IF</span> StrBaseToLong<span class=\"br0\">(</span><span class=\"st_h\">'FE'</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> Num<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st_h\">' $FE sums to '</span><span class=\"br0\">)</span>; <br/>    WriteInt<span class=\"br0\">(</span>SumOfDigitBase<span class=\"br0\">(</span>Num<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <br/>    WriteLn;<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">IF</span> StrBaseToLong<span class=\"br0\">(</span><span class=\"st_h\">'F0E'</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> Num<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st_h\">'$F0E sums to '</span><span class=\"br0\">)</span>; <br/>    WriteInt<span class=\"br0\">(</span>SumOfDigitBase<span class=\"br0\">(</span>Num<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <br/>    WriteLn;<br/>  <span class=\"kw1\">END</span>;<br/>  WriteString<span class=\"br0\">(</span><span class=\"st_h\">'MAX(LONGCARD) (in dec) sums to '</span><span class=\"br0\">)</span>; <br/>  WriteInt<span class=\"br0\">(</span>SumOfDigitBase<span class=\"br0\">(</span><span class=\"kw3\">MAX</span><span class=\"br0\">(</span><span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <br/>  WriteLn;<br/><span class=\"kw1\">END</span> SumOFDigits.<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 67, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">parse</span> arg input<br/>inputs = <span class=\"br0\">[</span><span class=\"st0\">'1234'</span>, <span class=\"st0\">'01234'</span>, <span class=\"st0\">'0xfe'</span>, <span class=\"st0\">'0xf0e'</span>, <span class=\"st0\">'0'</span>, <span class=\"st0\">'00'</span>, <span class=\"st0\">'0,2'</span> <span class=\"st0\">'1'</span>, <span class=\"st0\">'070'</span>, <span class=\"st0\">'77, 8'</span> <span class=\"st0\">'0xf0e, 10'</span>, <span class=\"st0\">'070, 16'</span>, <span class=\"st0\">'0xf0e, 36'</span>, <span class=\"st0\">'000999ABCXYZ, 36'</span>, <span class=\"st0\">'ff, 16'</span>, <span class=\"st0\">'f, 10'</span>, <span class=\"st0\">'z, 37'</span><span class=\"br0\">]</span> <span class=\"co1\">-- test data</span><br/><span class=\"kw1\">if</span> input.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> inputs = <span class=\"br0\">[</span>input<span class=\"br0\">]</span> <span class=\"co1\">-- replace test data with user input</span><br/><span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">0</span> to inputs.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>  in = inputs<span class=\"br0\">[</span>i_<span class=\"br0\">]</span><br/>  <span class=\"kw1\">parse</span> in val . <span class=\"st0\">','</span> base .<br/>  <span class=\"me0\">dSum</span> = sumDigits<span class=\"br0\">(</span>val, base<span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Sum of digits for integer \"'</span>val<span class=\"st0\">'\" for a given base of \"'</span>base<span class=\"st0\">'\":'</span> dSum<span class=\"st0\">'\\-'</span><br/>  <span class=\"co1\">-- Carry the exercise to it's logical conclusion and sum the results to give a single digit in range 0-9</span><br/>  <span class=\"kw1\">loop</span> while dSum.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> dSum.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span><span class=\"br0\">)</span><br/>    dSum = sumDigits<span class=\"br0\">(</span>dSum, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">','</span> dSum<span class=\"st0\">'\\-'</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw3\">end</span> i_<br/>\u00a0<br/><span class=\"co1\">-- Sum digits of an integer</span><br/>method sumDigits<span class=\"br0\">(</span>val = Rexx, base = Rexx <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  rVal = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">parse</span> normalizeValue<span class=\"br0\">(</span>val, base<span class=\"br0\">)</span> val base .<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> digs for val.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">-- loop to extract digits from input and sum them</span><br/>    <span class=\"kw1\">parse</span> val dv +<span class=\"nu0\">1</span> val<br/>    <span class=\"kw1\">do</span><br/>      rVal = rVal + Integer.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span>dv.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, base<span class=\"br0\">)</span>.<span class=\"me0\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">catch</span> ex = NumberFormatException<br/>      rVal = <span class=\"st0\">'NumberFormatException:'</span> ex.<span class=\"me0\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">leave</span> digs<br/>    <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> digs<br/>  <span class=\"kw1\">return</span> rVal<br/>\u00a0<br/><span class=\"co1\">-- Clean up the input, normalize the data and determine which base to use</span><br/>method normalizeValue<span class=\"br0\">(</span>inV = Rexx, base = Rexx <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  inV = inV.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'l'</span><span class=\"br0\">)</span><br/>  base = base.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">parse</span> inV xpref +<span class=\"nu0\">2</span> . -<br/>         =<span class=\"nu0\">0</span> opref +<span class=\"nu0\">1</span> . -<br/>         =<span class=\"nu0\">0</span> . <span class=\"st0\">'0x'</span> xval . <span class=\"st0\">','</span> . -<br/>         =<span class=\"nu0\">0</span> . <span class=\"st0\">'0'</span>  oval . <span class=\"st0\">','</span> . -<br/>         =<span class=\"nu0\">0</span> dval .<br/>\u00a0<br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> xpref = <span class=\"st0\">'0x'</span> <span class=\"sy0\">&amp;</span> base.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">-- value starts with '0x' and no base supplied.  Assign hex as base</span><br/>      inval = xval<br/>      base = <span class=\"nu0\">16</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">when</span> opref = <span class=\"st0\">'0'</span>  <span class=\"sy0\">&amp;</span> base.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">-- value starts with '0' and no base supplied.  Assign octal as base</span><br/>      inval = oval<br/>      base = <span class=\"nu0\">8</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">otherwise</span> <span class=\"kw1\">do</span><br/>      inval = dval<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> base.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> base = <span class=\"nu0\">10</span> <span class=\"co1\">-- base not set.  Assign decimal as base</span><br/>  <span class=\"kw1\">if</span> inval.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> inval = <span class=\"nu0\">0</span> <span class=\"co1\">-- boundary condition.  Invalid input or a single zero</span><br/>  rVal = inval base<br/>\u00a0<br/>  <span class=\"kw1\">return</span> rVal<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 11, "block": "<pre class=\"text highlighted_source\">proc sumdigits(n, base: Natural): Natural =<br/>  var n = n<br/>  while n &gt; 0:<br/>    result += n mod base<br/>    n = n div base<br/>\u00a0<br/>echo sumDigits(1, 10)<br/>echo sumDigits(12345, 10)<br/>echo sumDigits(123045, 10)<br/>echo sumDigits(0xfe, 16)<br/>echo sumDigits(0xf0e, 16)</pre>"}, {"lang": "Oberon-2", "loc": 21, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> SumDigits;<br/><span class=\"kw1\">IMPORT</span> Out;<br/><span class=\"kw1\">PROCEDURE</span> Sum<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;base<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>\tsum<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span><span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\tn <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> base<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> sum<br/><span class=\"kw1\">END</span> Sum;<br/><span class=\"kw1\">BEGIN</span><br/>\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"1    \u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Sum<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"1234 \u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Sum<span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"0FEH \u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>0FEH<span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"OF0EH\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>0F0EH<span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> SumDigits.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 14, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sum_digits <span class=\"re1\">~digits</span> <span class=\"re1\">~base</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux sum x <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> sum <span class=\"kw1\">else</span><br/>    aux <span class=\"br0\">(</span>sum <span class=\"sy0\">+</span> x <span class=\"kw1\">mod</span> base<span class=\"br0\">)</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> base<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> digits<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d\\n\"</span><br/>    <span class=\"br0\">(</span>sum_digits <span class=\"nu0\">1</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sum_digits <span class=\"nu0\">12345</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sum_digits <span class=\"nu0\">123045</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sum_digits 0xfe <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sum_digits 0xf0e <span class=\"nu0\">16</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: sumDigits(n, base)  0 while( n ) [ n base /mod -&gt;n + ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">dsum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s <span class=\"sy0\">+=</span> n<span class=\"sy0\">%</span>base<span class=\"sy0\">;</span> n <span class=\"sy0\">\\=</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span> s</pre>"}, {"lang": "Pascal", "loc": 27, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> SumOFDigits<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> SumOfDigitBase<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>UInt64<span class=\"sy1\">;</span>base<span class=\"sy1\">:</span>LongWord<span class=\"br0\">)</span><span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  tmp<span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>  digit<span class=\"sy1\">,</span>sum <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  digit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  sum   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">While</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> base<span class=\"sy1\">;</span><br/>    digit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">-</span>base<span class=\"sy3\">*</span>tmp<span class=\"sy1\">;</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmp<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>sum<span class=\"sy1\">,</span>digit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  SumOfDigitBase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum<span class=\"sy1\">;</span>  <br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'   1 sums to '</span><span class=\"sy1\">,</span> SumOfDigitBase<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'1234 sums to '</span><span class=\"sy1\">,</span> SumOfDigitBase<span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">' $FE sums to '</span><span class=\"sy1\">,</span> SumOfDigitBase<span class=\"br0\">(</span><span class=\"re0\">$FE</span><span class=\"sy1\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'$FOE sums to '</span><span class=\"sy1\">,</span> SumOfDigitBase<span class=\"br0\">(</span><span class=\"re0\">$F0E</span><span class=\"sy1\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>   <br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'18446744073709551615 sums to '</span><span class=\"sy1\">,</span> SumOfDigitBase<span class=\"br0\">(</span>High<span class=\"br0\">(</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%letval</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">=&gt;</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$letval</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span> <span class=\"kw1\">for</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$letval</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span> <span class=\"kw1\">for</span> <span class=\"st_h\">'A'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'Z'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sumdigits <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$letval</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$number</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_ sums to \"</span> <span class=\"sy0\">.</span> sumdigits<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"co2\">qw/1 1234 1020304 fe f0e DEADBEEF/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> \u03a3 <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1234</span> <span class=\"nu0\">1020304</span> fe f0e DEADBEEF<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> \u03a3 <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$^n</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">:</span><span class=\"nu0\">36</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">function sum_digits(integer n, integer base)<br/>integer res = 0<br/>    while n do<br/>        res += remainder(n,base)<br/>        n = floor(n/base)<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>?sum_digits(1,10)<br/>?sum_digits(1234,10)<br/>?sum_digits(#FE,16)<br/>?sum_digits(#F0E,16)</pre>"}, {"lang": "PHP", "loc": 13, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> sumDigits<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/base_convert\"><span class=\"kw3\">base_convert</span></a><span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$result</span> <span class=\"sy0\">+=</span> <a href=\"http://www.php.net/intval\"><span class=\"kw3\">intval</span></a><span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">echo</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> sumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xfe</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> sumDigits<span class=\"br0\">(</span><span class=\"nu12\">0xf0e</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de sumDigits (N Base)<br/>   (or<br/>      (=0 N)<br/>      (+ (% N Base) (sumDigits (/ N Base) Base)) ) )</pre>"}, {"lang": "PL/I", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>sum_digits: procedure options (main);   /* 4/9/2012 */<br/>   declare ch character (1);<br/>   declare (k, sd) fixed;<br/>\u00a0<br/>   on endfile (sysin) begin; put skip data (sd); stop; end;<br/>   sd = 0;<br/>   do forever;<br/>      get edit (ch) (a(1)); put edit (ch) (a);<br/>      k = index('abcdef', ch);<br/>      if k &gt; 0 then /* we have a base above 10 */<br/>         sd = sd + 9 + k;<br/>      else<br/>         sd = sd + ch;<br/>   end;<br/>end sum_digits;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 16, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>DigitalSum <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span> <span class=\"re0\">$number</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$number</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span>.Length <span class=\"kw4\">-le</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span>Convert<span class=\"br0\">]</span>::ToInt32<span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span> <br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$character</span> <span class=\"kw3\">in</span> <span class=\"re0\">$number</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$digit</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Convert<span class=\"br0\">]</span>::ToInt32<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$character</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$result</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$digit</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 27, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i SumDigits<span class=\"br0\">(</span>Number.q, Base<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>\u00a0: Number <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>Number\u00a0: <span class=\"kw1\">EndIf</span><span class=\"co1\">; convert negative numbers to positive</span><br/>  <span class=\"kw1\">If</span> Base <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0: Base <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">EndIf</span> <span class=\"co1\">; base can't be less than 2</span><br/>  <span class=\"kw1\">Protected</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">While</span> Number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    sum <span class=\"sy0\">+</span> Number <span class=\"sy0\">%</span> Base<br/>    Number <span class=\"sy0\">/</span> Base<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The sums of the digits are:\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"1    base 10\u00a0: \"</span> <span class=\"sy0\">+</span> SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"1234 base 10\u00a0: \"</span> <span class=\"sy0\">+</span> SumDigits<span class=\"br0\">(</span><span class=\"nu0\">1234</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"fe   base 16\u00a0: \"</span> <span class=\"sy0\">+</span> SumDigits<span class=\"br0\">(</span>$fe, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"f0e  base 16\u00a0: \"</span> <span class=\"sy0\">+</span> SumDigits<span class=\"br0\">(</span>$f0e, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> toBaseX<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"br0\">)</span>:<br/>    output <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> num:<br/>        num<span class=\"sy0\">,</span> rem <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>        output.<span class=\"me1\">append</span><span class=\"br0\">(</span>rem<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> output<br/>\u00a0<br/><span class=\"kw1\">def</span> sumDigits<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> base <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Error: Base must be at least 2\"</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>toBaseX<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">0xfe</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">0xf0e</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 27, "block": "<pre class=\"rsplus highlighted_source\">change.<span class=\"me1\">base</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n, base<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  ret <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/integer.html\"><span class=\"kw2\">integer</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/as.integer.html\"><span class=\"kw2\">as.<span class=\"me1\">integer</span></span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/logb.html\"><span class=\"kw2\">logb</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">=</span>n, base<span class=\"sy0\">=</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>1L<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html\"><span class=\"kw2\">for</span></a> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> n <span class=\"sy0\">%%</span> base<br/>    n <span class=\"sy0\">&lt;-</span> n <span class=\"sy0\">%/%</span> base<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sum.<span class=\"me1\">digits</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n, base<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>base <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/stop.html\"><span class=\"kw2\">stop</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base must be at least 2\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>change.<span class=\"me1\">base</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span>n, base<span class=\"sy0\">=</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sum.<span class=\"me1\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>sum.<span class=\"me1\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><br/>sum.<span class=\"me1\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><br/>sum.<span class=\"me1\">digits</span><span class=\"br0\">(</span>0xfe, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>sum.<span class=\"me1\">digits</span><span class=\"br0\">(</span>0xf0e, <span class=\"nu0\">16</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (sum-of-digits n base (sum 0))<br/>  (if (= n 0)<br/>      sum<br/>      (sum-of-digits (quotient n base)<br/>                     base<br/>                     (+ (remainder n base) sum))))<br/>\u00a0<br/>(for-each<br/> (lambda (number-base-pair)<br/>   (define number (car number-base-pair))<br/>   (define base (cadr number-base-pair))<br/>   (displayln (format \"(~a)_~a = ~a\" number base (sum-of-digits number base))))<br/> '((1 10) (1234 10) (#xfe 16) (#xf0e 16)))<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>;  outputs:<br/>;    (1)_10 = 1<br/>;    (1234)_10 = 10<br/>;    (254)_16 = 29<br/>;    (3854)_16 = 29</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* REXX ************************************************************** <br/>* 04.12.2012 Walter Pachl                                               <br/>**********************************************************************/</span> <br/><span class=\"kw2\">digits</span>=<span class=\"st0\">'0123456789ABCDEF'</span>                                               <br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw2\">digits</span><span class=\"br0\">)</span>                                                <br/>  d=<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"kw2\">digits</span>,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                                                  <br/>  <span class=\"kw2\">value</span><span class=\"sy0\">.</span>d=i-<span class=\"nu0\">1</span>                                                           <br/>  <span class=\"kw3\">End</span>                                                                   <br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'1'</span>                                                           <br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'1234'</span>                                                        <br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'FE'</span>                                                          <br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'F0E'</span>                                                         <br/><span class=\"kw1\">Exit</span>                                                                    <br/>test:                                                                   <br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> number                                                      <br/>  res=<span class=\"kw6\">right</span><span class=\"br0\">(</span>number,<span class=\"nu0\">4</span><span class=\"br0\">)</span>                                                   <br/>  dsum=<span class=\"nu0\">0</span>                                                                <br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> number<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span>                                                   <br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> number d +<span class=\"nu0\">1</span> number                                        <br/>    dsum=dsum+<span class=\"kw2\">value</span><span class=\"sy0\">.</span>d                                                   <br/>    <span class=\"kw3\">End</span>                                                                 <br/>  <span class=\"kw1\">Say</span> res <span class=\"st0\">'-&gt;'</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>dsum,<span class=\"nu0\">2</span><span class=\"br0\">)</span>                                            <br/>  <span class=\"kw1\">Return</span></pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"sum digits of 1 = \" + sumDigits(1) + nl<br/>see \"sum digits of 1234 = \" + sumDigits(1234) + nl<br/>\u00a0<br/>func sumDigits n<br/>     sum = 0<br/>     while n &gt; 0.5 <br/>           m = floor(n / 10)<br/>           digit = n - m * 10<br/>           sum = sum + digit<br/>           n = m<br/>     end<br/>     return sum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw1\">def</span> sumDigits<span class=\"br0\">(</span>num, base = <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;</span>     num.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"sy0\">//</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>z, x<span class=\"sy0\">|</span> z <span class=\"sy0\">+</span> x.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw1\">end</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">nil</span><br/><span class=\"sy0\">&gt;&gt;</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"sy0\">&gt;&gt;</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">15</span><br/><span class=\"sy0\">&gt;&gt;</span> sumDigits<span class=\"br0\">(</span><span class=\"nu0\">123045</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">15</span><br/><span class=\"sy0\">&gt;&gt;</span> sumDigits<span class=\"br0\">(</span>0xfe, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">29</span><br/><span class=\"sy0\">&gt;&gt;</span> sumDigits<span class=\"br0\">(</span>0xf0e, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">29</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">struct DigitIter(usize, usize);<br/>\u00a0<br/>impl Iterator for DigitIter {<br/>    type Item = usize;<br/>    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {<br/>        if self.0 == 0 {<br/>            None<br/>        } else {<br/>            let ret = self.0\u00a0% self.1;<br/>            self.0 /= self.1;<br/>            Some(ret)<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", DigitIter(1234,10).sum::&lt;usize&gt;());<br/>}</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sumDigits<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>BigInt, base<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span>sumDigits<span class=\"br0\">(</span>x.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>, base<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sumDigits<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>String, base<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>BigInt <span class=\"sy0\">=</span> x map<span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span> sum</pre>"}, {"lang": "Scheme", "loc": 42, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; convert number to a list of digits, in desired base</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> n base<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>res '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>num n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> num base<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> num res<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> num base<span class=\"br0\">)</span> res<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> num base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; return the sum of digits of n in given base</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>digits n base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> n base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; test cases: </span><br/><span class=\"co1\">;; -- this displays each number in its original, given-base, for comparison</span><br/><span class=\"co1\">;; -- target-base is the base in which to consider each number represented, for summing the digits</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> n given<span class=\"sy0\">-</span>base target<span class=\"sy0\">-</span>base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> n given<span class=\"sy0\">-</span>base<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" base \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> given<span class=\"sy0\">-</span>base<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" has decimal value \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> n<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" =&gt; sum of digits in base \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> target<span class=\"sy0\">-</span>base<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" is \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>digits n target<span class=\"sy0\">-</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> <span class=\"nu0\">1234</span> <span class=\"nu0\">10</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #o1234 <span class=\"nu0\">8</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #xFE <span class=\"nu0\">16</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #xFE <span class=\"nu0\">16</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #xF0E <span class=\"nu0\">16</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #b1101010101010101010101010101010101 <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #b1101010101010101010101010101010101 <span class=\"nu0\">2</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>test<span class=\"sy0\">-</span><span class=\"kw1\">case</span> #b1101010101010101010101010101010101 <span class=\"nu0\">2</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 22, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: sumDigits (in var integer: num, in integer: base) is func<br/>  result<br/>     var integer: sum is 0;<br/>  begin<br/>    while num &gt; 0 do<br/>      sum +:= num rem base;<br/>      num\u00a0:= num div base;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(sumDigits(1,      10));<br/>    writeln(sumDigits(12345,  10));<br/>    writeln(sumDigits(123045, 10));<br/>    writeln(sumDigits(123045, 50));<br/>    writeln(sumDigits(16#fe,  10));<br/>    writeln(sumDigits(16#fe,  16));<br/>    writeln(sumDigits(16#f0e, 16));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func \u03a3<span class=\"br0\">(</span><span class=\"kw3\">String</span> str, base=<span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    str.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> Num<span class=\"br0\">(</span>_, base<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1234</span> <span class=\"nu0\">1020304</span> fe f0e DEADBEEF<span class=\"sy0\">&gt;</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"\u03a3(#{n}) = #{\u03a3(n)}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 19, "block": "<pre class=\"text highlighted_source\">function sumdigits(s) {<br/>\ta = ascii(strupper(s)):-48<br/>\treturn(sum(a:-(a:&gt;9)*7))<br/>}<br/>\u00a0<br/>sumdigits(\"1\")<br/>  1<br/>\u00a0<br/>sumdigits(\"1234\")<br/>  10<br/>\u00a0<br/>sumdigits(\"fe\")<br/>  29<br/>\u00a0<br/>sumdigits(\"f0e\")<br/>  29<br/>\u00a0<br/>sumdigits(inbase(16, 254, 10))<br/>  29</pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>extension String: Error {<br/>    func sumDigits(withBase base: Int) throws -&gt; Int {<br/>        func characterToInt(_ base: Int) -&gt; (Character) -&gt; Int? {<br/>            return { char in<br/>                return Int(String(char), radix: base)<br/>            }<br/>        }<br/>\u00a0<br/>        return try self.map(characterToInt(base))<br/>            .flatMap {<br/>                guard $0\u00a0!= nil else { throw \"Invalid input\" }<br/>                return $0<br/>            }<br/>            .reduce(0, +)<br/>    }<br/>}<br/>\u00a0<br/>print(try! \"1\".sumDigits(withBase: 10))<br/>print(try! \"1234\".sumDigits(withBase: 10))<br/>print(try! \"fe\".sumDigits(withBase: 16))<br/>print(try! \"f0e\".sumDigits(withBase: 16))<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> sumDigits <span class=\"br0\">{</span>num <span class=\"br0\">{</span>base <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> total <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> d <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$num</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is alpha <span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$d</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span> - <span class=\"nu0\">87</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is digit <span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"st0\">\"bad digit: $d\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$base</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"st0\">\"bad digit: $d\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> total <span class=\"re0\">$d</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$total</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursa", "loc": 7, "block": "<pre class=\"text highlighted_source\">def sumDigits (string val, int base)<br/>\tdecl int ret<br/>\tfor (decl int i) (&lt; i (size val)) (inc i)<br/>\t\tset ret (+ ret (int val&lt;i&gt; base))<br/>\tend for<br/>\treturn ret<br/>end sumDigits</pre>"}, {"lang": "Visual Basic", "loc": 26, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> sumDigits(num <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, base <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"co1\">'can handle up to base 36<br/></span>    <span class=\"kw4\">Dim</span> outp <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> validNums <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, tmp <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, x <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, lennum <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"co1\">'ensure num contains only valid characters<br/></span>    validNums = Left$(<span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>, base)<br/>    lennum = Len(num)<br/>    <span class=\"kw3\">For</span> L0 = lennum <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>        x = InStr(validNums, Mid$(num, L0, 1)) - 1<br/>        <span class=\"kw3\">If</span> -1 = x <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        tmp = tmp + (x * (base ^ (lennum - L0)))<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">While</span> tmp<br/>        outp = outp + (tmp <span class=\"kw4\">Mod</span> base)<br/>        tmp = tmp \\ base<br/>    Wend<br/>    sumDigits = outp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> tester()<br/>    Debug.<span class=\"kw4\">Print</span> sumDigits(1, 10)<br/>    Debug.<span class=\"kw4\">Print</span> sumDigits(1234, 10)<br/>    Debug.<span class=\"kw4\">Print</span> sumDigits(&amp;HFE, 16)<br/>    Debug.<span class=\"kw4\">Print</span> sumDigits(&amp;HF0E, 16)<br/>    Debug.<span class=\"kw4\">Print</span> sumDigits(<span class=\"st0\">\"2\"</span>, 2)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">code    ChOut=8, CrLf=9, IntOut=11;<br/>\u00a0<br/>func    SumDigits(N, Base);<br/>int     N, Base, Sum;<br/>[Sum:= 0;<br/>repeat  N:= N/Base;<br/>        Sum:= Sum + rem(0);<br/>until   N=0;<br/>return Sum;<br/>];<br/>\u00a0<br/>[IntOut(0, SumDigits(1,      10));  ChOut(0, ^ );<br/> IntOut(0, SumDigits(12345,  10));  ChOut(0, ^ );<br/> IntOut(0, SumDigits(123045, 10));  ChOut(0, ^ );<br/> IntOut(0, SumDigits($FE,    10));  ChOut(0, ^ );<br/> IntOut(0, SumDigits($FE,    16));  ChOut(0, ^ );<br/> IntOut(0, SumDigits($F0E,   16));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn sum(n,b=10){ <br/>   if(b==10) n.split().sum(0);  // digits to list<br/>   else      n.toString(b).split(\"\").apply(\"toInt\",b).sum(0);<br/>}</pre>"}]}